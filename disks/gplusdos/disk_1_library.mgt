( Solo Forth library )                                          \ http://programandala.net/en.program.solo_forth.htmlloaddelimited located needed-word )                               : contains ( ca1 len1 ca2 len2 -- f ) search nip nip ;          variable default-first-locatable  variable first-locatable      variable last-locatable  blocks/disk 1- last-locatable !        : delimited ( ca1 len1 -- ca2 len2 )                              dup 2+ dup allocate-stringer swap ( ca1 len1 ca2 len2 )         2dup blank  2dup 2>r drop char+ smove 2r> ;                   defer unlocated ( block -- )                                    : (located) ( ca len -- block | false )                           ?dup 0= if  drop false exit  then                               delimited last-locatable @ 1+  first-locatable @                default-first-locatable @  first-locatable !                    ?do  0 i line>string 2over contains \ i home . \ XXX INFORMER        if  2drop i unloop exit  then  break-key? #-28 ?throw           i unlocated  loop  2drop 0 ;                             defer located ( ca len -- block | false ) -->                   ( ?located reneeded reneed needed-word [needed] [unneeded] )    2variable needed-word  0. needed-word 2!                        : ?located ( n -- ) \ cr ." ?located " dup .                      dup ?exit  needed-word 2@ parsed-name 2! #-268 throw ;        defer reneeded ( ca len -- )                                    : locate-reneeded ( ca len -- ) located ?located load ;         defer reneed ( "name" -- ) defer needed ( ca len -- )           : locate-reneed ( "name" -- )                                     parse-name >stringer locate-reneeded ;                        : [needed] ( "name" -- f )                                        parse-name needed-word 2@ 2dup or                               if  compare 0= exit  then  2drop 2drop true ; immediate       : [unneeded] ( "name" -- f )                                      postpone [needed] 0= ; immediate                              : new-needed-word ( ca len -- ca' len' )                          -trailing -leading >stringer 2dup needed-word 2! ;  -->       ( locate-needed need )                                          : locate-needed ( ca len -- )                                     needed-word 2@ 2>r new-needed-word  2dup undefined?             if  locate-reneeded  else  2drop  then  2r> needed-word 2! ;  defer need ( "name" -- )                                        : locate-need ( "name" -- ) parse-name locate-needed ;          ' locate-reneeded ' reneeded    defer!                          ' locate-reneed   ' reneed      defer!                          ' locate-need     ' need        defer!                          ' locate-needed   ' needed      defer!                          ' (located)        ' located    defer!                          ' drop             ' unlocated  defer!                          blk @ 1+ dup default-first-locatable !  first-locatable !                                                                                                                                                                                                       ( use-default-need use-default-located use-no-index )           [unneeded] use-default-need ?(                                  : use-default-need ( -- )                                         ['] locate-reneeded ['] reneeded  defer!                        ['] locate-reneed   ['] reneed    defer!                        ['] locate-need     ['] need      defer!                        ['] locate-needed   ['] needed    defer! ; ?)                 [unneeded] use-default-located ?(                               : use-default-located ( -- )                                      ['] (located) ['] located defer!                                ['] drop ['] unlocated defer! ; ?)                            [unneeded] use-default-located ?(                               need use-default-need need  use-default-located                 : use-no-index ( -- )                                             use-default-need use-default-located ; ?)                                                                                     ( locate need-from need-here )                                  [unneeded] locate ?(                                            : locate ( "name" -- block | false )                              parse-name >stringer located ; ?)                             [unneeded] need-from ?( need locate                             : need-from ( "name" -- )                                         locate ?located first-locatable ! ; ?)                        [unneeded] need-here ?(                                         : need-here ( "name" -- )                                         parse-name needed-word 2@ 2>r                                   new-needed-word  2dup needed-word 2! undefined?                 if  blk @ load  else  2drop  then  2r> needed-word 2! ; ?)                                                                                                                                                                                                                                                                    ( (.info checkpoint )                                           need get-drive                                                  : (.info ( -- ) get-drive dup ." Drive " .                                      1 = if  ." CHANGED!" quit  then ;               ' (.info ' .info defer!                                         : checkpoint ( n -- )                                             2 border cr ." Check point " . (.info key drop                  0 borderassembler )                                                   get-order get-current only forth definitions                    need ?pairs need 3dup need 8* need wordlist>vocabulary          assembler-wordlist wordlist>vocabulary assembler                also assembler definitions base @ hex                           need ?rel need inverse-cond                                     0 cconstant b   1 cconstant c   2 cconstant d   3 cconstant e   4 cconstant h   5 cconstant l   6 cconstant m   7 cconstant a   6 cconstant sp  6 cconstant af                                  DD cconstant ix-op  FD cconstant iy-op                          : ix ( -- regpi ) ix-op c, h ;                                  : iy ( -- regpi ) iy-op c, h ;                                  -->                                                                                                                                                                                                                                                             ( assembler )                                                   : (c ( b "name" -- ) create c, ;                                : m1 ( 8b "name" -- ) (c does> ( -- ) ( pfa ) c@ c, ;           : m2 ( 8b "name" -- ) (c does> ( reg -- ) ( reg pfa ) c@ + c, ; : m3 ( 8b "name" -- )                                             (c does> ( reg -- ) ( reg pfa ) c@ swap 8* + c, ;             : m4 ( 8b "name" -- ) (c does> ( 8b -- ) ( 8b pfa ) c@ c, c, ;  : m5 ( 8b "name" -- ) (c does> ( 16b -- ) ( 16b pfa ) c@ c, , ; : m6 ( 8b "name" -- )                                             (c does> ( reg -- ) ( reg pfa ) CB c, c@ + c, ;               : m7 ( 8b "name" -- )                                             (c does> ( reg bit -- )                                           ( reg bit pfa ) CB c, c@ swap 8* + + c, ;  -->                                                                                                                                                                                                              ( assembler )                                                   : m8 ( 16b "name" -- ) create , does> ( -- ) ( pfa ) @ , ;      : (jr,) ( a op -- ) c, here 1+ - dup ?rel c, ;                  : m9 ( 8b "name" -- ) (c does> ( a -- ) ( a pfa ) c@ (jr,) ;    : ma ( 8b "name" -- )                                             (c does> ( disp regph -- ) ( disp regph pfa ) c@ c, drop c, ; : mb ( 8b "name" -- )                                             (c does> ( disp regph -- ) ( disp regph pfa )                   CB c, c@ c, drop c, ;                                         : mc ( 8b "name" -- )                                             (c does> ( disp regph bit -- ) ( disp regph bit pfa )           CB c, c@ rot drop rot c, swap 8* + c, ;  -->                                                                                                                                                                                                                                                                                  ( assembler )                                                   00 m1 nop, 02 m3 stap, 03 m3 incp, 04 m3 inc, 05 m3 dec, 07 m1  rlca, 08 m1 exaf, 09 m3 addp, 0A m3 ftap, 0B m3 decp, 0F m1     rrca, 10 m9 djnz, 17 m1 rla, 18 m9 jr,  1F m1 rra, 22 m5 sthl,  27 m1 daa, 2A m5 fthl, 2F m1 cpl, 32 m5 sta, 37 m1 scf, 3A m5   fta, 3F m1 ccf, 76 m1 halt, 80 m2 add, 88 m2 adc, 90 m2 sub, 98 m2 sbc, B8 m2 cp, C1 m3 pop, C5 m3 push, C6 m4 add#, C7 m2 rst, C9 m1 ret, CE m4 adc#, D3 m4 out, 41 m3 outbc, D6 m4 sub#, D9   m1 exx, DB m4 in, 40 m3 inbc, 0DE m4 sbc#, E3 m1 exsp, E6 m4    and#, E9 m1 jphl, EB m1 exde, EE m4 xor#, F3 m1 di,  F6 m4 or#, F9 m1 ldsp, FB m1 ei, FE m4 cp#, 00 m6 rlc, 08 m6 rrc, 10 m6    rl, 18 m6 rr, 20 m6 sla, 28 m6 sra, 30 m6 sll, 38 m6 srl,  40   m7 bit, 80 m7 res, C0 m7 set, A0ED m8 ldi, B0ED m8 ldir, A8ED   m8 ldd, B8ED m8 lddr, 44ED m8 neg, 57ED m8 ldai, 47ED m8 ldia,  56ED m8 im1, 5EED m8 im2, B1ED m8 cpir, 6FED m8 rld, A0 m2 and, B0 m2 or, A8 m2 xor, -->                                        ( assembler )                                                   : jpix, ( -- ) ix-op c, jphl, ;                                 : ldp#, ( 16b regp -- ) 8* 1+ c, , ;                            : ld#, ( 8b reg -- ) 8* 06 + c, c, ;                            : ld, ( reg1 reg2 -- ) 8* 40 + + c, ;                           : sbcp, ( regp -- ) ED c, 8* 42 + c, ;                          : adcp, ( regp1 regp2 -- ) ED c, 8* 4A + c, ;                   : stp, ( a regp -- ) ED c, 8* 43 + c, , ;                       : ftp, ( a regp -- ) ED c, 8* 4B + c, , ;                       : addix, ( regp -- ) ix-op c, addp, ;                           : addiy, ( regp -- ) iy-op c, addp, ;                           : clr, ( regp -- ) 0 swap ld#, ;                                : clrp, ( regp -- ) 0 swap ldp#, ;                              : ldp, ( regp1 regp2 -- ) 2dup ld, 1+ swap 1+ swap ld, ;        : subp, ( regp -- ) a and, sbcp, ;                              : tstp, ( regp -- ) dup a ld, 1+ or, ;  -->                     ( assembler )                                                   CF m4 hook,  \ rst $08                                          D7 m1 prt,   \ rst $16                                          86 ma addx, 8E ma adcx, 96 ma subx, 9E ma sbcx, A6 ma andx,     AE ma xorx, B6 ma orx,  BE ma cpx,  34 ma incx, 35 ma decx,     06 mb rlcx, 0E mb rrcx, 16 mb rlx,  1E mb rrx,                  26 mb slax, 2E mb srax, 36 mb sllx, 3E mb srlx,                 46 mc bitx, 86 mc resx, C6 mc setx,                             : ftx, ( disp regpi reg -- ) nip 8* 46 + c, c, ;                : stx, ( reg disp regpi -- ) drop swap 70 + c, c, ;             : st#x, ( 8b disp regpi -- ) drop 36 c, swap c, c, ;            : ftpx, ( disp regpi regp -- ) 3dup 1+ ftx, rot 1+ -rot ftx, ;  : stpx, ( disp regpi regp -- ) 3dup 1+ stx, rot 1+ -rot stx, ;  -->                                                                                                                                                                                             ( assembler )                                                   C2 cconstant nz?  CA cconstant z?                               D2 cconstant nc?  DA cconstant c?                               E2 cconstant po?  EA cconstant pe?                              F2 cconstant p?   FA cconstant m?                               : jp>jr ( op1 -- op2 )                                            dup C3 = if drop 18 exit then dup c? > #-273 ?throw A2 - ;    : ?ret, ( op -- ) 2- c, ;                                       : ?jp, ( a op -- ) c, , ;                                       : ?call, ( a op -- ) 2+ ?jp, ;                                  : ?jr, ( a op -- ) jp>jr (jr,) ;                                : >rmark ( -- orig ) here 1- ;                                  : rresolve ( orig dest -- ) 1- over - dup ?rel swap c! ;        : >rresolve ( orig -- ) here rresolve ;                         : <rresolve ( dest -- ) here 1- swap rresolve ; -->                                                                             ( assembler )                                                   : rahead ( -- orig ) 18 , >rmark ;                              : (rif) ( op -- orig cs-id ) , >rmark 0A ;                      : rif ( op -- orig cs-id ) jp>jr inverse-cond (rif) ;           : rthen ( orig cs-id -- ) 0A ?pairs >rresolve ;                 : relse ( orig cs-id -- orig cs-id )                              0A ?pairs 18 (rif) rot swap rthen 0A ;                        : rbegin ( -- dest cs-id ) <mark 0B ;                           : rwhile ( op -- orig cs-id ) rif 2+ ;                          : (runtil) ( dest cs-id op -- ) , 0B ?pairs <rresolve ;         : runtil ( dest cs-id op -- ) jp>jr inverse-cond (runtil) ;     : ragain ( dest cs-id -- ) 18 (runtil) ;                        : rrepeat ( dest cs-id1 orig cs-id2 --) 2swap ragain 2- rthen ; : rstep ( dest cs-id -- ) 10 (runtil) ;                         base ! set-current set-order                                                                                                    ( aif athen aelse abegin awhile auntil aagain arepeat )         get-order get-current                                           only forth-wordlist set-current         need ?pairs             assembler-wordlist >order set-current   need inverse-cond       : (aif) ( op -- orig cs-id ) c, >mark $08 ;                     : aif ( op -- orig cs-id ) inverse-cond (aif) ;                 : athen ( orig cs-id -- ) $08 ?pairs >resolve ;                 : aelse ( orig cs-id -- orig cs-id )                              $08 ?pairs $C3 (aif) rot swap athen $08 ;                     : abegin ( -- dest cs-id ) <mark $09 ;                          : awhile ( op -- orig cs-id ) aif 2+ ;                          : (auntil) ( dest cs-id op ) c, $09 ?pairs <resolve ;           : auntil ( dest cs-id op -- ) inverse-cond (auntil) ;           : aagain ( dest cs-id -- ) $C3 (auntil) ;                       : arepeat ( dest cs-id1 orig cs-id2 ) 2swap aagain 2- athen ;   set-current set-order                                           ( inverse-cond >amark >aresolve ?rel unresolved )               [unneeded] inverse-cond ?\ : inverse-cond ( op1 -- op2) 8 xor ; [unneeded] >amark ?\ : >amark ( -- a ) here 2- ;                [unneeded] >aresolve ?( need >amark                             : >aresolve ( a -- ) >amark swap ! ; ?)                         [unneeded] ?rel                                                 ?\ : ?rel ( n -- ) $80 + $FF swap u< #-269 ?throw ;             [unneeded] unresolved ?( need array>                            create unresolved0> ( -- a ) 8 cells allot                      variable unresolved> ( -- a ) unresolved0> unresolved> !        : unresolved ( n -- a ) unresolved> @ array> ; ?)                                                                                                                                                                                                                                                                                                                                               ( execute-hl, call-xt, )                                        need assembler need macro need >amark need >aresolve            macro execute-hl, ( -- )                                          0000 b stp,  >amark      \ save the Forth IP                    0000 b ldp#, >amark      \ point IP to phony_compiled_word      jphl,                    \ execute the xt in HL                 >resolve                 \ phony_compiled_word                  here cell+ ,             \ point to the phony xt following      0000 b ldp#, >aresolve   \ restore the Forth IP                 endm                                                          macro call-xt, ( xt -- ) 21 c, , execute-hl, endm                                                                                                                                                                                                                                                                                                                                               ( l: )                                                          get-order get-current                                           only forth definitions need array> need c+!                     assembler-wordlist dup >order set-current need ?rel             %01000000 cconstant rl-id  %10000000 cconstant al-id            create max-labels 8 c,  create max-l-refs 16 c,                 1 cell+ cconstant /l-ref                                        : /l-refs ( -- n ) max-l-refs c@ /l-ref * ;                     : /labels ( -- n ) max-labels c@ cells ;                        variable labels  variable l-refs                                : init-labels ( -- )                                              /labels allocate-stringer dup labels ! /labels erase            /l-refs allocate-stringer dup l-refs ! /l-refs erase ;        init-labels ' init-labels ' init-asm defer!                     : ?l# ( n -- ) max-labels c@ 1- u> #-283 ?throw ; -->                                                                           ( l: )                                                          : >l-ref ( n -- a ) /l-ref * l-refs @ + ;                       : free-l-ref? ( n -- a f ) >l-ref dup c@ 0= ;                   : free-l-ref ( -- a | 0 )                                         max-l-refs c@ 0 ?do i free-l-ref? if unloop exit then drop                      loop 0 ;                                      : new-l-ref ( orig n b -- )                                       or free-l-ref dup 0= #-285 ?throw tuck c! 1+ ! ;              : >l ( b -- a )                                                   [ rl-id al-id or invert ] cliteral and labels @ array> ;      : resolve-al# ( orig b -- ) >l @ swap ! ;                       : resolve-rl# ( orig b -- ) >l @ over 1+ - dup ?rel swap c! ;   : (resolve-ref ( orig b -- )                                      dup rl-id and if resolve-rl# else resolve-al# then ;          : al# ( -- ) here cell- dup @ ( orig n ) dup ?l# dup >l @ ?dup               if nip swap ! else al-id new-l-ref then ; -->      ( l: )                                                          : rl# ( n -- a ) dup ?l#  dup >l @ ?dup                           if nip else here 1+ dup rot rl-id new-l-ref then ;            : @l-ref ( a -- orig b ) dup 1+ @ swap c@ ;                     : resolve-ref ( a -- ) dup @l-ref (resolve-ref /l-ref erase ;   : l-id># ( b -- n ) [ rl-id al-id or invert ] cliteral and ;    : ?resolve-ref ( n1 n2 -- )                                       >l-ref dup c@ dup if   l-id># rot = if resolve-ref                                                  else drop then                                else 2drop drop then ;                      : resolve-refs ( n -- )                                           max-l-refs c@ 0 ?do dup i ?resolve-ref loop drop ;            : l! ( x n -- )                                                   dup >l dup @ #-284 ?throw rot swap ! resolve-refs ;           : l: ( n -- ) here swap l! ;                                    set-current set-order                                           ( .l )                                                          need dump                                                       assembler-wordlist >order need l:                               : .l ( -- ) labels @ /labels dump cr l-refs @ /l-refs dump ;    previousmacro endm )                                                  : macro ( "name" -- ) : asm ;                                   assembler-wordlist >order                                       : endm ( -- ) end-asm postpone ; ; immediate                    previous                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( << >> )                                                       need @c+ need for                                               : << ( -- a depth ) here depth ;                                : >> ( a depth -- )                                               depth 1- - #-258 ?throw cr base @ >r hex                        dup 4 u.r space  here over - for  c@+ 3 u.r  step drop          r> base !  space ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( ?--> update flush thru )                                      [unneeded] ?-->                                                 ?\ : ?--> ( f -- ) if  postpone -->  then ; immediate           [unneeded] update                                               ?\ : update ( -- ) disk-buffer @ $8000 or disk-buffer ! ;       [unneeded] flush                                                ?\ : flush ( -- ) save-buffers empty-buffers ;                  [unneeded] thru                                                 ?\ : thru ( block1 block2 -- ) 1+ swap ?do  i load  loop ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( continued ?load reload loads +load +thru loader )             [unneeded] continued ?\ : continued ( u -- ) ?loading (load) ;  [unneeded] ?load                                                ?\ : ?load ( block f -- ) if  dup load  then  drop ;            [unneeded] reload                                               ?\ : reload ( -- ) empty-buffers  lastblk @ load ;              [unneeded] loads ?\ : loads ( u n -- ) bounds ?do i load loop ; [unneeded] +load  [unneeded] +thru  and                         ?\ : +load ( n -- ) blk @ + load ;                              [unneeded] +thru                                                ?\ : +thru ( u1 u2 -- ) 1+ swap ?do  i +load  loop ;            [unneeded] loader                                               ?\ : loader ( u "name" -- ) create , does> ( pfa ) @ load ;                                                                                                                                                                                                     ( lineblock>source lineload load-app )                          [unneeded] lineblock>source [unneeded] lineload and             ?\ : lineblock>source ( n u -- ) blk !  c/l * >in ! ;           [unneeded] lineload ?(                                          : lineload ( n u -- )                                             dup 0= #-259 ?throw                                             nest-source lineblock>source interpret unnest-source ; ?)     [unneeded] load-app ?( need locate  variable loading-app        : end-app ( -- ) loading-app off ; end-app                      : load-app ( "name" -- )                                          loading-app on  locate blk !                                    begin   loading-app @  blk @ blocks/disk <  and  while                  blk @ (load) 1 blk +!                                   repeat  end-app ; ?)                                                                                                                                                                          ( common-indexer )                                              get-current forth-wordlist dup >order set-current               need alias need nextname need evaluate need search-wordlist     wordlist constant index-wordlist                                : indexed-name? ( ca len -- false | block true )                  index-wordlist search-wordlist 0<> ;                          variable indexed-block                                          : index-name ( ca len -- )                                        2dup indexed-name? if  drop 2drop exit  then                    nextname indexed-block @ alias ;                              : (index-block) ( block -- )                                      dup indexed-block ! 0 swap line>string evaluate ; -->                                                                                                                                                                                                                                                                         ( common-indexer )                                              wordlist constant indexer-wordlist                              : set-index-order ( -- )                                          index-wordlist set-current  indexer-wordlist 1 set-order ;    indexer-wordlist set-current                                    : ( ( "ccc<space><paren><space|eof>" -- )                         begin  parse-name 2dup s" )" str= 0=                            while  index-name  repeat  2drop ;                            indexer-wordlist >order  ' ( alias .(  previous                 : \ ( "ccc<space><backslash><space|eof>" -- )                     begin  parse-name 2dup s" \" str= 0=                            while  index-name  repeat  2drop ;                            previous set-current                                            : common-indexer ( -- ) ;                                                                                                                                                                       ( index-words indexer-words )                                   need common-indexer                                             [unneeded] index-words ?( need wordlist-words need .wordname    : index-words ( -- ) index-wordlist wordlist-words ; ?)         [unneeded] indexer-words ?( need wordlist-words need .wordname  : indexer-words ( -- ) indexer-wordlist wordlist-wordsuse-fly-index )                                               only forth definitions                                          need common-indexer need get-order need set-order               need bit-array need catch need use-default-need                 blocks/disk bit-array indexed-blocks                            : indexed-block? ( block -- f ) indexed-blocks @bit ;           : block-indexed ( block -- ) indexed-blocks !bituse-fly-index )                                               : index-block ( block -- )                                        get-current get-order set-index-order                           ['] (index-block) catch  dup #-278 <> swap ?throw               set-order set-current block-indexed ;                         : ?index-block ( block -- ) ~~                                    dup indexed-block? if  drop exit  then  index-block ;         : fly-located ( ca len -- block | false ) ~~                      2dup indexed-name? if  ~~ nip nip load exit                     then  ~~ (located) ;                                          : use-fly-index ( -- )                                            use-default-need                                                ['] fly-located     ['] located   defer!                        ['] ?index-block    ['] unlocated defer! ;                                                                                                                                                    ( make-thru-index use-thru-index )                              only forth definitions                                          need common-indexer need get-order need set-order               need evaluate need catch need use-default-located               : thru-index-reneeded ( ca len -- )                               indexed-name? 0= #-277 ?throw load ;                          : thru-index-reneed ( "name" -- )                                 parse-name thru-index-reneeded ;                              : thru-index-needed ( ca len -- )                                 needed-word 2@ 2>r  new-needed-word  2dup undefined?            if    thru-index-reneeded                                       else  2drop  then  2r> needed-word 2! ;                       : thru-index-need ( "name" -- )                                   parse-name thru-index-needed ; -->                                                                                                                                                            ( make-thru-index use-thru-index )                              : use-thru-index ( -- )                                           ['] thru-index-reneeded ['] reneeded  defer!                    ['] thru-index-reneed   ['] reneed    defer!                    ['] thru-index-need     ['] need      defer!                    ['] thru-index-needed   ['] needed    defer!                    use-default-located ;                                         : (make-thru-index) ( -- )                                        last-locatable @ 1+ first-locatable @                           ?do i (index-block) loop ;                                    : make-thru-index ( -- )                                          get-current get-order set-index-order                           ['] (make-thru-index) catch  dup #-278 <> swap ?throw           set-order set-current use-thru-index ;                                                                                                                                                        ( ascii-char? control-char? )                                   [unneeded] ascii-char? ?\ : ascii-char? ( c -- f ) 127 < ;      [unneeded] control-char? ?\ : control-char? ( c -- f ) blprintable-ascii-char? >printable-ascii-char )                 [unneeded] printable-ascii-char? ?(  need within                : printable-ascii-char? ( c -- f ) bl 127 within ; ?)           [unneeded] >printable-ascii-char ?(                             need printable-ascii-char?                                      '.' cconstant default-printable-ascii-char                      : >printable-ascii-char ( c1 -- c1 | c2 )                         dup printable-ascii-char? ?exit                                 drop default-printable-ascii-char ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( [false] [true] [if] [else] [then] )                           [unneeded] [true]  ?\  0 constant [false] immediate             [unneeded] [false] ?\ -1 constant [true]  immediate             [unneeded] [if] [unneeded] [then] [unneeded] [else] and and ?(  : [else] ( "ccc" -- )                                             1 begin  begin  parse-name dup while  2dup s" [if]" str=                        if    2drop 1+                                                  else  2dup s" [else]" str=                                            if    2drop 1- dup if  1+  then                                 else  s" [then]" str= if  1-  then                              then                                                      then  ?dup 0= if exit then                               repeat  2drop                                            refill 0= until  drop ; immediate                           : [if] ( f "ccc" -- ) 0= if postpone [else] then ; immediate    : [then] ( -- ) ; immediate ?)                                  ( body>name name>body link>name name>link name<name name>name ) [unneeded] body>name                                            ?\ need body> : body>name ( pfa -- nt ) body> >name ;           [unneeded] name>body                                            ?\ need >body : name>body ( nt -- pfa ) name> >body ;           [unneeded] link>name                                            ?\ need alias ' cell+ alias link>name ( nt -- pfa )             [unneeded] name>link                                            ?\ need alias ' cell- alias name>link ( nt -- lfa )             [unneeded] name<name                                            ?\ need name>link : name<name ( nt1 -- nt2 ) name>link far@ ;   [unneeded] name>name                                            ?\ need >>name : name>name ( nt1 -- nt2 ) name>str + >>name ;                                                                                                                                                                                                   ( >>link name>> >>name >body body> '' [''] )                    [unneeded] >>link                                               ?\ need alias  ' cell+ alias >>link ( xtp -- lfa )              [unneeded] name>>                                               ?\ : name>> ( nt -- xtp ) cell- cell- ;                         [unneeded] >>name                                               ?\ : >>name ( xtp -- nt ) cell+ cell+ ;                         [unneeded] >body                                                ?\ code >body  E1 c, 23 c, 23 c, 23 c, jppushhl, end-code       [unneeded] body>                                                ?\ code body> E1 c, 2B c, 2B c, 2B c, jppushhl, end-code        [unneeded] '' ?( need need-here need-here name>>                : '' ( "name" -- xtp ) defined dup ?defined name>> ; ?)         [unneeded] [''] ?( need need-here need-here ''                  : ['']  '' postpone literal ; immediate compile-only ?)                                                                         ( >name )                                                       need >>name need name>name need name>>                          : >name ( xt -- nt | 0 )                                          0 begin ( xt xtp )                                                dup >>name >r                                                   far@ over = if  drop r> exit  then                              r> name>name name>>                                           np@ over u< until  2drop falsename>interpret name>compile comp' [comp'] )                   [unneeded] name>interpret ?(                                    : name>interpret ( nt -- xt | 0 )                                 dup name> swap compile-only? 0= and ; ?)                      [unneeded] name>compile ?(                                      : (comp') ( nt -- xt )                                            immediate?  if    ['] execute                                               else  ['] compile,  then ;                        : name>compile ( nt -- x xt ) dup name> swap (comp') ; ?)       [unneeded] comp' ?( need need-here need-here name>compile       : comp' ( "name" -- x xt )                                        defined dup ?defined name>compile ; ?)                        [unneeded] [comp'] ?( need need-here need-here comp'            : [comp'] ( Compilation: "name" -- ) ( Run-time: -- x xt )        comp' postpone 2literal ; immediate compile-only ?)                                                                           ( there ?pairs [compile] smudge smudged )                       [unneeded] there ?\ : there ( a -- ) dp ! ;                     [unneeded] ?pairs ?\ : ?pairs ( x1 x2 -- ) <> #-22 ?throw ;     [unneeded] [compile]                                            ?\ : [compile] ( "name" -- ) ' compile, ; immediate             [unneeded] smudged                                              ?\ : smudged ( nt -- ) dup farc@ smudge-mask xor swap farc! ;   [unneeded] smudge                                               ?\ need smudged  : smudge ( -- ) latest smudged ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( ]l ]2l ]1l ]cl save-here restore-here )                       [unneeded] ]l                                                   ?\ : ]l ( x -- ) ] postpone literal ; immediate compile-only    [unneeded] ]2l                                                  ?\ : ]2l ( xd -- ) ] postpone 2literal ; immediate compile-only [unneeded] ]1l                                                  ?\ : ]1l ( x -- ) ] postpone 1literal ; immediate compile-only  [unneeded] ]cl                                                  ?\ : ]cl ( x -- ) ] postpone cliteral ; immediate compile-only  [unneeded] save-here [unneeded] restore-here and ?( need there  variable here-backup                                            : save-here ( -- ) here here-backup ! ;                         : restore-here ( -- ) here-backup @ there ; ?)                                                                                                                                                                                                                  ( possibly exec eval )                                          [unneeded] possibly ?(                                          : possibly ( "name" -- )                                          defined ?dup if name> execute then ; ?)                       [unneeded] exec ?(                                              : exec ( "name" -- i*x )                                          defined ?dup 0= #-13 ?throw name> execute ; ?)                [unneeded] eval ?( need evaluate                                : eval ( i*x "name" -- j*x ) parse-name evaluate ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( [const] [2const] [1const] [cconst] )                          [unneeded] [const] ?( need eval                                 : [const] ( "name" -- )                                           eval postpone literal ; immediate compile-only ?)             [unneeded] [2const] ?( need eval                                : [2const] ( "name" -- )                                          eval postpone 2literal ; immediate compile-only ?)            [unneeded] [1const] ?( need eval                                : [1const] ( "name" -- )                                          eval postpone 1literal ; immediate compile-only ?)            [unneeded] [cconst] ?( need eval                                : [cconst] ( "name" -- )                                          eval postpone cliteral ; immediate compile-only ?)                                                                                                                                                                                                            ( warnings ?warn )                                              need search-wordlist                                            variable warnings  warnings on                                  : no-warnings? ( -- f ) warnings @ 0= ;                         : not-redefined? ( ca len -- ca len xt false | ca len true )      2dup get-current search-wordlist 0= ;                         : ?warn ( ca len -- ca len | ca len xt )                            no-warnings? if unnest exit ( ca len ) then                   not-redefined? if unnest                 then                   ( ca len | ca len xt ) ;                                                                                                                                                                                                                                                                                                                                                                                                                                      ( warn.throw warn.message warn-throw )                          [unneeded] warn.throw ?( need ?warn                             : warn.throw ( ca len -- ca len )                                 ?warn ( ca len xt ) drop .error-word  #-257 .throw ;          ' warn.throw ' warn defer! ?)                                   [unneeded] warn.message ?( need ?warn                           : warn.message ( ca len -- ca len )                               ?warn ( ca len xt ) ." redefined " >name .name ;              ' warn.message ' warn defer! ?)                                 [unneeded] warn-throw ?( need ?warn                             : warn-throw ( ca len -- ca len )                                 ?warn ( ca len xt ) #-257 throw ;                             ' warn-throw ' warn defer! ?)                                                                                                                                                                                                                                   ( string-parameter )                                            : string-parameter ( -- ca len )                                  rp@ cell+ dup >r ( a1 ) ( R: a1 )                               @ count ( ca len ) ( R: a1 )                                    dup char+ r@ @ + ( ca len a2 ) ( R: a1 )                        r> ! ;                                                        : string-parameter2 ( -- ca len )                                 rp@ cell+ dup >r ( a1 ) ( R: a1 )                               dup @ count ( a1 ca len ) ( R: a1 )                             dup char+ rot + ( ca len a2 ) ( R: a1 )                         r> ! ;                                                        : string-parameter3 ( -- ca len )                                 rp@ cell+ dup ( a1 )                                            dup @ count ( a1 ca len )                                       rot dup >r over char+ over + ( ca len a2 )                      r> ! ;                                                        ( buffer: cvariable enum cenum enumcell link@ link, )           [unneeded] buffer:                                              ?\ : buffer: ( u "name" -- ) create allot ;                     [unneeded] cvariable                                            ?\ : cvariable ( "name"  -- ) create 1 allot ;                  [unneeded] enum                                                 ?\ : enum (  n "name" -- n+1 ) dup constant 1+ ;                [unneeded] cenum                                                ?\ : cenum (  n "name" -- n+1 ) dup cconstant 1+ ;              [unneeded] enumcell                                             ?\ : enumcell (  n "name" -- n+cell ) dup constant cell+ ;      [unneeded] link@  [unneeded] link, and ?exit                    need alias ' @ alias link@ ( node1 -- node2 )                   : link, ( node -- ) here over @ , swap ! ;                                                                                                                                                      ( array> 2array> )                                              [unneeded] array> ?(                                            code array> ( n a1 -- a2 )                                        D1 c, E1 c, 29 c, 19 c, jppushhl, end-code ?)                 [unneeded] 2array> ?(                                           code 2array> ( n a1 -- a2 )                                       D1 c, E1 c, 29 c, 29 c, 19 c, jppushhl, end-codebitmasks bits>bytes bit-array !bit @bit )                     need align need alias need cset need creset                     create bitmasks 128 c, 64 c, 32 c, 16 c, 8 c, 4 c, 2 c, 1 c,    : bits>bytes ( n1 -- n2 ) 8 /mod swap 0<> - ;                   : bit-array ( n "name" -- )                                       create bits>bytes allot align                                   does> ( n -- b ca )                                               ( n pfa ) swap 8 /mod >r bitmasks + c@ swap r> + ;          : !bit ( f b ca -- ) rot if  cset exit  then  creset ;          ' c@and? alias @bit ( b ca -- f )                                                                                                                                                                                                                                                                                                                                                                                                                               ( 1array } 2array }} )                                          [unneeded] 1array ?( need } need align                          : 1array ( n1 n2 "name" -- )                                      create 2dup , , * allot align ; ?)                            [unneeded] } ?( need <=                                         : array>items ( a -- n ) cell+ @ ;                              : } ( a1 n -- a2 )                                                over array>items over <= over 0< or #-272 ?throw                over @ * + cell+ cell+ ; ?)                                   [unneeded] 2array ?( need } need align                          : 2array ( n1 n2 n3 "name" -- )                                   create >r tuck , ( n2 n1 ) r@ , * dup , r> * allot align ;    : }} ( a1 n1 n2 -- a2 ) 2>r cell+ dup cell- @  r> * r> + } ;    ?)                                                                                                                                                                                              ( avalue 2avalue cavalue )                                      [unneeded] avalue ?( need array>                                : avalue ( n "name" -- )                                          create  cells allot                                             does> ( n -- x ) ( n pfa ) array> @ ; ?)                      [unneeded] 2avalue ?( need 2array>                              : 2avalue ( n "name" -- )                                         create  [ 2 cells ] literal * allot                             does> ( n -- xd ) ( n pfa ) 2array> 2@ ; ?)                   [unneeded] cavalue ?( need align                                : cavalue ( n "name" -- )                                         create  allot align                                             does> ( n -- x ) ( n pfa ) + c@ ; ?)                                                                                                                                                                                                                          ( ato +ato 2ato )                                               [unneeded] ato ?( need >body                                    : (ato) ( x n xt -- ) >body array> ! ;                          : ato ( x n "name" -- )                                           compiling?  if    postpone ['] postpone (ato)                               else  ' (ato)  then ; immediate ?)                [unneeded] +ato ?( need >body                                   : (+ato) ( n1 n2 xt -- ) >body array> +! ;                      : +ato ( n1 n2 "name" -- )                                        compiling? if    postpone ['] postpone (+ato)                              else  ' (+ato)  then ; immediate ?)                [unneeded] 2ato ?( need >body                                   : (2ato) ( xd n xt -- ) >body 2array> 2! ;                      : 2ato ( xd n "name" -- )                                         compiling?  if    postpone ['] postpone (2ato)                              else  ' (2ato)  then ; immediate ?)               ( cato +cato )                                                  [unneeded] cato ?( need >body                                   : (cato) ( c n xt -- ) >body + c! ;                             : cato ( x n "name" -- )                                          compiling?  if    postpone ['] postpone (cato)                              else  ' (cato)  then ; immediate ?)               [unneeded] +cato ?(                                             : (+cato) ( c n xt -- ) >body + c+! ;                           : +cato ( n1 n2 "name" -- )                                       compiling? if    postpone ['] postpone (+cato)                             else  ' (+cato)  then ; immediate ?)                                                                                                                                                                                                                                                                                                                                               ( faravariable far2avariable farcavariable )                    [unneeded] faravariable ?( need farallot need array>            : faravariable ( n "name" -- )                                    create  np@ , cells farallot                                    does> ( n -- a ) ( n pfa ) @ array> ; ?)                      [unneeded] far2avariable ?( need farallot need 2array>          : far2avariable ( n "name" -- )                                   create  np@ , [ 2 cells ] cliteral * farallot                   does> ( n -- a ) ( n pfa ) @ 2array> ; ?)                     [unneeded] cavariable ?( need farallot                          : farcavariable ( n "name" -- )                                   create  np@ , farallot                                          does> ( n -- ca ) ( n pfa ) @ + ; ?)                                                                                                                                                                                                                          ( avariable 2avariable cavariable )                             [unneeded] avariable ?( need array>                             : avariable ( n "name" -- )                                       create  cells allot                                             does> ( n -- a ) ( n pfa ) array> ; ?)                        [unneeded] 2avariable ?( need 2array>                           : 2avariable ( n "name" -- )                                      create  [ 2 cells ] cliteral * allot                            does> ( n -- a ) ( n pfa ) 2array> ; ?)                       [unneeded] cavariable ?( need align                             : cavariable ( n "name" -- )                                      create  allot align                                             does> ( n -- ca ) ( n pfa ) + ; ?)                                                                                                                                                                                                                            ( associative: )                                                : associative: ( n "name" -- )                                    constant                                                        does> ( x -- index )                                              ( x pfa )                                                       dup @ ( x pfa n ) -rot dup @ 0 ( n x pfa n 0 )                  do ( n x pfa )                                                    cell+ 2dup @ = ( n x pfa' flag )                                if  2drop drop i unloop exit  then                            loop 2drop ( n ) ;                                                                                                                                                                                                                                                                                                                                                                                                                                          ( associative-list item? item create-entry )                    need search-wordlist                                            : associative-list ( "name" -- ) wordlist constant ;            : item? ( ca len wid -- false | xt true ) search-wordlist 0<> ; : item ( ca len wid -- i*x ) item? 0= #-13 ?throw execute ;     : create-entry ( i*x wid xt "name" -- )                           get-current >r swap set-current  create execute                 r> set-currententry: centry: 2entry: sentry: items )                        need create-entry  [unneeded] entry: ?(                         : entry: ( x wid "name" -- )                                      ['] , create-entry does> ( -- x ) ( pfa ) @ ; ?)              [unneeded] centry: ?(                                           : centry: ( c wid "name" -- )                                     ['] c, create-entry does> ( -- c ) ( pfa ) c@ ; ?)            [unneeded] 2entry: ?(                                           : 2entry: ( dx wid "name" -- )                                    ['] 2, create-entry does> ( -- dx ) ( pfa ) 2@ ; ?)           [unneeded] sentry: ?(                                           : sentry: ( ca len wid "name" -- )                                ['] s, create-entry does> ( -- ca len ) ( pfa ) count ; ?)    [unneeded] items ?exit need alias need wordlist-words           ' wordlist-words alias items ( wid -- )                                                                                         ( begin-stringtable end-stringtable )                           : begin-stringtable ( "name" -- stringtable-sys )                 create  here ( a1 ) cell allot here ( a1 a2 )                   does> ( n -- ca len )                                             ( n pfa ) @ swap cells + @ count ;                          : end-stringtable ( stringtable-sys -- )                          ( a1 a2 )                                                       here rot !   \ set the index                                    here swap ( a3 a2 )                                             begin  2dup <>  while                                             dup ,   \ store the start of the string in the index            count chars +  \ move to the next string                      repeat  2drop ;                                                                                                                                                                                                                                               ( +field field: 2field: cfield: begin-structure end-structure ) [unneeded] +field ?\ defer +field ( n1 n2 "name" -- n3 ) exit   [unneeded] field: ?( need +field                                : field:   ( n1 "name" -- n2 ) cell +field ; ?)                 [unneeded] 2field: ?( need +field                               : 2field: ( n1 "name" -- n2 ) [ 2 cells ] cliteral +field ; ?)  [unneeded] cfield: ?( need +field                               : cfield: ( n1 "name" -- n2 ) [ 1 chars ] cliteral +field ; ?)  [unneeded] begin-structure [unneeded] end-structure and ?(      : begin-structure ( "name" -- struct-sys 0 )                      create  >mark 0 does> ( -- n ) ( pfa ) @ ;                    : end-structure ( struct-sys +n -- ) swap ! ; ?)                                                                                                                                                                                                                                                                                ( +field-unopt +field-opt-0 )                                   [unneeded] +field-unopt ?( need +field                          : +field-unopt ( n1 n2 "name" -- n3 )                             create over , + does> ( a -- a' ) ( a pfa ) @ + ;             ' +field-unopt ' +field defer! ?)                               [unneeded] +field-opt-0 ?( need +field                          : +field-opt-0 ( n1 n2 "name" -- n3 )                             : over ?dup if    postpone literal postpone +                               else  immediate                                                 then  postpone ; + ;                              ' +field-opt-0 ' +field defer! ?)                                                                                                                                                                                                                                                                                                                                                               ( +field-opt-0124 )                                             [unneeded] +field-opt-0124 ?( need case need +field             : +field-opt-0124 ( n1 n2 "name" -- n3 )                          :                                                               over case                                                       0                    of immediate                     endof     1                    of postpone 1+                   endof     cell                 of postpone cell+                endof     [ 2 cells ] cliteral of postpone cell+ postpone cell+ endof     dup  postpone literal postpone +  \ default                     endcase postpone ; + ;                                        ' +field-opt-0124 ' +field defer! ?)                                                                                                                                                                                                                                                                                            ( const cconst 2const )                                         [unneeded] const ?(                                             : const ( x "name" -- )                                           create immediate ,                                              does>  @ executing? ?exit  postpone literal ; ?)              [unneeded] cconst ?(                                            : cconst ( c "name" -- )                                          create immediate c,                                             does>  c@ executing? ?exit  postpone cliteral ; ?)            [unneeded] 2const ?(                                            : 2const ( xd "name" -- )                                         create immediate 2,                                             does>  2@ executing? ?exit  postpone 2literal ; ?)                                                                                                                                                                                                            ( data end-data )                                               : data ( n "name" --  n orig )                                    create >mark                                                    does> ( -- a len ) ( pfa ) dup cell+ swap @ ;                 : end-data ( n orig -- ) here over cell+ - rot / swapc!> )                                                  need >body                                                      [unneeded] !> ?(                                                : !>                                                              ' >body compiling? if    postpone literal postpone ! exit                          then  ! ; immediate ?)                     [unneeded] 2!> ?(                                               : 2!>                                                             ' >body compiling? if    postpone literal postpone 2! exit                         then  2! ; immediate ?)                    [unneeded] c!> ?(                                               : c!>                                                             ' >body compiling? if    postpone literal postpone c! exit                         then  c! ; immediate ?)                                                                                                                                                    ( storer cstorer 2storer )                                      [unneeded] storer ?(                                            : storer ( x a "name" -- )                                        create  2,  does>   ( -- ) ( pfa ) 2@ ! ; ?)                  [unneeded] cstorer ?(                                           : cstorer ( c ca "name" -- )                                      create  2,  does>   ( -- ) ( pfa ) 2@ c! ; ?)                 [unneeded] 2storer ?(                                           : 2storer ( xd a "name" -- )                                      create  , 2,                                                    does>   ( -- ) ( pfa ) dup cell+ 2@ rot @ 2! ; ?)                                                                                                                                                                                                                                                                                                                                             ( ucreate ?user uallot user 2user )                             [unneeded] ucreate                                              ?\ : ucreate ( "name" -- ) udp @ (user) ;                       [unneeded] ?user ?(                                             : ?user ( -- )                                                    udp @ dup /user > #-279 ?throw  0< #-280 ?throw ; ?)          [unneeded] uallot ?( need ?user                                 : uallot ( n -- ) udp +! ?user ; ?)                             [unneeded] user ?( need ucreate need uallot                     : user ( "name" -- ) ucreate cell uallot ; ?)                   [unneeded] 2user ?( need ucreate need uallot                    : 2user ( "name" -- )                                             ucreate [ 2 cells ] literal uallot ; ?)                                                                                                                                                                                                                       ( val 2val cval )                                               [unneeded] val ?(  variable (val)                               : init-val ( -- ) ['] @ (val) ! ; init-val                      : val ( x "name" -- )                                             create , does> ( -- ) ( pfa ) (val) perform init-val ;        : toval ( -- ) ['] ! (val) ! ; ?)                               [unneeded] 2val ?(  variable (2val)                             : init-2val ( -- ) ['] 2@ (2val) ! ; init-2val                  : 2val ( xd "name" -- )                                           create 2, does> ( -- ) ( pfa ) (2val) perform init-2val ;     : 2toval ( -- ) ['] 2! (2val) ! ; ?)                            [unneeded] cval ?(  variable (cval)                             : init-cval ( -- ) ['] c@ (cval) ! ; init-cval                  : cval ( xd "name" -- )                                           create c, does> ( -- ) ( pfa ) (cval) perform init-cval ;     : ctoval ( -- ) ['] c! (cval) ! ; ?)                            ( cvalue value 2value to )                                      [unneeded] cvalue                                               ?\ : cvalue ( c "name"  -- ) create 0 c, c, does> 1+ c@ ;       [unneeded] value                                                ?\ : value ( n "name"  -- ) create 1 c, , does> 1+ @ ;          [unneeded] 2value                                               ?\ : 2value ( x1 x2 "name"  -- ) create 2 c, 2, does> 1+ 2@ ;   [unneeded] cvalue [unneeded] value [unneeded] 2value and and    [defined] to or ?(                                              need >body need array>                                          create to> ' c! , ' ! , ' 2! ,                                  : to                                                              ' >body dup 1+ swap c@ to> array>                               compiling? if swap postpone literal @ compile, exit then                   perform ; immediate                                                                                                ( xsize xp xp0 xstack xfree allocate-xstack allot-xstack )      [unneeded] xsize  [unneeded] xp and  [unneeded] xp0 and         [unneeded] xstack and ?(                                        need value                                                      0 value xsize  0 value xp  0 value xp0                          : xstack ( a -- )                                                 dup @ to xp0  cell+ dup to xp  cell+ @ to xsize ; ?)          [unneeded] xfree ?\ : xfree ( -- ) xp0 cell+ free throw ;       [unneeded] allocate-xstack ?( need allocate                     : allocate-xstack ( n -- a )                                      cells here >r allocate throw cell- dup , , , r> ; ?)          [unneeded] allot-xstack ?(                                      : allot-xstack ( n -- a )                                         cells dup here dup >r cell+ cell+ dup , , , allot r> ; ?)                                                                                                                                     ( >x x@ xdrop x> xdup xpick )                                   [unneeded] >x ?( need xp                                        : >x ( x -- ) ( X: -- x ) cell xp +!  xp @ ! ; ?)               [unneeded] x> ?( need x@ need xdrop                             : x> ( -- x ) ( X: x -- ) x@ xdrop ; ?)                         [unneeded] x@ ?( need xp                                        : x@ ( -- x ) ( X: x -- x ) xp @ @ ; ?)                         [unneeded] xdrop ?( need xp                                     : xdrop ( X: x -- ) [ cell negate ] literal xp +! ; ?)          [unneeded] xdup ?( need x@ need >x                              : xdup ( X: x -- x x ) x@ >x ; ?)                               [unneeded] xpick ?( need xp                                     : xpick ( u -- x'u ) ( X: x'u ... x'0 -- x'u ... x'0 )            xp @ swap cells - @ ; ?)                                      [unneeded] xover ?( need xpick need >x                          : xover ( X: x1 x2 -- x1 x2 x1 ) 1 xpick >x ; ?)                ( 2x@ 2>x 2x> 2xdrop 2xdup )                                    [unneeded] 2x@ ?( need x@ need xpick                            : 2x@ ( -- x1 x2 ) ( X: x1 x2 -- x1 x2 )                          x@ 1 xpick swap ; ?)                                          [unneeded] 2>x ?( need >x                                       : 2>x ( x1 x2 -- ) ( X: -- x1 x2 ) swap >x >x ; ?)              [unneeded] 2x> ?( need x>                                       : 2x> ( -- x1 x2 ) ( X: x1 x2 -- ) x> x> swap ; ?)              [unneeded] 2xdrop ?( need xp                                    : 2xdrop ( X: x1 x2 -- ) [ -2 cells ] literal xp +! ; ?)        [unneeded] 2xdup ?( need xover                                  : 2xdup ( X: x1 x2 -- x1 x2 x1 x2 ) xover xover ; ?)                                                                                                                                                                                                                                                                            ( xclear xdepth .xs )                                           [unneeded] xclear ?( need xp0 need xp                           : xclear ( -- ) xp0 xp ! ; ?)                                   [unneeded] xlen [unneeded] xdepth and ?( need xp need xp0       : xlen ( -- n ) xp @ xp0 - ;                                    : xdepth ( -- n ) xlen cell / ; ?)                              [unneeded] .xs ?(                                               need xp0 need xlen need xdepth need .depth                      : (.xs) ( -- ) xp0 cell+ xlen bounds ?do  i @ . cell +loop ;    : .xs ( -- ) xdepth dup .depth if  (.xs)  then ; ?)                                                                                                                                                                                                                                                                                                                                                                                                             ( 2nip pick roll )                                              [unneeded] 2nip ?( code 2nip ( x1 x2 x3 x4 -- x3 x4 )             E1 c, D1 c, F1 c, F1 c, C3 c, pushhlde , end-code ?)          [unneeded] pick ?(                                              code pick ( xu .. x1 x0 u -- xu .. x1 x0 xu )                     E1 c,  29 c,  39 c,  C3 c, fetchhl , end-code ?)              [unneeded] roll ?( need assembler need unresolved need >amark   code roll ( xu xn .. x0 u -- xn .. x0 xu )                        h pop, h addp, h d ldp, sp addp,                                b push, m c ld, h incp, m b ld,                                 b push, d b ldp, h d ldp, b tstp,                               0000 z? ?jp, >amark 0 unresolved ! h decp, h decp, lddr,        0 unresolved @ >resolve h pop, b pop, exsp,                     jpnext, end-code ?)                                                                                                                                                                           ( 3drop 4drop 3dup )                                            [unneeded] 3drop ?(                                             code 3drop ( x1 x2 x3 -- )                                        E1 c,  E1 c,  E1 c,  jpnext, end-code ?)                      [unneeded] 4drop ?(                                             code 4drop ( x1 x2 x3 x4 -- )                                     E1 c,  E1 c,  E1 c,  E1 c,  jpnext, end-code ?)               [unneeded] 3dup ?(                                              code 3dup ( x1 x2 x3 -- x1 x2 x3 x1 x2 x3 )                       D9 c,                                                           C1 c,  D1 c,  E1 c,  E5 c,  D5 c,  C5 c,  E5 c,  D5 c,  C5 c,   D9 c,  jpnext, end-code ?)                                                                                                                                                                                                                                                                                                    ( 2rot swapped )                                                [unneeded] 2rot ?( need roll                                    : 2rot ( x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2 )                 5 roll 5 roll ; ?)                                            [unneeded] swapped ?(                                           : swapped ( i*x n1 n2 -- j*x )                                    >r 1+ cells sp@ +     ( i*x a1 ) ( R: n2 )                      r> 2+ cells sp@ +     ( i*x a1 a2 )                             over @ over @         ( i*x a1 a2 x1 x2 )                       >r swap !  r> swap ! ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                     ( nup drup dip 0dup -dup )                                      [unneeded] nup ?( code nup ( x1 x2 -- x1 x1 x2 )                  E1 c,  D1 c,  D5 c,  C3 c, pushhlde , end-code ?)             [unneeded] drup ?( code drup ( x1 x2 -- x1 x1 )                   D1 c,  E1 c,  E5 c,  E5 c,  jpnext, end-code ?)               [unneeded] dip ?( code dip ( x1 x2 -- x2 x2 )                     E1 c, D1 c, E5 c, E5 c,  jpnext, end-code ?)                  [unneeded] 0dup ?( code 0dup ( x -- x | 0 0 )                     E1 c,  78 04 + c,  B0 05 + c,                                   C2 c, pushhl ,  E5 c,  jppushhl, end-code ?)                  [unneeded] -dup ?( code -dup ( x -- x | x x )                     E1 c,  CB c, 7C c,  C2 c, pushhl ,  E5 c,  jppushhl,            end-code ?)                                                                                                                                                                                                                                                   ( ndrop 2ndrop >true >false 2>true 2>false )                    [unneeded] ndrop ?(                                             code ndrop ( x1..xn n -- )                                        E1 c, 29 c, EB c, 21 c, 0000 , 39 c, 19 c, F9 c,                jpnext, end-code ?)                                           [unneeded] 2ndrop ?(                                            code 2ndrop ( dx1..dxn n -- )                                     E1 c, 29 c, 29 c, EB c, 21 c, 0000 , 29 c, 19 c, F9 c,          jpnext, end-code ?)                                           [unneeded] >true [unneeded] 2>true and ?(                       code 2>true ( x1 x2 -- true ) E1 c, end-code                    code >true ( x -- true ) E1 c, ' true jp, end-code ?)           [unneeded] >false [unneeded] 2>false and ?(                     code 2>false ( x1 x2 -- false ) E1 c, end-code                  code >false ( x -- false ) E1 c, ' false jp, end-code ?)                                                                        ( dzx7s )                                                       need assembler also assembler need l: previous                  code dzx7s ( a1 a2 -- )                                         exx, d pop, h pop, 80 a ld#, rbegin ldi,                        #0 l: #2 call, al# c? runtil                                    d push, 0 b ldp#, b d ld, rbegin d inc,                         #2 call, al# c? runtil                                          rbegin #2 nc? ?call, al# c rl, b rl, #1 rl# c? ?jr, d dec,      z? runtil b incp,                                               m e ld, h incp, e sll, c? rif 10 d ld#,                         rbegin #2 call, al# d rl, c? runtil d inc, d srl,               rthen e rr, exsp, h push, d sbcp, d pop, ldir,                  #1 l: h pop, #0 rl# nc? ?jr, #2 call, al# exx, jpnext,          #2 l: a add, nz? ?ret, m a ld, h incp, rla, ret, end-code                                                                                                                                       ( dzx7t )                                                       need assembler also assembler need l: previous                  code dzx7t ( a1 a2 -- )                                         exx, d pop, h pop, 80 a ld#, rbegin ldi,                        #0 l: a add, #3 z? ?call, al# c? runtil                         d push, 1 b ldp#, b d ld,                                       rbegin d inc, a add, #3 z? ?call, al# c? runtil #1 jp, al#      rbegin a add, #3 z? ?call, al# c rl, b rl, #2 rl# c? ?jr,       #1 l: d dec, z? runtil b incp, m e ld, h incp, e sll,           c? rif a add, #3 z? ?call, al# d rl, a add, #3 z? ?call, al#    d rl, a add, #3 z? ?call, al# d rl, a add, #3 z? ?call, al#     ccf, nc? rif d inc, rthen                                       rthen e rr, exsp, h push, d sbcp, d pop, ldir,                  #2 l: h pop, #0 nc? ?jp, al# #3 call, al# exx, jpnext,          #3 l: m a ld, h incp, rla, ret, end-code                                                                                        ( dzx7m )                                                       need assembler also assembler need l:                           max-labels c@ #23 max-labels c! previous                        code dzx7m ( a1 a2 -- )                                         exx, d pop, h pop, 80 a ld#, rbegin ldi,                        #0 l: a add, #8 rl# z? ?jr, #3 rl# c? ?jr,                      #1 l: ldi, #22 l: a add, c? runtil                              d push, 1 b ldp#, b d ld,                                       #2 l: d inc, a add, #9 rl# z? ?jr, #2 rl# nc? ?jr, #5 jp, al#   #3 l: d push, 1 b ldp#, b d ld,                                 #4 l: d inc, a add, #10 rl# z? ?jr, #4 rl# nc? ?jr, #15 jp, al# rbegin a add, #11 rl# z? ?jr, c rl, b rl, #12 rl# c? ?jr,       #5 l: d dec, z? runtil b incp, m e ld, h incp, e sll,           #7 rl# nc? ?jr, a add, d rl, a add, #13 rl# z? ?jr,             d rl, a add, d rl, a add, #14 rl# z? ?jr, ccf, #7 rl# c? ?jr,   -->                                                             ( dzx7m )                                                       #6 l: d inc,                                                    #7 l: e rr, exsp, h push, d sbcp, d pop, ldir, h pop,           #22 jp, al#                                                     #8 l: m a ld, h incp, rla, #3 rl# c? ?jr, #1 jp, al#            #9 l: m a ld, h incp, rla, #2 rl# nc? ?jr, #5 jp, al#           #10 l: m a ld, h incp, rla, #4 rl# nc? ?jr, #15 jp, al#         #11 l: m a ld, h incp, rla, c rl, b rl, #5 nc? ?jp, al#         #12 l: d pop, exx, jpnext,                                      #13 l: m a ld, h incp, rla, d rl, a add, d rl, a add, ccf,      #7 rl# c? ?jr, #6 jp, al#                                       #14 l: m a ld, h incp, rla, ccf, #7 rl# c? ?jr, #6 jp, al#      rbegin a add, #18 rl# z? ?jr, c rl, b rl, #19 rl# c? ?jr,       #15 l: d dec, z? runtil b incp, -->                                                                                                                                                             ( dzx7m )                                                       m e ld, h incp, e sll, #17 rl# nc? ?jr, a add,                  #20 rl# z? ?jr, d rl, a add, d rl, a add,                       #21 rl# z? ?jr, d rl, a add, ccf, #17 rl# c? ?jr,               #16 l: d inc,                                                   #17 l:                                                          e rr, exsp, h push, d sbcp, d pop, ldir, h pop, #0 jp, al#      #18 l: m a ld, h incp, rla, c rl, b rl, #15 nc? ?jp, al#        #19 l: d pop, exx, jpnext,                                      #20 l: m a ld, h incp, rla, d rl, a add, d rl, a add,           d rl, a add, ccf, #17 rl# c? ?jr, #16 jp, al#                   #21 l: m a ld, h incp, rla, d rl, a add, ccf,                          #17 rl# c? ?jr, #16 jp, al# end-code                     also assembler max-labels c! previous                                                                                                                                                           ( create: ;code :noname nextname )                              [unneeded] create:                                              ?\ : create: ( "name" -- ) create hide ] ;                      [unneeded] ;code ?(                                             : ;code ( -- ) postpone (;code)  finish-code                      ; immediate compile-only ?)                                   [unneeded] :noname ?(                                           : :noname ( -- xt )                                               here  dup lastxt !  last off  !csp                              docolon [ assembler-wordlist >order ] call, [ previous ]        noname? on  ] ; ?)                                            [unneeded] nextname ?( 2variable nextname-string                : nextname-header ( -- )                                          nextname-string 2@ header, default-header ;                   : nextname ( ca len -- ) nextname-string 2!                       ['] nextname-header ['] header defer! ; ?)                    ( alias! alias realias )                                        [unneeded] alias!                                               ?\ need name>>  : alias! ( xt nt -- ) name>> far! ;             [unneeded] alias dup                                            ?\ need alias!                                                  ?\ : alias ( xt "name" -- ) header reveal latest alias! ;       [unneeded] realias ?exit                                        need alias!                                                     : realias ( xt "name" -- )                                        defined dup 0= #-13 ?throw alias! ;                                                                                                                                                                                                                                                                                                                                                                                                                           ( deferred defers defer@ action-of )                            [unneeded] deferred                                             ?\ : deferred ( xt "name" -- ) defer latest name> defer! ;      [unneeded] defers                                               ?\ : defers ( "name" -- ) ' defer@ compile, ; immediate         [unneeded] defer@ ?\ : defer@ ( xt1 -- xt2 ) >action @ ;        [unneeded] deferred? ?\ : deferred? ( xt -- f ) c@ $C3 = ;      [unneeded] action-of ?exit                                      : action-of \ Interpretation: ( "name" -- xt )                    ' compiling? if    postpone literal postpone defer@                          else  defer@  then ; immediate                                                                                                                                                                                                                                                                                                                                                   ( <is> [is] is  )                                               [unneeded] <is> ?\ : <is> ( xt "name" -- ) ' defer! ;           [unneeded] [is] ?(                                              : [is] ( xt "name" -- )                                           postpone ['] postpone defer! ; immediate compile-only ?)      [unneeded] is ?( need [is] need <is>                            : is ( xt "name" -- )                                             compiling? if postpone [is] else <is> then ; immediatesynonym )                                                     need alias need nextname                                        : synonym ( "newname" "oldname" -- )                              parse-name nextname ' dup >r alias                              r> >name dup immediate?     if  immediate     then                           compile-only?  if  compile-only  thenblack blue red magenta green cyan yellow white contrast )     [unneeded] black ?\ 0 cconstant black                           [unneeded] blue ?\ 1 cconstant blue                             [unneeded] red ?\ 2 cconstant red                               [unneeded] magenta ?\ 3 cconstant magenta                       [unneeded] green ?\ 4 cconstant green                           [unneeded] cyan ?\ 5 cconstant cyan                             [unneeded] yellow ?\ 6 cconstant yellow                         [unneeded] white ?\ 7 cconstant white                           [unneeded] contrast ?( need white need green                    : contrast ( b1 -- b1 ) green < white and ; ?)                                                                                                                                                                                                                                                                                                                                                  ( papery brighty flashy attr>paper attr>ink )                   [unneeded] papery ?( need 8* need alias                         ' 8* alias papery ( b1 -- b2 ) ?)                               [unneeded] brighty ?(                                           code brighty ( b1 -- b2 )                                         E1 c, CB c, C0 6 8 * + 5 + c, jppushhl, end-code ?)           [unneeded] flashy ?(                                            code flashy ( b1 -- b2 )                                          E1 c, CB c, C0 7 8 * + 5 + c, jppushhl, end-code ?)           [unneeded] attr>paper ?(                                        code attr>paper ( b1 -- b2 )                                      E1 c, 7D c, E6 c, %00111000 c,                                  CB c, 3F c, CB c, 3F c, CB c, 3F c, pusha jp, end-code ?)     [unneeded] attr>ink ?(                                          code attr>ink ( b1 -- b2 )                                        E1 c, 7D c, E6 c, %111 c, pusha jp, end-code ?)               ( attr@ attr! attr-mask@ attr-mask! )                           [unneeded] attr@ ?( need os-attr-t                              code attr@ ( -- b ) 3A c, os-attr-t , pusha jp, end-code ?)     [unneeded] attr! ?( need os-attr-t                              code attr! ( b -- )                                               D1 c, 78 03 + c, 32 c, os-attr-t , jpnext, end-code ?)        [unneeded] attr-mask@ ?( need os-mask-t                         code attr-mask@ ( -- b )                                          3A c, os-mask-t , pusha jp, end-code ?)                       [unneeded] attr-mask! ?( need os-mask-t                         code attr-mask! ( b -- )                                          D1 c, 78 03 + c, 32 c, os-mask-t , jpnext, end-code ?)        [unneeded] mask+attr>perm                                       ?\ code mask+attr>perm ( -- ) $1CAD call, jpnext, end-code                                                                                                                                      ( mask+attr! mask+attr@ attr-setter mask+attr-setter )          [unneeded] mask+attr! ?( need os-attr-t                         code mask+attr! ( b1 b2 -- )                                      E1 c, D1 c, 60 03 + c, 22 c, os-attr-t , jpnext, end-code ?)  [unneeded] mask+attr@ ?( need os-attr-t                         code mask+attr@ ( -- b1 b2 )                                      26 c, 00 c, ED c, 5B c, os-attr-t , 68 02 + c, E5 c,            68 03 + c, jppushhl, end-code ?)                              [unneeded] attr-setter ?( need attr!                            : attr-setter ( b "name" -- )                                     create c,  does> ( -- ) ( pfa ) c@ attr! ; ?)                 [unneeded] mask+attr-setter ?( need mask+attr!                  : mask+attr-setter ( b1 b2 "name" -- )                            create 2,  does> ( -- ) ( pfa ) 2@ mask+attr! ; ?)                                                                                                                                            ( perm-attr@ perm-attr! perm-attr-mask@ perm-attr-mask! )       [unneeded] perm-attr@ ?( need os-attr-p                         code perm-attr@ ( -- b )                                          3A c, os-attr-p , pusha jp, end-code ?)                       [unneeded] perm-attr! ?( need os-attr-p                         code perm-attr! ( b -- )                                          D1 c, 78 03 + c, 32 c, os-attr-p , jpnext, end-code ?)        [unneeded] perm-attr-mask@ ?( need os-mask-p                    code perm-attr-mask@ ( -- b )                                     3A c, os-mask-p , pusha jp, end-code ?)                       [unneeded] perm-attr-mask! ?( need os-mask-p                    code perm-attr-mask! ( b -- )                                     D1 c, 78 03 + c, 32 c, os-mask-p , jpnext, end-code ?)                                                                                                                                                                                                        ( get-paper set-paper get-ink set-ink )                         [unneeded] get-paper ?( need attr@ need attr>paper              : get-paper ( -- b ) attr@ attr>paper ; ?)                      [unneeded] set-paper ?( need os-attr-t                          code set-paper ( b -- )                                           E1 c, 7D c, E6 c, %111 c,                                       CB c, 27 c, CB c, 27 c, CB c, 27 c, 58 07 + c,                  21 c, os-attr-t , 3E c, %1100111 c, A6 c, B0 03 + c,            70 07 + c, jpnext, end-code ?)                                [unneeded] get-ink ?( need attr@ need attr>ink                  : get-ink ( -- b ) attr@ attr>ink ; ?)                          [unneeded] set-ink ?( need os-attr-t                            code set-ink ( b -- )                                             D1 c, 21 c, os-attr-t ,                                         3E c, %11111000 c, A6 c, B3 c, 77 c, jpnext, end-code ?)                                                                      ( ink-mask unink-mask paper-mask unpaper-mask )                 [unneeded] ink-mask       ?\ %00000111 cconstant ink-mask       [unneeded] unink-mask     ?\ %11111000 cconstant unink-mask     [unneeded] paper-mask     ?\ %00111000 cconstant paper-mask     [unneeded] unpaper-mask   ?\ %11000111 cconstant unpaper-mask                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( bright-mask unbright-mask get-bright set-bright )             [unneeded] bright-mask    ?\ %01000000 cconstant bright-mask    [unneeded] unbright-mask  ?\ %10111111 cconstant unbright-mask  [unneeded] get-bright ?( need attr@ need bright-mask            : get-bright ( -- f )                                             attr@ [ bright-mask ] cliteral and 0= ; ?)                    [unneeded] set-bright ?(                                        need bright-mask need attr@ need unbright-mask need attr!       : set-bright ( f -- )                                             [ bright-mask ] cliteral and                                    attr@ [ unbright-mask ] cliteral and or attr! ; ?)                                                                                                                                                                                                                                                                                                                                            ( flash-mask unflash-mask get-flash set-flash )                 [unneeded] flash-mask   ?\ %10000000 cconstant flash-mask       [unneeded] unflash-mask ?\ %01111111 cconstant unflash-mask     [unneeded] get-flash ?( need attr@ need flash-mask              : get-flash ( -- f ) attr@ [ flash-mask ] cliteral and 0= ; ?)  [unneeded] set-flash ?(                                         need flash-mask need attr@ need unflash-mask need attr!         : set-flash ( f -- )                                              [ flash-mask ] cliteral and                                     attr@ [ unflash-mask ] cliteral and or attr! ; ?)                                                                                                                                                                                                                                                                                                                                                                                                             ( inverse-on inverse-off inverse )                              [unneeded] inverse-on ?(                                        code inverse-on ( -- )                                            FD c, CB c, 57 c, C6 08 02 * + c,  jpnext, end-code ?)        [unneeded] inverse-off ?(                                       code inverse-off ( -- )                                           FD c, CB c, 57 c, 86 08 02 * + c,  jpnext, end-code ?)        [unneeded] inverse ?( need inverse-off need inverse-on          code inverse ( f -- )                                             E1 c, 78 04 + c, B0 05 + c,                                     CA c, ' inverse-off , ' inverse-on jp, end-code ?)                                                                                                                                                                                                                                                                                                                                            ( overprint-on overprint-off overprint )                        [unneeded] overprint-on ?(                                      code overprint-on ( -- )                                          FD c, CB c, 57 c, C6 08 00 * + c,  jpnext, end-code ?)        [unneeded] overprint-off ?(                                     code overprint-off ( -- )                                         FD c, CB c, 57 c, 86 08 00 * + c,  jpnext, end-code ?)        [unneeded] overprint ?( need overprint-on need overprint-off    code overprint ( f -- )                                           E1 c, 78 04 + c, B0 05 + c,                                     CA c, ' overprint-off , ' overprint-on jp, end-code ?)                                                                                                                                                                                                                                                                                                                                        ( paper. ink. (0-9-color. flash. bright. (0-1-8-color. )        [unneeded] paper. ?( need (0-9-color.                           code paper. ( b -- ) 3E c, 11 c, (0-9-color. jp, end-code ?)    [unneeded] ink. ?( need (0-9-color.                             code ink. ( b -- ) 3E c, 10 c, (0-9-color. jp, end-code ?)      [unneeded] (0-9-color. ?( need assembler                        create (0-9-color. ( -- a ) asm                                   prt, h pop, l a ld, 0A cp#, nc? rif  09 a ld#,  rthen prt,      jpnext, end-asm ?)                                            [unneeded] flash.                                               ?\ need (0-1-8-color.  : flash. ( n -- ) 18 (0-1-8-color. ;     [unneeded] bright.                                              ?\ need (0-1-8-color.  : bright. ( n -- ) 19 (0-1-8-color. ;    [unneeded] (0-1-8-color.                                        ?\ : (0-1-8-color. ( n c -- ) emit %1001 and 8 min emit ;                                                                       ( printer tabulate )                                            [unneeded] printer                                              ?\ : printer ( -- ) 3 channel printing on ;                     [unneeded] tabulate ?(                                          need column                                                     variable /tabulate  8 /tabulate !                               : tabulate ( -- ) column 1+ /tabulate @ tuck mod - spacescr' 'tab' 'bs' crs tab tabs backspace backspaces )           [unneeded] 'tab' ?\ 6 cconstant 'tab'  exit                     [unneeded] 'bs' ?\ 8 cconstant 'bs'  exit                       [unneeded] 'cr' ?\ 13 cconstant 'cr'  exit                      [unneeded] tab                                                  ?\ need 'tab'  : tab ( -- ) 'tab' emit ;                        [unneeded] backspace                                            ?\ need 'bs'  : backspace ( -- ) 'bs'  emit ;                   [unneeded] crs                                                  ?\ need 'cr'  : crs   ( n -- ) 'cr'  emits ;                    [unneeded] tabs                                                 ?\ need 'tab'  : tabs ( n -- ) 'tab' emits ;                    [unneeded] backspaces                                           ?\ need 'bs'  : backspaces    ( n -- ) 'bs'  emits ;                                                                                                                                            ( column last-column row last-row at-x at-y xy>r r>xy )         [unneeded] column ?\ : column ( -- col ) xy drop ;              [unneeded] last-column                                          ?\ need columns : last-column ( -- col ) columns 1- ;           [unneeded] row ?\ : row ( -- row ) xy nip ;                     [unneeded] last-row                                             ?\ need rows  : last-row ( -- row  ) rows 1- ;                  [unneeded] at-x ?\ need row  : at-x ( col -- ) row at-xy ;      [unneeded] at-y                                                 ?\ need column  : at-y ( row -- ) column swap at-xy ;           [unneeded] xy>r ?\ : xy>r ( R: -- col row ) r>    xy 2>r >r ;   [unneeded] r>xy ?\ : r>xy ( R: col row -- ) r> 2r> at-xy >r ;                                                                                                                                                                                                                                                                   ( xy>scra_ xy>scra )                                            [unneeded] xy>scra_ ?( need assembler                           create xy>scra_ ( -- a ) asm                                      b a ld, %11000 and#, #64 add#, a d ld, b a ld, %111 and#,       rrca, rrca, rrca, a e ld, c a ld, e add, a e ld,                ret, end-asm ?)                                               [unneeded] xy>scra ?( need assembler need xy>scra_              code xy>scra ( x y -- a )                                         h pop, l a ld, h pop, b push, a b ld, l c ld,                   xy>scra_ call, exde, b pop, jppushhl, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                             ( xy>scra_ xy>scra )                                            [unneeded] xy>scra_ ?( need assembler                           create xy>scra_ ( -- a ) asm                                      d a ld, %11000 and#, #64 add#, a h ld, d a ld, %111 and#,       rrca, rrca, rrca, a l ld, e a ld, l add, a l ld,                ret, end-asm ?)                                               [unneeded] xy>scra ?( need assembler need xy>scra_              code xy>scra ( x y -- a )                                         h pop, d pop, l d ld, xy>scra_ call, jppushhl, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( xy>gxy xy>gxy176 )                                            [unneeded] xy>gxy ?(                                            code xy>gxy ( x y -- gx gy )                                      D1 c, E1 c, 29 c, 29 c, 29 c, E5 c, EB c, 29 c, 29 c, 29 c,     3E c, #191 c, 95 c, 6F c, jppushhl, end-code ?)               [unneeded] xy>gxy176 ?(                                         code xy>gxy176 ( x y -- gx gy )                                   D1 c, E1 c, 29 c, 29 c, 29 c, E5 c, EB c, 29 c, 29 c, 29 c,     3E c, #175 c, 95 c, 6F c, jppushhl, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( xy>attra_ xy>attr xy>attra )                                  [unneeded] xy>attra_ ?(                                         create xy>attra_ ( -- a ) asm                                     7B c, 0F c, 0F c, 0F c, 5F c, E6 c, E0 c, AA c, 6F c, 7B c,     E6 c, 03 c, EE c, 58 c, 67 c, C9 c, end-asm ?)                [unneeded] xy>attr ?( need xy>attra_                            code xy>attr ( col row -- b )                                     D1 c, E1 c, 55 c, xy>attra_ call, 6E c, 26 c, 00 c,             jppushhl, end-code ?)                                         [unneeded] xy>attra ?( need xy>attra_                           code xy>attra ( col row -- a )                                    D1 c, E1 c, 55 c, xy>attra_ call, jppushhl, end-code ?)                                                                                                                                                                                                                                                                       ( get-font rom-font )                                           [unneeded] get-font ?( need os-chars                            code get-font ( -- a ) 2A c, os-chars , jppushhl, end-code ?)   [unneeded] rom-font ?\ 15360 constant rom-fontoutlet-autochars )                                            need assembler  need os-chars                                   code outlet-autochars ( a -- )                                    h pop, b push, h push,                                          #767 d ldp#, d addp, exde, #16383 h ldp#, #768 b ldp#,          b push, lddr,                                                   b pop, d incp, d h ldp,                                         rbegin m a ld, a sra, m or, a m ld, ldi, c a ld, b or,                 z? runtil                                                h pop, h dec, os-chars h stp,                                   #877 d ldp#, d addp, %1101010 a ld#, a m ld, h incp, a m ld,    #76 d ldp#, d addp, %1100011 a ld#, a m ld,                     h incp, a m ld, h incp, %1101011 a ld#, a m ld,                 h incp, %111110 a ld#, a m ld, h incp, %110110 a ld#, a m ld,   b pop, jpnext, end-code                                                                                                       ( (g-emit g-emit g-type )                                       [unneeded] (g-emit ?( need assembler need g-emit_                                      need os-chars need os-coords             code (g-emit ( c -- )                                             h pop, l a ld, b push, os-coords b ftp, os-chars d ftp,         g-emit_ call, b pop, next ix ldp#,  jpnext,                     end-code ?)                                                   [unneeded] g-emit ?(                                            need g-emit-udg need (g-emit need g-emitted                     : g-emit ( c -- )                                                 dup 127 > if  g-emit-udg  else  (g-emit  then                   g-emitted ; ?)                                                [unneeded] g-type  ?( need g-emit                               : g-type ( ca len -- )                                            bounds ?do  i c@ g-emit  loop ; ?)                                                                                            ( g-cr g-emitted g-emit-udg )                                   [unneeded] g-cr ?( need g-y need g-at-xy need pixels-scroll-up  : g-cr ( -- )                                                     0 g-y 8 - dup 7 < if    7 swap - pixels-scroll-up 7                               then  g-at-xy ; ?)                          [unneeded] g-emitted ?( need g-x need g-at-x need g-cr          : g-emitted ( -- ) g-x 8 + dup [ 255 6 - ] cliteral <                                if  g-at-x exit  then  drop g-cr ; ?)      [unneeded] g-emit-udg ?( need assembler need g-emit_                                       need os-udg need os-coords           code g-emit-udg ( c -- )                                          h pop, l a ld, b push,                                          os-coords b ftp, os-udg d ftp, g-emit_ call,                    b pop, next ix ldp#, jpnext, end-code ?)                                                                                                                                                      ( g-emit_ )                                                     need assembler need gxy>scra_                                   create g-emit_ ( -- a ) asm                                       0 h ld#, a l ld, h addp, h addp, h addp, d addp,                h push, ix pop, b h ldp, h push, 8 c ld#,                       rbegin                                                            h pop, h dec, h push, h inc,                                    b push, h b ldp, gxy>scra_ call, b pop,                         a b ld, a xor, b or, 0 ix a ftx,                                nz? rif  exde, 0 h ld#, a l ld, 8 a ld#, b sub, a b ld,                  rbegin  h addp,  rstep  exde,                                   m a ld, d xor, a m ld,                                          h incp, e a ld, rthen                                  m xor, a m ld, ix incp, c dec,                                z? runtil  h pop, ret, end-asm                                                                                                ( gigatype )                                                    hex                                                             here 01 c, 05 c, 03 c, 05 c, 08 c, 03 c, 0A c, 03 c, 0C c,           03 c, 8A c, 03 c, 91 c, 01 c, 93 c, 01 c, 12 c, 01 c,           FF c,                                                      here 01 c, 05 c, 03 c, 05 c, 08 c, 03 c, 0A c, 03 c, 0C c,           03 c, 8A c, 03 c, 91 c, 01 c, 93 c, 01 c, FF c,            here 24 c, 01 c, 9B c, 01 c, 01 c, 03 c, 08 c, 01 c, 0A c,           01 c, 89 c, 01 c, FF c,                                    here 24 c, 01 c, 9B c, 01 c, 01 c, 03 c, 08 c, 01 c, 0A c,           01 c, FF c,                                                here 09 c, 03 c, 10 c, 01 c, 12 c, 01 c, 80 c, 01 c, FF c,      here 09 c, 01 c, 80 c, 01 c, FF c,                              here 01 c, 03 c, 08 c, 01 c, 0A c, 01 c, 89 c, 01 c, FF c,      here 01 c, 03 c, 08 c, 01 c, 0A c, 01 c, FF c,                  decimal  create gigatype-styles , , , , , , , , -->             ( gigatype )                                                    need os-chars need os-attr-t need assembler                     also assembler need l: #11 max-labels c! previous               code (gigatype ( ca len a1 a2 -- )                              d pop, h pop, #1 h stp, al# h pop, l a ld, #3 sta, al#          h pop, #2 h stp, al# exde, a and, next z? ?jp, b push,          #0 l: m a ld, FF cp#, z? rif b pop, jpnext, rthen               exaf, h incp, m a ld, #5 sta, al#                               exaf, h push, exx, a c ld, exx,                                 here 1+ #1 l! 0 h ldp#,                                         here 1+ #2 l! 0 d ldp#, here 1+ #3 l! 0 b ld#,                  #6 l: d ftap, b push, d push, h push, h push, a l ld,           00 h ld#, h addp, h addp, h addp, os-chars d ftp, d addp, exde, h pop, exx, c a ld, exx, a b ld, %111 and#, a c ld, b a ld,     38 and#, rrca, rrca, rrca, #7 call, al# b a ld, 80 and#,        #8 sta, al# 08 b ld#, rbegin #9 call, al# d incp, rstep -->     ( gigatype )                                                    h pop, d pop, b pop, h incp, h incp, d incp, b dec,             #6 nz? ?jp, al# h pop, h incp, #0 jp, al#                       #7 l: a and, z? ?ret, b push, a b ld,                           rbegin h inc, h a ld, %111 and#,                                z? rif l a ld, 20 add#, a l ld, E0 and#,                        nz? rif h a ld, 08 sub#, a h ld, rthen rthen                    rstep b pop, ret,                                               #4 l: here 1+ #5 l! 01 b ld#, a and, z? ?ret,                   rbegin af push, #10 call, al# 01 a ld#, #7 call, al# af pop,    rstep                                                           #10 l: exaf, h a ld, 58 cp#, nc? ?ret, h push, h a ld, 18 and#, rrca, rrca, rrca, 58 add#, a h ld, os-attr-t fta, a m ld,       h pop, here 1+ #8 l! 80 a ld#, a and,                           z? rif  exaf, m or, a m ld, ret, rthen                          exaf, cpl, m and, a m ld, ret, -->                              ( gigatype )                                                    #9 l: b push, d push, h push, exde, m a ld, 0 h ldp#, 4 b ld#,  rrca, h rr, h sra, rrca, h rr, h sra, rrca, h rr, h sra, rrca,  h rr, h sra, rrca, l rr, l sra, rrca, l rr, l sra, rrca,        l rr, l sra, rrca, l rr, l sra, c a ld, 00 c ld#, a and,        nz? rif a b ld, rbegin l rr, h rr, c rr, rstep rthen            exde, e a ld, h push, #4 call, al# h pop, h incp, d a ld,       h push, #4 call, al# h pop, h incp, c a ld,                     h push, #4 call, al# h pop, h pop, d pop, b pop, 02 a ld#,      #7 call, al# ret, end-code                                      need xy>scra need array>                                        : gigatype ( ca len n -- )                                        xy xy>scra swap gigatype-styles array> @ (gigatype ;                                                                                                                                                                                                          ( gigatype-title )                                              need gigatype need 2/                                           : gigatype-title ( ca1 len1 n -- )                                >r 32 over 2* - 2/ xy nip at-xy r> gigatypemode-32 )                                                     need columns need rows need set-font need set-mode-output       : mode-32 ( -- )                                                  [ latestxt ] literal current-mode !                             15360 set-font  2548 set-mode-output                            32 to columns  24 to rows                                       ['] mode-32-emit  ['] emit  defer!                              ['] mode-32-xy    ['] xy    defer!                              ['] mode-32-at-xy ['] at-xy defer! ;                          ' mode-32 ' default-mode defer!                                                                                                                                                                                                                                                                                                                                                                                                                                 ( mode-32iso )                                                  need mode-32 need columns need rows need set-mode-output        need mode-32iso-emit                                            : mode-32iso ( -- )                                               [ latestxt ] literal current-mode !                             2548 set-mode-output                                            32 to columns  24 to rows                                       ['] mode-32iso-emit ['] emit  defer!                            ['] mode-32-xy      ['] xy    defer!                            ['] mode-32-at-xy   ['] at-xy defer! ;                                                                                                                                                                                                                                                                                                                                                                                                                        ( mode-32iso-emit )                                             need assembler need os-chars                                    code mode-32iso-emit ( c -- )                                   h pop, b push, l a ld, 0 b ldp#, #128 cp#, nc? rif                #224 cp#, c? rif #96 sub#, #96 8 * b ldp#,                                   relse #192 sub#, #192 8 * b ldp#, rthen          rthen                                                           os-chars h ftp, h push, b addp, os-chars h stp, FF 52 iy st#x,  10 rst, h pop, os-chars h stp, b pop, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( mode-42 banked-mode-42 )                                      need mode-32 need (mode-42 need set-mode-output                 need get-drive need drive need file>                            : mode-42 ( -- ) [ latestxt ] literal current-mode !                              (mode-42 set-mode-output ;                    get-drive  0 drive set-drive throw                                         s" pr42.bin" 0 0 file> throw  \ load the driver                 s" ea5a.f42" 0 0 file> throw  \ load the font        set-drive throw                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( banked-mode-42 )                                              need mode-32 need (mode-42                                      need drive need get-drive need file>                            need set-banked-mode-output need code-bank                      : banked-mode-42 ( -- ) [ latestxt ] literal current-mode !                              (mode-42 set-banked-mode-output ;      code-bank{  get-drive 0 drive set-drive throw                                           s" pr42.bin" 0 0 file> throw                                    s" ea5a.f42" 0 0 file> throw                        set-drive throw }code-bank                                                                                                                                                                                                                                                                                                                                                                                                                          ( (mode-42 )                                                    need columns need rows need set-font need (at-xy                : mode-42-xy ( -- col row ) 0 0 ;  \ XXX TODO                   : (mode-42 ( -- a )                                               42 to columns  24 to rows                                       ['] mode-42-xy ['] xy defer!                                    ['] (at-xy ['] at-xy defer!                                     [ 64600 256 - ] literal set-fontmode-42rt )                                                   need mode-32 need mode-42rt-emit                                need columns need rows need (at-xy                              : mode-42rt-xy ( -- col row ) 0 0 ;  \ XXX TODO                 : mode-42rt ( -- )                                                [ latestxt ] literal current-mode !                             42 to columns  24 to rows                                       ['] mode-42rt-emit ['] emit  defer!                             ['] mode-42rt-xy   ['] xy    defer!                             ['] (at-xy         ['] at-xy defer! ;                                                                                                                                                                                                                                                                                                                                                                                                                         ( mode-42rt-emit )                                              code mode-42rt-emit ( c -- )                                      end-codemode-64 )                                                     need mode-32 need get-drive need drive need file> need (at-xy   need 4x8font  \ compile the font                                get-drive  0 drive set-drive throw                                         s" pr64.bin" 0 0 file> throw  \ load the driver      set-drive throw                                                 : mode-64-xy ( -- col row ) 0 0 ;  \ XXX TODO                   : mode-64 ( -- )                                                  [ latestxt ] literal current-mode !                             64 to columns  24 to rows                                       ['] mode-64-xy ['] xy defer!                                    ['] (at-xy ['] at-xy defer!                                     4x8font set-font  60000 set-mode-output ;                                                                                                                                                                                                                     ( mode-64 )                                                     need assembler need unresolved                                  create mode-64-at-flag 0 c,                                     create mode-64-column 0 c,                                      create mode-64-row 0 c,                                         variable mode-64-chars                                          code mode-64-emit ( -- )                                          b a ld,                                                         here 1+ 0 unresolved !  \ address of at_flag                    0 a ld#, a and,                                                 z? rif  FF a ld#,  rthen                                        end-code                                                      : mode-64 ( -- )                                                  mode-64-chars @ set-font  mode-64-emit set-mode-outupt          ['] (at-xy ['] at-xy defer! ;                                                                                                 ( 4x8font )                                                     create 4x8font  hex                                             02 c, 02 c, 02 c, 02 c, 00 c, 02 c, 00 c,  \  !                 52 c, 57 c, 02 c, 02 c, 07 c, 02 c, 00 c,  \ "#                 25 c, 71 c, 62 c, 32 c, 74 c, 25 c, 00 c,  \ $%                 22 c, 42 c, 30 c, 50 c, 50 c, 30 c, 00 c,  \ &'                 14 c, 22 c, 41 c, 41 c, 41 c, 22 c, 14 c,  \ ()                 20 c, 70 c, 22 c, 57 c, 02 c, 00 c, 00 c,  \ *+                 00 c, 00 c, 00 c, 07 c, 00 c, 20 c, 20 c,  \ ,-                 01 c, 01 c, 02 c, 02 c, 04 c, 14 c, 00 c,  \ ./                 22 c, 56 c, 52 c, 52 c, 52 c, 27 c, 00 c,  \ 01                 27 c, 51 c, 12 c, 21 c, 45 c, 72 c, 00 c,  \ 23                 57 c, 54 c, 56 c, 71 c, 15 c, 12 c, 00 c,  \ 45                 17 c, 21 c, 61 c, 52 c, 52 c, 22 c, 00 c,  \ 67                 22 c, 55 c, 25 c, 53 c, 52 c, 24 c, 00 c,  \ 89                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 22 c, 00 c, 00 c, 22 c, 02 c,  \ :;                 00 c, 10 c, 27 c, 40 c, 27 c, 10 c, 00 c,  \ <=                 02 c, 45 c, 21 c, 12 c, 20 c, 42 c, 00 c,  \ >?                 23 c, 55 c, 75 c, 77 c, 45 c, 35 c, 00 c,  \ @A                 63 c, 54 c, 64 c, 54 c, 54 c, 63 c, 00 c,  \ BC                 67 c, 54 c, 56 c, 54 c, 54 c, 67 c, 00 c,  \ DE                 73 c, 44 c, 64 c, 45 c, 45 c, 43 c, 00 c,  \ FG                 57 c, 52 c, 72 c, 52 c, 52 c, 57 c, 00 c,  \ HI                 35 c, 15 c, 16 c, 55 c, 55 c, 25 c, 00 c,  \ JK                 45 c, 47 c, 45 c, 45 c, 45 c, 75 c, 00 c,  \ LM                 62 c, 55 c, 55 c, 55 c, 55 c, 52 c, 00 c,  \ NO                 62 c, 55 c, 55 c, 65 c, 45 c, 43 c, 00 c,  \ PQ                 63 c, 54 c, 52 c, 61 c, 55 c, 52 c, 00 c,  \ RS                 75 c, 25 c, 25 c, 25 c, 25 c, 22 c, 00 c,  \ TU                 -->                                                             ( 4x8font )                                                     55 c, 55 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ VW                 55 c, 55 c, 25 c, 22 c, 52 c, 52 c, 00 c,  \ XY                 73 c, 12 c, 22 c, 22 c, 42 c, 72 c, 03 c,  \ Z[                 46 c, 42 c, 22 c, 22 c, 12 c, 12 c, 06 c,  \ \]                 20 c, 50 c, 00 c, 00 c, 00 c, 00 c, 0F c,  \ ^_                 20 c, 10 c, 03 c, 05 c, 05 c, 03 c, 00 c,  \ ?a                 40 c, 40 c, 63 c, 54 c, 54 c, 63 c, 00 c,  \ bc                 10 c, 10 c, 32 c, 55 c, 56 c, 33 c, 00 c,  \ de                 10 c, 20 c, 73 c, 25 c, 25 c, 43 c, 06 c,  \ fg                 42 c, 40 c, 66 c, 52 c, 52 c, 57 c, 00 c,  \ hi                 14 c, 04 c, 35 c, 16 c, 15 c, 55 c, 20 c,  \ jk                 60 c, 20 c, 25 c, 27 c, 25 c, 75 c, 00 c,  \ lm                 00 c, 00 c, 62 c, 55 c, 55 c, 52 c, 00 c,  \ no                 00 c, 00 c, 63 c, 55 c, 55 c, 63 c, 41 c,  \ pq                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 53 c, 66 c, 43 c, 46 c, 00 c,  \ rs                 00 c, 20 c, 75 c, 25 c, 25 c, 12 c, 00 c,  \ tu                 00 c, 00 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ vw                 00 c, 00 c, 55 c, 25 c, 25 c, 53 c, 06 c,  \ xy                 01 c, 02 c, 72 c, 34 c, 62 c, 72 c, 01 c,  \ z{                 24 c, 22 c, 22 c, 21 c, 22 c, 22 c, 04 c,  \ |}                 56 c, A9 c, 06 c, 04 c, 06 c, 09 c, 06 c,  \ ~?                 decimalat-xy columns rows set-mode-output )                         [unneeded] (at-xy                                               ?\ : (at-xy ( col row -- ) 22 emit swap emit emit ;             [unneeded] columns ?\ need cvalue 32 cvalue columns             [unneeded] rows ?\ need cvalue 24 cvalue rows                   [unneeded] set-mode-output ?(                                   need os-chans                                                   : set-mode-output ( a -- )                                        os-chans @ 2dup ! 2dup 5 + ! 15 + ! ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( set-banked-mode-output )                                      need set-mode-output need >body                                 0 constant (output_)                                            code (banked-mode-output) ( -- )                                  C5 c,  CD c, 0 ,                                                here cell- ' (output_) >body !                                  C1 c,  DD c, 21 c, next ,  jpnext, end-code                   : set-banked-mode-output ( a -- )                                 (output_) !  \ patch `(banked-mode-output)`                     ['] (banked-mode-output) set-mode-output ;                                                                                                                                                                                                                                                                                                                                                                                                                    ( mode-fzx )                                                    need fzx-emit                                                   : fzx-at-xy ( gx gy -- ) fzx-y c! fzx-x c! ;                    : fzx-cr ( -- ) 13 fzx-emit ;                                   : fzx-home ( -- ) 0 191 fzx-at-xy ;                             : mode-fzx ( -- )                                                 ['] fzx-emit   ['] emit   defer!                                ['] fzx-at-xy  ['] at-xy  defer!                                ['] fzx-home   ['] home   defer!                                ['] fzx-cr     ['] cr     defer! ;                                                                                                                                                                                                                                                                                                                                                                                                                            ( fzx-emit )                                                    create fzx-font 60000 ,  \ font address                         0 constant margin  \ XXX TODO -- make it a variable             create fzx-variables                                              here 0 c, \ fzx-flags                                           here margin c, \ fzx-x (margin)                                 here 191 c,  \ fzx-y                                          constant fzx-y  constant fzx-x  constant fzx-flags              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                    need assembler need unresolved need >amark need scroll-1px-up   create (fzx-emit) ( -- )                                          asm                                                             fzx-flags h ldp#,  \ initial address of local variables         m dec,  \ check fzx-flags value by decrementing it              p? aif  \ not expecting a regular character                       nz? rif  \ not expecting the column                               cpl, C0 add#,  \ now A = 191 - char                             h incp,                                                       rthen                                                           h incp, a m ld, ret,                                          athen                                                         -->                                                                                                                                                                                             ( fzx-emit )                                                      16 cp#, z? rif  02 m ld#, ret,  rthen                           m inc,  \ increment fzx-flags to restore previous value (0)     h incp,  \ point to fzx-x XXX why?                              fzx-font b ftp, b push, ix pop,                                 0D cp#, 0000 z? ?jp, >amark 0 unresolved !                      a dec, 2 ix cpxfzx-emit )                                                      c? rif  \ jr nc, UNDEF_CHAR                                       1F sub#,  \ now A = char - 32                                   c? rif  \ jr nc, PRINT_CHAR                                   2swap  \ exchange the two `if`, because they are not nested     rthen                                                           '?' 20 - a ld#,  \ print '?' instead of invalid character         rthenfzx-emit )                                                      a inc,                                                          a l ld, 00 h ld#, h d ldp, h addp, d addp,                      b addp,                                                         m e ld, h incp, m a ld, 3F and#, a d ld,                        m xor, rlca, rlca, a c ldfzx-emit )                                                      h push, d addp, h decp,                                         exsp,                                                           h incp,                                                         a xor, rld,                                                     af push, rld,                                                   0000 sta, >amark 1 unresolved !                                 08 cp#,  \ check if char width is larger than 8 bits            rld,  \ restore char shift/width                              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      000E d ldp#, nc? rif  234E d ldp#,  rthen                       0000 d stp, >amark 2 unresolved !                               h incp, m a ld,                                                 l add, a e ldfzx-emit )                                                      fzx-x h ldp#, m a ld, c sub,                                    c? rif  a xor,  rthen                                           a m ld, 0000 fta, >amark 3 unresolved !                         m add,                                                          0000 c? ?call, >amark 4 unresolved !  \ newline callcfzx-emit )                                                      fzx-x b ftp,                                                    01 a ld#,                                                       00 ix subx,  \ now A = 1 - height                               b add,  \ now A = fzx-y - height + 1                            nc? rif  \ end of screen                                          h pop, h pop, ret,  \ restore the stack and exit              rthen                                                           af pop, BF add#,                                                22AA 2+ call, exaf,                                             here jr, >rmark 5 unresolved !  \ jr CHK_LOOP                 -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      rbegin  \ main loop                                               m d ld, \ now D = 1st byte from char definition grid            h incp,  \ next character definition                            2 unresolved @ >resolve                                         m c ld, h incp,                                                 a xor, exsp, exaf,                                              nz? rif                                                           a b ld, exaf,                                                   rbegin  d srl, c rr, rra,  rstep                              rthen                                                       -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        l inc, l inc,  m or, a m ld,  \ put A on screen                 l dec, c a ld, m or, a m ld,  \ put C on screen                 l dec, d a ld, m or, a m ld,  \ put D on screen                 h inc,  \ move screen address by 1 pixel down                   h a ld, 07 and#,                                                z? rif  l a ld, 20 add#, a l ld,                                  nc? rif  h a ld, 08 sub#, a h ld,  rthen                      rthen \ CHK_LOOP:                                               5 unresolved @ >rresolve                                    -->                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        exsp,  \ now HL = char definition address                       l a ld,                                                         e cp,  \ check if reached next char definition address        z? runtil  \ loop otherwise (to MAIN_LOOP)                      h pop,  \ discard screen address from stack                     fzx-x h ldp#,                                                   m a ld,  \ now A = column                                     \ WIDTH1:                                                         here 1+ dup 1 unresolved @ ! 3 unresolved @ !                   00 add#,  \ now A = column + (width - 1)                        scf,                                                            01 ix adcx,  \ now A = column + width + tracking              -->                                                                                                                                                                                             ( fzx-emit )                                                      c? rif                                                            0 unresolved @ >resolve  4 unresolved @ >resolve                margin m ld#,  \ move to initial column at left margin          h incp,                                                         m a ld,  \ now A = line                                         00 ix subx,  \ now A = line - height                          rthen                                                           a m ld,  \ move down a few pixels specified by height           ret,                                                            end-asm                                                       code fzx-emit ( c -- )                                            h pop, b push, l a ld, ' (fzx-emit) call,                       b pop, next ix ldp#, jpnext,                                    end-code                                                                                                                      ( ud.r u.r ud. holds )                                          [unneeded] ud.r ?(                                              : ud.r ( ud n -- ) >r <# #s #> r> over - 0 max spaces type ;    ?)                                                              [unneeded] u.r ?( need u>ud need ud.r                           : u.r ( u n -- ) >r u>ud r> ud.r ; ?)                           [unneeded] ud. ?( need ud.r                                     : ud. ( ud -- ) 0 ud.r space ; ?)                               [unneeded] holds ?(                                             : holds ( ca len -- )                                             begin  dup  while  1- 2dup + c@ hold  repeat 2drop ; ?)                                                                                                                                                                                                                                                                                                                                       ( base. bin. hex. )                                             [unneeded] base.                                                ?\ : base. ( -- ) does> c@ base @ >r base ! u. r> base ! ;      [unneeded] bin.                                                 ?\ need base.  create bin. ( n -- ) #2 c, base.                 [unneeded] hex.                                                 ?\ need base.  create hex. ( n -- ) #16 c, basebase' (d. <hex hex> (dhex. 8hex. 16hex. 32hex. )              [unneeded] base' [unneeded] base> and ?(                        variable base'  : base> ( -- ) base' @ base ! ; ?)              [unneeded] (d.                                                  ?\ : (d. ( d n -- ca len ) <# 0 ?do  #  loop  #> ;              [unneeded] <hex [unneeded] hex> and ?( need base' need base>    : <hex ( -- ) base @ base' ! hex ; : hex> ( -- ) base> ; ?)     [unneeded] (dhex. dup ?\ need <hex need (d.                     ?\ : (dhex. ( d n -- ) <hex (d. hex> type space ;               [unneeded] 32hex.                                               ?\ need (dhex.  : 32hex. ( d -- ) 8 (dhex. ;                    [unneeded] 16hex.                                               ?\ need (dhex.  : 16hex. ( n -- ) s>d 4 (dhex. ;                [unneeded] 8hex.                                                ?\ need (dhex.  : 8hex. ( b -- ) s>d 2 (dhex. ;                                                                                 ( binary <bin bin> (dbin. 8bin. 16bin. 32bin. )                 [unneeded] binary ?\ : binary ( -- ) 2 base ! ;                 [unneeded] <bin [unneeded] bin> and ?(                          need base' need base> need binary                               : <bin ( -- ) base @ base' ! binary ; : bin> ( -- ) base> ; ?)  [unneeded] (dbin. dup                                           ?\ need <bin need (d.                                           ?\ : (dbin. ( d n -- ) <bin (d. bin> type space ;               [unneeded] 32bin.                                               ?\ need (dbin.  : 32bin. ( d -- ) #32 (dbin. ;                  [unneeded] 16bin.                                               ?\ need (dbin.  : 16bin. ( n -- ) s>d #16 (dbin. ;              [unneeded] 8bin.                                                ?\ need (dbin.  : 8bin. ( b -- ) s>d  #8 (dbin. ;                                                                                                                                               ( print )                                                       need last-row need /name                                        variable #printed   \ Printed chars in the current line.        variable #indented   \ Indented chars in the current line.      : printed+ ( u -- ) #printed +! ;                               : indented+ ( u -- ) #indented +! ;                             : (.word ( ca len -- ) dup printed+ type ;                      : .char ( c -- ) emit 1 printed+ ;                              : not-at-home? ( -- 0f ) xy + ;                                 : no-printed ( -- ) #printed off #indented off ;                : print-home ( -- ) home no-printed ;                           : print-page ( -- ) page print-home ;                           : print-start-of-line ( -- )                                      #printed @ trm+move-cursor-left no-printed ;                  : at-last-start-of-line? ( -- f )                                 xy last-row = swap 0= and ;  -->                              ( print )                                                       : not-at-start-of-line? ( -- f ) column 0<> ;                   : print-cr? ( -- f ) not-at-home? not-at-start-of-line? and ;   defer (print-cr ' (print-cr ' cr defer!                         : print-cr print-cr? if (print-cr then no-printed ;             variable print-width                                            : previous-word? ( -- f ) #printed @ #indented @ > ;            : ?space ( -- ) previous-word? if bl .char then ;               : current-print-width ( -- u ) print-width @ ?dup ?exit cols ;  : too-long? ( u -- f ) 1+ #printed @ + current-print-width > ;  : .word ( ca len -- )                                             dup too-long? if print-cr else ?space then (.word ;           : (print-indentation ( u -- )                                     dup trm+move-cursor-right dup indented+ printed+ ;  -->                                                                                                                                       ( print )                                                       : print-indentation ( u -- ) ?dup 0exit (print-indentation ;    : >word ( ca1 len1 ca2 len2 -- ca2 len2 ca1 len4 )                tuck 2>r -  2r> 2swap ;                                       : first-word ( ca1 len1 -- ca2 len2 ca3 len3 ) /name >word ;    : (print ( ca1 len1 -- ca2 len2 ) first-word .word ;            : print ( ca len --) begin dup while (print repeat 2dropfartype type-ascii fartype-ascii )                            [unneeded] fartype                                              ?\ : fartype ( ca len -- ) bounds ?do  i farc@ emit  loop ;     [unneeded] type-ascii ?( need >printable-ascii-char             : type-ascii ( ca len -- )                                        bounds ?do  i c@ >printable-ascii-char emit  loop ; ?)        [unneeded] fartype-ascii ?( need >printable-ascii-char          : fartype-ascii ( ca len -- )                                     bounds ?do  i farc@ >printable-ascii-char emit  loop ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( drop-type padding-spaces type-left-field )                    [unneeded] drop-type ?\ : drop-type ( ca len x -- ) drop type ; [unneeded] padding-spaces                                       ?\ : padding-spaces ( len1 len2 -- ) swap - 0 max spaces ;      [unneeded] type-left-field ?( need padding-spaces               : type-left-field ( ca1 len1 len2 -- )                            2dup 2>r min type 2r> padding-spacestype-right-field )                                            need drop-type need <=> need array>                             : type-right-field-crop ( ca1 len1 len2 -- )                      over swap - /string type ;                                    : type-right-field-fit ( ca1 len1 len2 -- )                       over - spaces type ;                                                ' type-right-field-fit ,                                  here  ' drop-type ,                                                   ' type-right-field-crop ,                                 constant type-right-field-cases                                 : type-right-field ( ca1 len1 len2 -- )                           2dup <=> type-right-field-cases array> perform ;                                                                                                                                                                                                                                                                              ( type-center-field )                                           need drop-type need <=> need array>                             : type-center-field-fit ( ca1 len1 len2 -- )                      over - 2 /mod dup >r + spaces type r> spaces ;                : type-center-field-crop ( ca1 len1 len2 -- )                     over swap - 2 /mod dup >r + /string r> - type ;                     ' type-center-field-fit ,                                 here  ' drop-type ,                                                   ' type-center-field-crop ,                                constant type-center-field-cases                                : type-center-field ( ca1 len1 len2 -- )                          2dup <=> type-center-field-cases array> perform ;                                                                                                                                                                                                                                                                             ( window set-window )                                           need +field-opt-0124 need cfield:                               0 cfield: ~wx         \ x cursor coordinate                       cfield: ~wy         \ y cursor coordinate                       cfield: ~wx0        \ window left x coordinate on screen        cfield: ~wy0        \ window top y coordinate on screen         cfield: ~wcolumns   \ width                                     cfield: ~wrows      \ heigth                                  cconstant /window                                               variable current-window                                         : wx       ( -- ca ) current-window @ ~wx ;                     : wy       ( -- ca ) current-window @ ~wy ;                     : wx0      ( -- ca ) current-window @ ~wx0 ;                    : wy0      ( -- ca ) current-window @ ~wy0 ;                    : wcolumns ( -- ca ) current-window @ ~wcolumns ;               : wrows    ( -- ca ) current-window @ ~wrows ;  -->             ( window set-window )                                           : window ( x0 y0 columns rows "name" -- )                         create  0 c, 0 c, 2swap swap c, c, swap c, c, ;               : set-window ( a -- ) current-windowwspace wemit wfreecolumns (wat-xy wat-xy at-wxy )             [unneeded] wspace                                               ?\ need wemit  : wspace ( -- ) bl wemit ;                       [unneeded] wemit ?( need char>string need wtype                 : wemit ( c -- ) char>string wtype ; ?)                         [unneeded] wfreecolumns ?( need window                          : wfreecolumns ( -- n ) wcolumns c@ wx c@ - ; ?)                [unneeded] (wat-xy ?( need window need under+                   : (wat-xy ( x y -- ) wx0 c@ under+ wy0 c@ + at-xy ; ?)          [unneeded] wat-xy ?( need window need (wat-xy                   : wat-xy ( x y -- ) 2dup wy c! wx c!  (wat-xy ; ?)              [unneeded] at-wxy ?( need window need (wat-xy                   : at-wxy ( -- ) wx c@ wy c@ (wat-xy ; ?)                                                                                                                                                                                                                        ( whome wcr ?wcr reset-window wcls )                            [unneeded] whome                                                ?\ need wat-xy  : whome ( -- ) 0 0 wat-xy ;                     [unneeded] wcr ?( need window need whome                        : wcr ( -- )                                                      wy c@ dup wrows c@ 1- =                                         if  drop whome exit  then  1+ wy c! 0 wx c! ; ?)              [unneeded] ?wcr ?( need window need wcr                         : ?wcr ( -- ) wx c@ 0= ?exit wcr ; ?)                           [unneeded] reset-window ?(                                      need columns need rows need set-window                          : reset-window ( -- ) 0 0 columns rows set-window ; ?)          [unneeded] wcls ?( need window need whome need ruler            : wcls ( -- ) bl wcolumns c@ ruler ( ca len )                     wy0 c@ wrows c@ bounds ?do   2dup wx0 c@ i at-xy type                                  loop  2drop  whome ; ?)                ( wtype )                                                       need window need at-wxy need wfreecolumns need wcr need ?wcr    : +wc ( n -- )                                                    wx c@ + dup wx c! wcolumns c@ = if  wcr  then ;               variable wtyped                                                 : wtype+ ( ca len -- ) tuck type +wc  wtyped on ;               : /wtype ( ca len len1 n -- ca' len' )                            >r >r over r> at-wxy wtype+ r> /string ;                      : wtype ( ca len -- ) wtyped off                                  begin  dup wfreecolumns >  while                                  0 wfreecolumns do  over i + c@ bl =                                                if  i dup 1+ /wtype leave  then                             -1 +loop                                         wtyped @ if    ?wcr wtyped off                                           else  wfreecolumns dup /wtype  then                  repeat  at-wxy wtype+ ;                                       ( drive ?drive# ?block-drive block-drives )                     [unneeded] drive ?\ : drive ( c1 -- c2 ) first-drive + ;        [unneeded] ?drive# ?(                                           : ?drive# ( u -- )                                                [ max-drives 1- ] 1literal u> #-35 ?throw ; ?)                [unneeded] ?block-drive                                         ?\ : ?block-drive ( u -- ) not-block-drive = #-35 ?throw ;      [unneeded] block-drives ?( need not-block-drive                 create block-drives ( -- ca ) max-drives allot                    block-drives max-drives not-block-drive fill                    first-drive block-drives c!                                   need ?drive# need block-drive@ need ?block-drive                : (>drive-block ( u1 -- u2 )                                      blocks/disk /mod ( block drive ) dup ?drive#                    block-drive@ dup ?block-drive set-drive throw ;               ' (>drive-block ' >drive-block defer! ?)                        ( not-block-drive -block-drives block-drive@ block-drive! )     [unneeded] not-block-drive ?\ $FF cconstant not-block-drive     [unneeded] -block-drives ?( need block-drives                                               need not-block-drive                : -block-drives ( -- )                                            block-drives max-drives not-block-drive fill ; ?)             [unneeded] block-drive@ ?( need block-drives                    : block-drive@ ( n -- c ) block-drives + c@ ; ?)                [unneeded] block-drive@ ?( need block-drives                    : block-drive! ( c n -- ) block-drives + c! ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                ( ?drives set-block-drives get-block-drives )                   [unneeded] ?drives                                              ?\ : ?drives ( n -- ) max-drives > #-287 ?throw ;               [unneeded] set-block-drives ?(                                  need ?drives need -block-drives need block-drive!               : set-block-drives ( c[u]..c[1] u -- )                            dup ?drives -block-drives                                       dup #block-drives c!  max-blocks 1- last-locatable !                0 ?do i block-drive! loop ; ?)                            [unneeded] get-block-drives ?(                                  need block-drive@                                               : get-block-drives ( -- c[u]..c[1] u )                            #block-drives c@                                                dup 0 ?do dup i - 1- block-drive@ swap loop ; ?)                                                                                                                                              ( dos-in dos-out dos-in, dos-out, )                             [unneeded] dos-in                                               ?\ code dos-in ( -- ) DB c, #231 c, jpnext, end-code            [unneeded] dos-out                                              ?\ code dos-out ( -- ) D3 c, #231 c, jpnext, end-code           [unneeded] dos-in,                                              ?\ need macro  macro dos-in, ( -- ) DB c, #231 c, endm          [unneeded] dos-out,                                             ?\ need macro  macro dos-out, ( -- ) D3 c, #231 c, endm                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( /ufia ufia1 ufia2 >ufiax >ufia1 >ufia2 )                      [unneeded] /ufia ?\ 24 cconstant /ufia                          [unneeded] ufia1 ?\ $3E01 constant ufia1                        [unneeded] ufia2 ?\ $3E1A constant ufia2                        [unneeded] >ufiax ?( need /ufia need dos-in need dos-out        : >ufiax ( a a -- ) /ufia dos-in cmove dos-out ; ?)             [unneeded] >ufia1                                               ?\ need ufia1 need >ufiax : >ufia1 ( a -- ) ufia1 >ufiax ;      [unneeded] >ufia2                                               ?\ need ufia2 need >ufiax : >ufia2 ( a -- ) ufia2 >ufiax ;                                                                                                                                                                                                                                                                                                                                                                                                      ( ufia )                                                        need /ufia                                                      create ufia  /ufia allot  ufia /ufia erase                      ufia      constant dstr1   \ drive: 1, 2 or '*'                 ufia 1+   constant fstr1   \ file directory number              ufia 2+   constant sstr1   \ stream number                      ufia 3 +  constant device  \ device: 'D' or 'd'                 ufia 4 +  constant nstr1   \ directory description              ufia 5 +  constant nstr2   \ file name                          ufia 15 + constant hd00    \ file type                          ufia 16 + constant hd0b    \ file length                        ufia 18 + constant hd0d    \ file start address                 ufia 20 + constant hd0f    \ BASIC length without variables     ufia 22 + constant hd11    \ BASIC autorun line                 'd' device c!  2 sstr1 c!  1 dstr1 c!                                                                                           ( --file-types-- )                                              0 cconstant basic-filetype                                      1 cconstant data-array-filetype                                 2 cconstant string-array-filetype                               3 cconstant code-filetype                                       : --file-typeshxfer ofsm hofile sbyte hsvbk cfsm pntp cops hgfile lbyte )   [unneeded] hxfer  ?\ $33 cconstant hxfer                        [unneeded] ofsm   ?\ $34 cconstant ofsm                         [unneeded] hofile ?\ $35 cconstant hofile                       [unneeded] sbyte  ?\ $36 cconstant sbyte                        [unneeded] hsvbk  ?\ $37 cconstant hsvbk                        [unneeded] cfsm   ?\ $38 cconstant cfsm                         [unneeded] pntp   ?\ $39 cconstant pntp                         [unneeded] cops   ?\ $3A cconstant cops                         [unneeded] hgfile ?\ $3B cconstant hgfile                       [unneeded] lbyte  ?\ $3C cconstant lbyte                                                                                                                                                                                                                                                                                                                                                        ( hldbk wsad sad rest heraz cops2 pcat hrsad hwsad otfoc )      [unneeded] hldbk ?\ $3D cconstant hldbk                         [unneeded] wsad  ?\ $3E cconstant wsad                          [unneeded] sad   ?\ $3F cconstant sad                           [unneeded] rest  ?\ $40 cconstant rest                          [unneeded] heraz ?\ $41 cconstant heraz                         [unneeded] cops2 ?\ $42 cconstant cops2                         [unneeded] pcat  ?\ $43 cconstant pcat                          [unneeded] hrsad ?\ $44 cconstant hrsad                         [unneeded] hwsad ?\ $45 cconstant hwsad                         [unneeded] otfoc ?\ $46 cconstant otfoc                                                                                                                                                                                                                                                                                                                                                         ( patch --directory-descriptions-- dos-vars )                   [unneeded] patch ?\ $47 cconstant patch                         [unneeded] --directory-descriptions ?(                          01 cconstant basic-file-dir    02 cconstant data-array-dir      03 cconstant string-array-dir  04 cconstant code-file-dir       05 cconstant snapshot-48k-dir  06 cconstant microdrive-file-dir 07 cconstant screens$-file-dir 08 cconstant special-file-dir    09 cconstant snapshot-128k-dir 10 cconstant opentype-file-dir   11 cconstant execute-file-dir                                   : --directory-descriptions-- ; ?)                               [unneeded] dos-vars ?\ 8192 constant dos-vars                                                                                                                                                                                                                                                                                                                                                   ( get-drive )                                                   [unneeded] get-drive ?(                                         need assembler need dos-in, need dos-out,                       code get-drive ( -- n )                                           b push,  \ save the Forth IP                                    dos-in, 3ACE fta, dos-out,                                      b pop, next ix ldp#,  \ restore the Forth registers             pusha jp, end-codedelete-file )                                                 need assembler need ufia need heraz need set-filename           code (delete-file) ( -- ior )                                     b push,  \ save the Forth IP                                    ufia ix ldp#, heraz hook,  \ delete the file                    b pop, next ix ldp#, \ restore the Forth registers              af push, ' dosior>ior jp, end-code                            : delete-file ( ca len -- ior ) set-filename (delete-filefilename set-filename set-code-file )                        need ufia need get-drive                                        10 cconstant /filename  \ max filename length                   : -filename ( -- ) nstr2 /filename blank ;                      : set-filename ( ca len -- )                                      -filename /filename min nstr2 swap cmove get-drive dstr1 c! ; : set-code-file ( ca1 len1 ca2 len2 -- )                          set-filename  hd0b !  hd0d !  3 hd00 c!  4 nstr1 cfile )                                                       need assembler need ufia need set-code-file                     need hofile need hsvbk need cfsm                                code (>file) ( -- ior )                                           b push,  \ save the Forth IP                                    ufia ix ldp#,                                                   hofile hook, \ open the file and create its header              nc? rif \ no error?                                               hd0d d ftp, hd0b b ftp,  \ DE=start, BC=length                  hsvbk hook, \ save to file                                      nc? rif  cfsm hook,  rthen  \ close the file if no error      rthen  b pop, next ix ldp#,  \ restore the Forth registers      af push, ' dosior>ior jp, end-code                            : >file ( ca1 len1 ca2 len2 -- ior ) set-code-file (>file) ;                                                                                                                                    ( file> )                                                       need assembler need ufia need set-code-file                     need hgfile need lbyte need hldbk                               code (file>) ( ca len -- ior )                                    d pop, h pop, b push, h push, d push, ( ip ca len )             ufia ix ldp#, hgfile hook,  \ get the file                      c? rif  d pop, d pop,  \ error, so drop the parameters          relse                                                             hd00 d ldp#, 9 b ld#,  \ file header destination and count      rbegin  lbyte hook, d stap, d incp,  rstep                      b pop, d pop, b tstp, z?  rif                                     hd0b b ftp, d tstp, z? rif  hd0d d ftp,  rthen                rthen  hldbk hook,                                            rthen b pop, next ix ldp#, af push, ' dosior>ior jp, end-code : file> ( ca1 len1 ca2 len2 -- ior)                               2dup 2>r 2swap set-code-file 2r> (file>) ;                    ( file-status )                                                 need assembler need ufia need set-filename                      need hgfile need lbyte                                          code (file-status) ( -- a ior )                                   ufia ix ldp#, ix push,                                          b push,  \ save the Forth IP                                    hgfile hook,  \ get the file                                    nc? rif  \ no error?                                              hd00 d ldp#, 9 b ld#,  \ file header destination and count      rbegin  lbyte hook, d stap, d incp,  rstep                        a xor, \ set no error                                       rthen  b pop, next ix ldp#, \ restore the Forth registers       af push, ' dosior>ior jp, end-code                            : file-status ( ca len -- a ior) set-filename (file-status) ;                                                                                                                                   ( file-exists? file-start file-length file-type find-file )     [unneeded] file-exists?  ?( need file-status                    : file-exists? ( ca len -- f ) file-status nip 0= ; ?)          [unneeded] file-start  ?( need file-status need ufia            : file-start ( ca1 len1 -- ca2 ior )                              file-status nip hd0d @ swap ; ?)                              [unneeded] file-length  ?( need file-status need ufia           : file-length ( ca1 len1 -- len2 ior )                            file-status nip hd0b @ swap ; ?)                              [unneeded] file-type  ?( need file-status need ufia             : file-type ( ca len -- n ior )                                   file-status nip hd00 c@ swap ; ?)                             [unneeded] find-file  ?( need file-status                       : find-file ( ca len -- a | 0 ) file-status 0= and ; ?)                                                                                                                                         ( file-dir# file-dirdesc )                                      [unneeded] file-dir#  ?( need file-status need ufia             : file-dir# ( ca len -- n ior )                                   file-status nip fstr1 c@ swap ; ?)                            [unneeded] file-dirdesc  ?( need file-status need ufia          : file-dirdesc ( ca len -- n ior )                                file-status nip nstr1 c@ swapfile>screen )                                                 need assembler need ufia need set-code-file                     need hgfile need lbyte need dos-in, need dos-out,               code (file>screen) ( -- ior )                                     b push,  \ save the Forth IP                                    ufia ix ldp#, hgfile hook,  \ get the file                      nc? rif  \ no error?                                              4000 d ldp#, #128 b ldp#,                                       d h ldp,                                                        rbegin lbyte hook, d stap,                                              d incp, b decp, b a ld, c or,                           z? runtil dos-out,                                            rthen b pop, next ix ldp#, af push, ' dosior>ior jp, end-code : file>screen ( ca len -- ior )                                   0 0 2swap set-code-file (file>screen) ;                                                                                       ( g.100h g.100i )                                               need assembler need dos-in, need dos-out, need patch            code g.100h ( u -- )                                              h pop, b push,                                                  h push, patch hook, h pop, 1744 call, dos-out,                  b pop,  next ix ldp#,  jpnext, end-code                       code g.100i ( u -- )                                              h pop, b push,                                                  dos-in, 1744 call, dos-out,                                     b pop,  next ix ldp#,  jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                                       ( cd3 )                                                         need assembler need rest need get-drive                         code (cd3 ( -- ior )                                              b push, rest hook, b pop, next ix ldp#,                         af push, ' dosior>ior jp, end-code                            : cd3 ( n -- ior )                                                get-drive >r set-drive throw (cd3 r> set-drive throwcd2 )                                                         need assembler need ufia1 need rest need dos-in,                code cd2 ( n -- ior )                                             h pop,                                                          b push,  \ save the Forth IP                                    dos-in, l a ld, ufia1 sta, rest hook,                           b pop, next ix ldp#, \ restore the Forth registers              af push, ' dosior>ior jp, end-codecd1 )                                                         need assembler need ufia need rest                              code cd1 ( n -- ior )                                             h pop,                                                          b push,  \ save the Forth IP                                    l a ld, dstr1 sta, ufia ix ldp#, rest hook,                     b pop, next ix ldp#, \ restore the Forth registers              af push, ' dosior>ior jp, end-codecd0 )                                                         need assembler need dos-in, need dos-out,                       need ufia need ufia1 need set-filename                          create (cd0-error ( -- a ) asm                                    168E call, dos-out, b pop, next ix ldp#,                        0000 h ldp#, 2066 h stp,                                        af push, ' dosior>ior jp, end-asm                             code cd0 ( -- ior )                                               b push, dos-in,                                                 (cd0-error h ldp#, h push, 2066 sp stp,                         06A4 call,  \ track_0                                           dos-out, b pop, b pop, next ix ldp#, ' false jp, end-code                                                                                                                                                                                                                                                                     ( (cat wcat wacat cat acat )                                    [unneeded] (cat ?( need pcat need ufia need hd00 need >ufia1    code ((cat ( -- ior )                                             C5 c, CF c, pcat c, C1 c, DD c, 21 c, next , F5 c,              ' dosior>ior jp, end-code                                     : (cat ( b -- ) hd00 c! ufia >ufia1 ((cat throw ; ?)            [unneeded] wcat ?( need set-filename need (cat                  : wcat ( ca len -- ) set-filename $14 (cat ; ?)                 [unneeded] wacat ?( need set-filename need (cat                 : wacat ( ca len -- ) set-filename $12 (cat ; ?)                [unneeded] cat ?\ need wcat : cat ( -- ) s" *" wcat ;           [unneeded] acat ?( need wacat : acat ( -- ) s" *" wacat ;                                                                                                                                                                                                                                                                       ( back-from-dos-error_ )                                        need assembler need dos-out,                                    create back-from-dos-error_ ( -- a ) asm                          168E call, dos-out, b pop, next ix ldp#,                        0000 h ldp#, 2066 h stp,                                        af push, ' dosior>ior jp, end-asmdos c@dos  )                                                 [unneeded] @dos ?(                                              need assembler need dos-in, need dos-out,                       code @dos ( a -- x )                                              h pop, dos-in, m e ld, h incp, m d ld,                                 dos-out, d push, jpnext, end-code ?)                   [unneeded] c@dos ?(                                             need assembler need dos-in, need dos-out,                       code c@dos ( ca -- b )                                            h pop, dos-in, m a ld,                                                 dos-out, pusha jp, end-code ?)                                                                                                                                                                                                                                                                                                                                                         ( !dos c!dos )                                                  [unneeded] !dos ?(                                              need assembler need dos-in, need dos-out,                       code !dos ( x a -- )                                              h pop, d pop, dos-in, e m ld, h incp, d m ld,                                 dos-out, jpnext, end-code ?)                    [unneeded] c!dos ?(                                             need assembler need dos-in, need dos-out,                       code c!dos ( b ca -- )                                            h pop, d pop, dos-in, e m ld,                                                 dos-out, jpnext, end-code ?)                                                                                                                                                                                                                                                                                                                                                    ( @dosvar c@dosvar )                                            [unneeded] @dosvar ?(                                           need assembler need dos-vars need dos-in, need dos-out,         code @dosvar ( n -- x )                                           h pop,                                                          dos-in, dos-vars d ldp#, d addp, m e ld, h incp, m d ld,        dos-out, d push, jpnext, end-code ?)                          [unneeded] c@dosvar ?(                                          need assembler need dos-vars need dos-in, need dos-out,         code c@dosvar ( n -- b )                                          h pop, dos-in, dos-vars d ldp#, d addp, m a ld,                        dos-out, pusha jp, end-code ?)                                                                                                                                                                                                                                                                                         ( !dosvar c!dosvar )                                            [unneeded] !dosvar ?(                                           need assembler need dos-vars need dos-in, need dos-out,         code !dosvar ( x n -- )                                           h pop, dos-in, dos-vars d ldp#, d addp,                                          d pop, e m ld, h incp, d m ld,                        dos-out, jpnext, end-code ?)                           [unneeded] c!dosvar ?(                                          need assembler need dos-vars need dos-in, need dos-out,         code c!dosvar ( b n -- )                                          h pop, dos-in, dos-vars d ldp#, d addp, d pop, e m ld,                 dos-out, jpnext, end-code ?)                                                                                                                                                                                                                                                                                           ( rename-file )                                                 need dos-in, need dos-out, need back-from-dos-error_            need set-filename need ufia need >ufia1 need >ufia2             code (rename-file ( -- ior )                                      C5 c, dos-in,                                                   21 c, back-from-dos-error_ , E5 c, ED c, 73 c, 2066 ,           2626 call, 2559 call, CA c, 167C ,                              2626 call, 2559 call, C2 c, 1678 ,                              23 c, D5 c, 11 c, 3E1F , EB c, 01 c, #10 , ED c, B0 c, D1 c,    0584 call,                                                      dos-out, E1 c, C1 c, DD c, 21 c, next , ' false jp, end-code  : rename-file ( ca1 len1 ca2 len2 -- ior )                        set-filename ufia >ufia2 set-filename ufia >ufia1               (rename-file ;                                                                                                                                                                                ( r# top )                                                      variable r#                                                     : top ( -- ) r# off ;  topblocked )                                                     only forth definitions                                          need inverse need list need update                              need list-lines need vocabulary need catch                      : delete ( ca1 len1 len2 -- )                                     over min >r  r@ - ( left over ) dup 0>                          if  2dup swap dup r@ + -rot swap move  then  + r> blank ;     : insert ( ca1 len1 ca2 len2 -- )                                 rot over min >r  r@ -  over dup r@ +  rot move  r> move ;     : replace ( ca1 len1 ca2 len2 -- ) rot min move ;               vocabulary editor  also editor definitions                      need r# need top                                                variable len len off                                            2variable mark 0. mark 2!                                       -->                                                                                                                             ( blocked )                                                     create rbuf $100 allot                                          create ibuf $100 allot                                          create fbuf $100 allot                                          : h ( -- )                                                        r# @ c/l /mod swap >r scr @ line>string                         2dup drop r@ cr type                                                 r> /string 2dup drop len @ 1 inverse type 0 inverse                             len @ /string type ;                     : g ( u -- ) page list h ;                                      : l ( -- ) scr @ g ;                                            : m ( -- ) scr @ r# @ mark 2! ;                                 : a ( -- ) mark 2@ m r# ! g ;                                   : c ( n -- ) r# +! 1 len ! l ;  -->                                                                                                                                                             ( blocked )                                                     : 'rest ( -- ca len ) scr @ block b/buf r# @ /string ;          : 'line ( -- ca len ) 'rest  1- c/l 1- and 1+ ;                 : 'par ( buf "ccc<eol>" -- ca len ) >r 0 parse dup                0= if  2drop r> count  else  2dup  r> place  then ;           : t ( u "ccc<eol>" -- ) c/l * r# ! c/l len !                      0 parse tuck 'line insert if  update  then  l ;               : i ( "ccc<eol>" -- ) ibuf 'par 'line insert update l ;         : d ( -- ) 'line 2dup rbuf place len @ delete update l ;        : r ( "ccc<eol>" -- ) d i ;                                     : y ( -- ) rbuf count 'line insert update l ;                   : f ( "ccc<eol>" | -- )                                           'rest len @ c/l mod /string fbuf 'par dup len ! search          0= throw nip b/buf swap - r# ! l ;                            : il ( -- )                                                       pad c/l 'rest insert 'rest drop c/l blank update l ;  -->     ( blocked )                                                     : dl ( -- ) 'rest c/l delete update l ;                         : n ( -- ) scr @ 1+ top g ;                                     : p ( -- ) scr @ 1- top g ;                                     : s ( u "ccc<eol>" | u -- ) >r                                    begin  ['] f catch  while  scr @ r@ =  if  rdrop  exit  then           scr @ r@ u<  if  n  else  p  then  repeat  r> ;        forth definitionseditor )                                                      only forth definitions need list need update need flush                                 need parse-all need vocabulary          vocabulary editor  also editor definitions                      need r# need top                                                : text ( "ccc<eol>" -- )                                          pad c/l 1+ blank  parse-all  pad place ;                      : line ( n -- a )                                                 dup $FFF0 and #-266 ?throw scr @ line>string drop ;           : #locate ( -- n1 n2 ) r# @ c/l /mod ;                          : #lead ( -- a n ) #locate line swap ;                          : #lag ( -- ca n ) #lead dup >r + c/l r> - ;                    : -move ( ca n -- ) line c/l cmove update ;                     : e ( n -- ) line c/l blank update ;                            : s ( n -- ) dup 1 - $0E ?do i line i 1+ -move -1 +loop e ;     : h ( n -- ) line pad 1+ c/l dup pad c! cmove ;  -->            ( editor )                                                      : d ( n -- ) dup h $0F dup rot ?do i 1+ line i -move loop e ;   : m ( n -- ) r# +! cr space #lead type '_' emit                                #lag type #locate . drop ;                       : t ( n -- ) dup c/l * r# ! dup h 0 m ;                         : l ( -- ) scr @ list 0 m ;                                     : r ( n -- ) pad 1+ swap -move ;                                : p ( n "ccc<eol>"  -- ) text r ;                               : i ( n -- ) dup s r ;                                          : clear ( n -- )                                                  scr !  l/scr 0 ?do  [ also forth ] i [ previous ] e  loop ;   -->                                                                                                                                                                                                                                                                                                                             ( editor )                                                      : -text ( ca1 len1 ca2 -- f )                                     swap ?dup if  over + swap ?do                                                   dup c@ [ also forth ] i [ previous ] c@ -                       if  0= leave  else 1+  then                                   loop  else  drop 0=  then ;                     : match ( ca1 len1 ca2 len2 -- true n3 | false n4 )               >r >r 2dup r> r> 2swap over + swap [ also forth ]               ?do 2dup i -text                                                   if  >r 2drop r> - i swap - 0 swap 0 0 leave  then            loop  [ previous ]  2drop swap 0= swap ;                      : 1line ( -- f ) #lag pad count match r# +! ;                   : find ( -- )                                                     begin  $03FF r# @ <                                               if  top pad here c/l 1+ cmove #-270 throw  then  1line        until ;  -->                                                  ( editor )                                                      : delete ( n -- ) >r #lag + r@ - #lag r@ negate r# +! #lead +                       swap cmove  r> blank ;                      : n ( -- ) find 0 m ;                                           : f ( "ccc<eol>" -- ) text n ;                                  : b ( -- ) pad c@ negate m ;                                    : x ( "ccc<eol>" -- ) text find pad c@ delete 0 m ;             : till ( "ccc<eol>" -- ) #lead + text 1line 0= #-270 ?throw                                #lead + swap - delete 0 m ;          : (c) ( ca len -- )                                               #lag rot over min >r r@ r# +! r@ - >r dup here r@ cmove         here #lead + r> cmove r> cmove 0 m  update ;                  : c ( "ccc<eol>" -- )                                             text pad count dup if  (c)  else  2drop  then ;               : copy ( n1 n2 -- ) swap block cell- ! update save-buffers ;    only forth definitions                                          ( environment? )                                                need search-wordlist need alias                                 wordlist constant environment-wordlist ( -- wid )               : environment? ( ca len -- false | i*x true )                     environment-wordlist search-wordlist                            if  execute true  else  false  then ;                         need address-unit-bits need max-char need /counted-string       need /pad need floored need max-n need max-u need max-d         need max-ud need return-stack-cells need stack-cells            get-current environment-wordlist dup >order set-current         ' address-unit-bits alias address-unit-bits ( -- n )            ' max-char alias max-char ( -- u )                              ' /counted-string alias /counted-string ( -- n )                ' /hold alias /hold                                             ' /pad alias /pad ( -- n )                                      ' floored alias floored ( -- f ) -->                            ( environment? )                                                ' max-n alias max-n ( -- n )                                    ' max-u alias max-u ( -- u )                                    ' max-d alias max-d ( -- d )                                    ' max-ud alias max-ud ( -- ud )                                 ' return-stack-cells alias return-stack-cells ( -- n )          ' stack-cells alias stack-cells ( -- n )                        set-current previousaddress-unit-bits max-char /counted-string /pad floored )     [unneeded] address-unit-bits                                    ?\ 8 cconstant address-unit-bits ( -- n )                       [unneeded] max-char                                             ?\ 255 cconstant max-char ( -- u )                              [unneeded] /counted-string                                      ?\ 255 cconstant /counted-string ( -- n )                       [unneeded] /pad                                                 ?\ 84 cconstant /pad ( -- n )                                   [unneeded] floored                                              ?\ false cconstant floored ( -- f )                                                                                                                                                                                                                                                                                                                                                             ( max-n max-u max-d max-ud return-stack-cells stack-cells )     [unneeded] max-n                                                ?\ 32767 constant max-n ( -- n )                                [unneeded] max-u                                                ?\ -1 constant max-u ( -- u )                                   [unneeded] max-d                                                ?\ need max-n -1 max-n 2constant max-d ( -- d )                 [unneeded] max-ud                                               ?\ -1. 2constant max-ud ( -- ud )                               [unneeded] return-stack-cells                                   ?\ $2C +origin @ constant return-stack-cells ( -- n )           [unneeded] stack-cells                                          ?\ $2A +origin @ constant stack-cells ( -- n )                                                                                                                                                                                                                  ( Standard error codes #-01..#-15 )                             #-01 \ ABORT                                                    #-02 \ ABORT"                                                   #-03 \ stack overflow                                           #-04 \ stack underflow                                          #-05 \ return stack overflow                                    #-06 \ return stack underflow                                   #-07 \ do-loops nested too deeply during execution              #-08 \ dictionary overflow                                      #-09 \ invalid memory address                                   #-10 \ division by zero                                         #-11 \ result out of range                                      #-12 \ argument type mismatch                                   #-13 \ undefined word                                           #-14 \ interpreting a compile-only word                         #-15 \ invalid FORGET                                           ( Standard error codes #-16..#-30 )                             #-16 \ attempt to use zero-length string as a name              #-17 \ pictured numeric output string overflow                  #-18 \ parsed string overflow                                   #-19 \ definition name too long                                 #-20 \ write to a read-only location                            #-21 \ unsupported operation                                    #-22 \ control structure mismatch                               #-23 \ address alignment exception                              #-24 \ invalid numeric argument                                 #-25 \ return stack imbalance                                   #-26 \ loop parameters unavailable                              #-27 \ invalid recursion                                        #-28 \ user interrupt                                           #-29 \ compiler nesting                                         #-30 \ obsolescent feature                                      ( Standard error codes #-31..#-45 )                             #-31 \ >BODY used on non-CREATEd definition                     #-32 \ invalid name argument                                    #-33 \ block read exception                                     #-34 \ block write exception                                    #-35 \ invalid block number                                     #-36 \ invalid file position                                    #-37 \ file I/O exception                                       #-38 \ non-existent file                                        #-39 \ unexpected end of file                                   #-40 \ invalid BASE for floating point conversion               #-41 \ loss of precision                                        #-42 \ floating-point divide by zero                            #-43 \ floating-point result out of range                       #-44 \ floating-point stack overflow                            #-45 \ floating-point stack underflow                           ( Standard error codes #-46..#-60 )                             #-46 \ floating-point invalid argument                          #-47 \ compilation word list deleted                            #-48 \ invalid POSTPONE                                         #-49 \ search-order overflow                                    #-50 \ search-order underflow                                   #-51 \ compilation word list changed                            #-52 \ control-flow stack overflow                              #-53 \ exception stack overflow                                 #-54 \ floating-point underflow                                 #-55 \ floating-point unidentified fault                        #-56 \ QUIT                                                     #-57 \ exception in sending or receiving a character            #-58 \ [IF], [ELSE], or [THEN] exception                        #-59 \ ALLOCATE                                                 #-60 \ FREE                                                     ( Standard error codes #-61..#-75 )                             #-61 \ RESIZE                                                   #-62 \ CLOSE-FILE                                               #-63 \ CREATE-FILE                                              #-64 \ DELETE-FILE                                              #-65 \ FILE-POSITION                                            #-66 \ FILE-SIZE                                                #-67 \ FILE-STATUS                                              #-68 \ FLUSH-FILE                                               #-69 \ OPEN-FILE                                                #-70 \ READ-FILE                                                #-71 \ READ-LINE                                                #-72 \ RENAME-FILE                                              #-73 \ REPOSITION-FILE                                          #-74 \ RESIZE-FILE                                              #-75 \ WRITE-FILE                                               ( Standard error codes #-76..#-79 )                             #-76 \ WRITE-LINE                                               #-77 \ malformed xcharystem error codes #-256..#-270 )                             #-256 \ not a word nor a number                                 #-257 \ warning: is not unique                                  #-258 \ stack imbalance                                         #-259 \ trying to load from block 0                             #-260 \ wrong digit                                             #-261 \ deferred word is uninitialized                          #-262 \ assertion failed                                        #-263 \ execution only                                          #-264 \ definition not finished                                 #-265 \ loading only                                            #-266 \ off current editing block                               #-267 \ warning: not present, though needed                     #-268 \ needed, but not located                                 #-269 \ relative jump too long                                  #-270 \ text not found                                          ( System error codes #-271..#-285 )                             #-271 \ immediate word not allowed in this structure            #-272 \ array index out of range                                #-273 \ invalid assembler condition                             #-274 \ command line history overflow                           #-275 \ wrong number                                            #-276 \ dictionary reached the zone of memory banks             #-277 \ needed, but not indexed                                 #-278 \ empty block found: quit indexing                        #-279 \ user area overflow                                      #-280 \ user area underflow                                     #-281 \ escaped strings search-order overflow                   #-282 \ escaped strings search-order underflow                  #-283 \ assembly label number out of range                      #-284 \ assembly label number already used                      #-285 \ too many unresolved assembly label references           ( System error codes #-286..#-300 )                             #-286 \ not located                                             #-287 \ wrong number of drives                                  #-288 \ too many files open                                     #-289 \ input source exhausted                                  #-290 \ invalid UDG scan                                        #-291 \                                                         #-292 \                                                         #-293 \                                                         #-294 \                                                         #-295 \                                                         #-296 \                                                         #-297 \                                                         #-298 \                                                         #-299 \                                                         #-300 \                                                         ( G+DOS error codes #-1000..#-1014 )                            #-1000 \ G+DOS: Nonsense in G+DOS                               #-1001 \ G+DOS: Nonsense in GNOS                                #-1002 \ G+DOS: Statement end error                             #-1003 \ G+DOS: Break requested                                 #-1004 \ G+DOS: Sector error                                    #-1005 \ G+DOS: Format data lost                                #-1006 \ G+DOS: Check disk in drive                             #-1007 \ G+DOS: No +SYS file                                    #-1008 \ G+DOS: Invalid file name                               #-1009 \ G+DOS: Invalid station                                 #-1010 \ G+DOS: Invalid device                                  #-1011 \ G+DOS: Variable not found                              #-1012 \ G+DOS: Verify failed                                   #-1013 \ G+DOS: Wrong file type                                 #-1014 \ G+DOS: Merge error                                     ( G+DOS error codes #-1015..#-1029 )                            #-1015 \ G+DOS: Code error                                      #-1016 \ G+DOS: Pupil set                                       #-1017 \ G+DOS: Invalid code                                    #-1018 \ G+DOS: Reading a write file                            #-1019 \ G+DOS: Writing a read file                             #-1020 \ G+DOS: O.K. G+DOS                                      #-1021 \ G+DOS: Network off                                     #-1022 \ G+DOS: Wrong drive                                     #-1023 \ G+DOS: Disk write protected                            #-1024 \ G+DOS: Not enough space on disk                        #-1025 \ G+DOS: Directory full                                  #-1026 \ G+DOS: File not found                                  #-1027 \ G+DOS: End of file                                     #-1028 \ G+DOS: File name used                                  #-1029 \ G+DOS: No G+DOS loaded                                 ( G+DOS error codes #-1030..#-1031 )                            #-1030 \ G+DOS: STREAM used                                     #-1031 \ G+DOS: CHANNEL usederror codes #-1045..#-1059 )                           #-1045 \ IDEDOS: (Unused error)                                 #-1046 \ IDEDOS: (Unused error)                                 #-1047 \ IDEDOS: (Unused error)                                 #-1048 \ IDEDOS: (Unused error)                                 #-1049 \ IDEDOS: (Unused error)                                 #-1050 \ IDEDOS: (Unused error)                                 #-1051 \ IDEDOS: (Unused error)                                 #-1052 \ IDEDOS: (Unused error)                                 #-1053 \ IDEDOS: (Unused error)                                 #-1054 \ IDEDOS: (Unused error)                                 #-1055 \ IDEDOS: (Unused error)                                 #-1056 \ IDEDOS: Invalid partition                              #-1057 \ IDEDOS: Partition already exists                       #-1058 \ IDEDOS: Not implemented                                #-1059 \ IDEDOS: Partition open                                 ( IDEDOS error codes #-1060..#-1066 )                           #-1060 \ IDEDOS: Out of partition handles                       #-1061 \ IDEDOS: Not a swap partition                           #-1062 \ IDEDOS: Drive already mapped                           #-1063 \ IDEDOS: Out of XDPBs                                   #-1064 \ IDEDOS: No swap partition available                    #-1065 \ IDEDOS: Invalid device                                 #-1066 \ IDEDOS: 8-bit data transfererror codes #-1128..#-1142 )                               #-1128 \ OS: OK                                                 #-1129 \ OS: NEXT without FOR                                   #-1130 \ OS: Variable not found                                 #-1131 \ OS: Subscript wrong                                    #-1132 \ OS: Out of memory                                      #-1133 \ OS: Out of screen                                      #-1134 \ OS: Number too big                                     #-1135 \ OS: RETURN without GO SUB                              #-1136 \ OS: End of file                                        #-1137 \ OS: STOP statement                                     #-1138 \ OS: Invalid argument                                   #-1139 \ OS: Integer out of range                               #-1140 \ OS: Nonsense in BASIC                                  #-1141 \ OS: BREAK - CONT repeats                               #-1142 \ OS: Out of DATA                                        ( OS error codes #-1143..#-1154 )                               #-1143 \ OS: Invalid file name                                  #-1144 \ OS: No room for line                                   #-1145 \ OS: STOP in INPUT                                      #-1146 \ OS: FOR without NEXT                                   #-1147 \ OS: Invalid I/O device                                 #-1148 \ OS: Invalid colour                                     #-1149 \ OS: BREAK into program                                 #-1150 \ OS: RAMTOP no good                                     #-1151 \ OS: Statement lost                                     #-1151 \ OS: Invalid stream                                     #-1152 \ OS: FN without DEF                                     #-1153 \ OS: Parameter error                                    #-1154 \ OS: Tape loading error                                                                                                                                                                 ( ?compiling ?executing abort" warning" )                       [unneeded] ?compiling                                           ?\ : ?compiling ( -- ) compiling? 0= -14 ?throw ;               [unneeded] ?executing                                           ?\ : ?executing ( -- ) compiling? -263 ?throw ;                 [unneeded] abort" ?(                                            [defined] abort-message ?\ 2variable abort-message              : (abort") ( n -- )                                               r> count rot if  abort-message 2! -2 throw  then + >r ;       : abort" ( Compilation: "ccc<quote>" -- )                         postpone (abort") ," ; immediate compile-only ?)              [unneeded] warning?( ?( need string-parameter                   : (warning") ( f -- )                                             string-parameter rot if  type  else  2drop  then ;            : warning"  \ Compilation: ( "ccc<quote>" -- )                    postpone (warning") ," ; immediate compile-only ?)            ( error>ordinal error>line errors-block .throw-message )        : error>ordinal ( -n1 -- +n2 )                                    abs dup 256 < ?exit  \ standard                                     dup 1000 < if  [ 256 91 - ] literal - exit  then  \             [ 1000 300 - 256 91 - + ] literal - ;                     : error>line ( -n1 -- n2 )                                        error>ordinal dup >r                                            begin  dup dup l/scr / - r@ <>  while  1+  repeat  rdrop ;    need .line                                                      variable errors-block                                           s" Standard error codes" located errors-block !                 : .throw-message ( n -- )                                         errors-block @                                                  if    cr error>line errors-block @ .line space                  else  .throw#  then ;                                         ' .throw-message ' .throw defer!                                ( catch )                                                       : catch ( xt -- exception# | 0 )                                  sp@ >r          ( xt ) \ save data stack pointer                catcher @ >r    ( xt ) \ save previous catcher                  rp@ catcher !   ( xt ) \ set current catcher                    execute         ( )    \ `execute` returns if no `throw`        r> catcher !    ( )    \ restore previous catcher               r> drop         ( )    \ discard saved stack pointer            0 ;             ( 0 )  \ normal completion, no error                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( +perform base-execute call don't executions )                 [unneeded] +perform ( a n -- )                                  ?\ : +perform ( a n -- ) cells + perform ;                      [unneeded] base-execute                                         ?\ : base-execute ( xt n -- ) base @ >r execute r> base ! ;     [unneeded] call ?(                                              code call ( a -- )                                                E1 c,  C5 c,  CD c, >mark  C1 c,  DD c, 21 c, next , jpnext,                        >resolve E9 c, end-code ?)                [unneeded] don't ?(                                             : don't ( n1 n2 -- | n1 n2 )                                      2dup = if  2drop unnest unnest  then ; compile-only ?)        [unneeded] executions ?( need 2rdrop                            : executions ( xt n -- )                                          2>r begin   2r@   while                                               2r> 1- 2>r execute  repeat  drop 2rdrop ; ?)            ( ?repeat recurse ?? )                                          [unneeded] ?repeat ?( need cs-dup                               : ?repeat ( Compilation: dest -- dest )                                    ( Execution:   f -- )                                  cs-dup  postpone until ; immediate ?)                         [unneeded] recurse ?(                                           : recurse ( -- )                                                  latestxt compile, ; immediate compile-only ?)                 [unneeded] ?? ?(                                                : ?? ( Compilation: "name" -- ) ( Runtime: f -- )                 postpone if                                                     defined ( nt | 0 ) ?dup 0= -13 ?throw                           name>immediate? ( xt f ) if  execute  else  compile,  then      postpone then                                                  ;  immediate compile-only ?)                                                                                                   ( retry ?retry ?leave )                                         [unneeded] retry ?( need name>body                              : retry ( Compilation: -- ) ( Run-time: -- )                      latest name>body postpone again                                ; immediate compile-only ?)                                    [unneeded] ?retry ?( need retry                                 : ?retry ( Compilation: -- ) ( Run-time: f -- )                   postpone if  postpone retry  postpone then                     ; immediate compile-only ?)                                    [unneeded] ?leave ?(                                            code ?leave ( f -- ) ( R: loop-sys -- | loop-sys )                E1 c, 78 04 + c, B0 05 + c, C2 c, ' leave , jpnext,             end-code ?)                                                                                                                                                                                                                                                   ( associative-case: )                                           need create:                                                    : associative-case: ( "name" -- )                                 create:                                                         does> ( n -- ) ( n pfa ) cell+  \ move past `lit`               begin   2dup @ dup 0= >r ( n a n n')                                    =  r> or  0= ( n a f )                                  while   ( n a ) [ 3 cells ] literal +  \ no match               repeat  nip cell+ perform ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( begincase )                                                   need cs-push need cs-pop                                        : begincase ( -- )                                                postpone case  postpone begin  cs-push                          ; immediate compile-only                                      : (repeatcase) ( -- )                                             cs-pop  postpone again  postpone endcase ;                    : repeatcase ( -- )                                               postpone drop  postpone (repeatcase)                            ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                      ( [: ;] )                                                       : [:  \ Compilation: ( -- orig xt )                               postpone ahead  latestxt here lastxt !                          docolon [ assembler-wordlist >order ] call, [ previous ]       ; immediate compile-only                                       : ;]  \ Compilation: ( orig xt1 -- )                              lastxt !  postpone exit  dup >resolve                           cell+ postpone literal ; immediate compile-onlyswitcher :switch <switch )                                    need link@ need link, need pick                                 : switcher ( i*x n head -- j*x )                                  dup cell+ @ >r  \ save default xt                               begin  link@ ?dup while ( n a )                                   2dup cell+ @ = if   \ match                                       nip cell+ cell+ perform  rdrop exit                           then                                                          repeat  r> execute ;                                          : :switch ( xt "name" -- head )                                   create  >mark swap ,  does> ( n -- ) ( n pfa ) switcher ;     : <switch ( head xt n -- head ) 2 pick link,  , , ;                                                                                                                                                                                                                                                                             ( [+switch [switch switch] runs run: )                          [unneeded] [+switch                                             ?\ need >body  : [+switch ( "name" -- head ) ' >body ;          [unneeded] [switch [unneeded] switch] and ?( need switcher      : [switch ( "name1" "name2" -- head )                             create  >mark ' ,  does> ( n -- ) ( n pfa ) switcher ;        need alias  ' drop alias switch] ( head -- ) ?)                 [unneeded] runs ?( need <switch                                 : runs ( head n "name" -- head ) ' swap <switch ; ?)            [unneeded] run: ?( need evaluate need <switch need :noname      : run: ( head n "ccc<semicolon>" -- head )                        :noname ';' parse evaluate postpone ; ( xt )                    swap <switch ; ?)                                                                                                                                                                                                                                             ( -branch +branch )                                             [unneeded] -branch ?(                                           code -branch ( n -- )                                             E1 c,  CB c, 7C c,  C2 c, ' branch ,  03 c, 03 c,               jpnext, end-code ?)                                           [unneeded] +branch ?(                                           code +branch ( n -- )                                             E1 c,  CB c, 7C c,  CA c, ' branch ,  03 c, 03 c,               jpnext, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( case )                                                        [defined] alias dup 0= ?\   ' 0 alias case                                             ?\ 0 cconstant case                                             immediate compile-only                   : of                                                              postpone over  postpone =  postpone if  postpone drop ;         immediate compile-only                                        [defined] alias dup 0=                                          ?\ ' else alias endof ( orig1 -- orig2 )                        ?\ : endof ( orig1 -- orig2 ) postpone else ;                   immediate compile-only                                          : endcase                                                         postpone drop  begin ?dup while postpone then repeat ;          immediate compile-only                                                                                                                                                                        ( between-of )                                                  need between                                                    : (between-of) ( x1 x2 x3 -- x1 x1 | x1 x1' )                     2>r dup dup 2r> between 0= if  invert  then ;                 : between-of                                                      postpone (between-of) postpone of ;  immediate compile-onlyless-of greater-of )                                          [unneeded] less-of ?(                                           [defined] nup ?\ : nup ( x1 x2 -- x1 x1 x2 ) over swap ;        : (less-of) ( x1 x2 -- x1 x1 | x1 x1' )                           nup nup >= if  invert  then ;                                 : less-of                                                         postpone (less-of) postpone of ;  immediate compile-only ?)   : (greater-of) ( x1 x2 -- x1 x1 | x1 x1' )                        nup nup <= if  invert  then ;                                 : greater-of                                                      postpone (greater-of) postpone of ; immediate compile-only                                                                                                                                                                                                                                                                                                                                    ( any-of default-of )                                           [unneeded] any-of ?( need any? need pick                        : (any-of) ( x0 x1..xn n -- x0 x0 | x0 0 )                        dup 1+ pick >r any? r> tuck and ;                             : any-of                                                          postpone (any-of) postpone of ; immediate compile-only ?)     : default-of ( -- )                                               postpone dup postpone of ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( within-of or-of )                                             [unneeded] within-of ?( need within                             : (within-of) ( x1 x2 x3 -- x1 x1 | x1 x1' )                      2>r dup dup 2r> within 0= if  invert  then ;                  : within-of                                                       postpone (within-of) postpone of ; immediate compile-only ?)  : (or-of) ( x1 x2 x3 -- x1 x1 | x1 x1' )                          2>r dup dup dup r> = swap r> = or 0= if  invert  then ;       : or-of                                                           postpone (or-of) postpone of ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                         ( cases: )                                                      : cases: ( "name" -- orig 0 )                                     create >mark 0                                                  does> ( selector -- ) ( selector pfa )                            true rot rot dup ( true selector pfa pfa )                      cell+ swap @   ( true selector pfa+2 options )                  0 do ( true selector a )                                          2dup @ = ( true selector a f )                                  if    dup cell+ perform                                               2>r 0= 2r> ( false selector a ) leave                     else  cell+ cell+  then                                      loop ( true selector a | false selector a )                     rot if  perform  else  drop  then  drop ;                    : case> ( orig counter selector "name" -- orig counter' )         , ' compile, 1+ ;                                             : othercase> ( orig counter "name" -- ) ' compile, swap ! ;     ( ?ccase )                                                      need alias need char-position?                                  ' >resolve alias end?ccase  immediate compile-only              : (?ccase) ( c ca len -- )                                        rot char-position? if  2+ cells r@ + perform  then ;          : ?ccase                                                          postpone (?ccase) postpone ahead ; immediate compile-onlyccase0 )                                                      need alias need char-position?                                  ' >resolve alias endccase0  immediate compile-only              : (ccase0) ( c ca len -- )                                        rot char-position? if    ( +n ) 3 +                                                else  2                                                         then  cells r@ + perform ;                 : ccase0                                                          postpone (ccase0) postpone ahead ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( ccase )                                                       need char-position?                                             : endccase                                                        here cell- swap !                                               >resolve                                                       ; immediate compile-only                                       : (ccase) ( c ca len -- )                                         rot char-position? if    ( +n ) 3 + cells r@ +                                     else  r@ cell+ cell+ @                                          then  perform ;                            : ccase                                                           postpone (ccase)  postpone ahead  >mark                         ; immediate compile-only                                                                                                                                                                                                                                      ( -if -while -until -exit )                                     [unneeded] -if ?( need +branch                                  : -if ( f -- )                                                    postpone +branch >mark ; immediate compile-only ?)            [unneeded] -while ?( need -if need cs-swap                      : -while ( f -- )                                                 postpone -if  postpone cs-swap ; immediate compile-only ?)    [unneeded] -until ?( need +branch                               : -until ( n -- )                                                 postpone +branch <resolve ; immediate compile-only ?)         [unneeded] -exit ?(                                             code -exit ( n -- ) ( R: nest-sys | -- nest-sys | )               E1 c,  CB c, 7C c,  C2 c, ' exit ,  jpnext, end-code ?)                                                                                                                                                                                                       ( +if +while +until +exit )                                     [unneeded] +if ?( need -branch                                  : +if ( n -- )                                                    postpone -branch >mark ; immediate compile-only ?)            [unneeded] +while ?( need +if need cs-swap                      : +while ( n -- )                                                 postpone +if  postpone cs-swap ; immediate compile-only ?)    [unneeded] +until ?( need -branch                               : +until ( n -- )                                                 postpone -branch <resolve ; immediate compile-only ?)         [unneeded] +exit ?(                                             code +exit ( n -- ) ( R: nest-sys | -- nest-sys | )               E1 c,  CB c, 7C c,  C2 c, ' exit ,  jpnext, end-code ?)                                                                                                                                                                                                       ( 0if 0while 0until 0exit )                                     [unneeded] 0if ?(                                               : 0if ( f -- )                                                    postpone ?branch >mark ; immediate compile-only ?)            [unneeded] 0while ?( need 0if need cs-swap                      : 0while ( f -- )                                                 postpone 0if  postpone cs-swap ; immediate compile-only ?)    [unneeded] 0until ?(                                            : 0until ( f -- )                                                 postpone ?branch <resolve ; immediate compile-only ?)         [unneeded] 0exit ?(                                             code 0exit ( f -- ) ( R: nest-sys | -- nest-sys | )               E1 c,  78 04 + c,  B0 05 + c,  CA c, ' exit ,                   jpnext, end-code ?)                                                                                                                                                                           ( dfor dstep di )                                               : (dstep) ( R: x d -- x d' )                                      r>  \ save the return address                                   2r> 2dup or  \ is the index zero?                               if    -1. d+ 2>r                                                else  2drop  cell+ cell+                                        then  >r ;                                                    : dfor ( d -- ) postpone 2>r <mark ; immediate compile-only     : dstep ( -- )                                                    postpone (dstep) postpone branch <resolve                       ; immediate compile-only                                      need alias                                                      ' 2r@ alias dfor-i ( -- d )                                                                                                                                                                                                                                     ( {if if} if> |if| )                                            need cs-roll                                                    : {if ( -- 0 ) 0 ; immediate compile-only                       : if>                                                             1+ >r postpone if  r> ; immediate compile-only                : |if|                                                            >r postpone ahead \ new orig                                    1 cs-roll postpone then \ resolve old orig                      r> ; immediate compile-only                                   : if} \ end of conditional                                        >r  postpone ahead                                              1 cs-roll postpone then \ resolve old orig                      -22 postpone literal postpone throw                             r> 0 ?do  postpone then  loop ; immediate compile-only                                                                                                                                        ( {do do} do> |do| )                                            need cs-pick need cs-roll                                       : {do ( c: -- dest ) postpone begin ; immediate compile-only    : do> ( c: dest -- orig1 dest )                                   postpone if  1 cs-roll ; immediate compile-only               : |do| ( c: orig1 dest -- dest )                                  0 cs-pick postpone again \ resolve a copy of dest               1 cs-roll postpone then \ resolve old orig                     ; immediate compile-only                                       : do} ( c: orig dest -- )                                         postpone again \ resolve dest                                   postpone then \ resolve orig                                   ; immediate compile-only                                                                                                                                                                                                                                       ( do -do )                                                      [unneeded] do ?(                                                : do ( -- do-sys )                                                postpone (do) >mark ; immediate compile-only ?)               [unneeded] -do ?(                                               code (-do) ( n1|u1 n2|u2 -- ) ( R: -- loop-sys )                  D1 c, E1 c, A7 c, ED c, 52 c, D2 c, ' branch , 19 c, EB c,      13 c, C3 c, ' (do) 2+ , end-code                              : -do ( -- do-sys )                                               postpone (-do) >mark ; immediate compile-only ?)                                                                                                                                                                                                                                                                                                                                                                                                              ( doer )                                                        need >body                                                      : doer-noop ( -- ) ;                                            : doer ( "name" -- )                                              create  ['] doer-noop >body ,  does> ( pfa ) @ >r ;           : (make)                                                          r> dup cell+ dup cell+                                            ( a1 a2 a2 )                                                  swap @ >body !                                                  @ ?dup if  >r  then ;                                         variable >;and                                                  : make                                                            compiling? if     postpone (make)  here >;and ! 0 ,                        else   here ' >body ! ]  then ; immediate          : ;and ( -- ) postpone exit  here >;and @ ! ; immediate         : undo ( "name" -- ) ['] doer-noop >body  ' >body ! ;           ( for step )                                                    code (step) ( R: n -- n' )                                        2A c, rp ,                                                      5E c, 23 c, 56 c,                                               7A c, B3 c,                                                     1B c, 72 c, 2B c, 73 c,                                         C2 c, ' branch ,                                                23 c, 23 c, 22 c, rp ,                                          03 c, 03 c, jpnext,                                             end-code                                                      : for ( n -- ) postpone >r <mark ; immediate compile-only       : step ( -- )                                                     postpone (step) <resolve ; immediate compile-only             need alias                                                      ' r@ alias for-i ( -- n )                                                                                                       ( j k )                                                         [unneeded] j ?(                                                 code j ( -- n|u ) ( R: do-sys1 do-sys2 -- do-sys1 do-sys2 )       2A c, rp ,  11 c, 3 cells ,  19 c,  C3 c, ' i 3 + , end-code  ?)                                                              [unneeded] k ?(                                                 code k ( -- n|u )                                                 ( R: loop-sys1..loop-sys3 -- loop-sys1..loop-sys3 )             2A c, rp ,  11 c, 6 cells ,  19 c,  C3 c, ' i 3 + , end-code  ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( options[ )                                                    variable (default-option)                                       variable #options                                               : default-option ( "name" -- ) ' (default-option) ! ;           : (options) ( i*x x -- j*x )                                      false swap ( false x ) \ default flag returned by the loop      r> dup @ >r   \ set the new exit point                          cell+ dup >r  \ save the address of the default option xt       dup cell+ @ ( false x a n )                                     0 do                                                              cell+ cell+ 2dup @ = ( false x a' f ) \ match?                  if  nip nip cell+ perform  true 0 0  leave then               loop ( f x1 x2 ) 2drop                                          if    rdrop       \ match, so discard the default option        else  r> perform  \ no match, so execute the default option     then ;   -->                                                  ( options[ )                                                    : options[                                                        (default-option) off        \ assume no default option          #options off                \ init number of options            postpone (options)          \ compile run-time handler          >mark >mark >mark           ( a1 a2 a3 )                        postpone [                  \ start interpreting options        ; immediate compile-only                                      : option ( x "name" -- )                                          ,  ' compile,  1 #options +! ;                                : ]options ( a1 a2 a3 -- )                                        #options @ swap !           \ store number of options           (default-option) @ swap !   \ store default option xt           >resolve                    \ store exit point                  ] ;                                                                                                                           ( positional-case: )                                            need create:                                                    : positional-case: ( "name" -- )                                  create:                                                         does>   ( n -- )                                                        ( n pfa ) swap cells + performselect )                                                      0 constant select immediate                                     0 constant cond immediate                                       : thens  begin  ?dup while  postpone then  repeat ;             : endselect  postpone drop  thens ; immediate                   : when                                                            postpone else  >r >r >r  thens  r> r> r>  postpone drop        ; immediate                                                    : continue                                                        >r >r >r thens  0  r> r> r> ; immediate                       : equal                                                           postpone over  postpone -  postpone if ; immediate            : (range) ( x0 x1 x2 -- x0 f )                                    2>r dup 2r> over - -rot - u< ;                                : range                                                           postpone (range)  postpone if ; immediate  -->                ( cs-pick cs-roll cs-swap cs-drop )                             [unneeded] cs-pick                                              ?\ need alias need pick ' pick alias cs-pick                    [unneeded] cs-roll                                              ?\ need alias need roll ' roll alias cs-roll                    [unneeded] cs-swap                                              ?\ need alias ' swap alias cs-swap                              [unneeded] cs-drop                                              ?\ need alias ' drop alias cs-drop                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( switch: switch :clause )                                      [unneeded] switch:                                              ?\ : switch: ( "name" -- ) wordlist constant ;                  [unneeded] switch [unneeded] :clause and ?(                     need search-wordlist need nextname need >bstring                : switch ( x switch -- )                                          swap >bstring rot search-wordlist if  execute  then ;         : :clause ( x switch -- )                                         get-current >r set-current  >bstring nextname :                             r> set-current ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                               ( cswitch :cclause 2switch :2clause )                           [unneeded] cswitch [unneeded] :cclause and ?(                   need search-wordlist need nextname need >bstring                : cswitch ( c switch -- )                                         swap c>bstring rot search-wordlist if  execute  then ;        : :cclause ( c switch -- )                                        get-current >r set-current  c>bstring nextname :                            r> set-current ; ?)                               [unneeded] 2switch [unneeded] :2clause and ?(                   need search-wordlist need nextname need 2>bstring               : 2switch ( xd switch -- )                                        swap 2>bstring rot search-wordlist if  execute  then ;        : :2clause ( xd switch -- )                                       get-current >r set-current  2>bstring nextname :                            r> set-current ; ?)                                                                                               ( thiscase )                                                    need alias                                                      : ifcase ( x f -- )                                               postpone if  postpone drop ; immediate compile-only           : exitcase ( -- )                                                 postpone exit  postpone then ; immediate compile-only         ' dup alias thiscase ( x -- x x )                               ' drop alias othercase ( ntimes dtimes )                                                [unneeded] times ?(                                             variable times-xt  \ the _xt_ executed by `times`               : times ( n -- )                                                  rp@ @  dup cell+ rp@ !  @ times-xt !                            0 ?do  times-xt perform  loop ; compile-only ?)               [unneeded] dtimes ?( need dfor need d-                          variable dtimes-xt  \ the _xt_ executed by `dtimes`             : dtimes ( d -- )                                                 rp@ @  dup cell+ rp@ !  @ dtimes-xt !                           2dup or if    1. d- dfor  dtimes-xt perform  dstep  exit                then  2drop                                            ; compile-only ?)                                                                                                                                                                                                                                              ( clear-block )                                                 need assembler                                                  code clear-block ( column row width height -- )                   exx, 0000 ix ldp#, sp addix,                                    04 ix a ftx, a d ld, rrca, rrca, rrca, #224 and#, 06 ix orx,    a e ld, d a ld, #24 and#, #64 or#, a d ld,                      02 ix c ftx, 00 ix a ftx, a add, a add, a add, a b ld,          rbegin                                                            d push, d h ldp, d incp, 00 m ld#, b push, c dec,               nz? rif  00 b ld#, ldir,  rthen                                 b pop, d pop, d inc, d a ld, 07 and#,                           z? rif  #32 a ld#, e add, a e ld,                                 nc? rif  d a ld, 08 sub#, a d ld,  rthen                      rthen                                                         rstep  0000 h ldp#, sp addp, 04 cells d ldp#, d addp, ldsp,     exx, next ix ldp#, jpnext, end-code                           ( color-block )                                                 need assembler                                                  code color-block ( column row width height color -- )             exx, 0 ix ldp#, sp addix,                                       #6 ix a ftx, #22 d ld#, a add, a add, a add, a add,             d rl, a add, d rl, #8 ix orx, a e ld,                           #2 ix b ftx, #4 ix c ftx,                                       rbegin                                                            d push, d h ldp, d incp, b push, #0 b ld#,                      00 ix a ftx, a m ld, c dec,                                     nz? rif  ldir,  rthen                                           b pop, h pop, #32 d ldp#, d addp, exde,                       rstep                                                           0000 h ldp#, sp addp, 05 cells d ldp#, d addp, ldsp,            exx, next ix ldp#, jpnext, end-code                                                                                           ( wipe-block )                                                  need assembler                                                  code wipe-block ( column row width height color -- )              exx,  0 ix ldp#, sp addix,                                      #6 ix a ftx, a d ld, rrca, rrca, rrca, #224 and#, #8 ix orx,    a e ld, d a ld, #24 and#, #64 or#, a d ld,                      #4 ix c ftx, #2 ix a ftx, a add, a add, a add, a b ld,          rbegin                                                            d push, d h ldp, d incp, 0 m ld#, b push, c dec,                nz? rif  0 b ld#, ldir,  rthen                                  b pop, d pop, d inc, d a ld, 7 and#,                            z? rif  #32 a ld#, e add, a e ld,                                 nc? rif  d a ld, 8 sub#, a d ld,  rthen                       rthen                                                         rstep  -->                                                                                                                    ( wipe-block )                                                    #6 ix a ftx, #22 d ld#, a add, a add, a add, a add,             d rl, a add, d rl, #8 ix orx, a e ld, #2 ix b ftx,              rbegin                                                            d push, d h ldp, d incp, b push, #0 b ld#,                      0 ix a ftx, a m ld, c dec,                                      nz? rif  ldir,  rthen                                           b pop, h pop, #32 d ldp#, d addp, exde,                       rstep                                                           0 h ldp#, sp addp, #5 cells d ldp#, d addp, ldsp,               exx, next ix ldp#, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                           ( uncolored-circle-pixel colored-circle-pixel )                 [unneeded] uncolored-circle-pixel ?(                            need assembler need gxy>scra_                                   create uncolored-circle-pixel ( -- a ) asm                        h push, b push, d push, gxy>scra_ call,                         a b ld, b inc, 1 a ld#, rbegin  rrca,  rstep  m or, a m ld,     d pop, b pop, h pop, ret, end-asm ?)                          [unneeded] colored-circle-pixel ?(                              need assembler need gxy>scra_                                   create colored-circle-pixel ( -- a ) asm                          h push, b push, d push, gxy>scra_ call,                         22EC call, d pop, b pop, h pop, ret, end-asm ?)                                                                                                                                                                                                                                                                               ( circle-pixel set-circle-pixel )                               [unneeded] circle-pixel                                         ?\ create circle-pixel ( -- a ) asm noop_ jp, end-asm           [unneeded] set-circle-pixel ?( need circle-pixel                : set-circle-pixel ( a -- )                                       [ circle-pixel 1+ ] literalcircle )                                                      need assembler need circle-pixel need set-circle-pixel          code circle ( gx gy b -- )                                        h pop, l a ld, d pop, h pop, l d ld, b push, 0 h ld#, a l ld,   exx, cpl, a c ld, FF b ld#, b incp, 1 h ldp#, b addp, exde,     c rl, b rl, 5 h ldp#, b addp, 3 b ldp#, exx,                    rbegin  d a ld, h add, a c ld, e a ld, l add, a b ld,           circle-pixel call,                                              e a ld, l sub, a b ld, circle-pixel call,                       d a ld, h sub, a c ld, circle-pixel call,                       e a ld, l add, a b ld, circle-pixel call,                     -->                                                                                                                                                                                                                                                                                                                             ( circle )                                                        d a ld, l add, a c ld, e a ld, h add, a b ld,                   circle-pixel call,                                              e a ld, h sub, a b ld, circle-pixel call,                       d a ld, l sub, a c ld, circle-pixel call,                       e a ld, h add, a b ld, circle-pixel call,                       h a ld, l cp, c? rwhile  \ y x > while                          exx, d 7 bit, z? rif                                            exde, d addp, exde, h incp, h incp, exx, l dec,                 relse  exde, b addp, exde, exx,  rthen                          exx, b incp, b incp, h incp, h incp, exx, h inc, rrepeat        exx, b pop, next ix ldp#, jpnext, end-code                                                                                                                                                                                                                                                                                    ( cls-chars0 )                                                  need assembler                                                  code cls-chars0 ( -- )                                            b push, 6 b ld#,                                                rbegin  b push,  57FF h ldp#,                                           rbegin   20 c ld#, a and,                                                rbegin   nop, m sla,                                                     nop, m rlc,                                                     nop, m sla,                                                     nop, h decp, c dec,                                    z? runtil                                                       3F a ld#, h cp,                                        z? runtil                                                       b pop, rstep                                            b pop, jpnext, end-code                                                                                                       ( cls-chars1 )                                                  need assembler                                                  code cls-chars1 ( -- )                                            b push, 08 b ld#,                                               rbegin                                                            4000 h ldp#,  \ screen bitmap address                           rbegin                                                            m srl, h incp,                                                  m sla, h incp,                                                  58 a ld#, h cp,                                               z? runtil                                                     rstep                                                           b pop,  jpnext, end-code                                                                                                                                                                                                                                      ( horizontal-curtain )                                          need assembler                                                  code horizontal-curtain ( b -- )                                  d pop, b push,                                                  e a ld, 5800 d ldp#, 5AFF h ldp#,                               0C b ld#,                                                       rbegin  b push, 20 b ld#,                                               rbegin  a m ld, d stap,                                                 b push,  02 b ld#,                                              rbegin  b push,  FF b ld#, rbegin  rstep                                b pop,  rstep                                           b pop, d incp, h decp,  rstep                           b pop,  rstep                                           b pop,  jpnext, end-code                                                                                                                                                                      ( vertical-curtain )                                            need assembler                                                  code vertical-curtain ( b -- )                                    h pop, h push,                                                  e a ld, 5800 h ldp#, 5AFF h ldp#, 10 b ld#,                     rbegin  h push, 18 b ld#, h push, h push,                               rbegin  a m ld, h stap, h push, 02 b ld#,                               rbegin  h push, FF b ld#,  rbegin  rstep                                h pop,  rstep                                           20 b ld#,                                                       rbegin  h incp, h decp,  rstep                                  h pop,  rstep                                           h pop, h pop, h pop, h incp, h decp,  rstep             h pop, jpnext, end-code                                                                                                                                                                       ( g-xy g-x g-y g-at-xy g-at-x g-at-y g-home )                   [unneeded] g-xy ?( need os-coordx need os-coordy                : g-xy ( -- gx gy ) os-coordx c@ os-coordy c@ ; ?)              [unneeded] g-x                                                  ?\ need os-coordx : g-x ( -- gx ) os-coordx c@ ;                [unneeded] g-y                                                  ?\ need os-coordy : g-y ( -- gy ) os-coordy c@ ;                [unneeded] g-at-xy dup ?\ need os-coordx need os-coordy         ?\ : g-at-xy ( gx gy -- ) os-coordy c! os-coordx c! ;           [unneeded] g-at-x                                               ?\ need os-coordx : g-at-x ( gx -- ) os-coordx c! ;             [unneeded] g-at-y                                               ?\ need os-coordy : g-at-y ( gy -- ) os-coordy c! ;             [unneeded] g-home                                               ?\ need os-coords  : g-home ( -- ) os-coords off ;                                                                              ( fade-display )                                                need assembler                                                  code fade-display ( -- )                                          b push,                                                         8 b ld#, rbegin  5AFF h ldp#, halt, halt,                         rbegin                                                            m a ld, a d ld, %00000111 and#, nz? rif  a dec,   rthen         a e ld, a d ld, %00111000 and#, nz? rif  8 sub#,  rthen           e or,  d xor, %00111111 and#, d xor, a m ld,                 h decp, h a ld, 58 cp#, c? runtil                            rstep b pop, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                 ( invert-display wave-display blackout )                        [unneeded] invert-display ?( need assembler                     code invert-display ( -- )                                        4000 h ldp#, rbegin   m a ld, cpl, a m ld, h incp,                                    h a ld, 58 cp#,  z? runtil                jpnext, end-code ?)                                           [unneeded] wave-display ?( need assembler                       code wave-display ( -- )                                          b push, 20 b ld#,                                               rbegin  57FF h ldp#,                                                    rbegin   m rrc, h decp, h 6 bit,  z? runtil             rstep   b pop, jpnext, end-code ?)                            [unneeded] blackout ?(                                          code blackout ( -- )                                              D9 c, 21 c, 4000 , 11 c, 4001 , 01 c, 1B00 , 75 c,              ED c, B0 c, D9 c, jpnext, end-code ?)                         ( rdraw176 x1 incx y1 incy y )                                  [unneeded] rdraw176 ?( need assembler                           code rdraw176 ( gx gy -- )                                        h pop, d pop, b push, d b ldp,                                  1 e ld#,                                                        b 7 bit,  \ negative gx?                                        nz? rif  c a ld, neg, -1 e ld#, a c ld,  rthen  \ negative gx   l b ld,   \ B = gy                                              1 d ld#,                                                        h 7 bit,  \ negative gy?                                        nz? rif  b a ld, neg, -1 d ld#, a b ld,  rthen  \ negative gy   24BA call, \ alternative entry to the DRAW-LINE ROM routine     b pop, jpnext, end-code ?)                                    [unneeded] x1 [unneeded] incx                                   [unneeded] y1 [unneeded] incy and and and                       ?\ 2variable x1  2variable incx  2variable y1  2variable incy   ( rdraw )                                                       need os-coords need gxy>scra_                                   need assembler also assembler need l: previous                  code rdraw ( gx gy -- )                                           h pop, d pop, b push, d b ldp,                                  1 e ld#,  \ default positive sign of gx                         b 7 bit,  \ negative gx?                                        nz? rif  c a ld, neg, -1 e ld#, a c ld,  rthen  \ negative gx   l b ld,   \ B = gy                                              1 d ld#,  \ default positive sign of gy                         h 7 bit,  \ negative gy?                                        nz? rif  b a ld, neg, -1 d ld#, a b ld,  rthen  \ negative gy   c a ld, b cp, c? rif                                            c l ld, d push, a xor, a e ld, #0 rl# jr,  rthen                c or, z? ?ret, b l ld, c b ld, d push, 00 d ld#,                #0 l: b h ld, b a ld, rra, -->                                ( rdraw )                                                         rbegin  l add, #1 rl# c? ?jr, h cp, #2 rl# c? ?jr,              #1 l: h sub, a c ld, exx, b pop, b push, #3 rl# jr,             #2 l: a c ld, d push, exx, b pop,                               #3 l:                                                           os-coords h ftp, b a ld, h add, a b ld, c a ld, a inc, l add,   #5 rl# c? ?jr,                                                  #4 l: a dec, a c ld,                                            gxy>scra_ call, 22EC 07 + call, exx, c a ld, rstep              d pop, ret,  #5 l: #4 rl# z? ?jr, b pop, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                     ( adraw176 )                                                    need plot176 need os-coordx need os-coordy                      need x1 need incx need y1 need incy                             : adraw176 ( gx gy -- )                                           [ os-coordy ] literal c@ dup 0 swap y1 2! - dup abs rot         [ os-coordx ] literal c@ dup 0 swap x1 2! - dup abs rot         max >r dup 0<  \ negative xdiff?                                if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incx 2! drop dup 0<  \ negative ydiff?                          if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incy 2! drop r> 1+ 0                                            do  x1 @ y1 @ plot176                                               x1 2@ incx 2@ d+ x1 2!                                          y1 2@ incy 2@ d+ y1 2!  loop ;                            ( aline176 )                                                    need set-save-pixel176 need os-coordx need os-coordy            need x1 need incx need y1 need incy                             : aline176 ( gx gy -- )                                           [ os-coordy ] literal c@ dup 0 swap y1 2! - dup abs rot         [ os-coordx ] literal c@ dup 0 swap x1 2! - dup abs rot         max >r dup 0<  \ negative xdiff?                                if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incx 2! drop dup 0<  \ negative ydiff?                          if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incy 2! drop r> 1+ 0                                            do  x1 @ y1 @ set-save-pixel176                                     x1 2@ incx 2@ d+ x1 2!                                          y1 2@ incy 2@ d+ y1 2!  loop ;                            ( orthodraw )                                                   need assembler need gxy>scra_                                   code orthodraw ( gx gy gxinc gyinc len -- )                       exx, d pop, e a ld,                                                  d pop, e b ld, d pop, e c ld,                                   d pop, e h ld, d pop, e l ld,                              rbegin af push, h push, b push, h b ldp,                        5C7D b stp, gxy>scra_ call, 22EC call,                          b pop, h pop, h a ld, b add, a h ld, l a ld, c add, a l ld,     af pop, a dec, z? runtil                                        exx, next ix ldp#, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                           ( ortholine )                                                   need assembler need gxy>scra_                                   code ortholine ( gx gy gxinc gyinc len -- )                       exx, d pop, e a ld,                                                  d pop, e b ld, d pop, e c ld,                                   d pop, e h ld, d pop, e l ld,                              rbegin af push, h push, b push, h b ldp,                        gxy>scra_ call, a b ld, b inc, 1 a ld#, rbegin rrca, rstep      m or, a m ld,                                                   b pop, h pop, h a ld, b add, a h ld, l a ld, c add, a l ld,     af pop, a dec, z? runtil                                        exx, next ix ldp#, jpnext, end-code                                                                                                                                                                                                                                                                                           ( ocr )                                                         need assembler need unresolved need >amark                      variable ocr-charset  $3D00 ocr-charset !                       here bl c, constant ocr-first                                   here 127 bl - c, constant ocr-chars                             code ocr ( col line -- n )                                        d pop, h pop, b push,                                           l b ld, e c ld, ocr-charset fthl,                               c a ld, rrca, rrca, rrca, E0 and#, b xor, a e ld,               c a ld, 18 and#, 40 xor#, a d ld,                               0 d stp, >amark 0 unresolved !                                  ocr-chars fta, a b ld,                                          rbegin                                                            b push, h push,                                                 0 d ldp#,  \ restore the screen address                         >amark 0 unresolved @ !  -->                                ( ocr )                                                             08 b ld#,  \ scans                                              rbegin                                                            d ftap, m xor,  \ scan match?                                   here nz? ?jr, >rmark 1 unresolved !                             d inc, h incp,  \ update the pointers                         rstep  \ next scan                                              b pop, b pop,                                                   ocr-chars fta, b sub, a b ld,                                   ocr-first fta, b add, a b ld,                                   here jr, >rmark 2 unresolved !                                  1 unresolved @ >rresolve                                        h pop, 0008 d ldp#, d addp, b pop,                            rstep                                                           2 unresolved @ >rresolve  0 h ld#, b l ld,                      b pop, jppushhl, end-code                                     ( ascii-ocr udg-ocr )                                           [unneeded] ascii-ocr ?( need ocr need os-chars                  : ascii-ocr ( -- )                                                os-chars @ 256 + ocr-charset !                                  bl ocr-first c!  95 ocr-chars c! ; ?)                         [unneeded] udg-ocr ?( need ocr need os-udg                      : udg-ocr ( n -- )                                                os-udg @ ocr-charset !  0 ocr-first c!  ocr-chars cgxy>scra_ slow-gxy>scra_ fast-gxy>scra_ )                     [unneeded] gxy>scra_ [unneeded] slow-gxy>scra_ and ?(           defer gxy>scra_ ( -- a )                                        create slow-gxy>scra_ ( -- a ) asm                                3E c, BF c, 90 00 + c, 22B0 jp, end-asm                       ' slow-gxy>scra_ ' gxy>scra_ defer! ?)                          [unneeded] fast-gxy>scra_ ?(                                    need gxy>scra_ need assembler                                   create fast-gxy>scra_ ( -- a ) asm                                #191 a ld#, b sub,  a b ld, rra, scf, rra, a and, rra,          b xor, F8 and#, b xor, a h ld, c a ld,                          rlca, rlca, rlca, b xor, C7 and#,  b xor, rlca, rlca,           a l ld, c a ld, 07 and#, ret, end-asm                         ' fast-gxy>scra_ ' gxy>scra_ defer! ?)                                                                                                                                                          ( gxy176>scra_ gxy176>scra gxy>scra )                           [unneeded] gxy176>scra_ ?(                                      create gxy176>scra_ ( -- a ) asm                                  3E c, #175 c, 90 00 + c, 22B0 jp, end-asm ?)                  [unneeded] gxy176>scra ?( need gxy176>scra_                     code gxy176>scra ( gx gy -- n a )                                 E1 c,  D1 c, C5 c, 40 05 + c, 48 03 + c,                        gxy176>scra_ call, C1 c, 16 c, 0 c,  58 07 + c,                 pushhlde jp, end-code ?)                                      [unneeded] gxy>scra ?( need gxy>scra_                           code gxy>scra ( gx gy -- n a )                                    E1 c,  D1 c, C5 c, 40 05 + c, 48 03 + c, gxy>scra_ call,        C1 c, 16 c, 0 c,  58 07 + c, pushhlde jp, end-code ?)                                                                                                                                                                                                         ( plot plot176 )                                                [unneeded] plot ?( need gxy>scra_                               code plot ( gx gy -- )                                            D9 c, E1 c, C1 c, 40 05 + c,                                    ED c, 43 c, 5C7D , gxy>scra_ call,                              22EC call, D9 c, DD c, 21 c, next , jpnext, end-code ?)       [unneeded] plot176 ?(                                           code plot176 ( gx gy -- )                                         D9 c, E1 c, C1 c, 40 05 + c,                                    22E5 call, D9 c, DD c, 21 c, next , jpnext, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                       ( set-pixel set-pixel176 )                                      [unneeded] set-pixel?( need gxy>scra_ need assembler            code set-pixel ( gx gy -- )                                       h pop, d pop, b push, l b ld, e c ld, gxy>scra_ call,           a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m or, a m ld,  \ combine pixel with byte in the screen          b pop, jpnext, end-code ?)                                    [unneeded] set-pixel176 ?( need assembler need gxy176>scra_     code set-pixel176 ( gx gy -- )                                    h pop, d pop, b push, l b ld, e c ld, gxy176>scra_ call,        a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m or, a m ld,  \ combine pixel with byte in the screen          b pop, jpnext, end-code ?)                                                                                                    ( set-save-pixel176 )                                           need assembler need gxy176>scra_ need os-coords                 code set-save-pixel176 ( gx gy -- )                               h pop, d pop, b push,                                           l b ld, e c ld, os-coords bc stp, gxy176>scra_ call,            a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m or, a m ld,  \ combine pixel with byte in the screen          b pop, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( reset-pixel reset-pixel176 )                                  [unneeded] reset-pixel ?( need gxy>scra_ need assembler         code reset-pixel ( gx gy -- )                                     h pop, d pop, b push, l b ld, e c ld, gxy>scra_ call,           a b ld, b inc, 1 a ld#, rbegin  rrca,  rstep,                   cpl, m and, a m ld,  \ combine pixel with byte in the screen    b pop, jpnext, end-code ?)                                    [unneeded] reset-pixel176 ?( need gxy176>scra_ need assembler   code reset-pixel176 ( gx gy -- )                                  h pop, d pop, b push, l b ld, e c ld, gxy176>scra_ call,        a b ld, b inc, 1 a ld#, rbegin  rrca,  rstep,                   cpl, m and, a m ld,  \ combine pixel with byte in the screen    b pop, jpnext, end-code                                                                                                                                                                                                                                       ( toggle-pixel toggle-pixel176 )                                [unneeded] toggle-pixel ?( need gxy>scra_ need assembler        code toggle-pixel ( gx gy -- )                                    h pop, d pop, b push, l b ld, e c ld, gxy>scra_ call,           a b ld, b inc, 1 a ld#, rbegin  rrca,  rstep                    m xor, a m ld,  \ combine pixel with byte in the screen         b pop, jpnext, end-code ?)                                    [unneeded] toggle-pixel176 ?( need gxy176>scra_ need assembler  code toggle-pixel176 ( gx gy -- )                                 h pop, d pop, b push, l b ld, e c ld, gxy176>scra_ call,        a b ld, b inc, 1 a ld#, rbegin  rrca,  rstep                    m xor, a m ld,  \ combine pixel with byte in the screen         b pop, jpnext, end-code ?)                                                                                                                                                                                                                                    ( get-pixel get-pixel176 )                                      [unneeded] get-pixel ?( need gxy>scra_ need assembler           code get-pixel ( gx gy -- f )                                     h pop, d pop, b push, l b ld, e c ld, gxy>scra_ call,           a b ld, b inc, m a ld,                                          rbegin  rlca,  rstep \ rotate to bit 0                          b pop,   \ restore the Forth IP                                 1 and#, ' true nz? ?jp, ' false jp, end-code ?)               [unneeded] get-pixel176 ?( need gxy176>scra_ need assembler     code get-pixel176 ( gx gy -- f )                                  h pop, d pop, b push, l b ld, e c ld, gxy176>scra_ call,        a b ld, b inc, m a ld,                                          rbegin  rlca,  rstep \ rotate to bit 0                          b pop,   \ restore the Forth IP                                 1 and#, ' true nz? ?jp, ' false jp, end-code ?)                                                                               ( pixels fast-pixels slow-pixels )                              [unneeded] pixels ?\ defer pixels ( -- n )                      [unneeded] fast-pixels ?( need assembler need pixels            code fast-pixels ( -- n )                                         exx, 4000 h ldp#, l b ld, l c ld,                               rbegin  \ byte                                                    08 d ld#, rbegin  \ bit                                           m rrc, c? rif  b incp,  rthen  d dec,                         z? runtil  h incp, h a ld, 58 cp#,                            z? runtil  b push, exx, jpnext, end-code                      ' fast-pixels ' pixels defer! ?)                                [unneeded] slow-pixels ?( need bits need pixels                 : slow-pixels ( -- n ) 16384 6144 bits ;                        ' slow-pixels ' pixels defer! ?)                                                                                                                                                                ( scra>attra gxy>attra x>gx y>gy gx>x gy>y )                    [unneeded] scra>attra ?(                                        code scra>attra ( a1 -- a2 )                                      E1 c, 7C c, 0F c, 0F c, 0F c, E6 c, 03 c, F6 c, 58 c, 67 c,     jppushhl, end-code ?)                                         [unneeded] gxy>attra ?( need gxy>scra need scra>attra           : gxy>attra ( gx gy -- a ) gxy>scra nip scra>attra ; ?)         [unneeded] x>gx                                                 ?\ need alias need 8* ' 8* alias x>gx ( x -- gx )               [unneeded] y>gy                                                 ?\ need rows need 8* : y>gy ( y -- gy ) rows swap - 8* 1- ;     [unneeded] gx>x ?\ : gx>x ( gx -- x ) 8 / ;                     [unneeded] gy>y ?\ : gy>y ( gy -- y ) #191 swap - 8 / ;                                                                                                                                                                                                         ( gxy>attra2 )                                                  need assembler                                                  code gxy>attra2 ( gx gy -- a )                                    exx, b pop, h pop, l b ld,                                      c a ld, rlca, rlca, a l ld, 03 and, 58 add#, a h ld, l a ld,    E0 and#, a l ld, b a ld, rra, rra, rra, 1F and#, l add,         a l ld, h push, exx, jpnext, end-code                         need gxy>attra                                                  : p1 ( x y -- ) gxy>attra u. ;                                  : p2 ( x y -- ) gxy>attra1 u. ;                                 : p ( x y -- ) 2dup p1 p2 ;                                                                                                                                                                                                                                                                                                                                                                     ( (pixel-pan-right pixel-pan-right pixels-pan-right )           [unneeded] (pixel-pan-right ?( need assembler                   create (pixel-pan-right ( -- a ) asm                              4000 h ldp#, C0 c ld#,                                          rbegin  m srl, h incp, 1F b ld#,                                        rbegin  m rr, h incp,  rstep c dec,                     z? runtil ret, end-asm ?)                                     [unneeded] pixel-pan-right ?(                                   need (pixel-pan-right need assembler                            code pixel-pan-right ( -- )                                       b push, (pixel-pan-right call, b pop, jpnext, end-code ?)     [unneeded] pixels-pan-right ?( need pixel-pan-right             : pixels-pan-right ( n -- ) 0 ?do  pixel-pan-right  loop ; ?)                                                                                                                                                                                                   ( (pixel-scroll-up pixel-scroll-up pixels-scroll-up )           [unneeded] (pixel-scroll-up ?( need assembler                   create (pixel-scroll-up ( -- a ) asm                              4000 h ldp#, BF b ld#, rbegin                                     b push, h d ldp, h inc, h a ld, F8 and#, h cp,                  z? rif  08 b ld#, b sub,             rra, rra, rra, a h ld,             0020 b ldp#, b addp, h a ld, rla, rla, rla, a h ld,     rthen   h push, 0020 b ldp#, ldir, h pop, b pop,              rstep b m ld, 57E1 d ldp#, 0020 b ldp#, ldir, ret, end-asm ?) [unneeded] pixel-scroll-up ?(                                   need assembler need (pixel-scroll-up                            code pixel-scroll-up ( -- )                                       b push, (pixel-scroll-up call, b pop, jpnext, end-code ?)     [unneeded] pixels-scroll-up ?( need pixel-scroll-up             : pixels-scroll-up ( n -- )                                       0 ?do  pixel-scroll-up  loop ; ?)                             ( /udg /udg* udg-width udg> udg! udg: )                         [unneeded] /udg ?\ 8 cconstant /udg                             [unneeded] /udg* ?\ need 8* need alias ' 8* alias /udg*         [unneeded] udg-width ?\ 8 cconstant udg-width                   [unneeded] udg> ?( need /udg* need get-udg                      : udg> ( n -- a ) /udg* get-udg + ; ?)                          [unneeded] udg! ?( need udg>                                    : udg! ( b0..b7 c -- ) udg> dup 7 + ?do i c! -1 +loop ; ?)      [unneeded] udg: ?( need udg!                                    : udg: ( b0..b7 c "name" -- ) dup cconstant udg! ; ?)                                                                                                                                                                                                                                                                                                                                                                                                           ( udg-group )                                                   need udg-scan>number need udg> need /udg need /udg*             need parse-name-thru need j need anon                           here anon> ! 3 cells allot                                      : udg-group ( width height c "name..." -- )                       3 set-anon                                                      [ 1 ] anon @ /udg* 0 ?do                                          [ 2 ] anon @ 0 ?do                                                parse-name-thru udg-scan>number                                 j /udg /mod [ 2 ] anon @ * i + /udg* +                          [ 0 ] anon @ udg> + c!                                          loop loop ;                                                                                                                                                                                                                                                                                                               ( udg-scan>number )                                             need binary                                                     create udg-blank '.' c,  create udg-dot 'X' c,                  : udg-scan>binary ( ca len -- )                                   bounds ?do i c@ dup udg-blank c@ =                                              if   drop '0' i c!                                              else udg-dot c@ = if '1' i c! then                              then loop ;                                   : udg-scan>number? ( ca len -- n true | false )                   2dup udg-scan>binary base @ >r binary number? r> base ! ;     : udg-scan>number ( ca len -- n )                                 >stringer udg-scan>number? 0= #-290 ?throw ;                                                                                                                                                                                                                                                                                  ( parse-udg-block-row )                                         need parse-name-thru                                            : parse-udg-block-row ( "name..." -- ca len )                     base @ >r                                                       begin                                                             begin parse-name-thru 2dup >stringer 2dup udg-scan>binary             evaluate                                                  while                                                         while repeat r> base ! ;                                      : parse-udg-block-row ( len "name..." -- ca len )                 begin                                                             begin dup parse-name-thru rot over <> while 2drop repeat        2dup                                                          while repeat ;                                                                                                                                                                                ( udg-block )                                                   need udg-scan>number need udg> need /udg need /udg*             need udg-width need parse-name-thru need j need anon            here anon> ! 3 cells allot                                      : udg-block ( width height c "name..." -- )                       3 set-anon                                                      [ 1 ] anon @ /udg* 0 ?do parse-name-thru ( ca len )               [ 2 ] anon @ 0 ?do                                                over udg-width udg-scan>number ( ca len b )                     j /udg /mod [ 2 ] anon @ * i + /udg* +                          [ 0 ] anon @ udg> + c!                                          udg-width /string ( ca' len' ) loop 2drop loop ;                                                                                                                                                                                                                                                                          ( make-block-chars default-udg-chars )                          [unneeded] make-block-chars ?( need assembler                   code make-block-chars ( a -- )                                    h pop, b push,                                                  #128 a ld#,  \ first char is #128                               rbegin                                                            af push, a b ld, 0B3B call, af pop, a inc,                    #144 cp#, nz? runtil  \ last char is #143                       b pop, jpnext, end-code ?)                                    [unneeded] default-udg-chars ?( need rom-font need get-udg      rom-font 'A' 8 * +    \ from                                    get-udg @ 144 8 * +   \ to                                      'U' 'A' - 1+ 8 *      \ count                                   move ?)                                                                                                                                                                                         ( block-chars )                                                 $0F $0F $0F $0F $00 $00 $00 $00 #129 need udg! udg!             $F0 $F0 $F0 $F0 $00 $00 $00 $00 #130 udg!                       $FF $FF $FF $FF $00 $00 $00 $00 #131 udg!                       $00 $00 $00 $00 $0F $0F $0F $0F #132 udg!                       $0F $0F $0F $0F $0F $0F $0F $0F #133 udg!                       $F0 $F0 $F0 $F0 $0F $0F $0F $0F #134 udg!                       $FF $FF $FF $FF $0F $0F $0F $0F #135 udg!                       $00 $00 $00 $00 $F0 $F0 $F0 $F0 #136 udg!                       $0F $0F $0F $0F $F0 $F0 $F0 $F0 #137 udg!                       $F0 $F0 $F0 $F0 $F0 $F0 $F0 $F0 #138 udg!                       $FF $FF $FF $FF $F0 $F0 $F0 $F0 #139 udg!                       $00 $00 $00 $00 $FF $FF $FF $FF #140 udg!                       $0F $0F $0F $0F $FF $FF $FF $FF #141 udg!                       $F0 $F0 $F0 $F0 $FF $FF $FF $FF #142 udg! need udg>             $FF $FF $FF $FF $FF $FF $FF $FF #143 udg! #128 udg> 8 erase     ( set-udg get-udg type-udg )                                    [unneeded] set-udg ?( need os-udg                               code set-udg ( a -- ) E1 c, 22 c, os-udg , jpnext, end-code ?)  [unneeded] get-udg ?( need os-udg                               code get-udg ( -- a ) 2A c, os-udg , jppushhl, end-code ?)      [unneeded] type-udg                                             ?\ : type-udg ( ca len -- ) bounds ?do i c@ emit-udg loopdisplay-char-bitmap_ )                                        [unneeded] display-char-bitmap_ ?(                              need assembler need xy>scra_                                    create display-char-bitmap_ ( -- a ) asm                          xy>scra_ call, 8 b ld#,                                         rbegin  m a ld, d stap, h incp, d inc,  rstep ret, end-asmdisplay-char-bitmap_ )                                        [unneeded] display-char-bitmap_ ?(                              need assembler need xy>scra_                                    create display-char-bitmap_ ( -- a ) asm                          xy>scra_ call,                                                  8 b ld#, rbegin  m a ld, d stap, h incp, d inc,  rstep  ret,    end-asm ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( at-xy-display-udg udg-at-xy-display )                         [unneeded] at-xy-display-udg ?(                                 need assembler need display-char-bitmap_ need os-udg            unused code at-xy-display-udg ( c x y -- )                        h pop, l a ld, h pop, a d ld, l e ld,                           h pop, b push, d b ld, e c ld, h addp, h addp, h addp,          os-udg d ftp, d addp, display-char-bitmap_ call,                b pop, jpnext, end-code unused - cr u. ?)                     [unneeded] udg-at-xy-display ?(                                 need assembler need display-char-bitmap_ need os-udg            unused code udg-at-xy-display ( x y c -- )                        h pop, h addp, h addp, h addp, os-udg d ftp, d addp,            d pop, e a ld, d pop, b push, a b ld, e c ld,                   display-char-bitmap_ call,                                      b pop, jpnext, end-code unused - cr u. ?)                                                                                     ( at-accept clear-accept set-accept )                           2variable accept-xy       \ coordinates of the edited string    variable accept-buffer    \ address of the edited string        variable /accept          \ max length of the edited string     variable >accept          \ offset to the cursor position       : at-accept ( -- ) accept-xy 2@ at-xy ;                         variable span                                                   : clear-accept ( -- )                                             at-accept span @ spaces at-accept  span off ;                 : set-accept ( ca1 len1 -- ca1' )                                 clear-accept /accept @ min ( ca1 len1' )                        dup span ! 2dup fartype                                         dup >r                                                          accept-buffer @ ( ca1 len1' ca2 )                               smove accept-buffer @ ( ca2 )                                   r> + ( ca1' ) ;                                               ( acceptx )                                                     need at-accept need set-accept need toggle-capslock             : .acceptx ( -- )                                                 accept-buffer @ >accept @ at-accept type                        1 inverse  >accept @ span @ <                                   if accept-buffer @ >accept @ + c@ emit  else  space  then       0 inverse                                                       accept-buffer @ span @ >accept @ 1+ min /string type ;        : accept-edit ( -- ) clear-accept init-accept ;                 : accept-left ( -- ) ;                                          : accept-right ( -- ) ;                                         : accept-up ( -- ) ;                                            : accept-down ( -- ) ;                                          : accept-delete ( -- ) ;  -->                                                                                                                                                                   ( acceptx )                                                     create accept-commands ] noop noop noop noop noop noop          toogle-capslock accept-edit accept-left accept-right            accept-down accept-up accept-delete noop noop noop noop noop    noop noop noop noop noop noop noop noop noop noop noop noop [   : >accept-command ( c -- a ) cells accept-commands + ;          : accept-command ( c -- ) >accept-command perform ;             : init-acceptx ( ca len -- )                                      /accept !  accept-buffer !  >accept off  xy accept-xy 2! ;    -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( acceptx )                                                     : (acceptx) ( ca len -- len' ) 2dup init-accept                   over + over ( bot eot cur )                                     begin  key dup 13 <> \ not carriage return?                     while                                                             dup 12 =  \ delete?                                             if    drop  >r over r@ < dup  \ any chars?                            if  8 dup emit  bl emit  emit  then  r> +                 else  \ printable                                                     >r  2dup <>  \ more?                                            if r@ over c!  char+  r@ emit                                   then r> drop                                              then                                                          repeat  drop nip swap - ;                                     : acceptx ( ca len -- len' )                                      span off  ?dup 0= if  drop 0  else  (acceptx)  then ;         ( nuf? aborted? break? )                                        [unneeded] nuf? dup                                             ?\ need aborted? need 'cr'                                      ?\ : nuf? ( -- f ) 'cr' aborted? ;                              [unneeded] aborted? ?(                                          : aborted? ( c -- f )                                             key? dup if key 2drop key = else nip then ; ?)                [unneeded] break? ?(                                            : break? ( -- f ) key? dup if  key 2drop break-key?  then ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( /kk kk-ports kk, kk@ )                                        [defined] /kk ?\ 4 cconstant /kk                                /kk 3 <> dup                                                    ?\ : kk, ( bitmask port -- ) , c, ;                             ?\ : kk@ ( a -- bitmask port ) dup c@ swap 1+ @ ;  -->          /kk 4 <> dup dup                                                ?\ need alias                                                   ?\ ' 2, alias kk, ( bitmask port -- )                           ?\ ' 2@ alias kk@ ( a -- bitmask port ) -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( kk-ports )                                                    $01 $F7FE 2constant kk-1  $02 $F7FE 2constant kk-2              $04 $F7FE 2constant kk-3  $08 $F7FE 2constant kk-4              $10 $F7FE 2constant kk-5                                        $01 $FBFE 2constant kk-q  $02 $FBFE 2constant kk-w              $04 $FBFE 2constant kk-e  $08 $FBFE 2constant kk-r              $10 $FBFE 2constant kk-t                                        $01 $FDFE 2constant kk-a  $02 $FDFE 2constant kk-s              $04 $FDFE 2constant kk-d  $08 $FDFE 2constant kk-f              $10 $FDFE 2constant kk-g                                        $01 $FDFE 2constant kk-cs  $02 $FDFE 2constant kk-z             $04 $FDFE 2constant kk-x   $08 $FDFE 2constant kk-c             $10 $FDFE 2constant kk-v                                        -->                                                                                                                                                                                             ( kk-ports )                                                    $01 $EFFE 2constant kk-0  $02 $EFFE 2constant kk-9              $04 $EFFE 2constant kk-8  $08 $EFFE 2constant kk-7              $10 $EFFE 2constant kk-6                                        $01 $DFFE 2constant kk-p  $02 $DFFE 2constant kk-o              $04 $DFFE 2constant kk-i  $08 $DFFE 2constant kk-u              $10 $DFFE 2constant kk-y                                        $01 $BFFE 2constant kk-en  $02 $BFFE 2constant kk-l             $04 $BFFE 2constant kk-k   $08 $BFFE 2constant kk-j             $10 $BFFE 2constant kk-h                                        $01 $7FFE 2constant kk-sp $02 $7FFE 2constant kk-ss             $04 $7FFE 2constant kk-m  $08 $7FFE 2constant kk-n              $10 $7FFE 2constant kk-b                                        -->                                                                                                                                                                                             ( kk-ports )                                                    need kk,                                                        40 cconstant keys                                               create kk-ports                                                 kk-1  kk,  kk-2  kk,  kk-3 kk,  kk-4 kk,  kk-5 kk,              kk-q  kk,  kk-w  kk,  kk-e kk,  kk-r kk,  kk-t kk,              kk-a  kk,  kk-s  kk,  kk-d kk,  kk-f kk,  kk-g kk,              kk-cs kk,  kk-z  kk,  kk-x kk,  kk-c kk,  kk-v kk,              kk-0  kk,  kk-9  kk,  kk-8 kk,  kk-7 kk,  kk-6 kk,              kk-p  kk,  kk-o  kk,  kk-i kk,  kk-u kk,  kk-y kk,              kk-en kk,  kk-l  kk,  kk-k kk,  kk-j kk,  kk-h kk,              kk-sp kk,  kk-ss kk,  kk-m kk,  kk-n kk,  kk-b kk,                                                                                                                                                                                                                                                                              ( kk-1# )                                                       need cenum                                                      0                                                               cenum kk-1#  cenum kk-2#  cenum kk-3# cenum kk-4# cenum kk-5#   cenum kk-q#  cenum kk-w#  cenum kk-e# cenum kk-r# cenum kk-t#   cenum kk-a#  cenum kk-s#  cenum kk-d# cenum kk-f# cenum kk-g#   cenum kk-cs# cenum kk-z#  cenum kk-x# cenum kk-c# cenum kk-v#   cenum kk-0#  cenum kk-9#  cenum kk-8# cenum kk-7# cenum kk-6#   cenum kk-p#  cenum kk-o#  cenum kk-i# cenum kk-u# cenum kk-y#   cenum kk-en# cenum kk-l#  cenum kk-k# cenum kk-j# cenum kk-h#   cenum kk-sp# cenum kk-ss# cenum kk-m# cenum kk-n# cenum kk-b#   drop                                                                                                                                                                                                                                                                                                                            ( kk-chars )                                                    create kk-chars                                                 '1' c,  '2' c,  '3' c,  '4' c,  '5' c,                          'q' c,  'w' c,  'e' c,  'r' c,  't' c,                          'a' c,  's' c,  'd' c,  'f' c,  'g' c,                          128 c,  'z' c,  'x' c,  'c' c,  'v' c,                          '0' c,  '9' c,  '8' c,  '7' c,  '6' c,                          'p' c,  'o' c,  'i' c,  'u' c,  'y' c,                          129 c,  'l' c,  'k' c,  'j' c,  'h' c,                          130 c,  131 c,  'm' c,  'n' c,  'b' c,                                                                                                                                                                                                                                                                                                                                                                                                                          ( #>kk pressed pressed? )                                       [unneeded] #>kk ?( need kk-ports                                : #>kk ( n -- d ) /kk * kk-ports + kk@ ; ?)                     [unneeded] pressed? ?( need @p                                  : pressed? ( bitmask port -- f ) @p and 0= ; ?)                 [unneeded] pressed ?( need pressed? need kk-ports               : pressed ( -- false | bitmask port true )                        false \ by default                                              [ kk-ports keys /kk * bounds swap ] literal literal ?do           i kk@ pressed? if  drop i kk@ 1 leave  then  /kk              +loop ;                                                       ?)                                                                                                                                                                                                                                                                                                                              ( only-one-pressed )                                            need kk-ports                                                   0. 2variable kk-pressed                                         : only-one-pressed ( -- false | bitmask port true )               0. kk-pressed 2! \ none by default                              [ kk-ports keys /kk * bounds swap ] literal literal             ?do  i kk@ pressed?                                             if  kk-pressed 2@ + if                                          then                                                            /kk +loop                                                       kk-pressed 2@ 2dup + if  1  else  2drop 0  then ;                                                                                                                                                                                                                                                                                                                                             ( key-edit key-left key-right key-down key-up key-delete )      [unneeded] key-edit   ?\  7 cconstant key-edit                  [unneeded] key-left   ?\  8 cconstant key-left                  [unneeded] key-right  ?\  9 cconstant key-right                 [unneeded] key-down   ?\ 10 cconstant key-down                  [unneeded] key-up     ?\ 11 cconstant key-up                    [unneeded] key-delete ?\ 12 cconstant key-upkey-enter )                                                   [unneeded] key-enter  ?\ 13 cconstant key-entercapslock )                                                    need os-flags2 need ctoggle need cset need creset               %1000 os-flags2 2constant capslock ( -- b ca )                  : toggle-capslock ( -- ) capslock ctoggle ;                     : set-capslock ( -- ) capslock cset ;                           : unset-capslock ( -- ) capslock creset ;                       : capslock? ( -- f ) capslock c@andget-inkey )                                                   need assembler                                                  code get-inkey ( -- c | 0 )                                       b push,                                                         028E call, \ KEY-SCAN ROM routine                               z? rif  \ is key press valid?                                     031E call, \ KEY-TEST ROM routine                               c? rif  \ is key code valid?                                      00 c ld#,  \ XXX Spectrum Forth-83 does this                    d dec,  a e ld,                                                 0333 call, \ KEY-DECODE ROM routine                           rthen                                                         rthen                                                           FF cp#,  z? rif  a xor,  rthen  \ convert FF to 00              b pop,  pusha jp, end-code                                                                                                    ( get-key? )                                                    need assembler need unresolved                                  code get-key? ( -- f )                                            b push,                                                         028E call,  \ ROM KEY_SCAN                                      here nz? ?jr,  >rmark 0 unresolved ! \ to return_false          031E call,  \ ROM KEY_TEST                                      here nc? ?jr,  >rmark 1 unresolved ! \ to return_false          b pop, ' true jp,                                               0 unresolved @ >rresolve                                        1 unresolved @ >rresolve                                        b pop, ' false jp,                                              end-code                                                                                                                                                                                                                                                      ( fast-get-key? )                                               need assembler need unresolved                                  code fast-get-key? ( -- f )                                       b push,                                                         028E call,  \ ROM KEY_SCAN                                      0000 nz? ?jp,  |mark 0 unresolved ! \ to return_false           031E call,  \ ROM KEY_TEST                                      0000 nc? ?jp,  |mark 1 unresolved ! \ to return_false           b pop, ' true jp,                                               0 unresolved @ >resolve                                         1 unresolved @ >resolve                                         b pop, ' false jp,                                              end-code                                                                                                                                                                                                                                                      ( inkey )                                                       need assembler                                                  code inkey ( -- c | 0 )                                           a xor,                                                          01 iy 5 bitx,  \ a new key pressed?                             nz? rif                                                           5C08 h ldp#,  \ LAST-K system variable                          m a ld,                                                         01 iy 5 resx,                                                 rthen                                                           pusha jp, end-code                                                                                                                                                                                                                                                                                                                                                                            ( y/n? y/n no? yes? )                                           need value                                                      'y' value "y"  'n' value "n"                                    : y/n? ( c -- f ) dup "y" = swap "n" = or ;                     : y/n ( -- c )                                                    begin  key lower dup y/n? 0=  while  drop  repeat ;           : no? ( -- f ) y/n "n" = ;                                      : yes? ( -- f ) y/n "yanon )                                                        need array>                                                     variable anon> ( -- a )                                         : anon \ Compilation: ( n -- ) Run-time: ( -- a )                 anon> @ array> postpone literal ; immediate compile-only      : set-anon ( x[n-1]..x[0] n -- )                                  cells anon> @ swap bounds ?do i ! cell +looptoarg +toarg arguments results )                              [unneeded] toarg ?( need arguments ' @ arg-default-action !     : toarg ( -- ) ['] ! arg-action ! ; exit ?)                     [unneeded] +toarg ?( need arguments ' @ arg-default-action !    : +toarg ( -- ) ['] +! arg-action ! ; exit ?)                   need cell/                                                      variable >args                                                  variable arg-default-action arg-default-action off              variable arg-action  arg-default-action @ arg-action !          : init-arg-action ( -- ) arg-default-action @ arg-action ! ;    : arg: ( +n "name" -- )                                           create  c,                                                      does> ( -- x ) ( x -- )                                           c@ >args @ swap - arg-action perform init-arg-action ;      $00 arg: l0 $02 arg: l1 $04 arg: l2 $06 arg: l3 $08 arg: l4     $0A arg: l5 $0C arg: l6 $0E arg: l7 $10 arg: l8 $12 arg: l9 --> ( arguments results )                                           : arguments ( i*x +n -- j*x )                                     r> >args @ >r >r                                                cells sp@ + dup >args ! [ 10 cells ] cliteral - sp@ swap -      cell/ 0 ?do 0 loop init-arg-action ; compile-only             : results ( +n -- )                                               cells >args @ swap - sp@ - cell/ 0 ?do drop loop                r> r> >args ! >r ; compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( local )                                                       here ] ( R: a x -- ) 2r> swap ! exit [                          : local \ Interpretation: ( a -- a )                              r> swap              \ save top return address                  dup @ 2>r            \ save variable address and value          [ dup ] literal >r   \ force exit via the restoration code      >r ;                 \ restore top return address               compile-only                                                    drop \ discard _a_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( calculator )                                                  need alias                                                      wordlist constant calculator-wordlist                           : calculator ( -- )                                               calculator-wordlist >order  $C5 c, $EF c, ;                   calculator-wordlist >order                                      get-current  calculator-wordlist set-current                    : end-calc ( -- ) $38 c, ;                                      : end-calculator ( -- ) previous end-calc $C1 c, ;              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : + ( -- ) $0F c, ;                                             : - ( -- ) $03 c, ;                                             : * ( -- ) $04 c, ;                                             : / ( -- ) $05 c, ;                                             : mod ( -- ) $32 c, ;                                           : ** ( -- ) $06 c, ;                                            : sqrt ( -- ) $28 ccalculator )                                                  : negate ( -- ) $1B c, ;                                        : sgn ( -- ) $29 c, ;                                           : abs ( -- ) $2A c, ;                                           : int ( -- ) $27 c, ;                                           : truncate ( -- ) $3A c, ;                                      : re-stack ( r -- r' ) $3D c, ;                                 : zero ( -- ) $A0 c, ;                                          : one ( -- ) $A1 c, ;                                           : half ( -- ) $A2 c, ;                                          : pi2/ ( -- ) $A3 c, ;                                          : ten ( -- ) $A4 c, ;                                           -->                                                                                                                                                                                                                                                             ( calculator )                                                  : ln ( -- ) $25 c, ;                                            : exp ( -- ) $26 c, ;                                           : acos ( -- ) $23 c, ;                                          : asin ( -- ) $22 c, ;                                          : atan ( -- ) $24 c, ;                                          : cos ( -- ) $20 c, ;                                           : sin ( -- ) $1F c, ;                                           : tan ( -- ) $21 c, ;                                           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : drop ( -- ) $02 c, ;                                          : dup ( -- ) $31 c, ;                                           : swap ( -- ) $01 c, ;                                          : >mem ( n -- ) $C0 [ also forth ] + [ previous ] c, ;          : mem> ( n -- ) $E0 [ also forth ] + [ previous ] c, ;          : over ( -- )                                                     2 >mem drop 1 >mem 2 mem> 1 mem> ;                            : 2dup ( -- )                                                     2 >mem drop 1 >mem drop 1 mem> 2 mem>  1 mem> 2 mem> ;        -->                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : 0= ( -- ) $30 c, ;                                            : 0< ( -- ) $36 c, ;                                            : 0> ( -- ) $37 ccalculator )                                                  -->  \ XXX TMP -- ignore this block                             : = ( -- ) $0E c, ;                                             : <> ( -- ) $0B c, ;                                            : > ( -- ) $0C c, ;                                             : < ( -- ) $0D c, ;                                             : <= ( -- ) $09 c, ;                                            : >= ( -- ) $0A c, ;                                            -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : ?branch ( -- ) $00 c, ;                                       : 0branch ( -- ) 0= ?branch ;                                   : branch ( -- ) $33 ccalculator )                                                  : >mark ( -- a ) here 0 c, ;                                    : from-here ( a -- n )                                            here [ also forth ] swap - [ previous ] ;                     : >resolve ( a -- )                                               [ also forth ] dup [ previous ] from-here                       [ also forth ] swap [ previous ] c! ;                         ' here alias <mark ( -- a )                                     : <resolve ( a -- ) from-here c, ;                              : if ( -- a ) 0branch >mark ;                                   : else ( a1 -- a2 )                                               branch >mark [ also forth ] swap [ previous ] >resolve ;      ' >resolve alias then ( a -- )                                  set-current  previous                                                                                                                                                                           ( float float+ float- floats )                                  5 constant float                                                : float+ ( fa1 -- fa2 ) float + ;                               : float- ( fa1 -- fa2 ) float - ;                               : floats ( n1 -- n2 ) float * ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( fp0 fp (fp@ fp@ empty-fs fdepth )                             need float                                                      23651 constant fp0  \ STKBOT system variable                    23653 constant fp   \ STKEND system variable                    : (fp@ ( -- a ) fp @ ;                                          : fp@ ( -- a ) (fp@ float - ;                                   : empty-fs ( -- ) fp0 @ fp ! ;                                  : fdepth ( -- n ) (fp@ fp0 @ - floatf>flag )                                                      need (f>s                                                       : f>flag ( -- f ) ( F: rf -- ) (f>s negateend-calculator-flag )                                         need macro need f>flag need call-xt                             macro end-calculator-flag ( -- f ) ( F: 1|0 -- )                  [ calculator-wordlist >order ] end-calculator [ previous ]      ['] f>flag call-xt  jpnext, endmcalculator-command )                                          need calculator                                                 : calculator-command ( b -- )                                     $C5 c,  $06 c, c,                                               calculator  $3B c,                                              [ calculator-wordlist >order ] end-calculator [ previous ]      $C1 c, ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( calculator-command>flag )                                     need calculator-command need f>flag need call-xt                : calculator-command>flag ( b -- )                                calculator-command ['] f>flag call-xt                           [ assembler-wordlist >order ] jpnext, [ previousf= f<> )                                                      need calculator-command>flag                                    code f= ( -- f ) ( F: r1 r2 -- )                                  0E calculator-command>flag end-code                           code f<> ( -- f ) ( F: r1 r2 -- )                                 0B calculator-command>flag end-codef~abs f~rel f~relabs f== )                                    need frot need f- need fabs need fswap need f< need fover       need f+ need f* need fp@ need float- need float need fdrop      need fsgn                                                       : f~abs ( -- f ) ( F: r1 r2 r3 -- )                               frot frot f- fabs fswap f< ;                                  : f~rel ( -- f ) ( F: r1 r2 r3 -- )                               frot frot fover fabs fover fabs f+                              frot frot f- fabs frot frot f* f< ;                           : f~relabs ( -- f ) ( F: r1 r2 r3 -- ) fabs f~rel ;             : f== ( -- f ) ( F: r1 r2 -- )                                    fp@ dup float- float tuck str= fdrop fdrop ;                                                                                                                                                                                                                                                                                  ( f~ )                                                          need f~abs need f== need f~relabs                                    ' f~abs ,                                                  here ' f== ,                                                         ' f~relabs ,                                                     constant (f~) \ execution table of `f~`                   : f~ ( -- f ) ( F: r1 r2 r3 -- )                                  fdup fsgn f>s cells (f~) + performf< f<= f> f>= )                                               need calculator-command>flag                                    code f< ( -- f ) ( F: r1 r2 -- )                                  0D calculator-command>flag end-code                           code f<= ( -- f ) ( F: r1 r2 -- )                                 09 calculator-command>flag end-code                           code f> ( -- f ) ( F: r1 r2 -- )                                  0C calculator-command>flag end-code                           code f>= ( -- f ) ( F: r1 r2 -- )                                 0A calculator-command>flag end-code                                                                                                                                                                                                                                                                                                                                                                                                                           ( f0< f0= f0<> f0> )                                            need calculator need end-calculator-flag                        code f0< ( -- f ) ( F: r -- )                                     calculator  0<  end-calculator-flag end-code                  code f0= ( -- f ) ( F: r -- )                                     calculator  0=  end-calculator-flag end-code                  code f0<> ( -- f ) ( F: r -- )                                    calculator  0= 0=  end-calculator-flag end-code               code f0> ( -- f ) ( F: r -- )                                     calculator  0>  end-calculator-flag end-code                                                                                                                                                                                                                                                                                                                                                                                                                  ( fdrop fdup fswap fover )                                      need calculator                                                 code fdrop ( F: r -- )                                            calculator  drop  end-calculator  jpnext, end-code            code fdup ( F: r -- r r )                                         calculator  dup  end-calculator  jpnext, end-code             code fswap ( F: r1 r2 -- r2 r1 )                                  calculator  swap  end-calculator  jpnext, end-code            code fover ( F: r1 r2 -- r1 r2 r1 )                               calculator  over  end-calculator  jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                            ( f2dup f2drop )                                                code f2dup ( F: r -- r r )                                        calculator  2dup  end-calculator  jpnext, end-code            code f2drop ( F: r -- )                                           calculator  drop drop  end-calculator  jpnext, end-codefnip ftuck )                                                  need calculator                                                 code fnip ( F: r1 r2 -- r2 )                                      calculator  swap drop  end-calculator  jpnext,                  end-code                                                      code ftuck ( F: r1 r2 -- r2 r1 r2 )                               calculator  2 >mem swap 2 mem>  end-calculator  jpnext,         end-codefrot -frot )                                                  need calculator                                                 code frot ( F: r1 r2 r3 -- r2 r3 r1 )                             calculator                                                        1 >mem drop swap 1 mem> swap                                  end-calculator  jpnext, end-code                              code -frot ( F: r1 r2 r3 -- r3 r1 r2 )                            calculator                                                        swap 1 >mem drop swap 1 mem>                                  end-calculator  jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                                              ( f+ f- f* f/ ?f/ fmod )                                        need calculator need fdup need f0=                              code f+ ( F: r1 r2 -- r3 )                                        calculator  +  end-calculator  jpnext, end-code               code f- ( F: r1 r2 -- r3 )                                        calculator  -  end-calculator  jpnext, end-code               code f* ( F: r1 r2 -- r3 )                                        calculator  *  end-calculator  jpnext, end-code               code f/ ( F: r1 r2 -- r3 )                                        calculator  /  end-calculator  jpnext, end-code               : ?f/ ( F: r1 r2 -- r3 ) fdup f0= #-42 ?throw f/ ;              code fmod ( F: r1 -- r2 )                                         calculator  mod  end-calculator  jpnext, end-code                                                                                                                                                                                                             ( fmax )                                                        need calculator need calculator-command                         code fmax ( F: r1 r2 -- r1|r2 )                                   calculator  2dup  end-calculator                                0C calculator-command ( F: r1 r2 rf -- )                        calculator                                                        if    drop ( F: r1 )                                            else  swap drop ( F: r2 )                                       then                                                          end-calculator  jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                                              ( fmin )                                                        need calculator need calculator-command                         code fmin ( F: r1 r2 -- r1|r2 )                                   calculator  2dup  end-calculator                                0D calculator-command ( F: r1 r2 rf -- )                        calculator                                                        if    drop ( F: r1 )                                            else  swap drop ( F: r2 )                                       then                                                          end-calculator  jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                                              ( fsgn fabs fnegate )                                           need calculator                                                 code fsgn ( F: r1 -- -1|0|1 )                                     calculator  sgn  end-calculator  jpnext, end-code             code fabs ( F: r1 -- r2 )                                         calculator  abs  end-calculator  jpnext, end-code             code fnegate ( F: r1 -- r2 )                                      calculator  negate  end-calculator  jpnext, end-codefln ?fln flnp1 ?flnp1 fexp f** fsqrt ?fsqrt )                 need calculator need fdup need f0< need f<=                     code fln ( F: r1 -- r2 )                                          calculator  ln  end-calculator  jpnext, end-code              : ?fln ( F: r1 -- r2 ) fdup f0 f<= #-46 ?throw fln ;            code flnp1 ( F: r1 -- r2 )                                        calculator  one + fln  end-calculator  jpnext, end-code       : ?flnp1 ( F: r1 -- r2 )                                          fdup f1 fnegate f<= #-46 ?throw fln ;                         code fexp ( F: r1 -- r2 )                                         calculator  exp  end-calculator  jpnext, end-code             code f** ( F: r1 -- r2 )                                          calculator  **  end-calculator  jpnext, end-code              code fsqrt ( F: r1 -- r2 )                                        calculator  sqrt  end-calculator  jpnext, end-code            : ?fsqrt ( F: r1 -- r2 ) fdup f0< #-46 ?throw fsqrt ;           ( f0 f1 fhalf fpi2/ f10 )                                       need calculator                                                 code f0 ( F: -- r )                                               calculator  zero  end-calculator  jpnext, end-code            code f1 ( F: -- r )                                               calculator  one  end-calculator  jpnext, end-code             code fhalf ( F: -- r )                                            calculator  half  end-calculator  jpnext, end-code            code fpi2/ ( F: -- r )                                            calculator  pi2/  end-calculator  jpnext, end-code            code f10 ( F: -- r )                                              calculator  ten  end-calculator  jpnext, end-code                                                                                                                                                                                                                                                                             ( (f>s )                                                        code (f>s ( -- n ) ( F: r -- )                                    C5 c,  CD c, 2DA2 ,                                             60 00 + c,  68 01 + c,  C1 c,  jppushhl,                        end-codefrestack b>f u>f s>f f>s )                                    need calculator need fnegate need fdup need (f>s need f0<       code frestack ( F: r -- r' )                                      calculator  re-stack  end-calculator  jpnext, end-code        code b>f ( b -- ) ( F: -- r )                                     D9 c, E1 c, 78 05 + c, CD c, 2D28 , D9 c,  jpnext, end-code   code u>f ( u -- ) ( F: -- r )                                     D9 c, C1 c, CD c, 2D2B , D9 c,  jpnext, end-code              : s>f ( n -- ) ( F: -- r )                                        dup 0< if  abs u>f fnegate  else  u>f  then ;                 : f>s ( -- n ) ( F: r -- ) fdup (f>s f0< ?negate ;                                                                                                                                                                                                                                                                                                                                              ( f! f@ )                                                       need assembler                                                  code f! ( fa -- ) ( F: r -- )                                     exx, 2BF1 call,  \ STK_FETCH ROM routine                             h pop, a m ld, h incp,                                                 e m ld, h incp, d m ld, h incp,                                 c m ld, h incp, b m ld,                             exx, jpnext, end-code                                         code f@ ( fa -- ) ( F: -- r )                                     exx, h pop, m a ld, h incp,                                                 m e ld, h incp, m d ld, h incp,                                 m c ld, h incp, m b ld                                          2AB6 call, \ STK_STORE ROM routine                  exx, jpnext, end-code                                                                                                                                                                         ( f, fconstant fvariable )                                      need float need f! need f@                                      : f, ( -- ) ( F: r -- ) here float allot f! ;                   : fconstant ( "name" -- ) ( F: r -- )                             create  f,  does>  f@ ;                                       : fvariable ( "name" -- ) create  float allotfacos fasin fatan fcos fsin ftan )                            need calculator                                                 code facos ( F: r1 -- r2 )                                        calculator  acos  end-calculator  jpnext, end-code            code fasin ( F: r1 -- r2 )                                        calculator  asin  end-calculator  jpnext, end-code            code fatan ( F: r1 -- r2 )                                        calculator  atan  end-calculator  jpnext, end-code            code fcos ( F: r1 -- r2 )                                         calculator  cos  end-calculator  jpnext, end-code             code fsin ( F: r1 -- r2 )                                         calculator  sin  end-calculator  jpnext, end-code             code ftan ( F: r1 -- r2 )                                         calculator  tan  end-calculator  jpnext, end-code                                                                                                                                             ( (f. f. )                                                      need fdepth need fdrop                                          code (f. ( F: r -- )                                              C5 c,  CD c, 2DE3 ,  C1 c,                                      jpnext, end-code                                              : f. ( F: r -- )                                                  fdepth >r  (f. space                                            fdepth r> = if  fdrop  thenfs dump-fs )                                                 need (fp@ need fp0 need f@ need f.                              need fdepth need float need float+ need .depth                  : (.fs ( -- ) (fp@ fp0 @ ?do  i f@ f.  float +loop ;            : .fs ( -- ) fdepth dup .depth 0> if  (.fs  then ;              : (dump-fs ( -- )                                                 cr ." Bottom"                                                   (fp@ fp0 @ ?do                                                    i dup cr u. float bounds ?do  i c@ 4 .r  loop                 float +loop  cr ." Top" cr ;                                  : dump-fs ( -- ) fdepth dup .depth 0> if  (dump-fs  then ;                                                                                                                                                                                                                                                                                                                                      ( floor ftrunc fround )                                         need calculator need fdup need fsgn need f* need f+             code floor ( F: r1 -- r2 )                                        calculator  int  end-calculator  jpnext, end-code             code ftrunc ( F: r1 -- r2 )                                       calculator  truncate  end-calculator  jpnext, end-code        : fround ( F: r1 -- r2 ) fdup fsgn fhalf f* f+ ftruncfalign faligned sfalign sfaligned dfalign dfaligned )         need alias                                                      ' noop alias falign    ( -- )       immediate                   ' noop alias faligned  ( a -- fa )  immediate                   ' noop alias sfalign   ( -- )       immediate                   ' noop alias sfaligned ( a -- dfa ) immediate                   ' noop alias dfalign   ( -- )       immediate                   ' noop alias dfaligned ( a -- dfa ) immediatenumber cell-bits )                                            [unneeded] number                                               ?\ : number ( ca len -- n | d ) number? 0= #-275 ?throw ;       [unneeded] cell-bits ?\ 16 cconstant cell-bits                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( classic-number-point? extended-number-point? )                [unneeded] classic-number-point? ?(                             : classic-number-point? ( c -- f )                                dup ':' = swap ',' - 4 u< or ; ?)                             [unneeded] extended-number-point? ?(                            : extended-number-point? ( c -- f )                               dup ':' = swap '+' - 5 u< orbase# b# d# h# )                                              need evaluate need catch                                        : base# ( -- ) ( "name" -- )                                      create c, immediate                                             does> c@                                                        base c@ >r  base !    \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw ;   \ restore radix before error control      2 base# b#                                                     10 base# d#                                                     16 base# h#                                                                                                                                                                                                                                                                                                                     ( x# b# o# d# h# t# )                                           need evaluate need catch                                        : x# ( -- ) ( "name" -- n | d )                                   does> c@              \ new radix                               base @ >r  base !     \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw ;   \ restore radix before error control     create b# ( "name" -- n | d ) 2 c, x# immediate                 create o# ( "name" -- n | d ) 2 c, x# immediate                 create d# ( "name" -- n | d ) 10 c, x# immediate                create h# ( "name" -- n | d ) 16 c, x# immediate                create t# ( "name" -- n | d ) 36 c, x# immediate                                                                                                                                                                                                                ( c# )                                                          : c# ( "name" -- c )                                              parse-name drop c@                                              compiling? if  postpone literal  then ; immediateunder+ +under )                                               [unneeded] under+ ?(                                            code under+ ( n1|u1 x n2|u2 -- n3|u3 x )                          D9 c, D1 c, C1 c, E1 c, 19 c, E5 c, C5 c, D9 c,                 jpnext, end-code ?)                                           [unneeded] +under ?(                                            code +under ( n1|u1 n2|u2 x -- n3|u3 x )                          D9 c, C1 c, D1 c, E1 c, 19 c, E5 c, C5 c, D9 c,                 jpnext, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( % u% u>ud within between gcd )                                [unneeded] % ?\ : % ( n1 n2 -- n3 ) 100 swap */ ;               [unneeded] u%                                                   ?\ : u% ( u1 u2 -- u3 ) >r 100 um* r> um/mod nip ;              [unneeded] u>ud ?\ need alias  ' 0 alias u>ud ( u -- ud )       [unneeded] within                                               ?\ : within ( n1|u1 n2|u2 n3|u3 -- f ) over - >r - r> u< ;      [unneeded] between                                              ?\ : between ( n1|u1 n2|u2 n3|u3 -- f ) over - -rot - u< 0= ;   [unneeded] gcd                                                  ?\ : gcd ( n1 n2 -- n3 ) begin ?dup while tuck mod repeat ;                                                                                                                                                                                                                                                                                                                                     ( odd? even? )                                                  [unneeded] odd? ?(                                              code odd? ( n -- f )                                              E1 c, CB c, 40 05 + c, CA c, ' false , C3 c, ' true ,           end-code ?)                                                   [unneeded] even? ?(                                             code even? ( n -- f )                                             E1 c, CB c, 40 05 + c, CA c, ' true , C3 c, ' false ,           end-codepolarity <=> )                                             [unneeded] 8* ?(                                                code 8* ( n1 -- n2 )                                              e1 c, 29 c, 29 c, 29 c, jppushhl, end-code ?)                 [unneeded] polarity ?(                                          code polarity ( n -- -1 | 0 | 1 )                                 D1 c, 78 02 + c,  B0 03 + c,  CA c, ' false ,                   CB c, 10 03 + c,  ED c, 62 c,                                   78 05 + c,  F6 c, 01 c,  68 07 + c,  jppushhl, end-code ?)    [unneeded] <=>                                                  ?\ need polarity  : <=> ( n1 n2 -- -1|0|1 ) - polarity ;                                                                                                                                                                                                                                                                                                                                        ( u<= u>= <= >= 0>= 0<= 0max )                                  [unneeded] u<= ?\ : u<= ( u1 u2 -- f ) u> 0= ;                  [unneeded] u>= ?\ : u>= ( u1 u2 -- f ) u< 0= ;                  [unneeded] <= ?\ : <= ( n1 n2 -- f ) > 0= ;                     [unneeded] >= ?\ : >= ( n1 n2 -- f ) < 0= ;                     [unneeded] 0>= ?\ : 0>= ( n0 -- f ) 0< 0= ;                     [unneeded] 0<= ?\ : 0<= ( n -- f ) 0> 0= ;                      [unneeded] 0max ?(                                              code 0max ( n -- n | 0 )                                          E1 c,  CB c, 10 05 + c,  DA c, ' false ,  CB c, 18 05 + c,      jppushhl, end-code ?)                                                                                                                                                                                                                                                                                                                                                                         ( lshift rshift )                                               [unneeded] lshift ?( need assembler need unresolved             code lshift ( x1 u -- x2 )                                        exx, b pop, c b ld, h pop,                                      b inc, rahead 0 unresolved !                                    rbegin  h addp, 0 unresolved @ >rresolve  rstep                 h push, exx, jpnext, end-code ?)                              [unneeded] rshift ?( need assembler need unresolved             code rshift ( x1 u -- x2 )                                        exx, b pop, c b ld, h pop,                                      b inc, rahead 0 unresolved !                                    rbegin  h srl, l rr, 0 unresolved @ >rresolve  rstep            h push, exx, jpnext, end-code ?)                                                                                                                                                                                                                              ( ?shift )                                                      need 0exit need rshift need lshift                              : ?shift ( x n -- x | x' )                                        ?dup 0exit dup 0< if abs rshift exit then lshiftclshift crshift )                                             [unneeded] clshift ?(                                           code clshift ( b1 u -- b2 )                                       D1 c,  E1 c,  78 05 + c,  1C c,                                 here                                                            1D c,  CA c, pusha ,  80 07 + c,  C3 c, , end-code ?)         [unneeded] crshift ?(                                           code crshift ( b1 u -- b2 )                                       D1 c,  E1 c,  78 05 + c,  1C c,                                 here                                                            1D c,  CA c, pusha ,                                            C3 c, , end-code ?)                                                                                                                                                                                                                                                                                                           ( bits )                                                        need assembler                                                  code bits ( ca len -- u )                                         0 h ldp#,  \ init bit count                                     exx, \ save IP and count                                        d pop, h pop,  \ memory zone                                    rbegin                                                            d a ld, e or, nz? rif                                             08 b ld#,  \ bits per byte                                      rbegin  m rrc, c? rif  exx, h incp, exx,  rthen  rstep          h incp, d decp,  \ next byte                                2swap ragain rthen                                              exx, jppushhl, end-code                                                                                                                                                                                                                                       ( 2/ cell/ )                                                    [unneeded] 2/ ?(                                                code 2/ ( x1 -- x2 )                                              E1 c, CB c, 2C c, CB c, 1D c, jppushhl, end-code ?)           [unneeded] cell/ ?\ need alias need 2/  ' 2/ alias cellbaden-sqrt baden-sqrt )                                      need sqrt need d2* need cell-bits                               : (baden-sqrt ( radicand -- remainder root )                      0 0                           ( radicand remainder root )       [ cell-bits 2 / ] cliteral 0 ?do                                  >r d2* d2* r>               \ shift remainder left 2 bits       2*                          \ shift root left 1 bit             2dup 2* u> if               \ check for next bit of root          >r r@ 2* - 1- r>          \ reduce remainder                    1+                        \ add a bit to root                 then                                                          loop rot drop ;                                               : baden-sqrt ( radicand -- root ) (baden-sqrt nip ;             ' baden-sqrt ' sqrt defer!                                                                                                                                                                      ( sqrt newton-sqrt )                                            [unneeded] sqrt ?\ defer sqrt ( n1 -- n2 )                      [unneeded] newton-sqrt ?( need sqrt need 2/                     : newton-sqrt ( n1 -- n2 )                                        dup if dup 2/ 20 0 ?do 2dup / + 2/ loop swap drop then ;      ' newton-sqrt ' sqrt deferrem /- -rem */-rem */- )                                    [unneeded] /-rem ?( need sm/rem                                 : /-rem ( n1 n2 -- n3 n4 ) >r  s>d  r> sm/rem ; ?)              [unneeded] /- ?( need /-rem                                     : /- (  n1 n2 -- n3 ) /-rem nip ; ?)                            [unneeded] -rem ?( need /-rem                                   : -rem ( n1 n2 -- n3 ) /-rem drop ; ?)                          [unneeded] */-rem ?( need sm/rem                                : */-rem (  n1 n2 n3 -- n4 n5 ) >r  m*  r> sm/rem ; ?)          [unneeded] ?( need */-rem                                       : */- ( n1 n2 n3 -- n4 ) */-rem nip ; ?)                                                                                                                                                                                                                                                                                                                                                        ( fm/mod )                                                      : fm/mod ( d1 n1 -- n2 n3 )                                       dup >r                \ save divisor                            sm/rem                                                          over 0<> over 0< and  \ quotient<0 and remainder<>0?            if                                                                swap r> +           \ add divisor to remainder                  swap 1-             \ decrement quotient                      else r> drop then ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( /_mod /_ _mod */_mod */_ )                                    [unneeded] /_mod ?( need fm/mod                                 : /_mod ( n1 n2 -- n3 n4 ) >r s>d r> fm/mod ; ?)                [unneeded] /_ ?\ need /_mod : /_ ( n1 n2 -- n3 ) /_mod nip ;    [unneeded] _mod ?( need /_mod                                   : _mod ( n1 n2 -- n3 ) /_mod drop ; ?)                          [unneeded] */_mod ?( need fm/mod                                : */_mod ( n1 n2 n3 -- n4 n5 ) >r m* r> fm/mod ; ?)             [unneeded] */_ ?( need */_mod                                   : */_ ( n1 n2 n3 -- n4 ) */_mod nip ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                        ( any? either neither ifelse )                                  [unneeded] any? ?( need roll  variable (any?)                   : any? ( x[0] x[1]..x[n] n -- f )                                 dup 1+ roll (any?) !                                            0 swap 0 ?do  swap (any?) @ = or  loop ; ?)                   [unneeded] either                                               ?\ : either ( x1 x2 x3 -- f ) -rot over = -rot = or ;           [unneeded] neither                                              ?\ : neither ( x1 x2 x3 -- f ) -rot over <> -rot <> and ;       [unneeded] ifelse                                               ?\ : ifelse ( x1 x2 f -- x1 | x2 ) if drop else nip then ;                                                                                                                                                                                                                                                                                                                                      ( split join )                                                  [unneeded] split ?(                                             code split ( x -- b1 b2 )                                         E1 c,                                                           16 c, 00 c,  58 05 + c,  68 04 + c,  26 c, 00 c,                C3 c, pushhlde , end-code ?)                                  [unneeded] join ?(                                              code join ( b1 b2 -- x )                                          D1 c,  60 03 + c,  D1 c,  68 03 + c, jppushhl, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( ud* d* )                                                      [unneeded] ud*                                                  ?\ : ud* ( ud1 u2 -- ud3 ) dup >r um* drop  swap r> um* rot + ; [unneeded] d* ?(                                                : d* ( d|ud1 d|ud2 -- d|ud3 )                                     >r swap >r 2dup um* rot r> * + rot r> * + ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( du/mod )                                                      need tum* need t+ need t- need tum/ need d2* need lshift        : normalize-divisor ( d1 -- d1' shift )                           0 >r begin  dup 0< while  d2*  r> 1+ >r  repeat  r> ;         : du/mod ( ud1 ud2 -- ud3 ud4 )                                   ?dup 0= if                                                        >r  0 r@ um/mod  r> swap >r  um/mod  0 swap r>  exit          then                                                            normalize-divisor dup >r rot rot 2>r                            1 swap lshift tum*                                              dup  r@ = if   -1  else  2dup  r@ um/mod nip  then              2r@  rot dup >r  tum*  t-                                       dup 0< if  r> 1-  2r@  rot >r  0 t+                               dup 0< if  r> 1-  2r@  rot >r  0 t+  then                     then                                                            r> 2r> 2drop  1 r>  rot >r  lshift tum/  r> 0 ;               ( d0= d0< d< du< )                                              [unneeded] d0= ?\ : d0= ( d -- f ) or 0= ;                      [unneeded] d0< ?\ : d0< ( d -- f ) nip 0< ;                     [unneeded] d< ?(                                                need 2nip                                                       : d< ( d1 d2 -- f )                                               rot 2dup = if  2drop u< exit  then  2nip > ; ?)               [unneeded] du< ?(                                               : du< ( ud1 ud2 -- f )                                            rot swap 2dup                                                   u<  if  2drop 2drop true   exit  then                           -   if  2drop       false  exit  then  u< ; ?)                                                                                                                                                                                                                                                                                ( d= d<> dmin dmax )                                            [unneeded] d= ?\ : d= ( d1 d2 -- f ) d<> 0= ;                   [unneeded] d<>                                                  ?\ : d<> ( d1 d2 -- f ) rot <> if  2drop true exit  then  <> ;  [unneeded] dmin ?(                                              : dmin ( d1 d2 -- d1 | d2 )                                       2over 2over d< 0= if  2swap  then  2drop ; ?)                 [unneeded] dmax ?(                                              : dmax ( d1 d2 -- d1 | d2 )                                       2over 2over d< if  2swap  then  2drop ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                    ( d- d2* d2/ )                                                  [unneeded] d- ?( code d- ( d1|ud1 d2|ud2 -- d3|ud3 )              D1 c,  D9 c,  D1 c,  D9 c,  E1 c,  D9 c,  E1 c,                 A0 07 + c,  ED c, 52 c,  E5 c,  D9 c,  ED c,  52 c,             jppushhl, end-code ?)                                         [unneeded] d2* ?( code d2* ( xd1 -- xd2 )                         D1 c, E1 c,  29 c,  CB c, 13 c,  CB c, 12 c,  EB c,             pushhlde jp, end-code ?)                                      [unneeded] d2/ ?( code d2/ ( xd1 -- xd2 )                         E1 c, D1 c,  CB c, 2C c,  CB c, 1C c,  CB c, 1D c,              CB c, 1A c,  CB c, 1B c,  EB c,  pushhlde jp, end-code ?)                                                                                                                                                                                                                                                                                                                                     ( dxor dor dand d10* )                                          [unneeded] dxor                                                 ?\ : dxor ( d1 d2 -- d3 ) rot xor -rot xor swap ;               [unneeded] dor                                                  ?\ : dor ( d1 d2 -- d3 ) rot or -rot or swap ;                  [unneeded] dand                                                 ?\ : dand ( d1 d2 -- d3 ) rot and -rot and swap ;               [unneeded] d10*                                                 ?\ : d10* ( ud1 -- ud2 ) d2* 2dup d2* d2* d+ ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( m+ )                                                          need assembler                                                  code m+ ( d1|ud1 n -- d2|ud2 )                                    exx,     \ save Forth IP                                        b pop,  \ n                                                     d pop,  \ d1 hi cell                                            h pop,  \ d1 lo cell                                            b addp, h push,                                                 c? rif  d inc, rthen  d push,                                   exx,    \ restore Forth IP                                      jpnext, end-code                                              exit                                                            : m+ ( d1|ud1 n -- d2|ud2 ) s>d d+ ;                                                                                                                                                                                                                            ( m*/ )                                                         : m*/ ( d1 n1 +n2 -- d2 )                                         >r s>d >r abs -rot s>d r> xor r> swap >r >r dabs                rot tuck um* 2swap um* swap                                     >r 0 d+ r> -rot i um/mod -rot r> um/mod -rot r>                 if    if  1 0 d+  then  dnegate                                 else  drop  thendsqrt )                                                       need q2* need d2* need d< need m+ need d- need 2rot             need 2nip need cell-bits                                        : (dsqrt) ( d1 -- d2 d3 )                                         0. 0.  ( radicand . remainder . root . )                        [ cell-bits ] cliteral 0 do                                       2>r q2* q2* 2r>  d2*                                            2over 2over d2* 2swap                                             d< if                                                           2dup 2>r d2* d- -1 m+ 2r>  1 m+                               then                                                          loop  2rot 2drop ;                                            : dsqrt ( d1 -- d2 ) (dsqrt) 2nip ;                                                                                                                                                                                                                             ( tum* tum/ t+ t- )                                             [unneeded] tum*                                                 ?\ : tum* ( d n -- t ) 2>r  r@ um*  0 2r>  um* d+ ;             [unneeded] t+ ?(                                                : +carry ( n1 n2 -- n1+n2 carry ) 0 tuck d+ ;                   : t+ ( t1 t2 -- t3 )                                              >r rot >r  >r swap >r +carry  0 r> r> +carry d+ r> r> + + ;   ?)                                                              [unneeded] tum/ ?(                                              : tum/ ( t n -- d ) dup >r um/mod r> swap >r um/mod nip r> ;    ?)                                                              [unneeded] t- ?( need d-                                        : -borrow ( n1 n2 -- n1-n2 borrow ) 0 tuck d- ;                 : t- ( t1 t2 -- t3 ) >r rot >r  >r swap >r -borrow                                   s>d r> r> -borrow d+ r> r> - + ; ?)                                                                        ( mt* ut/ ut* tnegate )                                         [unneeded] ut*                                                  ?\ : ut* ( ud u -- t ) swap >r dup >r  um* 0 r> r> um* d+ ;     [unneeded] mt* ?( need ut* need tnegate                         : mt*   ( d n -- t ) dup 0<                                       if    abs over 0< if  >r dabs r> ut*  else  ut* tnegate  then   else  over 0< if  >r dabs r> ut* tnegate  else  ut*   then      then ; ?)                                                     [unneeded] ut/                                                  ?\ : ut/ ( ut n -- d ) dup >r um/mod -rot r> um/mod nip swap ;  [unneeded] tnegate ?(                                           : tnegate ( t1 -- t2 ) invert >r invert >r                                             invert 0 -1 -1 d+ s>d r> 0 d+ r> + ; ?)                                                                                                                                                                                                  ( q2* )                                                         need d2*                                                        : q2* ( n . . . -- 2n . . . )                                     d2* >r >r  dup 0< if    d2* r> 1+ r>                                              else  d2* r> r>  thenq+ q- q0< q0= qu< qnegate qabs )                              code q+ ( nq1 nq2 -- nq3 )                                      end-code                                                        code q- ( nq1 nq2 -- nq3 )                                      end-code                                                        : q0< ( nq -- f ) 0< push drop 2drop pop ;                      : q0= ( nq -- f ) or or or 0= ;                                 : qu< ( uq uq -- f ) q- q0< ;                                   : qnegate ( nq -- nq' ) 0 0 0 0 4swap q- ;                      : qabs ( nq -- uq ) dup 0< if  qnegate  then ;                                                                                                                                                                                                                                                                                                                                                                                                                  ( udm* dm* )                                                    need qnegate                                                    code udm* ( ud ud - quad )                                      end-code                                                        : dm* ( nd nd - nq )                                              2>r dup 0< dup >r if  dnegate  then                             r> 2r> dup 0< dup >r if  dnegate  then                          rot >r udm* 2r> xor 0< if  qnegate  thenc+! c-! )                                                  [unneeded] -! ?(                                                code -! ( n|u a -- )                                              E1 c, D1 c, 7E c, 90 03 + c, 70 07 + c, 23 c,                   7E c, 98 02 + c, 70 07 + c, jpnext, end-code ?)               [unneeded] c+! ?(                                               code c+! ( c ca -- )                                              E1 c, D1 c, 78 03 + c, 86 c, 70 07 + c, jpnext, end-code ?)   [unneeded] c-! ?(                                               code c-! ( c ca -- )                                              E1 c, D1 c, 7E c, 90 03 + c, 70 07 + c, jpnext, end-code ?)                                                                                                                                                                                                                                                                                                                                   ( c1+! c1-! 1+! 1-! )                                           [unneeded] c1+!                                                 ?\ code c1+! ( ca -- ) E1 c, 34 c, jpnext, end-code             [unneeded] c1-!                                                 ?\ code c1-! ( ca -- ) E1 c, 35 c, jpnext, end-code             [unneeded] 1+! ?(                                               code 1+! ( a -- )                                                 E1 c, 5E c, 23 c, 56 c, 13 c, 70 02 + c, 2B c, 70 03 + c,       jpnext, end-code ?)                                           [unneeded] 1-! ?(                                               code 1-! ( a -- )                                                 E1 c, 5E c, 23 c, 56 c, 1B c, 70 02 + c, 2B c, 70 03 + c,       jpnext, end-code ?)                                                                                                                                                                                                                                           ( @+ 2@+ c@+ )                                                  [unneeded] @+                                                   ?\ : @+ ( a -- a' x ) dup cell+ swap @ ;                        [unneeded] 2@+                                                  ?\ : 2@+ ( a -- a' xd ) dup cell+ cell+ swap 2@ ;               [unneeded] c@+ ?\ need alias ' count alias c@+ ( ca -- ca' cn, nn, n@ nn@ n! nn! )                                        [unneeded] n, ?\ : n, ( x[u]..x[1] u -- ) 0 ?do , loop ;        [unneeded] nn, ?( need need-here need-here n,                   : nn, ( x[u]..x[1] u -- ) dup , n, ; ?)                         [unneeded] n@ ?(                                                : n@ ( a u -- x[u]..x[1] )                                        tuck 1- cells + \ point _a_ to _x[u]_                           swap 0 ?do dup i cells - @ swap loop drop ; ?)                [unneeded] nn@ ?( need need-here need-here n@                   : nn@ ( a -- x[1]..x[u] u | 0 ) dup @ >r cell+ r@ n@ r> ; ?)    [unneeded] n! ?(                                                : n! ( x[u]..x[1] u a -- )                                        swap 0 ?do dup >r ! r> cell+ loop drop ; ?)                   [unneeded] nn! ?( need need-here need-here n!                   : nn! ( x[u]..x[1] u a -- ) 2dup ! cell+ n! ; ?)                                                                                ( bit>mask bit? set-bit reset-bit )                             [unneeded] bit>mask                                             ?\ need lshift : bit>mask ( n -- b ) 1 swap lshift ;            [unneeded] bit?                                                 ?\ need bit>mask : bit? ( b n -- f ) bit>mask and 0<> ;         [unneeded] set-bit?                                             ?\ need bit>mask : set-bit ( b1 n -- b2 ) bit>mask or ;         [unneeded] reset-bit? ?( need bit>mask                          : reset-bit ( b1 n -- b2 ) bit>mask invert and ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( c@and ctoggle )                                               [unneeded] c@and ?(                                             code c@and ( b1 ca -- b2 )                                        E1 c, D1 c, 78 03 + c, A6 c, C3 c, pusha , jpnext,              end-code ?)                                                   [unneeded] ctoggle ?(                                           code ctoggle ( b ca -- )                                          E1 c, D1 c, 7E c, A8 03 + c, 70 07 + c, jpnext, end-codeexchange c!exchange reserve alloted align aligned )          [unneeded] !exchange                                            ?\ : !exchange ( x1 a -- x2 ) dup @ rot rot ! ;                 [unneeded] c!exchange                                           ?\ : c!exchange ( c1 ca -- c2 ) dup c@ rot rot c! ;             [unneeded] reserve                                              ?\ : reserve ( n -- a ) here tuck over erase allot ;            [unneeded] alloted ?\ : allotted ( n -- a ) here swap allot ;   [unneeded] align                                                ?\ need alias ' noop alias align immediate                      [unneeded] aligned                                              ?\ need alias ' noop alias aligned immediate                                                                                                                                                                                                                                                                                    ( /! *! 2/! 2*! exchange cexchange )                            [unneeded] /! ?\ : /! ( n a -- ) tuck @ swap / swap ! ;         [unneeded] *! ?\ : *! ( n a -- ) tuck @ swap * swap ! ;         [unneeded] 2*! ?\ : 2*! ( a -- ) dup @ 2* swap ! ;              [unneeded] 2/! ?\ need 2/ : 2/! ( a -- ) dup @ 2/ swap ! ;      [unneeded] exchange                                             ?\ : exchange ( a1 a2 -- ) 2dup @ swap @  rot ! swap ! ;        [unneeded] cexchange ?exit                                      : cexchange ( ca1 ca2 -- ) 2dup c@ swap c@  rot c! swap c! ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( a a! a@ )                                                     variable a                                                      code a! ( a -- ) E1 c, 22 c, a , jpnext, end-code               code a@ ( -- a ) 2A c, a , jppushhl, end-codea @a c!a c@a )                                               need a                                                          [unneeded] !a ?(                                                code !a ( x -- ) D1 c, 2A c, a , 70 03 + c, 23 c, 70 02 + c,                     jpnext, end-code ?)                            [unneeded] @a ?(                                                code @a ( -- x ) 2A c, a , 5E c, 23 c, 66 c, 68 03 + c,                          jppushhl, end-code ?)                          [unneeded] c!a ?(                                               code c!a ( c -- ) D1 c, 2A c, a , 70 03 + c, jpnext,                              end-code ?)                                   [unneeded] c@a ?(                                               code c@a ( -- c ) 2A c, a , 6E c, 26 c, 00 c, jppushhl,                           end-code ?)                                                                                                                                                                   ( !a+ @a+ c!a+ c@a+ )                                           need a                                                          [unneeded] !a+ ?(                                               code !a+ ( x -- )                                                 D1 c, 2A c, a , 70 03 + c, 23 c, 70 02 + c, 23 c, 22 c, a ,     jpnext, end-code ?)                                           [unneeded] @a+ ?(                                               code @a+ ( -- x )                                                 2A c, a , 5E c, 23 c, 56 c, 23 c, 22 c, a , D5 c, jpnext,       end-code ?)                                                   [unneeded] c!a+ ?(                                              code c!a+ ( c -- ) D1 c, 2A c, a , 70 03 + c, 23 c,                                22 c, a , jpnext, end-code ?)                [unneeded] c@a+ ?(                                              code c@a+ ( -- c ) 2A c, a , 5E c, 23 c, 16 c, 00 c,                               22 c, a , D5 c, jpnext, end-code ?)          ( heap /heap heap-bank heap-in heap-out allocate resize free )  need value                                                      0 value heap                                                    0 value /heap                                                   create heap-bank ( -- ca ) 0 c,                                 defer heap-in ( -- ) ' noop ' heap-in defer!                    defer heap-out ( -- ) ' noop ' heap-out defer!                  defer allocate ( u -- a ior )                                   defer resize ( a1 -- a2 ior )                                   defer free ( a -- ior )                                         defer empty-heap ( -- )                                                                                                                                                                                                                                                                                                                                                                         ( allot-heap limit-heap farlimit-heap bank-heap )               [unneeded] allot-heap ?( need /heap need heap                   : allot-heap ( n -- a )                                           dup to /heap here to heap allot heap ; ?)                     [unneeded] limit-heap ?( need /heap need heap                   : limit-heap ( n -- a )                                           dup to /heap negate limit +! limit @ dup to heap ; ?)         [unneeded] farlimit-heap ?( need /heap need heap                : farlimit-heap ( n -- a )                                        dup to /heap negate farlimit +!  farlimit @ dup to heap         dup far bank-index c@ far-banks + c@ heap-bank c! ;           [unneeded] bank-heap ?( need 0exit need alias                   : bank-heap ( a n b -- a ) heap-bank c! to /heap to heap ;      : (heap-in  ( -- ) heap-bank c@ ?dup 0exit bank ;               ' (heap-in ' heap-in defer! ' default-bank ' heap-out defer! ?)                                                                 ( get-heap set-heap )                                           [unneeded] get-heap                                             ?\ : get-heap ( -- a u b ) heap /heap heap-bank c@ ;            [unneeded] set-heap                                             ?\ : set-heap ( a u b -- ) heap-bank c! to /heap to heapcharlton-heap-wordlist )                                      get-order get-current only forth definitions                    need max-n need heap                                            wordlist dup constant charlton-heap-wordlist                             dup set-current >order                                 4 cells 1- cconstant hysteresis                                 3 cells cconstant headsize                                      : adjustsize ( n1 -- n2 ) headsize + hysteresis or 1+ ;         0 adjustsize constant overhead                                  create sentinel  here cell+ ,  max-n ,  0 ,  0 ,                variable nextnode                                               : >size ( a1 -- a2 ) cell+ ;                                    : >prev ( a1 -- a2 ) cell+ cell+ ;  -->                                                                                                                                                                                                                         ( charlton-heap-wordlist )                                      : charlton-empty-heap ( -- )                                      heap dup nextnode !  dup dup !  dup /heap  over >size !         >prev ! ;                                                     : attach ( a -- )                                                 >prev @  dup sentinel rot !  sentinel >prev ! ;               : search ( a size -- a|0 )                                        >r begin 2@ swap R@ < invert until  r> drop  >prev @ ;        : detach ( a -- ) dup >prev @ ! ;                               : findspace ( size -- a|0 )                                       nextnode @  dup attach  dup rot search  swap detach ;         : fits ( size a -- f ) >size @ swap -  overhead  < ;            : togglesize ( a -- ) >size dup @  negate swap ! ;              : next! ( a -- ) nextnode ! ;  -->                                                                                                                                                              ( charlton-heap-wordlist )                                      : sizes! ( size a -- a ) 2dup + >r  >size 2dup @ swap -                                  r@ >size !   swap negate swap !  r> ;  : links! ( a1 a2 -- )                                             2dup swap @  2dup  swap !  >prev !  2dup >prev !   swap ! ;   : newnode ( size a -- ) tuck sizes!  links! ;                   : makenode ( size a -- )                                          2dup fits if  togglesize drop  else  newnode  then ;          : charlton-allocate ( u -- a ior ) heap-in dup 0<                 if    #-59                                                      else  adjustsize dup findspace dup                                    if    dup next! tuck makenode headsize + 0                      else  drop #-59 then                                      then  heap-out ; -->                                                                                                                                                                          ( charlton-heap-wordlist )                                      : mergesizes ( a1 a2 -- ) >size @ swap >size +! ;               : mergelinks ( a1 a2 -- ) @ 2dup swap !  >prev ! ;              : jiggle ( -- ) nextnode @ @  >prev @  next! ;                  : merge ( a -- ) dup @ 2dup mergesizes  mergelinks  jiggle ;    : ?merge ( a1 a2 -- )                                             >size @ 0> if dup dup @ u< if dup merge then then drop ;      : ?mergenext ( a -- ) dup @ ?merge ;                            : ?mergeprev ( a -- ) >prev @ dup ?merge ;                      : charlton-free ( a -- ior )                                      heap-in headsize - dup togglesize dup ?mergenext ?mergeprev 0   heap-out ;                                                    variable stash                                                  : savelink ( a -- ) @ stash ! ;                                 : restorelink ( a -- ) stash @ swap ! ;                         : fixprev ( a -- ) dup >prev @ ! ; -->                          ( charlton-heap-wordlist )                                      : fixnext ( a -- ) dup @ >prev ! ;                              : fixlinks ( a -- ) dup fixprev  dup fixnext  @ fixnext ;       : fixsize ( a -- )                                                dup >size @ 0> if   dup @ 2dup <                                                    if over - swap >size ! else 2drop then                     else drop then ;                               : fixsizes ( a -- ) dup fixsize  >prev @ fixsize ;              : repair ( a -- )                                                 dup restorelink dup fixlinks dup fixsizes togglesize ;        : toobig? ( a size -- f ) swap  >size @  > ;                    : copynode ( a1 a2 -- )                                           over >size @  headsize -  rot  headsize + rot rot move ;      : enlarge ( a1 size -- a2 ior )                                   over ?mergeprev  allocate dup >r                                if  swap repair  else  tuck copynode  then  r> ; -->          ( charlton-heap-wordlist )                                      : adjust ( a1 size1 -- a2 size2 )                                 adjustsize >r  headsize -  dup savelink  dup togglesize         dup ?mergenext r> ;                                           : charlton-resize ( a1 u -- a2 ior )                              heap-in dup 0< if    drop #-61  \ `resize` error code                          else  adjust  2dup toobig?                                            if enlarge                                                      else over makenode headsize + 0 then                      then  heap-out ;                               forth-wordlist set-current                                      need empty-heap ' charlton-empty-heap ' empty-heap defer!       need allocate   ' charlton-allocate   ' allocate   defer!       need resize     ' charlton-resize     ' resize     defer!       need free       ' charlton-free       ' free       defer!       set-current set-order                                           ( gil-heap-wordlist )                                           get-order get-current only forth definitions                    need value need set-bit need reset-bit need bit?                need reserve need alias need address-unit-bits need heap        wordlist dup constant gil-heap-wordlist dup set-current >order  16 value /chunk \ bytes per chunk                               : groups ( n1 n2 -- n3 ) /mod swap 0<> abs + ;                  : bytes>chunks ( n1 -- n2 ) /chunk groups ;                     : chunks>bytes ( n1 -- n2 ) address-unit-bits groups ;          ' heap alias heap-chunks ( -- a )                               : heap-unused-chunks ( -- a ) heap-chunks cell+ ;               : heap-map ( -- a ) heap-unused-chunks cell+ ;                  : /heap-map ( -- n ) heap-chunks @ chunks>bytes ;               : heap-data ( -- a ) heap-map /heap-map + ;                     : (mapbit) ( n1 -- n2 ca ) address-unit-bits /mod heap-map + ;  : mapbit ( n1 -- a2 b n2 ) (mapbit) dup @ rot ; -->             ( gil-heap-wordlist )                                           : used-chunk? ( n -- f ) (mapbit) @ swap bit? ;                 : use-chunk ( n -- ) mapbit set-bit swap ! ;                    : free-chunk ( n -- ) mapbit reset-bit swap ! ;                 : allocated>chunks ( a -- n ) cell- @ ;                         : allocated>index ( a -- n ) heap-data - /chunk / ;             : allocated>map ( a -- n1 n2 )                                    dup allocated>index swap allocated>chunks ;                   : locate-chunks ( n1 -- n1 n2 0 | ior )                           0 tuck ( n2 n1 count ) heap-chunks @ 0 ?do ( n2 n1 count )        i used-chunk? if  drop >r i 1+ r> 0  else  1+  then             2dup = if  drop swap 0 unloop exit  then                      loop  2drop drop #-59 ;                                       : chunk>address ( n1 -- a ) /chunk * heap-data + ;              : (allocate) ( n1 n2 -- a ) dup chunk>address >r swap bounds                                ?do i use-chunk loop r> ; -->       ( gil-heap-wordlist )                                           : gil-empty-heap ( -- )                                           heap-in heap /heap erase /heap bytes>chunks heap ! heap-out ; : gil-allocate ( u -- u ior )                                     heap-in bytes>chunks locate-chunks ?dup ?exit (allocate) 0      heap-out ;                                                    : gil-free ( a -- ior ) heap-in allocated>map dup >r                                    bounds ?do i free-chunk loop                                    r> heap-unused-chunks +! 0 heap-out ;   forth-wordlist set-current                                      need empty-heap ' gil-empty-heap ' empty-heap defer!            need allocate   ' gil-allocate   ' allocate   defer!            need free       ' gil-free       ' free       defer!            set-current set-order                                                                                                                                                                           ( .gil-heap )                                                   [unneeded] .gil-heap ?(                                         need gil-heap-wordlist gil-heap-wordlist >order                 : .gil-heap ( -- ) heap-in                                        heap-chunks @ 0 ?do i used-chunk? if 'x' else '-' then emit                     loop heap-out ;                               previousget-default-bank set-default-bank )                           : get-default-bank ( -- +n ) default-bank# c@ ;                 : set-default-bank ( +n -- ) default-bank# ccode-bank )                                                   need save-here need call need there                             variable cp  bank-start cp !  \ code pointer                    : code-here ( -- a ) cp @ ;                                     : code-there ( a -- ) cp ! ;                                    : code-allot ( n -- ) cp +! ;                                   variable code-bank#  3 code-bank# !                             : code-bank ( -- ) code-bank# @ bank ;                          : code-bank{ ( -- ) save-here code-here there code-bank ;       : }code-bank ( -- ) default-bank restore-here ;                 : ?bank ( -- ) bank-start here u< #-276 ?throw ;                : code-bank-caller ( i*x a "name" -- j*x )                        create ?bank ,                                                  does> ( -- ) ( pfa ) @ code-bank call default-bank ;          ?bank                                                                                                                           ( far-hl_ ?next-bank_ ?previous-bank_ )                         get-current assembler-wordlist dup >order set-current           [unneeded] far-hl_ ?\ ' far 2+ @ constant far-hl_               [unneeded] ?next-bank_                                          ?\ ' ?next-bank 2+ @ constant ?next-bank_                       [unneeded] ?previous-bank_ ?(                                   ' ?previous-bank 2+ @ constant ?previous-bank_                  ?)                                                              previous set-current                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( default-bank_ e-bank_ )                                       get-current assembler-wordlist dup >order set-current           [unneeded] default-bank_                                        ?\ ' default-bank 2+ constant default-bank_                     [unneeded] e-bank_                                              ?\ ' default-bank 4 + constant e-bank_                          previous set-currentfarallot far, )                                               [unneeded] farallot                                             ?\ : farallot ( n -- ) np +! ;                                  [unneeded] far, ?( need farallot                                : far, ( x -- ) np@ far! cell farallotfar2@ far2! far@+ farc@+ far+! farc+! far2@+ )                [unneeded] far2@                                                ?\ : far2@ ( a -- d ) dup cell+ far@ swap far@ ;                [unneeded] far2!                                                ?\ : far2! ( d a -- ) swap over far! cell+ far! ;               [unneeded] far@+                                                ?\ : far@+ ( a -- a' x ) dup cell+ swap far@ ;                  [unneeded] farc@+                                               ?\ : farc@+ ( ca -- ca' c ) dup char+ swap farc@ ;              [unneeded] far+!                                                ?\ : far+! ( n a -- ) dup far@ rot + swap far! ;                [unneeded] farc+!                                               ?\ : farc+! ( c a -- ) dup farc@ rot + swap farc! ;             [unneeded] 2@+ ?exit need far2@                                 : far2@+ ( a -- a' xd ) dup cell+ cell+ swap far2@ ;                                                                            ( move>far move<far cmove>far cmove<far )                       [unneeded] move>far ?(                                          : move>far ( a1 a2 len -- )                                       cells bounds ?do  dup @ i far! cell+ cell +loop  drop ; ?)    [unneeded] move<far ?(                                          : move<far ( a1 a2 len -- )                                       cells bounds ?do  dup far@ i ! cell+ cell +loop  drop ; ?)    [unneeded] cmove>far ?(                                         : cmove>far ( ca1 ca2 len -- )                                    bounds ?do  dup c@ i farc! char+  loop  drop ; ?)             [unneeded] cmove<far ?(                                         : cmove<far ( ca1 ca2 len -- )                                    bounds ?do  dup farc@ i c! char+  loop  drop ; ?)                                                                                                                                                                                                             ( !bank c!bank @bank c@bank )                                   [unneeded] !bank ?( need e-bank_                                code !bank ( x a n -- )                                           D1 c, e-bank_ call, E1 c, D1 c, 73 c, 23 c, 72 c,               ' default-bank jp, end-code ?)                                [unneeded] !bank ?( need e-bank_                                code c!bank ( c ca n -- ) D1 c, e-bank_ call,                     E1 c, D1 c, 73 c, ' default-bank jp, end-code ?)              [unneeded] @bank ?( need e-bank_                                code @bank ( a n -- x )                                           D1 c, e-bank_ call, E1 c, 7E c, 23 c, 66 c, 6F c,               E5 c, ' default-bank jp, end-code ?)                          [unneeded] c@bank ?( need e-bank_                               code c@bank ( ca n -- c ) D1 c, e-bank_ call,                     E1 c, 6E c, 26 c, 00 c, E5 c, ' default-bank jp, end-code ?)                                                                  ( @p !p )                                                       [unneeded] @p ?(                                                code @p ( a -- b )                                                D9 c, C1 c, ED c, 68 c, 26 c, 00 c, E5 c, D9 c,                 jpnext, end-code ?)                                           [unneeded] !p ?(                                                code !p ( b a -- ) D9 c, C1 c, E1 c, ED c, 69 c, D9 c,            jpnext, end-codemenu )                                                        need attr! need xy>attra need get-udg need set-udg              need type-left-field need case need array>                      need white need black need cyan need papery need brighty        need overprint-off need inverse-off                             need xy>gxy need ortholine need 8*                              need under+ need within need polaritymenu )                                                        create sinclair-stripes-bitmaps ( -- a )                        $01 c, $03 c, $07 c, $0F c, $1F c, $3F c, $7F c, $FF c,         $FE c, $FC c, $F8 c, $F0 c, $E0 c, $C0 c, $80 c, $00 c,         here dup $10 c, $02 c, $80 c, $11 c, $06 c, $81 c,                       $10 c, $04 c, $80 c, $11 c, $05 c, $81 c,                       $10 c, $00 c, $80 c,                                   here - abs 2constant sinclair-stripes$ ( -- ca len )            : .sinclair-stripes ( -- )                                        get-udg                                                         [ sinclair-stripes-bitmaps 128 8 * - ] literal set-udg          sinclair-stripes$ type set-udg ;                              5 cconstant /stripes                                            -->                                                                                                                                                                                             ( menu )                                                        2variable menu-xy                                               2variable menu-title                                            variable actions-table                                          variable options-table                                          create menu-width 0 c, create menu-options 0 c,                 create menu-banner-attr black papery white + brighty c,         create menu-body-attr white papery brighty c,                   create menu-key-down '6' c,                                     create menu-key-up   '7' c,                                     create menu-key-choose 13 c,                                    create menu-highlight-attr cyan papery brighty c,               variable menu-rounding  menu-rounding on                        -->                                                                                                                                                                                             ( menu )                                                        : .banner ( -- )                                                  menu-banner-attr c@ attr! overprint-off inverse-off             menu-xy 2@                                                      2dup at-xy menu-title 2@ menu-width c@ type-left-field               swap menu-width c@ + [ /stripes 1+ ] cliteral - swap            at-xy .sinclair-stripes ;                                : (.option ( ca len -- ) menu-width c@ 1- type-left-field ;     : option>xy ( n -- x y ) menu-xy 2@ rot + 1+ ;                  : at-option ( n -- ) option>xy at-xy ;                          -->                                                                                                                                                                                                                                                                                                                                                                                             ( menu )                                                        : vertical-line ( gx gy -- )                                      0 -1 menu-options c@ 1+ 8* ortholine ;                        : menu-x-pixels ( -- n ) menu-width c@ 8* ;                     : .border ( -- )                                                  menu-xy 2@ 1+                                                   2dup xy>gxy 2dup menu-x-pixels 1- under+ vertical-line                                                   vertical-line               menu-options c@ + 1+ xy>gxy 1+ 1 0 menu-x-pixels                ortholine ;                                              -->                                                                                                                                                                                                                                                                                                                                                                                             ( menu )                                                        : .option ( n -- )                                                dup at-option space options-table @ array> @ count (.option ; : .options ( -- )                                                 menu-body-attr c@ attr!                                         menu-options c@ dup 0 ?do i .option loop                                            at-option menu-width c@ spaces ;          : option>attrs ( n -- ca len )                                    option>xy xy>attra menu-width c@ ;                            create current-option 0 c,                                      : -option ( -- ) current-option c@                                               option>attrs menu-body-attr c@ fill ;          : +option ( n -- ) dup current-option c!                                           option>attrs menu-highlight-attr c@ fill ;   -->                                                                                                                             ( menu )                                                        : round-option ( n -- n' )                                        dup 0 menu-options c@ within ?exit                                  polarity ( -1|1) 0< ( -1|0) menu-options c@ 1- and ;      : limit-option ( n -- n' ) 0 max menu-options c@ 1- min ;       : adjust-option ( n -- n' )                                       menu-rounding @ if   round-option exit                                          then limit-option ;                           : option+ ( n -- ) current-option c@ + adjust-option +option ;  : previous-option ( -- ) -option -1 option+ ;                   : next-option     ( -- ) -option  1 option+ ;                   : choose-option ( n1 -- )                                         current-option c@ actions-table @ array> perform ; -->                                                                                                                                                                                                        ( menu )                                                        : menu ( -- )                                                     0 dup current-option c! +option                                 begin key case                                                          menu-key-up     c@ of previous-option   endof                   menu-key-down   c@ of next-option       endof                   menu-key-choose c@ of choose-option     endof                 endcase again ;                                         : .menu ( -- ) .banner .options .border ;                       : set-menu ( a1 a2 ca len x y width options -- )                  menu-options c! [ /stripes 2+ ] cliteral max menu-width c!      menu-xy 2! menu-title 2!  options-table ! actions-table ! ;   : new-menu ( a1 a2 ca len x y width options -- )                  set-menu .menu menu ;                                                                                                                                                                         ( seclusion isolate )                                           [unneeded] seclusion ?(                                         : seclusion ( -- wid1 wid2 )                                      get-current wordlist dup >order dup set-current ;             : -seclusion ( wid1 wid2 -- wid1 wid2 ) over set-current ;      : +seclusion ( wid1 wid2 -- wid1 wid2 ) dup set-current ;       : end-seclusion ( wid1 wid2 -- ) -seclusion 2drop previous ; ?) [unneeded] isolate                                              ?\ : isolate ( -- ) wordlist >order definitions ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( internal end-internal unlink-internal hide-internal )         [unneeded] internal [unneeded] end-internal and ?( need alias   ' current-latest alias internal ( -- nt )                       ' np@ alias end-internal ( -- a ) ?)                            [unneeded] unlink-internal ?( need internal need >>link         : unlink-internal ( nt xtp -- ) >>link far! ; ?)                [unneeded] hide-internal ?(                                     need internal need name<name need >>name                        : hide-internal ( nt xtp -- )                                     >>name name<name ( nt1 nt2 ) begin   2dup swap u>                                            while   dup hidden name<name                                    repeat  2drop ; ?)                                                                                                                                                                                                                                                                               ( module end-module export )                                    need alias need nextname                                        : module ( "name" -- parent-wid )                                 get-current  wordlist dup >r constant                           r@ >order  r> set-current ;                                   : export ( parent-wid "name" -- parent-wid )                      dup get-current  defined name>  parsed-name 2@ nextname         rot set-current alias  set-current ;                          : end-module ( parent-wid -- ) set-current previous ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( package public private end-package )                          need latest>wordlist need +order need -order need nextname      : package ( "name" -- wid0 wid1 )                                 get-current parse-name find-name ?dup                           if    name> execute                                             else  wordlist dup parsed-name 2@ nextname constant                            dup latest>wordlist                              then  dup set-current  dup +order ;                           : public ( wid0 wid1 -- wid0 wid1 ) over set-current ;          : private ( wid0 wid1 -- wid0 wid1 ) dup set-current ;          : end-package ( wid0 wid1 -- ) -order set-current ;                                                                                                                                                                                                                                                                                                                                             ( privatize )                                                   need name<name need abort"                                      variable private-start  variable private-stop                   : private{ ( -- )                                                 current-latest private-start !  private-stop off ;            : }private ( -- )                                                 private-stop @ abort" Extra }private"                           current-latest private-stop ! ;                               : privatize ( -- )                                                private-start @ 0= abort" Missing private{"                     private-stop @ dup 0= abort" Missing }private"                  begin   dup private-start @ u>                                  while   dup hidden name<name                                    repeat  drop  private-start off  private-stop off ;                                                                                                                                           ( transient end-transient forget-transient )                    need >>link need there                                          variable old-dp  variable old-latest-wordlist                   variable old-np  variable old-limit   variable old-farlimit     variable old-current-latest                                     : transient ( u1 u2 -- )                                          here old-dp !                                                   np@ old-np !    \ XXX TMP -- try 0, 2, 3                        latest-wordlist @ old-latest-wordlist !                         current-latest old-current-latest !                             limit @ dup old-limit ! swap - dup limit ! there                farlimit @ dup old-farlimit ! swap - dup farlimit ! np! ;     -->                                                                                                                                                                                                                                                             ( transient )                                                   : end-transient ( -- )                                            old-dp @ there                                                    np@ old-np @ np! old-np !   \ XXX TMP -- try 2, 3             old-farlimit @ farlimit !  old-limit @ limit ! ;              : forget-transient ( -- )                                         old-latest-wordlist @ latest-wordlist !                         old-current-latest @ old-np @ >>link farbenschop-multitasker )                                        need user  user (wait)  ' noop (wait) !                         code switch                                                       rptr ldhl h push d push h clr sp addp exde uptr                 ldhl h dec d m ld h dec e m ld h dec begin h dec m d ld h       dec m e ld exde m a ld a or z until                             h inc m e ld h inc  m d ld h inc uptr sthl  exde ldsp           d pop h pop rptr  sthl jpix end-code                          27028 constant uptr                                             variable task-link                                              variable first-task                                             -->                                                                                                                                                                                                                                                                                                                             ( benschop-multitasker )                                        : task: ( "name" -- )                                             create here $243 + , ( eerste adres ip)                         task-link @ ,  here task-link ! ( link naar vorige taak)        here first-task @ ! ( maak cirkel rond)                         1 c, 0 , ( nog niet starten&ruimte sp)                          uptr @ here $3C cmove  here 23c + here $0E + ! here             $013C + here $10 + ! $023C allot ( user-variabelen+stack)       smudge ] current @ context ! !csp -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( benschop-multitasker )                                          does> dup $15 + @ 4 - ( stackpointer)                           2dup swap 5 + !  2dup swap @ swap ! ( ip op stack)              over $17 + @ swap 2+ ! ( rp op stack)                           0 swap 4 + c! ( runnable) ;                                   : terminate 2 uptr @ 3 - c!  switch ;                           : sleep     3 uptr @ 3 - c!  switch ;                           : stop ( tid -- ) 4 swap 7 + c! ;                               : start ( tid -- ) 0 swap 7 + c! ;                              : ;task compile terminate ?csp smudge [compile] [ ; immediate   task: main-task                                                  cr ." multi-tasking operating system"                           begin cr &> emit query                                          interpret state @ 0= if ." ok" then 0 until ;task              ' main-task 5 + first-task !  ' main-task 7 + task-link !       task-link @ first-task @ !  -->                                 ( benschop-multitasker )                                        code (start)                                                      ' switch h ldp# (wait) sthl first-task @ 5 +                    h ldp# uptr sthl h dec m d ld h dec m e ld exde ldsp d pop      h pop rptr sthl jpix end-code                                 : startup ( -- ) main-task (start) ;                            : tasks ( -- )                                                    uptr @ dup 27039 = cr if  ." multitasking not active"  else     dup 10 - >name id. 6 emit ." active"                            begin  5 - @ 3 + dup uptr @ -  while                              cr dup 10 - >name id. 6 emit dup 3 -                            c@ dup 0 = if ." runnable" then                                    dup 1 = if ." new"      then                                    dup 2 = if ." terminated" then                                  dup 3 = if ." sleeping" then                                        4 = if ." stopped" then  repeat then drop ;          ( jiffy! jiffy@ -jiffy )                                        need !dosvar need @dosvar                                       : jiffy! ( a -- ) 16 !dosvar ;                                  : jiffy@ ( -- a ) 16 @dosvar ;                                  : -jiffy ( -- ) 8335 jiffymuench-koh-multitasker )                                      get-current forth-wordlist set-current need user                user tos       \ top of stack                                   user status    \ `branch` or `wake`                             user follower  \ address of next task's `status`                : pause ( -- )                                                    rp@ sp@ tos !  follower @ >r ; compile-only                   : wake ( -- )                                                     r> userp !  \ `userp` points `follower` of current task         tos @ sp! rp! ; compile-only                                  : stop ( -- ) ['] branch status ! pause ;                       : 's ( tid a -- a' )                                              userP @ - swap ( offset tid ) @ + ;                           : sleep ( tid -- ) status 's  ['] branch  swap ! ;              : awake ( tid -- ) status 's  ['] wake  swap ! ;                -->                                                             ( muench-koh-multitasker )                                      : task ( user_size ds_size rs_size "name" -- )                    create here >r  \ user_size ds_size rs_size  r: tid             0 ,  \ reserve space for `userp` pointer                        allot here cell- >r ( user_size ds_size ) ( r: tid rp0 )        allot here cell- >r ( user_size ) ( r: tid rp0 sp0 )            [ 6 cells ] literal + allot  \ minimum user variables           here cell- ( user_pointer   ) ( r: tid rp0 sp0 )                r> , r> , ( store sp0 and rp0  )                                r@ !  \ store `userp` pointer                                   lastname r> taskname 's ! ;                                   -->                                                                                                                                                                                                                                                                                                                             ( muench-koh-multitasker )                                      : build ( tid -- )                                                dup sleep                       \ sleep new task                follower @ over follower 's !   \ link new task                 status 's follower ! ;         \ link old task                : activate ( tid -- )                                             dup 2@        ( tid sp rp )                                     r> over !      \ save entry at rp                               over !         \ save rp at sp                                  over tos 's !  \ save sp in tos                                 awake ; compile-only                                          -->                                                                                                                                                                                                                                                                                                                             ( muench-koh-multitasker )                                      : tasks ( -- )                                                    follower      \ current task's follower                         begin                                                             cr dup [ taskname follower - ] literal + @ .name                dup cell- @ ['] wake =                                          if  ." awaked "  else  ." sleeping "  then                      @ cell+     \ next task's follower                                dup follower =                                              until drop cr ;                                               set-current                                                                                                                                                                                                                                                                                                                                                                                     ( mini-oof )                                                    need alias                                                      : method ( m v "name" -- m' v )                                   create  over , swap cell+ swap                                  does> ( ... o -- ... ) @ over @ + @ execute ;                 : var ( m v size "name" -- m v' )                                 create  over , +  does> ( o -- addr ) ( o pfa ) @ + ;         : class ( class -- class methods vars ) dup 2@ ;                : end-class ( class methods vars "name" -- )                      create  here >r , dup , 2 cells ?do ['] noop , 1 cells +loop    cell+ dup cell+ r> rot @ 2 cells /string move ;               : defines ( xt class "name" -- ) ' >body @ + ! ;                : new ( class -- o ) here over @ allot swap over ! ;            : :: ( class "name" -- ) ' >body @ + @ compile, ;               create object  1 cells , 2 cells ,                              ' noop alias mini-oof                                           ( defined? parse-char parse-all parse-name-thru )               [unneeded] defined?                                             ?\ : defined? ( ca len -- f ) undefined? 0= ;                   [unneeded] parse-char                                           ?\ : parse-char ( "c"  -- c ) stream drop c@ 1 parsed ;         [unneeded] parse-all ?(                                         : parse-all ( "ccc" -- ca len )                                   stream dup parsed >stringer ; ?)                              : parse-name-thru ( "name" -- ca len )                            begin   parse-name dup 0=                                       while   2drop refill 0= #-289 ?throw                            repeat ;                                                                                                                                                                                                                                                                                                                      ( execute-parsing string>source evaluate )                      [unneeded] string>source ?(                                     : string>source ( ca len -- )                                     blk off  (source-id) on  set-source ; ?)                      [unneeded] execute-parsing ?( need need-here                    need-here string>source                                         : execute-parsing ( ca len xt -- )                                nest-source >r string>source r> execute unnest-source ; ?)    [unneeded] evaluate ?( need need-here                           need-here execute-parsing                                       : evaluate ( i*x ca len -- j*x )                                  ['] interpret execute-parsing ; ?)                                                                                                                                                                                                                                                                                            ( char [char] word )                                            [unneeded] char                                                 ?\ : char ( "name" -- c ) parse-name drop c@ ;                  [unneeded] [char]  ?(                                           : [char] ( "name" -- c )                                          char postpone cliteral ; immediate compile-only ?)            [unneeded] word ?(                                              : word ( c "<chars>ccc<char>" -- ca )                             dup  stream                 ( c c ca len )                      dup >r   rot skip           ( c ca' len' )                      over >r  rot scan           ( ca" len" )                        dup if  char-  then         \ skip trailing delimiter           r> r> rot -   >in +!        \ update `>in`                      tuck - ( ca' len ) here place  here ( ca )                      bl over count + c! ; ?)     \ append trailing blank                                                                           ( save-input restore-input )                                    : save-input ( -- xn ... x1 n )                                   source-id 0>                                                    if tib #tib @ 2dup c/l 2 + allocate throw dup >r swap cmove        r> to tib  >in @                                                source-id file-position throw  5                             else blk @ >in @ 2 then ;                                     : restore-input ( xn ... x1 n -- f ) source-id 0>                 if dup 5 <> if 0 ?do drop loop -1 exit then                        drop source-id reposition-file ?dup                             if >r 2drop drop r> exit then                                   >in ! #tib ! to tib false                                    else dup 2 <> if 0 ?do drop loop -1 exit then                      drop >in ! blk ! false                                       then ;                                                                                                                        ( rnd random random-range fast-rnd fast-random )                [unneeded] rnd [unneeded] random and ?(                         2variable rnd-seed  $0111 rnd-seed !                            : rnd ( -- u )                                                    rnd-seed 2@ $62DC um* rot 0 d+ over rnd-seed 2! ;             : random ( n1 -- n2 ) rnd um* nip ; ?)                          [unneeded] random-range  ?( need random                         : random-range ( n1 n2 -- n3 ) over - 1+ random + ; ?)          [unneeded] fast-rnd ?( need os-seed                             code fast-rnd ( -- u )                                            2A c, os-seed , 54 c, 5D c, 29 c, 19 c, 29 c, 19 c,             29 c, 19 c, 29 c, 29 c, 29 c, 29 c, 19 c,                       24 c, 23 c, 22 c, os-seed , jppushhl, end-code ?)             [unneeded] fast-random ?( need fast-rnd                         : fast-random ( n1 -- n2 ) fast-rnd um* nip ; ?)                                                                                ( crnd crandom -1|1 -1..1 randomize randomize0 )                [unneeded] crnd ?( need os-seed                                 code crnd ( -- b )                                                2A c, os-seed , ED c, 5F c, 57 c, 5E c, 19 c,                   85 c, AC c, 22 c, os-seed , pusha jp, end-code ?)             [unneeded] crandom                                              ?\ need crnd  : crandom ( b1 -- b2 ) crnd um* nip ;             [unneeded] -1|1                                                 ?\ need random : -1|1 ( -- -1|1 ) 2 random 2* 1- ;              [unneeded] -1..1                                                ?\ need random : -1..1 ( -- -1|0|1 ) 3 random 1- ;              [unneeded] randomize                                            ?\ need os-seed : randomize ( n -- ) os-seed ! ;                [unneeded] randomize0 ?( need os-frames need randomize          : randomize0 ( n -- )                                             ?dup 0= if os-frames @ then randomize ; ?)                    ( n>r )                                                         need assembler need >aresolve need >amark                       code n>r ( x1..xn n -- ) ( R: -- x1..xn n )                       exx,                                                            b pop, 0000 b stp, >amark                                       rp fthl,                                                        rbegin  b tstp,  nz? rwhile                                       d pop, h decp, d m ld, h decp, e m ld, b decp,                rrepeat                                                         0000 d ldp#, >aresolve                                          h decp, d m ld, h decp, e m ld,                                 rp sthl, exx, jpnext,                                           end-code                                                                                                                                                                                                                                                      ( nr> )                                                         need assembler need >aresolve need >amark                       code nr> ( -- x1..xn n ) ( R: x1..xn n -- )                       exx,                                                            rp fthl,                                                        m c ld, h incp, m b ld, h incp,                                 0000 b stp, >amark                                              rbegin  b tstp, nz? rwhile                                        m e ld, h incp, m d ld, h incp, d push, b decp,               rrepeat                                                         rp sthl, exx,                                                   0000 h ldp#, >aresolve                                          jppushhl,                                                       end-code                                                                                                                                                                                      ( rdepth r'@ 2rdrop dup>r )                                     [unneeded] rdepth                                               ?\ : rdepth ( -- n ) rp@ rp0 @ - [ cell negate ] literal / ;    [unneeded] r'@ ?(                                               : r'@ ( -- x1 ) ( R: x1 x2 -- x1 x2 )                             r> 2r@ drop swap >r ; ?)                                      [unneeded] 2rdrop ?(                                            code 2rdrop ( R: x1 x2 -- )                                       2A c, rp , 11 c, 02 cells , 19 c, 22 c, rp ,                    jpnext, end-code ?)                                           [unneeded] dup>r ?(                                             code dup>r ( x -- x ) ( R: -- x )                                 D1 c, D5 c, ' >r 1+ jp, end-code ?)                                                                                                                                                                                                                           ( edit-sound )                                                  get-current  forth-wordlist set-current                         need :noname need c1+! need c1-! need inverse need case         need value need play  [defined] /sound ?\ 14 constant /sound    wordlist constant edit-sound-wordlist                           edit-sound-wordlist dup >order set-current                      variable sound  variable register                               'q' value quit-key  'p' value play-key                            8 value left-key    9 value right-key                          10 value down-key   11 value up-key                            : .help ( -- )                                                    quit-key emit ."           - quit" cr                           play-key emit ."           - play" cr                           ." left/right - decrease/increase value" cr                     ." up/down    - previous/next register" cr ;                  -->                                                             ( edit-sound )                                                  :noname ( -- ) ." Env." ;     \ XXX TODO --                     :noname ( -- ) ." Env. T." ;  \ XXX TODO --                     :noname ( -- ) ." Env. P." ;  \ XXX TODO --                     :noname ( -- ) ." C volume" ;                                   :noname ( -- ) ." B volume" ;                                   :noname ( -- ) ." A volume" ;                                   :noname ( -- ) ." Mixer" ;                                      :noname ( -- ) ." Noise volume" ;                               :noname ( -- ) ." C tone" ;                                     :noname ( -- ) ." C fine tone" ;                                :noname ( -- ) ." B tone" ;                                     :noname ( -- ) ." B fine tone" ;                                :noname ( -- ) ." A tone" ;                                     :noname ( -- ) ." A fine tone" ;                                create label  , , , , , , , , , , , , , ,  -->                  ( edit-sound )                                                  : .label ( n -- ) cells label + perform ;                       : .register ( n -- )                                              >r 0 r@ at-xy  sound @ r@ + c@ 4 .r  space r> .label cr ;     : .menu-register ( n -- )                                         dup register @ = inverse  .register  0 inverse ;              : .sound ( -- ) /sound 0 ?do  i .menu-register  loop ;          : register@ ( -- n ) register @ dup .register ;                 : register! ( n -- ) dup register ! .menu-register ;            : next-register ( -- )                                            register@ 1+ dup /sound <> and register! ;                    : previous-register ( -- )                                        register@ 1- dup 0< if  drop /sound 1-  then  register! ;     : >register ( -- ca ) sound @ register @ + ;                    : increase-value ( -- ) >register c1+! ;                        : decrease-value ( -- ) >register c1-! ;  -->                   ( edit-sound )                                                  forth-wordlist set-current                                      : edit-sound ( a -- )                                             sound ! register off  page .sound cr .help                      begin  .sound                                                     key lower case                                                    quit-key   of  exit               endof                         play-key   of  sound @ play       endof                         left-key   of  decrease-value     endof                         right-key  of  increase-value     endof                         down-key   of  next-register      endof                         up-key     of  previous-register  endof                       endcase                                                       again ;                                                       set-current  previous                                                                                                           ( /sound sound-register-port sound-write-port !sound @sound )   [unneeded] /sound ?\ 14 cconstant /sound                        [unneeded] sound-register-port                                  [unneeded] sound-write-port and ?( need const                   $FFFD const sound-register-port $BFFD const sound-write-port ?) [unneeded] !sound ?(                                            need !p need sound-register-port need sound-write-port          : !sound ( b1 b2 -- )                                             sound-register-port !p sound-write-port !p ; ?)               [unneeded] @sound ?( need !p need @p need sound-register-port   : @sound ( b1 -- b2 )                                             sound-register-port !p sound-register-port @p ; ?)                                                                                                                                                                                                                                                                            ( !volume @volume set-mixer get-mixer -mixer silence noise )    [unneeded] !volume                                              ?\ need !sound  : !volume ( b1 b2 -- ) 8 + !sound ;             [unneeded] @volume                                              ?\ need @sound  : @volume ( b -- ) 8 + @sound ;                 [unneeded] set-mixer                                            ?\ need !sound : set-mixer ( b -- ) 7 !sound ;                  [unneeded] get-mixer                                            ?\ need @sound : get-mixer ( -- b ) 7 @sound ;                  [unneeded] -mixer                                               ?\ need set-mixer : -mixer ( -- ) %111111 set-mixer ;           [unneeded] silence ?( need -mixer need !volume                  : silence ( -- )                                                  -mixer 0 0 !volume 0 1 !volume 0 2 !volume ; ?)               [unneeded] noise ?\ need !sound  : noise ( -- ) 7 7 !sound ;                                                                    ( music )                                                       need vocabulary need ms need roll need pick                     need !sound need vol                                            vocabulary music  get-current  also music definitions           : freq                                                            2* 109.375 3 roll  um/mod nip 256 /mod 2 pick                   1+ !sound  swap !sound ;                                      variable len  variable tempo  variable octave  variable volume  2 len !  200 tempo !  8 octave !  15 volume ! 1 15 vol          : tones ( -- ) 56 7 !sound ;                                    : note ( n "name" -- )                                            create  ,  does>   @ octave @ * 16 /  1 freq tones                                 tempo @ len @ * ms -mixer ;                523 note c  554 note c# 583 note d  622 note d#                 659 note e  698 note f  740 note f# 784 note g                  831 note g# 880 note a  932 note a# 988 note b  -->             ( music )                                                       : l  ( n -- ) len ! ;                                           : o+ ( -- )   octave @ 2 * octave ! ;                           : o- ( -- )   octave @ 2 / octave ! ;                           : r  ( -- )   tempo @ len @ * ms ;                              : >> ( -- )   1 volume @ 1+ vol 1 volume +! ;                   : << ( -- )   1 volume @ 1- vol -1 volume +! ;                  set-current previousplay sound, sound )                                           [unneeded] play ?( need /sound need !sound                      : play ( ca -- )                                                  /sound 0 ?do  dup c@ i !sound 1+  loop  drop ; ?)             [unneeded] sound, ?( need /sound                                : sound, ( b[0]..b[13] -- )                                       here /sound allot here 1- ?do  i c!  -1 +loop ; ?)            [unneeded] sound ?( need sound, need play                       : sound ( b[0]..b[13] "name" -- )                                 create  sound,  does> ( -- ) ( pfa ) play ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                ( fplay )                                                       need !p need c@+                                                need sound-register-port need sound-write-port need /sound      : fplay ( ca -- )                                                 /sound 0 ?do                                                      i sound-register-port !p  c@+ sound-write-port !p             loop  dropzplay )                                                       need assembler                                                  need sound-register-port need sound-write-port need /sound      code zplay ( a -- )                                               h pop, b push,                                                  /sound b ld#, 00 e ld#,                                         rbegin  b push,                                                         e a ld, sound-register-port b ldp#, a outbc,                    m a ld, sound-write-port b ldp#, a outbc,                       hl incp, e inc, b pop, \ next                           rstep                                                           b pop, jpnext, end-code                                                                                                                                                                                                                                                                                                       ( waves shoot helicopter1 train airplane helicopter2 )          need sound  hex                                                 [unneeded] waves                                                ?\ 00 00 00 00 00 00 07 47 14 14 14 00 26 0E sound waves        [unneeded] shoot                                                ?\ 0A 00 B1 00 BF 00 1F 47 14 14 14 5C 1C 03 sound shoot        [unneeded] helicopter1                                          ?\ C8 0F C8 0F C8 0F 00 07 17 17 17 FF 01 0C sound helicopter1  [unneeded] train                                                ?\ 64 78 30 61 0C C8 37 0F 09 0B 37 B4 04 08 sound train        [unneeded] airplane                                             ?\ 0C 1F 00 00 00 1F 07 E8 0F 10 0F 9A 00 18 sound airplane     [unneeded] helicopter2                                          ?\ 09 00 00 06 0C 00 0B C0 10 0E 10 3A 02 1C sound helicopter2  decimal                                                                                                                         ( bomber whip metalic rain2 lightning1 lightning2 )             need sound  hex                                                 [unneeded] bomber                                               ?\ 49 52 3E A5 5A 8A 9F 8C 66 4D 64 A2 57 C9 sound bomber       [unneeded] whip                                                 ?\ 05 12 08 06 13 0B 05 0B 00 13 03 18 15 01 sound whip         [unneeded] metalic                                              ?\ 95 40 68 EC D2 B4 00 20 00 C2 92 49 51 B1 sound metalic      [unneeded] lightning1                                           ?\ 01 04 00 10 24 43 08 04 1F F5 01 06 1E 02 sound lightning1   [unneeded] lightning2                                           ?\ 00 00 00 00 00 FF 07 04 FF 19 00 3C 3C 03 sound lightning2   decimal                                                                                                                                                                                                                                                         ( bell1 bell2 bell3 rap drum cymbal )                           need sound  hex                                                 [unneeded] bell1                                                ?\ AB 03 2A 02 0C 01 00 F8 10 10 10 00 71 10 sound bell1        [unneeded] bell2                                                ?\ 66 00 4B 00 45 00 00 F8 10 10 10 00 22 10 sound bell2        [unneeded] bell3                                                ?\ FC 06 DE 03 C3 04 00 F8 10 10 10 00 FF 10 sound bell3        [unneeded] rap                                                  ?\ 00 00 00 00 00 00 06 C0 10 10 10 00 05 18 sound rap          [unneeded] drum                                                 ?\ 00 06 00 00 00 05 11 E8 10 10 10 00 0A 10 sound drum         [unneeded] cymbal                                               ?\ 09 00 00 00 00 00 00 C0 10 10 10 03 09 10 sound cymbal       decimal                                                                                                                         ( applause hammer background beach waterdrop2 )                 need sound  hex                                                 [unneeded] applause                                             ?\ 00 00 00 00 00 00 1E 40 0F 10 0F 00 07 18 sound applause     [unneeded] hammer                                               ?\ 1B 00 09 00 00 00 1F C8 10 10 10 00 6B 10 sound hammer       [unneeded] background                                           ?\ 03 05 FC 04 0C 05 00 F8 10 10 10 FF FF 0E sound background   [unneeded] beach                                                ?\ 00 00 00 00 00 00 0F C0 0B 10 10 FF 50 0E sound beach        [unneeded] waterdrop2                                           ?\ 24 00 12 00 16 00 00 F8 10 10 10 00 10 18 sound waterdrop2   decimal                                                                                                                                                                                                                                                         ( rain1 waterdrop1 explosion1 explosion2 )                      need sound  hex                                                 [unneeded] rain1                                                ?\ 2C 18 06 06 07 03 03 05 2C 06 03 05 03 03 sound rain1        [unneeded] waterdrop1                                           ?\ 14 53 5E 27 00 08 1F 47 17 17 16 5A 00 00 sound waterdrop1   [unneeded] explosion1                                           ?\ 00 00 00 00 00 06 07 10 10 10 38 08 00 00 sound explosion1   [unneeded] explosion2                                           ?\ 00 00 00 00 00 06 07 10 10 10 38 08 00 00 sound explosion2   decimal                                                                                                                                                                                                                                                                                                                                                                                         ( bleep hz>bleep dhz>bleep )                                    [unneeded] bleep ?(                                             code bleep ( duration pitch -- )                                 E1 c, D1 c, C5 c, CD c, 03B5 , C1 c, DD c, 21 c, next ,          jpnext, end-code ?)                                           [unneeded] hz>bleep ?(                                          : hz>bleep ( frequency duration1 -- duration2 pitch )             over m* 1000 m/ nip swap  437500. rot m/ nip 30 - ; ?)        [unneeded] dhz>bleep ?(                                         : dhz>bleep ( frequency duration1 -- duration2 pitch )            over m* 10000 m/ nip swap  4375000. rot m/ nip 30 - ; ?)                                                                                                                                                                                                                                                                                                                                      ( middle-octave /octave octave-changer change-octave )          [unneeded] middle-octave ?(                                     create middle-octave ( -- a )                                       2616 , 2772 , 2937 , 3111 , 3296 , 3492 ,                       3700 , 3920 , 4153 , 4400 , 4662 , 4939 , ?)                [unneeded] /octave ?\ 12 cconstant /octave                      [unneeded] octave-changer ?( need rshift need lshift                    ' rshift  ,                                             here    ' drop    ,                                                     ' lshift  ,  constant octave-changer ?)                 [unneeded] change-octave ?(                                     need polarity need octave-changer need array>                   : change-octave ( u n -- u' )                                     dup abs swap polarity octave-changer array> perform ; ?)                                                                                                                                      ( -beep>note +beep>note beep>note )                             [unneeded] -beep>note ?( need /octave                           : -beep>note ( -n1 -- -n2 +n3 )                                   abs [ /octave 1- ] literal + /octave /mod negate                    [ /octave 1- ] literal rot - ; ?)                         [unneeded] +beep>note ?( need /octave                           : +beep>note ( +n1 -- +n2 +n3 ) /octave /mod swap ; ?)          [unneeded] beep>note ?( need -beep>note need +beep>note         : beep>note ( n1 -- n2 +n3 )                                      dup 0< if  -beep>note exit  then  +beep>note ; ?)                                                                                                                                                                                                                                                                                                                                                                                                             ( note>dhz beep>dhz beep>bleep beep )                           [unneeded] note>dhz ?( need middle-octave need array>           : note>dhz ( +n1 -- +n2 ) middle-octave array> @ ; ?)           [unneeded] beep>dhz ?(                                          need beep>note need note>dhz need change-octave                 : beep>dhz ( n -- u )                                             beep>note note>dhz swap change-octave ; ?)                    [unneeded] beep>bleep ?(                                        need beep>dhz need dhz>bleep                                    : beep>bleep ( duration1 pitch1 -- pitch2 duration2 )             beep>dhz swap dhz>bleep ; ?)                                  [unneeded] beep ?( need beep>bleep need bleep                   : beep ( duration pitch -- ) beep>bleep bleep ; ?)                                                                                                                                                                                                              ( laser-gun ambulance )                                         [unneeded] laser-gun ?( need assembler                          code laser-gun ( -- ) b push, 5 b ld#, 0500 h ldp#,               <mark  0001 d ldp#,                                                    h push, 03B5 call, h pop,  \ ROM beeper                         0010 d ldp#, d subp,  nz? ?jr,                           b pop, next ix ldp#, jpnext, end-code ?)                      [unneeded] ambulance ?( need assembler                          code ambulance ( n -- )                                           d pop, b push, e b ld,                                          rbegin  b push, 0320 h ldp#, 000A d ldp#,                               <mark   h push,                                                         03B5 call,  \ ROM beeper                                        h pop, h decp, h tstp,  nz? ?jr,                        b pop,  rstep                                           b pop, next ix ldp#, jpnext, end-code ?)                      ( white-noise )                                                 need assembler                                                  code white-noise ( u -- )                                         d pop,                                                          b push,  \ save the Forth IP                                    d b ldp, 0000 h ldp#,  \ BC=duration, HL=start of ROM           5C48 fta, a sra, a sra, a sra, 07 and#, a d ld,                 <mark   m e ld, h incp, b decp, b push,                                 08 b ld#,  \ bit counter                                        rbegin   e a ld, 10 and#, e rl, d or, FE out,  \ beep                   rstep                                                   b pop, b tstp,                                                  nz? ?jr,                                                b pop, jpnext, \ restore the Forth IP and go next               end-code                                                                                                                      ( str< str> trim +place hunt )                                  [unneeded] str<                                                 ?\ : str< ( ca1 len1 ca2 len2 -- f ) compare 0< ;               [unneeded] str>                                                 ?\ : str> ( ca1 len1 ca2 len2 -- f ) compare 0> ;               [unneeded] trim                                                 ?\ : trim ( ca1 len1 -- ca2 len2 ) -leading -trailing ;         [unneeded] +place ?( need c+!                                   : +place ( ca1 len1 ca2 -- )                                      2dup 2>r count + smove 2r> c+! ; ?)                           [unneeded] hunt ?(                                              : hunt ( ca1 len1 ca2 len2 -- ca3 len3 )                          search 0= if  chars + 0  then ; ?)                                                                                                                                                                                                                            ( ud>str u>str d>str char>string chars>string )                 [unneeded] ud>str                                               ?\ : ud>str ( ud -- ca len ) <# #s #> ;                         [unneeded] u>str                                                ?\ need ud>str  : u>str ( u -- ca len ) s>d ud>str ;            [unneeded] d>str ?(                                             : d>str ( d -- ca len ) tuck dabs <# #s rot sign #> ; ?)        [unneeded] char>string ?(                                       : char>string ( c -- ca len )                                     1 allocate-stringer tuck c! 1 ; ?)                            [unneeded] chars>string ?(                                      : chars>string ( c1..cn n -- ca len )                             dup if    dup allocate-stringer swap 2dup 2>r ( c1..cn ca n )             bounds ?do  i c!  loop  2r>                               else  pad swap  then ; ?)                                                                                                 ( >bstring c>bstring 2>bstring )                                [unneeded] >bstring                                             ?\ : >bstring ( u -- ca len ) pad ! pad cell ;                  [unneeded] c>bstring                                            ?\ : c>bstring ( c -- ca len ) pad c! pad 1 ;                   [unneeded] 2>bstring  ?(                                        : 2>bstring ( xd -- ca len )                                      pad 2! pad [ 2 cells ] literal ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( lengths s+ )                                                  [unneeded] lengths ?(                                           code lengths                                                      D9 c, E1 c, D1 c, C1 c, C5 c, D5 c, E5 c, C5 c, E5 c, D9 c,     jpnext, end-code ?)                                           [unneeded] s+  ?( need lengths need pick                        : s+ ( ca1 len1 ca2 len2 -- ca3 len3 )                            lengths + >r            ( ca1 len2 ca2 len2 ) ( r: len3 )       r@ allocate-stringer >r ( r: len3 ca3 )                         2 pick r@ +             ( ca1 len1 ca2 len2 len1+ca3 )          smove                   ( ca1 len1 ) \ 2nd string to buffer     r@ smove                \  1st string to buffer                 r> r> ; ?)                                                                                                                                                                                                                                                    ( upper upper_ uppers uppers1 )                                 [unneeded] upper [unneeded] upper_ and ?( 0                     code upper ( c -- c' ) E1 c, 7D c, 21 c, pusha , E5 c,            drop here \ upper_routine:                                      FE c, 'a' c, D8 c, FE c, 'z' 1+ c, D0 c, E6 c, %11011111 c,     C9 c, end-code                                                get-current swap assembler-wordlist set-current                 constant upper_ ( -- a )                                        set-current ?)                                                  [unneeded] uppers ?( need upper_                                code uppers ( ca len -- )                                         D1 c, E1 c, here 7A c, B3 c, CA c, next , 7E c,                 upper_ call, 77 c, 23 c, 1B c, C3 c, , end-code ?)            [unneeded] uppers1                                              ?\ need uppers  : uppers1 ( ca len -- ) drop 1 uppers ;                                                                         ( lowers #spaces #chars )                                       [unneeded] lowers ?(                                            code lowers ( ca len -- )                                         D1 c, E1 c, here 7A c, B3 c, CA c, next , 7E c,                 lower_ call, 77 c, 23 c, 1B c, C3 c, , end-code ?)            [unneeded] #spaces ?( need under+                               : #spaces ( ca len -- +n )                                        0 rot rot  0 ?do  count bl = under+  loop  drop abs ; ?)      [unneeded] #chars ?( need under+                                : #chars ( ca len c -- +n )                                       0 2swap 0 ?do                                                     ( c count ca ) count over = under+  loop  2drop abs ; ?)                                                                                                                                                                                                                                                                    ( /name first-name last-name )                                  [unneeded] last-name ?( need trim                               : last-name ( ca1 len1 -- ca2 len2 )                              trim  begin  2dup bl scan bl skip dup                                 while  2nip  repeat  2drop ; ?)                         [unneeded] /name ?(                                             : /name ( ca1 len1 -- ca2 len2 ca3 len3 )                         bl skip 2dup bl scan ; ?)                                     [unneeded] first-name ?( need /name                             : first-name ( ca1 len1 -- ca2 len2 ) /name nip - ; ?)                                                                                                                                                                                                                                                                                                                                                                                                          ( prefix? suffix? -prefix -suffix )                             [unneeded] prefix?                                              ?\ : prefix? ( ca1 len1 ca2 len2 -- f ) tuck 2>r min 2r> str= ; [unneeded] suffix? (? need pick                                 : suffix? ( ca1 len1 ca2 len2 -- f )                              2swap dup 3 pick - /string str= ; ?)                          [unneeded] -prefix ?( need prefix?                              : -prefix ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )            dup >r 2over 2swap prefix?                                      if  swap r@ + swap r> -  else  rdrop  then ; ?)               [unneeded] -suffix ?( need suffix?                              : -suffix ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )            dup >r 2over 2swap suffix? if r> - else rdrop then ; ?)                                                                                                                                                                                                       ( contains chop s"" sconstant counted>stringer s' )             [unneeded] contains ?\ : contains  search nip nip ;             [unneeded] chop                                                 ?\ : chop ( ca len -- ca' len' ) 1- swap char+ swap ;           [unneeded] s"" ?\ : s"" ( -- ca len ) 0 allocate-stringer 0 ;   [unneeded] s' ?\ : s'  ''' parse-string ; immediatecounted>stringer resize-stringer )                            [unneeded] counted>stringer ?(                                  : counted>stringer ( ca1 len1 -- ca2 )                            dup 1+ allocate-stringer dup >r place rstring/ char-in-string? char-position? ruler )                [unneeded] string/ ?(                                           code string/ ( ca1 len1 len2 -- ca2 len2 )                        D9 c, C1 c, D1 c, E1 c, 19 c, A7 c, ED c, 42 c,                 E5 c, C5 c, D9 c, jpnext, end-code ?)                         [unneeded] char-in-string? ?( need -rot                         : char-in-string? ( ca len c -- f )                               -rot bounds ?do   dup i c@ = if  drop true unloop exit  then                loop  drop false ; ?)                             [unneeded] char-position? ?( need -rot                          : char-position? ( ca len c -- +n true | false )                  -rot 0 ?do   2dup i + c@ = if  2drop i true unloop exit  then          loop  2drop false ; ?)                                 [unneeded] ruler ?(                                             : ruler ( c len -- ca len )                                       dup allocate-stringer swap 2dup 2>r rot fill 2r> ; ?)         ( sconstant sconstants unescape )                               [unneeded] sconstant ?(                                         : sconstant ( ca len "name" -- )                                  here >r s, r> count 2constant ; ?)                            [unneeded] sconstants ?( need array>                            : sconstants ( 0 ca[n]..ca[1] "name" -- n )                       create  0 begin  swap ?dup  while  , 1+  repeat                 does> ( n -- ca len ) ( n pfa ) array> @ count ; ?)           [unneeded] unescape ?(                                          : unescape ( ca1 len1 ca2 -- ca2 len2 )                           dup 2swap over + swap ?do                                         i c@ '%' = if '%' over c! 1+ then                               i c@ over c! 1+                                               loop  over - ; ?)                                                                                                                                                                             ( cslit csliteral c" )                                          : cslit ( -- ca ) r@ dup c@ 1+ r> + >r ;                        : csliteral ( ca len -- )                                         compile cslit s, ; immediate compile-only                     : c" ( Compilation: "ccc<quote>" -- )                                 ( Run-time: -- ca )                                         '"' parse postpone csliteral ; immediate compile-only         exit                                                            : csliteral ( Compilation: ca len -- )                                       ( Run-time: -- ca )                                  2>r postpone ahead here 2r> s, >r postpone then                 r> postpone literal ; immediate compile-only                                                                                                                                                                                                                                                                                  ( esc-standard-chars-wordlist )                                 get-current  forth-wordlist set-current need parse-char         wordlist dup constant esc-standard-chars-wordlist               dup >order set-current case-sensitive @ case-sensitive on       7 1 2constant a  8 1 2constant b  27 1 2constant e              12 1 2constant f  10 1 2constant l  '"' 1 2constant q           13 1 2constant r  9 1 2constant t  11 1 2constant v             0 1 2constant z  '\' 1 2constant \                              : m ( -- c1 c2 2 ) 10 13 2 ;                                    : (x) ( "c" -- n ) parse-char 16 digit? 0= #-260 ?throw ;       : x ( "<hexdigit><hexdigit>" -- c 1 ) (x) 16 * (x) + 1 ;        [defined]   alias ?\ '"' 1 2constant "  13 1 2constant n        [undefined] alias ?\ ' q alias "       ' r alias n              case-sensitive ! set-current previous                                                                                                                                                           ( parse-esc-string )                                            need parse-esc-char>chars need chars>string need s+             need get-esc-order need catch                                   : (parse-esc-string) ( ca len "ccc<quote>"  -- ca' len' )         begin   parse-char dup '"' <>  \ not finished?                  while   dup '\' =  \ maybe escaped?                                     if    drop parse-esc-char>chars                                 else  1  then  chars>string s+                          repeat  drop ;                                                variable case-sensitive-esc-chars  case-sensitive-esc-chars on  : parse-esc-string ( "ccc<quote>"  -- ca len )                    get-order get-esc-order set-order                               case-sensitive @ case-sensitive-esc-chars @ case-sensitive !    0 0 ['] (parse-esc-string) catch >r                             2>r case-sensitive ! set-order 2r> r> throw ;                                                                                 ( s\" .\" )                                                     [unneeded] s\" ?(                                               need parse-esc-string need esc-standard-chars-wordlist          need set-esc-order  esc-standard-chars-wordlist 1 set-esc-order : s\" ( Interpretation: "ccc<quote>" -- ca len )                       ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca len )                                    parse-esc-string compiling? if  postpone sliteral  then        ; immediate ?)                                                 [unneeded] .\" ?(                                               need parse-esc-string need esc-standard-chars-wordlist          need set-esc-order  esc-standard-chars-wordlist 1 set-esc-order : .\" ( Compilation: "ccc<quote>" -- )                                 ( Run-time: -- ca len )                                    compile (.") parse-esc-string s, ; immediate compile-only ?)                                                                  ( max-esc-order #esc-order esc-context ?esc-order )             [unneeded] max-esc-order                                        ?\ 4 constant max-esc-order                                     [unneeded] #esc-order [unneeded] esc-context and ?(             need max-esc-order                                              variable #esc-order  #esc-order off                             create esc-context here max-esc-order cells dup allot erase ?)  [unneeded] ?esc-order ?(                                        need max-esc-order                                              : ?esc-order ( n -- )                                             dup 0< #-282 ?throw  max-esc-order < ?exit  #-281 throw ; ?)                                                                                                                                                                                                                                                                                                                                  ( set-esc-order get-esc-order )                                 [unneeded] set-esc-order ?(                                     need ?esc-order need #esc-order need esc-context                : set-esc-order ( widn..wid1 n -- )                               dup ?esc-order  dup #esc-order !                                0 ?do  i cells esc-context + !  loop ; ?)                     [unneeded] get-esc-order ?(                                     need #esc-order need esc-context                                : get-esc-order ( -- wid[n]..wid[1] n )                           #esc-order @ 0 ?do                                                #esc-order @ i - 1- cells esc-context + @                     loop  #esc-order @ ; ?)                                                                                                                                                                                                                                                                                                       ( >esc-order parse-esc-char>chars )                             [unneeded] >esc-order ?(                                        need get-esc-order need set-esc-order                           : >esc-order ( wid -- )                                           >r get-esc-order 1+ r> swap set-esc-order ; ?)                [unneeded] esc-previous ?(                                      : esc-previous ( -- )                                             get-esc-order nip 1- set-esc-order ; ?)                       [unneeded] parse-esc-char>chars ?(                              need parse-char need char>string                                : parse-esc-char>chars ( "c" -- c[n-1]..c[0] n )                  parse-char dup char>string find-name                            ?dup if  nip name> execute  else  '\' 2  then ; ?)                                                                                                                                                                                                            ( first-esc-block-char esc-block-chars-wordlist )               get-current  forth-wordlist set-current                         need parse-esc-char>chars need even? need nextname              variable first-esc-block-char  128 first-esc-block-char !       wordlist dup constant esc-block-chars-wordlist                           dup >order set-current                                 variable column  column off                                     : left-column? ( -- f ) column @ even?  1 column +! ;           : >parsed-block-char ( n1 n2 -- c 1 )                             + first-esc-block-char @ + 1 ;                                -->                                                                                                                                                                                                                                                                                                                                                                                             ( esc-block-chars-wordlist )                                    s"  " nextname                                                  :    ( "c" | n1 -- n1 | n2 1 )                                    left-column? if    0 parse-esc-char>chars                                    else  0 >parsed-block-char  then ;               : ' ( "c" | n1 -- n1 | n2 1 )                                     left-column? if    2 parse-esc-char>chars                                    else  1 >parsed-block-char then ;                : . ( "c" | n1 -- n1 | n2 1 )                                     left-column? if    8 parse-esc-char>chars                                    else  4 >parsed-block-char  then ;               : : ( "c" | n1 -- n1 | n2 1 )                                     left-column? if    10 parse-esc-char>chars                                   else   5 >parsed-block-char  then ;              set-current previous                                                                                                            ( esc-udg-chars-wordlist )                                      get-current                                                     wordlist dup constant esc-udg-chars-wordlist set-current        case-sensitive @ case-sensitive on                              144 1 2constant A  145 1 2constant B  146 1 2constant C         147 1 2constant D  148 1 2constant E  149 1 2constant F         150 1 2constant G  151 1 2constant H  152 1 2constant I         153 1 2constant J  154 1 2constant K  155 1 2constant L         156 1 2constant M  157 1 2constant N  158 1 2constant O         159 1 2constant P  160 1 2constant Q  161 1 2constant R         162 1 2constant S  163 1 2constant T  164 1 2constant U         case-sensitive !                                                set-current                                                                                                                                                                                                                                                     ( far," fars, farsconstant far>sconstant far>stringer )         [unneeded] far,"                                                ?\ need fars,  : far," ( -- ) '"' parse fars, ;                 [unneeded] fars, ?( need farplace need farallot                 : fars, ( ca len -- ) tuck np@ farplace 1+ farallot ; ?)        [unneeded] farsconstant ?( need fars,                           : farsconstant ( ca len "name" -- )                               np@ >r fars, r> farcount 2constant ; ?)                       [unneeded] far>stringer ?( need cmove<far                       : far>stringer ( ca1 len1 -- ca2 len1 )                           dup allocate-stringer swap 2dup 2>r cmove<far 2r> ; ?)        [unneeded] far>sconstant ?(                                     need farsconstant need far>stringer                             : far>sconstant ( ca len "name" -- )                              farsconstant does> 2@ far>stringer ; ?)                                                                                       ( farsconstants, farsconstants> farsconstants far>sconstants )  [unneeded] farsconstants, ?( need far,                          : farsconstants, ( 0 ca[n]..ca[1] "name" -- n )                   create np@ , 0 begin  swap ?dup while  far, 1+  repeat ; ?)   [unneeded] farsconstants>                                       ?\ : farsconstants> ( n a -- ca len ) @ array> far@ farcount ;  [unneeded] farsconstants ?(                                     need farsconstants, need array> need farsconstants>             : farsconstants ( 0 ca[n]..ca[1] "name" -- n )                    farsconstants,  does> ( n -- ca len )                           ( n pfa ) farsconstants> ; ?)                                 [unneeded] far>sconstants ?( need farsconstants,                need array> need farsconstants> need far>stringer               : far>sconstants ( 0 ca[n]..ca[1] "name" -- n )                   farsconstants,  does> ( n -- ca len )                           ( n pfa ) farsconstants> far>stringer ; ?)                    ( faruppers )                                                   [unneeded] faruppers ?(                                         need assembler                                                  need far-hl_ need upper_ need ?next-bank_                       code faruppers ( ca len -- )                                      h pop, exsp, far-hl_ call, d pop,                               rbegin  d a ld, e or,  nz? rwhile                                       m a ld, upper_ call, a m ld, h incp,                            d push, ?next-bank_ call, d pop, d decp,                rrepeat ' default-bank jp, end-code ?)                                                                                                                                                                                                                                                                                                                                                                                                                        ( substitute-wordlist (substitution slit-substitution )         [unneeded] substitute-wordlist                                  ?\  wordlist constant substitute-wordlist                       [unneeded] (substitution ?(                                     need substitute-wordlist need nextname                          : (substitution ( ca1 len1 -- ca2 )                               get-current >r substitute-wordlist set-current                  nextname create here                                            r> set-current ; ?)                                           [unneeded] slit-substitution ?(                                 need (substitution need /counted-string                         : slit-substitution ( ca1 len1 -- ca2 )                           (substitution 0 c, /counted-string chars allot                  does> count ; ?)                                                                                                                                                                              ( find-substitution reuse-substitution replaces )               [unneeded] find-substitution ?(                                 need substitute-wordlist need search-wordlist                   : find-substitution ( ca len -- xt true | false )                 substitute-wordlist search-wordlist ; ?)                      [unneeded] reuse-substitution ?(                                need >body                                                      : reuse-substitution ( ca len xt -- pfa ) nip nip >body ; ?)    [unneeded] replaces ?(                                          need find-substitution need reuse-substitution                  need slit-substitution                                          : replaces ( ca1 len1 ca2 len2 -- )                               2dup find-substitution if    reuse-substitution                                        else  slit-substitution                                         then  place ; ?)                                                                                       ( substitute )                                                  need find-substitution                                          '%' cconstant substitution-delimiter                            variable /substitute-result                                     2variable substitute-result                                     variable substitute-error                                       : c>substitute-result ( c -- )                                    substitute-result @ /substitute-result @ <                      if    substitute-result 2@ + c! 1 chars substitute-result +!    else  drop #-78 substitute-error !  then ;                    : str>substitute-result ( ca len -- )                             bounds ?do  i c@ c>substitute-result  loop ;  -->                                                                                                                                                                                                                                                                             ( substitute )                                                  : get-substitution ( ca1 len1 -- ca3 len3 ca2 len2 )              1/string 2dup substitution-delimiter scan dup                   if    dup >r 1/string 2swap r> -                                else  2swap #-78 substitute-error !  then ;                   : substituted? ( ca len -- f )                                    2dup find-substitution dup >r                                   if    execute str>substitute-result 2drop                       else  substitution-delimiter c>substitute-result                      str>substitute-result                                           substitution-delimiter c>substitute-result  then  r> ;  need >body                                                      code substitution-delimiter? ( ca -- f )                          E1 c, 3A c, ' substitution-delimiter >body , BE c,              CA c, ' true , C3 c, ' false , end-code  -->                                                                                  ( substitute )                                                  : substitute ( ca1 len1 ca2 len2 -- ca2 len3 n )                   /substitute-result ! 0 substitute-result 2! 0 -rot              substitute-error off                                            begin  dup 0>  while ( -- n ca1 len1 )                            over substitution-delimiter? if                                   over char+ substitution-delimiter?                              if    substitution-delimiter c>substitute-result                      2 /string                                                 else  get-substitution                                                substituted? if  rot 1+ -rot  then                        then                                                          else  over c@ c>substitute-result 1/string  then              repeat  2drop substitute-result 2@ rot                                  substitute-error @ ?dup if  nip  then ;                                                                              ( xt-substitution xt-replaces )                                 [unneeded] xt-substitution ?(                                   need (substitution                                              : xt-substitution ( ca len -- a )                                 (substitution  cell allot does> ( pfa ) perform ; ?)          [unneeded] xt-replaces ?(                                       need find-substitution need reuse-substitution                  need xt-substitution                                            : xt-replaces ( xt ca len -- )                                    2dup find-substitution if    reuse-substitution                                        else  xt-substitution                                           then  ! ; ?)                                                                                                                                                                                                                                                                                           ( os-chars os-chans os-flags2 os-seed os-frames os-udg )        [unneeded] os-chars ?\ #23606 constant os-chars                 [unneeded] os-chans ?\ #23631 constant os-chans                 [unneeded] os-flags2 ?\ #23658 constant os-flags2               [unneeded] os-seed ?\ #23670 constant os-seed                   [unneeded] os-frames ?\ #23672 constant os-frames               [unneeded] os-udg ?\ #23675 constant os-udgos-coords os-coordx os-coordy )                               [unneeded] os-coords ?\ #23677 constant os-coords               [unneeded] os-coordx ?\ #23677 constant os-coordx               [unneeded] os-coordy ?\ #23678 constant os-coordyos-attr-p os-mask-p os-attr-t os-mask-t os-p-flag )           [unneeded] os-attr-p ?\ #23693 constant os-attr-p               [unneeded] os-mask-p ?\ #23694 constant os-mask-p               [unneeded] os-attr-t ?\ #23695 constant os-attr-t               [unneeded] os-mask-t ?\ #23696 constant os-mask-t               [unneeded] os-p-flag ?\ #23697 constant os-mask-ttape-header )                                                 17 cconstant /tape-header                                       create tape-header  /tape-header 2 * allot                      10 cconstant /tape-filename \ filename max length               tape-header constant tape-filetype ( -- ca ) 3 tape-filetype c! tape-header 1+ constant tape-filename ( -- ca )                 tape-header 11 + constant tape-length ( -- a )                  tape-header 13 + constant tape-start ( -- a )                   : -tape-filename ( -- ) tape-filename /tape-filename blank ;    : any-tape-filename ( -- ) 255 tape-filename c! ;               : set-tape-filename ( ca len -- )                                 -tape-filename  /tape-filename min tape-filename swap cmove ; : ?set-tape-filename ( ca len -- )                                dup if    set-tape-filename                                         else  2drop any-tape-filename  then ;                     : set-tape-memory ( ca len -- ) tape-length ! tape-start ! ;    ( tape-file> >tape-file )                                       [unneeded] tape-file> ?( need tape-header                       code (tape-file>) ( -- )                                          C5 c,  DD c, 21 c, tape-header ,  2A c, tape-start ,            3E c, 01 c,  32 c, 5C74 ,  CD c, 075A ,                         C1 c,  DD c, 21 c, next , jpnext, end-code                    : tape-file> ( ca1 len1 ca2 len2 -- )                             set-tape-memory ?set-tape-filename (tape-file>) ; ?)          [unneeded] >tape-file ?( need tape-header                       code (>tape-file) ( -- )                                          C5 c,  DD c, 21 c, tape-header , A8 07 + c,  32 c, 5C74 ,       21 c, here 0A + ,  E5 c, 2A c, tape-start ,  E5 c,              C3 c, 0984 , C1 c,  DD c, 21 c, next , jpnext, end-code       : >tape-file ( ca1 len1 ca2 len2 -- )                             set-tape-filename set-tape-memory (>tape-file) ; ?)                                                                           ( last-tape-header )                                            need tape-header                                                tape-header /tape-header + constant last-tape-header ( -- ca )  last-tape-header constant last-tape-filetype ( -- ca )          last-tape-header 1+ constant last-tape-filename ( -- ca )       last-tape-header 11 + constant last-tape-length ( -- a )        last-tape-header 13 + constant last-tape-start ( -- aseconds ?seconds ms )                                         [unneeded] seconds ?\ need ms : seconds ( u -- ) 1000 * ms ;    [unneeded] ?seconds                                             ?\ need ?frames  : ?seconds ( u -- ) 50 * ?frames ;             [unneeded] ms ?( need assembler                                 code ms ( u -- )                                                  d pop, d tstp, nz? rif                                            rbegin  #171 a ld#,  rbegin  nop, a dec,  z? runtil                    d decp,  d tstp,                                         z? runtil                                                     rthen  jpnext, end-code ?)                                                                                                                                                                                                                                                                                                                                                                    ( frames@ frames! reset-frames )                                [unneeded] frames@ ?( need os-frames                            : frames@ ( -- d )                                                os-frames @ [ os-frames cell+ ] literal c@ ; ?)               [unneeded] frames! ?( need os-frames                            : frames! ( d -- )                                                [ os-frames cell+ ] literal c! os-frames ! ; ?)               [unneeded] reset-frames                                         ?\ need frames! : reset-frames ( -- ) 0. frames! ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( ?frames frames pause )                                        [unneeded] ?frames ?( need os-frames                            : ?frames ( u -- )                                                os-frames @ +                                                   begin  dup os-frames @ u< key? or  until drop ; ?)            [unneeded] frames ?( need os-frames                             : frames ( u -- )                                                 os-frames @ +  begin  dup os-frames @ u<  until drop ; ?)     [unneeded] pause ?( need ?frames                                : pause ( u -- )                                                  ?dup if ?frames exit then  begin key? until ; ?)                                                                                                                                                                                                                                                                                                                                              ( leapy-year? date set-date get-date )                          [unneeded] leapy-year? ?(                                       : leapy-year? ( n -- f )                                          dup 400 mod 0= if  drop true   exit  then                       dup 100 mod 0= if  drop false  exit  then                             4 mod 0= if       false  exit  then  false ; ?)         [unneeded] date ?\ create date  1 c,  1 c,  2016 ,              [unneeded] get-date ?(                                          : get-date ( -- day month year )                                  date c@ [ date 1+ ] literal c@ [ date 2+ ] literal @ ; ?)     [unneeded] set-date ?(                                          : set-date ( day month year -- )                                  [ date 2+ ] literal ! [ date 1+ ] literal c! date c! ; ?)                                                                                                                                                                                                     ( set-time get-time reset-time )                                [unneeded] get-time ?( need frames@                             : get-time ( -- second minute hour )                              frames@ 50 um/mod nip s>d   ( sec . )                                   60 um/mod s>d       ( sec min . )                               60 um/mod           ( sec min hour ) ; ?)             [unneeded] set-time ?( need ud* need frames!                    : set-time ( second minute hour -- )                              3600 um* rot 60 * m+ rot m+ ( seconds ) 50. ud* frames! ; ?)  [unneeded] reset-time ?( need reset-frames need alias           ' reset-frames alias reset-time ( -- ) ?)                                                                                                                                                                                                                                                                                                                                                       ( .00 .0000 .time .system-time .date .system-date )             [unneeded] .00 ?\ : .00 ( n -- ) s>d <# # # #> type ;           [unneeded] .0000 ?\ : .0000 ( n -- ) s>d <# # # # # #> type ;   [unneeded] .time ?( need .00                                    : .time ( second minute hour -- ) .00 ." :" .00 ." :" .00 ; ?)  [unneeded] .system-time ?( need get-time need .time             : .system-time ( -- ) get-time .time ; ?)                       [unneeded] .date ?( need .0000 need .00                         : .date ( day month year -- ) .0000 ." -" .00 ." -" .00 ;       [unneeded] .system-date ?( need get-date need .date             : .system-date ( -- ) get-date  .date ; ?)                                                                                                                                                                                                                                                                                                                                                      ( .time&date time&date )                                        [unneeded] .time&date ?( need .date need .time                  : .time&date ( second minute hour day month year -- )             .date ." T" .time ; ?)                                        [unneeded] time&date ?( need get-time need get-date             : time&date ( -- second minute hour day month year )              get-time get-datebench{ }bench }bench. bench. benched )                        need reset-frames need frames@                                  : bench{ ( -- ) reset-frames ;                                  : }bench ( -- d ) frames@ ;                                     : bench. ( d -- ) 2dup d. ." frames (" 50 m/ nip . ." s) " ;    : }bench. ( -- ) frames@ bench. ;                               : benched ( xt n -- d )                                           bench{ 0 ?do  dup execute  loop  }bench rot drop ;            : benched. ( xt n -- )                                            bench{ 0 ?do  dup execute  loop  }bench. drop ;                                                                                                                                                                                                                                                                                                                                                                                                               ( assert assert= assert( )                                      [unneeded] assert                                               ?\ : assert ( n -- ) 0= if  abort  then ;                       [unneeded] assert=                                              ?\ need assert  : assert= ( a b -- ) = assert ;                 [unneeded] assert( ?exit                                        variable assert-level ( -- a ) 1 assert-level !                 : assertn ( n -- ) assert-level @ > if  postpone (  then ;      : assert0( ( -- ) 0 assertn ; immediate                         : assert1( ( -- ) 1 assertn ; immediate                         : assert2( ( -- ) 2 assertn ; immediate                         : assert3( ( -- ) 3 assertn ; immediate                         : assert( ( -- ) postpone assert1( ; immediate                  : (endassert) ( f -- ) 0= #-262 ?throw ;                        : ) ( f -- ) postpone (endassert) ; immediate                                                                                   ( fyi )                                                         need u.r                                                        : fyi. ( u -- ) cr 5 u.r space ;                                : fyi ( -- )                                                      #words            fyi. ." #words"                               here              fyi. ." here"                                 latest-wordlist @ fyi. ." latest-wordlist @"                    limit @           fyi. ." limit @"                              unused            fyi. ." unused"                               np@               fyi. ." np@"                                  latest            fyi. ." latest"                               current-latest    fyi. ." current-latest"                       farlimit @        fyi. ." farlimit @"                           farunused         fyi. ." farunused" cr ;                                                                                                                                                     ( ~~ )                                                          need :noname need defer need .s need columns                    variable ~~?  ~~? on                                            create ~~y  0 c,                                                create ~~quit-key 'q' c,                                        create ~~resume-key bl c,                                       : ~~info ( nt line block -- )                                     0 ~~y c@ 2dup 2>r at-xy columns 2* spaces 2r@ at-xy             ." Block " 4 .r ."  Line " 2 .r space .name 2r> 1+ at-xy .s ; : ~~control? ( -- f ) ~~resume-key c@ ~~quit-key c@ or ;        : ~~press? ( c ca -- f ) c@ tuck = swap 0<> and ;               : ~~control ( -- )                                                ~~control? 0= ?exit                       begin key dup             ~~quit-key ~~press? if drop quit then                         ~~resume-key c@ $FF = if drop exit then                         ~~resume-key ~~press? if exit      then again ; -->         ( ~~ )                                                          2variable ~~xy-backup                                           defer ~~save ( -- ) defer ~~restore ( -- )                      : ~~save-xy ( -- ) xy ~~xy-backup 2! ;                          : ~~restore-xy ( -- ) ~~xy-backup 2@ at-xy ;                    ' ~~save-xy ' ~~save defer!  ' ~~restore-xy ' ~~restore defer!  defer ~~app-info ( -- ) ' noop ' ~~app-info defer!              : (~~) ( nt line block -- )                                       ~~? @ if    ~~save ~~app-info ~~info ~~control ~~restore              else  2drop drop  then ;                                : ~~ ( -- )                                                       latest      ( nt )    postpone literal                          >in @ c/l / ( line )  postpone literal                          blk @       ( block ) postpone literal                                                postpone (~~) ; immediate compile-only                                                                  ( where )                                                       : where ( -- )                                                    error-pos 2@ ( n u )                                            dup if                                                            ." Block #" dup base @ >r decimal u. r> base ! cr               swap c/l /mod c/l * rot block + c/l type cr                     here c@ - spaces '^' emit                                     else  2drop  thenfardump )                                                     need 16hex. need fartype-ascii need backspace need ?leave       : fardump ( ca len -- )                                           8 max 8 2dup mod - + 8 / 1- 0                                   ?do                                                               cr dup 16hex.                                                   8 0 ?do  i over + far@ flip 16hex.  cell +loop                  dup backspace 8 fartype-ascii                                   break-key? ?leave                                             8 + loop  drop ;                                                                                                                                                                                                                                                                                                                                                                                                                                              ( farwdump )                                                    need 16hex. need ?leave                                         : farwdump ( a len -- )                                           0                                                               ?do                                                               i 4 mod 0= if  cr dup 16hex. space  then  \ show address        dup far@ 16hex. cell+                                           break-key? ?leave                                             loop  dropdump )                                                        need 16hex. need type-ascii need backspace need ?leave          : dump ( ca len -- )                                              8 max 8 2dup mod - + 8 / 1- 0                                   ?do                                                               cr dup 16hex.                                                   8 0 ?do  i over + @ flip 16hex.  cell +loop                     dup backspace 8 type-ascii                                      break-key? ?leave                                             8 + loop  drop ;                                                                                                                                                                                                                                                                                                                                                                                                                                              ( wdump )                                                       need 16hex. need ?leave                                         : wdump ( a len -- )                                              0                                                               ?do                                                               i 4 mod 0= if  cr dup 16hex. space  then  \ show address        dup @ 16hex. cell+                                              break-key? ?leave                                             loop  drophistory )                                                     variable /history                                               variable hp0                                                    variable hp                                                     : used-history ( -- u ) hp0 @ hp @  - ;                         : unused-history ( -- n ) /history @ used-history - ;           : allot-history ( +n -- ) hp +! ;                               : len>history ( len -- +n ) 1+ cell+ ;                          : history>link ( ca -- a ) cell- ;                              : history<history ( ca1 -- ca2 ) history>link far@ ;            : history>history ( ca1 -- ca2 ) farcount + cell+ ;             : history>string ( ca1 -- ca2 len2 ) farcount >stringer ;       -->                                                                                                                                                                                                                                                             ( history )                                                     variable browsed-history                                        : oldest-history? ( -- f ) browsed-history @ hp0 @ = ;          : browse-older-history ( -- )                                     oldest-history? ?exit                                           browsed-history @ history<history browsed-history ! ;         : newest-history? ( -- )                                          browsed-history @ history>history hp @ =                        browsed-history @ hp @ =  or ;                                : browse-newer-history ( -- )                                     newest-history? ?exit                                           browsed-history @ history>history browsed-history ! ;         : init-history ( n -- )                                           dup /history !  $FFFF swap -                                    dup hp0 !  dup hp !  browsed-history !  0 hp0 @ farc! ;       1024 init-history  -->                                          ( history )                                                     : history-empty? ( -- f ) used-history 0= ;                     : allocate-history ( len -- ior )                                 1+ dup /history @ > if  drop #-274 exit  thenhistory )                                                     : latest-history$ ( -- ca len )                                   hp @ history<history history>string ;                         : duplicated-history? ( ca len -- f ) latest-history$ str= ;    : longer-history? ( len -- f )                                    len>history unused-history > ;                                : history, ( ca len -- )                                          hp @ dup >r  over >r ( ca len ca1 ) ( R: len ca1 -- )           farplace                                                        r> 1+ allot-history  r> hp @ far!  cell allot-history ;       : (>history) ( ca len -- )                                        dup 0= if  2drop exit  then                                     2dup duplicated-history? if  2drop exit  then                   dup longer-history? if  dup allocate-history throw  then        history,  hp @ browsed-history ! ;                            -->                                                             ( history )                                                     : browsed-history$ ( -- ca len )                                  browsed-history @ history>string ;                            : get-history   ( -- ca ) browsed-history$ set-accept ;         : (history-up)    ( -- ca )                                       get-history browse-older-history ;                            : (history-down) ( -- ca )                                        get-history browse-newer-historyhistory )                                                     variable history                                                : history-off ( -- )                                              ['] 2drop ['] >history defer!                                   ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off ;                  : history-on ( -- )                                               ['] (>history) ['] >history defer!                              ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on ;      -->                                                                                                                                                                                                                                                                                                                                                                                             ( history )                                                     : .history ( -- )                                                 hp0 @ begin  dup hp @ u<  while                                         dup history>string type cr  history>history                   repeat  drop ;                                          : .h ( -- ) hp0 dup hp @ - fardump ;                            \ history-onhistory-xxx-old )                                             variable hp                                                     $FFFF constant hp0                                              variable /history  1024 /history !                              : init-hp0 ( -- ) 0 hp0 farc! ;                                 : history-bounds ( -- ca1 ca2 ) hp0 hp @ ;                      : used-history ( -- u ) history-bounds - ;                      : unused-history ( -- n ) /history @ used-historyhistory-xxx-old )                                             variable previously-browsed-history                             variable currently-browsed-history                              : older-history ( -- )                                            currently-browsed-history @ dup previously-browsed-history !    farcount + currently-browsed-history ! ;                      : newer-history ( -- )                                            currently-browsed-history @                                     previously-browsed-history @ currently-browsed-history !        currently-browsed-history ! ;                                 : init-history ( -- )                                             init-hp0  hp0 dup hp ! currently-browsed-history ! ;          init-history  -->                                                                                                                                                                                                                                               ( history-xxx-old )                                             : allot-history ( +n -- ) negate hp +! ;                        : history-empty? ( -- f ) history-bounds = ;                    : allocate-history ( len -- ior )                                 1+ dup /history @ > if  drop #-274 exit  then                   0 ; \ XXX TMP                                                 : latest-history ( -- ca len ) hp @ farcount >stringer ;        : browsed-history ( -- ca len )                                   currently-browsed-history @ farcount >stringer ;              : (history>) ( -- ca len )                                        browsed-history  dup 0= ?exit                                                    dup 1+ negate allot-history                    history-empty? if  init-hp0  then ;  -->                                                                                                                                                                                                                      ( history-xxx-old )                                             : duplicated-history? ( ca len -- f ) latest-history str= ;     : too-long-for-history? ( len -- f ) 1+ unused-history > ;      : (>history) ( ca len -- )                                        dup 0= if  2drop exit  then                                     history-empty? if  dup hp0 farc!  then                          2dup duplicated-history? if  2drop exit  then                   dup too-long-for-history?                                       if  dup allocate-history throw  then                            dup 1+ allot-history                                            hp @ dup farplace currently-browsed-history ! ;               -->                                                                                                                                                                                                                                                                                                                             ( history-xxx-old )                                             : get-history   ( -- ca ) browsed-history set-accept ;          : (history-up)    ( -- ca ) get-history older-history ;         : (history-down) ( -- ca ) get-history newer-history ;          variable history                                                : history-off ( -- )                                              ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off ;                  : history-on ( -- )                                               ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on ;      : .history ( -- )                                                 hp @  begin  dup hp0 <  while  farcount 2dup type cr +                repeat  drop ;                                          \ history-on                                                                                                                    ( /line# .line# .line list-line list-lines list )               [unneeded] /line# ?\ : /line# ( -- n ) #16 base @ - 4 / 1+ ;    [unneeded] .line#                                               ?\ need /line#  : .line# ( n -- ) /line# .r ;                   [unneeded] .line                                                ?\ : .line ( n1 n2 -- ) line>string -trailing type ;            [unneeded] list-line ?( need .line# need .line                  : list-line ( n u -- ) cr over .line# space .line ; ?)          [unneeded] list-lines ?(                                        need .line need nuf? need list-line need ?leave                 : list-lines ( u n1 n2 -- )                                       rot dup scr ! cr ." Block " u.  1+ swap                         ?do  i scr @ list-line nuf? ?leave  loop cr ; ?)              [unneeded] list ?( need list-lines                              : list ( u -- ) dup max-blocks 1- u> #-35 ?throw                                    0 [ l/scr 1- ] literal list-lines ; ?)      ( /block# view .block# .index index )                           [unneeded] /block# ?\ 3 constant /block#  exit                  [unneeded] view ?( need locate need list                        : view ( "name" -- ) locate dup 0= #-286 ?throw list ; ?)       [unneeded] .block# ?( need /block#                              : .block# ( n -- ) /block# .r ; ?)                              [unneeded] .index ?( need .line                                 : .index ( u -- )                                                 cr dup .block# space 0 swap .line ; ?)                        [unneeded] index ?( need .line need nuf? need ?leave            : index ( u1 u2 -- )                                              1+ swap ?do  cr i .block# space 0 i .line  nuf? ?leave          loop ; ?)                                                                                                                                                                                                                                                     ( index-like index-ilike )                                      need .index need contains need nuf? need ?leave                 [unneeded] index-like ?(                                        : index-like ( u1 u2 "name" -- )                                  parse-name 2swap                                                1+ swap ?do  0 i line>string 2over contains                                  if  i .index  then  nuf? ?leave                    loop  2drop ; ?)                                              [unneeded] index-ilike ?( need uppers                           : index-ilike ( u1 u2 "name" -- )                                 parse-name >stringer 2dup uppers                                2swap 1+ swap ?do                                                 >stringer  0 i line>string >stringer 2dup uppers                2over contains if  i .index  then                               nuf? ?leave                                                   loop  2drop ; ?)                                              ( qx nx px )                                                    need rows need columns                                          need .line# need /line# need .block# need /block#               : qx-columns ( -- n ) columns 14 / ;                            : /qx-column ( -- n ) columns qx-columns / ;                    : /qx ( -- n ) rows 2- qx-columns * ;                           : qx-bounds ( -- u1 u2 ) scr @ /qx / /qx * /qx bounds                                    0 max swap blocks/disk min swap ;      : qx ( -- )                                                       home  qx-bounds ?do                                               i scr @ = if  '>' /block# emits  else  i .block#  then          i block /qx-column /block# - type                             loop ;                                                        : nx ( -- )                                                       /qx scr @ + [ blocks/disk 1- ] literal min scr ! qx ;         : px ( -- ) scr @ /qx - 0 max scr ! qx ;                        ( lt lm lb )                                                    need list-lines                                                 : lt ( -- ) scr @ 0 [ l/scr 2 / 1- ] literal list-lines ;       : lm ( -- ) scr @ [ l/scr 4 / ] literal                                             [ l/scr 4 / 3 * 1- ] literal list-lines ;   : lb ( -- ) scr @ [ l/scr 2 / ] literal                                             [ l/scr 1-  ] literal list-linesdepth .s u.s )                                               [unneeded] .depth ?\ : .depth ( n -- ) ." <" 0 .r ." > " ;      [unneeded] .s ?( need .depth                                    defer (.s) ( x -- ) ' . ' (.s) defer!                           : .s   ( -- )                                                     depth dup .depth 0> if                                            sp@ sp0 @ cell- ?do i @ (.s)  [ cell negate ] literal +loop   then ; ?)                                                     [unneeded] u.s ?( need .s                                       : u.s   ( -- )                                                    ['] u. ['] (.s) defer!  .s  ['] . ['] (.s) defer! ; ?)                                                                                                                                                                                                                                                                                                                                        ( .current .context .wordlist )                                 [unneeded] .current                                             ?\ : .current ( -- ) get-current .wordlist ;                    [unneeded] .context ?( need .wordlist                           : .context ( -- )                                                 get-order begin  ?dup  while  swap .wordlist 1-  repeat ; ?)  [unneeded] .wordlist ?( need wordlist>name                      : .wordlist ( wid -- )                                            dup wordlist>name @ ?dup if  .name drop exit  then  u. ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( wordlists order )                                             [unneeded] wordlists ?( need .wordlist need wordlist>link       : wordlists ( -- )                                                latest-wordlist                                                 begin  @ ( wid|0) ?dup  while  dup .wordlist wordlist>link      repeat ; ?)                                                   [unneeded] order ?( need .context need .current                 : order ( -- )                                                    cr ." Search: " .context cr ." Compile: " .current ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( .word .wordname more-words? words wordlist-words )            [unneeded] .word ?( need tab  defer .word ( nt -- )             : (.word ( nt -- ) .name tab ;  ' (.word ' .word defer! ?)      [unneeded] .wordname ?( need u.r                                : .wordname ( nt -- ) cr dup 5 u.r space .name ;                ' .wordname ' .word defer! ?)                                   [unneeded] more-words? ?( need nuf?                             : more-words? ( nt|0 -- nt|0 f ) dup 0<>  nuf? 0= and ; ?)      [unneeded] words ?( need trail need more-words?                                      need .word need name<name                  : words ( -- ) trail begin  more-words?  while                                  dup .word name<name  repeat  drop ; ?)          [unneeded] wordlist-words  ?( need words                        : wordlist-words ( wid -- ) >order  words  previous ; ?)                                                                                                                                        ( words-like words# )                                           [unneeded] words-like ?( need trail need name<name                                       need lowers need more-words?                                    need contains need .word need tab      : words-like ( "name" -- )                                        parse-name 2dup lowers trail ( ca len nt )                      begin  more-words?  while                                         dup >r name>string 2over contains if  r@ .word  then                r> name<name                                              repeat drop 2drop ; ?)                                        [unneeded] words# ?( need trail need name<name                  : words# ( -- n ) 0 trail begin ( n nt ) dup 0<>  while                                      swap 1+ swap  name<name                                       repeat drop ; ?)                                                                                                                                                     ( marker )                                                      : wordlists, ( -- )                                               latest-wordlist @ begin                                           dup cell- @ ( a nt ) , @                                      ?dup 0= until ;                                               : @wordlists ( a -- )                                             latest-wordlist @ begin                                           2dup  swap @ swap cell- !                                       swap cell+ swap  @                                            ?dup 0= until  drop ;                                         -->                                                                                                                                                                                                                                                                                                                                                                                             ( marker )                                                      need get-order need @cell+ need nn, need nn@ need there         : @order ( a -- ) nn@ set-order ;                               : unmarker ( a -- )                                               dup there                                                       @cell+ np!  @cell+ last !  @cell+ lastxt !                      @cell+ latest-wordlist !                                        @cell+ set-current                                              dup dup @ 1+ cells + >r  @order  r> @wordlists ;              : order, ( -- ) get-order nn, ;                                 : marker, ( -- a )                                                here  np@ ,  last @ ,  lastxt @ ,  latest-wordlist @ ,                get-current ,  order,  wordlists, ;                     : marker ( "name" -- )                                            marker, create ,  does> ( -- ) ( pfa ) @ unmarker ;                                                                           ( anew )                                                        need possibly need marker                                       : anew ( "name" -- ) >in @  possibly  >in !  markersee )                                                         get-current  also forth definitions decimal                     need body>name need name>body need case                         need recurse need >body need body>                              variable see-level  see-level off \ depth of nesting            variable see-address  \ in the word being decoded               : indent ( -- ) cr see-address @ u. see-level @ 2* spaces ;     : indent+ ( -- ) 1 see-level +! indent ;                        : see-branch    ( a1 -- a2 ) cell+ dup @ u. ;                   : see-literal   ( a1 -- a2 ) cell+ dup @ . ;                    : see-2literal   ( a1 -- a2 ) cell+ dup 2@ d. cell+ ;           : see-cliteral ( a1 -- a2 ) cell+ dup c@ . 1- ;                 : see-sliteral ( a1 -- a2 )                                       cell+ dup count '"' emit type '"' emit  dup c@ + 1- ;         : see-compile   ( a1 -- a2 ) cell+ dup @ >name .name ;  -->                                                                     ( see )                                                         : see-special ( a1 -- a1 | a2 ) dup @ case                          ['] compile   of  see-compile    endof                          ['] lit       of  see-literal    endof                          ['] 2lit      of  see-2literal   endof                          ['] clit      of  see-cliteral   endof                          ['] slit      of  see-sliteral   endof                          ['] branch    of  see-branch     endof                          ['] 0branch   of  see-branch     endof                          ['] ?branch   of  see-branch     endof                          ['] (do)      of  see-branch     endof                          ['] (?do)     of  see-branch     endof                          ['] (.")      of  see-sliteral   endof -->                                                                                                                                                                                                                  ( see )                                                             [undefined] cslit    ?\ ['] cslit    of see-sliteral endof      [undefined] (abort") ?\ ['] (abort") of see-sliteral endof      [undefined] -branch  ?\ ['] -branch  of see-branch   endof    endcase ;                                                     : colon-end? ( xt -- f ) dup ['] exit = swap ['] (;code) = or ; : colon-xt? ( xt -- f ) dup c@ $CD = swap 1+ @ docolon = and ;  defer colon-body? ( pfa -- f )                                  : (colon-body?) ( pfa -- f ) body> colon-xt? ;                  defer .see-body-name ( pfa -- )                                 : (.see-body-name) ( pfa -- )                                     indent  ." : " body>name .name ;                              : be-see-body ( -- )                                              ['] (colon-body?) ['] colon-body? defer!                        ['] (.see-body-name) ['] .see-body-name defer! ; be-see-body  : no-colon-check ( pfa -- true ) drop true ;  -->               ( see )                                                         : see-body ( pfa -- )                                             dup colon-body?  if                                               dup body> see-address ! dup .see-body-name  be-see-body         begin   ( pfa+n ) dup see-address !                                     dup @ ( pfa+n xt ) dup colon-end? 0=                    while  \ high level & not end of colon definition                 >body ( pfa+n pfa' ) dup indent+  body>name .name               key case  'q' of  sp0 @ sp! quit  endof                                   bl  of  drop            endof                                   swap recurse  \ default                                   endcase  see-special  cell+  -1 see-level +!              repeat  indent >name .name                                    else  ." Not a colon definition."  then drop ;  -->                                                                                                                                           ( see )                                                         : see-usage ( -- )                                                cr ." Keys: space=more, q=quit, other=deeper." cr ;           : see ( "name" -- )                                               defined ( nt | 0 ) dup 0= -13 ?throw  see-usage                 name>body  see-level off  see-body ;                          previous set-currentsee-body-from see-xt )                                        get-current  also forth definitions                             [unneeded] see-body-from ?( need see                            : see-body-from ( a -- )                                          ['] drop ['] .see-body-name defer!                              ['] no-colon-check ['] colon-body? defer!  see-body ; ?)      [unneeded] see-xt ?( need see need nuf?                         : see-xt ( xt -- ) dup colon-xt?  if  see-level off                 dup see-address ! indent  ." : " dup >name .name >body          begin   ( pfa+n ) dup see-address !                                     dup @ ( pfa+n xt ) dup colon-end? 0=  nuf? 0= and       while   >body ( pfa+n pfa' ) indent+ body>name .name                    see-special  cell+  -1 see-level +!                     repeat  indent >name .name                                    else  ." Not a colon definition."  then drop ; ?)             previous set-current                                            ( extend size system turnkey )                                  : extend ( -- )                                                   latest $08 +origin !                                            here $1F +origin !                                              np@ $26 +origin !                                               latest-wordlist @ $0C +origin ! ;                             : size ( -- u ) here 0 +origin - ;                              : system ( -- a len ) extend  0 +origin size 10 + ;             : turnkey ( xt -- a len ) boot defer! system ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( wordlist>link wordlist>name wordlist-name@ wordlist-name! )   [unneeded] wordlist>link                                        ?\ need alias  ' cell+ alias wordlist>link ( wid -- a ) exit    [unneeded] wordlist>name                                        ?\ : wordlist>name ( wid -- a ) cell+ cell+ ;                   [unneeded] wordlist-name@ dup                                   ?\ need wordlist>name                                           ?\ : wordlist-name@ ( wid -- nt|0 ) wordlist>name @ ;           [unneeded] wordlist-name! dup                                   ?\ need wordlist>name                                           ?\ : wordlist-name! ( nt wid -- ) wordlist>name ! ;                                                                                                                                                                                                                                                                                                                                             ( +order -order )                                               [unneeded] +order                                               ?\ need -order  : +order ( wid -- ) dup -order >order ;         [unneeded] -order ?exit                                         need n>r need under+                                            variable -order-wid                                             : -order ( wid -- )                                               -order-wid !  get-order n>r r> dup                              begin dup  while  1-                                              r@ -order-wid @ = if  rdrop -1 under+  else  r> -rot  then    repeat  drop set-order ;                                                                                                                                                                                                                                                                                                                                                                      ( wordlist-of latest>wordlist wordlist>vocabulary vocabulary )  [unneeded] wordlist-of                                          ?\ need >body  : wordlist-of ( "name" -- wid ) ' >body @ ;      [unneeded] latest>wordlist  ?( need wordlist-name!              : latest>wordlist ( wid -- ) latest swap wordlist-name! ; ?)    [unneeded] wordlist>vocabulary ?( need latest>wordlist          : wordlist>vocabulary ( wid "name" -- )                           create dup , latest>wordlist dovocabulary ; ?)                [unneeded] vocabulary ?( need wordlist>vocabulary               : vocabulary ( "name" -- )                                        wordlist wordlist>vocabulary ; ?)                                                                                                                                                                                                                                                                                                                                                             ( seal trail find-name-in find swap-current search-wordlist )   [unneeded] seal                                                 ?\ : seal ( -- ) 1 #order ! ;                                   [unneeded] trail ?\ : trail ( -- nt ) context @ @ ;             [unneeded] find-name-in                                         ?\ : find-name-in ( ca len wid -- nt | 0 ) @ find-name-from ;   [unneeded] find ?(                                              : find ( ca -- ca 0 | xt 1 | xt -1 )                              dup count find-name dup                                         if  nip name>immediate? 1 or negate  then ; ?)                [unneeded] swap-current ?(                                      : swap-current ( wid1 -- wid2 )                                   get-current swap set-current ; ?)                             [unneeded] search-wordlist ?(                                   : search-wordlist ( ca len wid -- 0 | xt 1 | xt -1 )              @ find-name-from dup 0= ?exit  name>immediate? 0= 1 or