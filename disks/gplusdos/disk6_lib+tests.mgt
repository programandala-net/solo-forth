( Solo Forth library )                                          \ http://programandala.net/en.program.solo_forth.htmlloadcontains delimited located )                                  : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;       variable default-first-locatable  variable first-locatable      variable last-locatable  blk/disk 1- last-locatable !           : delimited  ( ca1 len1 -- ca2 len2 )                             dup 2+ dup allocate-string swap  ( ca1 len1 ca2 len2 )          2dup blank  2dup 2>r drop char+ smove 2r>  ;                  : located  ( ca len -- block | false )                            delimited  last-locatable @ 1+  first-locatable @               default-first-locatable @  first-locatable !                    do  0 i line>string 2over contains                                  if  2drop i unloop exit  then  break-key? #-28 ?throw       loop  2drop 0  ;                                              2variable needed-word  -->                                                                                                                                                                      ( ?located reneeded reneed needed-word [needed] [unneeded] )    : ?located  ( n -- )                                              dup ?exit  needed-word 2@ parsed-name 2! #-268 throw  ;       defer reneeded  ( ca len -- )                                   : locate-reneeded  ( ca len -- )  located ?located load  ;      defer reneed  ( "name" -- )                                     : locate-reneed  ( "name" -- )                                    parse-name save-string locate-reneeded  ;                     : [needed]  ( "name" -- f )                                       parse-name needed-word 2@ 2dup or                               if  compare 0= exit  then  2drop 2drop true  ; immediate      : [unneeded]  ( "name" -- f )                                     postpone [needed] 0=  ; immediate                             : new-needed-word  ( ca len -- ca' len' )                         -trailing -leading save-string 2dup needed-word 2!  ;         -->                                                             ( needed need )                                                 defer needed  ( ca len -- )                                     : locate-needed  ( ca len -- )                                    needed-word 2@ 2>r  new-needed-word  2dup undefined?            if  locate-reneeded  else  2drop  then  2r> needed-word 2!  ; defer need  ( "name" -- )                                       : locate-need  ( "name" -- )  parse-name locate-needed  ;       : set-located-need  ( -- )                                        ['] locate-reneeded ['] reneeded  defer!                        ['] locate-reneed   ['] reneed    defer!                        ['] locate-need     ['] need      defer!                        ['] locate-needed   ['] needed    defer!  ;                   set-located-need                                                blk @ 1+ dup default-first-locatable !  first-locatable !                                                                                                                                       ( locate from need-here )                                       [unneeded] locate [unneeded] from and                           ?\ : locate  ( "name" -- n )  parse-name save-string located  ; [unneeded] from                                                 ?\ : from  ( "name" -- )  locate ?located first-locatable !  ;  [unneeded] need-here ?exit                                      : need-here  ( "name" -- )                                        parse-name needed-word 2@ 2>r                                   new-needed-word  2dup needed-word 2! undefined?                 if  blk @ load  else  2drop  then  2r> needed-word 2!  ;                                                                                                                                                                                                                                                                                                                                                                                                      ( macro )                                                       need get-order                                                  get-order get-current                                           only forth definitions  also assembler                          : macro  ( "name" -- )  : asm  ;                                : endm  ( -- )  end-asm postpone ;  ;  immediate                set-current  set-orderneed @c+  need for                                              : <<  ( -- a depth )  here depth  ;                             : >>  ( a depth -- )                                              depth 1- - #-258 ?throw cr base @ >r hex                        dup 4 u.r space  here over - for  c@+ 3 u.r  step drop          r> base !  spacez80-asm, )                                                    get-current forth-wordlist set-current                          need ?pairs  need 3dup  need 8*                                 : z80-asm,  ( -- )  assembler  ;                                also assembler definitions base @ hex                           0 constant b   1 constant c   2 constant d   3 constant e       4 constant h   5 constant l   6 constant m   7 constant a       0 constant bc  2 constant de  4 constant hl                     6 constant sp  6 constant af                                    DD constant ix-op  FD constant iy-op                            : ix  ( -- rphl )  ix-op c, hl  ;                               : iy  ( -- rphl )  iy-op c, hl  ;                               : ?jr-range  ( n -- n )  dup 80 + FF swap u< #-269 ?throw  ;    -->                                                                                                                                                                                             ( z80-asm, )                                                    : m1  ( 8b "name" -- )                                            create c, does>  ( -- ) ( pfa ) c@ c,  ;                      : m2  ( 8b "name" -- )                                            create c, does>  ( r -- ) ( r pfa ) c@ + c,  ;                : m3  ( 8b "name" -- )                                            create c, does>  ( r -- ) ( r pfa ) c@ swap 8* + c,  ;        : m4  ( 8b "name" -- )                                            create c, does>  ( 8b -- ) ( 8b pfa ) c@ c, c,  ;             : m5  ( 8b "name" -- )                                            create c, does>  ( 16b -- ) ( 16b pfa ) c@ c, ,  ;            : m6  ( 8b "name" -- )                                            create c, does>  ( r -- ) ( r pfa ) CB c, c@ + c,  ;          : m7  ( 8b "name" -- )                                            create c, does>  ( r bit -- )                                     ( r bit pfa ) CB c, c@ swap 8* + + c,  ;  -->               ( z80-asm, )                                                    : m8  ( 16b "name" -- ) create , does>  ( -- ) ( pfa ) @ ,  ;   : (jr,)  ( a op -- )  c, here 1+ - ?jr-range c,  ;              : m9  ( 8b "name" -- )                                            create c, does>  ( a -- ) ( a pfa )  c@ (jr,)  ;              : ma  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) c@ c, drop c,  ;                          : mb  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) CB c, c@ c, drop c,  ;                    : mc  ( 8b "name" -- )                                            create c, does>  ( disp rphl bit -- )                             ( disp rphl bit pfa )                                           CB c, c@ rot drop rot c, swap 8* + c,  ;  -->                                                                               ( z80-asm, )                                                    00 m1 nop, 02 m3 stap, 03 m3 incp, 04 m3 inc, 05 m3 dec, 07 m1  rlca, 08 m1 exaf, 09 m3 addp, 0A m3 ftap, 0B m3 decp, 0F m1     rrca, 10 m9 djnz, 17 m1 rla, 18 m9 jr,  1F m1 rra, 22 m5 sthl,  27 m1 daa, 2A m5 fthl, 2F m1 cpl, 32 m5 sta, 37 m1 scf, 3A m5   fta, 3F m1 ccf, 76 m1 halt, 80 m2 add, 88 m2 adc, 90 m2 sub, 98 m2 sbc, B8 m2 cp, C1 m3 pop, C3 m5 jp, C5 m3 push, C6 m4 add#,  C7 m2 rst, C9 m1 ret, CE m4 adc#, D3 m4 out, 41 m3              outbc, D6 m4 sub#, D9 m1 exx, DB m4 in, 40 m3 inbc, 0DE m4      sbc#, E3 m1 exsp, E6 m4 and#, E9 m1 jphl, EB m1 exde, EE m4     xor#, F3 m1 di,  F6 m4 or#, F9 m1 ldsp, FB m1 ei, FE m4 cp#, 00 m6 rlc, 08 m6 rrc, 10 m6 rl, 18 m6 rr, 20 m6 sla, 28 m6 sra, 38 m6 srl,  40 m7 bit, 80 m7 res, C0 m7 set, B0ED m8 ldir, B8ED m8 lddr, 44ED m8 neg, 57ED m8 ldai, 47ED m8 ldia, 56ED m8 im1 5EED m8 im2 B1ED m8 cpir, 6FED m8 rld, A0 m2 and, B0 m2 or,  A8 m2   xor, -->                                                        ( z80-asm, )                                                    : jpix,  ( -- )  ix-op c, jphl,  ;                              : ldp#,  ( 16b rp -- )  8* 1+ c, ,  ;                           : ld#,  ( 8b r -- )  8* 06 + c, c,  ;                           : ld,  ( r1 r2 -- )  8* 40 + + c,  ;                            : sbcp,  ( rp -- )  ED c, 8* 42 + c,  ;                         : adcp,  ( rp1 rp2 -- )  ED c, 8* 4A + c,  ;                    : stp,  ( a rp -- )  ED c, 8* 43 + c, ,  ;                      : ftp,  ( a rp -- )  ED c, 8* 4B + c, ,  ;                      : addix,  ( rp -- )  ix-op c, addp,  ;                          : addiy,  ( rp -- )  iy-op c, addp,  ;                          : clr,  ( rp -- )  0 swap ld#,  ;                               : clrp,  ( rp -- )  0 swap ldp#,  ;                             : ldp,  ( rp1 rp2 -- )  2dup ld, 1+ swap 1+ swap ld,  ;         : subp,  ( rp -- )  a and, sbcp,  ;                             : tstp,  ( rp -- )  dup a ld, 1+ or,  ;  -->                    ( z80-asm, )                                                    CF m4 hook,  \ rst $08                                          D7 m1 prt,   \ rst $16                                          86 ma addx, 8E ma adcx, 96 ma subx, 9E ma sbcx, A6 ma andx,     AE ma xorx, B6 ma orx,  BE ma cpx,  34 ma incx, 35 ma decx,     06 mb rlcx, 0E mb rrcx, 16 mb rlx,  1E mb rrx,  26 mb slax,     2E mb srax, 3E mb srlx, 46 mc bitx, 86 mc resx, C6 mc setx,     : ftx,   ( disp rpi r -- )   nip 8* 46 + c, c,  ;               : stx,   ( r disp rphl -- )  drop swap 70 + c, c,  ;            : st#x,  ( 8b disp rpi -- )  drop 36 c, swap c, c,  ;           : ftpx,  ( disp rpi rp -- )  3dup 1+ ftx, rot 1+ -rot ftx,  ;   : stpx,  ( disp rpi rp -- )  3dup 1+ stx, rot 1+ -rot stx,  ;   -->                                                                                                                                                                                                                                                             ( z80-asm, )                                                    CA constant z?  C2 constant nz? DA constant c? D2 constant nc?  EA constant pe? E2 constant po? FA constant m? F2 constant p?   : jp>jr  ( op1 -- op2 )  dup nc? > #-273 ?throw  A2 -  ;        : ?ret,  ( op -- )  2- c,  ;                                    : ?call,  ( a op -- )  2+ c, ,  ;                               : ?jp,  ( a op -- )  c, ,  ;                                    : ?jr,  ( a op -- )  jp>jr (jr,)  ;                             : >rmark  ( -- orig )  here 1-  ;                               : rresolve  ( orig dest -- )  1- over - ?jr-range swap c!  ;    : >rresolve  ( orig -- )  here rresolve  ;                      : <rresolve  ( dest -- )  here 1- swap rresolve  ;              -->                                                                                                                                                                                                                                                             ( z80-asm, )                                                    : inverse-cond  ( op1 -- op2 )  8 xor  ;                        : rahead  ( -- orig  )  18 , >rmark  ;                          : rif  ( op -- orig cs-id )  jp>jr inverse-cond , >rmark 0A  ;  : rthen  ( orig cs-id -- )  0A ?pairs >rresolve  ;              : relse  ( orig cs-id -- cs-id )                                  0A ?pairs 18 rif rot swap rthen 0A  ;                         : rbegin  (  -- dest cs-id )  <mark 0B  ;                       : rwhile  (  op -- orig cs-id )  jp>jr rif 2+  ;                : runtil  (  dest cs-id op -- )  , 0B ?pairs <rresolve  ;       : ragain  (  dest cs-id -- )  18 runtil  ;                      : rrepeat  (  dest cs-id1 orig cs-id2 )                           2swap ragain 2- rthen  ;                                      : rstep    ( dest cs-id -- )  10 runtil  ;  -->                                                                                                                                                 ( z80-asm, )                                                    : aif  (  op -- orig cs-id )  inverse-cond c, >mark 08  ;       : athen  (  orig cs-id -- )  08 ?pairs >resolve  ;              : aelse  (  cs-id -- cs-id )                                      08 ?pairs C3 aif rot swap athen 08  ;                         : abegin  (  -- dest cs-id )  <mark 09  ;                       : awhile  (  op -- orig cs-id )  aif 2+  ;                      : auntil  (  cs-id op -- )  c, 09 ?pairs <resolve  ;            : aagain  (  cs-id -- )  C3 auntil  ;                           : arepeat  (  dest cs-id1 orig cs-id2 )                           2swap aagain 2- athen  ;                                      : >amark  ( -- a )  here 2-  ;                                  : >aresolve  ( a -- )  >amark swap !  ;                         6 cells allocate-string                                         : unresolved  ( n -- a )  cells [ dup ] literal +  ;  drop      base ! set-current previous                                     ( execute-hl, call-xt, )                                        need z80-asm,  need macro                                       macro execute-hl,  ( -- )                                         0000 bc stp,  >amark      \ save the Forth IP                   0000 bc ldp#, >amark      \ point IP to phony_compiled_word     jphl,                     \ execute the xt in HL                >resolve                  \ phony_compiled_word                 here cell+ ,              \ point to the phony xt following     0000 bc ldp#  >aresolve   \ restore the Forth IP                endm                                                          macro call-xt,  ( xt -- )                                         hl ldp#,  execute-hl,                                           endm                                                                                                                                                                                                                                                          ( z80-asm )                                                     get-current forth-wordlist set-current                          need ?pairs  need 3dup  need 8*                                 : z80-asm  ( -- )  assembler  ;                                 also assembler definitions base @ hex                           0 constant b   1 constant c   2 constant d   3 constant e       4 constant h   5 constant l   6 constant m   7 constant a       0 constant bc  2 constant de  4 constant hl                     6 constant sp  6 constant af                                    DD constant ix-op  FD constant iy-op                            : ix  ( -- rphl )  ix-op c, hl  ;                               : iy  ( -- rphl )  iy-op c, hl  ;                               : ?page  ( n -- n )  dup 80 + FF swap u< #-269 ?throw  ;        -->                                                                                                                                                                                             ( z80-asm )                                                     : m1  ( 8b "name" -- )                                            create c, does>  ( -- )  ( pfa ) c@ c,  ;                     : m2  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ + c,  ;               : m3  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ swap 8* + c,  ;       : m4  ( 8b "name" -- )                                            create c, does>  ( 8b -- )  ( 8b pfa ) c@ c, c,  ;            : m5  ( 8b "name" -- )                                            create c, does>  ( 16b -- )  ( 16b pfa ) c@ c, ,  ;           : m6  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) CB c, c@ + c,  ;         : m7  ( 8b "name" -- )                                            create c, does>  ( r bit -- )                                     ( r bit pfa ) CB c, c@ swap 8* + + c,  ;  -->               ( z80-asm )                                                     : m8  ( 16b "name" -- )                                           create , does>  ( -- )  ( pfa ) @ ,  ;                        : m9  ( 8b "name" -- )                                            create c, does>  ( a -- )                                         ( a pfa )  c@ c, here 1+ - ?page c,  ;                      : ma  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) c@ c, drop c,  ;                          : mb  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) CB c, c@ c, drop c,  ;                    : mc  ( 8b "name" -- )                                            create c, does>  ( disp rphl bit -- )                             ( disp rphl bit pfa )                                           CB c, c@ rot drop rot c, swap 8* + c,  ;  -->               ( z80-asm )                                                     00 m1 nop 02 m3 stap 03 m3 incp 04 m3 inc 05 m3 dec 07 m1 rlca  08 m1 exaf 09 m3 addp 0A m3 ftap 0B m3 decp 0F m1 rrca 10 m9    djnz 17 m1 rla 18 m9 jr  1F m1 rra 20 m9 jrnz 22 m5 sthl 27 m1  daa 28 m9 jrz 2A m5 fthl 2F m1 cpl 30 m9 jrnc 32 m5 sta 37 m1   scf 38 m9 jrc 3A m5 fta 3F m1 ccf 76 m1 halt 80 m2 add 88 m2    adc 90 m2 sub 98 m2 sbc B8 m2 cp C1 m3 pop C2 m5 jpnz C3 m5 jp  C5 m3 push C6 m4 add# C7 m2 rst C9 m1 ret CA m5 jpz CD m5 call  CE m4 adc# D2 m5 jpnc D3 m4 out 41 m3 outbc D6 m4 sub# D9 m1    exx DA m5 jpc DB m4 in 40 m3 inbc 0DE m4 sbc# E2 m5 jppo E3 m1  exsp E6 m4 and# E9 m1 jphl EA m5 jppe EB m1 exde EE m4 xor# F2  m5 jpp F3 m1 di  F6 m4 or# F9 m1 ldsp FA m5 jpm FB m1 ei FE m4  cp# 00 m6 rlc 08 m6 rrc 10 m6 rl 18 m6 rr 20 m6 sla  28 m6 sra  38 m6 srl  40 m7 bit 80 m7 res C0 m7 set B0ED m8 ldir B8ED m8   lddr 44ED m8 neg 57ED m8 ldai 47ED m8 ldia 56ED m8 im1 5EED m8  im2 B1ED m8 cpir 6FED m8 rld -->                                ( z80-asm )                                                     : 0outbc  ( -- )  ED c, 71 c,  ;                                : jpix  ( -- )  ix-op c, jphl  ;                                : ldp#  ( 16b rp -- )  8* 1+ c, ,  ;                            : ld#  ( 8b r -- )  8* 06 + c, c,  ;                            : ld  ( r1 r2 -- )  8* 40 + + c,  ;                             : sbcp  ( rp -- )  ED c, 8* 42 + c,  ;                          : adcp  ( rp1 rp2 -- )  ED c, 8* 4A + c,  ;                     : stp  ( a rp -- )  ED c, 8* 43 + c, ,  ;                       : ftp  ( a rp -- )  ED c, 8* 4B + c, ,  ;                       : addix  ( rp -- )  ix-op c, addp  ;                            : addiy  ( rp -- )  iy-op c, addp  ;                            : clr  ( rp -- )  0 swap ldp#  ;                                : ldp  ( rp1 rp2 -- )  2dup ld 1+ swap 1+ swap ld  ;            CF m4 hook       \ rst 0x08                                     D7 m1 prt  -->   \ rst 0x16                                     ( z80-asm )                                                     86 ma addx 8E ma adcx 96 ma subx 9E ma sbcx A6 ma andx          AE ma xorx B6 ma orx  BE ma cpx  34 ma incx 35 ma decx          06 mb rlcx 0E mb rrcx 16 mb rlx  1E mb rrx  26 mb slax          2E mb srax 3E mb srlx 46 mc bitx 86 mc resx C6 mc setx          : ftx   ( disp rpi r -- )   nip 8* 46 + c, c,  ;                : stx   ( r disp rphl -- )  drop swap 70 + c, c,  ;             : st#x  ( 8b disp rpi -- )  drop 36 c, swap c, c,  ;            : ftpx  ( disp rpi rp -- )  3dup 1+ ftx rot 1+ -rot ftx  ;      : stpx  ( disp rpi rp -- )  3dup 1+ stx rot 1+ -rot stx  ;      -->                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm )                                                     20 constant z  28 constant nz  30 constant cy  38 constant nc   C2 constant z'  CA constant nz' D2 constant cy' DA constant nc' E2 constant pe' EA constant po' F2 constant m'  FA constant p'  : ?ret  ( op -- )  8 xor 2- c,  ;                               : retc  ( -- )  cy' ?ret ;    : retnc  ( -- )  nc' ?ret  ;      : retz  ( -- )  z' ?ret ;     : retnz  ( -- )  nz' ?ret  ;      : retm  ( -- )  m' ?ret ;     : retp  ( -- )  p' ?ret  ;        : retpe  ( -- )  pe' ?ret ;   : retpo  ( -- )  po' ?ret  ;      : ?call  ( a op -- )  8 xor 2+ c, ,  ;                          : callc  ( -- )  cy' ?call ;    : callnc  ( -- )  nc' ?call  ;  : callz  ( -- )  z' ?call ;     : callnz  ( -- )  nz' ?call  ;  : callm  ( -- )  m' ?call ;     : callp  ( -- )  p' ?call  ;    : callpe  ( -- )  pe' ?call ;   : callpo ( -- )  po' ?call  ;   -->                                                                                                                             ( z80-asm )                                                     : >relmark  ( -- orig )  here 1-  ;                             : relresolve  ( orig dest -- )  1- over - ?page swap c!  ;      : >relresolve  ( orig -- )  here relresolve  ;                  : <relresolve  ( dest -- )  here 1- swap relresolve  ;          : ahead  ( -- orig  )  18 , >relmark  ;                         : if  ( op -- orig cs-id )  , >relmark 0A  ;                    : then  ( orig cs-id -- )  0A ?pairs >relresolve  ;             : else  ( orig cs-id -- cs-id ) \ XXX TODO document               0A ?pairs 18 if rot swap then 0A  ;                           : begin  (  -- dest cs-id )  <mark 0B  ;                        : while  (  op -- orig cs-id )  if 2+  ;                        : until  (  dest cs-id op -- )  , 0B ?pairs <relresolve  ;      : again  (  dest cs-id -- )  18 until  ;                        : repeat  (  dest cs-id1 orig cs-id2 )  2swap again 2- then  ;  : step    ( dest cs-id -- )  10 until  ;  -->                   ( z80-asm )                                                     : if'  (  op -- orig cs-id )  c, >mark 08  ;                    : then'  (  orig cs-id -- )  08 ?pairs >resolve  ;              : else'  (  cs-id -- cs-id )                                      08 ?pairs C3 if' rot swap then' 08  ;                         : begin'  (  -- dest cs-id )  <mark 09  ;                       : while'  (  op -- orig cs-id )  if' 2+  ;                      : until'  (  cs-id op -- )  c, 09 ?pairs <resolve  ;            : again'  (  cs-id -- )  C3 until'  ;                           : repeat'  (  dest cs-id1 orig cs-id2 )                           2swap again' 2- then'  ;                                      : |mark  ( -- a )  here 2-  ;                                   : |resolve  ( a -- )  |mark swap !  ;                           -->                                                                                                                                                                                             ( z80-asm )                                                     A0 m2 and  B0 m2 or  A8 m2 xor                                  : subp  ( rp -- )  a and sbcp  ;                                : tstp  ( rp -- )  dup a ld 1+ orz80-asm )                                                     6 cells allocate-string                                         : unresolved  ( n -- a )  cells [ dup ] literal +  ;  drop      base ! set-current previousexecute-hl call-xt )                                          need z80-asm  need macro                                        macro execute-hl  ( -- )                                          0000 bc stp  |mark      \ save the Forth IP                     0000 bc ldp# |mark      \ point IP to phony_compiled_word       jphl                    \ execute the xt in HL                  >resolve                \ phony_compiled_word                   here cell+ ,            \ point to the phony xt following       0000 bc ldp#  |resolve  \ restore the Forth IP                  endm                                                          macro call-xt  ( xt -- )                                          hl ldp#  execute-hl                                             endm                                                                                                                                                                                                                                                          ( do-prime )                                                    forth definitions decimal                                       8190 constant size  variable flags  size allot                  : do-prime  ( -- )                                                flags size 1 fill                                               0 size 0                                                        do flags i + c@                                                    if i dup + 3 + dup i +                                               begin   dup size <                                              while   0 over flags + c! over +                                repeat  drop drop 1+                                       then                                                         loop  .  ." primes "  ;                                                                                                                                                                                                                                       ( byte-magazine-benchmark )                                     need bench{                                                     8190 constant size  variable bflags size allot                  : c<- ( a b -- ) swap c!  ;                                     : do-prime  ( -- )                                                bflags size 1 fill  0                                           size 0 do   bflags i + c@ if                                                  i 2* 3 + dup i + bflags +                                       begin   dup size bflags +  u<                                   while   dup 0 c<- over +                                        repeat  drop drop 1+                                          then                                                loop                                                            drop  \ XXX NEW                                                 ;  -->                                                                                                                        ( byte-magazine-benchmark )                                     : byte-magazine-benchmark  ( n -- )                               cr dup u. ." iterations..." cr                                  bench{ 0 ?do  do-prime  loop }bench.  ;                         cr                                                              .( To run the BYTE Magazine) cr                                 .( benchmark type:) cr                                          .(   n byte-magazine-benchmark) cr                              .( where _n_ is the number of) cr                               .( iterations. The original code) cr                            .( used 1000 iterations.) cr                                                                                                                                                                                                                                                                                                                                                                  ( bench{ }bench }bench. bench. benched )                        need reset-frames  need frames@                                 : bench{  ( -- )  reset-frames  ;                               : }bench  ( -- d )  frames@ ;                                   : bench.  ( d -- )                                                2dup d. ." frames (" 50 m/ nip . ." s) "  ;                   : }bench.  ( -- )  frames@ bench.  ;                            : benched  ( xt n -- d )                                          bench{ 0 do  dup execute  loop  }bench rot drop  ;            : benched.  ( xt n -- )                                           bench{ 0 do  dup execute  loop  }bench. drop  ;                                                                                                                                                                                                                                                                                                                                               ( all-benchmarks )                                              need byte-magazine-benchmark                                    need interface-age-benchmark                                    need vector-loop-benchmark                                      : all-benchmarks  ( n1 n2 -- )                                    byte-magazine-benchmark                                         interface-age-benchmark                                         vector-loop-benchmark  ;                                        .( To run all benchmarks type:) cr                              .(   n1 n2 all-benchmarks) cr                                                                                                                                                                                                                                                                                                                                                                                                                                 ( interface-age-benchmark )                                     need bench{  need 2/                                            : (interface-age-benchmark)  ( n -- )                             dup 2/ 1+ swap cr                                               1 ?do                                                             dup i 1 rot 2 do                                                  drop dup 0 i um/mod dup                                         0=  if  drop drop 1 leave  then                                 1 = if    drop 1                                                    else  dup 0= if  drop 0 leave  then                                   0< 0= if  1  then                                         then                                                      loop                                                            2drop  \ XXX NEW                                              loop  drop  ;  -->                                                                                                            ( interface-age-benchmark )                                     : interface-age-benchmark  ( n -- )                               bench{ (interface-age-benchmark) }bench.  ;                     cr                                                              .( To run the interface age) cr                                 .( benchmark type:) cr                                          .(   n interface-age-benchmark  ) cr                            .( where _n_ is the number of) cr                               .( iterations. The original code) cr                            .( used 5000 iterations.) cr                                                                                                                                                                                                                                                                                                                                                                                                                                  ( Interface Age Benchmark program )                             : bench  ( -- )                                                   dup 2 / 1+ swap ." Starting " cr                                1 do dup i 1 rot                                                  2 do drop dup i /mod                                              dup 0= if  drop drop 1 leave                                    else  1 = if drop 1                                                   else  dup 0 > if  drop 1                                              else  0= if  0 leave  then                                      then                                                      then                                                      then                                                          loop                                                            if  4 .r  else  drop  then                                    loop  drop cr ." Finished " ;                                                                                                 ( vector-loop-benchmark )                                       need bench{                                                     1000 constant vsize  \ vector size                              : vector  ( n -- )                                                create  cells allot                                             does>  ( index -- address )  ( index pfa ) swap cells +  ;    vsize vector vec1  vsize vector vec2  vsize vector vec3         : vecload  ( -- )  \ put some stuff into the vectors              0 begin                                                            dup vec1 dup !               \ vec1 gets its own address        dup vec2 dup negate swap !   \ vec2 gets negated address        1+ dup vsize =                                               until  drop  ;                                                -->                                                                                                                                                                                             ( vector-loop-benchmark )                                       : loop0  ( -- )  \ null loop                                      0 begin  1+ dup vsize =  until  drop  ;                       : loop1  ( -- )  \ vector add                                     0 begin                                                            dup vec1 @ over vec2 @ + over vec3 !                            1+ dup vsize =                                               until  drop  ;                                                : loop2 ( -- )  \ vector multiply                                 0 begin                                                            dup vec1 @ over vec2 @ * over vec3 !                            1+ dup vsize =                                               until  drop  ;                                                -->                                                                                                                                                                                             ( vector-loop-benchmark )                                       : loop3 ( -- ) \ vector divide                                    0 begin                                                           dup vec1 @ over vec2 @ / over vec3 !                            1+ dup vsize =                                                until  drop  ;                                                : loop4 ( -- )  \ vector scale                                    0 begin                                                            dup vec1 @ 10000 10000 */ over vec2 !  1+ dup vsize =        until  drop  ;                                                -->                                                                                                                                                                                                                                                                                                                                                                                             ( vector-loop-benchmark )                                       1000 constant reps  \ repetitions                               : bench0  ( -- )  \ benchmark loop0                               bench{ 0 begin  loop0 1+ dup reps =  until  drop }bench.        ." Vector No-Op" cr  ;                                        : bench1 ( -- ) \ benchmark loop1                                 bench{ 0 begin  loop1 1+ dup reps =  until  drop }bench.        ." Vector +    " cr  ;                                        : bench2 ( -- ) \ benchmark loop2                                 bench{ 0 begin  loop2 1+ dup reps =  until  drop }bench.        ." Vector *    " cr  ;                                        -->                                                                                                                                                                                                                                                                                                                             ( vector-loop-benchmark )                                       : bench3 ( -- )  \ benchmark loop3                                bench{ 0 begin  loop3 1+ dup reps =  until  drop }bench.        ." Vector /    " cr  ;                                        : bench4 ( -- ) \ benchmark loop4                                 bench{ 0 begin  loop4 1+ dup reps =  until  drop }bench.        ." Vector */   " cr  ;                                        : vector-loop-benchmarks  ( -- )                                  vecload  cr bench0 bench1 bench2 bench3 bench4  ;               cr                                                              .( To run the vector loop) cr                                   .( benchmarks type:) cr                                         .(   vector-loop-benchmarks ) cr                                                                                                                                                                                                                              ( ?--> update flush thru )                                      [unneeded] ?-->                                                 ?\ : ?-->  ( f -- )  if  postpone -->  then  ; immediate        [unneeded] update                                               ?\ : update  ( -- )  disk-buffer @ $8000 or disk-buffer !  ;    [unneeded] flush                                                ?\ : flush  ( -- )  save-buffers empty-buffers  ;               [unneeded] thru                                                 ?\ : thru  ( block1 block2 -- )  1+ swap ?do  i load  loop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( continued ?load reload loads +load +thru loader )             [unneeded] continued                                            ?\ : continued  ( u -- )  ?loading (load)  ;                    [unneeded] ?load                                                ?\ : ?load  ( block f -- )  if  dup load  then  drop  ;         [unneeded] reload                                               ?\ : reload  ( -- )  empty-buffers  scr @ load  ;               [unneeded] loads                                                ?\ : loads  ( block n -- )  bounds ?do  i load  loop  ;         [unneeded] +load  [unneeded] +thru  and                         ?\ : +load  ( n -- )  blk @ + load  ;                           [unneeded] +thru                                                ?\ : +thru  ( n1 n2 -- )  1+ swap do  i +load  loop  ;          [unneeded] loader ?exit                                         : loader  ( block "name" -- )                                     create ,  does>  ( pfa )  @ load  ;                           ( .line lineblock>source lineload load-app )                    [unneeded] .line                                                ?\ : .line  ( n1 n2 -- )  line>string -trailing type  ;  exit   [unneeded] lineblock>source [unneeded] lineload and             ?\ : lineblock>source  ( n1 n2 -- )  blk !  c/l * >in !  ;      need ?( [unneeded] lineload ?(                                  : lineload  ( n1 n2 -- )                                          dup 0= #-259 ?throw                                             nest-source lineblock>source interpret unnest-source  ; ?)    [unneeded] load-app ?( need locate  variable loading-app        : end-app  ( -- )  loading-app off  ;  end-app                  : load-app  ( "name" -- )                                         loading-app on  locate blk !                                    begin   loading-app @  blk @ blocks <  and  while                       blk @ (load) 1 blk +!                                   repeat  end-app  ; ?)                                         ( indexer )                                                     only forth definitions                                          need str=  need alias  need string/                             need get-order  need set-order  need nextname                   wordlist constant index-wordlist                                : search-index  ( ca len -- 0 | xt 1 | xt -1 )                    index-wordlist search-wordlist  ;                             : name-indexed?  ( ca len -- f )                                  search-index 0<> dup if  nip  then  ;                         variable indexed-block                                          : index-name  ( ca len -- )                                       2dup name-indexed? if  2drop exit  then                         nextname indexed-block @ alias  ;                             wordlist dup constant indexer-wordlist set-current  -->                                                                                                                                         ( indexer )                                                     : (  ( "ccc<space><paren><space|eof>" -- )                        begin  parse-name 2dup s" )" str= 0=                            while  index-name  repeat  2drop  ;  ' ( alias .(             : \  ( "ccc<space><backslash><space|eof>" -- )                    begin  parse-name 2dup s" \" str= 0=                            while  index-name  repeat  2drop  ;                           forth-wordlist set-current                                      : index-reneeded  ( ca len -- )                                   search-index 0= #-277 ?throw load  ;                          : index-reneed  ( "name" -- )  parse-name index-reneeded  ;     : index-needed  ( ca len -- )                                     needed-word 2@ 2>r  new-needed-word  2dup undefined?            if  index-reneeded  else  2drop  then  2r> needed-word 2!  ;  : index-need  ( "name" -- )  parse-name index-needed  ;  -->                                                                    ( indexer )                                                     : set-indexed-need  ( -- )                                        ['] index-reneeded ['] reneeded  defer!                         ['] index-reneed   ['] reneed    defer!                         ['] index-need     ['] need      defer!                         ['] index-needed   ['] needed    defer!  ;                    need evaluate                                                   : index-block  ( +n -- )                                          dup indexed-block ! 0 swap line>string evaluate  ;            : (indexer)  ( -- )  last-locatable @ 1+ first-locatable @                           ?do  i index-block  loop  ;                : indexer  ( -- )                                                 get-current  get-order                                          index-wordlist set-current  indexer-wordlist 1 set-order        ['] (indexer) catch  dup #-278 <> swap ?throw                   set-order set-current  set-indexed-need  ;                    ( ascii-char? control-char? )                                   : ascii-char?    ( c -- f )  128 <  ;                           : control-char?  ( c -- f )  blfalse] [true] [if] [else] [then] )                           [unneeded] [true]  ?\   0 constant [false] immediate exit       [unneeded] [false] ?\  -1 constant [true]  immediate exit       need str=                                                       : [else] ( "ccc" -- )                                             1 begin  begin  parse-name dup while  2dup s" [if]" str=                        if    2drop 1+                                                  else  2dup s" [else]" str=                                            if    2drop 1- dup if  1+  then                                 else  s" [then]" str= if  1-  then                              then                                                      then  ?dup 0= if exit then                               repeat  2drop                                            refill 0= until  drop  ; immediate                          : [if]  ( f "ccc" -- )  0= if postpone [else] then  ; immediate : [then]  ( -- )  ; immediate                                   ( ?( )                                                          need str=                                                       : ?(  ( f "ccc<space><question><paren><space>" -- )               0= ?exit  begin  parse-name dup                                           while  s" ?)" str= ?exit  repeat  ; immediate       : ?)  ( -- )  ; immediatebody>name name>body link>name name>link name<name )           [unneeded] body>name                                            ?\ need body>  : body>name  ( pfa -- nt )  body> >name  ;       [unneeded] name>body                                            ?\ need >body  : name>body  ( nt -- pfa )  name> >body  ;       [unneeded] link>name                                            ?\ need alias  ' cell+ alias link>name  ( nt -- pfa )           [unneeded] name>link                                            ?\ need alias  ' cell- alias name>link  ( nt -- pfa )           [unneeded] name<name                                            ?\ need name>link  : name<name  ( nt1 -- nt2 )  name>link @s  ;                                                                                                                                                                                                                                                                                                                                 ( >>link name>> >>name >body body> '' [''] )                    [unneeded] >>link                                               ?\ need alias  ' cell+ alias >>link  ( xtp -- lfa ) exit        [unneeded] name>>                                               ?\ : name>>  ( nt -- xtp )  [ 2 cells ] literal -  ; exit       [unneeded] >>name                                               ?\ : >>name  ( xtp -- nt )  [ 2 cells ] literal +  ; exit       [unneeded] >body                                                ?\ code >body  E1 c, 23 c, 23 c, 23 c, jppushhl  end-code       [unneeded] body>                                                ?\ code body> E1 c, 2B c, 2B c, 2B c, jppushhl  end-code exit   need ?(                                                         [unneeded] '' ?(  need need-here  need-here name>>              : ''  ( "name" -- xtp )  defined dup ?defined name>>  ; exit ?) [unneeded] [''] ?(  need need-here  need-here ''                : ['']  '' postpone literal  ; immediate compile-only exit ?)   ( name>interpret name>compile comp' [comp'] )                   need ?(                                                         [unneeded] name>interpret ?(                                    : name>interpret  ( nt -- xt | 0 )                                dup name> swap compile-only? 0= and  ;  ?)                    [unneeded] name>compile ?(                                      : (comp')  ( nt -- xt )                                           immediate?  if    ['] execute                                               else  ['] compile,  then  ;                       : name>compile  ( nt -- x xt )  dup name> swap (comp')  ;  ?)   [unneeded] comp' ?(  need need-here  need-here name>compile     : comp'  ( "name" -- x xt )                                       defined dup ?defined name>compile  ;  ?)                      [unneeded] [comp'] ?(  need need-here  need-here comp'          : [comp']  ( Compilation: "name" -- ) ( Run-time: -- x xt )       comp' postpone 2literal  ; immediate compile-only  ?)         ( there ?pairs [compile] smudge smudged )                       [unneeded] there                                                ?\ : there  ( a -- )  dp !  ;  exit                             [unneeded] ?pairs                                               ?\ : ?pairs  ( x1 x2 -- )  <> #-22 ?throw  ;  exit              [unneeded] [compile]                                            ?\ : [compile]  ( "name" -- )  ' compile,  ; immediate  exit    need ?(                                                         [unneeded] smudged ?(  need c!toggle-bits                       : smudged  ( nt -- )                                              smudge-mask swap system-bank c!toggle-bits default-bank  ; ?) [unneeded] smudge ?(  need need-here  need-here smudged         : smudge  ( -- )  latest smudged  ;  ?)                                                                                                                                                                                                                         ( ]l ]2l save-here restore-here )                               need ?(                                                         [unneeded] ]l ?(                                                : ]l  ( x -- )  ] postpone literal  ; immediate compile-only ?) [unneeded] ]2l ?(                                               : ]2l  ( xd -- )  ] postpone 2literal  ; immediate compile-only ?)                                                              [unneeded] save-here [unneeded] restore-here and ?(  need there variable here-backup                                            : save-here  ( -- )  here here-backup !  ;                      : restore-here  ( -- )  here-backup @ there  ;  ?)                                                                                                                                                                                                                                                                                                                                              ( possibly exec eval )                                          need ?(                                                         [unneeded] possibly ?(                                          : possibly  ( "name" -- )                                         defined ?dup if  name> execute  then  ; ?)                    [unneeded] exec ?(                                              : exec  ( "name" -- i*x )                                         defined ?dup 0= #-13 ?throw  name> execute  ; ?)              [unneeded] eval ?(  need evaluate                               : eval  ( i*x "name" -- j*x )  parse-name evaluate  ; ?)        [unneeded] cliteral ?(                                          : cliteral  ( b -- )                                              compile clit c,  ; immediate compile-only ?)                                                                                                                                                                                                                  ( [const] [2const] [cconst] )                                   need ?(                                                         [unneeded] [const] ?(  need eval                                : [const]  ( "name" -- )                                          eval postpone literal  ; immediate compile-only  ?)           [unneeded] [2const] ?(  need eval                               : [2const]  ( "name" -- )                                         eval postpone 2literal  ; immediate compile-only  ?)          [unneeded] [cconst] ?(  need eval                               : [cconst]  ( "name" -- )                                         eval postpone cliteral  ; immediate compile-only  ?)                                                                                                                                                                                                                                                                                                                                          ( warnings )                                                    need user  need search-wordlist                                 user warnings  \ flag                                           : no-warnings?  ( -- f )  warnings @ 0=  ;                      : not-redefined?  ( ca len -- ca len xt false | ca len true )     2dup get-current search-wordlist 0=  ;                        : ?warn  ( ca len -- ca len | ca len xt )                           no-warnings? if  unnest exit  ( ca len )  then                not-redefined? if  unnest                   then                ( ca len | ca len xt )  ;                                                                                                                                                                                                                                                                                                                                                                                                                                     ( warn.throw warn.message warn-throw )                          need warnings  need ?(                                          [unneeded] warn.throw ?(                                        : warn.throw  ( ca len -- ca len )                                ?warn ( ca len xt )  drop 2drop .error-word  #-257 .throw  ;  ' warn.throw ' warn defer!  warnings on  ?)                     [unneeded] warn.message ?(                                      : warn.message  ( ca len -- ca len )                              ?warn ( ca len xt )  ." redefined " >name .name  ;            ' warn.message ' warn defer!  warnings on  ?)                   [unneeded] warn-throw ?(                                        : warn-throw  ( ca len -- ca len )                                ?warn ( ca len xt )  #-257 throw  ;                           ' warn-throw ' warn defer!  warnings on  ?)                                                                                                                                                     ( string-parameter )                                            : string-parameter  ( -- ca len )                                 rp@ cell+ dup >r    ( a1 ) ( R: a1 )                            @ count             ( ca len ) ( R: a1 )                        dup char+ r@ @ +    ( ca len a2 ) ( R: a1 )                     r> !  ;                                                       : string-parameter2  ( -- ca len )                                rp@ cell+ dup >r    ( a1 ) ( R: a1 )                            dup @ count         ( a1 ca len ) ( R: a1 )                     dup char+ rot +    ( ca len a2 ) ( R: a1 )                      r> !  ;                                                       : string-parameter3  ( -- ca len )                                rp@ cell+ dup       ( a1 )                                      dup @ count         ( a1 ca len )                               rot dup >r over char+ over +    ( ca len a2 )                   r> !  ;                                                       ( 1array 2array )                                               need ?(  [defined] 1array ?(  need <=                           : 1array ( n1 n2 "name" -- )                                      create 2dup , , * allot  ;                                    : array>items ( a -- n )  cell+ @ ;                             : } ( a1 n -- a2 )                                                over array>items over <= over 0< or #-272 ?throw                over @ * + cell+ cell+  ;  ?)                                 [needed] 1array ?exit                                           : 2array ( n1 n2 n3 "name" -- )                                   create >r tuck , ( n2 n1 )  r@ , * dup , r> * allot  ;        : }} ( a1 n1 n2 -- a2 ) \ data stored row-wise                    2>r cell+ dup cell- @  r> * r> + }  ;                                                                                                                                                                                                                         ( array ato )                                                   need within  need >body                                         : array>  ( n 'array -- a )                                       2dup @ 0 swap within 0= #-272 ?throw                            cell+ swap cells +  ;                                         : array  ( n "name" -- )                                          create dup , cells allot                                        does> ( n -- x ) ( n pfa ) array> @  ;                        : (ato)  ( x n array -- )  >body array> !  ;                    : ato  ( x n "name" -- )                                          compiling?  if    postpone ['] postpone (ato)                               else  ' (ato)  then ; immediate                   : (+ato)  ( x n array -- )  >body array> +!  ;                  : +ato  ( n "name" -- )                                           compiling? if    postpone ['] postpone (+ato)                              else  ' (+ato)  then  ; immediate                  ( associative: )                                                : associative:  ( n "name" -- )                                   constant                                                        does>  ( x -- index )                                             ( x pfa )                                                       dup @ ( x pfa n ) -rot dup @ 0 ( n x pfa n 0 )                  do ( n x pfa )                                                    cell+ 2dup @ = ( n x pfa' flag )                                if  2drop drop i unloop exit  then                            loop 2drop ( n )  ;                                                                                                                                                                                                                                                                                                                                                                                                                                         ( associative-list item? item create-entry )                    : associative-list  ( "name" -- )  wordlist constant  ;         : item?  ( ca len wid -- false | xt true )                        search-wordlist 0<> ;                                         : item  ( ca len wid -- i*x )                                     item? 0= #-13 ?throw execute  ;                               : create-entry  ( i*x wid xt "name" -- )                          get-current >r swap set-current                                 create execute                                                  r> set-current  ;                                             -->                                                                                                                                                                                                                                                                                                                                                                                             ( entry char-entry double-entry string-entry )                  : entry  ( x wid "name" -- )                                      ['] , create-entry does>  ( -- x )  ( pfa ) @  ;              : char-entry  ( c wid "name" -- )                                 ['] c, create-entry does>  ( -- c )  ( pfa ) c@  ;            : double-entry  ( dx wid "name" -- )                              ['] 2, create-entry does>  ( -- dx )  ( pfa ) 2@  ;           : string-entry  ( ca len wid "name" -- )                          ['] s, create-entry does>  ( -- ca len )  ( pfa ) count  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( items )                                                       need alias  need wordlist-words                                 ' wordlist-words alias items  ( widassociative-list-demo )                                       need associative-list need items                                associative-list stuff                                          1887          stuff entry year                                  char E        stuff char-entry letter                           s" Saluton"   stuff string-entry hello                          314159.       stuff double-entry pi                             cr .( Keys:) cr stuff items cr                                  cr .( Values: ) cr                                              s" year"    stuff item . cr                                     s" letter"  stuff item emit cr                                  s" hello"   stuff item type cr                                  s" pi"      stuff item d. cr                                                                                                                                                                                                                                    ( begin-stringtable end-stringtable )                           : begin-stringtable  ( "name" -- stringtable-sys )                create  here ( a1 ) cell allot here  ( a1 a2 )                  does> ( n -- ca len )                                             ( n pfa )  @ swap cells + @ count  ;                        : end-stringtable  ( stringtable-sys -- )                         ( a1 a2 )                                                       here rot !   \ set the index                                    here swap  ( a3 a2 )                                            begin  2dup <>  while                                             dup ,   \ store the start of the string in the index            count chars +  \ move to the next string                      repeat  2drop  ;                                                                                                                                                                                                                                              ( begin-structure +field field: 2field: cfield: )               : begin-structure  ( "name" -- struct-sys 0 )                     create  >mark 0                                                 does>   ( -- n )  ( pfa ) @   ;                               : +field  ( n1 n2 "name" -- n3 )                                  create  over , +                                                does>   ( a -- a' )  ( a pfa ) @ +  ;                         : field:    ( n1 "name" -- n2 )  cell +field  ;                 : 2field:   ( n1 "name" -- n2 )  [ 2 cells ] literal +field  ;  : cfield:   ( n1 "name" -- n2 )  [ 1 chars ] literal +field  ;  : end-structure  ( struct-sys n -- )  swap !  ;                                                                                                                                                                                                                                                                                                                                                 ( buffer: cvariable enum link@ link, )                          [unneeded] buffer:                                              ?\ : buffer:  ( u "name" -- )  create allot  ;  exit            [unneeded] cvariable                                            ?\ : cvariable  ( "name"  -- )  create 1 allot  ;  exit         [unneeded] enum                                                 ?\ : enum  (  n "name" -- n+1 )  dup constant 1+  ;  exit       [unneeded] link@  [unneeded] link, and ?exit                    defer link@  ( node1 -- node2 )  ' @ ' link@ defer!             : link,  ( node -- )  here over @ , swap !  ;                                                                                                                                                                                                                                                                                                                                                                                                                   ( storer cstorer 2storer )                                      need ?(                                                         [unneeded] storer ?(                                            : storer  ( x a "name" -- )                                       create  2,  does>   ( -- ) ( pfa )  2@ !  ; ?)                [unneeded] cstorer ?(                                           : cstorer  ( c ca "name" -- )                                     create  2,  does>   ( -- ) ( pfa )  2@ c!  ; ?)               [unneeded] 2storer ?(                                           : 2storer  ( xd a "name" -- )                                     create  , 2,                                                    does>   ( -- ) ( pfa )  dup cell+ 2@ rot @ 2!  ; ?)                                                                                                                                                                                                                                                                           ( !> 2!> c!> )                                                  need ?(  need >body                                             [unneeded] !> ?(                                                : !>  ( Int: x "name" -- ) ( Comp: "name" -- ) ( Exe: x -- )      ' >body compiling? if    postpone literal postpone ! exit                          then  !  ; immediate ?)                    [unneeded] 2!> ?(                                               : 2!>  ( Int: xd "name" -- ) ( Comp: "name" -- ) ( Exe: xd -- )   ' >body compiling? if    postpone literal postpone 2! exit                         then  2!  ; immediate ?)                   [unneeded] c!> ?(                                               : c!>  ( Int: c "name" -- ) ( Comp: "name" --) ( Exe: c -- )      ' >body compiling? if    postpone literal postpone c! exit                         then  c!  ; immediate ?)                                                                                                                                                   ( ?user uallot ucreate user 2user )                             : ?user  ( -- )                                                   udp @ dup /user > #-279 ?throw  \ user area overflow?                     0< #-280 ?throw  ;    \ user area underflow?        : uallot  ( n -- )  udp +! ?user  ;                             : ucreate  ( "name" -- )  udp @ (user)  ;                       : user  ( "name" -- )  ucreate cell uallot  ;                   : 2user  ( "name" -- )  ucreate [ 2 cells ] literal uallotval 2val )                                                    need ?(                                                         [unneeded] val ?(                                               variable (val)                                                  : init-val  ( -- )   ['] @ (val) !  ;  init-val                 : val  ( x "name" -- )                                            create ,  does>  ( -- ) ( pfa ) (val) perform  init-val  ;    : toval    ( -- )  ['] ! (val) !  ;  ?)                         [unneeded] 2val ?(                                              variable (2val)                                                 : init-2val  ( -- )   ['] 2@ (2val) !  ;  init-2val             : 2val  ( xd "name" -- )                                          create 2,  does>  ( -- ) ( pfa ) (2val) perform  init-2val  ; : 2toval    ( -- )  ['] 2! (2val) !  ;  ?)                                                                                                                                                      ( value to 2value 2to cvalue cto )                              need alias  need ?(                                             [unneeded] value [unneeded] to and ?(                           ' constant alias value  ( x "name"  -- )                        need !>  ' !> alias to immediate ?)                             [unneeded] 2value [unneeded] 2to and ?(                         ' 2constant alias 2value  ( xd "name"  -- )                     need 2!>  ' 2!> alias 2to immediate ?)                          [unneeded] cvalue [unneeded] cto and ?(                         need cconstant ' cconstant alias cvalue  ( c "name"  -- )       need c!>  ' c!> alias cto immediate ?)                                                                                                                                                                                                                                                                                                                                                          ( value 2value to )                                             need >body                                                      : value  ( n "name"  -- )  create  0 c, ,  does> 1+ @  ;        : 2value  ( n "name"  -- )  create  1 c, 2,  does> 1+ 2@  ;     : to  ( Int: i*x "name" -- ( Comp: "name" -- ( Exe: i*x -- )      ' >body dup 1+ swap c@                                          compiling? if  swap postpone literal                                           if  postpone 2!  else  postpone !  then  exit               then                                                 if  2!  else  !  then                                           ; immediate                                                                                                                                                                                                                                                                                                                                                                                   ( xsize xp xp0 xp@ xp! xp+! xclear set-xstack )                 need value                                                      0 value xsize  0 value xp  0 value xp0                          : xp@  ( -- a )  xp @  ;                                        : xp!  ( a -- )  xp !  ;                                        : xp+!  ( n -- )  xp +!  ;                                      : xclear  ( -- )  xp0 xp!  ;                                    : set-xstack  ( a -- )                                            dup @ to xp0  cell+ dup to xp  cell+ @ to xsize  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( allocate-xstack xfree )                                       need allocate  need free                                        need set-xstack  need xp0                                       : allocate-xstack  ( n "name" -- )                                create  cells dup allocate throw  cell - dup                      , , ,                                                         does> ( -- ) ( pfa ) set-xstack  ;                            : xfree  ( -- )  xp0 free throwallot-xstack )                                                need set-xstack                                                 : allot-xstack  ( n "name" -- )                                   create  cells dup here [ 2 cells ] literal + dup                  , , , allot                                                   does> ( -- )  ( pfa ) set-xstackx x@ xdrop x> xdup xpick )                                   : >x  ( x -- ) ( X: -- x )  cell xp+!  xp@ !   ;                : x@  ( -- x ) ( X: x -- x )  xp@ @  ;                          : xdrop  ( X: x -- )  [ cell negate ] literal xp+!  ;           : x>  ( -- x ) ( X: x -- )  x@ xdrop  ;                         : xdup  ( X: x -- x x )  x@ >x  ;                               : xpick  ( n -- x'n ) ( X: x'n ... x'0 -- x'n ... x'0 )           xp@ swap cells - @  ;                                         : xover  ( X: x1 x2 -- x1 x2 x1 )  1 xpick >x  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( 2x@ 2>x 2x> 2xdrop 2xdup )                                    need x@  need >x  need xpick  need xover                        : 2x@  ( -- x1 x2 ) ( X: x1 x2 -- x1 x2 )  x@ 1 xpick swap  ;   : 2>x  ( x1 x2 -- ) ( X: -- x1 x2 )  swap >x >x  ;              : 2x>  ( -- x1 x2 ) ( X: x1 x2 -- )  x> x> swap  ;              : 2xdrop  ( X: x1 x2 -- )  [ -2 cells ] literal xp+!  ;         : 2xdup  ( X: x1 x2 -- x1 x2 x1 x2 )  xover xoverxlen xdepth xdepth. .x )                                      : xlen  ( -- n )  xp@ xp0 -  ;                                  : xdepth  ( -- n )  xlen cell /  ;                              : xdepth.  ( n -- )  ." <"  s>d <# #s #> type  ." > "  ;        : (.x)  ( -- )  xp0 cell+ xlen bounds ?do  i @ . cell +loop  ;  : .x  ( -- )  xdepth dup xdepth. if  (.x)  thennip pick roll )                                              need [if]                                                       [needed] 2nip [if]  code 2nip  ( x1 x2 x3 x4 -- x3 x4 )           E1 c, D1 c, F1 c, F1 c, C3 c, pushhlde ,  end-code  [then]    [needed] pick [if]                                              code pick  ( xu .. x1 x0 u -- xu .. x1 x0 xu )                    E1 c,  29 c,  39 c,  C3 c, fetchhl ,  end-code  [then]        [needed] pick [if]  need z80-asm                                code roll  ( xu xn .. x0 u -- xn .. x0 xu )                       hl pop  hl addp  hl de ldp  sp addp                             bc push  m c ld  hl incp  m b ld                                bc push  de bc ldp  hl de ldp  bc tstp                          0000 jpz |mark 0 unresolved !   hl decp  hl decp  lddr          0 unresolved @ >resolve  hl pop  bc pop  exsp                   jpnext  end-code                                              [then]                                                          ( 3drop 4drop 3dup )                                            need [if]                                                       [needed] 3drop [if]                                             code 3drop  ( x1 x2 x3 -- )                                       E1 c,  E1 c,  E1 c,  jpnext  end-code  [then]                 [needed] 4drop [if]                                             code 4drop  ( x1 x2 x3 x4 -- )                                    E1 c,  E1 c,  E1 c,  E1 c,  jpnext  end-code  [then]          [needed] 3dup [if]                                              code 3dup  ( x1 x2 x3 -- x1 x2 x3 x1 x2 x3 )                      D9 c,                                                           C1 c,  D1 c,  E1 c,  E5 c,  D5 c,  C5 c,  E5 c,  D5 c,  C5 c,   D9 c,  jpnext  end-code  [then]                                                                                                                                                                                                                               ( 2rot swapped )                                                need [if]                                                       [needed] 2rot [if]                                              need roll                                                       : 2rot  ( x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2 )                5 roll 5 roll  ;                                              [then]                                                          [needed] swapped [if]                                           : swapped  ( i*x n1 n2 -- j*x )                                   >r 1+ cells sp@ +     ( i*x a1 ) ( R: n2 )                      r> 2+ cells sp@ +     ( i*x a1 a2 )                             over @ over @         ( i*x a1 a2 x1 x2 )                       >r swap !  r> swap !  ;                                       [then]                                                                                                                                                                                          ( nup drup dip 0dup -dup )                                      need [if]                                                       [needed] nup [if]  code nup  ( x1 x2 -- x1 x1 x2 )                E1 c,  D1 c,  D5 c,  C3 c, pushhlde ,  end-code  [then]       [needed] drup [if]  code drup  ( x1 x2 -- x1 x1 )                 D1 c,  E1 c,  E5 c,  E5 c,  jpnext  end-code  [then]          [needed] dip [if]  code dip  ( x1 x2 -- x2 x2 )                   E1 c, D1 c, E5 c, E5 c,  jpnext  end-code  [then]             [needed] 0dup [if]  code 0dup  ( x -- x | 0 0 )                   E1 c,  78 04 + c,  B0 05 + c,                                   C2 c, pushhl ,  E5 c,  jppushhl  end-code  [then]             [needed] -dup [if]  code -dup  ( x -- x | 0 0 )                   E1 c,  CB c, 7C c,  C2 c, pushhl ,  E5 c,  jppushhl  end-code   [then]                                                                                                                                                                                        ( ndrop 2ndrop )                                                need [if]  need z80-asm                                         [needed] ndrop [if]                                             code ndrop  ( x1..xn n -- )                                       hl pop  hl addp  exde  \ DE = n cells                           0 hl ldp#  sp addp  \ HL = stack pointer                        de addp  ldsp  \ update SP                                      jpnext  end-code                                              [then]                                                          [needed] 2ndrop [if]                                            code 2ndrop  ( dx1..dxn n -- )                                    hl pop  hl addp  hl addp  exde  \ DE = n cells                  0 hl ldp#  sp addp  \ HL = stack pointer                        de addp  ldsp  \ update SP                                      jpnext  end-code                                              [then]                                                          ( alias! alias realias )                                        need name>>                                                     [defined] alias! [defined] far-banks or                         ?\ need !s : alias!  ( xt nt -- )  name>> !s  ;                 [defined] alias! [undefined] far-banks or                       ?\ : alias!  ( xt nt -- )  name>> far!  ;                       [unneeded] alias                                                ?\ : alias  ( xt "name" -- )  header reveal latest alias!  ;    [unneeded] realias ?exit                                        : realias  ( xt "name" -- )                                       defined dup 0= #-13 ?throw alias!  ;                                                                                                                                                                                                                                                                                                                                                          ( :noname )                                                     : :noname  ( -- xt )                                              here  dup lastxt !  last off  !csp                              docolon code-field,                                             noname? ondeferred defers defer@ action-of )                            [unneeded] deferred                                             ?\ : deferred  ( xt "name" -- )  defer latest name> defer!  ;   [unneeded] defers                                               ?\ : defers  ( "name" -- )  ' defer@ compile,  ; immediate      [unneeded] defer@ ?\ : defer@  ( xt1 -- xt2 )  >defer @  ;      [unneeded] deferred? ?\ : deferred?  ( xt -- f )  c@ $C3 =  ;   [unneeded] action-of ?exit                                      : action-of  ( Interpretation: "name" -- xt )                                ( Compilation:    "name" -- )                                   ( Runtime:        -- xt )                            ' compiling? if    postpone literal postpone defer@                          else  defer@  then  ; immediate                                                                                                                                                                                                                  ( <is> [is] is  )                                               [needed] [is]                                                   ?\ : <is>  ( xt "name" -- )  ' defer!  ;  [needed] <is> ?exit   : [is]  ( xt "name" -- )                                          postpone ['] postpone defer!  ; immediate compile-only        [needed] [is] ?exit                                             : is  ( xt "name" -- )                                            compiling? if  postpone [is]  else  <is>  then  ; immediatenextname )                                                    2variable nextname-string                                       : nextname-header  ( -- )                                         nextname-string 2@ header, default-header  ;                  : nextname  ( ca len -- )                                         nextname-string 2!                                              ['] nextname-header ['] header defercode )                                                       : ;code  ( -- )                                                   postpone (;code)  finish-code  ; immediate compile-onlysynonym )                                                     need alias  need nextname                                       : synonym  ( "newname" "oldname" -- )                             parse-name nextname ' dup >r alias                              r> >name dup immediate?     if  immediate     then                           compile-only?  if  compile-only  thenplusd-in plusd-out )                                          need z80-asm  need --hook-codes--                               code plusd-in  ( -- )                                             patch hook                                                      jpnext                                                          end-code                                                      code plusd-out  ( -- )                                            D3 c, #231 c,     \ out (231),a                                 jpnext                                                          end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( plusd-in plusd-out )                                          code plusd-in  ( -- )                                             DB c, #231 c,     \ in a,(231)                                  jpnext                                                          end-code                                                      code plusd-out  ( -- )                                            D3 c, #231 c,     \ out (231),a                                 jpnext                                                          end-codeplusd-in, plusd-out, )                                        need macro                                                      macro plusd-in,  ( -- )                                           DB c, #231 c,     \ in a,(231)                                  endm                                                          macro plusd-out,  ( -- )                                          D3 c, #231 c,     \ out (231),a                                 endmufia )                                                        24 constant /ufia  create ufia  /ufia allot  ufia /ufia erase   ufia      constant dstr1   \ drive: 1 or 2                      ufia 1+   constant fstr1   \ program number                     ufia 2+   constant sstr1   \ stream number                      ufia 3 +  constant device  \ device: "D" or "d"                 ufia 4 +  constant nstr1   \ directory description              ufia 5 +  constant nstr2   \ file name                          ufia 15 + constant hd00    \ file type                          ufia 16 + constant hd0b    \ file length                        ufia 18 + constant hd0d    \ file start address                 'd' device c! \ "d" or "D"                                      2 sstr1 c!  \ stream 2                                          1 dstr1 c!  \ drive 1                                           variable file-length   \ copy of `hd0b` used by `(<file)`       variable file-address  \ copy of `hd0d` used by `(<file)`       ( --file-types-- )                                              0 constant basic-filetype                                       1 constant data-array-filetype                                  2 constant string-array-filetype                                3 constant code-filetype                                        : --file-typesdirectory-descriptions-- )                                  01 constant basic-file-dir      02 constant data-array-dir      03 constant string-array-dir    04 constant code-file-dir       05 constant snapshot-48k-dir    06 constant microdrive-file-dir 07 constant screens$-file-dir   08 constant special-file-dir    09 constant snapshot-128k-dir   10 constant opentype-file-dir   11 constant execute-file-dir                                    : --directory-descriptionshook-codes-- )                                              $33 constant hxfer  $34 constant ofsm  $35 constant hofile      $36 constant sbyte  $37 constant hsvbk $38 constant cfsm        $39 constant pntp   $3A constant cops  $3B constant hgfile      $3C constant lbyte  $3D constant hldbk $3E constant wsad        $3F constant sad    $40 constant rest  $41 constant heraz       $42 constant cops2  $43 constant pcat  $44 constant hrsad       $45 constant hwsad  $46 constant otfoc $47 constant patch       : --hook-codesget-drive set-drive )                                         need z80-asm  need --hook-codes--                               code get-drive  ( -- n )                                          bc push  \ save the Forth IP                                    patch hook                                                      3ACE fta  \ XXX NEW                                             E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp  end-code                                            code set-drive  ( n -- )                                          hl pop                                                          bc push  \ save the Forth IP                                    l a ld  21 hook   \ select drive in a                           bc pop   next ix ldp#  \ restore the Forth registers            jpnext  end-code                                                                                                              ( delete-file )                                                 need z80-asm  need ufia  need --hook-codes--                    need filename>ufia                                              code (delete-file)  ( -- ior )                                    bc push  \ save the Forth registers                             ufia ix ldp#                                                    heraz hook  \ erase the file                                    bc pop  next ix ldp#  \ restore the Forth registers             af push                                                         jpnext                                                          end-code                                                      : delete-file  ( ca len -- ior )                                  filename>ufia (delete-file) dosior>ior  ;                                                                                                                                                                                                                     ( -filename filename! >ufia filename>ufia )                     need ufia  need get-drive                                       10 constant /filename  \ max filename length                    : -filename  ( -- )  nstr2 /filename blank  ;                   : filename!  ( ca len -- )                                        -filename /filename min nstr2 swap cmove  ;                   : >ufia  ( ca1 len1 ca2 len2 -- )                                 3 hd00 c!  4 nstr1 c!  \ code filetype and dir description      filename!                                                       dup hd0b !  file-length !                                       dup hd0d !  file-address !                                      get-drive dstr1 c!  ;                                         1 set-drive  \ default                                          : filename>ufia  ( ca len -- )  0 0 2swap >ufia  ;                                                                                                                                              ( >file )                                                       need z80-asm  need ufia  need --hook-codes--  need >ufia        code (>file)  ( -- ior )                                          bc push  \ save the Forth registers                             ufia ix ldp#                                                    hofile hook \ open the file and create its header               nc if \ no error?                                                 hd0d de ftp  hd0b bc ftp  \ de=start, bc=length                 hsvbk hook \ save to file                                       nc if  cfsm hook  then  \ close the file if no error          then  bc pop  next ix ldp#  \ restore the Forth registers       af push  \ ior                                                  jpnext end-code                                               : >file  ( ca1 len1 ca2 len2 -- ior )                             >ufia (>file) dosior>ior  ;                                                                                                   ( <file )                                                       need z80-asm  need ufia  need --hook-codes--  need >ufia        code (<file)  ( -- ior )                                          bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       hd00 de ldp#  9 b ld# \ destination and count                   begin  lbyte hook  de stap  de incp  step                       file-address de ftp  file-length bc ftp                         bc tstp z if  hd0b bc ftp  then  hldbk hook                   then  bc pop  next ix ldp#  af push                             jpnext  end-code                                              : <file  ( a1 len1 ca2 len2 -- ior )                              >ufia (<file) dosior>ior  ;                                                                                                                                                                   ( file>screen )                                                 need z80-asm  need ufia  need --hook-codes--  need >ufia        code (file>screen)  ( -- dosior )                                 bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       patch hook  4000 de ldp#  128 bc ldp#                           d h ld                                                          begin   lbyte hook  de stap                                             a l ld  de push  bc push  1744 call  bc pop  de pop             de incp  bc decp  b a ld  c or                          z until  E7 out  \ page +D out                                then  bc pop  next ix ldp#  af push                             jpnext  end-code -->                                                                                                                                                                          ( file>screen )                                                 : file>screen  ( ca len -- ior )                                  >ufia (file>screen) dosior>iorcode .100  ( u -- )                                               hl pop                                                          bc push                                                         hl push                                                         patch hook                                                      hl pop                                                          1744 call                                                       E7 out  \ page +D out                                           bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                                                                                                                                                                                                                      ( <file-as-is )                                                 need z80-asm  need ufia  need --hook-codes--  need >ufia        code (<file-as-is)  ( -- ior )                                    bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       hd00 de ldp#  9 b ld# \ destination and count                   begin  lbyte hook  de stap  de incp  step                       hd0d de ftp  hd0b bc ftp  hldbk hook                          then  bc pop  next ix ldp#  af push                             jpnext  end-code                                              : <file-as-is  ( ca len -- ior )                                  0 0 2swap >ufia (<file-as-is) dosior>ior  ;                                                                                                                                                                                                                   ( file? )                                                       need ufia  need filename!  need --hook-codes--                  code (file?)  ( -- f )                                            bc push  \ save the Forth IP                                    patch hook                                                      nstr2 ix ldp#                                                   1146 call  \ FIND_FILE                                          168E call  \ BORD_REST = restore the border                     E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             ' true jpz                                                      ' false jp                                                      end-code                                                      : file?  ( ca len -- f )  filename! (file?)  ;                                                                                                                                                  ( cat acat wcat wacat )                                         need z80-asm  need ufia  need --hook-codes--                    need filename>ufia                                              [defined] ufia1  ?\ $3E01 constant ufia1                        code (cat)  ( n -- )                                              hl pop  bc push  exx                                            patch hook                                                      ufia hl ldp#  ufia1 de ldp#  /ufia bc ldp#  ldir                exx  l a ld  09A5 call  168E call                               E7 out  bc pop  next ix ldp#                                    jpnext  end-code                                              : wcat  ( ca len -- )  filename>ufia  4 (cat)  ;                : wacat  ( ca len -- )  filename>ufia  2 (cat)  ;  decimal      : cat  ( -- )  s" *" wcat  ;                                    : acat  ( -- )  s" *" wacat ;  decimal                                                                                          ( @dos )                                                        need z80-asm  need --hook-codes--                               code @dos  ( a -- n )                                             hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop m e ld  hl incp  m d ld                                  E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             de push                                                         jpnext                                                          end-code                                                                                                                                                                                                                                                      ( c@dos )                                                       need z80-asm  need --hook-codes--                               code c@dos  ( a -- b )                                            hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop                                                          m a ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp                                                        end-code                                                                                                                                                                                                                                                      ( c!dos )                                                       need z80-asm  need --hook-codes--                               code c!dos  ( b a -- )                                            hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push hl push                                                 patch hook                                                      hl pop  de pop  e m ld                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                                                                                                                                                      ( !dos )                                                        need z80-asm  need --hook-codes--                               code !dos  ( n a -- )                                             hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push  hl push                                                patch hook                                                      hl pop  de pop  e m ld  hl incp  d m ld                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                                                                                                                                                      ( @dosvar )                                                     need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code @dosvar  ( n1 -- n2 )                                        hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop  dos-vars de ldp#  de addp                               m e ld  hl incp  m d ld                                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             de push                                                         jpnext                                                          end-code                                                                                                                      ( c@dosvar )                                                    need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code c@dosvar  ( n -- b )                                         hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop  dos-vars de ldp#  de addp                               m a ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp                                                        end-code                                                                                                                                                                                      ( !dosvar )                                                     need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code !dosvar  ( n1 n2 -- )                                        hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push  hl push                                                patch hook                                                      hl pop  dos-vars de ldp#  de addp  de pop                       e m ld  hl incp  d m ld                                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                      ( c!dosvar )                                                    need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code c!dosvar  ( b n -- )                                         hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push hl push                                                 patch hook                                                      hl pop  dos-vars de ldp#  de addp  de pop                       e m ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                      ( editor )                                                      only forth definitions  need list  need update  need flush                              need parse-all need vocabulary          vocabulary editor  also editor definitions  hex                 : text  ( "ccc<eol>" -- )                                         pad c/l 1+ blank  parse-all  pad place  ;                     : line  ( n -- a )                                                dup FFF0 and #-266 ?throw scr @ line>string drop  ;           variable r#                                                     : #locate  ( -- n1 n2 )  r# @ c/l /mod  ;                       : #lead  ( -- a n )  #locate line swap  ;                       : #lag  ( -- a n )  #lead dup >r + c/l r> -  ;                  : -move  ( a n -- )  line c/l cmove update  ;                   : e  ( n -- )  line c/l blank update  ;                         : s  ( n -- )  dup 1 - 0E do i line i 1+ -move -1 +loop e  ;    : h  ( n -- )  line pad 1+ c/l dup pad c! cmove  ;  -->         ( editor )                                                      : d  ( n -- )  dup h 0F dup rot do i 1+ line i -move loop e  ;  : m  ( n -- )  r# +! cr space #lead type '_' emit                              #lag type #locate . drop  ;                      : t  ( n -- )  dup c/l * r# ! dup h 0 m  ;                      : l  ( n -- )  scr @ list 0 m  ;                                : r  ( n -- )  pad 1+ swap -move  ;                             : p  ( n "ccc<eol>"  -- )  text r  ;                            : i  ( n -- )  dup s r  ;                                       : top  ( -- )  0 r# !  ;                                        : clear  ( n -- )                                                 scr !  10 0 do [ also forth ] i [ previous ] e loop  ;  -->                                                                                                                                                                                                                                                                   ( editor )                                                      : -text  ( a1 len1 a2 -- f )                                      swap ?dup if  over + swap do                                                    dup c@ [ also forth ] i [ previous ] c@ -                       if  0= leave  else 1+  then                                   loop  else  drop 0=  then  ;                    : match  ( a1 len1 a2 len2 -- true n3 | false n4 )                >r >r 2dup r> r> 2swap over + swap [ also forth ]               do 2dup i -text                                                    if  >r 2drop r> - i swap - 0 swap 0 0 leave  then            loop  [ previous ]  2drop swap 0= swap ;                      : 1line  ( -- f )  #lag pad count match r# +!  ;                : find  ( -- )                                                    begin  03FF r# @ <                                                if  top pad here c/l 1+ cmove #-270 throw  then  1line        until  ;  -->                                                 ( editor )                                                      : delete  ( n -- )  >r #lag + r@ - #lag r@ negate r# +! #lead +                     swap cmove  r> blank  ;                     : n  ( -- )  find 0 m  ;                                        : f  ( "ccc<eol>" -- )  text n  ;                               : b  ( -- )  pad c@ negate m  ;                                 : x  ( "ccc<eol>" -- )  text find pad c@ delete 0 m  ;          : till  ( "ccc<eol>" -- )  #lead + text 1line 0= #-270 ?throw                              #lead + swap - delete 0 m  ;         : (c)  ( ca len -- )                                              #lag rot over min >r r@ r# +! r@ - >r dup here r@ cmove         here #lead + r> cmove r> cmove 0 m  update  ;                 : c  ( "ccc<eol>" -- )                                            text pad count dup if  (c)  else  2drop  then  ;              : copy  ( n1 n2 -- )  swap block cell- ! update save-buffers  ; only forth definitions decimal                                  ( environment? )                                                wordlist constant environment-wordlist ( -- wid )               : environment? ( ca len -- false | i*x true )                     environment-wordlist search-wordlist                            if  execute true  else  false  then  ;                        get-current  environment-wordlist dup >order set-current        8 constant address-unit-bits ( -- n )                           255 constant max-char ( -- u )                                  255 constant /counted-string ( -- n )                           address-unit-bits cells 2* 2+ constant /hold ( -- n )           84 constant /pad ( -- n )                                       1 -3 mod 0< constant floored ( -- f )                           -->                                                                                                                                                                                                                                                             ( environment? )                                                32767 constant max-n ( -- n )                                   -1 constant max-u ( -- u )                                      -1 max-n 2constant max-d ( -- d )                               -1. 2constant max-ud ( -- ud )                                  $50 constant return-stack-cells ( -- n )                        $50 constant stack-cells ( -- n )                               set-order previoustandard error codes #-01..#-15 )                             #-01 \ ABORT                                                    #-02 \ ABORT"                                                   #-03 \ stack overflow                                           #-04 \ stack underflow                                          #-05 \ return stack overflow                                    #-06 \ return stack underflow                                   #-07 \ do-loops nested too deeply during execution              #-08 \ dictionary overflow                                      #-09 \ invalid memory address                                   #-10 \ division by zero                                         #-11 \ result out of range                                      #-12 \ argument type mismatch                                   #-13 \ undefined word                                           #-14 \ interpreting a compile-only word                         #-15 \ invalid FORGET                                           ( Standard error codes #-16..#-30 )                             #-16 \ attempt to use zero-length string as a name              #-17 \ pictured numeric output string overflow                  #-18 \ parsed string overflow                                   #-19 \ definition name too long                                 #-20 \ write to a read-only location                            #-21 \ unsupported operation                                    #-22 \ control structure mismatch                               #-23 \ address alignment exception                              #-24 \ invalid numeric argument                                 #-25 \ return stack imbalance                                   #-26 \ loop parameters unavailable                              #-27 \ invalid recursion                                        #-28 \ user interrupt                                           #-29 \ compiler nesting                                         #-30 \ obsolescent feature                                      ( Standard error codes #-31..#-45 )                             #-31 \ >BODY used on non-CREATEd definition                     #-32 \ invalid name argument                                    #-33 \ block read exception                                     #-34 \ block write exception                                    #-35 \ invalid block number                                     #-36 \ invalid file position                                    #-37 \ file I/O exception                                       #-38 \ non-existent file                                        #-39 \ unexpected end of file                                   #-40 \ invalid BASE for floating point conversion               #-41 \ loss of precision                                        #-42 \ floating-point divide by zero                            #-43 \ floating-point result out of range                       #-44 \ floating-point stack overflow                            #-45 \ floating-point stack underflow                           ( Standard error codes #-46..#-60 )                             #-46 \ floating-point invalid argument                          #-47 \ compilation word list deleted                            #-48 \ invalid POSTPONE                                         #-49 \ search-order overflow                                    #-50 \ search-order underflow                                   #-51 \ compilation word list changed                            #-52 \ control-flow stack overflow                              #-53 \ exception stack overflow                                 #-54 \ floating-point underflow                                 #-55 \ floating-point unidentified fault                        #-56 \ QUIT                                                     #-57 \ exception in sending or receiving a character            #-58 \ [IF], [ELSE], or [THEN] exception                        #-59 \ ALLOCATE                                                 #-60 \ FREE                                                     ( Standard error codes #-61..#-75 )                             #-61 \ RESIZE                                                   #-62 \ CLOSE-FILE                                               #-63 \ CREATE-FILE                                              #-64 \ DELETE-FILE                                              #-65 \ FILE-POSITION                                            #-66 \ FILE-SIZE                                                #-67 \ FILE-STATUS                                              #-68 \ FLUSH-FILE                                               #-69 \ OPEN-FILE                                                #-70 \ READ-FILE                                                #-71 \ READ-LINE                                                #-72 \ RENAME-FILE                                              #-73 \ REPOSITION-FILE                                          #-74 \ RESIZE-FILE                                              #-75 \ WRITE-FILE                                               ( Standard error codes #-76..#-79 )                             #-76 \ WRITE-LINE                                               #-77 \ malformed xcharystem error codes #-256..#-270 )                             #-256 \ not a word nor a number                                 #-257 \ warning: is not unique                                  #-258 \ stack imbalance                                         #-259 \ trying to load from block 0                             #-260 \ wrong digit                                             #-261 \ deferred word is uninitialized                          #-262 \ assertion failed                                        #-263 \ execution only                                          #-264 \ definition not finished                                 #-265 \ loading only                                            #-266 \ off current editing block                               #-267 \ warning: not present, though required                   #-268 \ required, but not located                               #-269 \ relative jump too long                                  #-270 \ text not found                                          ( System error codes #-271..#-285 )                             #-271 \ immediate word not allowed in this structure            #-272 \ array index out of range                                #-273 \ invalid assembler condition                             #-274 \ command line history overflow                           #-275 \ wrong number                                            #-276 \ dictionary reached the zone of memory banks             #-277 \ required, but not indexed                               #-278 \ empty block found: quit indexing                        #-279 \ user area overflow                                      #-280 \ user area underflow                                     #-281 \                                                         #-282 \                                                         #-283 \                                                         #-284 \                                                         #-285 \                                                         ( G+DOS error codes #-1000..#-1014 )                            #-1000 \ G+DOS: Nonsense in G+DOS                               #-1001 \ G+DOS: Nonsense in GNOS                                #-1002 \ G+DOS: Statement end error                             #-1003 \ G+DOS: Break requested                                 #-1004 \ G+DOS: Sector error                                    #-1005 \ G+DOS: Format data lost                                #-1006 \ G+DOS: Check disk in drive                             #-1007 \ G+DOS: No +SYS file                                    #-1008 \ G+DOS: Invalid file name                               #-1009 \ G+DOS: Invalid station                                 #-1010 \ G+DOS: Invalid device                                  #-1011 \ G+DOS: Variable not found                              #-1012 \ G+DOS: Verify failed                                   #-1013 \ G+DOS: Wrong file type                                 #-1014 \ G+DOS: Merge error                                     ( G+DOS error codes #-1015..#-1029 )                            #-1015 \ G+DOS: Code error                                      #-1016 \ G+DOS: Pupil set                                       #-1017 \ G+DOS: Invalid code                                    #-1018 \ G+DOS: Reading a write file                            #-1019 \ G+DOS: Writing a read file                             #-1020 \ G+DOS: O.K. G+DOS                                      #-1021 \ G+DOS: Network off                                     #-1022 \ G+DOS: Wrong drive                                     #-1023 \ G+DOS: Disk write protected                            #-1024 \ G+DOS: Not enough space on disk                        #-1025 \ G+DOS: Directory full                                  #-1026 \ G+DOS: File not found                                  #-1027 \ G+DOS: End of file                                     #-1028 \ G+DOS: File name used                                  #-1029 \ G+DOS: No G+DOS loaded                                 ( G+DOS error codes #-1030..#-1031 )                            #-1030 \ G+DOS: STREAM used                                     #-1031 \ G+DOS: CHANNEL usederror codes #-1128..#-1142 )                               #-1128 \ OS: OK                                                 #-1129 \ OS: NEXT without FOR                                   #-1130 \ OS: Variable not found                                 #-1131 \ OS: Subscript wrong                                    #-1132 \ OS: Out of memory                                      #-1133 \ OS: Out of screen                                      #-1134 \ OS: Number too big                                     #-1135 \ OS: RETURN without GO SUB                              #-1136 \ OS: End of file                                        #-1137 \ OS: STOP statement                                     #-1138 \ OS: Invalid argument                                   #-1139 \ OS: Integer out of range                               #-1140 \ OS: Nonsense in BASIC                                  #-1141 \ OS: BREAK - CONT repeats                               #-1142 \ OS: Out of DATA                                        ( OS error codes #-1143..#-1154 )                               #-1143 \ OS: Invalid file name                                  #-1144 \ OS: No room for line                                   #-1145 \ OS: STOP in INPUT                                      #-1146 \ OS: FOR without NEXT                                   #-1147 \ OS: Invalid I/O device                                 #-1148 \ OS: Invalid colour                                     #-1149 \ OS: BREAK into program                                 #-1150 \ OS: RAMTOP no good                                     #-1151 \ OS: Statement lost                                     #-1151 \ OS: Invalid stream                                     #-1152 \ OS: FN without DEF                                     #-1153 \ OS: Parameter error                                    #-1154 \ OS: Tape loading error                                                                                                                                                                 ( ?compiling ?executing abort" warning" )                       [unneeded] ?compiling                                           ?\ : ?compiling  ( -- )  compiling? 0= -14 ?throw  ;  exit      [unneeded] ?executing                                           ?\ : ?executing  ( -- )  compiling? -263 ?throw  ;  exit        need ?(  [unneeded] abort" ?(                                   [defined] abort-message ?\ 2variable abort-message              : (abort")  ( n -- )                                              r> count rot if  abort-message 2! -2 throw  then + >r  ;      : abort"  ( Compilation: "ccc<quote>" -- )                        postpone (abort") ,"  ; immediate compile-only  exit  ?)      need string-parameter                                           : (warning")  ( f -- )                                            string-parameter rot if  type  else  2drop  then  ;           : warning"  \ Compilation: ( "ccc<quote>" -- )                    postpone (warning") ,"  ; immediate compile-only              ( error>ordinal error>line errors-block .throw-message )        : error>ordinal  ( -n1 -- +n2 )                                   abs dup 256 < ?exit  \ standard                                     dup 1000 < if  [ 256 91 - ] literal - exit  then  \             [ 1000 286 - 256 91 - + ] literal -   ;                   : error>line  ( -n1 -- n2 )                                       error>ordinal dup >r                                            begin  dup dup l/scr / - r@ <>  while  1+  repeat  rdrop  ;   need .line                                                      variable errors-block                                           s" Standard error codes" located errors-block !                 : .throw-message  ( n -- )                                        errors-block @                                                  if    cr error>line errors-block @ .line space                  else  .throw#  then  ;                                        ' .throw-message ' .throw defer!                                ( associative-case: )                                           need create:                                                    : associative-case: ( "name" -- )                                 create:                                                         does> ( n -- ) ( n pfa ) cell+  \ move past `lit`               begin   2dup @ dup 0= >r  ( n a n n')                                   =  r> or  0= ( n a f )                                  while   ( n a )  [ 3 cells ] literal +  \ no match              repeat  nip cell+ perform  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( base-execute )                                                : base-execute  ( xt n -- )  base @ >r execute r> base !  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( begincase )                                                   need cs-push  need cs-pop                                       : begincase  ( -- )                                               postpone case  postpone begin  cs-push                          ; immediate compile-only                                      : (repeatcase)  ( -- )                                            cs-pop  postpone again  postpone endcase  ;                   : repeatcase  ( -- )                                              postpone drop  postpone (repeatcase)                            ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                      ( [switch switch] )                                             need link@  need link,  need pick  need >body                   : switcher  ( i*x n head -- j*x )                                 dup cell+ @ >r  \ save default xt                               begin  link@ ?dup while  ( n a )                                  2dup cell+ @ = if   \ match                                       nip cell+ cell+ perform  r> drop exit                         then                                                          repeat  r> execute  ;                                         : :switch  ( xt "name" -- a )                                     create  >mark swap ,                                            does>  ( n -- )  ( n pfa ) switcher  ;                        : <switch  ( head xt n -- head )                                  2 pick link,  , ,  ;                                          -->                                                                                                                             ( [switch switch] )                                             : [switch  ( "name1" "name2" -- head )                            create  >mark ' ,                                               does>  ( n -- )  ( n pfa ) switcher  ;                        : [+switch  ( "name" -- head )  ' >body  ;                      : switch]  ( head -- )  drop  ;                                 : runs  ( head n "name" -- )  ' swap <switch  ;                 exit                                                            need :noname  need evaluate                                     : run:  ( head n "ccc<semicolon>" -- )                            :noname ';' parse evaluate postpone ; ( xt )                    swap >switch  ;                                                                                                                                                                                                                                                                                                               ( [switch-test )                                                need :noname                                                    : one    ( -- )  ." unu " ;                                     : two    ( -- )  ." du "  ;                                     : three  ( -- )  ." tri "  ;                                    : many   ( n -- )  . ." is too much! "  ;                       ' many :switch numbers                                            ' one   1 <switch                                               ' two   2 <switch                                               ' three 3 <switch  drop                                       cr 1 numbers 2 numbers 3 numbers 4 numbers                      ' numbers >body  :noname  ." kvar "  ; 4 <switch drop           cr 1 numbers 2 numbers 3 numbers 4 numbers                      -->                                                                                                                                                                                             ( [switch-test )                                                [switch sugar-numbers many                                        1 runs one                                                      2 runs two                                                      3 runs three                                                  switch]                                                         cr 1 sugar-numbers 2 sugar-numbers                                 3 sugar-numbers 4 sugar-numbers                              : four  ." kvar "  ;                                            [+switch sugar-numbers                                            4 runs four                                                   switch]                                                         cr 1 sugar-numbers 2 sugar-numbers                                 3 sugar-numbers 4 sugar-numbers                                                                                                                                                              ( call )                                                        code call  ( a -- )                                               E1 c,               \ pop hl                                    C5 c,               \ push bc                                   CD c, >mark         \ call call_hl                              C1 c,               \ pop bc                                    DD c, 21 c, next ,  \ ld ix,next                                jpnext              \ jp next                                   >resolve            \ call_hl:                                  E9 c,               \ jp (hl)                                   end-code                                                                                                                                                                                                                                                                                                                                                                                      ( case )                                                        [defined] alias dup 0=                                            ?\   ' 0 alias case                                             ?\  0 constant case                                             immediate compile-only                                        : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      [defined] alias dup 0=                                            ?\ ' else alias endof  ( orig1 -- orig2 )                       ?\ : endof  ( orig1 -- orig2 ) postpone else  ;                 immediate compile-only                                        : endcase                                                         postpone drop  begin  ?dup  while  postpone then  repeat        ; immediate compile-only                                                                                                      ( case )                                                        0 constant case  immediate compile-only                         : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      : endof  ( orig1 -- orig2 )                                       postpone else  ; immediate compile-only                       : endcase                                                         postpone drop  begin  ?dup  while  postpone then  repeat        ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                      ( eforth-case )                                                 0 constant case  immediate compile-only                         : of                                                              postpone over postpone = postpone if  postpone drop             ; immediate compile-only                                      : endof  ( orig1 -- orig2 )                                       postpone else  ; immediate compile-only                       : (endcase) ( 0 orig1..orign -- )                                 begin  ?dup  while  postpone then  repeat  ;                  : endcase                                                         ( Compilation: 0 orig1..orign -- )                              ( Run-time: x -- )                                              postpone drop (endcase)  ; immediate compile-only                                                                                                                                                                                                             ( 94-doc-case )                                                 0 constant case  immediate compile-only                         : of                                                              1+ >r                                                           postpone over  postpone =   \ copy and test case value          postpone if                 \ add orig to control flow stack    postpone drop               \ discards case value if =          r>  ; immediate compile-only                                  : endof                                                           >r  postpone else  r>  ; immediate compile-only               : endcase                                                         postpone drop  \ discard case value                             0 ?do  postpone then  loop  ; immediate compile-only                                                                                                                                                                                                          ( abersoft-case )                                               : case                                                            csp @ !csp  ; immediate compile-only                          : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      : endof                                                           postpone else  ; immediate compile-only                       : endcase                                                         postpone drop                                                   begin  sp@ csp @ <>  while  postpone then  repeat               csp !  ;  immediate                                                                                                                                                                                                                                                                                                           ( between-of )                                                  need between                                                    : (between-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                    2>r dup dup 2r> between 0= if  invert  then  ;                : between-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                      postpone (between-of) postpone of  ;  immediate compile-onlyless-of greater-of )                                          need ?(  [unneeded] less-of ?(                                  [defined] nup ?\ : nup  ( x1 x2 -- x1 x1 x2 )  over swap  ;     : (less-of)  ( x1 x2 -- x1 x1 | x1 x1' )                          nup nup >= if  invert  then  ;                                : less-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 -- | x1 )                            postpone (less-of) postpone of  ;  immediate compile-only     exit ?)                                                         : (greater-of)  ( x1 x2 -- x1 x1 | x1 x1' )                       nup nup <= if  invert  then  ;                                : greater-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 -- | x1 )                         postpone (greater-of) postpone of  ; immediate compile-only                                                                                                                                   ( any-of default-of )                                           need ?(  [unneeded] any-of ?(  need any?  need pick             : (any-of)  ( x0 x1..xn n -- x0 x0 | x0 0 )                       dup 1+ pick >r any? r> tuck and  ;                            : any-of  ( Compilation: -- of-sys )                                      ( Run-time: x0 x1..xn n -- | x0 )                       postpone (any-of) postpone of  ; immediate compile-only       exit ?)                                                         : default-of  ( -- )                                              postpone dup postpone of  ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                            ( within-of or-of )                                             need ?(  [unneeded] within-of ?(  need within                   : (within-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                     2>r dup dup 2r> within 0= if  invert  then  ;                 : within-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                       postpone (within-of) postpone of  ; immediate compile-only    exit ?)                                                         : (or-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                         2>r dup dup dup r> = swap r> = or 0= if  invert  then  ;      : or-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                           postpone (or-of) postpone of  ; immediate compile-only                                                                                                                                                                                                        ( cases: )                                                      : cases:  ( "name" -- orig 0 )                                    create >mark 0                                                  does>  ( selector -- ) ( selector pfa )                           true rot rot dup  ( true selector pfa pfa )                     cell+ swap @   ( true selector pfa+2 options )                  0 do  ( true selector a )                                         2dup @ =  ( true selector a f )                                 if    dup cell+ perform                                               2>r 0= 2r>  ( false selector a )  leave                   else  cell+ cell+  then                                      loop  ( true selector a | false selector a )                    rot if  perform  else  drop  then  drop  ;                   : case>  ( orig counter selector "name" -- orig counter' )        , ' compile, 1+  ;                                            : othercase>  ( orig counter "name" -- )  ' compile, swap !  ;  ( ?ccase )                                                      need alias  need char-position?                                 ' >resolve alias end?ccase  immediate compile-only              : (?ccase)  ( c ca len -- )                                       rot char-position? if  2+ cells r@ + perform  then  ;         : ?ccase                                                          postpone (?ccase) postpone ahead  ; immediate compile-onlyccase0 )                                                      need alias  need char-position?                                 ' >resolve alias endccase0  immediate compile-only              : (ccase0)  ( c ca len -- )                                       rot char-position? if    ( +n ) 3 +                                                else  2                                                         then  cells r@ + perform  ;                : ccase0                                                          postpone (ccase0) postpone ahead  ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( ccase )                                                       need char-position?                                             : endccase                                                        here cell- swap !                                               >resolve                                                        ; immediate compile-only                                      : (ccase)  ( c ca len -- )                                        rot char-position? if    ( +n ) 3 + cells r@ +                                     else  [ 2 cells ] literal r@ + @                                then  perform  ;                           : ccase                                                           postpone (ccase)  postpone ahead  >mark                         ; immediate compile-only                                                                                                                                                                                                                                      ( -branch )                                                     code -branch  ( f -- )                                            E1 c,                                                           CB c, 7C c,                                                     CA c, ' branch ,                                                03 c, 03 c,                                                     jpnext                                                          end-codeif -while -until )                                           need -branch  need cs-swap                                      : -if  ( f -- )                                                   postpone -branch >mark  ; immediate compile-only              : -while  ( f -- )                                                postpone -if  postpone cs-swap  ; immediate compile-only      : -until  ( f -- )                                                postpone -branch <resolve  ; immediate compile-onlyexit )                                                       code -exit  ( n -- ) ( R: nest-sys | -- nest-sys | )              E1 c,                   \ pop hl                                CB c, 7C c,             \ bit 7,h ; negative?                   C2 c, ' exit ,          \ jp nz,exit_code                       jpnext                  \ jp next                               end-codeif 0while 0until )                                           : 0if  ( f -- )                                                   postpone ?branch >mark  ; immediate compile-only              : 0while  ( f -- )                                                postpone 0if  postpone swap  ; immediate compile-only         : 0until  ( f -- )                                                postpone ?branch <resolve  ; immediate compile-onlyexit )                                                       code 0exit  ( f -- ) ( R: nest-sys | -- nest-sys | )              E1 c,                 \ pop hl                                  78 04 + c,            \ ld a,h                                  B0 05 + c,            \ or l                                    CA c, ' exit ,        \ jp z,exit_code                          jpnext                \ jp next                                 end-codecreate: )                                                     : create:  ( "name" -- )  create hidedfor dstep di )                                               : (dstep)  ( R: x d -- x d' )                                     r>  \ save the return address                                   2r> 2dup or  \ is the index zero?                               if    -1. d+ 2>r                                                else  2drop  [ 2 cells ] literal +                              then  >r  ;                                                   : dfor  ( d -- )  postpone 2>r <mark  ; immediate compile-only  : dstep  ( -- )                                                   postpone (dstep) postpone branch <resolve                       ; immediate compile-only                                      need alias                                                      ' 2r@ alias dfor-i  ( -- d )                                                                                                                                                                                                                                    ( {if if} if> |if| )                                            need cs-roll                                                    : {if  ( -- 0 )  0  ; immediate compile-only                    : if>                                                             1+ >r postpone if  r> ; immediate compile-only                : |if|                                                            >r postpone ahead \ new orig                                    1 cs-roll postpone then \ resolve old orig                      r>  ; immediate compile-only                                  : if} \ end of conditional                                        >r  postpone ahead                                              1 cs-roll postpone then \ resolve old orig                      -22 postpone literal postpone throw                             r> 0 ?do  postpone then  loop  ; immediate compile-only                                                                                                                                       ( {do do} do> |do| )                                            need cs-pick  need cs-roll                                      : {do  ( c: -- dest )  postpone begin  ; immediate compile-only : do>  ( c: dest -- orig1 dest )                                  postpone if  1 cs-roll  ; immediate compile-only              : |do|  ( c: orig1 dest -- dest )                                 0 cs-pick postpone again \ resolve a copy of dest               1 cs-roll postpone then \ resolve old orig                      ; immediate compile-only                                      : do}  ( c: orig dest -- )                                        postpone again \ resolve dest                                   postpone then \ resolve orig                                    ; immediate compile-only                                                                                                                                                                                                                                      ( doer )                                                        need >body                                                      : doer-noop ;                                                   : doer  ( "name" -- )                                             create  ['] doer-noop >body ,  does>  ( pfa ) @ >r ;          : (make)                                                          r> dup cell+ dup cell+                                            ( a1 a2 a2 )                                                  swap @ >body !                                                  @ ?dup if  >r  then ;                                         variable >;and                                                  : make                                                            compiling? if     postpone (make)  here >;and ! 0 ,                        else   here ' >body ! ]  then  ; immediate         : ;and  ( -- )  postpone exit  here >;and @ !  ; immediate      : undo  ( "name" -- )  ['] doer-noop >body  ' >body ! ;         ( doer-test )                                                   need doer                                                       doer test                                                         .( Test 1: ) test                                             make test  cr ." test 2" ;                                        .( Test 2: ) test                                             : change    make test ." test 3" ;and  test ;                   change                                                            .( Test 3: ) test                                             undo test                                                         .( Test 4: ) test                                                                                                                                                                                                                                                                                                                                                                             ( don't )                                                       : don't  ( n1 n2 -- | n1 n2 )                                     2dup = if  2drop unnest unnest  then  ; compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( dtimes )                                                      need dfor                                                       : (dtimes)  ( d -- )                                              rp@ @ dup cell+ rp@ ! @ swap                                    dfor  dup execute  dstep  drop  ;                             : dtimes  ( Compilation: "name" -- ) ( Run-time: d -- )           postpone (times)  ; immediate compile-onlyexecutions )                                                  need 2rdrop                                                     : executions  ( xt n -- )                                         2>r                                                             begin   2r@                                                     while   2r> 1- 2>r execute                                      repeat  drop 2rdropfor step )                                                    code (step)  ( R: n -- n' )                                       2A c, rp ,                                                      5E c, 23 c, 56 c,                                               7A c, B3 c,                                                     1B c, 72 c, 2B c, 73 c,                                         C2 c, ' branch ,                                                23 c, 23 c, 22 c, rp ,                                          03 c, 03 c, jpnext                                              end-code                                                      : for  ( n -- )  postpone >r <mark  ; immediate compile-only    : step  ( -- )                                                    postpone (step) <resolve  ; immediate compile-only            need alias                                                      ' r@ alias for-i  ( -- n )                                                                                                      ( j k )                                                         need [if]                                                       [needed] j [if]                                                 code j  ( -- n|u ) ( R: do-sys1 do-sys2 -- do-sys1 do-sys2 )      2A c, rp ,  11 c, 3 cells ,  19 c,  C3 c, ' i 3 + ,  end-code [then]                                                          [needed] k [if]                                                 code k  ( -- n|u )                                                ( R: loop-sys1..loop-sys3 -- loop-sys1..loop-sys3 )             2A c, rp ,  11 c, 6 cells ,  19 c,  C3 c, ' i 3 + ,  end-code [then]                                                                                                                                                                                                                                                                                                                                                                                          ( options[ )                                                    variable (default-option)                                       variable #options                                               : default-option ( "name" -- )  ' (default-option) !  ;         : (options)  ( i*x x -- j*x )                                     false swap  ( false x ) \ default flag returned by the loop     r> dup @ >r   \ set the new exit point                          cell+ dup >r  \ save the address of the default option xt       dup cell+ @  ( false x a n )                                    0 do                                                              [ 2 cells ] literal + 2dup @ =  ( false x a' f )  \ match?      if  nip nip cell+ perform  true 0 0  leave then               loop  ( f x1 x2 )  2drop                                        if    rdrop       \ match, so discard the default option        else  r> perform  \ no match, so execute the default option     then  ;   -->                                                 ( options[ )                                                    : options[                                                        (default-option) off        \ assume no default option          #options off                \ init number of options            postpone (options)          \ compile run-time handler          >mark >mark >mark           ( a1 a2 a3 )                        postpone [                  \ start interpreting options        ; immediate compile-only                                      : option  ( x "name" -- )                                         ,  ' compile,  1 #options +!  ;                               : ]options  ( a1 a2 a3 -- )                                       #options @ swap !           \ store number of options           (default-option) @ swap !   \ store default option xt           >resolve                    \ store exit point                  ]  ;                                                                                                                          ( positional-case: )                                            need create:                                                    : positional-case:  ( "name" -- )                                 create:                                                         does>   ( n -- )                                                        ( n pfa ) swap cells + perform  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( ?? )                                                          : ??  ( Compilation: "name" -- ) ( Runtime: f -- )                postpone if                                                     defined ( nt | 0 ) ?dup 0= -13 ?throw                           name>immediate? ( xt f ) if  execute  else  compile,  then      postpone then                                                   ;  immediate compile-onlyrepeat )                                                     need cs-pick                                                    : ?repeat  ( C: dest -- dest ) \ Compilation                               ( f -- )            \ Execution                          0 cs-pick   postpone until                                    ; immediaterecurse )                                                     : recurse  ( -- )  latestxt compile,  ; immediate compile-onlyretry ?retry )                                                need name>body                                                  : retry  ( Compilation: -- ) ( Run-time: -- )                     latest name>body postpone again                                 ; immediate compile-only                                      : ?retry  ( Compilation: -- ) ( Run-time: f -- )                  postpone if  postpone retry  postpone then                      ; immediate compile-onlyselect )                                                      0 constant select immediate                                     0 constant cond immediate                                       : thens  ( 0 a'1 ... a'n -- )                                     begin  ?dup while  postpone then  repeat  ;                   : endselect                                                       postpone drop  thens  ; immediate                             : when                                                            postpone else  >r >r >r  thens  r> r> r>  postpone drop         ; immediate                                                   -->                                                                                                                                                                                                                                                                                                                                                                                             ( select )                                                      : continue                                                        >r >r >r thens  0  r> r> r>  ; immediate                      : equal                                                           postpone over  postpone -  postpone if  ; immediate           : (range)  ( x0 x1 x2 -- x0 f )                                   2>r dup 2r> over - -rot - u<  ;                               : range                                                           postpone (range)  postpone if  ; immediate                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( select-test )                                                 : select-test ( n -- )                                            space                                                           select                                                            cond  $00 $1F range                                                   $7F     equal  when  ." Control char "       else         cond  $20 $2F range                                                   $3A $40 range                                                   $5B $60 range                                                   $7B $7E range  when  ." Point "              else         cond  $30 $39 range  when  ." Digit "              else         cond  $41 $5A range  when  ." Upper case letter "  else         cond  $61 $7A range  when  ." Lower case letter "  else         ." Not a character "                                          endselect  ;  -->                                                                                                             ( select-test )                                                 cr cr .( Running 'select' test...)                              cr  'a'  .(   ) dup emit  select-test                           cr  ','  .(   ) dup emit  select-test                           cr  '8'  .(   ) dup emit  select-test                           cr  '?'  .(   ) dup emit  select-test                           cr  'K'  .(   ) dup emit  select-test                           cr  0              dup 3 .r  select-test                        cr  127            dup 3 .r  select-test                        cr  128            dup 3 .r  select-test                                                                                                                                                                                                                                                                                                                                                                                                                        ( cs-pick cs-roll cs-swap cs-drop )                             need alias  need pick  need roll                                ' pick alias cs-pick                                            ' roll alias cs-roll                                            ' swap alias cs-swap                                            ' drop alias cs-drop                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( cs-pick cs-roll cs-drop cs-mark cs-test cs-push cs-pop )        variable cf0                                                    : !cfs ( -- )  sp@ cf0 ! ;  !cfs                                : #cs ( -- n )                                                    sp@ cf0 @ - negate [ 1 cells ] literal / 1-                     0 max ( handle empty stack) ;                                 : cs-pick  pick ( +bal) ;                                       : cs-roll  roll ;                                               : cs-drop  drop ( -bal) ;                                       : cs-mark  0 ( +bal) ;                                          : cs-test  dup 0<> ;                                            : cs-push  #cs -roll ;                                          : cs-pop   #cs roll ;                                                                                                                                                                                                                                         ( cs-pick cs-roll )                                             : cs-pick                                                         ( destu ... orig0|dest0 u -- destu ... orig0|dest0 destu )      dup 2* 1+ pick    \ check destu; dest type is 0                 if -22 throw then    \ control structure mismatch               dup >r  0 swap    \ destu ... orig0|dest0 0 u  r: u             1+ 0 do i 2* 1+ pick or loop                                    1 invert and if -22 throw then  \ ored types should be 0        r> 2* 1+ pick 0                                                 bal 1+ to bal ; compile-only                                  : cs-roll                                                         dup >r  0 swap    \ destu ... orig0|dest0 0 u  r: u             1+ 0 do i 2* 1+ pick or loop                                    1 invert and if -22 throw then  \ ored types should be 0        r@ 2* 1+ roll                                                   r> 2* 1+ roll ; compile-only                                  ( switch )                                                      : n>code-string  ( n -- ca len )  2 pad ! pad 1+ ! pad   ;      : switch:  ( "name" -- )  wordlist constant  ;                  : switch  ( n switch -- )                                         swap n>code-string rot search-wordlist if  execute  then  ;   : :clause  ( n switch -- )                                        get-current >r set-current                                      n>code-string next-name 2! :                                    r> set-current  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( switch )                                                      : n>code-string  ( n -- ca len )  2 pad ! pad 1+ ! pad   ;      : switch:  ( "name" -- )  wordlist constant  ;                  : switch  ( n switch -- )                                         swap n>code-string rot search-wordlist if  execute  then  ;   : :clause  ( n switch -- )                                        get-current >r set-current                                      n>code-string next-name 2! :                                    r> set-current  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( thiscase )                                                    need alias                                                      : ifcase  ( x f -- )                                              postpone if  postpone drop  ; immediate compile-only          : exitcase  ( -- )                                                postpone exit  postpone then  ; immediate compile-only        ' dup alias thiscase  ( x -- x x )                              ' drop alias othercase  ( ntimes )                                                       variable times-xt  \ the _xt_ executed by `times`               : times  ( i*x n -- j*x )                                         rp@ @  dup cell+ rp@ !  @ times-xt !                            0 ?do  times-xt perform  loop  ; compile-onlyattr )                                                        need z80-asm need (attr-addr)                                   code attr ( col row -- b )                                        de pop  hl pop  l d ld                                          (attr-addr) call                                                m l ld  0 h ld#                                                 jppushhl                                                        end-codeattr-addr )                                                   need z80-asm need (attr-addr)                                   code attr-addr ( col row -- a )                                   de pop  hl pop  l d ld                                          (attr-addr) call                                                jppushhl                                                        end-codeattr-addr) \                                                 need z80-asm                                                    create (attr-addr)  ( -- a )                                      asm                                                             e a ld  \ line to a 0x00..0x17 (max 00010111)                   rrca rrca rrca  \ rotate bits left                              a e ld  \ store in d as an intermediate value                   E0 and#  \ pick up bits 11100000 (was 00011100)                 d xor  \ combine with column 0x00..0x1F                         a l ld  \ low byte now correct                                  e a ld  \ bring back intermediate result from d                 03 and#  58 xor#                                                a h ld  \ high byte correct                                     ret                                                             end-asm                                                                                                                       ( clear-block )                                                 need z80-asm                                                    code clear-block  ( column row width height -- )                  exx  0 ix ldp#  sp addix                                        #4 ix a ftx  a d ld  rrca rrca rrca  #224 and#  #6 ix orx       a e ld  d a ld  #24 and#  #64 or#  a d ld                       #2 ix c ftx  #0 ix a ftx  a add  a add  a add  a b ld           begin                                                             de push  de hl ldp  de incp  0 m ld#  bc push  c dec            nz if  0 b ld#  ldir  then                                      bc pop  de pop  d inc  d a ld  7 and#                           z if  #32 a ld#  e add  a e ld                                    nc if  d a ld  8 sub#  a d ld  then                           then                                                          step  0 hl ldp#  sp addp  #4 cells de ldp#  de addp  ldsp       exx  next ix ldp#  jpnext  end-code                           ( color-block )                                                 need z80-asm                                                    code color-block  ( column row width height color -- )            exx  0 ix ldp#  sp addix                                        #6 ix a ftx  #22 d ld#  a add  a add  a add  a add              d rl  a add  d rl  #8 ix orx  a e ld                            #2 ix b ftx  #4 ix c ftx                                        begin                                                             de push  de hl ldp  de incp  bc push  #0 b ld#                  0 ix a ftx  a m ld  c dec                                       nz if  ldir  then                                               bc pop  hl pop  #32 de ldp#  de addp  exde                    step                                                            0 hl ldp#  sp addp  #5 cells de ldp#  de addp  ldsp             exx  next ix ldp#  jpnext  end-code                                                                                           ( wipe-block )                                                  need z80-asm                                                    code wipe-block  ( column row width height color -- )             exx  0 ix ldp#  sp addix                                        #6 ix a ftx  a d ld  rrca rrca rrca  #224 and#  #8 ix orx       a e ld  d a ld  #24 and#  #64 or#  a d ld                       #4 ix c ftx  #2 ix a ftx  a add  a add  a add  a b ld           begin                                                             de push  de hl ldp  de incp  0 m ld#  bc push  c dec            nz if  0 b ld#  ldir  then                                      bc pop  de pop  d inc  d a ld  7 and#                           z if  #32 a ld#  e add  a e ld                                    nc if  d a ld  8 sub#  a d ld  then                           then                                                          step  -->                                                                                                                     ( wipe-block )                                                    #6 ix a ftx  #22 d ld#  a add  a add  a add  a add              d rl  a add  d rl  #8 ix orx  a e ld  #2 ix b ftx               begin                                                             de push  de hl ldp  de incp  bc push  #0 b ld#                  0 ix a ftx  a m ld  c dec                                       nz if  ldir  then                                               bc pop  hl pop  #32 de ldp#  de addp  exde                    step                                                            0 hl ldp#  sp addp  #5 cells de ldp#  de addp  ldsp             exx  next ix ldp#                                               jpnext  end-code                                                                                                                                                                                                                                                                                                              ( circle )                                                      need z80-asm                                                    create circle-plot  ( -- a )                                      asm                                                             hl push  bc push  de push                                       ' plot call  \ XXX TODO                                         de pop  bc pop  hl pop  ret                                     end-asm                                                       code circle  ( gx gy radius -- )                                  0 h ld#  l a ld                                                 exx  cpl  a c ld  FF b ld#                                      bc incp  \ bc' is -radius                                       end-code                                                                                                                                                                                                                                                      ( cls-chars0 )                                                  need z80-asm                                                    code cls-chars0  ( -- )                                           bc push                                                         6 b ld#                                                         begin   bc push  57FF hl ldp#                                           begin   20 c ld#  a and                                                 begin   nop  m sla                                                      nop  m rlc                                                      nop  m sla                                                      nop  hl decp  c dec  z until                            3F a ld#  h cp  z until                                 bc pop  step                                            bc pop  jpnext                                                  end-code                                                                                                                      ( cls-chars1 )                                                  need z80-asm                                                    code cls-chars1  ( -- )                                           bc push                                                         08 b ld#                                                        begin                                                             4000 hl ldp#  \ screen bitmap address                           begin                                                             m srl  hl incp                                                  m sla  hl incp                                                  58 a ld#  h cp                                                z until                                                       step                                                            bc pop  jpnext  end-code                                                                                                                                                                      ( horizontal-curtain )                                          need z80-asm                                                    code horizontal-curtain  ( b -- )                                 de pop  bc push                                                 e a ld  5800 de ldp#  5AFF hl ldp#                              0C b ld#                                                        begin   bc push  20 b ld#                                               begin   a m ld  de stap                                                 bc push  02 b ld#                                               begin bc push  FF b ld#  begin  step                                  bc pop  step                                              bc pop  de incp  hl decp  step                          bc pop  step                                            bc pop  jpnext                                                  end-code                                                                                                                      ( vertical-curtain )                                            need z80-asm                                                    code vertical-curtain  ( b -- )                                   de pop  bc push                                                 e a ld  5800 de ldp#  5AFF hl ldp#  10 b ld#                    begin   bc push  18 b ld#  de push  hl push                             begin   a m ld  de stap  bc push  02 b ld#                              begin   bc push  FF b ld#  begin  step                                  bc pop  step                                            20 b ld#                                                        begin  de incp  hl decp  step                                   bc pop  step                                            hl pop  de pop  bc pop  de incp  hl decp  step          bc pop  jpnext  end-code                                                                                                                                                                      ( nonfull-display full-display save-display restore-display )   : nonfull-display  ( -- )  2 23659 c!  ;                        : full-display  ( -- )  0 23659 c!  ;                           : save-display  ( -- ) ( R: -- col row )                          r> xy 2>r >r save-mode nonfull-display  ;                     : restore-display  ( -- ) ( R: col row -- )                       display full-display restore-mode  r> 2r> at-xy >rg-emit g-type )                                               need z80-asm  need g-emit-routine  need g-emit-udg              need os-chars  need os-coords  need g-emitted                   code (g-emit)  ( c -- )                                           hl pop  l a ld                                                  bc push                                                         os-coords bc ftp                                                os-chars de ftp                                                 g-emit-routine call                                             bc pop  next ix ldp#  jpnext                                    end-code                                                      : g-emit  ( c -- )                                                dup 127 > if  g-emit-udg  else  (g-emit)  then                  g-emitted  ;                                                  : g-type  ( ca len -- )                                           bounds ?do  i c@ g-emit  loop  drop  ;                        ( g-cr g-emitted )                                              need g-x  need g-y                                              need g-at-x  need g-at-y                                        need c+!  need c-!                                              : g-cr  ( -- )                                                    0 g-at-x  8 (g-y) c-!  g-y 6 > ?exit  191 g-at-y  ;           : g-emitted  ( -- )                                               8 (g-x) c+!  g-x [ 255 6 - ] literal < ?exit  g-crg-emit-0udg )                                                 need z80-asm  need g-emit-routine  need os-udg  need os-coords  code g-emit-0udg  ( gx gy b -- )                                  hl pop  l a ld                                                  bc push                                                         os-coords bc ftp                                                os-udg de ftp                                                   g-emit-routine call                                             bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( g-emit-udg )                                                  need z80-asm  need g-emit-routine  need os-udg  need os-coords  [defined] first-udg ?\ #128 constant first-udg                  code g-emit-udg  ( c -- )                                         hl pop  l a ld  first-udg sub#                                  bc push                                                         os-coords bc ftp                                                os-udg de ftp                                                   g-emit-routine call                                             bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                                                                                                                                                                                                                      ( g-emit-routine )                                              need z80-asm  need (pixel-addr)                                 create g-emit-routine  ( -- a )                                   asm                                                             0 h ld#  a l ld  hl addp  hl addp  hl addp  de addp             hl push  ix pop  bc hl ldp  hl push  8 c ld#                    begin                                                             hl pop  h dec  hl push  h inc                                   bc push  hl bc ldp  (pixel-addr) call  bc pop                   a b ld  a xor  b or  0 ix a ftx                                 nz if   exde  0 h ld#  a l ld  8 a ld#  b sub  a b ld                   begin  hl addp  step  exde                                      m a ld  d xor  a m ld                                           hl incp  e a ld  then                                   m xor  a m ld  ix incp  c dec                                 z until  hl pop  ret  end-asm                                 ( g-x g-y g-xy g-at-x g-at-y g-at-xy g-home )                   need os-coords  need os-coordx  need os-coordy  need alias      ' os-coords alias (g-xy)                                        ' os-coordx alias (g-x)                                         ' os-coordy alias (g-y)                                         : g-x  ( -- gx )  (g-x) c@  ;                                   : g-y  ( -- gy )  (g-y) c@  ;                                   : g-xy  ( -- gx gy )  g-x g-y  ;                                : g-at-x  ( gx -- )  (g-x) c!  ;                                : g-at-y  ( gy -- )  (g-y) c!  ;                                : g-at-xy  ( gx gy -- )  g-at-y g-at-x  ;                       : g-home  ( -- )  (g-xy) off  ;                                                                                                                                                                                                                                                                                                 ( rdraw )                                                       need z80-asm                                                    code rdraw  ( gx gy -- )                                          hl pop  de pop  bc push                                         de bc ldp                                                       1 e ld#                                                         b 7 bit  \ negative x?                                          nz if  c a ld  neg  -1 e ld#  a c ld  then  \ negative x        l b ld   \ y                                                    1 d ld#                                                         h 7 bit  \ negative y?                                          nz if  b a ld  neg  -1 d ld#  a b ld  then  \ negative y        24BA call \ alternative entry to the DRAW-LINE ROM routine      bc pop                                                          jpnext end-code                                                                                                               ( (rdraw )                                                      need z80-asm                                                    create (rdraw                                                   asm                                                             end-asm                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( adraw )                                                       need plot  need os-coordx  need os-coordy                       2variable x1  2variable incx  2variable y1  2variable incy      : adraw  ( gx gy -- )                                             [ os-coordy ] literal c@ ( y0 )                                 dup 0 swap y1 2! - dup abs rot                                  [ os-coordx ] literal c@ ( x0 )                                 dup 0 swap x1 2! - dup abs rot                                  max >r dup 0<  \ negative xdiff?                                if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incx 2! drop dup 0<  \ negative ydiff?                          if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    -->                                                                                                                           ( adraw )                                                         incy 2! drop r> 1+ 0                                            do  x1 @ y1 @ plot                                                  x1 2@ incx 2@ d+ x1 2!                                          y1 2@ incy 2@ d+ y1 2!  loopocr )                                                         need z80-asm  need ocr-chars                                    code ocr  ( col line -- n )                                       de pop  hl pop  bc push                                         l b ld  e c ld  ocr-charset fthl                                c a ld  rrca  rrca  rrca  E0 and#  b xor  a e ld                c a ld  18 and#  40 xor#  a d ld                                0 de stp |mark 0 unresolved !                                   ocr-chars fta  a b ld                                           begin                                                             bc push  hl push                                                0 de ldp#  \ restore the screen address                         |mark 0 unresolved @ !                                      -->                                                                                                                                                                                             ( ocr )                                                             08 b ld# \ scans                                                begin                                                             de ftap  m xor  \ scan match?                                   here jrnz >relmark 1 unresolved !                               d inc  hl incp  \ update the pointers                         step  \ next scan                                               bc pop  bc pop                                                  ocr-chars fta  b sub  a b ld                                    ocr-first fta  b add  a b ld                                    here jr >relmark 2 unresolved !                                 1 unresolved @ >relresolve                                      hl pop  0008 de ldp#  de addp  bc pop                         step                                                            2 unresolved @ >relresolve  0 h ld#  b l ld                     bc pop  jppushhl  end-code                                    ( ocr-charset ocr-first ocr-chars ascii-ocr udg-ocr )           variable ocr-charset                                            variable ocr-first                                              variable ocr-chars                                              need os-chars  need os-udg                                      : ascii-ocr  ( -- )                                               os-chars @ 256 + ocr-charset !                                  32 ocr-first !                                                  95 ocr-chars !  ;                                             : udg-ocr  ( n -- )                                               os-udg @ ocr-charset !                                          128 ocr-first !                                                 ocr-chars !  ;                                                19 udg-ocr  \ default                                                                                                                                                                           \ (pixel-addr) slow-(pixel-addr) \                              [defined] (pixel-addr) ?\ defer (pixel-addr)                    create slow-(pixel-addr)  ( -- a )                                asm                                                             3E c, BF c,   \ ld a,191 ; max Y coordinate                     90 00 + c,    \ sub b                                           C3 c, 22B0 ,  \ jp 0x22B0 ; and return                          end-asm                                                       ' slow-(pixel-addr) ' (pixel-addr) defer!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \ (pixel-addr) fast-(pixel-addr) \                              need z80-asm                                                    [defined] (pixel-addr) ?\ defer (pixel-addr)                    create fast-(pixel-addr)  ( -- a )                                asm                                                             BF a ld#  b sub                                                 a b ld  rra  scf  rra  a and  rra                               b xor  F8 and#  b xor  a h ld                                   c a ld                                                          rlca rlca rlca  b xor  C7 and#                                  b xor  rlca  rlca                                               a l ld                                                          c a ld  07 and#                                                 ret                                                             end-asm                                                       ' fast-(pixel-addr) ' (pixel-addr) defer!                       ( pixel-addr )                                                  need (pixel-addr)                                               code pixel-addr  ( gx gy -- n a )                                 E1 c,  D1 c,            \ pop hl / pop de                       C5 c,                   \ push bc                               40 05 + c,              \ ld b,l ; b=y                          48 03 + c,              \ ld c,e ; c=x                          CD c, (pixel-addr) ,    \ call (pixel-addr)                     C1 c,                   \ pop bc                                16 c, 0 c,  58 07 + c,  \ ld d,0 / ld e,a                       C3 c, pushhlde ,        \ jp pushhlde                           end-code                                                                                                                                                                                                                                                                                                                      ( plot )                                                        need (pixel-addr)                                               code plot  ( gx gy -- )                                           D9 c,               \ exx ; save Forth IP                       E1 c,               \ pop hl                                    C1 c,               \ pop bc                                    40 05 + c,          \ ld b,l                                    ED c, 43 c, 5C7D ,  \ ld (0x5C7D),bc ; update COORDS            CD c, (pixel-addr) ,   \ call (pixel-addr)                      CD c, 22EC ,        \ call 0x22EB ; ROM PLOT-SUB + 7            D9 c,               \ exx ; restore Forth IP                    DD c, 21 c, next ,  \ ld ix,next ; restore ix                   jpnext              \ jp (ix)                                   end-code                                                                                                                                                                                      ( set-pixel )                                                   need (pixel-addr)  need z80-asm                                 code set-pixel  ( gx gy -- )                                      hl pop  de pop  bc push                                         l b ld  e c ld  (pixel-addr) call                               a b ld  b inc  1 a ld#                                          begin  rrca  step                                               m or  a m ld  \ combine pixel with byte in the screen           bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( reset-pixel )                                                 need (pixel-addr)  need z80-asm                                 code reset-pixel  ( gx gy -- )                                    hl pop  de pop  bc push                                         l b ld  e c ld  (pixel-addr) call                               a b ld  b inc  1 a ld#                                          begin  rrca  step                                               cpl  m and  a m ld  \ combine pixel with byte in the screen     bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( toggle-pixel )                                                need (pixel-addr)  need z80-asm                                 code toggle-pixel  ( gx gy -- )                                   hl pop  de pop  bc push                                         l b ld  e c ld  (pixel-addr) call                               a b ld  b inc  1 a ld#                                          begin  rrca  step                                               m xor  a m ld  \ combine pixel with byte in the screen          bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( test-pixel )                                                  need (pixel-addr)  need z80-asm                                 code test-pixel  ( gx gy -- f )                                   hl pop  de pop  bc push                                         l b ld  e c ld                                                  (pixel-addr) call                                               a b ld  b inc  m a ld                                           begin  rlca  step \ rotate to bit 0                             bc pop  \ restore the Forth IP                                  1 and#  \ pixel?                                                ' true jpnz                                                     ' false jp                                                      end-code                                                                                                                                                                                                                                                      ( pixels fast-pixels )                                          need z80-asm  [defined] pixels ?\ defer pixels                  code fast-pixels  ( -- n )                                        exx                                                             4000 hl ldp#  l b ld  l c ld                                    begin  \ byte                                                     08 d ld#                                                        begin  \ bit                                                      m rrc  cy if  bc incp  then  d dec                            z until                                                         hl incp  h a ld  58 cp#                                       z until                                                         bc push                                                         exx                                                             jpnext                                                          end-code  ' fast-pixels ' pixels defer!                       ( pixels slow-pixels )                                          need bits                                                       [defined] pixels ?\ defer pixels                                : slow-pixels  ( -- n )  16384 6144 bits  ;                     ' slow-pixels ' pixels deferbitmap>attr-addr pixel-attr-addr )                            need ?(                                                         [defined] bitmap>attr-addr ?(                                   code bitmap>attr-addr  ( a1 -- a2 )                               E1 c,  78 04 + c,                                               0F c, 0F c, 0F c,                                               E6 c, 03 c,  F6 c, 58 c,  60 07 + c,                            jppushhl  end-code  ?)                                        [unneeded] pixel-attr-addr ?exit                                need pixel-addr                                                 : pixel-attr-addr  ( gx gy -- a )                                 pixel-addr nip bitmap>attr-addr  ;                                                                                                                                                                                                                                                                                            ( fade )                                                        need z80-asm                                                    code fade  ( -- )                                                 bc push                                                         8 b ld#                                                         begin  5AFF hl ldp#  halt  halt                                   begin                                                             m a ld  a d ld  07 and#  nz if  a dec  then                     a e ld  a d ld  38 and#  nz if  8 sub#  then                    e or  d xor  3F and#  d xor                                     a m ld  hl decp  h a ld                                         58 cp#                                                        cy until                                                      step                                                            bc pop  jpnext                                                  end-code                                                      ( inverted )                                                    need z80-asm                                                    code inverted  ( -- )                                             4000 hl ldp#                                                    begin   m a ld  cpl  a m ld                                             hl incp  h a ld  58 cp#                                         jrnz                                                    jpnext                                                          end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( water )                                                       need z80-asm                                                    code water  ( -- )                                                bc push                                                         20 b ld#                                                        begin    57FF hl ldp#                                                    begin   m rrc  hl decp  h 6 bit  z until               step                                                            bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( scroll-1px-right )                                            need z80-asm                                                    code scroll-1px-right  ( -- )                                     bc push                                                         4000 hl ldp#  \ screen bitmap address                           C0 c ld#  \ pixel rows                                          begin                                                             m srl  hl incp  \ first char column                             1F b ld#  \ remaining columns                                   begin   m rr  hl incp  step                                     c dec                                                         z until                                                         bc pop jpnext                                                   end-code                                                                                                                                                                                      ( scroll-1px-up )                                               need z80-asm                                                    create (scroll-1px-up)  ( -- a )                                  asm                                                             4000 hl ldp#  BF b ld#                                          begin                                                             bc push  hl de ldp  h inc  h a ld  F8 and#  h cp                z if    8 b ld#  b sub  rra  rra  rra  a h ld  0020 bc ldp#             bc addp  h a ld  rla  rla  rla  a h ld                  then    hl push  0020 bc ldp#  ldir  hl pop  bc pop           step                                                            end-asm                                                       code scroll-1px-up  ( -- )                                        bc push  \ Forth IP                                             (scroll-1px-up) call                                            bc pop  jpnext  end-code                                      ( 0udg! udg! 0udg: udg: )                                       need os-udg                                                     [defined] first-udg ?\ #128 constant first-udg                  : 0udg!  ( b0..b7 n -- )                                          8 * os-udg @ + dup 7 + do  i c!  -1 +loop  ;                  : udg!  ( b0..b7 c -- )  first-udg - 0udg!  ;                   : udg:  ( b0..b7 c "name" -- )  dup constant  udg!  ;           : 0udg:  ( b0..b7 n "name" -- )  dup constant 0udgudg[ udg[ )                                                  need os-udg                                                     [defined] first-udg ?\ #128 constant first-udg                  variable udg0                                                   variable current-udg                                            variable current-scan                                           [defined] binary ?\  : binary  ( -- )  2 base !  ;              : 0udg[  ( b -- )                                                 dup udg0 !  current-udg !  current-scan off  binary  ;        : udg[  ( c -- )  first-udg - 0udg[  ;                          : |  ( b -- )                                                     os-udg @ current-udg @ 8 * current-scan @ + + c!                1 current-udg +!  ;                                           : || ( b -- )                                                     |  1 current-scan +!  udg0 @ current-udg !  ;                 : ||]  ( b -- )  ||  decimal  ;                                 ( udg-block[ )                                                  need s=                                                         : udg-block[  ( c "ccc" -- )                                      begin   parse-name 2dup s" ]udg-block" compare                  while   dup 8 mod dup abort" Wrong scan length"                 repeat  ;                                                     : ]udg-blockudg-row[ )                                                    need os-udg  need evaluate                                      [defined] binary  ?\ : binary  ( -- )  2 base !  ;              8 constant udg-height  8 constant udg-width                     variable udg-row-height  variable udg-row-width                 variable udg-row-first-udg                                      : ?block-scan-length  ( n -- )                                    dup udg-width mod abort" Wrong block scan length"               udg-width / udg-row-width @ ?dup                                if    <> abort" Wrong block width"                              else  udg-row-width !  then  ;                                : udg-row-current-row  ( -- n )                                   udg-row-height @ udg-height /  ;                              : udg-current-scan  ( -- n )                                      udg-row-height @ udg-height mod  ;  -->                                                                                       ( udg-row[ )                                                    [defined] first-udg ?\ #128 constant first-udg                  : >udg-scan  ( n -- a )                                           udg-height * udg-current-scan +                                 udg-row-first-udg @ first-udg - udg-height * +  os-udg @ +  ; : udg-scan!  ( b n -- )  >udg-scan c!  ;                        : udg-row-scan  ( ca len -- )                                     base @ >r binary  dup ?block-scan-length                        dup udg-width / 0 do  over udg-width                              evaluate i udg-scan!  udg-width /string                       loop  2drop  r> base !  1 udg-row-height +!  ;                : ]udg-row  ( ca len -- )                                         2drop  udg-row-height @ udg-height <>                           abort" The height of the UDG row is wrong"  ;                 : udg-row-scan?  ( ca len -- f )  s" ]udg-row" compare 0<>  ;   -->                                                             ( udg-row[ )                                                    : parse-udg-row-scan  ( "ccc" -- ca len )                         begin   parse-name dup 0=                                       while   2drop refill 0= abort" UDG row scan is missing"         repeat  ;                                                     : udg-row[  ( c "ccc" -- )                                        udg-row-first-udg !  udg-row-height off  udg-row-width off      begin   parse-udg-row-scan 2dup udg-row-scan?                   while   udg-row-scan                                            repeat  ]udg-row  ;                                                                                                                                                                                                                                                                                                                                                                                                                                           ( capslock )                                                    need os-flags2                                                  need c!toggle-bits  need c@test-bits                            need c!reset-bits   need c!reset-bits                           %1000 os-flags2 2constant capslock                              : toggle-capslock  ( -- )    capslock c!toggle-bits  ;          : set-capslock     ( -- )    capslock c!set-bits  ;             : unset-capslock   ( -- )    capslock c!reset-bits  ;           : capslock?        ( -- f )  capslock c@test-bits 0<>  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( at-accept clear-accept set-accept )                           2variable accept-xy       \ coordinates of the edited string    variable accept-buffer    \ address of the edited string        variable /accept          \ max length of the edited string     variable >accept          \ offset to the cursor position       : at-accept  ( -- )  accept-xy 2@ at-xy  ;                      : clear-accept  ( -- )                                            at-accept span @ spaces at-accept  span off  ;                : set-accept  ( ca1 len1 -- ca1' )                                clear-accept /accept @ min  ( ca1 len1' )                       dup span ! 2dup system-bank type default-bank                   dup >r                                                          accept-buffer @  ( ca1 len1' ca2 )                              smove accept-buffer @  ( ca2 )                                  r> +  ( ca1' )  ;                                                                                                             ( acceptx )                                                     need at-accept  need set-accept                                 : .acceptx  ( -- )                                                accept-buffer @ >accept @ at-accept type                        1 inverse  >accept @ span @ <                                   if accept-buffer @ >accept @ + c@ emit  else  space  then       0 inverse                                                       accept-buffer @ span @ >accept @ 1+ min /string typeacceptx )                                                     need toggle-capslock                                            : accept-edit  ( -- )  clear-accept init-accept  ;              : accept-left  ( -- )  ;                                        : accept-right  ( -- )  ;                                       : accept-up  ( -- )  ;                                          : accept-down  ( -- )  ;                                        : accept-delete  ( -- )  ;                                      create accept-commands ] noop noop noop noop noop noop          toogle-capslock accept-edit accept-left accept-right            accept-down accept-up accept-delete noop noop noop noop noop    noop noop noop noop noop noop noop noop noop noop noop noop [   : >accept-command  ( c -- a )  cells accept-commands +  ;       : accept-command  ( c -- )  >accept-command perform  ;          -->                                                                                                                             ( acceptx )                                                     : init-acceptx  ( ca len -- )                                     /accept !  accept-buffer !  >accept off  xy accept-xy 2!  ;   : (acceptx) ( ca len -- len' )  2dup init-accept                  over + over ( bot eot cur )                                     begin  key dup 13 <> \ not carriage return?                     while                                                             dup 12 =  \ delete?                                             if    drop  >r over r@ < dup  \ any chars?                            if  8 dup emit  bl emit  emit  then  r> +                 else  \ printable                                                     >r  2dup <>  \ more?                                            if r@ over c!  char+  r@ emit                                   then r> drop                                              then                                                          repeat  drop nip swap -  ;  -->                               ( acceptx )                                                     : acceptx ( ca len -- len' )                                      span off  ?dup 0= if  drop 0  else  (acceptx)  then  ;        : ax  ( -- )  ['] acceptx ['] accept defer!  ;                  : a0  ( -- )  ['] default-accept ['] accept defernuf? )                                                        need aborted?  need 'cr'                                        : nuf?  ( -- f )  'cr' aborted?  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( aborted? )                                                    : aborted?  ( c -- f )                                            key? dup  if    key 2drop key =                                           else  nip  thenbreak? )                                                      : break?  ( -- f )                                                key? dup if  key 2drop break-key?  thenkk-ports kk, kk@ )                                            /kk 3 <> dup                                                    ?\ : kk,  ( bitmask port -- ) , c,  ;                           ?\ : kk@  ( a -- bitmask port ) dup c@ swap 1+ @ ;              /kk 4 <> dup                                                    ?\ : kk,  ( d -- )  2,  ;                                       ?\ : kk@  ( a -- bitmask portkk-ports )                                                    $01 $F7FE 2constant kk-1  $02 $F7FE 2constant kk-2              $04 $F7FE 2constant kk-3  $08 $F7FE 2constant kk-4              $10 $F7FE 2constant kk-5                                        $01 $FBFE 2constant kk-q  $02 $FBFE 2constant kk-w              $04 $FBFE 2constant kk-e  $08 $FBFE 2constant kk-r              $10 $FBFE 2constant kk-t                                        $01 $FDFE 2constant kk-a  $02 $FDFE 2constant kk-s              $04 $FDFE 2constant kk-d  $08 $FDFE 2constant kk-f              $10 $FDFE 2constant kk-g                                        $01 $FDFE 2constant kk-cs  $02 $FDFE 2constant kk-z             $04 $FDFE 2constant kk-x   $08 $FDFE 2constant kk-c             $10 $FDFE 2constant kk-v                                        -->                                                                                                                                                                                             ( kk-ports )                                                    $01 $EFFE 2constant kk-0  $02 $EFFE 2constant kk-9              $04 $EFFE 2constant kk-8  $08 $EFFE 2constant kk-7              $10 $EFFE 2constant kk-6                                        $01 $DFFE 2constant kk-p  $02 $DFFE 2constant kk-o              $04 $DFFE 2constant kk-i  $08 $DFFE 2constant kk-u              $10 $DFFE 2constant kk-y                                        $01 $BFFE 2constant kk-en  $02 $BFFE 2constant kk-l             $04 $BFFE 2constant kk-k   $08 $BFFE 2constant kk-j             $10 $BFFE 2constant kk-h                                        $01 $7FFE 2constant kk-sp $02 $7FFE 2constant kk-ss             $04 $7FFE 2constant kk-m  $08 $7FFE 2constant kk-n              $10 $7FFE 2constant kk-b                                        -->                                                                                                                                                                                             ( kk-ports )                                                    need kk,                                                        40 constant keys                                                create kk-ports                                                 kk-1  kk,  kk-2  kk,  kk-3 kk,  kk-4 kk,  kk-5 kk,              kk-q  kk,  kk-w  kk,  kk-e kk,  kk-r kk,  kk-t kk,              kk-a  kk,  kk-s  kk,  kk-d kk,  kk-f kk,  kk-g kk,              kk-cs kk,  kk-z  kk,  kk-x kk,  kk-c kk,  kk-v kk,              kk-0  kk,  kk-9  kk,  kk-8 kk,  kk-7 kk,  kk-6 kk,              kk-p  kk,  kk-o  kk,  kk-i kk,  kk-u kk,  kk-y kk,              kk-en kk,  kk-l  kk,  kk-k kk,  kk-j kk,  kk-h kk,              kk-sp kk,  kk-ss kk,  kk-m kk,  kk-n kk,  kk-b kk,                                                                                                                                                                                                                                                                              ( kk-1# )                                                       need enum                                                       0                                                               enum kk-1#  enum kk-2#  enum kk-3# enum kk-4# enum kk-5#        enum kk-q#  enum kk-w#  enum kk-e# enum kk-r# enum kk-t#        enum kk-a#  enum kk-s#  enum kk-d# enum kk-f# enum kk-g#        enum kk-cs# enum kk-z#  enum kk-x# enum kk-c# enum kk-v#        enum kk-0#  enum kk-9#  enum kk-8# enum kk-7# enum kk-6#        enum kk-p#  enum kk-o#  enum kk-i# enum kk-u# enum kk-y#        enum kk-en# enum kk-l#  enum kk-k# enum kk-j# enum kk-h#        enum kk-sp# enum kk-ss# enum kk-m# enum kk-n# enum kk-b#        drop                                                                                                                                                                                                                                                                                                                            ( kk-chars )                                                    create kk-chars                                                 '1' c,  '2' c,  '3' c,  '4' c,  '5' c,                          'q' c,  'w' c,  'e' c,  'r' c,  't' c,                          'a' c,  's' c,  'd' c,  'f' c,  'g' c,                          128 c,  'z' c,  'x' c,  'c' c,  'v' c,                          '0' c,  '9' c,  '8' c,  '7' c,  '6' c,                          'p' c,  'o' c,  'i' c,  'u' c,  'y' c,                          129 c,  'l' c,  'k' c,  'j' c,  'h' c,                          130 c,  131 c,  'm' c,  'n' c,  'b' c,                                                                                                                                                                                                                                                                                                                                                                                                                          ( pressed pressed? )                                            need [if]                                                       [needed] pressed? [needed] pressed or [if]                      need @p                                                         : pressed? ( n1 n2 -- f )  @p and 0=  ;                         [then]                                                          [needed] pressed [if]                                           need pressed?  need kk-ports                                    : pressed  ( -- false | n1 n2 true )                              0 \ false by default                                            [ kk-ports keys /kk * bounds swap ] literal literal             do  i kk@ pressed? if  drop i kk@ 1 leave  then  /kk +loop  ; [then]                                                                                                                                                                                                                                                          ( only-one-pressed )                                            need kk-ports                                                   0. 2variable kk-pressed                                         : only-one-pressed  ( -- false | n1 n2 true )                     0. kk-pressed 2! \ none by default                              [ kk-ports keys /kk * bounds swap ] literal literal             do  i kk@ pressed?                                              if  kk-pressed 2@ + if                                          then                                                            /kk +loop                                                       kk-pressed 2@ 2dup + if  1  else  2drop 0  then  ;                                                                                                                                                                                                                                                                                                                                            ( get-inkey )                                                   need z80-asm                                                    code get-inkey  ( -- c | 0 )                                      bc push                                                         028E call \ KEY-SCAN ROM routine                                z if  \ is key press valid?                                       031E call \ KEY-TEST ROM routine                                cy if  \ is key code valid?                                       00 c ld#  \ XXX Spectrum Forth-83 does this                     d dec  a e ld                                                   0333 call \ KEY-DECODE ROM routine                            then                                                          then                                                            FF cp#  z if  a xor  then  \ convert FF to 00                   bc pop  pusha jp  end-code                                                                                                    ( get-key? )                                                    need z80-asm                                                    code get-key?  ( -- f )                                           bc push                                                         028E call  \ ROM KEY_SCAN                                       here jrnz  >relmark 0 unresolved ! \ to return_false            031E call  \ ROM KEY_TEST                                       here jrnc  >relmark 1 unresolved ! \ to return_false            bc pop  ' true jp                                               0 unresolved @ >relresolve                                      1 unresolved @ >relresolve                                      bc pop  ' false jp                                              end-code                                                                                                                                                                                                                                                      ( fast-get-key? )                                               need z80-asm                                                    code fast-get-key?  ( -- f )                                      bc push                                                         028E call  \ ROM KEY_SCAN                                       0000 jpnz  |mark 0 unresolved ! \ to return_false               031E call  \ ROM KEY_TEST                                       0000 jpnc  |mark 1 unresolved ! \ to return_false               bc pop  ' true jp                                               0 unresolved @ >resolve                                         1 unresolved @ >resolve                                         bc pop  ' false jp                                              end-code                                                                                                                                                                                                                                                      ( inkey )                                                       need z80-asm                                                    code inkey  ( -- c | 0 )                                          a xor                                                           01 iy 5 bitx  \ a new key pressed?                              nz if                                                             5C08 hl ldp#  \ LAST-K system variable                          m a ld                                                          01 iy 5 resx                                                  then                                                            pusha jp                                                        end-code                                                                                                                                                                                                                                                                                                                      ( y/n? y/n no? yes? )                                           need value                                                      'Y' value "y"  'N' value "n"                                    : y/n?  ( c -- f )  dup "y" = swap "n" = or  ;                  : y/n  ( -- c )                                                   begin  key upper dup y/n? 0=  while  drop  repeat  ;          : no?  ( -- f )  y/n "n" =  ;                                   : yes?  ( -- f )  y/n "ycreate-anon anon +anon n>anon )                               need body>                                                      variable (anon)  ( -- a )                                       : create-anon  ( -- )                                             here (anon) !                                                   [ (anon) body> @ ] literal compile, 0 ,  ;                    : anon  ( Compilation: -- ) ( Run-time: -- a )                    (anon) @                                                        compiling? if  compile,  else  execute  then  ; immediate     : +anon  ( Compilation:  n -- ) ( Run-time: -- )                  cells (anon) @ execute +                                        compiling? if  postpone literal  then ; immediate             : n>anon  ( x1..xn n -- )                                         cells postpone anon swap bounds do  i !  cell +loop  ;                                                                                                                                        ( arguments results )                                           need cell/                                                      variable >args                                                  create arg-actions ] @ ! +! [                                   variable arg-action  arg-action off                             : arg:  ( +n "name" -- )                                          create  c,                                                      does>  ( -- x ) ( x -- )                                          c@ >args @ swap -                                               arg-action @ arg-actions + perform  arg-action off  ;       $00 arg: l0 $02 arg: l1 $04 arg: l2 $06 arg: l3 $08 arg: l4     $0A arg: l5 $0C arg: l6 $0E arg: l7 $10 arg: l8 $12 arg: l9     -->                                                                                                                                                                                                                                                             ( arguments results )                                           : toarg  ( -- )  cell arg-action !  ;                           : +toarg  ( -- )  [ 2 cells ] literal arg-action !  ;           : arguments  ( i*x +n -- j*x )                                    r> >args @ >r >r                                                cells sp@ + dup >args ! [ 10 cells ] literal - sp@ swap -       cell/ 0 do  0  loop  ; compile-only                           : results  ( +n -- )                                              cells >args @ swap - sp@ -                                      cell/ 0 do  drop  loop                                          r> r> >args ! >r  ; compile-only                                                                                                                                                                                                                                                                                                                                                              ( local )                                                       need :noname  need >body                                        :noname  \ Compilation: ( -- xt )                                 2r> swap !  ;                                                 : local  \ Compilation: ( xt -- xt )                              r> swap                     \ save top return address           dup @ 2>r                   \ save variable address and value   [ dup >body ] literal >r    \ force exit via `restore-local`    >r  ;                       \ restore top return address        compile-only                                                    drop  \ delete xt                                                                                                                                                                                                                                                                                                                                                                             ( local )                                                       : (restore-local)  ( -- )  ( R: a x -- )  2r> swap !  ;         : local  \ Compilation: ( xt -- xt )                              r> swap  dup @ 2>r                                              ['] (restore-local) >body >r  >r  ;  compile-onlycalculator )                                                  need alias                                                      wordlist constant calculator-wordlist                           : calculator  ( -- )                                              calculator-wordlist >order  $C5 c, $EF c,  ;                  calculator-wordlist >order                                      get-current  calculator-wordlist set-current                    : end-calc  ( -- )  $38 c,  ;                                   : end-calculator  ( -- )  previous end-calc $C1 c,  ;           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : +  ( -- )  $0F c,  ;                                          : -  ( -- )  $03 c,  ;                                          : *  ( -- )  $04 c,  ;                                          : /  ( -- )  $05 c,  ;                                          : mod  ( -- )  $32 c,  ;                                        : **  ( -- )  $06 c,  ;                                         : sqrt  ( -- )  $28 ccalculator )                                                  : negate  ( -- )  $1B c,  ;                                     : sgn  ( -- )  $29 c,  ;                                        : abs  ( -- )  $2A c,  ;                                        : int  ( -- )  $27 c,  ;                                        : truncate  ( -- )  $3A c,  ;                                   : re-stack  ( r -- r' )  $3D c,  ;                              : zero  ( -- )  $A0 c,  ;                                       : one  ( -- )  $A1 c,  ;                                        : half  ( -- )  $A2 c,  ;                                       : pi2/  ( -- )  $A3 c,  ;                                       : ten  ( -- )  $A4 c,  ;                                        -->                                                                                                                                                                                                                                                             ( calculator )                                                  : ln  ( -- )  $25 c,  ;                                         : exp  ( -- )  $26 c,  ;                                        : acos  ( -- )  $23 c,  ;                                       : asin  ( -- )  $22 c,  ;                                       : atan  ( -- )  $24 c,  ;                                       : cos  ( -- )  $20 c,  ;                                        : sin  ( -- )  $1F c,  ;                                        : tan  ( -- )  $21 c,  ;                                        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : drop  ( -- )  $02 c,  ;                                       : dup  ( -- )  $31 c,  ;                                        : swap  ( -- )  $01 c,  ;                                       : >mem  ( n -- )  $C0 [ also forth ] + [ previous ] c,  ;       : mem>  ( n -- )  $E0 [ also forth ] + [ previous ] c,  ;       : over  ( -- )                                                    2 >mem drop 1 >mem 2 mem> 1 mem>  ;                           : 2dup  ( -- )                                                    2 >mem drop 1 >mem drop 1 mem> 2 mem>  1 mem> 2 mem>  ;       -->                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : 0=  ( -- )  $30 c,  ;                                         : 0<  ( -- )  $36 c,  ;                                         : 0>  ( -- )  $37 ccalculator )                                                  -->  \ XXX TMP -- ignore this block                             : =  ( -- )  $0E c,  ;                                          : <>  ( -- )  $0B c,  ;                                         : >  ( -- )  $0C c,  ;                                          : <  ( -- )  $0D c,  ;                                          : <=  ( -- )  $09 c,  ;                                         : >=  ( -- )  $0A ccalculator )                                                  : ?branch  ( -- )  $00 c,  ;                                    : 0branch  ( -- )  0= ?branch  ;                                : branch  ( -- )  $33 ccalculator )                                                  : >mark  ( -- a )  here 0 c,  ;                                 : from-here  ( a -- n )                                           here [ also forth ] swap - [ previous ] ;                     : >resolve  ( a -- )                                              [ also forth ] dup [ previous ] from-here                       [ also forth ] swap [ previous ] c!  ;                        ' here alias <mark  ( -- a )                                    : <resolve  ( a -- )  from-here c,  ;                           : if  ( -- a )  0branch >mark  ;                                : else  ( a1 -- a2 )                                              branch >mark [ also forth ] swap [ previous ] >resolve  ;     ' >resolve alias then  ( a -- )                                 set-current  previous                                                                                                                                                                           ( float float+ float- floats )                                  5 constant float                                                : float+  ( fa1 -- fa2 )  float +  ;                            : float-  ( fa1 -- fa2 )  float -  ;                            : floats  ( n1 -- n2 )  floatfp0 fp (fp@ fp@ empty-fs fdepth )                             need float                                                      23651 constant fp0  \ STKBOT system variable                    23653 constant fp   \ STKEND system variable                    : (fp@  ( -- a )  fp @  ;                                       : fp@  ( -- a )  (fp@ float -  ;                                : empty-fs  ( -- )  fp0 @ fp !  ;                               : fdepth  ( -- n )  (fp@ fp0 @ - floatf>flag )                                                      need (f>s                                                       : f>flag  ( -- f ) ( F: rf -- )  (f>s negateend-calculator-flag )                                         need macro  need f>flag  need call-xt                           macro end-calculator-flag  ( -- f ) ( F: 1|0 -- )                 [ calculator-wordlist >order ] end-calculator [ previous ]      ['] f>flag call-xt  jpnext endmcalculator-command )                                          need calculator                                                 : calculator-command  ( b -- )                                    $C5 c,  $06 c, c,                                               calculator  $3B c,                                              [ calculator-wordlist >order ] end-calculator [ previous ]      $C1 c,  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( calculator-command>flag )                                     need calculator-command  need f>flag  need call-xt              : calculator-command>flag  ( b -- )                               calculator-command ['] f>flag call-xt                           [ also assembler ] jpnext [ previous ]  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ( f= f<> )                                                      need calculator-command>flag                                    code f=  ( -- f ) ( F: r1 r2 -- )                                 0E calculator-command>flag  end-code                          code f<>  ( -- f ) ( F: r1 r2 -- )                                0B calculator-command>flag  end-codef~abs f~rel f~relabs f== )                                    need frot  need f-  need fabs  need fswap  need f<  need fover  need f+  need f*  need fp@  need float-  need float  need str=  need fdrop  need fsgn                                           : f~abs  ( -- f ) ( F: r1 r2 r3 -- )                              frot frot f- fabs fswap f<  ;                                 : f~rel  ( -- f ) ( F: r1 r2 r3 -- )                              frot frot fover fabs fover fabs f+                              frot frot f- fabs frot frot f* f<  ;                          : f~relabs  ( -- f ) ( F: r1 r2 r3 -- )  fabs f~rel  ;          : f==  ( -- f ) ( F: r1 r2 -- )                                   fp@ dup float- float tuck str= fdrop fdrop  ;                                                                                                                                                                                                                                                                                 ( f~ )                                                          need f~abs  need f==  need f~relabs                                  ' f~abs ,                                                  here ' f== ,                                                         ' f~relabs ,                                                     constant (f~) \ execution table of `f~`                   : f~  ( -- f ) ( F: r1 r2 r3 -- )                                 fdup fsgn f>s cells (f~) + performf< f<= f> f>= )                                               need calculator-command>flag                                    code f<  ( -- f ) ( F: r1 r2 -- )                                 0D calculator-command>flag  end-code                          code f<=  ( -- f ) ( F: r1 r2 -- )                                09 calculator-command>flag  end-code                          code f>  ( -- f ) ( F: r1 r2 -- )                                 0C calculator-command>flag  end-code                          code f>=  ( -- f ) ( F: r1 r2 -- )                                0A calculator-command>flag  end-code                                                                                                                                                                                                                                                                                                                                                                                                                          ( f0< f0= f0<> f0> )                                            need calculator  need end-calculator-flag                       code f0<  ( -- f ) ( F: r -- )                                    calculator  0<  end-calculator-flag  end-code                 code f0=  ( -- f ) ( F: r -- )                                    calculator  0=  end-calculator-flag  end-code                 code f0<>  ( -- f ) ( F: r -- )                                   calculator  0= 0=  end-calculator-flag  end-code              code f0>  ( -- f ) ( F: r -- )                                    calculator  0>  end-calculator-flag  end-code                                                                                                                                                                                                                                                                                                                                                                                                                 ( fdrop fdup fswap fover )                                      need calculator                                                 code fdrop  ( F: r -- )                                           calculator  drop  end-calculator  jpnext  end-code            code fdup  ( F: r -- r r )                                        calculator  dup  end-calculator  jpnext  end-code             code fswap  ( F: r1 r2 -- r2 r1 )                                 calculator  swap  end-calculator  jpnext  end-code            code fover  ( F: r1 r2 -- r1 r2 r1 )                              calculator  over  end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                            ( f2dup f2drop )                                                code f2dup  ( F: r -- r r )                                       calculator  2dup  end-calculator  jpnext  end-code            code f2drop  ( F: r -- )                                          calculator  drop drop  end-calculator  jpnext  end-codefnip ftuck )                                                  need calculator                                                 code fnip  ( F: r1 r2 -- r2 )                                     calculator  swap drop  end-calculator  jpnext                   end-code                                                      code ftuck  ( F: r1 r2 -- r2 r1 r2 )                              calculator  2 >mem swap 2 mem>  end-calculator  jpnext          end-codefrot -frot )                                                  need calculator                                                 code frot  ( F: r1 r2 r3 -- r2 r3 r1 )                            calculator                                                        1 >mem drop swap 1 mem> swap                                  end-calculator  jpnext  end-code                              code -frot  ( F: r1 r2 r3 -- r3 r1 r2 )                           calculator                                                        swap 1 >mem drop swap 1 mem>                                  end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                              ( f+ f- f* f/ ?f/ fmod )                                        need calculator  need fdup  need f0=                            code f+  ( F: r1 r2 -- r3 )                                       calculator  +  end-calculator  jpnext  end-code               code f-  ( F: r1 r2 -- r3 )                                       calculator  -  end-calculator  jpnext  end-code               code f*  ( F: r1 r2 -- r3 )                                       calculator  *  end-calculator  jpnext  end-code               code f/  ( F: r1 r2 -- r3 )                                       calculator  /  end-calculator  jpnext  end-code               : ?f/  ( F: r1 r2 -- r3 )  fdup f0= #-42 ?throw f/  ;           code fmod  ( F: r1 -- r2 )                                        calculator  mod  end-calculator  jpnext  end-code                                                                                                                                                                                                             ( fmax )                                                        need calculator  need calculator-command                        code fmax  ( F: r1 r2 -- r1|r2 )                                  calculator  2dup  end-calculator                                0C calculator-command  ( F: r1 r2 rf -- )                       calculator                                                        if    drop  ( F: r1 )                                           else  swap drop  ( F: r2 )                                      then                                                          end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                              ( fmin )                                                        need calculator  need calculator-command                        code fmin  ( F: r1 r2 -- r1|r2 )                                  calculator  2dup  end-calculator                                0D calculator-command  ( F: r1 r2 rf -- )                       calculator                                                        if    drop  ( F: r1 )                                           else  swap drop  ( F: r2 )                                      then                                                          end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                              ( fsgn fabs fnegate )                                           need calculator                                                 code fsgn  ( F: r1 -- -1|0|1 )                                    calculator  sgn  end-calculator  jpnext  end-code             code fabs  ( F: r1 -- r2 )                                        calculator  abs  end-calculator  jpnext  end-code             code fnegate  ( F: r1 -- r2 )                                     calculator  negate  end-calculator  jpnext  end-codefln ?fln flnp1 ?flnp1 fexp f** fsqrt ?fsqrt )                 need calculator  need fdup  need f0<  need f<=                  code fln  ( F: r1 -- r2 )                                         calculator  ln  end-calculator  jpnext  end-code              : ?fln  ( F: r1 -- r2 )  fdup f0 f<= #-46 ?throw fln  ;         code flnp1  ( F: r1 -- r2 )                                       calculator  one + fln  end-calculator  jpnext  end-code       : ?flnp1  ( F: r1 -- r2 )                                         fdup f1 fnegate f<= #-46 ?throw fln  ;                        code fexp  ( F: r1 -- r2 )                                        calculator  exp  end-calculator  jpnext  end-code             code f**  ( F: r1 -- r2 )                                         calculator  **  end-calculator  jpnext  end-code              code fsqrt  ( F: r1 -- r2 )                                       calculator  sqrt  end-calculator  jpnext  end-code            : ?fsqrt  ( F: r1 -- r2 )  fdup f0< #-46 ?throw fsqrt  ;        ( f0 f1 fhalf fpi2/ f10 )                                       need calculator                                                 code f0  ( F: -- r )                                              calculator  zero  end-calculator  jpnext  end-code            code f1  ( F: -- r )                                              calculator  one  end-calculator  jpnext  end-code             code fhalf  ( F: -- r )                                           calculator  half  end-calculator  jpnext  end-code            code fpi2/  ( F: -- r )                                           calculator  pi2/  end-calculator  jpnext  end-code            code f10  ( F: -- r )                                             calculator  ten  end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                             ( (f>s )                                                        code (f>s  ( -- n ) ( F: r -- )                                   C5 c,  CD c, 2DA2 ,                                             60 00 + c,  68 01 + c,  C1 c,  jppushhl                         end-codefrestack b>f u>f s>f f>s )                                    need calculator  need fnegate  need fdup  need (f>s  need f0<   code frestack  ( F: r -- r' )                                     calculator  re-stack  end-calculator  jpnext end-code         code b>f  ( b -- ) ( F: -- r )                                    D9 c, E1 c, 78 05 + c, CD c, 2D28 , D9 c,  jpnext  end-code   code u>f  ( u -- ) ( F: -- r )                                    D9 c, C1 c, CD c, 2D2B , D9 c,  jpnext  end-code              : s>f  ( n -- ) ( F: -- r )                                       dup 0< if  abs u>f fnegate  else  u>f  then  ;                : f>s  ( -- n ) ( F: r -- )  fdup (f>s f0< ?negate  ;                                                                                                                                                                                                                                                                                                                                           ( f! f@ )                                                       need z80-asm                                                    code f!  ( fa -- ) ( F: r -- )                                    exx  2BF1 call  \ STK_FETCH ROM routine                              hl pop  a m ld  hl incp                                                 e m ld  hl incp  d m ld  hl incp                                c m ld  hl incp  b m ld                            exx  jpnext end-code                                          code f@  ( fa -- ) ( F: -- r )                                    exx  hl pop m a ld  hl incp                                                 m e ld  hl incp  m d ld  hl incp                                m c ld  hl incp  m b ld                                         2AB6 call  \ STK_STORE ROM routine                  exx  jpnext end-code                                                                                                                                                                          ( f, fconstant fvariable )                                      need float  need f!  need f@                                    : f,  ( -- ) ( F: r -- )  here float allot f!  ;                : fconstant  ( "name" -- )  ( F: r -- )                           create  f,  does>  f@  ;                                      : fvariable  ( "name" -- )  create  float allotfacos fasin fatan fcos fsin ftan )                            need calculator                                                 code facos  ( F: r1 -- r2 )                                       calculator  acos  end-calculator  jpnext  end-code            code fasin  ( F: r1 -- r2 )                                       calculator  asin  end-calculator  jpnext  end-code            code fatan  ( F: r1 -- r2 )                                       calculator  atan  end-calculator  jpnext  end-code            code fcos  ( F: r1 -- r2 )                                        calculator  cos  end-calculator  jpnext  end-code             code fsin  ( F: r1 -- r2 )                                        calculator  sin  end-calculator  jpnext  end-code             code ftan  ( F: r1 -- r2 )                                        calculator  tan  end-calculator  jpnext  end-code                                                                                                                                             ( (f. f. )                                                      need fdepth  need fdrop                                         code (f.  ( F: r -- )                                             C5 c,  CD c, 2DE3 ,  C1 c,                                      jpnext  end-code                                              : f.  ( F: r -- )                                                 fdepth >r  (f. space                                            fdepth r> = if  fdrop  thenfs dump-fs )                                                 need (fp@  need fp0  need f@  need f.                           need fdepth  need float  need float+  need .depth               : (.fs  ( -- )  (fp@ fp0 @ ?do  i f@ f.  float +loop  ;         : .fs   ( -- )  fdepth dup .depth 0> if  (.fs  then  ;          : (dump-fs  ( -- )                                                cr ." Bottom"                                                   (fp@ fp0 @ ?do                                                    i dup cr u. float bounds ?do  i c@ 4 .r  loop                 float +loop  cr ." Top" cr  ;                                 : dump-fs  ( -- )  fdepth dup .depth 0> if  (dump-fs  then  ;                                                                                                                                                                                                                                                                                                                                   ( floor ftrunc fround )                                         need calculator  need fdup  need fsgn  need f*  need f+         code floor  ( F: r1 -- r2 )                                       calculator  int  end-calculator  jpnext  end-code             code ftrunc  ( F: r1 -- r2 )                                      calculator  truncate  end-calculator  jpnext  end-code        : fround  ( F: r1 -- r2 )  fdup fsgn fhalf f* f+ ftruncfalign faligned sfalign sfaligned dfalign dfaligned )         need alias                                                      ' noop alias falign     ( -- )        immediate                 ' noop alias faligned   ( a -- fa )   immediate                 ' noop alias sfalign    ( -- )        immediate                 ' noop alias sfaligned  ( a -- dfa )  immediate                 ' noop alias dfalign    ( -- )        immediate                 ' noop alias dfaligned  ( a -- dfa )  immediatenumber )                                                      : number  ( ca len -- n | d )  number? 0= #-275 ?throwstandard-number-point? extended-number-point? )               need [if]                                                       [needed] classic-number-point? [if]                             : classic-number-point?  ( c -- f )                               dup ':' = swap ',' - 4 u< or  ;                               [then]                                                          [needed] extended-number-point? [if]                            : extended-number-point?  ( c -- f )                              dup ':' = swap '+' - 5 u< or  ;                               [then]                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( base# b# d# h# )                                              need evaluate                                                   : base# ( -- ) ( "name" -- )                                      create c, immediate                                             does> c@                                                        base c@ >r  base !    \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw  ;   \ restore radix before error control     2 base# b#                                                     10 base# d#                                                     16 base# h#                                                                                                                                                                                                                                                                                                                     ( x# b# o# d# h# t# )                                           need evaluate                                                   : x# ( -- ) ( "name" -- n | d )                                   does> c@              \ new radix                               base @ >r  base !     \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw  ;   \ restore radix before error control    create b# ( "name" -- n | d )  2 c, x# immediate                create o# ( "name" -- n | d )  2 c, x# immediate                create d# ( "name" -- n | d ) 10 c, x# immediate                create h# ( "name" -- n | d ) 16 c, x# immediate                create t# ( "name" -- n | d ) 36 c, x# immediate                                                                                                                                                                                                                ( c# )                                                          : c#  ( "name" -- c )                                             parse-name drop c@                                              compiling? if  postpone literal  then  ; immediateud.r ud. )                                                    : ud.r  ( d n -- )  >r <# #s #> r> over - 0 max spaces type  ;  : ud.  ( d -- )  0 ud.r spacebin. dec. hex. )                                              [defined] base.                                                 ?\ : base.  ( -- )  does> c@ base @ >r base ! u. r> base !  ;   [unneeded] bin.  ?\ create bin.  ( n -- )   2 c, base.          [unneeded] hex.  ?\ create hex.  ( n -- )  16 c, base.          [unneeded] dec.  [defined] dec.  or                               ?\  create dec.  ( n -- )  10 c, basehex. 16hex. 32hex. <hex hex> )                               [defined] base'  ?\ variable base'                              [defined] (d.)                                                  ?\ : (d.)  ( d n -- ca len )  <# 0 do  #  loop  #>  ;           : <hex  ( -- )  base @ base' ! hex ; \ switch to hex            : hex>  ( -- )  base' @ base !     ; \ and back                 : (dhex.)  ( d n -- )  <hex (d.) hex> type space  ;             : 32hex.    ( d -- )  8 (dhex.)  ;                              : 16hex.     ( n -- )  s>d 4 (dhex.)  ;                         : 8hex.    ( b -- )  s>d 2 (dhex.)  ;                                                                                                                                                                                                                                                                                                                                                                                                                           ( binary 8bin. 16bin. 32bin. <bin bin> )                        [defined] base'  ?\ variable base'                              [defined] binary  ?\ : binary  ( -- )  2 base !  ;              [defined] (d.)                                                  ?\ : (d.)  ( d n -- ca len )  <# 0 do  #  loop  #>  ;           : <bin  ( -- )  base @ base' ! binary ; \ switch to binary      : bin>  ( -- )  base' @ base !        ; \ and back              : (dbin.)  ( d n -- )  <bin (d.) bin> type space  ;             : 32bin.    ( d -- )  32 (dbin.)  ;                             : 16bin.     ( n -- )  s>d 16 (dbin.)  ;                        : 8bin.    ( b -- )  s>d 8 (dbin.)  ;                                                                                                                                                                                                                                                                                                                                                           ( holds )                                                       : holds  ( ca len -- )                                            begin  dup  while  1- 2dup + c@ hold  repeat                    2drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( under+ +under )                                               need [if]                                                       [needed] under+ [if]                                            code under+  ( n1|u1 x n2|u2 -- n3|u3 x )                         D9 c, D1 c, C1 c, E1 c, 19 c, E5 c, C5 c, D9 c,                 jpnext  end-code                                              [then]                                                          [needed] +under [if]                                            code +under  ( n1|u1 n2|u2 x -- n3|u3 x )                         D9 c, C1 c, D1 c, E1 c, 19 c, E5 c, C5 c, D9 c,                 jpnext  end-code                                              [then]                                                                                                                                                                                                                                                                                                                          ( % u% u>ud within between gcd )                                [unneeded] %                                                    ?\ : %  ( n1 n2 -- n3 )  100 swap */  ;  exit                   [unneeded] u%                                                   ?\ : u%  ( u1 u2 -- u3 )  >r 100 um* r> um/mod nip  ;  exit     [unneeded] u>ud                                                 ?\ need alias  ' 0 alias u>ud ( u -- ud )  exit                 need ?(                                                         [unneeded] within ?(                                            : within  ( n1|u1 n2|u2 n3|u3 -- f )  over - >r - r> u<  ; ?)   [unneeded] between ?(                                           : between  ( n1|u1 n2|u2 n3|u3 -- f )                             over - -rot - u< 0=  ; ?)                                     [unneeded] gcd  ?exit                                           : gcd  ( n1 n2 -- n3 )  begin  ?dup  while  tuck mod  repeat  ;                                                                 ( 8* polarity <=> )                                             [unneeded] 8* ?\ : 8*   ( n1 -- n2 )  2* 2* 2*  ; exit          need ?(                                                         [defined] polarity ?(                                           code polarity  ( n -- -1 | 0 | 1 )                                D1 c, 78 02 + c,  B0 03 + c,  CA c, ' false ,                   CB c, 10 03 + c,  ED c, 62 c,                                   78 05 + c,  F6 c, 01 c,  68 07 + c,  jppushhl                   end-code                                                      ?)                                                              [unneeded] <=>                                                  ?\ : <=>  ( n1 n2 -- -1|0|1 )  - polarity  ;                                                                                                                                                                                                                                                                                    ( u<= u>= <= >= 0>= 0<= 0max )                                  [unneeded] u<=  ?\ : u<=  ( u1 u2 -- f )  u> 0=  ;  exit        [unneeded] u>=  ?\ : u>=  ( u1 u2 -- f )  u< 0=  ;  exit        [unneeded] <=   ?\ : <=   ( n1 n2 -- f )  > 0=   ;  exit        [unneeded] >=   ?\ : >=   ( n1 n2 -- f )  < 0=   ;  exit        [unneeded] 0>=  ?\ : 0>=  ( n1 n2 -- f )  0< 0=  ;  exit        [unneeded] 0<=  ?\ : 0<=  ( n1 n2 -- f )  0> 0=  ;  exit        [unneeded] 0max ?exit                                           code 0max  ( n -- n | 0 )                                         E1 c,  CB c, 10 05 + c,  DA c, ' false ,  CB c, 18 05 + c,      jppushhl  end-code                                                                                                                                                                                                                                                                                                                                                                            ( lshift )                                                      need z80-asm                                                    code lshift  ( x1 u -- x2 )                                       exx                                                             bc pop  \ C = loop counter                                      c b ld                                                          hl pop  \ hi 8 bits ignored!                                    b inc  ahead 0 unresolved !                                     begin  hl addp  0 unresolved @ >relresolve  step                hl push                                                         exx                                                             jpnext                                                          end-code                                                                                                                                                                                                                                                      ( lshift )                                                      code lshift  ( x1 u -- x2 )                                       D1 c,           \ pop de                                        E1 c,           \ pop hl                                        1C c,           \ inc e                                         here            \ begin:                                        1D c,           \ dec e                                         CA c, pushhl ,  \ jp z,push_hl                                  29 c,           \ add hl,hl                                     C3 c, ,         \ jp begin                                      end-code                                                                                                                                                                                                                                                                                                                                                                                      ( rshift )                                                      need z80-asm                                                    code rshift  ( x1 u -- x2 )                                       exx                                                             bc pop  \ C = loop counter                                      c b ld                                                          hl pop  \ hi 8 bits ignored!                                    b inc  ahead 0 unresolved !                                     begin  h srl  l rr  0 unresolved @ >relresolve  step            hl push                                                         exx                                                             jpnext                                                          end-code                                                                                                                                                                                                                                                      ( rshift )                                                      code rshift  ( x1 u -- x2 )                                       D1 c,           \ pop de                                        E1 c,           \ pop hl                                        1C c,           \ inc e                                         here            \ begin:                                        1D c,           \ dec e                                         CA c, pushhl ,  \ jp z,push_hl                                  CB c, 3C c,     \ srl h                                         CB c, 1D c,     \ rr l                                          C3 c, ,         \ jp begin                                      end-code                                                                                                                                                                                                                                                                                                                      ( clshift )                                                     code clshift  ( b1 u -- b2 )                                      D1 c,  E1 c,  78 05 + c,  1C c,                                 here                                                            1D c,  CA c, pusha ,  80 07 + c,  C3 c, ,                       end-codecrshift )                                                     code crshift  ( b1 u -- b2 )                                      D1 c,  E1 c,  78 05 + c,  1C c,                                 here                                                            1D c,  CA c, pusha ,                                            C3 c, ,                                                         end-codebits )                                                        need z80-asm                                                    code bits  ( ca len -- u )                                        0 hl ldp#  \ init bit count                                     exx  \ save IP and count                                        de pop  hl pop  \ memory zone                                   begin                                                             d a ld  e or  nz if                                               08 b ld#  \ bits per byte                                       begin  m rrc  cy if  exx hl incp exx  then  step                hl incp  de decp  \ next byte                               2swap again then                                                exx jppushhl end-code                                                                                                                                                                                                                                         ( 2/ cell/ )                                                    need [if]                                                       [needed] 2/ [needed] cell/ or [if]                              code 2/  ( x1 -- x2 )                                             E1 c,           \ pop hl                                        CB c, 2C c,     \ sra h                                         CB c, 1D c,     \ rr l                                          jppushhl        \ jp pushhl                                     end-code                                                      [then]                                                          [unneeded] cell/  ?\ need alias  ' 2/ alias cell/                                                                                                                                                                                                                                                                                                                                               ( sqrt )                                                        need d2*  need 2/                                               [defined] cell-bits ?\ 16 constant cell-bits                    : (sqrt)  ( radicand -- remainder root )                          0 0                           ( radicand remainder root )       [ cell-bits 2/ ] literal 0 do                                     >r d2* d2* r>               \ shift remainder left 2 bits       2*                          \ shift root left 1 bit             2dup 2* u> if               \ check for next bit of root          >r r@ 2* - 1- r>          \ reduce remainder                    1+                        \ add a bit to root                 then                                                          loop  cr .s rot drop  ;                                       : sqrt  ( radicand -- root )  (sqrt) nip  ;                                                                                                                                                     ( sqrt )                                                        need 2/                                                         : sqrt  ( n1 -- n2 )                                              dup 0< -24 ?throw  \ invalid numeric argument                   dup                                                             if  dup 2/  20 0                                                    do      2dup / + 2/                                             loop    swap drop                                           thenrem /- -rem */-rem */- )                                    need sm/rem                                                     : /-rem  ( n1 n2 -- n3 n4 )  >r  s>d  r> sm/rem  ;              : /-  (  n1 n2 -- n3 )  /-rem nip  ;                            : -rem  ( n1 n2 -- n3 )  /-rem drop  ;                          : */-rem  (  n1 n2 n3 -- n4 n5 )  >r  m*  r> sm/rem  ;          : */-  ( n1 n2 n3 -- n4 )  */-rem nipfm/mod )                                                      : fm/mod  ( d1 n1 -- n2 n3 )                                      dup >r                \ save divisor                            sm/rem                                                          over 0<> over 0< and  \ quotient<0 and remainder<>0?            if                                                                swap r> +           \ add divisor to remainder                  swap 1-             \ decrement quotient                      else r> drop then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( /_mod /_ _mod */_mod */_ )                                    need fm/mod                                                     : /_mod  ( n1 n2 -- n3 n4 )  >r s>d r> fm/mod  ;                : /_  ( n1 n2 -- n3 )  /_mod nip  ;                             : _mod  ( n1 n2 -- n3 )  /_mod drop  ;                          : */_mod  ( n1 n2 n3 -- n4 n5 )  >r m* r> fm/mod  ;             : */_  ( n1 n2 n3 -- n4 )   */_mod nipany? either neither )                                         need [if]                                                       [needed] any? [if]  need roll  variable (any?)                  : any?  ( x0 x1..xn n -- f )                                      dup 1+ roll (any?) !                                            0 swap 0 do  swap (any?) @ = or  loop  ;                      [then]                                                          [needed] either [if]                                            : either  ( n1|u1 n2|u2 n3|u3 -- f )                              -rot over = -rot = or  ;                                      [then]                                                          [needed] neither [if]                                           : neither  ( n1|u1 n2|u2 n3|u3 -- f )                             -rot over <> -rot <> and  ;                                   [then]                                                                                                                          ( split join )                                                  need [if]                                                       [needed] split [if]                                             code split  ( x -- b1 b2 )                                        E1 c,                                                           16 c, 00 c,  58 05 + c,  68 04 + c,  26 c, 00 c,                C3 c, pushhlde ,  end-code                                    [then]                                                          [needed] join [if]                                              code join  ( b1 b2 -- x )                                         D1 c,  60 03 + c,  D1 c,  68 03 + c,                            jppushhl  end-code                                            [then]                                                                                                                                                                                                                                                          ( ud* )                                                         : ud*  ( ud1 u2 -- ud3 )  dup >r um* drop  swap r> um* rotd* )                                                          : d* ( d|ud1 d|ud2 -- d|ud3 )                                     >r swap >r 2dup um* rot r> * + rot rdu/mod )                                                      need tum*  need t+  need t-  need tum/  need d2*  need lshift   : normalize-divisor  ( d1 -- d1' shift )                          0 >r begin  dup 0< while  d2*  r> 1+ >r  repeat  r>  ;        : du/mod  ( ud1 ud2 -- ud3 ud4 )                                  ?dup 0= if                                                        >r  0 r@ um/mod  r> swap >r  um/mod  0 swap r>  exit          then                                                            normalize-divisor dup >r rot rot 2>r                            1 swap lshift tum*                                              dup  r@ = if   -1  else  2dup  r@ um/mod nip  then              2r@  rot dup >r  tum*  t-                                       dup 0< if  r> 1-  2r@  rot >r  0 t+                               dup 0< if  r> 1-  2r@  rot >r  0 t+  then                     then                                                            r> 2r> 2drop  1 r>  rot >r  lshift tum/  r> 0  ;              ( d0= d0< d< du< )                                              [unneeded] d0= ?\ : d0=  ( d -- f )  or 0=  ;  exit             [unneeded] d0< ?\ : d0<  ( d -- f )  nip 0<  ; exit             need [if]                                                       [needed] d< [if]                                                need 2nip                                                       : d<  ( d1 d2 -- f )                                              rot 2dup = if  2drop u< exit  then  2nip >  ;  exit           [then]                                                          [needed] du< [if]                                               : du<  ( ud1 ud2 -- f )                                           rot swap 2dup                                                   u<  if  2drop 2drop [ true ] literal exit  then                 -   if  2drop [ false ] literal exit  then  u<  ;  exit       [then]                                                                                                                          ( dmin dmax )                                                   need [if]                                                       [needed] dmin [if]                                              : dmin  ( d1 d2 -- d1 | d2 )                                      2over 2over d< 0= if  2swap  then  2drop  ;  exit  [then]     [needed] dmax [if]                                              : dmax  ( d1 d2 -- d1 | d2 )                                      2over 2over d< if  2swap  then  2drop  ;  [thend= d<> )                                                      : d<>  ( d1 d2 -- f )  rot <> if  2drop true exit  then  <>  ;  : d=  ( d1 d2 -- f )  dd- )                                                          need z80-asm                                                    code d-  ( d1|ud1 d2|ud2 -- d3|ud3 )                              de pop          \ DE=d2hi                                       exx                                                             de pop          \ DE'=d2lo                                      exx                                                             hl pop          \ HL=d1hi,DE=d2hi                               exx                                                             hl pop          \ HL'=d1lo                                      de subp                                                         hl push         \ 2OS=d1lo-d2lo                                 exx                                                             de sbcp         \ HL=d1hi-d2hi-cy                               jppushhl                                                        end-code                                                      ( d2* d2/ )                                                     need [if]                                                       [needed] d2* [if]  code d2*  ( xd1 -- xd2 )                       D1 c, E1 c,                                                     29 c,  CB c, 13 c,  CB c, 12 c,                                 EB c, C3 c, pushhlde ,                                          end-code  [then]                                              [needed] d2/ [if]  code d2/  ( xd1 -- xd2 )                       E1 c, D1 c,                                                     CB c, 2C c,  CB c, 1C c,  CB c, 1D c,                           CB c, 1A c,  CB c, 1B c,                                        EB c, C3 c, pushhlde ,                                          end-code  [then]                                                                                                                                                                                                                                              ( d2* d2/ )                                                     need [if]  need z80-asm                                         [needed] d2* [if]  code d2*  ( xd1 -- xd2 )                       de pop  hl pop                                                  hl addp  e rl  d rl                                             exde  pushhlde jp           \ smaller but slower                end-code  [then]                                              [needed] d2/ [if]  code d2/  ( xd1 -- xd2 )                       hl pop  de pop                                                  h sra  l rr  d rr  e rr                                         pushhlde jp                 \ smaller but slower                end-code  [then]                                                                                                                                                                                                                                                                                                              ( dxor dor dand )                                               [unneeded] dxor                                                 ?\ : dxor  ( d1 d2 -- d3 )  rot xor -rot xor swap  ;            [unneeded] dor                                                  ?\ : dor  ( d1 d2 -- d3 )  rot or -rot or swap  ;               [unneeded] dand                                                 ?\ : dand  ( d1 d2 -- d3 )  rot and -rot and swapm* )                                                          need d*                                                         : m*  ( n1 n2 -- d )                                              >r s>d r> s>d dm+ )                                                          need z80-asm                                                    code m+  ( d1|ud1 n -- d2|ud2 )                                   exx     \ save Forth IP                                         bc pop  \ n                                                     de pop  \ d1 hi cell                                            hl pop  \ d1 lo cell                                            bc addp  hl push                                                cy if  de inc  then  de push                                    exx      \ restore Forth IP                                     jpnext                                                          end-code                                                      exit                                                            : m+  ( d1|ud1 n -- d2|ud2 )  s>d d+  ;                                                                                                                                                         ( m*/ )                                                         : m*/  ( d1 n1 +n2 -- d2 )                                        >r s>d >r abs -rot s>d r> xor r> swap >r >r dabs                rot tuck um* 2swap um* swap                                     >r 0 d+ r> -rot i um/mod -rot r> um/mod -rot r>                 if     if     1 0 d+                                                   then                                                            dnegate                                                  else   drop                                                     then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( m*/ )                                                         need mt*  need tnegate  need ut/                                : m*/  ( d1 n1 +n2 -- d2 )                                          >r mt* dup 0< if    tnegate r> ut/ dnegate                                    else  r> ut/  thendsqrt )                                                       need q2*  need d2*  need d<  need m+  need d- need 2rot         need 2nip  [defined] cell-bits ?\ 16 constant cell-bits         : (dsqrt)  ( radicand . -- remainder . root . )                   0. 0.             ( radicand . remainder . root . )             cell-bits 0 do    ( radicand . remainder . root . )               cr .s  key drop  \ XXX INFORMER                                 2>r q2* q2* 2r>  d2*                                            2over 2over d2* 2swap                                             cr .s ." d< ?"  \ XXX INFORMER                                  d< if                                                           cr .s ." d<"  \ XXX INFORMER                                    2dup 2>r d2* d- -1 m+ 2r>  1 m+                               then                                                          loop  cr .s 2rot 2drop  ;                                     : dsqrt  ( radicand . -- root . )  (dsqrt) 2nip  ;              ( d10* )                                                        : d10*  ( ud -- ud*10 )  d2* 2dup d2* d2* dtum* tum/ t+ t- )                                             need d-                                                         : +carry  ( n1 n2 -- n1+n2 carry )  0 tuck d+  ;                : -borrow  ( n1 n2 -- n1-n2 borrow )  0 tuck d-  ;              : tum*  ( d n -- t )  2>r  r@ um*  0 2r>  um* d+  ;             : tum/  ( t n -- d )  dup >r um/mod r> swap >r um/mod nip r>  ; : t+  ( t1 t2 -- t3 )                                             >r rot >r  >r swap >r +carry  0 r> r> +carry d+ r> r> + +  ;  : t-  ( t1 t2 -- t3 )                                             >r rot >r  >r swap >r -borrow                                   s>d r> r> -borrow d+ r> r> - +  ;                                                                                                                                                                                                                                                                                                                                                             ( tnegate )                                                     : tnegate  ( t1 -- t2 )                                           invert >r                                                       invert >r                                                       invert 0 -1 -1 d+ s>d r> 0 d+                                   rut* )                                                         : ut*   ( ud u -- t )                                             swap >r dup >r                                                  um* 0 r> r> um* dmt* )                                                         need ut*  need tnegate                                          : mt*   ( d n -- t )                                              dup 0<                                                          if   abs over 0< if   >r dabs r> ut*  else ut* tnegate then     else over 0< if  >r dabs r> ut* tnegate  else  ut*  then        thenut/ )                                                         : ut/   ( ut n -- d )                                             dup >r um/mod -rot r> um/mod nip swap  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( q2* )                                                         need d2*                                                        : q2*  ( n . . . -- 2n . . . )                                    d2* >r >r                                                       dup 0< if     d2* r> 1+ r>                                             else   d2* r> r>                                                thenq+ q- q0< q0= qu< qnegate qabs )                              code q+  ( nq1 nq2 -- nq3 )                                     end-code                                                        code q-  ( nq1 nq2 -- nq3 )                                     end-code                                                        : q0<  ( nq -- f )  0< push drop 2drop pop  ;                   : q0=  ( nq -- f )  or or or 0=  ;                              : qu<  ( uq uq -- f )  q- q0<  ;                                : qnegate  ( nq -- nq' )  0 0 0 0 4swap q-  ;                   : qabs  ( nq -- uq )  dup 0< if qnegate then  ;                                                                                                                                                                                                                                                                                                                                                                                                                 ( udm* dm* )                                                    need qnegate                                                    code udm*  ( ud ud - quad )                                     end-code                                                        : dm* ( nd nd - nq )                                              2>r dup 0< dup >r if  dnegate  then                             r> 2r> dup 0< dup >r if  dnegate  then                          rot >r udm* 2r> xor 0< if  qnegate  thena a! a@ )                                                     variable a                                                      code a!  ( a -- )  E1 c, 22 c, a , jpnext  end-code             code a@  ( -- a )  2A c, a , jppushhl  end-codea @a c!a c@a )                                               need a  need ?(                                                 [unneeded] !a ?(                                                code !a  ( x -- )  D1 c, 2A c, a , 70 03 + c, 23 c, 70 02 + c,                     jpnext  end-code ?)                          [unneeded] @a ?(                                                code @a  ( -- x )  2A c, a , 5E c, 23 c, 66 c, 68 03 + c,                          jppushhl  end-code ?)                        [unneeded] c!a ?(                                               code c!a  ( c -- )  D1 c, 2A c, a , 70 03 + c, jpnext                               end-code ?)                                 [unneeded] c@a ?(                                               code c@a  ( -- c )  2A c, a , 6E c, 26 c, 00 c, jppushhl                            end-code ?)                                                                                                                                                                 ( !a+ @a+ c!a+ c@a+ )                                           need a  need ?(                                                 [unneeded] !a+ ?(                                               code !a+  ( x -- )                                                D1 c, 2A c, a , 70 03 + c, 23 c, 70 02 + c, 23 c, 22 c, a ,     jpnext  end-code ?)                                           [unneeded] @a+ ?(                                               code @a+  ( -- x )                                                2A c, a , 5E c, 23 c, 56 c, 23 c, 22 c, a , D5 c, jpnext        end-code ?)                                                   [unneeded] c!a+ ?(                                              code c!a+  ( c -- )  D1 c, 2A c, a , 70 03 + c, 23 c,                                22 c, a , jpnext  end-code ?)              [unneeded] c@a+ ?(                                              code c@a+  ( -- c )  2A c, a , 5E c, 23 c, 16 c, 00 c,                               22 c, a , D5 c, jpnext  end-code ?)        ( heap )                                                        also forth definitions                                          need vocabulary  need wid-of                                    vocabulary heap-voc  wid-of heap-voc constant heap-wordlist     also heap-voc definitions                                       0 1 2 um/mod nip 1- constant maxpos                             256 cells constant heapsize                                     4 cells 1- constant hysteresis                                  3 cells constant headsize                                       : adjustsize ( n -- n)  headsize +  hysteresis or  1+  ;        0 adjustsize constant overhead                                  create sentinel  here cell+ ,  maxpos ,  0 ,  0 ,               create heap  heapsize allot                                     variable nextnode  -->                                                                                                                                                                          ( heap )                                                        : >size ( addr1 -- addr2)  cell+  ;                             : >prev ( addr1 -- addr2)  [ 2 cells ] literal +  ;             : init-heap (  )                                                  heap dup nextnode !                                             dup dup !                                                       dup heapsize  over >size !                                      >prev !  ;                                                    init-heap                                                       : attach ( addr)                                                  >prev @  dup sentinel rot !  sentinel >prev !  ;              : search  ( addr size -- addr|0)                                  >r begin 2@ swap R@ < invert until                              r> drop  >prev @  ;                                           : detach ( addr)  dup >prev @ !  ;                              -->                                                             ( heap )                                                        : findspace ( size -- addr|0)  nextnode @                                  dup      attach                                                 dup rot  search                                                 swap     detach  ;                                   : fits ( size addr -- flag)  >size @ swap -  overhead  <  ;     : togglesize ( addr)  >size dup @  negate swap !  ;             : next! ( addr)  nextnode !  ;                                  : sizes! ( size addr -- addr)                                     2dup + >r  >size 2dup @ swap -                                  R@ >size !   swap negate swap !  r>  ;                        : links! ( addr1 addr2)                                           2dup swap @  2dup  swap !  >prev !                              2dup >prev !   swap !  ;                                      : newnode ( size addr)  tuck sizes!  links!  ;                  -->                                                             ( heap )                                                        : makenode ( size addr)                                           2dup fits if  togglesize drop  else  newnode  then  ;         forth-wordlist set-current                                      : allocate ( u -- addr ior)                                       dup 0< if  -59  \ `allocate` error code                              else  adjustsize                                                dup findspace                                                   dup if  dup next!                                                 tuck makenode                                                   headsize +  0                                                   else  drop -59  \ `allocate` error code                         then                                                          then  ;                                                  heap-wordlist set-current  -->                                                                                                  ( heap )                                                        : mergesizes ( addr1 addr2)                                       >size @ swap >size +!  ;                                      : mergelinks ( addr1 addr2)                                       @ 2dup swap !  >prev !  ;                                     : jiggle (  )                                                     nextnode @ @  >prev @  next!  ;                               : merge ( addr)                                                   dup @ 2dup mergesizes                                                mergelinks  jiggle  ;                                    : ?merge ( addr1 addr2)                                           >size @ 0> if                                                     dup dup @                                                       u< if  dup merge  then                                        then  drop  ;  -->                                                                                                            ( heap )                                                        : ?mergenext ( addr)  dup @ ?merge  ;                           : ?mergeprev ( addr)  >prev @ dup ?merge  ;                     forth-wordlist set-current                                      : free ( addr -- ior)                                             headsize -  dup togglesize  dup ?mergenext  ?mergeprev  0  ;  heap-wordlist set-current                                       variable stash                                                  : savelink ( addr)  @ stash !  ;                                : restorelink ( addr)  stash @  swap !  ;                       : fixprev ( addr)  dup >prev @ !  ;                             : fixnext ( addr)  dup @ >prev !  ;                             : fixlinks ( addr)  dup fixprev  dup fixnext  @ fixnext  ;      -->                                                                                                                                                                                             ( heap )                                                        : fixsize ( addr)                                                 dup >size @ 0>                                                  if  dup @  2dup <                                                   if    over - swap >size !  else  2drop  then                else  drop  then  ;                                           : fixsizes ( addr)  dup fixsize  >prev @ fixsize  ;             : repair ( addr)                                                  dup restorelink                                                 dup fixlinks  dup fixsizes                                      togglesize  ;                                                 : toobig? ( addr size -- flag)                                    swap  >size @  >  ;                                           -->                                                                                                                                                                                             ( heap )                                                        : copynode ( addr1 addr2)                                         over >size @  headsize -                                        rot  headsize + rot rot move  ;                               : enlarge ( addr1 size -- addr2 ior)                              over  ?mergeprev                                                allocate dup >r                                                 if  swap repair  else  tuck copynode  then  r>  ;             : adjust ( addr1 size1 -- addr2 size2)                            adjustsize >r                                                   headsize -                                                      dup savelink                                                    dup togglesize                                                  dup ?mergenext r>  ;                                          -->                                                                                                                             ( heap )                                                        forth-wordlist set-current                                      : resize ( addr1 u -- addr2 ior)                                  dup 0<  if  drop -61  \ `resize` error code                             else  adjust  2dup toobig?                                            if enlarge                                                      else  over makenode headsize +  0  then                   thencreate-heap )                                                 need value  need set-bit  need reset-bit  need bit?             need reserve  need alias                                        0 value heap  ( -- a )                                          8 constant address-unit-bits                                    16 value /chunk \ bytes per chunk                               : groups ( n1 n2 -- n3 )  /mod swap 0<> abs +  ;                : bytes>chunks ( n1 -- n2 )  /chunk groups  ;                   : chunks>bytes ( n1 -- n2 )  address-unit-bits groups  ;        ' heap alias heap-chunks  ( -- a )                              : heap-unused-chunks  ( -- a )  heap-chunks cell+  ;            : heap-map  ( -- a )  heap-unused-chunks cell+  ;               : /heap-map  ( -- n )  heap-chunks @ chunks>bytes  ;            : heap-data  ( -- a ) heap-map /heap-map +  ;  -->                                                                                                                                              ( create-heap )                                                 : (mapbit)  ( n1 -- n2 ca )                                       address-unit-bits /mod heap-map +  ;                          : mapbit ( n1 -- a2 b n2 )  (mapbit) dup @ rot  ;               : used-chunk? ( n -- f )  (mapbit) @ swap bit?  ;               : use-chunk ( n -- )  mapbit set-bit swap !  ;                  : free-chunk ( n -- )  mapbit reset-bit swap !  ;               : allocated>chunks  ( a -- n )  cell- @  ;                      : allocated>index  ( a -- n )  heap-data - /chunk /  ;          : allocated>map  ( a -- n1 n2 )                                   dup allocated>index swap allocated>chunks  ;                  -->                                                                                                                                                                                                                                                                                                                             ( create-heap )                                                 : locate-chunks  ( n1 -- n1 n2 0 | ior )                          0 tuck  ( n2 n1 count )                                         heap-chunks @ 0 do  ( n2 n1 count )                               i used-chunk? if  drop >r i 1+ r> 0  else  1+  then             2dup = if  drop swap 0 unloop exit  then                      loop  2drop drop -59  ;                                       : chunk>address  ( n1 -- a )  /chunk * heap-data +  ;           : (allocate)  ( n1 n2 -- a )                                      dup chunk>address >r                                            swap bounds do  i use-chunk  loop                               r>  ;                                                         -->                                                                                                                                                                                                                                                             ( create-heap )                                                 : create-heap ( n "name" -- )                                     create  bytes>chunks dup ,  0 ,                                         dup chunks>bytes reserve drop                                   /chunk * allot  ;                                     : allocate  ( n -- a ior )                                        bytes>chunks locate-chunks ?dup ?exit  (allocate) 0  ;        : free  ( a -- ior )                                              allocated>map dup >r                                            bounds do  i free-chunk  loop                                   r> heap-unused-chunks +! 0  ;                                 : empty-heap  ( -- )  heap-chunks @ 0 do  i free-chunk  loop  ; : .heap ( -- )                                                    heap-chunks @ 0 do                                                i used-chunk? if  'x'  else  '-'  then  emit                  loop  ;                                                       ( !s c!s )                                                      : !s  ( x a -- )  system-bank ! default-bank  ;                 : c!s  ( c ca -- )  system-bank c! default-bankget-default-bank set-default-bank )                           : get-default-bank  ( -- +n )  default-bank# c@  ;              : set-default-bank  ( +n -- )  default-bank# ccode-bank )                                                   need save-here  need call  need there                           variable cp  bank-start cp !  \ code pointer                    : code-here   ( -- a )  cp @  ;                                 : code-there  ( a -- )  cp !  ;                                 : code-allot  ( n -- )  cp +!  ;                                variable code-bank#  3 code-bank# !                             : code-bank  ( -- )  code-bank# @ bank  ;                       : code-bank{  ( -- )  save-here code-here there code-bank  ;    : }code-bank  ( -- )  default-bank restore-here  ;              : ?bank  ( -- )  bank-start here u< #-276 ?throw  ;             : code-bank-caller  ( i*x a "name" -- j*x )                       create ?bank ,                                                  does>  ( -- )  ( pfa ) @ code-bank call default-bank  ;       ?bank                                                                                                                           ( farhl questionnextbank questionpreviousbank )                 get-current also assembler definitions                          [unneeded] farhl ?\ ' far 2+ @ constant farhl  ( -- a )         [unneeded] questionnextbank                                     ?\ ' ?next-bank 2+ @ constant questionnextbank  ( -- a )        [unneeded] questionpreviousbank                                 ?\ ' ?previous-bank 2+ @ constant questionpreviousbank  ( -- a) previous set-currentfar2@ far2! far@+ farc@+ far+! farc+! far2@+ )                [unneeded] far2@                                                ?\ : far2@  ( a -- d )  dup cell+ far@ swap far@  ;  exit       [unneeded] far2!                                                ?\ : far2!  ( d a -- )  swap over far! cell+ far!  ;  exit      [unneeded] far@+                                                ?\ : far@+  ( a -- a' x )  dup cell+ swap far@  ;  exit         [unneeded] farc@+                                               ?\ : farc@+  ( ca -- ca' c )  dup char+ swap farc@  ;  exit     [unneeded] far+!                                                ?\ : far+!  ( n a -- )  dup far@ rot + swap far!  ;  exit       [unneeded] farc+!                                               ?\ : farc+!  ( c a -- )  dup farc@ rot + swap farc!  ;  exit    [unneeded] 2@+ ?exit  need far2@                                : far2@+  ( a -- a' xd )                                          dup [ 2 cells ] literal + swap far2@  ;                       ( move>far move<far cmove>far cmove<far )                       need ?(                                                         [unneeded] move>far ?(                                          : move>far  ( a1 a2 len -- )                                      2* bounds ?do  dup @ i far! cell+                                         cell +loop  drop  ;  exit ?)                        [unneeded] move<far ?(                                          : move<far  ( a1 a2 len -- )                                      2* bounds ?do  dup far@ i ! cell+                                         cell +loop  drop  ;  exit ?)                        [unneeded] cmove>far ?(                                         : cmove>far  ( ca1 ca2 len -- )                                   bounds ?do  dup c@ i farc! char+  loop  drop  ;  exit ?)      [unneeded] cmove<far ?(                                         : cmove<far  ( ca1 ca2 len -- )                                   bounds ?do  dup farc@ i c! char+  loop  drop  ;  exit ?)      ( farallot fartype-ascii )                                      [unneeded] farallot                                             ?\ : farallot  ( n -- )  hp +!  ;  exit                         need ascii-char?  need control-char?                            : fartype-ascii  ( ca len -- )                                    bounds ?do                                                        i farc@ dup dup ascii-char? 0= swap control-char? or            if  drop '.'  then  emit                                      loopc+! c-! )                                                  need ?(                                                         [unneeded] -! ?(                                                code -!  ( n|u a -- )                                             E1 c, D1 c, 7E c, 90 03 + c, 70 07 + c, 23 c,                   7E c, 98 02 + c, 70 07 + c, jpnext  end-code ?)               [unneeded] c+! ?(                                               code c+!  ( c ca -- )                                             E1 c, D1 c, 78 03 + c, 86 c, 70 07 + c, jpnext  end-code ?)   [unneeded] c-! ?(                                               code c-!  ( c ca -- )                                             E1 c, D1 c, 7E c, 90 03 + c, 70 07 + c, jpnext  end-code ?)                                                                                                                                                                                                                                                                   ( c1+! c1-! 1+! 1-! )                                           [unneeded] c1+!                                                 ?\  code c1+!  ( ca -- )  E1 c, 34 c, jpnext  end-code  exit    [unneeded] c1-!                                                 ?\  code c1-!  ( ca -- )  E1 c, 35 c, jpnext  end-code  exit    need ?(                                                         [unneeded] 1+! ?(                                               code 1+!  ( a -- )                                                E1 c, 5E c, 23 c, 56 c, 13 c, 70 02 + c, 2B c, 70 03 + c,       jpnext end-code  ?)                                           [unneeded] 1-! ?(                                               code 1-!  ( a -- )                                                E1 c, 5E c, 23 c, 56 c, 1B c, 70 02 + c, 2B c, 70 03 + c,       jpnext end-code  ?)                                                                                                                                                                           ( @+ 2@+ c@+ )                                                  [unneeded] @+                                                   ?\ : @+  ( a -- a' x )  dup cell+ swap @  ;                     [unneeded] 2@+                                                  ?\ : 2@+  ( a -- a' xd )  dup [ 2 cells ] literal + swap 2@  ;  [unneeded] c@+ ?exit                                            code c@+  ( ca -- ca' c )                                         E1 c, 7E c, 23 c, E5 c, C3 c, pusha ,  end-coden, nn, n@ nn@ n! nn! )                                        [unneeded] n, ?\ : n,  ( xu..x1 u -- )  0 ?do  ,  loop  ; exit  need ?(  [unneeded] nn, ?(  need need-here  need-here n,        : nn,  ( xu..x1 u -- )  dup , n,  ; ?)                          [unneeded] n@ ?(                                                : n@  ( a u -- xu..x1 )                                           tuck 1- cells +  \ point _a_ to _xu_                            swap 0 ?do  dup i cells - @ swap  loop  drop  ; exit ?)       [unneeded] nn@ ?( need need-here  need-here n@                  : nn@  ( a -- x1..xu u | 0 )  dup @ >r cell+ r@ n@ r>  ; ?)     [unneeded] n! ?(                                                : n!  ( xu..x1 u a -- )                                           swap 0 ?do  dup >r ! r> cell+  loop  drop  ; exit ?)          [unneeded] nn! ?( need need-here  need-here n!                  : nn!  ( xu..x1 u a -- )  2dup ! cell+ n!  ; ?)                                                                                 ( bit>mask bit? set-bit reset-bit )                             [unneeded] bit? [unneeded] set-bit? [unneeded] reset-bit?       [unneeded] bit>bask and and and                                 ?\ need lshift  : bit>mask  ( n -- b )  1 swap lshift  ;        [unneeded] bit?                                                 ?\ : bit? ( b n -- f )  bit>mask and 0<> ;                      [unneeded] set-bit?                                             ?\ : set-bit ( b1 n -- b2 )  bit>mask or ;                      [unneeded] reset-bit?                                           ?\ : reset-bit ( b1 n -- b2 )  bit>mask invert and ;                                                                                                                                                                                                                                                                                                                                                                                                            ( c@test-bits c!toggle-bits )                                   need ?(                                                         [unneeded] c@test-bits ?(                                       code c@test-bits  ( b1 ca -- b2 )                                 E1 c, D1 c, 78 03 + c, A6 c, C3 c, pusha , jpnext end-code ?) [unneeded] c!toggle-bits ?(                                     code c!toggle-bits  ( b ca -- )                                   E1 c, D1 c, 7E c, A8 03 + c, 70 07 + c, jpnext end-codeexchange reserve alloted align aligned )                      [unneeded] exchange                                             ?\ : exchange  ( n1 a -- n2 )  dup @ rot rot !  ;               [unneeded] reserve                                              ?\ : reserve  ( n -- a )  here tuck over erase allot  ;         [unneeded] alloted                                              ?\ : allotted  ( n -- a )  here swap allot ;                    [unneeded] align                                                ?\ need alias  ' noop alias align immediate                     [unneeded] aligned                                              ?\ need alias  ' noop alias aligned immediate                                                                                                                                                                                                                                                                                                                                                   ( /! *! 2/! 2*! )                                               [unneeded] /!                                                   ?\ : /!  ( n a -- )  tuck @ swap / swap !  ;                    [unneeded] *!                                                   ?\ : *!  ( n a -- )  tuck @ swap * swap !  ;                    [unneeded] 2*!                                                  ?\ : 2*!  ( a -- )  dup @ 2* swap !  ;                          [unneeded] 2/!                                                  ?\ need 2/  : 2/!  ( a -- )  dup @ 2/ swap !  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( @p !p )                                                       need ?(                                                         [unneeded] @p ?(                                                code @p  ( a -- b )                                               E1 c,  C5 c,  48 05 + c,  40 04 + c,  ED c, 68 c,               C1 c,  26 c, 00 c,  jppushhl  end-code                        ?)                                                              [unneeded] !p ?(                                                code !p  ( b a -- )                                               E1 c,  D1 c,  C5 c,  48 05 + c,  40 04 + c,  ED c, 59 c,        C1 c,  jpnext  end-code                                       ?)                                                                                                                                                                                                                                                                                                                              ( begin-module: begin-module public private end-module )        need get-order  need wordlist                                   get-order get-current                                           wordlist dup set-current  >order                                variable current-wid  variable module-wid                       : (begin-module)  ( -- wid )                                      get-current current-wid !                                       wordlist dup module-wid ! dup >order  ;                       set-current                                                     : public  ( -- )  current-wid @ set-current  ;                  : private  ( -- )  module-wid @ set-current  ;                  : begin-module:  ( "name" -- )                                    (begin-module) constant private  ;                            : begin-module  ( -- )  (begin-module) drop private  ;          : end-module  ( -- )  public previous  ;                        set-order                                                       ( transient[ )                                                  need >>link  need there                                         variable old-dp                                                 variable old-hp                                                 variable old-latest                                             variable old-voc-link                                           : transient[  ( u -- )                                            here        old-dp !                                            hp@         old-hp !                                            latest      old-latest !                                        voc-link @  old-voc-link !                                      0 swap - there  ;                                             : ]transient  ( -- )  old-dp @ there  old-hp @ hp!  ;           : -transient  ( -- )                                              old-voc-link @ voc-link !                                       old-latest @ old-hp @ >>link !s  ;                            ( module )                                                      need alias  need >>link                                         ' current-latest alias internal  ( -- nt )                      ' hp@ alias external  ( -- a )                                  : module  ( nt xtp -- )  >>link !sprivatize )                                                   need name<name  need abort"                                     variable private-start  variable private-stop                   : private{  ( -- )                                                current-latest private-start !  private-stop off  ;           : }private  ( -- )                                                private-stop @ abort" Extra }private"                           current-latest private-stop !  ;                              : privatize  ( -- )                                               private-start @ 0= abort" Missing private{"                     private-stop @ dup 0= abort" Missing }private"                  begin   dup private-start @ u>                                  while   dup hide name<name                                      repeat  drop  private-start off  private-stop off  ;                                                                                                                                          ( benschop-multitasker )                                        code switch                                                       rptr ldhl h push d push h clr sp addp exde uptr                 ldhl h dec d m ld h dec e m ld h dec begin h dec m d ld h       dec m e ld exde m a ld a or z until                             h inc m e ld h inc  m d ld h inc uptr sthl  exde ldsp           d pop h pop rptr  sthl jpix end-code                          27028 constant uptr  variable task-link  variable first-task    : task:  ( "name" -- )                                            create here $243 + , ( eerste adres ip)                         task-link @ ,  here task-link !  ( link naar vorige taak)       here first-task @ !  ( maak cirkel rond)                        1 c, 0 , ( nog niet starten&ruimte sp)                          uptr @ here $3C cmove  here 23c + here $0E + ! here             $013C + here $10 + ! $023C allot ( user-variabelen+stack)       smudge ] current @ context ! !csp -->                         ( benschop-multitasker )                                          does> dup $15 + @ 4 - ( stackpointer)                           2dup swap 5 + !  2dup swap @ swap !  ( ip op stack)             over $17 + @ swap 2+ !  ( rp op stack)                          0 swap 4 + c! ( runnable) ;                                   : terminate 2 uptr @ 3 - c!  switch  ;                          : sleep     3 uptr @ 3 - c!  switch  ;                          : stop  ( tid -- )  4 swap 7 + c!  ;                            : start ( tid -- )  0 swap 7 + c!  ;                            : ;task compile terminate ?csp smudge [compile] [ ; immediate   task: main-task                                                  cr ." multi-tasking operating system"                           begin cr &> emit query                                          interpret state @ 0= if ." ok" then 0 until ;task              ' main-task 5 + first-task !  ' main-task 7 + task-link !       task-link @ first-task @ !  -->                                 ( benschop-multitasker )                                        code (start)                                                      ' switch h ldp# (wait) sthl first-task @ 5 +                    h ldp# uptr sthl h dec m d ld h dec m e ld exde ldsp d pop      h pop rptr sthl jpix end-code                                 : startup  ( -- )  main-task (start)  ;                         : tasks  ( -- )                                                   uptr @ dup 27039 = cr if  ." multitasking not active"  else     dup 10 - >name id. 6 emit ." active"                            begin  5 - @ 3 + dup uptr @ -  while                              cr dup 10 - >name id. 6 emit dup 3 -                            c@ dup 0 = if ." runnable" then                                    dup 1 = if ." new"      then                                    dup 2 = if ." terminated" then                                  dup 3 = if ." sleeping" then                                        4 = if ." stopped" then  repeat then drop  ;         ( jiffy! jiffy@ -jiffy )                                        need !dosvar  need @dosvar                                      : jiffy!  ( a -- )  16 !dosvar  ;                               : jiffy@  ( -- a )  16 @dosvar  ;                               : -jiffy  ( -- )  8335 jiffymuench-koh-multitasker )                                      get-current forth-wordlist set-current  need user               user tos       \ top of stack                                   user status    \ `branch` or `wake`                             user follower  \ address of next task's `status`                : pause  ( -- )                                                   rp@ sp@ tos !  follower @ >r  ; compile-only                  : wake  ( -- )                                                    r> userp !  \ `userp` points `follower` of current task         tos @ sp! rp!  ; compile-only                                 : stop  ( -- )  ['] branch status ! pause  ;                    : 's  ( tid a -- a' )                                             userP @ - swap  ( offset tid )  @ +  ;                        : sleep  ( tid -- )  status 's  ['] branch  swap !  ;           : awake  ( tid -- )  status 's  ['] wake  swap !  ;             -->                                                             ( muench-koh-multitasker )                                      : task  ( user_size ds_size rs_size "name" -- )                   create here >r  \ user_size ds_size rs_size  r: tid             0 ,  \ reserve space for `userp` pointer                        allot here cell- >r  ( user_size ds_size ) ( r: tid rp0 )       allot here cell- >r  ( user_size ) ( r: tid rp0 sp0 )           [ 6 cells ] literal + allot  \ minimum user variables           here cell-  ( user_pointer   ) ( r: tid rp0 sp0 )               r> , r> , ( store sp0 and rp0  )                                r@ !  \ store `userp` pointer                                   lastname r> taskname 's !  ;                                  -->                                                                                                                                                                                                                                                                                                                             ( muench-koh-multitasker )                                      : build  ( tid -- )                                               dup sleep                       \ sleep new task                follower @ over follower 's !   \ link new task                 status 's follower !  ;         \ link old task               : activate  ( tid -- )                                            dup 2@        ( tid sp rp )                                     r> over !      \ save entry at rp                               over !         \ save rp at sp                                  over tos 's !  \ save sp in tos                                 awake ; compile-only                                          -->                                                                                                                                                                                                                                                                                                                             ( muench-koh-multitasker )                                      : tasks  ( -- )                                                   follower      \ current task's follower                         begin                                                             cr dup [ taskname follower - ] literal + @ .name                dup cell- @ ['] wake =                                          if  ." awaked "  else  ." sleeping "  then                      @ cell+     \ next task's follower                                dup follower =                                              until drop cr ;                                               set-current                                                                                                                                                                                                                                                                                                                                                                                     ( defined? parse-char parse-all )                               [unneeded] defined?                                             ?\ : defined?  ( ca len -- f )  undefined? 0=  ; exit           [unneeded] parse-char                                           ?\ : parse-char  ( "c"  -- c )  stream drop c@ 1 parsed  ; exit need ?(  [unneeded] parse-all ?(                                : parse-all  ( "ccc<eol>" -- ca len )                             stream dup parsed save-stringexecute-parsing string>source evaluate )                      need ?(                                                         [unneeded] string>source ?(                                     : string>source  ( ca len -- )                                    blk off  (source-id) on  set-source  ; ?)                     [unneeded] execute-parsing ?( need need-here                    need-here string>source                                         : execute-parsing  ( ca len xt -- )                               nest-source >r string>source r> execute unnest-source  ; ?)   [unneeded] evaluate ?(  need need-here                          need-here execute-parsing                                       : evaluate  ( i*x ca len -- j*x )                                 ['] interpret execute-parsing  ; ?)                                                                                                                                                                                                                           ( char [char] word )                                            [unneeded] char [unneded] char and                              ?\ : char  ( "name" -- c )  parse-name drop c@  ;               [needed] char ?exit                                             need ?(  [uneeded] [char]  ?(                                   : [char]  ( "name" -- c )                                         char postpone cliteral  ; immediate compile-only  ?)          [unneeded] word                                                 : word  ( c "<chars>ccc<char>" -- ca )                            dup  stream                 ( c c ca len )                      dup >r   rot skip           ( c ca' len' )                      over >r  rot scan           ( ca" len" )                        dup if  char-  then         \ skip trailing delimiter           r> r> rot -   >in +!        \ update `>in`                      tuck -  ( ca' len ) here place  here ( ca )                     bl over count + c!  ; ?)    \ append trailing blank           ( save-input restore-input )                                    : save-input ( -- xn ... x1 n )                                   source-id 0>                                                    if tib #tib @ 2dup c/l 2 + allocate throw dup >r swap cmove        r> to tib  >in @                                                source-id file-position throw                                   5                                                            else blk @ >in @ 2 thensave-input restore-input )                                    : restore-input ( xn ... x1 n -- f )                              source-id 0>                                                    if dup 5 <> if 0 ?do drop loop -1 exit then                        drop source-id reposition-file ?dup                             if >r 2drop drop r> exit then                                   >in ! #tib ! to tib false                                    else dup 2 <> if 0 ?do drop loop -1 exit then                      drop >in ! blk ! false                                       then                                                            ;                                                                                                                                                                                                                                                                                                                                                                                             ( black blue red magenta green cyan yellow white )              0 cconstant black    1 cconstant blue   2 cconstant red         3 cconstant magenta  4 cconstant green  5 cconstant cyan        6 cconstant yellow   7 cconstant whitepapery brighty flashy )                                       [unneeded] papery                                               ?\ : papery   ( color -- paper-attribute )           8 *  ;     [unneeded] brighty                                              ?\ : brighty  ( attribute -- brighty-attribute )   64 or  ;     [unneeded] flashy                                               ?\ : flashy   ( attribute -- flashy-attribute )   128 orcolor@ color! color-mask@ color-mask! color 2color )          need os-attr-t  need os-mask-t                                  : color@  ( -- b )  os-attr-t c@  ;                             : color!  ( b -- )  os-attr-t c!  ;                             : color-mask@  ( -- b )  os-mask-t c@  ;                        : color-mask!  ( b -- )  os-mask-t c!  ;                        : color  ( b "name" -- )                                          create c,  does>  ( -- ) ( pfa ) c@ color!  ;                 : 2color  ( b1 b2 "name" -- )                                     create 2,  does>  ( -- ) ( pfa ) 2@ color! color-mask!  ;                                                                                                                                                                                                                                                                                                                                                                                                     ( permcolor@ permcolor! permcolor-mask@ permcolor-mask! )       need os-attr-p  need os-mask-p                                  : permcolor@  ( -- b )  os-attr-p c@  ;                         : permcolor!  ( b -- )  os-attr-p c!  ;                         : permcolor-mask@  ( -- b )  os-mask-p c@  ;                    : permcolor-mask!  ( b -- )  os-mask-p c!  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( permcolor 2permcolor )                                        need permcolor!  need permcolor-mask!                           : permcolor  ( b "name" -- )                                      create ,                                                        does>  ( -- ) ( pfa ) @ permcolor!  ;                         : 2permcolor  ( b1 b2 "name" -- )                                 create 2,                                                       does>  ( -- ) ( pfa ) 2@ permcolor! permcolor-maskpaper@ paper! ink@ ink! )                                     need lshift  need rshift  need color@  need color!              : paper>  ( n1 -- n2 )  %00111000 and 3 rshift  ;               : >paper  ( n1 -- n2 )  %00000111 and 3 lshift  ;               : paper@  ( -- b )  color@ paper>  ;                            : paper!  ( b -- )  >paper color@ %11000111 and or color!  ;    : ink@  ( -- b )                                                  color@ %00000111 and  ;                                       : ink!  ( b -- )                                                  %00000111 and color@ %11111000 and or color!  ;                                                                                                                                                                                                                                                                                                                                                                                                               ( bright@ bright! flash! flash@ )                               need color@  need color!                                        : bright@  ( -- f )                                               color@ %01000000 and 0=  ;                                    : bright!  ( f -- )                                               %10000000 and color@ %10111111 and or color!  ;               : flash@  ( -- f )                                                color@ %10000000 and 0=  ;                                    : flash!  ( f -- )                                                %10000000 and color@ %01111111 and or color!  ;                                                                                                                                                                                                                                                                                                                                                                                                               ( inverse overprint )                                           code inverse  ( f -- )                                            E1 c,  78 04 + c,  B0 05 + c,  28 c, 06 c,                      FD c, CB c, 57 c, C6 08 02 * + c,  jpnext                       FD c, CB c, 57 c, 86 08 02 * + c,  jpnext  end-code           code overprint  ( f -- )                                          E1 c,  78 04 + c,  B0 05 + c,  28 c, 06 c,                      FD c, CB c, 57 c, C6 08 00 * + c,  jpnext                       FD c, CB c, 57 c, 86 08 00 * + c,  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( printer tabulate )                                            [unneeded] printer                                              ?\ : printer  ( -- )  3 channel printing on  ;  exit            need column                                                     variable /tabulate  8 /tabulate !                               : tabulate  ( -- )  column 1+ /tabulate @ tuck mod - spacescr' 'tab' 'bs' crs tab tabs backspace backspaces )           [unneeded] 'tab' [unneeded] tab [unneeded] tabs and and         ?\ 6 constant 'tab'                                             [unneeded] 'bs' [unneeded] backspace [unneeded] backspaces      and and ?\ 8 constant 'bs'                                      [unneeded] 'cr' [unneeded] crs and ?\ 13 constant 'cr'          [unneeded] tab [unneeded] tabs and                              ?\ : tab  ( -- )  'tab' emit  ;                                 [unneeded] backspace [unneeded] backspaces and                  ?\ : backspace    ( -- )  'bs'  emit  ;                         [unneeded] crs  ?\ : crs   ( n -- )  'cr'  emits  ;             [unneeded] tabs ?\ : tabs  ( n -- )  'tab' emits  ;             [unneeded] backspaces                                           ?\ : backspaces    ( n -- )  'bs'  emits  ;                                                                                                                                                     ( column last-column row last-row at-x at-y )                   [unneeded] column [unneeded] last-column and                    [unneeded] at-y and                                             ?\ : column  ( -- col )  xy drop  ;                             [unneeded] last-column                                          ?\ : last-column  ( -- row  )  column 1-  ;                     [unneeded] row [unneeded] last-row [unneeded] at-x and and      ?\ : row  ( -- row )  xy nip  ;                                 [unneeded] last-row                                             ?\ : last-row  ( -- row  )  row 1-  ;                           [unneeded] at-x                                                 ?\ : at-x  ( col -- )  row at-xy  ;                             [unneeded] at-y                                                 ?\ : at-y  ( row -- )  column swap at-xy  ;                                                                                                                                                     ( print )                                                       need last-row  need /name                                       variable #printed   \ Printed chars in the current line.        variable #indented   \ Indented chars in the current line.      : printed+  ( u -- )  #printed +!  ;                            : indented+  ( u -- )  #indented +!  ;                          : (.word) ( ca len -- )  dup printed+ type  ;                   : .char  ( c -- )  emit 1 printed+  ;                           : not-at-home?  ( -- 0f )  xy +  ;                              : no-printed  ( -- )  #printed off #indented off  ;             : print-home  ( -- )  home no-printed  ;                        : print-page  ( -- )  page print-home  ;                        -->                                                                                                                                                                                                                                                             ( print )                                                       : print-start-of-line  ( -- )                                     #printed @ trm+move-cursor-left no-printed  ;                 : at-last-start-of-line?  ( -- f )                                xy last-row = swap 0= and  ;                                  : not-at-start-of-line?  ( -- f )  column 0<>  ;                : print-cr?  ( -- f )                                             not-at-home? not-at-start-of-line? and                          ;                                                             defer (print-cr) ' (print-cr) ' cr defer!                       : print-cr print-cr? ?? (print-cr) no-printed ;                 variable print-width                                            -->                                                                                                                                                                                                                                                             ( print )                                                       : previous-word?  ( -- f )  #printed @ #indented @ >  ;         : ?space  ( -- ) previous-word? if  bl .char  then  ;           : current-print-width  ( -- u )                                   print-width @ ?dup 0= ?? cols  ;                              : too-long?  ( u -- f )                                           1+ #printed @ + current-print-width >  ;                      : .word  ( ca len -- )                                            dup too-long? if  print-cr  else  ?space  then  (.word)  ;    -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( print )                                                       : (print-indentation)  ( u -- )                                   dup trm+move-cursor-right dup indented+ printed+  ;           : print-indentation  ( u -- )  ?dup ?? (print-indentation)  ;   : >word  ( ca1 len1 ca2 len2 -- ca2 len2 ca1 len4 )               tuck 2>r -  2r> 2swap  ;                                      : first-word  ( ca1 len1 -- ca2 len2 ca3 len3 )  /name >word  ; : (print)  ( ca1 len1 -- ca2 len2 )  first-word .wordprint )                                                       : print  ( ca len --)                                             begin  dup   while  (print)  repeat  2droptype-ascii )                                                  need ascii-char?  need control-char?                            : type-ascii  ( ca len -- )                                       bounds ?do                                                        i c@ dup dup ascii-char? 0= swap control-char? or               if  drop '.'  then  emit                                      loopdrop-type padding-spaces type-left )                          [unneeded] drop-type                                            ?\ : drop-type  ( ca len x -- )  drop type  ;  exit             : padding-spaces  ( len1 len2 -- )                                swap - 0 max spaces  ;                                        [needed] padding-spaces ?exit                                   : type-left  ( ca len1 len2 -- )                                  2dup 2>r min type 2r> padding-spacestype-right )                                                  need drop-type  need <=>                                        : type-right-crop  ( ca len1 len2 -- )                            over swap - /string type  ;                                   : type-right-fit  ( ca len1 len2 -- )  over - spaces type  ;          ' type-right-fit ,                                        here  ' drop-type ,                                                   ' type-right-crop ,                                       constant type-right-cases                                       : type-right  ( ca len1 len2 -- )                                 2dup <=> cells type-right-cases + perform  ;                                                                                                                                                                                                                                                                                                                                                  ( type-center )                                                 need drop-type  need <=>                                        : type-center-fit  ( ca len1 len2 -- )                            over - 2 /mod dup >r + spaces type r> spaces  ;               : type-center-crop  ( ca len1 len2 -- )                           over swap - 2 /mod dup >r + /string r> - type  ;                    ' type-center-fit ,                                       here  ' drop-type ,                                                   ' type-center-crop ,                                      constant type-center-cases                                      : type-center  ( ca len1 len2 -- )                                2dup <=> cells type-center-cases + perform  ;                                                                                                                                                                                                                                                                                 ( rnd random )                                                  2variable rnd-seed  $0111 rnd-seed !                            : rnd  ( -- u )                                                   rnd-seed 2@ $62DC um* rot 0 d+ over rnd-seed 2!  ;            : random  ( n -- 0..n-1 )  rnd um* niprandom-range )                                                need random                                                     : random-range ( n1 n2 -- n3 ) over - 1+ randomfast-rnd fast-random )                                        need z80-asm  need os-seed                                      code fast-rnd  ( -- u )                                           os-seed fthl                                                    hl de ldp                                                       hl addp  de addp  hl addp  de addp  hl addp                     de addp  hl addp  hl addp  hl addp  hl addp  de addp            h inc  hl incp                                                  os-seed sthl                                                    jppushhl   end-code                                           : fast-random  ( n -- 0..n-1 )  fast-rnd um* nip  ;                                                                                                                                                                                                                                                                                                                                             ( crnd crandom )                                                need os-seed                                                    code crnd  ( -- b )                                               os-seed fthl                                                    ED c, 5F c,  a d ld  m e ld                                     de addp  l add  h xor                                           os-seed sthl                                                    pusha jp                                                        end-code                                                      : crandom  ( b -- 0..b-1 )  crnd um* nip  ;                                                                                                                                                                                                                                                                                                                                                                                                                     ( randomize randomize0 )                                        [defined] randomize                                             ?\  need os-seed  : randomize  ( n -- )  os-seed !  ;           [needed] randomize ?exit                                        need os-frames                                                  : randomize0  ( n -- )                                            ?dup 0=  if  os-frames @  then  randomizen>r )                                                         need z80-asm                                                    code n>r  ( x1..xn n -- ) ( R: -- x1..xn n )                      exx                                                             bc pop  0000 bc stp  |mark                                      rp fthl                                                         begin  bc tstp  nz while                                          de pop  hl decp  d m ld  hl decp  e m ld  bc decp             repeat                                                          0000 de ldp# |resolve                                           hl decp  d m ld  hl decp  e m ld                                rp sthl  exx  jpnext                                            end-code                                                      need nr>                                                                                                                                                                                        ( nr> )                                                         need z80-asm                                                    code nr>  ( -- x1..xn n ) ( R: x1..xn n -- )                      exx                                                             rp fthl                                                         m c ld  hl incp  m b ld  hl incp                                0000 bc stp  |mark                                              begin  bc tstp  nz while                                          m e ld  hl incp  m d ld  hl incp  de push  bc decp            repeat                                                          rp sthl  exx                                                    0000 hl ldp# |resolve                                           jppushhl                                                        end-code                                                      need n>r                                                                                                                        ( rdepth r'@ )                                                  [unneeded] rdepth                                               ?\ : rdepth  ( -- n )  rp@ rp0 @ - -2 /  ;                      [unneeded] r'@ ?exit                                            : r'@  ( -- x1 ) ( R: x1 x2 -- x1 x2 )                            r> 2r@ drop swap >r  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( 2rdrop )                                                      code 2rdrop  ( R: x1 x2 -- )                                      2A c, rp ,                                                      11 c, 02 cells ,                                                19 c,                                                           22 c, rp ,                                                      jpnext                                                          end-codedup>r )                                                       code dup>r  ( x -- x ) ( R: -- x )                                D1 c, D5 c,                                                     C3 c, ' >r 1+ ,                                                 end-codemode32 )                                                      need columns  need rows  need set-font  need set-mode-output    : mode32  ( -- )                                                  [ latestxt ] literal current-mode !                             15360 set-font  2548 set-mode-output                            32 to columns  24 to rows                                       ['] mode32-xy ['] xy defer!                                     ['] mode32-at-xy ['] at-xy defer!  ;                          ' mode32 ' default-mode defer!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( mode42 banked-mode42 )                                        need mode32  need <file-as-is need (mode42 need [if]            [needed] mode42 [if]  need set-mode-output                      : mode42  ( -- )  [ latestxt ] literal current-mode !                             (mode42 set-mode-output  ;                    get-drive 1 set-drive  s" pr42.bin" <file-as-is throw                                  s" ea5a.f42" <file-as-is throw                       set-drive                                           exit [then]                                                     need set-banked-mode-output  need code-bank                     : banked-mode42  ( -- )  [ latestxt ] literal current-mode !                             (mode42 set-banked-mode-output  ;      code-bank{  get-drive 1 set-drive                                           s" pr42.bin" <file-as-is throw                                  s" ea5a.f42" <file-as-is throw                                  set-drive  }code-bank                               ( (mode42 )                                                     need columns  need rows  need set-font                          [defined] (at-xy)                                               ?\ : (at-xy)  ( col row -- )  22 emit swap emit emit  ;         : mode42-xy  ( -- col row )  0 0  ;  \ XXX TODO                 : (mode42  ( -- a )                                               42 to columns  24 to rows                                       ['] mode42-xy ['] xy defer!                                     ['] (at-xy) ['] at-xy defer!                                    [ 64600 256 - ] literal set-font 63900  ;                                                                                                                                                                                                                                                                                                                                                                                                                     ( mode64 )                                                      need mode32  need <file-as-is  need 4x8font                     get-drive 1 set-drive                                           s" pr64.bin" <file-as-is throw                                  set-drive                                                       [defined] (at-xy)                                               ?\ : (at-xy)  ( col row -- )  22 emit swap emit emit  ;         : mode64-xy  ( -- col row )  0 0  ;  \ XXX TODO                 : mode64  ( -- )                                                  [ latestxt ] literal current-mode !                             64 to columns  24 to rows                                       ['] mode64-xy ['] xy defer!                                     ['] (at-xy) ['] at-xy defer!                                    4x8font set-font  60000 set-mode-output  ;                                                                                                                                                    ( mode64 )                                                      need z80-asm                                                    create mode64-at-flag 0 c,                                      create mode64-column 0 c,                                       create mode64-row 0 c,                                          variable mode64-chars                                           code mode64-emit  ( -- )                                          b a ld                                                          here 1+ 0 unresolved !  \ address of at_flag                    0 a ld#  and a                                                  z if  FF a ld#  then                                            end-code                                                      : mode64  ( -- )                                                  mode64-chars @ set-font  mode64-emit set-mode-outupt            ['] (at-xy) ['] at-xy defer!  ;                                                                                               ( 4x8font )                                                     create 4x8font  hex                                             02 c, 02 c, 02 c, 02 c, 00 c, 02 c, 00 c,  \  !                 52 c, 57 c, 02 c, 02 c, 07 c, 02 c, 00 c,  \ "#                 25 c, 71 c, 62 c, 32 c, 74 c, 25 c, 00 c,  \ $%                 22 c, 42 c, 30 c, 50 c, 50 c, 30 c, 00 c,  \ &'                 14 c, 22 c, 41 c, 41 c, 41 c, 22 c, 14 c,  \ ()                 20 c, 70 c, 22 c, 57 c, 02 c, 00 c, 00 c,  \ *+                 00 c, 00 c, 00 c, 07 c, 00 c, 20 c, 20 c,  \ ,-                 01 c, 01 c, 02 c, 02 c, 04 c, 14 c, 00 c,  \ ./                 22 c, 56 c, 52 c, 52 c, 52 c, 27 c, 00 c,  \ 01                 27 c, 51 c, 12 c, 21 c, 45 c, 72 c, 00 c,  \ 23                 57 c, 54 c, 56 c, 71 c, 15 c, 12 c, 00 c,  \ 45                 17 c, 21 c, 61 c, 52 c, 52 c, 22 c, 00 c,  \ 67                 22 c, 55 c, 25 c, 53 c, 52 c, 24 c, 00 c,  \ 89                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 22 c, 00 c, 00 c, 22 c, 02 c,  \ :;                 00 c, 10 c, 27 c, 40 c, 27 c, 10 c, 00 c,  \ <=                 02 c, 45 c, 21 c, 12 c, 20 c, 42 c, 00 c,  \ >?                 23 c, 55 c, 75 c, 77 c, 45 c, 35 c, 00 c,  \ @A                 63 c, 54 c, 64 c, 54 c, 54 c, 63 c, 00 c,  \ BC                 67 c, 54 c, 56 c, 54 c, 54 c, 67 c, 00 c,  \ DE                 73 c, 44 c, 64 c, 45 c, 45 c, 43 c, 00 c,  \ FG                 57 c, 52 c, 72 c, 52 c, 52 c, 57 c, 00 c,  \ HI                 35 c, 15 c, 16 c, 55 c, 55 c, 25 c, 00 c,  \ JK                 45 c, 47 c, 45 c, 45 c, 45 c, 75 c, 00 c,  \ LM                 62 c, 55 c, 55 c, 55 c, 55 c, 52 c, 00 c,  \ NO                 62 c, 55 c, 55 c, 65 c, 45 c, 43 c, 00 c,  \ PQ                 63 c, 54 c, 52 c, 61 c, 55 c, 52 c, 00 c,  \ RS                 75 c, 25 c, 25 c, 25 c, 25 c, 22 c, 00 c,  \ TU                 -->                                                             ( 4x8font )                                                     55 c, 55 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ VW                 55 c, 55 c, 25 c, 22 c, 52 c, 52 c, 00 c,  \ XY                 73 c, 12 c, 22 c, 22 c, 42 c, 72 c, 03 c,  \ Z[                 46 c, 42 c, 22 c, 22 c, 12 c, 12 c, 06 c,  \ \]                 20 c, 50 c, 00 c, 00 c, 00 c, 00 c, 0F c,  \ ^_                 20 c, 10 c, 03 c, 05 c, 05 c, 03 c, 00 c,  \ ?a                 40 c, 40 c, 63 c, 54 c, 54 c, 63 c, 00 c,  \ bc                 10 c, 10 c, 32 c, 55 c, 56 c, 33 c, 00 c,  \ de                 10 c, 20 c, 73 c, 25 c, 25 c, 43 c, 06 c,  \ fg                 42 c, 40 c, 66 c, 52 c, 52 c, 57 c, 00 c,  \ hi                 14 c, 04 c, 35 c, 16 c, 15 c, 55 c, 20 c,  \ jk                 60 c, 20 c, 25 c, 27 c, 25 c, 75 c, 00 c,  \ lm                 00 c, 00 c, 62 c, 55 c, 55 c, 52 c, 00 c,  \ no                 00 c, 00 c, 63 c, 55 c, 55 c, 63 c, 41 c,  \ pq                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 53 c, 66 c, 43 c, 46 c, 00 c,  \ rs                 00 c, 20 c, 75 c, 25 c, 25 c, 12 c, 00 c,  \ tu                 00 c, 00 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ vw                 00 c, 00 c, 55 c, 25 c, 25 c, 53 c, 06 c,  \ xy                 01 c, 02 c, 72 c, 34 c, 62 c, 72 c, 01 c,  \ z{                 24 c, 22 c, 22 c, 21 c, 22 c, 22 c, 04 c,  \ |}                 56 c, A9 c, 06 c, 04 c, 06 c, 09 c, 06 c,  \ ~?                 decimalcolumns rows set-mode-output set-font )                       [unneeded] columns [unneeded] rows and                          ?\ need value  32 value columns  24 value rows  exit            [unneeded] set-font                                             ?\ need os-chars  : set-font  ( a -- )  os-chars !  ;  exit     need os-chans                                                   : set-mode-output  ( a -- )                                       os-chans @ 2dup ! 2dupset-banked-mode-output )                                      need set-mode-output  need >body                                0 constant (output-routine)                                     code (banked-mode-output)  ( -- )                                 C5 c,  CD c, 0 ,                                                here cell- ' (output-routine) >body !                           C1 c,  DD c, 21 c, next ,  jpnext  end-code                   : set-banked-mode-output  ( a -- )                                (output-routine) !  \ patch `(banked-mode-output)`              ['] (banked-mode-output) set-mode-output  ;                                                                                                                                                                                                                                                                                                                                                                                                                   ( fzx-test )                                                    need fzx-emit  need <file                                       create font  2048 allot                                         1 set-drive  font 0 s" lettra.fzx" <file                        font fzx-font !                                                 : zxtype  ( ca len -- )  bounds do  i c@ fzx-emit  loop  ;      cr .( fzx-emit is ready ) cr                                    ' (fzx-emit) hex                                                cr .( Code start:   ) dup u.                                    cr .( Code length:  ) ' fzx-emit swap - u.                      cr                                                                                                                                                                                                                                                                                                                                                                                              ( fzx-mode )                                                    need fzx-emit                                                   : fzx-at-xy  ( gx gy -- )  fzx-y c! fzx-x c!  ;                 : fzx-cr  ( -- )  13 fzx-emit  ;                                : fzx-home  ( -- )  0 191 fzx-at-xy  ;                          : fzx-mode  ( -- )                                                ['] fzx-emit ['] emit defer!                                    ['] fzx-at-xy ['] at-xy defer!                                  ['] fzx-home ['] home defer!                                    ['] fzx-cr ['] cr defer!  ;                                                                                                                                                                                                                                                                                                                                                                                                                                   ( fzx-emit )                                                    create fzx-font 60000 ,  \ font address                         0 constant margin  \ XXX TODO -- make it a variable             create fzx-variables                                              here 0 c, \ fzx-flags                                           here margin c, \ fzx-x (margin)                                 here 191 c,  \ fzx-y                                          constant fzx-y  constant fzx-x  constant fzx-flags              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                    need z80-asm  need scroll-1px-up                                create (fzx-emit)  ( -- )                                         asm                                                             fzx-flags hl ldp#  \ initial address of local variables         m dec  \ check fzx-flags value by decrementing it               p' if'  \ not expecting a regular character                       nz if  \ not expecting the column                                 cpl  C0 add#  \ now A = 191 - char                              hl incp                                                       then                                                            hl incp  a m ld  ret                                          then'                                                         -->                                                                                                                                                                                             ( fzx-emit )                                                      16 cp#  z if  02 m ld#  ret  then                               m inc  \ increment fzx-flags to restore previous value (0)      hl incp  \ point to fzx-x XXX why?                              fzx-font bc ftp  bc push  ix pop                                0D cp#  0000 jpz |mark 0 unresolved !                           a dec  2 ix cpxfzx-emit )                                                      cy if  \ jr nc, UNDEF_CHAR                                        1F sub#  \ now A = char - 32                                    cy if  \ jr nc, PRINT_CHAR                                    2swap  \ exchange the two `if`, because they are not nested     then                                                            '?' 20 - a ld#  \ print '?' instead of invalid character          thenfzx-emit )                                                      a inc                                                           a l ld  00 h ld#  hl de ldp  hl addp  de addp                   bc addp                                                           r now HL references offset/kern in char table                 m e ld  hl incp  m a ld  3F and#  a d ld                        m xor  rlca  rlca  a c ldfzx-emit )                                                      hl push  de addp  hl decp                                       exsp                                                            hl incp                                                         a xor  rld                                                      af push  rld                                                    0000 sta  |mark 1 unresolved !                                  08 cp#  \ check if char width is larger than 8 bits             rld  \ restore char shift/width                               -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      000E de ldp#  nc if  234E de ldp#  then                         0000 de stp  |mark 2 unresolved !                               hl incp  m a ld                                                 r add  a e ldfzx-emit )                                                      fzx-x hl ldp#  m a ld  c sub                                    cy if  a xor  then                                              a m ld  0000 fta  |mark 3 unresolved !                          m add                                                           0000 callc |mark 4 unresolved !  \ newline callcfzx-emit )                                                      fzx-x bc ftp                                                    01 a ld#                                                        00 ix subx  \ now A = 1 - height                                b add  \ now A = fzx-y - height + 1                             nc if  \ end of screen                                            hl pop  hl pop  ret  \ restore the stack and exit             then                                                            af pop  BF add#                                                 22AA 2+ call  exaf                                              here jr >relmark 5 unresolved !  \ jr CHK_LOOP                -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      begin  \ main loop                                                m d ld  \ now D = 1st byte from char definition grid            hl incp  \ next character definition                            2 unresolved @ >resolve                                         m c ld  hl incp                                                 a xor  exsp  exaf                                               nz if                                                             a b ld  exaf                                                    begin  d srl  c rr  rra  step                                 then                                                        -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        l inc  l inc   m or  a m ld  \ put A on screen                  l dec  c a ld  m or  a m ld  \ put C on screen                  l dec  d a ld  m or  a m ld  \ put D on screen                  h inc  \ move screen address by 1 pixel down                    h a ld  07 and#                                                 z if  l a ld  20 add#  a l ld                                     nc if  h a ld  08 sub#  a h ld  then                          then \ CHK_LOOP:                                                5 unresolved @ >relresolve                                  -->                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        exsp  \ now HL = char definition address                        l a ld                                                          e cp  \ check if reached next char definition address         z until  \ loop otherwise (to MAIN_LOOP)                        hl pop  \ discard screen address from stack                     fzx-x hl ldp#                                                   m a ld  \ now A = column                                      \ WIDTH1:                                                         here 1+ dup 1 unresolved @ ! 3 unresolved @ !                   00 add#  \ now A = column + (width - 1)                         scf                                                             01 ix adcx  \ now A = column + width + tracking               -->                                                                                                                                                                                             ( fzx-emit )                                                      cy if                                                             0 unresolved @ >resolve  4 unresolved @ >resolve                margin m ld#  \ move to initial column at left margin           hl incp                                                         m a ld  \ now A = line                                          00 ix subx  \ now A = line - height                           then                                                            a m ld  \ move down a few pixels specified by height            ret                                                             end-asm                                                       -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                    code fzx-emit  ( c -- )                                           hl pop  bc push                                                 l a ld  ' (fzx-emit) call                                       bc pop  next ix ldp#  jpnext                                    end-codeedit-sound )                                                  get-current  forth-wordlist set-current                         need :noname  need c1+!  need c1-!  need inverse  need case     need value  need play  [defined] /sound ?\ 14 constant /sound   wordlist constant edit-sound-wordlist                           edit-sound-wordlist dup >order set-current                      variable sound  variable register                               'Q' value quit-key  'P' value play-key                            8 value left-key    9 value right-key                          10 value down-key   11 value up-key                            : .help  ( -- )                                                   quit-key emit ."           - quit" cr                           play-key emit ."           - play" cr                           ." left/right - decrease/increase value" cr                     ." up/down    - previous/next register" cr ;                  -->                                                             ( edit-sound )                                                  :noname  ( -- )  ." Env."          ;  \ XXX TODO --             :noname  ( -- )  ." Env. T."       ;  \ XXX TODO --             :noname  ( -- )  ." Env. P."       ;  \ XXX TODO --             :noname  ( -- )  ." C volume"      ;                            :noname  ( -- )  ." B volume"      ;                            :noname  ( -- )  ." A volume"      ;                            :noname  ( -- )  ." Mixer"         ;                            :noname  ( -- )  ." Noise volume"  ;                            :noname  ( -- )  ." C tone"        ;                            :noname  ( -- )  ." C fine tone"   ;                            :noname  ( -- )  ." B tone"        ;                            :noname  ( -- )  ." B fine tone"   ;                            :noname  ( -- )  ." A tone"        ;                            :noname  ( -- )  ." A fine tone"   ;                            create label  , , , , , , , , , , , , , ,  -->                  ( edit-sound )                                                  : .label  ( n -- )  cells label + perform  ;                    : .register  ( n -- )                                             >r 0 r@ at-xy  sound @ r@ + c@ 4 .r  space r> .label cr  ;    : .menu-register  ( n -- )                                        dup register @ = inverse  .register  0 inverse  ;             : .sound  ( -- )  /sound 0 do  i .menu-register  loop  ;        : register@  ( -- n )  register @ dup .register  ;              : register!  ( n -- )  dup register ! .menu-register  ;         : next-register  ( -- )                                           register@ 1+ dup /sound <> and register!  ;                   : previous-register  ( -- )                                       register@ 1- dup 0< if  drop /sound 1-  then  register!  ;    : >register  ( -- ca )  sound @ register @ +  ;                 : increase-value  ( -- )  >register c1+!  ;                     : decrease-value  ( -- )  >register c1-!  ;  -->                ( edit-sound )                                                  forth-wordlist set-current                                      : edit-sound ( a -- )                                             sound ! register off  page .sound cr .help                      begin  .sound                                                     key upper case                                                    quit-key   of  exit               endof                         play-key   of  sound @ play       endof                         left-key   of  decrease-value     endof                         right-key  of  increase-value     endof                         down-key   of  next-register      endof                         up-key     of  previous-register  endof                       endcase                                                       again  ;                                                      set-current  previous                                                                                                           ( edit-sound-test )                                             need edit-sound  need >body  need shoot                         create explosion                                                ' shoot >body explosion /sound movesound sound-register-port sound-write-port !sound )          [unneeded] /sound ?\ 14 constant /sound exit                    #65533 constant sound-register-port                             #49149 constant sound-write-port                                [unneeded] !sound ?exit                                         need !p                                                         : !sound  ( b1 b2 -- )                                            sound-register-port !p sound-write-port !pvol shutup noise )                                            need !sound                                                     : vol  ( b1 b2 -- )  8 + !sound  ;                              : shutup  ( -- )  -1 7 !sound  ;                                : noise  ( -- )  7 7 !soundmusic )                                                       need ms  need roll  need pick  need vocabulary                  need !sound  need vol                                           vocabulary music  get-current  also music definitions           : freq                                                            2* 109.375 3 roll  um/mod nip 256 /mod 2 pick                   1+ !sound  swap !sound  ;                                     variable len  variable tempo  variable octave  variable volume  2 len !  200 tempo !  8 octave !  15 volume ! 1 15 vol          : tones  ( -- )  56 7 !sound  ;                                 : note  ( n "name" -- )                                           create  ,  does>   @ octave @ * 16 /  1 freq tones                                 tempo @ len @ * ms shutup  ;               523 note c  554 note c# 583 note d  622 note d#                 659 note e  698 note f  740 note f# 784 note g                  831 note g# 880 note a  932 note a# 988 note b  -->             ( music )                                                       : l   ( n -- )  len !  ;                                        : o+  ( -- )    octave @ 2 * octave !  ;                        : o-  ( -- )    octave @ 2 / octave !  ;                        : r   ( -- )    tempo @ len @ * ms  ;                           : >>  ( -- )    1 volume @ 1+ vol 1 volume +!  ;                : <<  ( -- )    1 volume @ 1- vol -1 volume +!  ;               set-current previousplay sound, sound )                                           need !sound  need /sound                                        : play  ( a -- )                                                  /sound 0 do  dup c@ i !sound 1+  loop  drop  ;                : sound,  ( b0 ... b13 -- )                                       here /sound allot here 1- do  i c!  -1 +loop  ;               : sound  ( b0 ... b13 "name" -- )                                 create  sound,  does>  ( -- )  ( pfa )  play  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( fplay )                                                       need !p  need c@+                                               need sound-register-port  need sound-write-port  need /sound    : fplay  ( a -- )                                                 /sound 0 do                                                       i sound-register-port !p  c@+ sound-write-port !p             loop  dropzplay )                                                       need z80-asm                                                    need sound-register-port  need sound-write-port  need /sound    code zplay  ( a -- )                                              hl pop  bc push                                                 /sound b ld#  00 e ld#                                          begin   bc push                                                         e a ld  sound-register-port bc ldp#  a outbc                    m a ld  sound-write-port bc ldp#  a outbc                       hl incp  e inc  bc pop  \ next                          step                                                            bc pop  jpnext  end-code                                                                                                                                                                                                                                                                                                      ( waves shoot helicopter1 train airplane helicopter2 )          need sound  hex                                                 [unneeded] waves                                                ?\ 00 00 00 00 00 00 07 47 14 14 14 00 26 0E sound waves        [unneeded] shoot                                                ?\ 0A 00 B1 00 BF 00 1F 47 14 14 14 5C 1C 03 sound shoot        [unneeded] helicopter1                                          ?\ C8 0F C8 0F C8 0F 00 07 17 17 17 FF 01 0C sound helicopter1  [unneeded] train                                                ?\ 64 78 30 61 0C C8 37 0F 09 0B 37 B4 04 08 sound train        [unneeded] airplane                                             ?\ 0C 1F 00 00 00 1F 07 E8 0F 10 0F 9A 00 18 sound airplane     [unneeded] helicopter2                                          ?\ 09 00 00 06 0C 00 0B C0 10 0E 10 3A 02 1C sound helicopter2  decimal                                                                                                                         ( bomber whip metalic rain2 lightning1 lighting2 )              need sound  hex                                                 [unneeded] bomber                                               ?\ 49 52 3E A5 5A 8A 9F 8C 66 4D 64 A2 57 C9 sound bomber       [unneeded] whip                                                 ?\ 05 12 08 06 13 0B 05 0B 00 13 03 18 15 01 sound whip         [unneeded] metalic                                              ?\ 95 40 68 EC D2 B4 00 20 00 C2 92 49 51 B1 sound metalic      [unneeded] ligthing1                                            ?\ 01 04 00 10 24 43 08 04 1F F5 01 06 1E 02 sound lighting1    [unneeded] lighting2                                            ?\ 00 00 00 00 00 FF 07 04 FF 19 00 3C 3C 03 sound lighting2    decimal                                                                                                                                                                                                                                                         ( bell1 bell2 bell3 rap drum cymbal )                           need sound  hex                                                 [unneeded] bell1                                                ?\ AB 03 2A 02 0C 01 00 F8 10 10 10 00 71 10 sound bell1        [unneeded] bell2                                                ?\ 66 00 4B 00 45 00 00 F8 10 10 10 00 22 10 sound bell2        [unneeded] bell3                                                ?\ FC 06 DE 03 C3 04 00 F8 10 10 10 00 FF 10 sound bell3        [unneeded] rap                                                  ?\ 00 00 00 00 00 00 06 C0 10 10 10 00 05 18 sound rap          [unneeded] drum                                                 ?\ 00 06 00 00 00 05 11 E8 10 10 10 00 0A 10 sound drum         [unneeded] cymbal                                               ?\ 09 00 00 00 00 00 00 C0 10 10 10 03 09 10 sound cymbal       decimal                                                                                                                         ( applause hammer background beach waterdrop2 )                 need sound  hex                                                 [unneeded] applause                                             ?\ 00 00 00 00 00 00 1E 40 0F 10 0F 00 07 18 sound aplausse     [unneeded] hammer                                               ?\ 1B 00 09 00 00 00 1F C8 10 10 10 00 6B 10 sound hammer       [unneeded] background                                           ?\ 03 05 FC 04 0C 05 00 F8 10 10 10 FF FF 0E sound background   [unneeded] beach                                                ?\ 00 00 00 00 00 00 0F C0 0B 10 10 FF 50 0E sound beach        [unneeded] waterdrop2                                           ?\ 24 00 12 00 16 00 00 F8 10 10 10 00 10 18 sound waterdrop2   decimal                                                                                                                                                                                                                                                         ( rain1 waterdrop1 explosion1 explosion2 )                      need sound  hex                                                 [unneeded] rain1                                                ?\ 2C 18 06 06 07 03 03 05 2C 06 03 05 03 03 sound rain1        [unneeded] waterdrop1                                           ?\ 14 53 5E 27 00 08 1F 47 17 17 16 5A 00 00 sound waterdrop1   [unneeded] explosion1                                           ?\ 00 00 00 00 00 06 07 10 10 10 38 08 00 00 sound explosion1   [unneeded] explosion2                                           ?\ 00 00 00 00 00 06 07 10 10 10 38 08 00 00 sound explosion2   decimal                                                                                                                                                                                                                                                                                                                                                                                         ( bleep )                                                       code bleep  ( duration pitch -- )                                 E1 c,  D1 c,  C5 c,  CD c, 03B5 ,                               C1 c,  DD c, 21 c, next ,                                       jpnext                                                          end-codebeep>bleep )                                                  : beep>bleep  ( frequency duration1 -- duration2 pitch )          over 1000 */ swap                                               4375 100 rotlaser-gun )                                                   need z80-asm                                                    code laser-gun  ( -- )                                            bc push                                                         5 b ld#                                                         0500 hl ldp#                                                    begin   0001 de ldp#                                                    hl push  03B5 call  hl pop  \ ROM beeper                        0010 de ldp#  de subp                                           jrnz                                                    bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                                                                                                                                                      ( white-noise )                                                 need z80-asm                                                    code white-noise  ( u -- )                                        de pop                                                          bc push  \ save the Forth IP                                    de bc ldp  0000 hl ldp#  \ bc=duration, hl=start of ROM         5C48 fta  a sra  a sra  a sra  07 and#  a d ld                  begin   m e ld  hl incp  bc decp  bc push                               08 b ld#  \ bit counter                                         begin   e a ld  10 and#  e rl  d or  FE out  \ beep                     step                                                    bc pop  bc tstp                                                 jrnz                                                    bc pop  jpnext \ restore the Forth IP and go next               end-code                                                                                                                      ( ambulance )                                                   need z80-asm                                                    code ambulance  ( n -- )                                          de pop  bc push  e b ld                                         begin   bc push  0320 hl ldp#  000A de ldp#                             <mark   hl push                                                         03B5 call  \ ROM beeper                                         hl pop  hl decp                                                 hl tstp                                                         jrnz                                                    bc pop                                                          step                                                    bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                      ( cslit csliteral c" )                                          : cslit  ( -- ca )  r@ dup c@ 1+ r> + >r  ;                     : csliteral  ( ca len -- )                                        compile cslit s,  ; immediate compile-only                    : c"  ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca )                                         '"' parse postpone csliteral  ; immediate compile-only        exit                                                            : csliteral  ( Compilation: ca len -- )                                      ( Run-time: -- ca )                                  2>r postpone ahead here 2r> s, >r postpone then                 r> postpone literal  ; immediate compile-only                                                                                                                                                                                                                                                                                 ( parse-escaped-string )                                        only forth definitions                                          need parse-char                                                 wordlist dup constant escaped-wordlist dup >order set-current   7 1 2constant a  8 1 2constant b  27 1 2constant e              12 1 2constant f  10 1 2constant l  13 1 2constant n            '"' 1 2constant q  13 1 2constant r  9 1 2constant t            11 1 2constant v  0 1 2constant z                               '"' 1 2constant "  '\' 1 2constant \                            : m  ( -- c1 c2 2 )  10 13 2  ;                                 : (x)  ( "c" -- n )                                               parse-char upper 16 digit? 0= #-260 ?throw  ;                 : x  ( "cc" -- c 1 )  (x) 16 * (x) + 1  ;                       -->                                                                                                                                                                                             ( parse-escaped-string )                                        only forth definitions  need char>string   need search-wordlist                         need chars>string  need s+              : unescape-char  ( c -- c1..cn n )                                dup char>string escaped-wordlist search-wordlist                if  nip execute  else  '\' 2  then  ;                         : parse-escaped-string  ( "ccc<quote>"  -- ca len )               0 0  \ dummy empty string to start with                         begin  parse-char dup '"' <>  while  \ not finished?              dup '\' =  \ possibly escaped char?                             if    drop parse-char unescape-char                             else  1  then  chars>string s+                                repeat  drop  ;                                                                                                                                                                                                                                               ( s\" .\" )                                                     need parse-escaped-string  need ?(                              [unneeded] s\" ?(                                               : s\"  ( Interpretation: "ccc<quote>" -- ca len )                      ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca len )                                    parse-escaped-string compiling? if  postpone sliteral  then     ; immediate  ?)                                               [unneeded] .\" ?(                                               : .\"  ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca len )                                    compile (.")  parse-escaped-string s,                           ; immediate compile-only ?)                                                                                                                                                                                                                                   ( str= str< str> trim +place hunt )                             [unneeded] str=                                                 ?\ : str=  ( ca1 len1 ca2 len2 -- f )  compare 0=  ;  exit      [unneeded] str<                                                 ?\ : str<  ( ca1 len1 ca2 len2 -- f )  compare 0<  ;  exit      [unneeded] str>                                                 ?\ : str>  ( ca1 len1 ca2 len2 -- f )  compare 0>  ;  exit      [unneded] trim                                                  ?\ : trim ( ca1 len1 -- ca2 len2 )  -leading -trailing  ;       need ?(                                                         [unneeded] +place ?(                                            : +place  ( ca1 len1 ca2 )                                        2dup c@ + over c!  dup c@ 1+ + smove  ; ?)                    [unneeded] hunt ?(                                              : hunt  ( ca1 len1 ca2 len2 -- ca3 len3 )                         search 0= if  chars + 0  then  ; ?)                           ( ud>str d>str char>string chars>string )                       [unneeded] ud>str                                               ?\ : ud>str  ( ud -- ca len )  <# #s #>  ;                      [unneeded] d>str                                                ?\ : d>str  ( ud -- ca len )  tuck dabs <# #s rot sign #>  ;    need ?(                                                         [unneeded] char>string ?(                                       : char>string  ( c -- ca len )                                    1 allocate-string tuck c! 1  ; ?)                             [unneeded] chars>string ?(                                      : chars>string  ( c1..cn n -- ca len )                            dup if    dup allocate-string swap 2dup 2>r  ( c1..cn ca n )              bounds do  i c!  loop  2r>                                else  pad swap  then  ; ?)                                                                                                                                                                ( s+ )                                                          need pick                                                       [defined] lengths                                               ?\ : lengths   2over nip over  ;                                : s+  ( ca1 len1 ca2 len2 -- ca3 len3 )                           lengths + >r           ( ca1 len2 ca2 len2 ) ( r: len3 )        r@ allocate-string >r  ( r: len3 ca3 )                          2 pick r@ +            ( ca1 len1 ca2 len2 len1+ca3 )           smove                  ( ca1 len1 )  \ 2nd string to buffer     r@ smove               \  1st string to buffer                  r> r>  ;                                                                                                                                                                                                                                                                                                                                                                                      ( #spaces #chars )                                              need under+                                                     : #spaces  ( ca len -- +n )                                       0 rot rot  0 do  count bl = under+  loop  drop abs  ;         : #chars  ( ca len c -- +n )                                      0 2swap 0 do                                                      ( c count ca ) count over = under+  loop  2drop absname first-name last-name )                                  need ?(  [unneeded] last-name ?(  need trim                     : last-name  ( ca1 len1 -- ca2 len2 )                             trim  begin  2dup bl scan bl skip dup                                 while  2nip  repeat  2drop  ;  exit ?)                  : /name  ( ca1 len1 -- ca2 len2 ca3 len3 )                        bl skip 2dup bl scan  ;                                       [unneeded] first-name ?exit                                     : first-name  ( ca1 len1 -- ca2 len2 )  /name nip -  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( prefix? suffix? -prefix -suffix )                             need ?(                                                         [unneeded] prefix? ?(  need str=                                : prefix?  ( ca1 len1 ca2 len2 -- f )                             tuck 2>r min 2r> str=  ; ?)                                   [unneeded] suffix? (?  need pick  need str=                     : suffix? ( ca1 len1 ca2 len2 -- f )                              2swap dup 3 pick - /string str=  ; ?)                         [unneeded] -prefix ?(  need prefix?                             : -prefix  ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )           dup >r 2over 2swap prefix?                                      if  swap r@ + swap r> -  else  rdrop  then  ; ?)              [unneeded] -suffix ?(  need suffix?                             : -suffix ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )            dup >r 2over 2swap suffix?                                      if  r> -  else  rdrop  then  ; ?)                             ( chop s"" sconstant save-counted-string )                      [unneeded] chop                                                 ?\ : chop  ( ca len -- ca' len' )  1- swap char+ swap  ;  exit  [unneeded] s""                                                  ?\ : s""  ( -- ca len )  0 allocate-string 0  ;  exit           need ?(  [unneeded] sconstant ?(                                : sconstant  ( ca len "name" -- )                                 here >r s, r> count 2constant  ; ?)                           [unneeded] save-counted-string ?(                               : save-counted-string  ( ca1 len1 -- ca2 )                        dup 1+ allocate-string dup >r place r>  ; ?)                                                                                                                                                                                                                                                                                                                                                  ( string/ char-in-string? char-position? ruler )                need ?(                                                         code string/  ( ca1 len1 len2 -- ca2 len2 )                       D9 c, C1 c, D1 c, E1 c, 19 c, A7 c, ED c, 42 c,                 E5 c, C5 c, D9 c, jpnext  end-code                            [unneeded] char-in-string? ?(  need -rot                        : char-in-string? ( ca len c -- f )                               -rot bounds ?do   dup i c@ = if  drop true unloop exit  then                loop  drop false  ; ?)                            [unneeded] char-position? ?(  need -rot                         : char-position?  ( ca len c -- +n true | false )                 -rot 0 ?do   2dup i + c@ = if  2drop i true unloop exit  then          loop  2drop false  ; ?)                                [unneeded] ruler ?(                                             : ruler  ( c len -- ca len )                                      dup allocate-string swap 2dup 2>r rot fill 2r>  ; ?)          ( replaces )                                                    need vocabulary                                                 s" /counted-string" environment? 0= [if] 256 [then]             chars constant string-max                                       wordlist constant replaces-wordlist                             [defined] vfxforth [if] \ vfx forth                               : makesubst \ c-addr len -- c-addr                                get-current >r wid-subst set-current                            ($create)  \ like create but takes c-addr/len                   r> set-current                                                  here string-max allot 0 over c! \ create buffer space           ;                                                           [then]                                                                                                                                                                                                                                                          ( replaces )                                                    [defined] (wid-create) [if] \ swiftforth                        : makesubst \ c-addr len -- c-addr                                wid-subst (wid-create)                                          last @ >create !                                                here string-max allot 0 over c! \ create buffer space           ;                                                             [then]                                                          : findsubst  ( ca len -- xt f | 0 )                               wid-subst search-wordlist  ;                                  : replaces \ text tlen name nlen --                               2dup findsubst if    nip nip execute  \ get buffer address                     else  makesubst                                                 then  place  ;                                                                                                                                                                 ( s' )                                                          : s'  ( Compilation: "ccc<char>" -- ) ( Run-time:  -- ca len )    ''' parse-string  ; immediateos-chars os-chans os-flags2 os-seed os-frames os-udg )        [unneeded] os-chars    ?\ 23606 constant os-chars               [unneeded] os-chans    ?\ 23631 constant os-chans               [unneeded] os-flags2   ?\ 23658 constant os-flags2              [unneeded] os-seed     ?\ 23670 constant os-seed                [unneeded] os-frames   ?\ 23672 constant os-frames              [unneeded] os-udg      ?\ 23675 constant os-udgos-coords os-coordx os-coordy )                               [unneeded] os-coords      ?\ 23677 constant os-coords           [unneeded] os-coordx      ?\ 23677 constant os-coordx           [unneeded] os-coordy      ?\ 23678 constant os-coordyos-attr-p os-mask-p os-attr-t os-mask-t os-p-flag )           [unneeded] os-attr-p      ?\ 23693 constant os-attr-p           [unneeded] os-mask-p      ?\ 23694 constant os-mask-p           [unneeded] os-attr-t      ?\ 23695 constant os-attr-t           [unneeded] os-mask-t      ?\ 23696 constant os-mask-t           [unneeded] os-p-flag      ?\ 23697 constant os-mask-twrite-tape-file read-tape-file )                              17 constant /tape-header                                        create tape-header  /tape-header 2 * allot                      10 constant /tape-filename \ filename max length                : tape-filetype  ( -- ca )  tape-header  ;                      : tape-filename  ( -- ca )  tape-header 1+  ;                   : tape-length    ( -- a )   tape-header 11 +  ;                 : tape-start     ( -- a )   tape-header 13 +  ;                 3 tape-filetype c!  \ "code" filetype by default                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( write-tape-file read-tape-file )                              : -tape-filename  ( -- )  tape-filename /tape-filename blank  ; : any-tape-filename  ( -- )  255 tape-filename c!  ;            : set-tape-filename  ( ca len -- )                                -tape-filename  /tape-filename min                              tape-filename swap cmove  ;                                   : ?set-tape-filename  ( ca len -- )                               dup if    set-tape-filename                                         else  2drop any-tape-filename  then  ;                    : set-tape-memory  ( ca len -- )                                  tape-length ! tape-start !  ;                                 -->                                                                                                                                                                                                                                                                                                                             ( write-tape-file read-tape-file )                              code (read-tape-file)  ( -- )                                     C5 c,  DD c, 21 c, tape-header ,  2A c, tape-start ,            3E c, 01 c,  32 c, 5C74 ,  CD c, 075A ,                         C1 c,  DD c, 21 c, next ,                                       jpnext  end-code                                              : read-tape-file  ( ca1 len1 ca2 len2 -- )                        ?set-tape-filename set-tape-memory (read-tape-filewrite-tape-file read-tape-file )                              code (write-tape-file)  ( -- )                                    C5 c,  DD c, 21 c, tape-header ,                                A8 07 + c,  32 c, 5C74 ,                                        21 c, here 0A + ,  E5 c,                                        2A c, tape-start ,  E5 c,                                       C3 c, 0984 ,                                                    C1 c,  DD c, 21 c, next ,                                       jpnext  end-code                                              : write-tape-file  ( ca1 len1 ca2 len2 -- )                       set-tape-filename set-tape-memory (write-tape-file)  ;                                                                                                                                                                                                                                                                                                                                        ( .tape )                                                       : .tape  ( -- )                                                   cr ." Tape header " tape-header u. cr                              ." Filetype    " tape-filetype c@ . cr                          ." Filename    " tape-filename /tape-filename type cr           ." Length      " tape-length @ u. cr                            ." Start       " tape-start @ u. cr                             .s cr                                                           ." Press any key" key drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( ms )                                                          need os-frames                                                  : ms  ( u -- )                                                    20 / os-frames @ +                                              begin  dup os-frames @ u<  until dropms88 )                                                        need z80-asm                                                    code ms88  ( u -- )                                               de pop                                                          begin \ .reMS:                                                  d a ld                                                          e or nz if                                                        de push \ push bc                                               #133 de ldp#                                                    begin  \ .reMS2:                                                  dec decp  d a ld  e or                                        z until \ jr nz,reMS2                                           de pop \ pop bc                                                 de decp  l dec                                               z until \ jr nz,reMS                                             then  jpnext  end-code                                        ( frames@ frames! reset-frames )                                need os-frames                                                  : frames@  ( -- d )                                               os-frames @ [ os-frames 2+ ] literal c@  ;                    : frames!  ( d -- )                                               [ os-frames 2+ ] literal c! os-frames !  ;                    : reset-frames  ( -- )  0. framespause )                                                       need z80-asm  need call-xt  need execute-hl                     code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) call-xt  hl pop  execute-hl                            de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need call-xt                                      defer (wait)  ' noop ' (wait) defer!                            code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) call-xt                                                de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need execute-hl                                   code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         (wait) fthl  execute-hl                                         de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need execute-hl  need >body                       variable (wait)  ' noop (wait) !                                code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) >body fthl  execute-hl                                 de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need execute-hl  need >body                       variable (wait)  ' noop (wait) !                                code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) >body fthl execute-hl                                  de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                      ( just-pause )                                                  need z80-asm                                                    code just-pause ( u -- )                                          de pop  bc push                                                 begin                                                             halt  de decp  de tstp  \ finished?                           z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( leapy-year? )                                                 : leapy-year?  ( n -- f )                                         dup 400 mod 0= if  drop true   exit  then                       dup 100 mod 0= if  drop false  exit  then                             4 mod 0= if       false  exit  then                       false  ;                                                      exit                                                            need baden-case                                                 : leapy-year?  ( n -- f )                                         case 400 mod 0= of  true   endof                                case 100 mod 0= of  false  endof                                case   4 mod 0= of  true   endof                                othercase false  ;                                                                                                                                                                                                                                            ( set-date get-date )                                           create (date)  1 c,  1 c,  2016 ,                               : get-date  ( -- day month year )                                 (date) c@                                                       [ (date) 1+ ] literal c@                                        [ (date) 2+ ] literal @  ;                                    : set-date  ( day month year -- )                                 [ (date) 2+ ] literal !                                         [ (date) 1+ ] literal c!                                        (date) !  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( set-time get-time reset-time )                                need frames@  need frames!  need m+  need alias  need ud*       : get-time  ( -- second minute hour )                             frames@ 50 um/mod nip s>d   ( sec . )                                   60 um/mod s>d       ( sec min . )                               60 um/mod           ( sec min hour )  ;               : set-time  ( second minute hour -- )                             3600 um*  rot 60 * m+  rot m+  ( seconds )                      50. ud* frames!  ;                                            ' reset-frames alias reset-time  ( -- )                                                                                                                                                                                                                                                                                                                                                                                                                         ( .time .system-time .date .system-date .time&date time&date )  need get-time  need get-date                                    : .00  ( n -- )  s>d <# # # #> type  ;                          : .0000  ( n -- )  s>d <# # # # # #> type  ;                    : .time  ( second minute hour -- )                                .00 ':' emit .00 ':' emit .00  ;                              : .system-time  ( -- )  get-time .time  ;                       : .date  ( day month year -- )                                    .0000 '-' emit .00 '-' emit .00  ;                            : .system-date  ( -- )  get-date  .date  ;                      : .time&date  ( second minute hour day month year -- )            .date 'T' emit .time  ;                                       : time&date  ( -- second minute hour day month year )             get-time get-date  ;                                                                                                                                                                          ( assert assert= )                                              : assert   ( n -- )    0= if  abort  then  ;                    : assert=  ( a b -- )  = assertassert( )                                                     variable assert-level  ( -- a )  1 assert-level !               : assertn  ( n -- )  assert-level @ > if  postpone (  then  ;   : assert0(  ( -- )  0 assertn  ; immediate                      : assert1(  ( -- )  1 assertn  ; immediate                      : assert2(  ( -- )  2 assertn  ; immediate                      : assert3(  ( -- )  3 assertn  ; immediate                      : assert(  ( -- )  postpone assert1(  ; immediate               : (endassert)  ( f -- )  0= #-262 ?throw  ;                     : )  ( f -- )  postpone (endassert)  ; immediate                                                                                                                                                                                                                                                                                                                                                                                                                ( ~~ )                                                          need :noname  need defer                                        variable ~~?   ~~? on                                           variable ~~x  ~~x off  variable ~~y  ~~y off                    variable ~~key  ~~key off                                       : ~~show  ( nt line block -- )                                    ~~x @ ~~y @ at-xy ." Block " . ." Line " . .name .s  ;        : ~~control  ( -- )                                               ~~key @ ?dup 0= ?exit  key = if  quit  then  ;                2variable ~~xy-backup                                           defer ~~save  ( -- )  defer ~~restore  ( -- )                   :noname  ( -- )  xy ~~xy-backup 2!  ;  ' ~~save defer!          :noname  ( -- )  ~~xy-backup 2@ at-xy  ;  ' ~~restore defer!    -->                                                                                                                                                                                             ( ~~ )                                                          : (~~)  ( nt line block -- )                                      ~~? @ if    ~~save ~~show ~~control ~~restore                         else  2drop drop  then  ;                               : ~~  ( -- )                                                      latest      postpone literal  ( nt )                            >in @ c/l / postpone literal  ( nt line )                       blk @       postpone literal  ( nt line block )                 postpone (~~)  ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( where )                                                       need [if]                                                       : where  ( -- )                                                   error-pos 2@  ( n1 n2 )                                         dup if                                                            dup scr !                                                       ." Scr #" dec. cr                                               swap c/l /mod c/l * rot block + c/l type cr                     here c@ - spaces '^' emit                                     else  2drop  then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                          ( decode )                                                      forth definitions decimal                                       need body>name  need name>body  need case  need [if]            need recurse  need >body  need body>                            variable decode-level  decode-level off \ depth of nesting      variable decode-address  \ in the word being decoded            : indent  ( -- )                                                  cr decode-address @ u. decode-level @ 2* spaces  ;            : indent+  ( -- )  1 decode-level +! indent  ;                  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( decode )                                                      : decode-branch    ( a1 -- a2 )  cell+ dup @ u.  ;              : decode-literal   ( a1 -- a2 )  cell+ dup @ .  ;               : decode-2literal   ( a1 -- a2 )  cell+ dup 2@ d. cell+  ;      : decode-cliteral  ( a1 -- a2 )  cell+ dup c@ . 1-  ;           : decode-sliteral  ( a1 -- a2 )                                   cell+ dup count type  dup c@ + 1-  ;                          : decode-compile   ( a1 -- a2 )  cell+ dup @ >name .namedecode )                                                      : decode-special  ( a1 -- a1 | a2 )  dup @ case                     ['] compile   of  decode-compile    endof                       ['] lit       of  decode-literal    endof                       ['] 2lit      of  decode-2literal   endof                       ['] clit      of  decode-cliteral   endof                       ['] slit      of  decode-sliteral   endof                       ['] branch    of  decode-branch     endof                       ['] 0branch   of  decode-branch     endof                       ['] ?branch   of  decode-branch     endof                       ['] (do)      of  decode-branch     endof                       ['] (?do)     of  decode-branch     endof                       ['] (.")      of  decode-sliteral   endof                       [undefined] cslit   ?\ ['] cslit   of decode-sliteral endof     [undefined] -branch ?\ ['] -branch of decode-branch   endof   endcase  ;  -->                                               ( decode )                                                      : decode-end?  ( xt -- f )                                        dup  ['] exit =  swap ['] (;code) =  or  ;                    : colon-cfa?  ( cfa -- f )                                        dup c@ $CD = swap 1+ @ docolon = and  ;                       : colon-pfa?  ( pfa -- f )  body> colon-cfadecode )                                                      : (decode)  ( pfa -- )                                            dup colon-pfa? if                                                 dup body> decode-address ! indent                               ." : " dup body>name .name                                      begin   ( pfa+n ) dup decode-address !                                  dup @  ( pfa+n xt ) dup decode-end? 0=                  while  \ high level & not end of colon definition                 >body ( pfa+n pfa' ) dup indent+  body>name .name               key case  'q' of  sp0 @ sp! quit  endof                                   bl  of  drop            endof                                   swap recurse  \ default                                   endcase  decode-special  cell+  -1 decode-level +!        repeat  indent >name .name                                    else  ." Not a colon definition."  then  drop  ;  -->                                                                         ( decode )                                                      : decode-usage  ( -- )                                            cr ." Keys: space=more, q=quit, other=deeper." cr  ;          : decode  ( "name" -- )                                           defined  ( nt | 0 )  dup 0= -13 ?throw                          decode-usage                                                    name>body  decode-level off  (decodefardump )                                                     need 16hex.  need fartype-ascii  need backspace                 : fardump  ( ca len -- )                                          8 max 8 2dup mod - + 8 / 1- 0                                   ?do                                                               cr dup 16hex.                                                   8 0 do  i over + far@ flip 16hex.  cell +loop                   dup backspace 8 fartype-ascii                                   break-key? ?leave                                             8 + loop  drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                             ( farwdump )                                                    need 16hex.                                                     : farwdump  ( a len -- )                                          0                                                               ?do                                                               i 4 mod 0= if  cr dup 16hex. space  then  \ show address        dup far@ 16hex. cell+                                           break-key? ?leave                                             loop  dropdump )                                                        need 16hex.  need type-ascii  need backspace                    : dump  ( ca len -- )                                             8 max 8 2dup mod - + 8 / 1- 0                                   ?do                                                               cr dup 16hex.                                                   8 0 do  i over + @ flip 16hex.  cell +loop                      dup backspace 8 type-ascii                                      break-key? ?leave                                             8 + loop  drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                             ( wdump )                                                       need 16hex.                                                     : wdump  ( a len -- )                                             0                                                               ?do                                                               i 4 mod 0= if  cr dup 16hex. space  then  \ show address        dup @ 16hex. cell+                                              break-key? ?leave                                             loop  drophistory )                                                     variable /history                                               variable hp0                                                    variable hp                                                     : used-history  ( -- u )  hp0 @ hp @  -  ;                      : unused-history  ( -- n )  /history @ used-history -  ;        : allot-history  ( +n -- )  hp +!  ;                            : len>history  ( len -- +n )  1+ cell+  ;                       : history>link  ( ca -- a )  cell-  ;                           : history<history  ( ca1 -- ca2 )  history>link @s  ;           : history>history  ( ca1 -- ca2 )                                 system-bank count default-bank  + cell+  ;                    : history>string  ( ca1 -- ca2 len2 )                             system-bank count save-string default-bank  ;  -->                                                                                                                                            ( history )                                                     variable browsed-history                                        : oldest-history?  ( -- f )  browsed-history @ hp0 @ =  ;       : browse-older-history  ( -- )                                    oldest-history? ?exit                                           browsed-history @ history<history browsed-history !  ;        : newest-history?  ( -- )                                         browsed-history @ history>history hp @ =                        browsed-history @ hp @ =  or  ;                               : browse-newer-history  ( -- )                                    newest-history? ?exit                                           browsed-history @ history>history browsed-history !  ;        : init-history  ( n -- )                                          dup /history !  $FFFF swap -                                    dup hp0 !  dup hp !  browsed-history !  0 hp0 @ c!s  ;        1024 init-history  -->                                          ( history )                                                     need str=                                                       : history-empty?  ( -- f )  used-history 0=  ;                  : allocate-history  ( len -- ior )                                1+ dup /history @ > if  drop #-274 exit  thenhistory )                                                     : latest-history$  ( -- ca len )                                  hp @ history<history history>string  ;                        : duplicated-history?  ( ca len -- f )  latest-history$ str=  ; : longer-history?  ( len -- f )                                   len>history unused-history >  ;                               : history,  ( ca len -- )                                         hp @ dup >r  over >r  ( ca len ca1 ) ( R: len ca1 -- )          system-bank place default-bank                                  r> 1+ allot-history  r> hp @ !s  cell allot-history  ;        : (>history)  ( ca len -- )                                       dup 0= if  2drop exit  then                                     2dup duplicated-history? if  2drop exit  then                   dup longer-history? if  dup allocate-history throw  then        history,  hp @ browsed-history !  ;                           -->                                                             ( history )                                                     : browsed-history$  ( -- ca len )                                 browsed-history @ history>string  ;                           : get-history   ( -- ca )  browsed-history$ set-accept  ;       : (history-up)    ( -- ca )                                       get-history browse-older-history  ;                           : (history-down)  ( -- ca )                                       get-history browse-newer-historyhistory )                                                     variable history                                                : history-off  ( -- )                                             ['] 2drop ['] >history defer!                                   ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off  ;                 : history-on  ( -- )                                              ['] (>history) ['] >history defer!                              ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on  ;     -->                                                                                                                                                                                                                                                                                                                                                                                             ( history )                                                     : .history  ( -- )                                                hp0 @ begin  dup hp @ u<  while                                         dup history>string type cr  history>history                   repeat  drop  ;                                         need dump                                                       : hdump  ( ca len -- )  system-bank dump default-bank  ;        : .h  ( -- )  hp0 dup hp @ - hdump  ;                           \ history-onhistory-xxx-old )                                             variable hp                                                     $FFFF constant hp0                                              variable /history  1024 /history !                              : init-hp0  ( -- )  0 hp0 c!s  ;                                : history-bounds  ( -- ca1 ca2 )  hp0 hp @  ;                   : used-history  ( -- u )  history-bounds -  ;                   : unused-history  ( -- n )  /history @ used-historyhistory-xxx-old )                                             variable previously-browsed-history                             variable currently-browsed-history                              : older-history  ( -- )                                           currently-browsed-history @ dup previously-browsed-history !    system-bank count default-bank +                                currently-browsed-history !  ;                                : newer-history  ( -- )                                           currently-browsed-history @                                     previously-browsed-history @ currently-browsed-history !        currently-browsed-history !  ;                                : init-history  ( -- )                                            init-hp0  hp0 dup hp ! currently-browsed-history !  ;         init-history  -->                                                                                                                                                                               ( history-xxx-old )                                             need str=                                                       : allot-history  ( +n -- )  negate hp +!  ;                     : history-empty?  ( -- f )  history-bounds =  ;                 : allocate-history  ( len -- ior )                                1+ dup /history @ > if  drop #-274 exit  then                   0  ; \ XXX TMP                                                : latest-history  ( -- ca len )                                   system-bank  hp @ count  save-string  default-bank  ;         : browsed-history  ( -- ca len )                                  currently-browsed-history @                                     system-bank  count save-string  default-bank  ;               : (history>)  ( -- ca len )                                       browsed-history  dup 0= ?exit                                                    dup 1+ negate allot-history                    history-empty? if  init-hp0  then  ;  -->                     ( history-xxx-old )                                             : duplicated-history?  ( ca len -- f )  latest-history str=  ;  : too-long-for-history?  ( len -- f )  1+ unused-history > ;    : (>history)  ( ca len -- )                                       dup 0= if  2drop exit  then                                     history-empty? if  dup hp0 c!s  then                            2dup duplicated-history? if  2drop exit  then                   dup too-long-for-history?                                       if  dup allocate-history throw  then                            dup 1+ allot-history                                            hp @ dup system-bank place default-bank                                  currently-browsed-history !  ;                       -->                                                                                                                                                                                                                                                             ( history-xxx-old )                                             : get-history   ( -- ca )  browsed-history set-accept  ;        : (history-up)    ( -- ca )  get-history older-history  ;       : (history-down)  ( -- ca )  get-history newer-history  ;       variable history                                                : history-off  ( -- )                                             ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off  ;                 : history-on  ( -- )                                              ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on  ;     : .history  ( -- )                                                hp @  begin  dup hp0 <  while                                           system-bank count 2dup type cr default-bank  +                repeat  drop  ;                                         \ history-on                                                    ( list )                                                        need .line  need nuf?                                           : list  ( n -- )                                                  dup scr !                                                       cr ." Scr # " .                                                 l/scr 0 do                                                        cr i 2 .r space i scr @ .line                                   nuf? ?leave                                                   loop crindex .index )                                                need .line  need nuf?                                           : .index  ( n -- )  cr dup 3 .r space 0 swap .line  ;           : index  ( n1 n2 -- )                                             1+ swap ?do                                                       cr i 3 .r space 0 i .line  nuf? ?leave                        loopindex-like )                                                  need .index  need nuf?                                          [defined] contains                                                ?\ : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;  : index-like  ( n1 n2 "name" -- )                                 parse-name 2swap                                                1+ swap ?do                                                       0 i line>string 2over contains if  i .index  then               nuf? ?leave                                                   loop  2drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                ( index-ilike )                                                 need .index                                                     [defined] contains                                                ?\ : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;  : index-ilike  ( n1 n2 "name" -- )                                parse-name save-string 2dup uppers                              2swap 1+ swap ?do                                                 save-string  0 i line>string save-string 2dup uppers            2over contains if  i .index  then                               nuf? ?leave                                                   loop  2drop  ;                                                                                                                                                                                                                                                                                                                                                                                ( .depth )                                                      : .depth  ( n -- )  '<' emit 0 .r '>' emit space  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( .s )                                                          need .depth                                                     : .s   ( -- )                                                     depth dup .depth 0> if                                            sp@ sp0 @ cell- do i @ .  [ cell negate ] literal +loop       thenu.s )                                                         need .depth                                                     : u.s   ( -- )                                                    depth dup .depth 0> if                                            sp@ sp0 @ cell- do i @ u.  [ cell negate ] literal +loop      thenwordlists .wid .current .context order )                      need [if]                                                       [needed] wordlists [if]                                         : wordlists  ( -- )                                               voc-link begin  @ ?dup  while  dup .wid wid>link  repeat  ;   exit [then]                                                     need wid>name  need get-order                                   : .wid  ( wid -- )                                                dup wid>name ?dup if  .name drop exit  then  u.  ;            : .current  ( -- )  get-current .wid  ;                         : .context  ( -- )                                                get-order begin  ?dup  while  swap .wid 1-  repeat  ;         : order  ( -- )                                                   cr ." Search: " .context cr ." Compile: " .current  ;                                                                                                                                         ( more-words? words wordlist-words )                            need nuf?                                                       : more-words?  ( nt|0 -- nt|0 f )  dup 0<>  nuf? 0= and  ;      [needed] more-word? ?exit                                       need trail  need name<name  need tab                            : words  ( -- )                                                   trail begin  more-words?  while                                         dup .name tab  name<name                                      repeat drop  ;                                          [needed] words  ?exit                                           : wordlist-words  ( wid -- )  >order  words  previous  ;                                                                                                                                                                                                                                                                                                                                        ( words-like words# )                                           need trail  need name<name  need tab  need more-words?          need [if]                                                       [needed] words-like [if]  [defined] contains                    ?\ : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;    : words-like  ( "name" -- )                                       parse-name 2dup uppers trail  ( ca len nt )                     begin  more-words?  while                                         dup >r name>string 2over contains if  r@ .name tab  then            r> name<name                                              repeat drop 2drop  ;  [then]                                  [needed] words# [if]                                            : words#  ( -- n ) 0 trail begin  ( n nt ) dup 0<>  while                                    swap 1+ swap  name<name                                       repeat drop  ;  [then]                                                                               ( marker )                                                      : wordlists,  ( -- )                                              voc-link @ begin                                                  dup cell- @  ( a nt ) , @                                     ?dup 0= until  ;                                              : @wordlists  ( a -- )                                            voc-link @ begin                                                  2dup  swap @ swap cell- !                                       swap cell+ swap  @                                            ?dup 0= until  drop  ;                                        -->                                                                                                                                                                                                                                                                                                                                                                                             ( marker )                                                      need get-order  need @cell+  need nn,  need nn@  need there     : @order  ( a -- )  nn@ set-order  ;                            : unmarker  ( a -- )                                              dup there                                                       @cell+ hp!  @cell+ last !  @cell+ lastxt !  @cell+ voc-link !   @cell+ set-current                                              dup dup @ 1+ cells + >r  @order  r> @wordlists  ;             : order,  ( -- )  get-order nn,  ;                              : marker,  ( -- a )                                               here  hp@ ,  last @ ,  lastxt @ ,  voc-link @ ,                       get-current ,  order,  wordlists,  ;                    : marker  ( "name" -- )                                           marker, create ,  does>  ( -- )  ( pfa ) @ unmarker  ;                                                                                                                                        ( anew )                                                        need possibly  need marker                                      : anew  ( "name" -- )  >in @  possibly  >in !  markerextend size system turnkey )                                  : extend  ( -- )                                                  latest $08 +origin !  \ top most word in `forth` vocabulary     here $1F +origin !   \ `dp` init value                          hp@ $26 +origin !   \ `hp` init value                           voc-link @ $0C +origin !  ;  \ `voc-link` init value          : size  ( -- u )  here 0 +origin -  ;                           : system  ( -- a len )  extend  0 +origin size 10 +  ;          : turnkey  ( xt -- a len )  boot defer! system  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( wid>link (wid>name wid>name )                                 [unneeded] wid>link                                             ?\ need alias  ' cell+ alias wid>link  ( wid -- a ) exit        [unneeded] (wid>name                                            ?\ : (wid>name  ( wid -- a )  [ 2 cells ] literal +  ; exit     [unneeded] wid>name                                             ?\ need (wid>name : wid>name  ( wid -- nt|0 )  (wid>namenamed-wid wid>vocabulary vocabulary )                         need ?(  [unneeded] named-wid ?(  need (wid>name                : named-wid  ( wid -- )  (wid>name latest swap !  ; ?)          [unneeded] wid>vocabulary ?(  need named-wid                    : wid>vocabulary  ( wid "name" -- )                               create dup , named-wid dovocabulary  ; ?)                     [unneeded] vocabulary ?(  need wid>vocabulary                   : vocabulary  ( "name" -- )  wordlist wid>vocabularyget-order order@ )                                            need recurse                                                    : order@  ( a -- u*wid u )                                        dup @ dup if    >r cell+  recurse  r> swap 1+ exit                        then  nip  ;                                        : get-order  ( -- u*wid u )  context ordertrail find-name-in find swap-current wid-of )                 [unneeded] trail ?\ : trail  ( -- nt )  context @ @  ;  exit    [unneeded] find-name-in                                         ?\ : find-name-in  ( ca len wid -- nt | 0 ) @ find-name-from  ; need ?(  [unneeded] find ?(                                     : find  ( ca -- ca 0 | xt 1 | xt -1 )                             dup count find-name dup                                         if  nip name>immediate? 1 or negate  then  ; ?)               [unneeded] swap-current ?(                                      : swap-current  ( wid1 -- wid2 )                                  get-current swap set-current  ; ?)                            [unneeded] wid-of ?( need >body                                   : wid-of  ( "name" -- wid )  ' >body @  ; ?)                                                                                                                                                                                                                  ( hayes-test )                                                  need hayes-tester  verbose on  hex  warnings off                { -> }  \ start with clean slate                                { : bitsset? if 0 0 else 0 then ; -> }                          {  0 bitsset? -> 0 } {  1 bitsset? -> 0 0 }                     { -1 bitsset? -> 0 0 }                                          testing( invert and or xor)                                     { 0 0 and -> 0 } { 0 1 and -> 0 }                               { 1 0 and -> 0 } { 1 1 and -> 1 }                               { 0 invert 1 and -> 1 } { 1 invert 1 and -> 0 }                 0  constant 0s  0 invert constant 1s                            { 0s invert -> 1s } { 1s invert -> 0s } { 0s 0s and -> 0s }     { 0s 1s and -> 0s } { 1s 0s and -> 0s } { 1s 1s and -> 1s }     { 0s 0s or -> 0s } { 0s 1s or -> 1s } { 1s 0s or -> 1s }        { 1s 1s or -> 1s } { 0s 0s xor -> 0s } { 0s 1s xor -> 1s }      { 1s 0s xor -> 1s } { 1s 1s xor -> 0s }  -->                    ( hayes-test )                                                  testing( 2* 2/)  need rshift  need 2/                           1s 1 rshift invert constant msb { msb bitsset? -> 0 0 }         { 0s 2* -> 0s } { 1 2* -> 2 } { 4000 2* -> 8000 }               { 1s 2* 1 xor -> 1s } { msb 2* -> 0s } { 0s 2/ -> 0s }          { 1 2/ -> 0 } { 4000 2/ -> 2000 }                               { 1s 2/ -> 1s }  \ msb propagated                               { 1s 1 xor 2/ -> 1s } { msb 2/ msb and -> msb }hayes-test )                                                  testing( lshift rshift)  need lshift  need rshift               { 1 0 lshift -> 1 } { 1 1 lshift -> 2 } { 1 2 lshift -> 4 }     { 1 f lshift -> 8000 }  \ biggest guaranteed shift              { 1s 1 lshift 1 xor -> 1s } { msb 1 lshift -> 0 }               { 1 0 rshift -> 1 } { 1 1 rshift -> 0 } { 2 1 rshift -> 1 }     { 4 2 rshift -> 1 }                                             { 8000 f rshift -> 1 }  \ biggest                               { msb 1 rshift msb and -> 0 }  \ rshift zero fills msbs         { msb 1 rshift 2* -> msb }  -->                                                                                                                                                                                                                                                                                                                                                                                                                                 ( hayes-test )                                                  testing( 0= = 0< < > u< min max)                                0 invert  constant max-uint                                     0 invert 1 rshift  constant max-int                             0 invert 1 rshift invert  constant min-int                      0 invert 1 rshift  constant mid-uint                            0 invert 1 rshift invert  constant mid-uint+1                   0s constant <false> 1s constant <true>                          { 0 0= -> <true> } { 1 0= -> <false> } { 2 0= -> <false> }      { -1 0= -> <false> } { max-uint 0= -> <false> }                 { min-int 0= -> <false> } { max-int 0= -> <false> }  -->                                                                                                                                                                                                                                                                                                                                        ( hayes-test )                                                  { 0 0 = -> <true> } { 1 1 = -> <true> } { -1 -1 = -> <true> }   { 1 0 = -> <false> } { -1 0 = -> <false> } { 0 1 = -> <false> } { 0 -1 = -> <false> } { 0 0< -> <false> } { -1 0< -> <true> }   { min-int 0< -> <true> } { 1 0< -> <false> }                    { max-int 0< -> <false> } { 0 1 < -> <true> }                   { 1 2 < -> <true> } { -1 0 < -> <true> } { -1 1 < -> <true> }   { min-int 0 < -> <true> } { min-int max-int < -> <true> }       { 0 max-int < -> <true> } { 0 0 < -> <false> }                  { 1 1 < -> <false> } { 1 0 < -> <false> } { 2 1 < -> <false> }  { 0 -1 < -> <false> } { 1 -1 < -> <false> }                     { 0 min-int < -> <false> } { max-int min-int < -> <false> }     { max-int 0 < -> <false> } { 0 1 > -> <false> }                 { 1 2 > -> <false> } { -1 0 > -> <false> }                      { -1 1 > -> <false> } { min-int 0 > -> <false> }                { min-int max-int > -> <false> } { 0 max-int > -> <false> } --> ( hayes-test )                                                  { 0 0 > -> <false> } { 1 1 > -> <false> } { 1 0 > -> <true> }   { 2 1 > -> <true> } { 0 -1 > -> <true> } { 1 -1 > -> <true> }   { 0 min-int > -> <true> } { max-int min-int > -> <true> }       { max-int 0 > -> <true> } { 0 1 u< -> <true> }                  { 1 2 u< -> <true> } { 0 mid-uint u< -> <true> }                { 0 max-uint u< -> <true> } { mid-uint max-uint u< -> <true> }  { 0 0 u< -> <false> } { 1 1 u< -> <false> }                     { 1 0 u< -> <false> } { 2 1 u< -> <false> }                     { mid-uint 0 u< -> <false> } { max-uint 0 u< -> <false> }       { max-uint mid-uint u< -> <false> } { 0 1 min -> 0 }            { 1 2 min -> 1 } { -1 0 min -> -1 } { -1 1 min -> -1 }          { min-int 0 min -> min-int } { min-int max-int min -> min-int } { 0 max-int min -> 0 } { 0 0 min -> 0 } { 1 1 min -> 1 }        { 1 0 min -> 0 } { 2 1 min -> 1 } -->                                                                                           ( hayes-test )                                                  { 0 -1 min -> -1 } { 1 -1 min -> -1 }                           { 0 min-int min -> min-int } { max-int min-int min -> min-int } { max-int 0 min -> 0 } { 0 1 max -> 1 } { 1 2 max -> 2 }        { -1 0 max -> 0 } { -1 1 max -> 1 } { min-int 0 max -> 0 }      { min-int max-int max -> max-int } { 0 max-int max -> max-int } { 0 0 max -> 0 } { 1 1 max -> 1 } { 1 0 max -> 1 }              { 2 1 max -> 2 } { 0 -1 max -> 0 } { 1 -1 max -> 1 }            { 0 min-int max -> 0 } { max-int min-int max -> max-int }       { max-int 0 max -> max-int }  -->                                                                                                                                                                                                                                                                                                                                                                                                                               ( hayes-test )                                                  testing( stack ops)                                             { 1 2 2drop -> } { 1 2 2dup -> 1 2 1 2 }                        { 1 2 3 4 2over -> 1 2 3 4 1 2 } { 1 2 3 4 2swap -> 3 4 1 2 }   { 0 ?dup -> 0 } { 1 ?dup -> 1 1 } { -1 ?dup -> -1 -1 }          { depth -> 0 } { 0 depth -> 0 1 } { 0 1 depth -> 0 1 2 }        { 0 drop -> } { 1 2 drop -> 1 } { 1 dup -> 1 1 }                { 1 2 over -> 1 2 1 } { 1 2 3 rot -> 2 3 1 }                    { 1 2 swap -> 2 1 }                                             testing( >r r> r@)                                              { : gr1 >r r> ; -> } { : gr2 >r r@ r> drop ; -> }               { 123 gr1 -> 123 } { 123 gr2 -> 123 }                           { 1s gr1 -> 1s }  \ return stack holds cells                    -->                                                                                                                                                                                             ( hayes-test )                                                  testing( + - 1+ 1- abs negate)                                  { 0 5 + -> 5 } { 5 0 + -> 5 } { 0 -5 + -> -5 } { -5 0 + -> -5 } { 1 2 + -> 3 } { 1 -2 + -> -1 } { -1 2 + -> 1 }                 { -1 -2 + -> -3 } { -1 1 + -> 0 }                               { mid-uint 1 + -> mid-uint+1 } { 0 5 - -> -5 } { 5 0 - -> 5 }   { 0 -5 - -> 5 } { -5 0 - -> -5 } { 1 2 - -> -1 }                { 1 -2 - -> 3 } { -1 2 - -> -3 } { -1 -2 - -> 1 }               { 0 1 - -> -1 } { mid-uint+1 1 - -> mid-uint } { 0 1+ -> 1 }    { -1 1+ -> 0 } { 1 1+ -> 2 } { mid-uint 1+ -> mid-uint+1 }      { 2 1- -> 1 } { 1 1- -> 0 } { 0 1- -> -1 }                      { mid-uint+1 1- -> mid-uint } { 0 negate -> 0 }                 { 1 negate -> -1 } { -1 negate -> 1 } { 2 negate -> -2 }        { -2 negate -> 2 } { 0 abs -> 0 } { 1 abs -> 1 }                { -1 abs -> 1 } { min-int abs -> mid-uint+1 } -->                                                                               ( hayes-test )                                                  testing( s>d * m* um*)                                          { 0 s>d -> 0 0 } { 1 s>d -> 1 0 } { 2 s>d -> 2 0 }              { -1 s>d -> -1 -1 } { -2 s>d -> -2 -1 }                         { min-int s>d -> min-int -1 } { max-int s>d -> max-int 0 }      { 0 0 m* -> 0 s>d } { 0 1 m* -> 0 s>d } { 1 0 m* -> 0 s>d }     { 1 2 m* -> 2 s>d } { 2 1 m* -> 2 s>d } { 3 3 m* -> 9 s>d }     { -3 3 m* -> -9 s>d } { 3 -3 m* -> -9 s>d }                     { -3 -3 m* -> 9 s>d } { 0 min-int m* -> 0 s>d }                 { 1 min-int m* -> min-int s>d } { 2 min-int m* -> 0 1s }        { 0 max-int m* -> 0 s>d } { 1 max-int m* -> max-int s>d }       { 2 max-int m* -> max-int 1 lshift 0 }                          { min-int min-int m* -> 0 msb 1 rshift }                        { max-int min-int m* -> msb msb 2/ }                            { max-int max-int m* -> 1 msb 2/ invert } -->                                                                                   ( hayes-test )                                                  { 0 0 * -> 0 } { 0 1 * -> 0 } { 1 0 * -> 0 } { 1 2 * -> 2 }     { 2 1 * -> 2 } { 3 3 * -> 9 } { -3 3 * -> -9 } { 3 -3 * -> -9 } { -3 -3 * -> 9 }                                                { mid-uint+1 1 rshift 2 * -> mid-uint+1 }                       { mid-uint+1 2 rshift 4 * -> mid-uint+1 }                       { mid-uint+1 1 rshift mid-uint+1 or 2 * -> mid-uint+1 }         { 0 0 um* -> 0 0 } { 0 1 um* -> 0 0 } { 1 0 um* -> 0 0 }        { 1 2 um* -> 2 0 } { 2 1 um* -> 2 0 } { 3 3 um* -> 9 0 }        { mid-uint+1 1 rshift 2 um* -> mid-uint+1 0 }                   { mid-uint+1 2 um* -> 0 1 } { mid-uint+1 4 um* -> 0 2 }         { 1s 2 um* -> 1s 1 lshift 1 }                                   { max-uint max-uint um* -> 1 1 invert } -->                                                                                                                                                                                                                     ( hayes-test )                                                  testing( fm/mod sm/rem um/mod */ */mod / /mod mod)              need fm/mod                                                     { 0 s>d 1 fm/mod -> 0 0 } { 1 s>d 1 fm/mod -> 0 1 }             { 2 s>d 1 fm/mod -> 0 2 } { -1 s>d 1 fm/mod -> 0 -1 }           { -2 s>d 1 fm/mod -> 0 -2 } { 0 s>d -1 fm/mod -> 0 0 }          { 1 s>d -1 fm/mod -> 0 -1 } { 2 s>d -1 fm/mod -> 0 -2 }         { -1 s>d -1 fm/mod -> 0 1 } { -2 s>d -1 fm/mod -> 0 2 }         { 2 s>d 2 fm/mod -> 0 1 } { -1 s>d -1 fm/mod -> 0 1 }           { -2 s>d -2 fm/mod -> 0 1 } {  7 s>d  3 fm/mod -> 1 2 }  -->                                                                                                                                                                                                                                                                                                                                                                                                    ( hayes-test )                                                  {  7 s>d -3 fm/mod -> -2 -3 } { -7 s>d  3 fm/mod -> 2 -3 }      { -7 s>d -3 fm/mod -> -1 2 }                                    { max-int s>d 1 fm/mod -> 0 max-int }                           { min-int s>d 1 fm/mod -> 0 min-int }                           { max-int s>d max-int fm/mod -> 0 1 }                           { min-int s>d min-int fm/mod -> 0 1 }                           { 1s 1 4 fm/mod -> 3 max-int }                                  { 1 min-int m* 1 fm/mod -> 0 min-int }                          { 1 min-int m* min-int fm/mod -> 0 1 }                          { 2 min-int m* 2 fm/mod -> 0 min-int }                          { 2 min-int m* min-int fm/mod -> 0 2 }                          { 1 max-int m* 1 fm/mod -> 0 max-int }                          { 1 max-int m* max-int fm/mod -> 0 1 }                          { 2 max-int m* 2 fm/mod -> 0 max-int }                          { 2 max-int m* max-int fm/mod -> 0 2 } -->                      ( hayes-test )                                                  { min-int min-int m* min-int fm/mod -> 0 min-int }              { min-int max-int m* min-int fm/mod -> 0 max-int }              { min-int max-int m* max-int fm/mod -> 0 min-int }              { max-int max-int m* max-int fm/mod -> 0 max-int }              { 0 s>d 1 sm/rem -> 0 0 } { 1 s>d 1 sm/rem -> 0 1 }             { 2 s>d 1 sm/rem -> 0 2 } { -1 s>d 1 sm/rem -> 0 -1 }           { -2 s>d 1 sm/rem -> 0 -2 } { 0 s>d -1 sm/rem -> 0 0 }          { 1 s>d -1 sm/rem -> 0 -1 } { 2 s>d -1 sm/rem -> 0 -2 }         { -1 s>d -1 sm/rem -> 0 1 } { -2 s>d -1 sm/rem -> 0 2 }         { 2 s>d 2 sm/rem -> 0 1 } { -1 s>d -1 sm/rem -> 0 1 }           { -2 s>d -2 sm/rem -> 0 1 } {  7 s>d  3 sm/rem -> 1 2 }         {  7 s>d -3 sm/rem -> 1 -2 } { -7 s>d  3 sm/rem -> -1 -2 }      { -7 s>d -3 sm/rem -> -1 2 }                                    { max-int s>d 1 sm/rem -> 0 max-int }                           { min-int s>d 1 sm/rem -> 0 min-int } -->                       ( hayes-test )                                                  { max-int s>d max-int sm/rem -> 0 1 }                           { min-int s>d min-int sm/rem -> 0 1 }                           { 1s 1 4 sm/rem -> 3 max-int }                                  { 2 min-int m* 2 sm/rem -> 0 min-int }                          { 2 min-int m* min-int sm/rem -> 0 2 }                          { 2 max-int m* 2 sm/rem -> 0 max-int }                          { 2 max-int m* max-int sm/rem -> 0 2 }                          { min-int min-int m* min-int sm/rem -> 0 min-int }              { min-int max-int m* min-int sm/rem -> 0 max-int }              { min-int max-int m* max-int sm/rem -> 0 min-int }              { max-int max-int m* max-int sm/rem -> 0 max-int }              { 0 0 1 um/mod -> 0 0 } { 1 0 1 um/mod -> 0 1 }                 { 1 0 2 um/mod -> 1 0 } { 3 0 2 um/mod -> 1 1 }                 { max-uint 2 um* 2 um/mod -> 0 max-uint }                       { max-uint 2 um* max-uint um/mod -> 0 2 } -->                   ( hayes-test )                                                  { max-uint max-uint um* max-uint um/mod -> 0 max-uint }         : iffloored                                                       [ -3 2 / -2 = invert ] literal if postpone \ then ;           : ifsym                                                           [ -3 2 / -1 = invert ] literal if postpone \ then ;           iffloored : t/mod  >r s>d r> fm/mod ;                           iffloored : t/  t/mod swap drop ;                               iffloored : tmod  t/mod drop ;                                  iffloored : t*/mod >r m* r> fm/mod ;                            iffloored : t*/  t*/mod swap drop ;                             ifsym  : t/mod  >r s>d r> sm/rem ;                              ifsym  : t/  t/mod swap drop ;                                  ifsym  : tmod  t/mod drop ;                                     ifsym  : t*/mod >r m* r> sm/rem ;                               ifsym  : t*/  t*/mod swap drop ; -->                            ( hayes-test )                                                  { 0 1 /mod -> 0 1 t/mod } { 1 1 /mod -> 1 1 t/mod }             { 2 1 /mod -> 2 1 t/mod } { -1 1 /mod -> -1 1 t/mod }           { -2 1 /mod -> -2 1 t/mod } { 0 -1 /mod -> 0 -1 t/mod }         { 1 -1 /mod -> 1 -1 t/mod } { 2 -1 /mod -> 2 -1 t/mod }         { -1 -1 /mod -> -1 -1 t/mod } { -2 -1 /mod -> -2 -1 t/mod }     { 2 2 /mod -> 2 2 t/mod } { -1 -1 /mod -> -1 -1 t/mod }         { -2 -2 /mod -> -2 -2 t/mod } { 7 3 /mod -> 7 3 t/mod }         { 7 -3 /mod -> 7 -3 t/mod } { -7 3 /mod -> -7 3 t/mod }         { -7 -3 /mod -> -7 -3 t/mod }                                   { max-int 1 /mod -> max-int 1 t/mod }                           { min-int 1 /mod -> min-int 1 t/mod }                           { max-int max-int /mod -> max-int max-int t/mod }               { min-int min-int /mod -> min-int min-int t/mod } -->                                                                                                                                           ( hayes-test )                                                  { 0 1 / -> 0 1 t/ } { 1 1 / -> 1 1 t/ } { 2 1 / -> 2 1 t/ }     { -1 1 / -> -1 1 t/ } { -2 1 / -> -2 1 t/ }                     { 0 -1 / -> 0 -1 t/ } { 1 -1 / -> 1 -1 t/ }                     { 2 -1 / -> 2 -1 t/ } { -1 -1 / -> -1 -1 t/ }                   { -2 -1 / -> -2 -1 t/ } { 2 2 / -> 2 2 t/ }                     { -1 -1 / -> -1 -1 t/ } { -2 -2 / -> -2 -2 t/ }                 { 7 3 / -> 7 3 t/ } { 7 -3 / -> 7 -3 t/ }                       { -7 3 / -> -7 3 t/ } { -7 -3 / -> -7 -3 t/ }                   { max-int 1 / -> max-int 1 t/ }                                 { min-int 1 / -> min-int 1 t/ }                                 { max-int max-int / -> max-int max-int t/ }                     { min-int min-int / -> min-int min-int t/ }                     { 0 1 mod -> 0 1 tmod } { 1 1 mod -> 1 1 tmod }                 { 2 1 mod -> 2 1 tmod } { -1 1 mod -> -1 1 tmod }               { -2 1 mod -> -2 1 tmod } { 0 -1 mod -> 0 -1 tmod }  -->        ( hayes-test )                                                  { 1 -1 mod -> 1 -1 tmod } { 2 -1 mod -> 2 -1 tmod }             { -1 -1 mod -> -1 -1 tmod } { -2 -1 mod -> -2 -1 tmod }         { 2 2 mod -> 2 2 tmod } { -1 -1 mod -> -1 -1 tmod }             { -2 -2 mod -> -2 -2 tmod } { 7 3 mod -> 7 3 tmod }             { 7 -3 mod -> 7 -3 tmod } { -7 3 mod -> -7 3 tmod }             { -7 -3 mod -> -7 -3 tmod } { max-int 1 mod -> max-int 1 tmod } { min-int 1 mod -> min-int 1 tmod }                             { max-int max-int mod -> max-int max-int tmod }                 { min-int min-int mod -> min-int min-int tmod }                 { 0 2 1 */ -> 0 2 1 t*/ } { 1 2 1 */ -> 1 2 1 t*/ }             { 2 2 1 */ -> 2 2 1 t*/ } { -1 2 1 */ -> -1 2 1 t*/ }           { -2 2 1 */ -> -2 2 1 t*/ } { 0 2 -1 */ -> 0 2 -1 t*/ }         { 1 2 -1 */ -> 1 2 -1 t*/ } { 2 2 -1 */ -> 2 2 -1 t*/ }         { -1 2 -1 */ -> -1 2 -1 t*/ } { -2 2 -1 */ -> -2 2 -1 t*/ }     { 2 2 2 */ -> 2 2 2 t*/ }  -->                                  ( hayes-test )                                                  { -1 2 -1 */ -> -1 2 -1 t*/ } { -2 2 -2 */ -> -2 2 -2 t*/ }     { 7 2 3 */ -> 7 2 3 t*/ } { 7 2 -3 */ -> 7 2 -3 t*/ }           { -7 2 3 */ -> -7 2 3 t*/ } { -7 2 -3 */ -> -7 2 -3 t*/ }       { max-int 2 max-int */ -> max-int 2 max-int t*/ }               { min-int 2 min-int */ -> min-int 2 min-int t*/ }               { 0 2 1 */mod -> 0 2 1 t*/mod } { 1 2 1 */mod -> 1 2 1 t*/mod } { 2 2 1 */mod -> 2 2 1 t*/mod }                                 { -1 2 1 */mod -> -1 2 1 t*/mod }                               { -2 2 1 */mod -> -2 2 1 t*/mod }                               { 0 2 -1 */mod -> 0 2 -1 t*/mod }                               { 1 2 -1 */mod -> 1 2 -1 t*/mod }                               { 2 2 -1 */mod -> 2 2 -1 t*/mod }                               { -1 2 -1 */mod -> -1 2 -1 t*/mod }                             { -2 2 -1 */mod -> -2 2 -1 t*/mod }                             { 2 2 2 */mod -> 2 2 2 t*/mod } -->                             ( hayes-test )                                                  { -1 2 -1 */mod -> -1 2 -1 t*/mod }                             { -2 2 -2 */mod -> -2 2 -2 t*/mod }                             { 7 2 3 */mod -> 7 2 3 t*/mod }                                 { 7 2 -3 */mod -> 7 2 -3 t*/mod }                               { -7 2 3 */mod -> -7 2 3 t*/mod }                               { -7 2 -3 */mod -> -7 2 -3 t*/mod }                             { max-int 2 max-int */mod -> max-int 2 max-int t*/mod }         { min-int 2 min-int */mod -> min-int 2 min-int t*/mod }         testing( here , @ ! cell+ cells c, c@ c! chars 2@ 2! +! aligned align allot)                                                    here 1 allot here constant 2nda constant 1sta                   { 1sta 2nda u< -> <true> } { 1sta 1+ -> 2nda }                  -->                                                                                                                                                                                             ( hayes-test )                                                  here 1 , here 2 , constant 2nd constant 1st                     { 1st 2nd u< -> <true> } { 1st cell+ -> 2nd }                   { 1st 1 cells + -> 2nd } { 1st @ 2nd @ -> 1 2 } { 5 1st ! -> }  { 1st @ 2nd @ -> 5 2 } { 6 2nd ! -> } { 1st @ 2nd @ -> 5 6 }    { 1st 2@ -> 6 5 } { 2 1 1st 2! -> } { 1st 2@ -> 2 1 }           { 1s 1st !  1st @ -> 1s }  \ can store cell-wide value          here 1 c, here 2 c, constant 2ndc constant 1stc                 { 1stc 2ndc u< -> <true> } { 1stc char+ -> 2ndc }               { 1stc 1 chars + -> 2ndc } { 1stc c@ 2ndc c@ -> 1 2 }           { 3 1stc c! -> } { 1stc c@ 2ndc c@ -> 3 2 }                     { 4 2ndc c! -> } { 1stc c@ 2ndc c@ -> 3 4 }                     -->                                                                                                                                                                                                                                                             ( hayes-test )                                                  need align  need aligned                                        align 1 allot here align here 3 cells allot                     constant a-addr  constant ua-addr                               { ua-addr aligned -> a-addr }                                   {  1 a-addr c!  a-addr c@ ->  1 }                               { 1234 a-addr  !  a-addr  @ -> 1234 }                           { 123 456 a-addr 2!  a-addr 2@ -> 123 456 }                     { 2 a-addr char+ c!  a-addr char+ c@ -> 2 }                     { 3 a-addr cell+ c!  a-addr cell+ c@ -> 3 }                     { 1234 a-addr cell+ !  a-addr cell+ @ -> 1234 }                 { 123 456 a-addr cell+ 2!  a-addr cell+ 2@ -> 123 456 }         -->                                                                                                                                                                                                                                                             ( hayes-test )                                                  : bits ( x -- u )                                                 0 swap begin   dup                                                     while   dup msb and if  >r 1+ r>  then  2*                      repeat  drop ;                                         { 1 chars 1 < -> <false> } { 1 chars 1 cells > -> <false> }     { 1 cells 1 < -> <false> } { 1 cells 1 chars mod -> 0 }         { 1s bits 10 < -> <false> }                                     { 0 1st ! -> } { 1 1st +! -> } { 1st @ -> 1 }                   { -1 1st +! 1st @ -> 0 }                                        testing( char [char] [ ] bl s") need char  need [char]          { bl -> 20 } { char X -> 58 } { char HELLO -> 48 }              { : gc1 [char] X ; -> } { : gc2 [char] HELLO ; -> }             { gc1 -> 58 } { gc2 -> 48 } { : gc3 [ gc1 ] literal ; -> }      { gc3 -> 58 } { : gc4 s" XY" ; -> } { gc4 swap drop -> 2 }      { gc4 drop dup c@ swap char+ c@ -> 58 59 } -->                  ( hayes-test )                                                  testing( ' ['] find execute immediate count literal postpone    state)                                                          need find                                                       { : gt1 123 ; -> } { ' gt1 execute -> 123 }                     { : gt2 ['] gt1 ; immediate -> } { gt2 execute -> 123 }         here 3 c, char G c, char T c, char 1 c, constant gt1string      here 3 c, char G c, char T c, char 2 c, constant gt2string      { gt1string find -> ' gt1 -1 } { gt2string find -> ' gt2 1 }    { : gt3 gt2 literal ; -> } { gt3 -> ' gt1 }                     { gt1string count -> gt1string char+ 3 }                        { : gt4 postpone gt1 ; immediate -> } { : gt5 gt4 ; -> }        { gt5 -> 123 } { : gt6 345 ; immediate -> }                     { : gt7 postpone gt6 ; -> } { gt7 -> 345 }                      { : gt8 state @ ; immediate -> } { gt8 -> 0 }                   { : gt9 gt8 literal ; -> } { gt9 0= -> <false> } -->            ( hayes-test )                                                  testing( if else then)                                          { : gi1 if 123 then ; -> } { : gi2 if 123 else 234 then ; -> }  { 0 gi1 -> } { 1 gi1 -> 123 } { -1 gi1 -> 123 }                 { 0 gi2 -> 234 } { 1 gi2 -> 123 } { -1 gi1 -> 123 }             testing( begin while repeat until recurse)                      { : gi3 begin dup 5 < while dup 1+ repeat ; -> }                { 0 gi3 -> 0 1 2 3 4 5 }                                        { 4 gi3 -> 4 5 } { 5 gi3 -> 5 } { 6 gi3 -> 6 }                  { : gi4 begin dup 1+ dup 5 > until ; -> }                       { 3 gi4 -> 3 4 5 6 } { 5 gi4 -> 5 6 } { 6 gi4 -> 6 7 }          { : gi5 begin dup 2 >                                               while dup 5 < while dup 1+ repeat 123 else 345 then ; -> }  { 1 gi5 -> 1 345 }      { 2 gi5 -> 2 345 }                      { 3 gi5 -> 3 4 5 123 }  { 4 gi5 -> 4 5 123 }                    { 5 gi5 -> 5 123 }  -->                                         ( hayes-test )                                                  testing( recurse) need recurse                                  { : gi6 ( n -- 0,1,..n ) dup if dup >r 1- recurse r> then ;     -> }                                                            { 0 gi6 -> 0 } { 1 gi6 -> 0 1 } { 2 gi6 -> 0 1 2 }              { 3 gi6 -> 0 1 2 3 } { 4 gi6 -> 0 1 2 3 4 }                     testing( do loop +loop i j unloop leave exit)  need j           { : gd1 do i loop ; -> } { 4 1 gd1 -> 1 2 3 }                   { 2 -1 gd1 -> -1 0 1 } { mid-uint+1 mid-uint gd1 -> mid-uint }  { : gd2 do i -1 +loop ; -> } { 1 4 gd2 -> 4 3 2 1 }             { -1 2 gd2 -> 2 1 0 -1 }                                        { mid-uint mid-uint+1 gd2 -> mid-uint+1 mid-uint }              { : gd3 do 1 0 do j loop loop ; -> }                            { 4 1 gd3 -> 1 2 3 } { 2 -1 gd3 -> -1 0 1 }                     { mid-uint+1 mid-uint gd3 -> mid-uint } -->                                                                                     ( hayes-test )                                                  { : gd4 do 1 0 do j loop -1 +loop ; -> }                        { 1 4 gd4 -> 4 3 2 1 }                                          { -1 2 gd4 -> 2 1 0 -1 }                                        { mid-uint mid-uint+1 gd4 -> mid-uint+1 mid-uint }              { : gd5 123 swap 0 do i 4 > if drop 234 leave then loop ; -> }  { 1 gd5 -> 123 } { 5 gd5 -> 123 } { 6 gd5 -> 234 }              { : gd6                                                             0 swap 0 do                                                     i 1+ 0 do i j + 3 = if i unloop i unloop exit then 1+ loop      loop ; -> }                                                 { 1 gd6 -> 1 }  { 2 gd6 -> 3 }  { 3 gd6 -> 4 1 2 } -->                                                                                                                                                                                                                                                                          ( hayes-test )                                                  testing( : ; constant variable create does> >body)              need >body                                                      { 123 constant x123 -> } { x123 -> 123 }                        { : equ constant ; -> } { x123 equ y123 -> } { y123 -> 123 }    { variable v1 -> } { 123 v1 ! -> } { v1 @ -> 123 }              { : nop : postpone ; ; -> }                                     { nop nop1 nop nop2 -> } { nop1 -> } { nop2 -> }                { : does1 does> @ 1 + ; -> } { : does2 does> @ 2 + ; -> }       { create cr1 -> } { cr1 -> here }                               { ' cr1 >body -> here }                                         { 1 , -> } { cr1 @ -> 1 } { does1 -> }                          { cr1 -> 2 } { does2 -> } { cr1 -> 3 }                          { : weird: create does> 1 + does> 2 + ; -> }                    { weird: w1 -> } { ' w1 >body -> here }                         { w1 -> here 1 + } { w1 -> here 2 + }  -->                      ( hayes-test )                                                  testing( evaluate)                                              need evaluate                                                   : ge1 s" 123" ; immediate   : ge2 s" 123 1+" ; immediate        : ge3 s" : ge4 345 ;" ;     : ge5 evaluate ; immediate          { ge1 evaluate -> 123 } { ge2 evaluate -> 124 }                 { ge3 evaluate -> } { ge4 -> 345 }                              { : ge6 ge1 ge5 ; -> } { ge6 -> 123 }                           { : ge7 ge2 ge5 ; -> } { ge7 -> 124 }                           testing( source >in word)                                       : gs1 s" SOURCE" 2dup evaluate >r swap >r = r> r> = ;           { gs1 -> <true> <true> }                                        variable scans  2 scans !                                       : rescan?  -1 scans +! scans @ if 0 >in ! then ;                -->                                                                                                                             ( hayes-test )                                                  { 345 rescan?  -> 345 345 }                                     : gs2  5 scans ! s" 123 RESCAN?" evaluatehayes-test )                                                  { gs2 -> 123 123 123 123 123 }                                  need word                                                       : gs3 word count swap c@ ;                                      { bl gs3 HELLO -> 5 char H }                                    { char " gs3 GOODBYE" -> 7 char G }                             need +thru need continued  1 2 +thru  blk @ 3 + continuedhayes-test )                                                  \ line 1                                                        \ line 2                                                        \ line 3                                                        \ line 4                                                        \ line 5                                                        \ line 6                                                        \ line 7                                                        \ line 8                                                        \ line 9                                                        \ line 10                                                       \ line 11                                                       \ line 12                                                       \ line 13                                                       \ line 14                                                                                                              { bl gs3 ( hayes-test )                                                  drop -> 0 }  \ blank line return zero-length string             : gs4 source >in ! drop ;                                       { gs4 123 456                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( hayes-test )                                                  -> }                                                            testing( <# # #s #> hold sign base >number hex decimal)         : s=  \ ( addr1 c1 addr2 c2 -- t/f ) compare two strings.         >r swap r@ = if  \ make sure strings have same length           r> ?dup if  \ if non-empty strings                                0 do  over c@ over c@ - if  2drop <false> unloop exit  then           swap char+ swap char+  loop                             then  2drop <true>  \ if we get here, strings match             else  r> drop 2drop <false>  then ; \ lengths mismatch        : gp1  <# 41 hold 42 hold 0 0 #> s" BA" s= ; { gp1 -> <true> }  : gp2  <# -1 sign 0 sign -1 sign 0 0 #> s" --" s= ;             { gp2 -> <true> }                                               : gp3  <# 1 0 # # #> s" 01" s= ; { gp3 -> <true> }              : gp4  <# 1 0 #s #> s" 1" s= ; { gp4 -> <true> } -->                                                                            ( hayes-test )                                                  24 constant max-base  \ base 2 .. 36                            : count-bits                                                      0 0 invert begin dup while >r 1+ r> 2* repeat drop ;          count-bits 2* constant #bits-ud  \ number of bits in ud         : gp5                                                             base @ <true>                                                   max-base 1+ 2 do  \ for each possible base                        i base !  \ tbd: assumes base works                             i 0 <# #s #> s" 10" s= and                                    loop  swap base ! ;  { gp5 -> <true> } -->                                                                                                                                                                                                                                                                                                                                                    ( hayes-test )                                                  : gp6                                                             base @ >r  2 base !                                             max-uint max-uint <# #s #>  \ maximum ud to binary              r> base !  \ s: c-addr u                                        dup #bits-ud = swap 0 do  \ s: c-addr flag                                              over c@ [char] 1 = and  \ all ones                              >r char+ r>                                                   loop swap drop ;  { gp6 -> <true> }     : gp7                                                             base @ >r  max-base base !  <true>                              a 0 do  i 0 <# #s #>  1 = swap c@ i 30 + = and and  loop        max-base a do                                                     i 0 <# #s #>  1 = swap c@ 41 i a - + = and and                loop  r> base ! ;  { gp7 -> <true> }  -->                                                                                     ( hayes-test )                                                  create gn-buf 0 c,                                              : gn-string  gn-buf 1 ;                                         : gn-consumed  gn-buf char+ 0 ;                                 : gn'  [char] ' word char+ c@ gn-buf c!  gn-string ;            { 0 0 gn' 0' >number -> 0 0 gn-consumed }                       { 0 0 gn' 1' >number -> 1 0 gn-consumed }                       { 1 0 gn' 1' >number -> base @ 1+ 0 gn-consumed }               { 0 0 gn' -' >number -> 0 0 gn-string }                         { 0 0 gn' +' >number -> 0 0 gn-string }                         { 0 0 gn' .' >number -> 0 0 gn-string }                         -->                                                                                                                                                                                                                                                                                                                             ( hayes-test )                                                  : >number-based                                                   base @ >r base ! >number r> base ! ;                          { 0 0 gn' 2' 10 >number-based -> 2 0 gn-consumed }              { 0 0 gn' 2'  2 >number-based -> 0 0 gn-string }                { 0 0 gn' f' 10 >number-based -> f 0 gn-consumed }              { 0 0 gn' g' 10 >number-based -> 0 0 gn-string }                { 0 0 gn' g' max-base >number-based -> 10 0 gn-consumed }       { 0 0 gn' z' max-base >number-based -> 23 0 gn-consumed }       -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( hayes-test )                                                  : gn1  ( ud base -- ud' len )                                     base @ >r base !                                                <# #s #>                                                        0 0 2swap >number swap drop  \ return length only               r> base ! ;                                                   { 0 0 2 gn1 -> 0 0 0 }                                          { max-uint 0 2 gn1 -> max-uint 0 0 }                            { max-uint dup 2 gn1 -> max-uint dup 0 }                        { 0 0 max-base gn1 -> 0 0 0 }                                   { max-uint 0 max-base gn1 -> max-uint 0 0 }                     { max-uint dup max-base gn1 -> max-uint dup 0 }                 : gn2  \ ( -- 16 10 )                                             base @ >r  hex base @  decimal base @  r> base ! ;            { gn2 -> 10 a } -->                                                                                                             ( hayes-test )                                                  testing( fill move)                                             create fbuf 00 c, 00 c, 00 c,                                   create sbuf 12 c, 34 c, 56 c,                                   : seebuf fbuf c@  fbuf char+ c@  fbuf char+ char+ c@ ;          { fbuf 0 20 fill -> } { seebuf -> 00 00 00 }                    { fbuf 1 20 fill -> } { seebuf -> 20 00 00 }                    { fbuf 3 20 fill -> } { seebuf -> 20 20 20 }                    { fbuf fbuf 3 chars move -> } { seebuf -> 20 20 20 }            { sbuf fbuf 0 chars move -> } { seebuf -> 20 20 20 }            { sbuf fbuf 1 chars move -> } { seebuf -> 12 20 20 }            { sbuf fbuf 3 chars move -> } { seebuf -> 12 34 56 }            { fbuf fbuf char+ 2 chars move -> } { seebuf -> 12 12 34 }      { fbuf char+ fbuf 2 chars move -> } { seebuf -> 12 34 34 } -->                                                                                                                                  ( hayes-test )                                                  testing( . ." cr emit space spaces type u.)                     : output-test                                                     ." You should see the standard graphic characters:" cr          41 bl do i emit loop cr 61 41 do i emit loop cr                 7F 61 do i emit loop cr                                         ." You should see 0-9 separated by a space:" cr                 9 1+ 0 do i . loop cr                                           ." You should see 0-9 (with no spaces):" cr                     [char] 9 1+ [char] 0 do i 0 spaces emit loop cr                 ." You should see A-G separated by a space:" cr                 [char] G 1+ [char] A do i emit space loop cr                    ." You should see 0-5 separated by two spaces:" cr              5 1+ 0 do i [char] 0 + emit 2 spaces loop cr                  -->                                                                                                                             ( hayes-test )                                                    ." You should see two separate lines:" cr                       s" line 1" type cr s" line 2" type cr                           ." You should see the number ranges" cr                         ." of signed and unsigned numbers:" cr                          ."   signed: " min-int . max-int . cr                           ." unsigned: " 0 u. max-uint u. cr  ;  { output-test -> }     testing( accept)                                                create abuf 80 chars allot                                      : accept-test                                                     cr ." Please type up to 80 characters:" cr  abuf 80 accept      cr ." Received: " [char] " emit                                 abuf swap type [char] " emit cr  ;  { accept-test -> }        testing( dictionary search rules)                               { : gdx  123 ; : gdx  gdx 234 ; -> } { gdx -> 123 234 }         decimal cr .( Test passed) cr                                   ( alias-test synonym-test )                                     need alias need synonym                                         ' literal alias literal-a                                       ' border alias border-a                                         ' if alias if-a                                                 synonym border-s border                                         synonym literal-s literal                                       synonym if-s if                                                 synonym2 border-s2 border                                       synonym2 literal-s2 literal                                     synonym2 if-s2 if                                                                                                                                                                                                                                                                                                                                                                               ( until-test )                                                  need z80-asm  need dump  need >body                             code until-test  ( -- )                                           begin                                                             nop                                                           z until  jpnext                                                 end-code                                                      ' until-test >body 5 dumpif'-test )                                                    need z80-asm  need dump  need >body                             code if'-test  ( -- )                                             .( here is ) here u.                                            p' if'  \ not expecting a regular character                       nz if  \ not expecting the column                                 cpl  C0 add#  \ now A = 191 - char                              hl incp                                                       then                                                            hl incp  a m ld                                                 ret                                                           then'  end-code                                               ' if'-test >body dup here swap - dump                                                                                                                                                                                                                           ( {if-test {do-test )                                           : test2  ( n -- )                                                 {do   dup 5 <   do> ." <5" cr 1+                                |do|  dup 10 <  do> ." <10" cr 1+                               do} drop  ;                                                   : test1  ( n1 n2 -- )                                             {if   2dup > if> ." >" cr                                       |if|  2dup < if> ." <" cr                                       if}options[-test )                                               : o1 ." option 1" ;  : o2 ." option 2" ;  : o3 ." option 3" ;   : test  ( c -- )                                                  options[                                                          'a' option o1  'b' option o2  'c' option o3                   ]options  ." end of test" cr   ;                              : retest  ( -- )  'a' test ." end of retest" cr  ;              : o0 ." default" ;                                              : testd  ( c -- )                                                 options[                                                          'a' option o1  'b' option o2  'c' option o3                     default-option o0                                             ]options  ;                                                                                                                                                                                                                                                   ( /-test )                                                      [defined] (/)  ?\ defer (/)                                     : ((/-test))  ( dividend divisor -- )                             >r s>d r> (/) swap . . space  ;                               : (/-test)  ( -- )                                                cr  10  7 ((/-test)) -10  7 ((/-test))                              10 -7 ((/-test)) -10 -7 ((/-test))  ;                     : /-test  ( -- )                                                  dup ['] m/     ['] (/) defer! (/-test)                              ['] sm/rem ['] (/) defer! (/-test)  ;                                                                                                                                                                                                                                                                                                                                                                                                                     ( exception-test )                                              : could-fail  ( -- c )                                            key dup 'q' =                                                   if  -1 throw  then  ;                                         : do-it  ( a b -- c )                                             2drop could-fail  ;                                           : try-it  ( -- )                                                  1 2 ['] do-it catch                                             if    ( x1 x2 )  2drop ." There was an exception" cr            else  ." The character was " emit cr then  ;                  : retry-it  ( -- )                                                begin   1 2 ['] do-it catch                                     while   ( x1 x2 ) 2drop ." Exception, keep trying" cr           repeat  ( c )                                                   ." The character was " emit cr  ;                                                                                             ( err>ord )                                                     : err>ord  ( -- )                                                 91 1 do  i . i error>ordinal ."  -> " . cr  loop                286 256 do  i . i error>ordinal ."  -> " . cr  loop             1025 1000 do  i . i error>ordinal ."  -> " . cr  looptype-fields-test )                                            need type-left  need type-center  need type-right               s" La Mancha" 2constant text                                    : ruler  ( -- )  home '-' 32 emits home  ;                      : ready  ( -- )                                                   0 1 at-xy ." Press any key to continue"                         key drop rulertype-fields-test )                                            : test  ( -- )  page                                              ready text text nip type-left                                   ready text 32 type-left                                         ready text 5 type-left                                          ready text text nip type-center                                 ready text 32 type-center                                       ready text 5 type-center                                        ready text text nip type-right                                  ready text 32 type-right                                        ready text 5 type-right  ;                                    : tc  ( ca len1 len2 -- )                                         2dup <=> cells type-center-cases + @ >name .name  ;           : tr  ( ca len1 len2 -- )                                         2dup <=> cells type-right-cases + @ >name .name  ;                                                                            ( ?ccase-test ccase0-test )                                     need ?ccase  need ccase0                                        : .a     ( -- )  ." Letter A"  ;                                : .b     ( -- )  ." Letter B"  ;                                : .c     ( -- )  ." Letter C"  ;                                : .nope  ( -- )  ." Nope!"  ;                                   : .end   ( -- )  ."  The End" cr  ;                             : ?letter  ( c -- )                                               cr ." ?letter... " key drop                                     s" abc" ?ccase  .a .b .c  end?ccase  .end  ;                  'a' ?letter  'b' ?letter  'c' ?letter  'x' ?letter              : letter0  ( c -- )                                               cr ." letter0... " key drop                                     s" abc" ccase0 .nope  .a .b .c  endccase0  .end  ;            'a' letter0  'b' letter0  'c' letter0  'x' letter0                                                                              ( ccase-test )                                                  need ccase                                                      : .a     ( -- )  ." Letter A"  ;                                : .b     ( -- )  ." Letter B"  ;                                : .c     ( -- )  ." Letter C"  ;                                : .nope  ( -- )  ." Nope!"  ;                                   : .end   ( -- )  ."  The End" cr  ;                             : letter  ( c -- )                                                cr ." letter... " key drop                                      s" abc" ccase  .a .b .c  .nope  endccase  .end  ;             'a' letter  'b' letter  'c' letter  'x' letter                                                                                                                                                                                                                                                                                                                                                  ( begincase-test )                                              need begincase                                                  : test                                                            begincase                                                         cr ." press a key ('2' '4' '9' exits) : " key                   '2' of  ." ... 2 "  endof                                       '4' of  ." ... 4 "  endof                                       '9' of  ." ... 9 "  endof                                         dup emit ."  try again"                                     repeatcase  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( jk-test )                                                     need j  need k                                                  : jk-test  ( -- )                                                 3 0 do                                                            13 10 do                                                          23 20 do                                                          k . j . i . cr                                                loop                                                          loop                                                          loop  ;                                                       cr jk-test                                                                                                                                                                                                                                                                                                                                                                                      ( color-test )                                                  need color  need permcolor                                      : c?  ( ca -- ) c@ .  ;                                         : .color  ( -- )                                                  cr ." os-attr-t " os-attr-t c?                                  cr ." os-mask-t " os-mask-t c?                                  cr ." os-attr-p " os-attr-p c?                                  cr ." os-mask-p " os-mask-p csearch-test )                                                 256 constant /long-string                                       create long-string /long-string allot                           : -long-string  ( -- )  long-string /long-string blank  ;       s"  zx " 2constant substring                                    : place-substring  ( n -- )                                       -long-string substring rot long-string + 1- swap cmove  ;     : search-at  ( n -- )                                             dup place-substring long-string swap substring search           .s drop 2drop  ;                                              : run  ( -- )                                                     cr ." Search at 128:" 128 search-at                             cr ." Search at 64:" 64 search-at                               cr ." Search at 32:" 32 search-at  ;                                                                                                                                                          ( foo3 foo4 )                                                   cr .( foo3)                                                     cr .( fooneed-test foo1 foo2 )                                         need foo3 need [if]                                             [needed] foo1 [if] need foo4                                    cr .( foo1) exit [then]                                         cr .( footest )                                                     need ?(                                                         0 dup ?(  create zx1a  create zx1b ?)                           1 ?(                                                            \ nope                                                          nope                                                            ?) ?(  : zx1c                                                    ." zx1c"                                                        ; : zx1da>e-test )                                                    need u>ud                                                       : high-far  ( a1 -- a2 )                                          u>ud $4000 um/mod  far-banks + c@ bank  $C000 +  ;            : far-test  ( -- )                                                hex $FFFF 1+ $0000 do                                             home i 4 .r  i far i high-far <>                                if  cr ." Mismatch in address " u. abort  then                loop  decimal  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( lineload-test )                                                 .( line 1 ) cr                                                  .( line 2 ) cr                                                  .( line 3 ) cr                                                  .( line 4 ) cr                                                  .( line 5 ) cr                                                  .( line 6 ) cr                                                  .( line 7 ) cr                                                  .( line 8 ) cr                                                  .( line 9 ) cr                                                  .( line 10 ) cr                                                 .( line 11 ) cr                                                 .( line 12 ) cr                                                 .( line 13 ) cr                                                 .( line 14 ) cr                                                 .( line 15 ) cr                                               ( load-section-test )                                             .( section line 1 ) cr  need [if]                               .( section line 2 ) cr                                          .( section line 3 ) cr                                          .( section line 4 ) cr                                          .( section line 5 ) cr                                          .( section line 6 ) cr                                          .( section line 7 ) cr                                          .( section line 8 ) cr                                          .( section line 9 ) cr                                          .( section line 10 ) cr                                         .( section line 11 ) cr                                         .( section line 12 ) cr                                         .( section line 13 ) cr                                         0 [if]  .( section line 14 NOT! ) cr                            .( section line 15 NOT! ) cr                                  .( section line 16 NOT! ) cr                                      .( section line 17 NOT! ) cr [else]                             .( section line 18 ) cr                                         .( section line 19 ) cr                                         .( section line 20 ) cr [then]                                  .( section line 21 ) cr                                         .( section line 22 ) cr                                         .( section line 23 ) cr                                         .( section line 24 ) cr                                         .( section line 25 ) cr                                         .( section line 26 ) cr                                       end-section                                                       .( End of section) cr                                                                                                                                                                                                                                         .( block x line 0)                                                .( block x line 1 ) cr                                          .( block x line 2 ) cr                                          .( block x line 3 ) cr                                          .( block x line 4 ) cr                                          .( block x line 5 ) cr                                          .( block x line 6 ) cr                                          .( block x line 7 ) cr                                          .( block x line 8 ) cr                                          .( block x line 9 ) cr                                          .( block x line 10 ) cr                                         .( block x line 11 ) cr                                         .( block x line 12 ) cr                                         .( block x line 13 ) cr                                         .( block x line 14 ) cr                                         .( block x line 15 ) cr                                       .( block x+1 line 0)                                              .( block x+1 line 1 ) cr                                        .( block x+1 line 2 ) cr                                        .( block x+1 line 3 ) cr                                        .( block x+1 line 4 ) cr                                        .( block x+1 line 5 ) cr                                        .( block x+1 line 6 ) cr                                        .( block x+1 line 7 ) cr                                        .( block x+1 line 8 ) cr                                        .( block x+1 line 9 ) cr                                        .( block x+1 line 10 ) cr                                       .( block x+1 line 11 ) cr                                       .( block x+1 line 12 ) cr                                       .( block x+1 line 13 ) cr                                       .( block x+1 line 14 ) cr                                       .( block x+1 line 15 ) cr                                     ( XXX TMP -- block for temporary tries)                         need thru                                                       blk @ 1+ blk @ 2+ thru                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( XXX TMP -- block for temporary tries)                         : hellohayes-tester )                                                need where                                                      variable verbose  verbose off                                   : testing(  ( "ccc<paren>" -- )                                   verbose @ if    cr ." Testing " postpone .(  exit  then                   postpone (  ;                                       : empty-stack  ( i*x -- )                                         depth ?dup if  dup 0< if    negate 0 do  0  loop                                      else  0 do  drop  loop  then  then  ;   : test-error  ( -- )                                              cr ." Use WHERE to see the error line." empty-stack  abort  ; variable actual-depth  \ stack record                           create actual-results $20 cells allot                           : {  ( -- )  ;  \ syntactic sugar.                              -->                                                                                                                             ( hayes-tester )                                                : ->  ( i*x -- )                                                  depth dup actual-depth !  \ record depth                        ?dup if  0 do actual-results i cells + ! loop  then  ;        : }  ( ... -- )                                                   depth actual-depth @ = if  \ depths match                         depth ?dup if  \ there is something on the stack                  0 do  \ for each stack item                                       actual-results i cells + @                                      <> if  cr ." Incorrect result" test-error leave  then         loop                                                          then                                                          else  cr ." Wrong number of results:"                                 cr ." Expected=" depth . cr ." Actual=" actual-depth ?          test-error                                                then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       