( Solo Forth library )                                          \ http://programandala.net/en.program.solo_forth.htmlloaddelimited located needed-word )                               : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;       variable default-first-locatable  variable first-locatable      variable last-locatable  blk/disk 1- last-locatable !           : delimited  ( ca1 len1 -- ca2 len2 )                             dup 2+ dup allocate-string swap  ( ca1 len1 ca2 len2 )          2dup blank  2dup 2>r drop char+ smove 2r>  ;                  defer unlocated  ( block -- )                                   : (located)  ( ca len -- block | false )                          ?dup 0= if  drop false exit  then                               delimited last-locatable @ 1+  first-locatable @                default-first-locatable @  first-locatable !                    do  0 i line>string 2over contains                                  if  2drop i unloop exit  then  break-key? #-28 ?throw           i unlocated  loop  2drop 0  ;                             defer located  ( ca len -- block | false )  -->                 ( ?located reneeded reneed needed-word [needed] [unneeded] )    2variable needed-word  0. needed-word 2!                        : ?located  ( n -- )                                              dup ?exit  needed-word 2@ parsed-name 2! #-268 throw  ;       defer reneeded  ( ca len -- )                                   : locate-reneeded  ( ca len -- )  located ?located load  ;      defer reneed  ( "name" -- )  defer needed  ( ca len -- )        : locate-reneed  ( "name" -- )                                    parse-name save-string locate-reneeded  ;                     : [needed]  ( "name" -- f )                                       parse-name needed-word 2@ 2dup or                               if  compare 0= exit  then  2drop 2drop true  ; immediate      : [unneeded]  ( "name" -- f )                                     postpone [needed] 0=  ; immediate                             : new-needed-word  ( ca len -- ca' len' )                         -trailing -leading save-string 2dup needed-word 2!  ;  -->    ( locate-needed need use-no-index )                             : locate-needed  ( ca len -- )                                    needed-word 2@ 2>r new-needed-word  2dup undefined?             if  locate-reneeded  else  2drop  then  2r> needed-word 2!  ; defer need  ( "name" -- )                                       : locate-need  ( "name" -- )  parse-name locate-needed  ;       : use-default-need  ( -- )                                        ['] locate-reneeded ['] reneeded  defer!                        ['] locate-reneed   ['] reneed    defer!                        ['] locate-need     ['] need      defer!                        ['] locate-needed   ['] needed    defer!  ;                   : use-default-located  ( -- )  ['] (located) ['] located defer!                                ['] drop ['] unlocated defer!  ; : use-no-index  ( -- )                                            use-default-need use-default-located  ;  use-no-index         blk @ 1+ dup default-first-locatable !  first-locatable !       ( locate need-from need-here )                                  need ?(                                                         [unneeded] locate ?(                                            : locate  ( "name" -- block | false )                             parse-name save-string located  ;  exit ?)                    [unneeded] need-from ?(  need locate                            : need-from  ( "name" -- )                                        locate ?located first-locatable !  ;  exit ?)                 [unneeded] need-here ?(                                         : need-here  ( "name" -- )                                        parse-name needed-word 2@ 2>r                                   new-needed-word  2dup needed-word 2! undefined?                 if  blk @ load  else  2drop  then  2r> needed-word 2!  ; ?)                                                                                                                                                                                                   ( l: l# )                                                       get-order get-current                                           root-wordlist assembler-wordlist forth-wordlist 3 set-order     forth-wordlist set-current                                      #16 constant max-l#                                             2 cells  max-l# 2* cells +  constant /fwds                      create fwds  ( -- a )  /fwds allot                              : init-fwds  ( -- )                                               fwds /fwds erase                                                [ fwds 2 cells + ] literal fwds !  ;  init-fwds               max-l# cells constant /bwds                                     create bwds  ( -- a )  /bwds allot                              : init-bwds  ( -- )  bwds /bwds erase  ;  init-bwds             : init-l  ( -- ) init-fwds init-bwds  ;                         ' init-l ' init-asm defer!  -->                                                                                                 ( l: l# )                                                       : lpush  ( a n -- )                                               fwds 2@ = #-285 ?throw  \ full?                                 fwds @ 2!  [ 2 cells ] literal fwds +!  ;                     : lpop  ( n -- a true | n false )                                 >r fwds @ fwds cell+ cell+                                      begin  2dup = 0= ( end start )  while                             dup @  r@ = if  \ found                                           dup cell+ @ ( a ) >r                                            swap cell- cell-  dup fwds ! 2@ rot 2!                          r> r> ( a key )  -1 or  ( a true )  exit                      then  cell+ cell+                                             repeat  2drop r> 0  ;                                         : ?l#  ( n -- )  [ max-l# 1- ] literal u> #-283 ?throw  ;       : l?  ( n -- a | 0 )  dup ?l#  cells bwds + @  ;                -->                                                             ( l: l# )                                                       assembler-wordlist set-current                                  : l:  ( n -- )                                                    dup l? #-284 ?throw  \ should be unknown                        here  over cells bwds + ! \ now known                           begin  dup lpop ( a true | n false )  while                       here over - 1-  swap over ?rel c!  \ resolve ref              repeat  2drop  ;                                              : l#  ( n -- a )                                                  dup l? ?dup 0= if  here 1+ 2dup swap lpush  then  nip  ;      set-current set-order                                                                                                                                                                                                                                                                                                                                                                           ( macro )                                                       need get-order                                                  get-order get-current                                           only forth definitions  also assembler                          : macro  ( "name" -- )  : asm  ;                                : endm  ( -- )  end-asm postpone ;  ;  immediate                set-current  set-orderneed @c+  need for                                              : <<  ( -- a depth )  here depth  ;                             : >>  ( a depth -- )                                              depth 1- - #-258 ?throw cr base @ >r hex                        dup 4 u.r space  here over - for  c@+ 3 u.r  step drop          r> base !  spacez80-asm, )                                                    get-current forth-wordlist set-current                          need ?pairs  need 3dup  need 8*                                 : z80-asm,  ( -- )  assembler  ;                                also assembler definitions base @ hex                           0 constant b   1 constant c   2 constant d   3 constant e       4 constant h   5 constant l   6 constant m   7 constant a       0 constant bc  2 constant de  4 constant hl                     6 constant sp  6 constant af                                    DD constant ix-op  FD constant iy-op                            : ix  ( -- rphl )  ix-op c, hl  ;                               : iy  ( -- rphl )  iy-op c, hl  ;                               : ?rel  ( n -- )  80 + FF swap u< #-269 ?throw  ;               -->                                                                                                                                                                                             ( z80-asm, )                                                    : m1  ( 8b "name" -- )                                            create c, does>  ( -- )  ( pfa ) c@ c,  ;                     : m2  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ + c,  ;               : m3  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ swap 8* + c,  ;       : m4  ( 8b "name" -- )                                            create c, does>  ( 8b -- )  ( 8b pfa ) c@ c, c,  ;            : m5  ( 8b "name" -- )                                            create c, does>  ( 16b -- )  ( 16b pfa ) c@ c, ,  ;           : m6  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) CB c, c@ + c,  ;         : m7  ( 8b "name" -- )                                            create c, does>  ( r bit -- )                                     ( r bit pfa ) CB c, c@ swap 8* + + c,  ;  -->               ( z80-asm, )                                                    : m8  ( 16b "name" -- )  create , does>  ( -- )  ( pfa ) @ ,  ; : (jr,)  ( a op -- )  c, here 1+ - dup ?rel c,  ;               : m9  ( 8b "name" -- )                                            create c, does>  ( a -- ) ( a pfa )  c@ (jr,)  ;              : ma  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) c@ c, drop c,  ;                          : mb  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) CB c, c@ c, drop c,  ;                    : mc  ( 8b "name" -- )                                            create c, does>  ( disp rphl bit -- )                             ( disp rphl bit pfa )                                           CB c, c@ rot drop rot c, swap 8* + c,  ;  -->                                                                               ( z80-asm, )                                                    00 m1 nop, 02 m3 stap, 03 m3 incp, 04 m3 inc, 05 m3 dec, 07 m1  rlca, 08 m1 exaf, 09 m3 addp, 0A m3 ftap, 0B m3 decp, 0F m1     rrca, 10 m9 djnz, 17 m1 rla, 18 m9 jr,  1F m1 rra, 22 m5 sthl,  27 m1 daa, 2A m5 fthl, 2F m1 cpl, 32 m5 sta, 37 m1 scf, 3A m5   fta, 3F m1 ccf, 76 m1 halt, 80 m2 add, 88 m2 adc, 90 m2 sub, 98 m2 sbc, B8 m2 cp, C1 m3 pop, C5 m3 push, C6 m4 add#, C7 m2 rst, C9 m1 ret, CE m4 adc#, D3 m4 out, 41 m3 outbc, D6 m4 sub#, D9   m1 exx, DB m4 in, 40 m3 inbc, 0DE m4 sbc#, E3 m1 exsp, E6 m4    and#, E9 m1 jphl, EB m1 exde, EE m4 xor#, F3 m1 di,  F6 m4 or#, F9 m1 ldsp, FB m1 ei, FE m4 cp#, 00 m6 rlc, 08 m6 rrc, 10 m6    rl, 18 m6 rr, 20 m6 sla, 28 m6 sra, 38 m6 srl,  40 m7 bit, 80   m7 res, C0 m7 set, B0ED m8 ldir, B8ED m8 lddr, 44ED m8 neg,     57ED m8 ldai, 47ED m8 ldia, 56ED m8 im1, 5EED m8 im2, B1ED m8   cpir, 6FED m8 rld, A0 m2 and, B0 m2 or,  A8 m2 xor, -->                                                                         ( z80-asm, )                                                    : jpix,  ( -- )  ix-op c, jphl,  ;                              : ldp#,  ( 16b rp -- )  8* 1+ c, ,  ;                           : ld#,  ( 8b r -- )  8* 06 + c, c,  ;                           : ld,  ( r1 r2 -- )  8* 40 + + c,  ;                            : sbcp,  ( rp -- )  ED c, 8* 42 + c,  ;                         : adcp,  ( rp1 rp2 -- )  ED c, 8* 4A + c,  ;                    : stp,  ( a rp -- )  ED c, 8* 43 + c, ,  ;                      : ftp,  ( a rp -- )  ED c, 8* 4B + c, ,  ;                      : addix,  ( rp -- )  ix-op c, addp,  ;                          : addiy,  ( rp -- )  iy-op c, addp,  ;                          : clr,  ( rp -- )  0 swap ld#,  ;                               : clrp,  ( rp -- )  0 swap ldp#,  ;                             : ldp,  ( rp1 rp2 -- )  2dup ld, 1+ swap 1+ swap ld,  ;         : subp,  ( rp -- )  a and, sbcp,  ;                             : tstp,  ( rp -- )  dup a ld, 1+ or,  ;  -->                    ( z80-asm, )                                                    CF m4 hook,  \ rst $08                                          D7 m1 prt,   \ rst $16                                          86 ma addx, 8E ma adcx, 96 ma subx, 9E ma sbcx, A6 ma andx,     AE ma xorx, B6 ma orx,  BE ma cpx,  34 ma incx, 35 ma decx,     06 mb rlcx, 0E mb rrcx, 16 mb rlx,  1E mb rrx,  26 mb slax,     2E mb srax, 3E mb srlx, 46 mc bitx, 86 mc resx, C6 mc setx,     : ftx,   ( disp rpi r -- )   nip 8* 46 + c, c,  ;               : stx,   ( r disp rphl -- )  drop swap 70 + c, c,  ;            : st#x,  ( 8b disp rpi -- )  drop 36 c, swap c, c,  ;           : ftpx,  ( disp rpi rp -- )  3dup 1+ ftx, rot 1+ -rot ftx,  ;   : stpx,  ( disp rpi rp -- )  3dup 1+ stx, rot 1+ -rot stx,  ;   -->                                                                                                                                                                                                                                                             ( z80-asm, )                                                    C2 constant nz? CA constant z?  D2 constant nc? DA constant c?  E2 constant po? EA constant pe? F2 constant p?  FA constant m?  : jp>jr  ( op1 -- op2 )  [ also forth ]                           dup C3 =  if  drop 18 exit  then                                dup c? > #-273 ?throw  A2 -  ; previous                       : ?ret,  ( op -- )  2- c,  ;                                    : ?jp,  ( a op -- )  c, ,  ;                                    : ?call,  ( a op -- )  2+ ?jp,  ;                               : ?jr,  ( a op -- )  jp>jr (jr,)  ;                             : >rmark  ( -- orig )  here 1-  ;                               : rresolve  ( orig dest -- )  1- over - dup ?rel swap c!  ;     : >rresolve  ( orig -- )  here rresolve  ;                      : <rresolve  ( dest -- )  here 1- swap rresolve  ;              -->                                                                                                                             ( z80-asm, )                                                    : inverse-cond  ( op1 -- op2 )                                    8 [ also forth ] xor [ previous ]  ;                          : rahead  ( -- orig  )  18 , >rmark  ;                          : rif  ( op -- orig cs-id )  jp>jr inverse-cond , >rmark 0A  ;  : rthen  ( orig cs-id -- )  0A ?pairs >rresolve  ;              : relse  ( orig cs-id -- cs-id )                                  0A ?pairs C3 rif rot swap rthen 0A  ;                         : rbegin  (  -- dest cs-id )  <mark 0B  ;                       : rwhile  (  op -- orig cs-id )  rif 2+  ;                      : (runtil)  (  dest cs-id op -- )  , 0B ?pairs <rresolve  ;     : runtil  (  dest cs-id op -- )  jp>jr (runtil)  ;              : ragain  (  dest cs-id -- )  18 runtil  ;                      : rrepeat  (  dest cs-id1 orig cs-id2 -- )                        2swap ragain 2- rthen  ;                                      : rstep    ( dest cs-id -- )  10 (runtil)  ;  -->               ( z80-asm, )                                                    : aif  (  op -- orig cs-id )  inverse-cond c, >mark 08  ;       : athen  (  orig cs-id -- )  08 ?pairs >resolve  ;              : aelse  (  cs-id -- cs-id )                                      08 ?pairs C3 aif rot swap athen 08  ;                         : abegin  (  -- dest cs-id )  <mark 09  ;                       : awhile  (  op -- orig cs-id )  aif 2+  ;                      : auntil  (  dest cs-id op -- )  c, 09 ?pairs <resolve  ;       : aagain  (  cs-id -- )  C3 auntil  ;                           : arepeat  (  dest cs-id1 orig cs-id2 )                           2swap aagain 2- athen  ;                                      : >amark  ( -- a )  here 2-  ;                                  : >aresolve  ( a -- )  >amark swap !  ;                         6 cells allocate-string                                         : unresolved  ( n -- a )  cells [ dup ] literal +  ;  drop      base ! set-current previous                                     ( execute-hl, call-xt, )                                        need z80-asm,  need macro                                       macro execute-hl,  ( -- )                                         0000 bc stp,  >amark      \ save the Forth IP                   0000 bc ldp#, >amark      \ point IP to phony_compiled_word     jphl,                     \ execute the xt in HL                >resolve                  \ phony_compiled_word                 here cell+ ,              \ point to the phony xt following     0000 bc ldp#  >aresolve   \ restore the Forth IP                endm                                                          macro call-xt,  ( xt -- )                                         hl ldp#,  execute-hl,                                           endm                                                                                                                                                                                                                                                          ( z80-asm )                                                     get-current forth-wordlist set-current                          need ?pairs  need 3dup  need 8*                                 : z80-asm  ( -- )  assembler  ;                                 also assembler definitions base @ hex                           0 constant b   1 constant c   2 constant d   3 constant e       4 constant h   5 constant l   6 constant m   7 constant a       0 constant bc  2 constant de  4 constant hl                     6 constant sp  6 constant af                                    DD constant ix-op  FD constant iy-op                            : ix  ( -- rphl )  ix-op c, hl  ;                               : iy  ( -- rphl )  iy-op c, hl  ;                               : ?rel  ( n -- )  80 + FF swap u< #-269 ?throw  ;               -->                                                                                                                                                                                             ( z80-asm )                                                     : m1  ( 8b "name" -- )                                            create c, does>  ( -- )  ( pfa ) c@ c,  ;                     : m2  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ + c,  ;               : m3  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ swap 8* + c,  ;       : m4  ( 8b "name" -- )                                            create c, does>  ( 8b -- )  ( 8b pfa ) c@ c, c,  ;            : m5  ( 8b "name" -- )                                            create c, does>  ( 16b -- )  ( 16b pfa ) c@ c, ,  ;           : m6  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) CB c, c@ + c,  ;         : m7  ( 8b "name" -- )                                            create c, does>  ( r bit -- )                                     ( r bit pfa ) CB c, c@ swap 8* + + c,  ;  -->               ( z80-asm )                                                     : m8  ( 16b "name" -- )  create , does>  ( -- )  ( pfa ) @ ,  ; : m9  ( 8b "name" -- )                                            create c, does>  ( a -- )                                         ( a pfa )  c@ c, here 1+ - dup ?rel c,  ;                   : ma  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) c@ c, drop c,  ;                          : mb  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) CB c, c@ c, drop c,  ;                    : mc  ( 8b "name" -- )                                            create c, does>  ( disp rphl bit -- )                             ( disp rphl bit pfa )                                           CB c, c@ rot drop rot c, swap 8* + c,  ;  -->                                                                               ( z80-asm )                                                     00 m1 nop 02 m3 stap 03 m3 incp 04 m3 inc 05 m3 dec 07 m1 rlca  08 m1 exaf 09 m3 addp 0A m3 ftap 0B m3 decp 0F m1 rrca 10 m9    djnz 17 m1 rla 18 m9 jr  1F m1 rra 20 m9 jrnz 22 m5 sthl 27 m1  daa 28 m9 jrz 2A m5 fthl 2F m1 cpl 30 m9 jrnc 32 m5 sta 37 m1   scf 38 m9 jrc 3A m5 fta 3F m1 ccf 76 m1 halt 80 m2 add 88 m2    adc 90 m2 sub 98 m2 sbc B8 m2 cp C1 m3 pop C2 m5 jpnz C3 m5 jp  C5 m3 push C6 m4 add# C7 m2 rst C9 m1 ret CA m5 jpz CD m5 call  CE m4 adc# D2 m5 jpnc D3 m4 out 41 m3 outbc D6 m4 sub# D9 m1    exx DA m5 jpc DB m4 in 40 m3 inbc 0DE m4 sbc# E2 m5 jppo E3 m1  exsp E6 m4 and# E9 m1 jphl EA m5 jppe EB m1 exde EE m4 xor# F2  m5 jpp F3 m1 di  F6 m4 or# F9 m1 ldsp FA m5 jpm FB m1 ei FE m4  cp# 00 m6 rlc 08 m6 rrc 10 m6 rl 18 m6 rr 20 m6 sla  28 m6 sra  38 m6 srl  40 m7 bit 80 m7 res C0 m7 set B0ED m8 ldir B8ED m8   lddr 44ED m8 neg 57ED m8 ldai 47ED m8 ldia 56ED m8 im1 5EED m8  im2 B1ED m8 cpir 6FED m8 rld -->                                ( z80-asm )                                                     : 0outbc  ( -- )  ED c, 71 c,  ;                                : jpix  ( -- )  ix-op c, jphl  ;                                : ldp#  ( 16b rp -- )  8* 1+ c, ,  ;                            : ld#  ( 8b r -- )  8* 06 + c, c,  ;                            : ld  ( r1 r2 -- )  8* 40 + + c,  ;                             : sbcp  ( rp -- )  ED c, 8* 42 + c,  ;                          : adcp  ( rp1 rp2 -- )  ED c, 8* 4A + c,  ;                     : stp  ( a rp -- )  ED c, 8* 43 + c, ,  ;                       : ftp  ( a rp -- )  ED c, 8* 4B + c, ,  ;                       : addix  ( rp -- )  ix-op c, addp  ;                            : addiy  ( rp -- )  iy-op c, addp  ;                            : clr  ( rp -- )  0 swap ldp#  ;                                : ldp  ( rp1 rp2 -- )  2dup ld 1+ swap 1+ swap ld  ;            CF m4 hook       \ rst 0x08                                     D7 m1 prt  -->   \ rst 0x16                                     ( z80-asm )                                                     86 ma addx 8E ma adcx 96 ma subx 9E ma sbcx A6 ma andx          AE ma xorx B6 ma orx  BE ma cpx  34 ma incx 35 ma decx          06 mb rlcx 0E mb rrcx 16 mb rlx  1E mb rrx  26 mb slax          2E mb srax 3E mb srlx 46 mc bitx 86 mc resx C6 mc setx          : ftx   ( disp rpi r -- )   nip 8* 46 + c, c,  ;                : stx   ( r disp rphl -- )  drop swap 70 + c, c,  ;             : st#x  ( 8b disp rpi -- )  drop 36 c, swap c, c,  ;            : ftpx  ( disp rpi rp -- )  3dup 1+ ftx rot 1+ -rot ftx  ;      : stpx  ( disp rpi rp -- )  3dup 1+ stx rot 1+ -rot stx  ;      -->                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm )                                                     20 constant z  28 constant nz  30 constant cy  38 constant nc   C2 constant z'  CA constant nz' D2 constant cy' DA constant nc' E2 constant pe' EA constant po' F2 constant m'  FA constant p'  : ?ret  ( op -- )  8 xor 2- c,  ;                               : retc  ( -- )  cy' ?ret ;    : retnc  ( -- )  nc' ?ret  ;      : retz  ( -- )  z' ?ret ;     : retnz  ( -- )  nz' ?ret  ;      : retm  ( -- )  m' ?ret ;     : retp  ( -- )  p' ?ret  ;        : retpe  ( -- )  pe' ?ret ;   : retpo  ( -- )  po' ?ret  ;      : ?call  ( a op -- )  8 xor 2+ c, ,  ;                          : callc  ( -- )  cy' ?call ;    : callnc  ( -- )  nc' ?call  ;  : callz  ( -- )  z' ?call ;     : callnz  ( -- )  nz' ?call  ;  : callm  ( -- )  m' ?call ;     : callp  ( -- )  p' ?call  ;    : callpe  ( -- )  pe' ?call ;   : callpo ( -- )  po' ?call  ;   -->                                                                                                                             ( z80-asm )                                                     : >relmark  ( -- orig )  here 1-  ;                             : relresolve  ( orig dest -- ) 1- over - dup ?rel swap c!  ;    : >relresolve  ( orig -- )  here relresolve  ;                  : <relresolve  ( dest -- )  here 1- swap relresolve  ;          : ahead  ( -- orig  )  18 , >relmark  ;                         : if  ( op -- orig cs-id )  , >relmark 0A  ;                    : then  ( orig cs-id -- )  0A ?pairs >relresolve  ;             : else  ( orig cs-id -- cs-id ) \ XXX TODO document               0A ?pairs 18 if rot swap then 0A  ;                           : begin  (  -- dest cs-id )  <mark 0B  ;                        : while  (  op -- orig cs-id )  if 2+  ;                        : until  (  dest cs-id op -- )  , 0B ?pairs <relresolve  ;      : again  (  dest cs-id -- )  18 until  ;                        : repeat  2swap again 2- then  ;                                : step    ( dest cs-id -- )  10 until  ;  -->                   ( z80-asm )                                                     : if'  (  op -- orig cs-id )  c, >mark 08  ;                    : then'  (  orig cs-id -- )  08 ?pairs >resolve  ;              : else'  (  cs-id -- cs-id )                                      08 ?pairs C3 if' rot swap then' 08  ;                         : begin'  (  -- dest cs-id )  <mark 09  ;                       : while'  (  op -- orig cs-id )  if' 2+  ;                      : until'  (  dest cs-id op -- )  c, 09 ?pairs <resolve  ;       : again'  (  cs-id -- )  C3 until'  ;                           : repeat'  (  dest cs-id1 orig cs-id2 )                           2swap again' 2- then'  ;                                      : |mark  ( -- a )  here 2-  ;                                   : |resolve  ( a -- )  |mark swap !  ;                           -->                                                                                                                                                                                             ( z80-asm )                                                     A0 m2 and  B0 m2 or  A8 m2 xor                                  : subp  ( rp -- )  a and sbcp  ;                                : tstp  ( rp -- )  dup a ld 1+ or  ;                            6 cells allocate-string                                         : unresolved  ( n -- a )  cells [ dup ] literal +  ;  drop      base ! set-current previousexecute-hl call-xt )                                          need z80-asm  need macro                                        macro execute-hl  ( -- )                                          0000 bc stp  |mark      \ save the Forth IP                     0000 bc ldp# |mark      \ point IP to phony_compiled_word       jphl                    \ execute the xt in HL                  >resolve                \ phony_compiled_word                   here cell+ ,            \ point to the phony xt following       0000 bc ldp#  |resolve  \ restore the Forth IP                  endm                                                          macro call-xt  ( xt -- )                                          hl ldp#  execute-hl                                             endm                                                                                                                                                                                                                                                          ( do-prime )                                                    forth definitions decimal                                       8190 constant size  variable flags  size allot                  : do-prime  ( -- )                                                flags size 1 fill                                               0 size 0                                                        do flags i + c@                                                    if i dup + 3 + dup i +                                               begin   dup size <                                              while   0 over flags + c! over +                                repeat  drop drop 1+                                       then                                                         loop  .  ." primes "  ;                                                                                                                                                                                                                                       ( byte-magazine-benchmark )                                     need bench{                                                     8190 constant size  variable bflags size allot                  : c<- ( a b -- ) swap c!  ;                                     : do-prime  ( -- )                                                bflags size 1 fill  0                                           size 0 do   bflags i + c@ if                                                  i 2* 3 + dup i + bflags +                                       begin   dup size bflags +  u<                                   while   dup 0 c<- over +                                        repeat  drop drop 1+                                          then                                                loop                                                            drop  \ XXX NEW                                                 ;  -->                                                                                                                        ( byte-magazine-benchmark )                                     : byte-magazine-benchmark  ( n -- )                               cr dup u. ." iterations..." cr                                  bench{ 0 ?do  do-prime  loop }bench.  ;                         cr                                                              .( To run the BYTE Magazine) cr                                 .( benchmark type:) cr                                          .(   n byte-magazine-benchmark) cr                              .( where _n_ is the number of) cr                               .( iterations. The original code) cr                            .( used 1000 iterations.) cr                                                                                                                                                                                                                                                                                                                                                                  ( bench{ }bench }bench. bench. benched )                        need reset-frames  need frames@                                 : bench{  ( -- )  reset-frames  ;                               : }bench  ( -- d )  frames@ ;                                   : bench.  ( d -- )                                                2dup d. ." frames (" 50 m/ nip . ." s) "  ;                   : }bench.  ( -- )  frames@ bench.  ;                            : benched  ( xt n -- d )                                          bench{ 0 do  dup execute  loop  }bench rot drop  ;            : benched.  ( xt n -- )                                           bench{ 0 do  dup execute  loop  }bench. drop  ;                                                                                                                                                                                                                                                                                                                                               ( all-benchmarks )                                              need byte-magazine-benchmark                                    need interface-age-benchmark                                    need vector-loop-benchmark                                      : all-benchmarks  ( n1 n2 -- )                                    byte-magazine-benchmark                                         interface-age-benchmark                                         vector-loop-benchmark  ;                                        .( To run all benchmarks type:) cr                              .(   n1 n2 all-benchmarks) cr                                                                                                                                                                                                                                                                                                                                                                                                                                 ( interface-age-benchmark )                                     need bench{  need 2/                                            : (interface-age-benchmark)  ( n -- )                             dup 2/ 1+ swap cr                                               1 ?do                                                             dup i 1 rot 2 do                                                  drop dup 0 i um/mod dup                                         0=  if  drop drop 1 leave  then                                 1 = if    drop 1                                                    else  dup 0= if  drop 0 leave  then                                   0< 0= if  1  then                                         then                                                      loop                                                            2drop  \ XXX NEW                                              loop  drop  ;  -->                                                                                                            ( interface-age-benchmark )                                     : interface-age-benchmark  ( n -- )                               bench{ (interface-age-benchmark) }bench.  ;                     cr                                                              .( To run the interface age) cr                                 .( benchmark type:) cr                                          .(   n interface-age-benchmark  ) cr                            .( where _n_ is the number of) cr                               .( iterations. The original code) cr                            .( used 5000 iterations.) cr                                                                                                                                                                                                                                                                                                                                                                                                                                  ( Interface Age Benchmark program )                             : bench  ( -- )                                                   dup 2 / 1+ swap ." Starting " cr                                1 do dup i 1 rot                                                  2 do drop dup i /mod                                              dup 0= if  drop drop 1 leave                                    else  1 = if drop 1                                                   else  dup 0 > if  drop 1                                              else  0= if  0 leave  then                                      then                                                      then                                                      then                                                          loop                                                            if  4 .r  else  drop  then                                    loop  drop cr ." Finished " ;                                                                                                 ( vector-loop-benchmark )                                       need bench{                                                     1000 constant vsize  \ vector size                              : vector  ( n -- )                                                create  cells allot                                             does>  ( index -- address )  ( index pfa ) swap cells +  ;    vsize vector vec1  vsize vector vec2  vsize vector vec3         : vecload  ( -- )  \ put some stuff into the vectors              0 begin                                                            dup vec1 dup !               \ vec1 gets its own address        dup vec2 dup negate swap !   \ vec2 gets negated address        1+ dup vsize =                                               until  drop  ;                                                : loop0  ( -- )  \ null loop                                      0 begin  1+ dup vsize =  until  drop  ;  -->                                                                                  ( vector-loop-benchmark )                                       : loop1  ( -- )  \ vector add                                     0 begin                                                            dup vec1 @ over vec2 @ + over vec3 !                            1+ dup vsize =                                               until  drop  ;                                                : loop2 ( -- )  \ vector multiply                                 0 begin                                                            dup vec1 @ over vec2 @ * over vec3 !                            1+ dup vsize =                                               until  drop  ;                                                : loop3 ( -- ) \ vector divide                                    0 begin                                                           dup vec1 @ over vec2 @ / over vec3 !                            1+ dup vsize =                                                until  drop  ;  -->                                           ( vector-loop-benchmark )                                       : loop4 ( -- )  \ vector scale                                    0 begin                                                            dup vec1 @ 10000 10000 */ over vec2 !  1+ dup vsize =        until  drop  ;                                                1000 constant reps  \ repetitions                               : bench0  ( -- )  \ benchmark loop0                               bench{ 0 begin  loop0 1+ dup reps =  until  drop }bench.        ." Vector No-Op" cr  ;                                        : bench1 ( -- ) \ benchmark loop1                                 bench{ 0 begin  loop1 1+ dup reps =  until  drop }bench.        ." Vector +    " cr  ;                                        : bench2 ( -- ) \ benchmark loop2                                 bench{ 0 begin  loop2 1+ dup reps =  until  drop }bench.        ." Vector *    " cr  ;                                        -->                                                             ( vector-loop-benchmark )                                       : bench3 ( -- )  \ benchmark loop3                                bench{ 0 begin  loop3 1+ dup reps =  until  drop }bench.        ." Vector /    " cr  ;                                        : bench4 ( -- ) \ benchmark loop4                                 bench{ 0 begin  loop4 1+ dup reps =  until  drop }bench.        ." Vector */   " cr  ;                                        : vector-loop-benchmarks  ( -- )                                  vecload  cr bench0 bench1 bench2 bench3 bench4  ;               cr                                                              .( To run the vector loop) cr                                   .( benchmarks type:) cr                                         .(   vector-loop-benchmarks ) cr                                                                                                                                                                                                                              ( ?--> update flush thru )                                      [unneeded] ?-->                                                 ?\ : ?-->  ( f -- )  if  postpone -->  then  ; immediate        [unneeded] update                                               ?\ : update  ( -- )  disk-buffer @ $8000 or disk-buffer !  ;    [unneeded] flush                                                ?\ : flush  ( -- )  save-buffers empty-buffers  ;               [unneeded] thru                                                 ?\ : thru  ( block1 block2 -- )  1+ swap ?do  i load  loop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( continued ?load reload loads +load +thru loader )             [unneeded] continued                                            ?\ : continued  ( u -- )  ?loading (load)  ;                    [unneeded] ?load                                                ?\ : ?load  ( block f -- )  if  dup load  then  drop  ;         [unneeded] reload                                               ?\ : reload  ( -- )  empty-buffers  lastblk @ load  ;           [unneeded] loads                                                ?\ : loads  ( block n -- )  bounds ?do  i load  loop  ;         [unneeded] +load  [unneeded] +thru  and                         ?\ : +load  ( n -- )  blk @ + load  ;                           [unneeded] +thru                                                ?\ : +thru  ( n1 n2 -- )  1+ swap do  i +load  loop  ;          [unneeded] loader ?exit                                         : loader  ( block "name" -- )                                     create ,  does>  ( pfa )  @ load  ;                           ( lineblock>source lineload load-app )                          [unneeded] lineblock>source [unneeded] lineload and             ?\ : lineblock>source  ( n1 n2 -- )  blk !  c/l * >in !  ;      need ?( [unneeded] lineload ?(                                  : lineload  ( n1 n2 -- )                                          dup 0= #-259 ?throw                                             nest-source lineblock>source interpret unnest-source  ; ?)    [unneeded] load-app ?( need locate  variable loading-app        : end-app  ( -- )  loading-app off  ;  end-app                  : load-app  ( "name" -- )                                         loading-app on  locate blk !                                    begin   loading-app @  blk @ blk/disk <  and  while                     blk @ (load) 1 blk +!                                   repeat  end-app  ; ?)                                                                                                                                                                         ( common-indexer )                                              get-current forth-wordlist dup >order set-current               need str=  need alias  need nextname  need evaluate             need search-wordlist                                            wordlist constant index-wordlist                                : indexed-name?  ( ca len -- false | block true )                 index-wordlist search-wordlist 0<>  ;                         variable indexed-block                                          : index-name  ( ca len -- )                                       2dup indexed-name? if  drop 2drop exit  then                    nextname indexed-block @ alias  ;                             : (index-block)  ( block -- )                                     dup indexed-block ! 0 swap line>string evaluate  ;  -->                                                                                                                                                                                                       ( common-indexer )                                              wordlist constant indexer-wordlist                              : set-index-order  ( -- )                                         index-wordlist set-current  indexer-wordlist 1 set-order  ;   indexer-wordlist set-current                                    : (  ( "ccc<space><paren><space|eof>" -- )                        begin  parse-name 2dup s" )" str= 0=                            while  index-name  repeat  2drop  ;                           indexer-wordlist >order  ' ( alias .(  previous                 : \  ( "ccc<space><backslash><space|eof>" -- )                    begin  parse-name 2dup s" \" str= 0=                            while  index-name  repeat  2drop  ;                           previous set-current                                            : common-indexer  ( -- )  ;                                                                                                                                                                     ( index-words indexer-words )                                   need ?(  need common-indexer                                    [unneeded] index-words ?(                                       need wordlist-words  need .wordname                             : index-words  ( -- )  index-wordlist wordlist-words  ; ?)      [unneeded] indexer-words ?(                                     need wordlist-words  need .wordname                             : indexer-words  ( -- )  indexer-wordlist wordlist-wordsuse-fly-index )                                               only forth definitions  need common-indexer  need get-order                             need set-order       need bit-array                             need catch                              blk/disk bit-array indexed-blocks                               : indexed-block?  ( block -- f )  indexed-blocks @bit  ;        : block-indexed  ( block -- )  indexed-blocks !bituse-fly-index )                                               : index-block  ( block -- )                                       get-current get-order set-index-order                           ['] (index-block) catch  dup #-278 <> swap ?throw               set-order set-current block-indexed  ;                        : ?index-block  ( block -- ) ~~                                   dup indexed-block? if  drop exit  then  index-block  ;        : fly-located  ( ca len -- block | false ) ~~                     2dup indexed-name? if  ~~ nip nip load exit                     then  ~~ (located)  ;                                         : use-fly-index  ( -- )                                           use-default-need                                                ['] fly-located     ['] located   defer!                        ['] ?index-block    ['] unlocated defer!  ;                                                                                                                                                   ( make-thru-index use-thru-index )                              only forth definitions                                          need common-indexer  need get-order  need set-order             need evaluate  need catch                                       : thru-index-reneeded  ( ca len -- )                              indexed-name? 0= #-277 ?throw load  ;                         : thru-index-reneed  ( "name" -- )                                parse-name thru-index-reneeded  ;                             : thru-index-needed  ( ca len -- )                                needed-word 2@ 2>r  new-needed-word  2dup undefined?            if    thru-index-reneeded                                       else  2drop  then  2r> needed-word 2!  ;                      : thru-index-need  ( "name" -- )                                  parse-name thru-index-needed  ;  -->                                                                                                                                                          ( make-thru-index use-thru-index )                              : use-thru-index  ( -- )                                          ['] thru-index-reneeded ['] reneeded  defer!                    ['] thru-index-reneed   ['] reneed    defer!                    ['] thru-index-need     ['] need      defer!                    ['] thru-index-needed   ['] needed    defer!                    use-default-located  ;                                        : (make-thru-index)  ( -- )                                       last-locatable @ 1+ first-locatable @                           ?do  i (index-block)  loop  ;                                 : make-thru-index  ( -- )                                         get-current get-order set-index-order                           ['] (make-thru-index) catch  dup #-278 <> swap ?throw           set-order set-current  use-thru-index  ;                                                                                                                                                      ( ascii-char? control-char? )                                   [unneeded] ascii-char?                                          ?\ : ascii-char?    ( c -- f )  128 <  ;  exit                  [unneeded] control-char?                                        ?\ : control-char?  ( c -- f )  bl <  ;  exitprintable-ascii-char? >printable-ascii-char )                 [unneeded] printable-ascii-char?                                ?\ : printable-ascii-char?  ( c -- f )  bl 128 within  ;  exit  [unneeded] >printable-ascii-char ?exit                          need printable-ascii-char?                                      '.' cconstant default-printable-ascii-char                      : >printable-ascii-char  ( c1 -- c2 )                             dup printable-ascii-char? ?exit                                 drop default-printable-ascii-char  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( [false] [true] [if] [else] [then] )                           [unneeded] [true]  ?\   0 constant [false] immediate exit       [unneeded] [false] ?\  -1 constant [true]  immediate exit       need str=                                                       : [else] ( "ccc" -- )                                             1 begin  begin  parse-name dup while  2dup s" [if]" str=                        if    2drop 1+                                                  else  2dup s" [else]" str=                                            if    2drop 1- dup if  1+  then                                 else  s" [then]" str= if  1-  then                              then                                                      then  ?dup 0= if exit then                               repeat  2drop                                            refill 0= until  drop  ; immediate                          : [if]  ( f "ccc" -- )  0= if postpone [else] then  ; immediate : [then]  ( -- )  ; immediate                                   ( ?( )                                                          need str=                                                       : ?(  ( f "ccc<space><question><paren><space>" -- )               0= ?exit  begin  parse-name dup                                           while  s" ?)" str= ?exit  repeat  ; immediate       : ?)  ( -- )  ; immediatebody>name name>body link>name name>link name<name )           [unneeded] body>name                                            ?\ need body>  : body>name  ( pfa -- nt )  body> >name  ;       [unneeded] name>body                                            ?\ need >body  : name>body  ( nt -- pfa )  name> >body  ;       [unneeded] link>name                                            ?\ need alias  ' cell+ alias link>name  ( nt -- pfa )           [unneeded] name>link                                            ?\ need alias  ' cell- alias name>link  ( nt -- pfa )           [unneeded] name<name ?exit                                      need name>link                                                  [defined] far@ ?\ : name<name  ( nt1 -- nt2 )  name>link @s  ;  [defined] @s ?\ : name<name  ( nt1 -- nt2 )  name>link far@  ;                                                                                                                                                                                                  ( >>link name>> >>name >body body> '' [''] )                    [unneeded] >>link                                               ?\ need alias  ' cell+ alias >>link  ( xtp -- lfa ) exit        [unneeded] name>>                                               ?\ : name>>  ( nt -- xtp )  cell- cell-  ; exit                 [unneeded] >>name                                               ?\ : >>name  ( xtp -- nt )  cell+ cell+  ; exit                 [unneeded] >body                                                ?\ code >body  E1 c, 23 c, 23 c, 23 c, jppushhl,  end-code      [unneeded] body>                                                ?\ code body> E1 c, 2B c, 2B c, 2B c, jppushhl,  end-code exit  need ?(                                                         [unneeded] '' ?(  need need-here  need-here name>>              : ''  ( "name" -- xtp )  defined dup ?defined name>>  ; exit ?) [unneeded] [''] ?(  need need-here  need-here ''                : ['']  '' postpone literal  ; immediate compile-only exit ?)   ( name>interpret name>compile comp' [comp'] )                   need ?(                                                         [unneeded] name>interpret ?(                                    : name>interpret  ( nt -- xt | 0 )                                dup name> swap compile-only? 0= and  ;  ?)                    [unneeded] name>compile ?(                                      : (comp')  ( nt -- xt )                                           immediate?  if    ['] execute                                               else  ['] compile,  then  ;                       : name>compile  ( nt -- x xt )  dup name> swap (comp')  ;  ?)   [unneeded] comp' ?(  need need-here  need-here name>compile     : comp'  ( "name" -- x xt )                                       defined dup ?defined name>compile  ;  ?)                      [unneeded] [comp'] ?(  need need-here  need-here comp'          : [comp']  ( Compilation: "name" -- ) ( Run-time: -- x xt )       comp' postpone 2literal  ; immediate compile-only  ?)         ( there ?pairs [compile] smudge smudged )                       [unneeded] there                                                ?\ : there  ( a -- )  dp !  ;  exit                             [unneeded] ?pairs                                               ?\ : ?pairs  ( x1 x2 -- )  <> #-22 ?throw  ;  exit              [unneeded] [compile]                                            ?\ : [compile]  ( "name" -- )  ' compile,  ; immediate  exit    need ?(                                                         [unneeded] smudged ?(  need ctoggle                             : smudged  ( nt -- )                                              smudge-mask swap system-bank ctoggle default-bank  ; ?)       [unneeded] smudge ?(  need need-here  need-here smudged         : smudge  ( -- )  latest smudged  ;  ?)                                                                                                                                                                                                                         ( ]l ]2l save-here restore-here )                               need ?(                                                         [unneeded] ]l ?(                                                : ]l  ( x -- )  ] postpone literal  ; immediate compile-only ?) [unneeded] ]2l ?(                                               : ]2l  ( xd -- )  ] postpone 2literal  ; immediate compile-only ?)                                                              [unneeded] save-here [unneeded] restore-here and ?(  need there variable here-backup                                            : save-here  ( -- )  here here-backup !  ;                      : restore-here  ( -- )  here-backup @ there  ;  ?)                                                                                                                                                                                                                                                                                                                                              ( possibly exec eval )                                          need ?(                                                         [unneeded] possibly ?(                                          : possibly  ( "name" -- )                                         defined ?dup if  name> execute  then  ; ?)                    [unneeded] exec ?(                                              : exec  ( "name" -- i*x )                                         defined ?dup 0= #-13 ?throw  name> execute  ; ?)              [unneeded] eval ?(  need evaluate                               : eval  ( i*x "name" -- j*x )  parse-name evaluate  ; ?)        [unneeded] cliteral ?(                                          : cliteral  ( b -- )                                              compile clit c,  ; immediate compile-only ?)                                                                                                                                                                                                                  ( [const] [2const] [cconst] )                                   need ?(                                                         [unneeded] [const] ?(  need eval                                : [const]  ( "name" -- )                                          eval postpone literal  ; immediate compile-only  ?)           [unneeded] [2const] ?(  need eval                               : [2const]  ( "name" -- )                                         eval postpone 2literal  ; immediate compile-only  ?)          [unneeded] [cconst] ?(  need eval                               : [cconst]  ( "name" -- )                                         eval postpone cliteral  ; immediate compile-only  ?)                                                                                                                                                                                                                                                                                                                                          ( warnings ?warn )                                              need search-wordlist                                            variable warnings  warnings on                                  : no-warnings?  ( -- f )  warnings @ 0=  ;                      : not-redefined?  ( ca len -- ca len xt false | ca len true )     2dup get-current search-wordlist 0=  ;                        : ?warn  ( ca len -- ca len | ca len xt )                           no-warnings? if  unnest exit  ( ca len )  then                not-redefined? if  unnest                   then                ( ca len | ca len xt )  ;                                                                                                                                                                                                                                                                                                                                                                                                                                     ( warn.throw warn.message warn-throw )                          need ?(                                                         [unneeded] warn.throw ?(  need ?warn                            : warn.throw  ( ca len -- ca len )                                ?warn ( ca len xt )  drop .error-word  #-257 .throw  ;        ' warn.throw ' warn defer!  exit ?)                             [unneeded] warn.message ?(  need ?warn                          : warn.message  ( ca len -- ca len )                              ?warn ( ca len xt )  ." redefined " >name .name  ;            ' warn.message ' warn defer!  exit ?)                           [unneeded] warn-throw ?(  need ?warn                            : warn-throw  ( ca len -- ca len )                                ?warn ( ca len xt )  #-257 throw  ;                           ' warn-throw ' warn defer!  exit ?)                                                                                                                                                             ( string-parameter )                                            : string-parameter  ( -- ca len )                                 rp@ cell+ dup >r    ( a1 ) ( R: a1 )                            @ count             ( ca len ) ( R: a1 )                        dup char+ r@ @ +    ( ca len a2 ) ( R: a1 )                     r> !  ;                                                       : string-parameter2  ( -- ca len )                                rp@ cell+ dup >r    ( a1 ) ( R: a1 )                            dup @ count         ( a1 ca len ) ( R: a1 )                     dup char+ rot +    ( ca len a2 ) ( R: a1 )                      r> !  ;                                                       : string-parameter3  ( -- ca len )                                rp@ cell+ dup       ( a1 )                                      dup @ count         ( a1 ca len )                               rot dup >r over char+ over +    ( ca len a2 )                   r> !  ;                                                       ( buffer: cvariable enum cenum enumcell link@ link, )           [unneeded] buffer:                                              ?\ : buffer:  ( u "name" -- )  create allot  ;  exit            [unneeded] cvariable                                            ?\ : cvariable  ( "name"  -- )  create 1 allot  ;  exit         [unneeded] enum                                                 ?\ : enum  (  n "name" -- n+1 )  dup constant 1+  ;  exit       [unneeded] cenum                                                ?\ : cenum  (  n "name" -- n+1 )  dup cconstant 1+  ;  exit     need ?(                                                         [unneeded] enumcell ?(                                          : enumcell  (  n "name" -- n+cell )                               dup constant cell+  ;  exit ?)                                [unneeded] link@  [unneeded] link, and ?exit                    need alias ' @ alias link@  ( node1 -- node2 )                  : link,  ( node -- )  here over @ , swap !  ;                   ( array> 2array> )                                              need ?(                                                         [unneeded] array> ?(                                            code array>  ( n a1 -- a2 )                                       D1 c, E1 c, 29 c, 19 c, jppushhl,  end-code  exit ?)          [unneeded] 2array> ?(                                           code 2array>  ( n a1 -- a2 )                                      D1 c, E1 c, 29 c, 29 c, 19 c, jppushhl,  end-code  exitbitmasks bits>bytes bit-array !bit @bit )                     need align  need alias  need cset  need creset                  create bitmasks 128 c, 64 c, 32 c, 16 c, 8 c, 4 c, 2 c, 1 c,    : bits>bytes  ( n1 -- n2 )  8 /mod swap 0<> -  ;                : bit-array  ( n "name" -- )                                      create bits>bytes allot align                                   does>  ( n -- b ca )                                              ( n pfa )  swap 8 /mod >r bitmasks + c@ swap r> +  ;        : !bit  ( f b ca -- )  rot if  cset exit  then  creset  ;       ' c@and? alias @bit  ( b ca -- f )                                                                                                                                                                                                                                                                                                                                                                                                                              ( 1array } 2array }} )                                          need ?(                                                         [unneeded] 1array ?(  need }  need align                        : 1array ( n1 n2 "name" -- )                                      create 2dup , , * allot align  ;  ?)                          [unneeded] } ?(  need <=                                        : array>items  ( a -- n )  cell+ @  ;                           : }  ( a1 n -- a2 )                                               over array>items over <= over 0< or #-272 ?throw                over @ * + cell+ cell+  ;  ?)                                 [unneeded] 2array ?(  need }  need align                        : 2array  ( n1 n2 n3 "name" -- )                                  create >r tuck , ( n2 n1 ) r@ , * dup , r> * allot align  ;   : }} ( a1 n1 n2 -- a2 )  2>r cell+ dup cell- @  r> * r> + }  ;  ?)                                                                                                                              ( avalue 2avalue cavalue )                                      need ?(                                                         [unneeded] avalue ?(  need array>                               : avalue  ( n "name" -- )                                         create  cells allot                                             does>  ( n -- x ) ( n pfa ) array> @  ;  exit ?)              [unneeded] 2avalue ?(  need 2array>                             : 2avalue  ( n "name" -- )                                        create  [ 2 cells ] literal * allot                             does>  ( n -- xd ) ( n pfa ) 2array> 2@  ;  exit ?)           [unneeded] cavalue ?(  need align                               : cavalue  ( n "name" -- )                                        create  allot align                                             does>  ( n -- x ) ( n pfa ) + c@  ;  exit ?)                                                                                                                                                  ( ato +ato 2ato )                                               need ?(  [unneeded] ato ?(  need >body                          : (ato)  ( x n xt -- )  >body array> !  ;                       : ato  ( x n "name" -- )                                          compiling?  if    postpone ['] postpone (ato)                               else  ' (ato)  then  ; immediate  exit ?)         [unneeded] +ato ?(  need >body                                  : (+ato)  ( n1 n2 xt -- )  >body array> +!  ;                   : +ato  ( n1 n2 "name" -- )                                       compiling? if    postpone ['] postpone (+ato)                              else  ' (+ato)  then  ; immediate  exit ?)         [unneeded] 2ato ?(  need >body                                  : (2ato)  ( xd n xt -- )  >body 2array> 2!  ;                   : 2ato  ( xd n "name" -- )                                        compiling?  if    postpone ['] postpone (2ato)                              else  ' (2ato)  then  ; immediate  exit ?)        ( cato +cato )                                                  need ?(                                                         [unneeded] cato ?(  need >body                                  : (cato)  ( c n xt -- )  >body + c!  ;                          : cato  ( x n "name" -- )                                         compiling?  if    postpone ['] postpone (cato)                              else  ' (cato)  then  ; immediate  exit ?)        [unneeded] +cato ?(                                             : (+cato)  ( c n xt -- )  >body + c+!  ;                        : +cato  ( n1 n2 "name" -- )                                      compiling? if    postpone ['] postpone (+cato)                             else  ' (+cato)  then  ; immediate  exit ?)                                                                                                                                                                                                                                                                        ( avariable 2avariable cavariable )                             need ?(                                                         [unneeded] avariable ?(  need array>                            : avariable  ( n "name" -- )                                      create  cells allot                                             does>  ( n -- a ) ( n pfa ) array>  ;  exit ?)                [unneeded] 2avariable ?(  need 2array>                          : 2avariable  ( n "name" -- )                                     create  [ 2 cells ] literal * allot                             does>  ( n -- a ) ( n pfa ) 2array>  ;  exit ?)               [unneeded] cavariable ?(  need align                            : cavariable  ( n "name" -- )                                     create  allot align                                             does>  ( n -- ca ) ( n pfa ) +  ;  exit ?)                                                                                                                                                    ( associative: )                                                : associative:  ( n "name" -- )                                   constant                                                        does>  ( x -- index )                                             ( x pfa )                                                       dup @ ( x pfa n ) -rot dup @ 0 ( n x pfa n 0 )                  do ( n x pfa )                                                    cell+ 2dup @ = ( n x pfa' flag )                                if  2drop drop i unloop exit  then                            loop 2drop ( n )  ;                                                                                                                                                                                                                                                                                                                                                                                                                                         ( associative-list item? item create-entry )                    need search-wordlist                                            : associative-list  ( "name" -- )  wordlist constant  ;         : item?  ( ca len wid -- false | xt true )                        search-wordlist 0<> ;                                         : item  ( ca len wid -- i*x )  item? 0= #-13 ?throw execute  ;  : create-entry  ( i*x wid xt "name" -- )                          get-current >r swap set-current  create execute                 r> set-current  ;                                             -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( entry: centry: 2entry: sentry: items )                        need ?(  need create-entry  [unneeded] entry: ?(                : entry:  ( x wid "name" -- )                                     ['] , create-entry does>  ( -- x )  ( pfa ) @  ;  exit ?)     [unneeded] centry: ?(                                           : centry:  ( c wid "name" -- )                                    ['] c, create-entry does>  ( -- c )  ( pfa ) c@  ;  exit ?)   [unneeded] 2entry: ?(                                           : 2entry:  ( dx wid "name" -- )                                   ['] 2, create-entry does>  ( -- dx )  ( pfa ) 2@  ;  exit ?)  [unneeded] sentry: ?(                                           : sentry:  ( ca len wid "name" -- )                               ['] s, create-entry does>  ( -- ca len )  ( pfa ) count  ;    exit ?)                                                         [unneeded] items ?exit  need alias  need wordlist-words         ' wordlist-words alias items  ( wid -- )                        ( begin-stringtable end-stringtable )                           : begin-stringtable  ( "name" -- stringtable-sys )                create  here ( a1 ) cell allot here  ( a1 a2 )                  does> ( n -- ca len )                                             ( n pfa )  @ swap cells + @ count  ;                        : end-stringtable  ( stringtable-sys -- )                         ( a1 a2 )                                                       here rot !   \ set the index                                    here swap  ( a3 a2 )                                            begin  2dup <>  while                                             dup ,   \ store the start of the string in the index            count chars +  \ move to the next string                      repeat  2drop  ;                                                                                                                                                                                                                                              ( +field field: 2field: cfield: begin-structure end-structure ) [unneeded] +field ?\ defer +field  ( n1 n2 "name" -- n3 )  exit need ?(                                                         [unneeded] field: ?( need +field                                : field:   ( n1 "name" -- n2 )  cell +field  ; exit ?)          [unneeded] 2field: ?( need +field                               : 2field:  ( n1 "name" -- n2 )  [ 2 cells ] literal +field  ;   exit ?)                                                         [unneeded] cfield: ?( need +field                               : cfield:  ( n1 "name" -- n2 )  [ 1 chars ] literal +field  ;   exit ?)                                                         [unneeded] begin-structure [unneeded] end-structure and ?(      : begin-structure  ( "name" -- struct-sys 0 )                     create  >mark 0                                                 does>   ( -- n )  ( pfa ) @   ;                               : end-structure  ( struct-sys n -- )  swap !  ; ?)              ( +field-unopt +field-opt-0 )                                   need ?(                                                         [unneeded] +field-unopt ?(  need +field                         : +field-unopt  ( n1 n2 "name" -- n3 )                            create  over , +                                                does>   ( a -- a' )  ( a pfa ) @ +  ;                         ' +field-unopt ' +field defer!  exit ?)                         [unneeded] +field-opt-0  ?(  need +field                        : +field-opt-0  ( n1 n2 "name" -- n3 )                            : over ?dup if    postpone literal postpone +                               else  immediate                                                 then  postpone ;  +  ;                            ' +field-opt-0 ' +field defer! ?)                                                                                                                                                                                                                               ( +field-opt-0124 )                                             need ?(                                                         [unneeded] +field-opt-0124 ?(  need case  need +field           : +field-opt-0124  ( n1 n2 "name" -- n3 )                         :                                                               over case                                                       0                   of  immediate                      endof    1                   of  postpone 1+                    endof    cell                of  postpone cell+                 endof    [ 2 cells ] literal of  postpone cell+ postpone cell+  endof    dup  postpone literal postpone +  \ default                     endcase  postpone ;  +  ;                                     ' +field-opt-0124 ' +field defer! ?)                                                                                                                                                                                                                            ( const cconst 2const )                                         need ?(                                                         [unneeded] const ?(                                             : const  ( x "name" -- )                                          create immediate ,                                              does>  @ executing? ?exit  postpone literal  ; exit ?)        [unneeded] cconst ?(                                            : cconst  ( c "name" -- )                                         create immediate c,                                             does>  c@ executing? ?exit  postpone cliteral  ; exit ?)      [unneeded] 2const ?(                                            : 2const  ( xd "name" -- )                                        create immediate 2,                                             does>  2@ executing? ?exit  postpone 2literal  ; exit ?)                                                                                                                                      ( data: 2data: cdata: )                                         need ?(                                                         [unneeded] data: ?(                                             : data:  ( "name" -- orig )                                       create >mark                                                    does>  ( -- a len ) ( pfa ) dup cell+ swap @  ;               : ;data  ( orig -- )  here over cell+ - cell / swap !  ;        exit ?)                                                         [unneeded] 2data: ?(  need alias                                ' data: alias 2data: ( "name" -- orig )                         : ;2data  ( orig -- )                                             here over cell+ - [ 2 cells ] literal / swap !  ;  exit ?)    [unneeded] cdata: ?(  need alias                                ' data: alias cdata: ( "name" -- orig )                         : ;cdata  ( orig -- )  here over cell+ - swap !  ; ?)                                                                           ( !> 2!> c!> )                                                  need ?(  need >body                                             [unneeded] !> ?(                                                : !>  ( Int: x "name" -- ) ( Comp: "name" -- ) ( Exe: x -- )      ' >body compiling? if    postpone literal postpone ! exit                          then  !  ; immediate ?)                    [unneeded] 2!> ?(                                               : 2!>  ( Int: xd "name" -- ) ( Comp: "name" -- ) ( Exe: xd -- )   ' >body compiling? if    postpone literal postpone 2! exit                         then  2!  ; immediate ?)                   [unneeded] c!> ?(                                               : c!>  ( Int: c "name" -- ) ( Comp: "name" --) ( Exe: c -- )      ' >body compiling? if    postpone literal postpone c! exit                         then  c!  ; immediate ?)                                                                                                                                                   ( storer cstorer 2storer )                                      need ?(                                                         [unneeded] storer ?(                                            : storer  ( x a "name" -- )                                       create  2,  does>   ( -- ) ( pfa )  2@ !  ; exit ?)           [unneeded] cstorer ?(                                           : cstorer  ( c ca "name" -- )                                     create  2,  does>   ( -- ) ( pfa )  2@ c!  ; exit ?)          [unneeded] 2storer ?(                                           : 2storer  ( xd a "name" -- )                                     create  , 2,                                                    does>   ( -- ) ( pfa )  dup cell+ 2@ rot @ 2!  ; exit ?)                                                                                                                                                                                                                                                                      ( ucreate ?user uallot user 2user )                             [unneeded] ucreate                                              ?\ : ucreate  ( "name" -- )  udp @ (user)  ;  exit              need ?(                                                         [unneeded] ?user ?(                                             : ?user  ( -- )                                                   udp @ dup /user > #-279 ?throw  0< #-280 ?throw  ;  exit  ?)  [unneeded] uallot ?(  need ?user                                : uallot  ( n -- )  udp +! ?user  ;  exit  ?)                   [unneeded] user ?(  need ucreate  need uallot                   : user  ( "name" -- )  ucreate cell uallot  ;  exit  ?)         [unneeded] 2user ?(  need ucreate  need uallot                  : 2user  ( "name" -- )  ucreate [ 2 cells ] literal uallot  ;   exit  ?)                                                                                                                                                                                        ( val 2val )                                                    need ?(                                                         [unneeded] val ?(                                               variable (val)                                                  : init-val  ( -- )   ['] @ (val) !  ;  init-val                 : val  ( x "name" -- )                                            create ,  does>  ( -- ) ( pfa ) (val) perform  init-val  ;    : toval    ( -- )  ['] ! (val) !  ;  ?)                         [unneeded] 2val ?(                                              variable (2val)                                                 : init-2val  ( -- )   ['] 2@ (2val) !  ;  init-2val             : 2val  ( xd "name" -- )                                          create 2,  does>  ( -- ) ( pfa ) (2val) perform  init-2val  ; : 2toval    ( -- )  ['] 2! (2val) !  ;  ?)                                                                                                                                                      ( value to 2value 2to cvalue cto )                              need alias  need ?(                                             [unneeded] value [unneeded] to and ?(                           ' constant alias value  ( x "name"  -- )                        need !>  ' !> alias to immediate ?)                             [unneeded] 2value [unneeded] 2to and ?(                         ' 2constant alias 2value  ( xd "name"  -- )                     need 2!>  ' 2!> alias 2to immediate ?)                          [unneeded] cvalue [unneeded] cto and ?(                         need cconstant ' cconstant alias cvalue  ( c "name"  -- )       need c!>  ' c!> alias cto immediate ?)                                                                                                                                                                                                                                                                                                                                                          ( value 2value to )                                             need >body                                                      : value  ( n "name"  -- )  create  0 c, ,  does> 1+ @  ;        : 2value  ( n "name"  -- )  create  1 c, 2,  does> 1+ 2@  ;     : to  ( Int: i*x "name" -- ( Comp: "name" -- ( Exe: i*x -- )      ' >body dup 1+ swap c@                                          compiling? if  swap postpone literal                                           if  postpone 2!  else  postpone !  then  exit               then                                                 if  2!  else  !  then                                           ; immediate                                                                                                                                                                                                                                                                                                                                                                                   ( xsize xp xp0 xp@ xp! xp+! xclear set-xstack )                 need value                                                      0 value xsize  0 value xp  0 value xp0                          : xp@  ( -- a )  xp @  ;                                        : xp!  ( a -- )  xp !  ;                                        : xp+!  ( n -- )  xp +!  ;                                      : xclear  ( -- )  xp0 xp!  ;                                    : set-xstack  ( a -- )                                            dup @ to xp0  cell+ dup to xp  cell+ @ to xsize  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( xfree allocate-xstack allot-xstack )                          [unneeded] xfree ?\ : xfree  ( -- )  xp0 free throw  ;  exit    need ?(  [unneeded] allocate-xstack ?(                          need allocate  need free need set-xstack  need xp0              : allocate-xstack  ( n "name" -- )                                create  cells dup allocate throw  cell - dup                      , , ,                                                         does> ( -- ) ( pfa ) set-xstack  ;  exit ?)                   [unneeded] allot-xstack ?(  need set-xstack                     : allot-xstack  ( n "name" -- )                                   create  cells dup here cell+ cell+ dup                            , , , allot                                                   does> ( -- )  ( pfa ) set-xstack  ; ?)                                                                                                                                                                                                                        ( >x x@ xdrop x> xdup xpick )                                   : >x  ( x -- ) ( X: -- x )  cell xp+!  xp@ !   ;                : x@  ( -- x ) ( X: x -- x )  xp@ @  ;                          : xdrop  ( X: x -- )  [ cell negate ] literal xp+!  ;           : x>  ( -- x ) ( X: x -- )  x@ xdrop  ;                         : xdup  ( X: x -- x x )  x@ >x  ;                               : xpick  ( n -- x'n ) ( X: x'n ... x'0 -- x'n ... x'0 )           xp@ swap cells - @  ;                                         : xover  ( X: x1 x2 -- x1 x2 x1 )  1 xpick >x  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( 2x@ 2>x 2x> 2xdrop 2xdup )                                    need x@  need >x  need xpick  need xover                        : 2x@  ( -- x1 x2 ) ( X: x1 x2 -- x1 x2 )  x@ 1 xpick swap  ;   : 2>x  ( x1 x2 -- ) ( X: -- x1 x2 )  swap >x >x  ;              : 2x>  ( -- x1 x2 ) ( X: x1 x2 -- )  x> x> swap  ;              : 2xdrop  ( X: x1 x2 -- )  [ -2 cells ] literal xp+!  ;         : 2xdup  ( X: x1 x2 -- x1 x2 x1 x2 )  xover xoverxlen xdepth xdepth. .x )                                      : xlen  ( -- n )  xp@ xp0 -  ;                                  : xdepth  ( -- n )  xlen cell /  ;                              : xdepth.  ( n -- )  ." <"  s>d <# #s #> type  ." > "  ;        : (.x)  ( -- )  xp0 cell+ xlen bounds ?do  i @ . cell +loop  ;  : .x  ( -- )  xdepth dup xdepth. if  (.x)  thennip pick roll )                                              need ?(                                                         [unneeded] 2nip ?(  code 2nip  ( x1 x2 x3 x4 -- x3 x4 )           E1 c, D1 c, F1 c, F1 c, C3 c, pushhlde ,  end-code  ?)        [unneeded] pick ?(                                              code pick  ( xu .. x1 x0 u -- xu .. x1 x0 xu )                    E1 c,  29 c,  39 c,  C3 c, fetchhl ,  end-code  ?)            [unneeded] pick ?(  need z80-asm                                code roll  ( xu xn .. x0 u -- xn .. x0 xu )                       hl pop  hl addp  hl de ldp  sp addp                             bc push  m c ld  hl incp  m b ld                                bc push  de bc ldp  hl de ldp  bc tstp                          0000 jpz |mark 0 unresolved !   hl decp  hl decp  lddr          0 unresolved @ >resolve  hl pop  bc pop  exsp                   jpnext,  end-code  ?)                                                                                                         ( 3drop 4drop 3dup )                                            need ?(                                                         [unneeded] 3drop ?(                                             code 3drop  ( x1 x2 x3 -- )                                       E1 c,  E1 c,  E1 c,  jpnext,  end-code  ?)                    [unneeded] 4drop ?(                                             code 4drop  ( x1 x2 x3 x4 -- )                                    E1 c,  E1 c,  E1 c,  E1 c,  jpnext,  end-code  ?)             [unneeded] 3dup ?(                                              code 3dup  ( x1 x2 x3 -- x1 x2 x3 x1 x2 x3 )                      D9 c,                                                           C1 c,  D1 c,  E1 c,  E5 c,  D5 c,  C5 c,  E5 c,  D5 c,  C5 c,   D9 c,  jpnext,  end-code  ?)                                                                                                                                                                                                                                  ( 2rot swapped )                                                need ?(                                                         [unneeded] 2rot ?(  need roll                                   : 2rot  ( x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2 )                5 roll 5 roll  ; ?)                                           [unneeded] swapped ?(                                           : swapped  ( i*x n1 n2 -- j*x )                                   >r 1+ cells sp@ +     ( i*x a1 ) ( R: n2 )                      r> 2+ cells sp@ +     ( i*x a1 a2 )                             over @ over @         ( i*x a1 a2 x1 x2 )                       >r swap !  r> swap !  ; ?)                                                                                                                                                                                                                                                                                                                                                                    ( nup drup dip 0dup -dup )                                      need ?(                                                         [unneeded] nup ?(  code nup  ( x1 x2 -- x1 x1 x2 )                E1 c,  D1 c,  D5 c,  C3 c, pushhlde ,  end-code  ?)           [unneeded] drup ?(  code drup  ( x1 x2 -- x1 x1 )                 D1 c,  E1 c,  E5 c,  E5 c,  jpnext,  end-code  ?)             [unneeded] dip ?(  code dip  ( x1 x2 -- x2 x2 )                   E1 c, D1 c, E5 c, E5 c,  jpnext,  end-code  ?)                [unneeded] 0dup ?(  code 0dup  ( x -- x | 0 0 )                   E1 c,  78 04 + c,  B0 05 + c,                                   C2 c, pushhl ,  E5 c,  jppushhl,  end-code  ?)                [unneeded] -dup ?(  code -dup  ( x -- x | 0 0 )                   E1 c,  CB c, 7C c,  C2 c, pushhl ,  E5 c,  jppushhl,            end-code ?)                                                                                                                                                                                   ( ndrop 2ndrop )                                                need ?(  need z80-asm                                           [unneeded] ndrop ?(                                             code ndrop  ( x1..xn n -- )                                       hl pop  hl addp  exde  \ DE = n cells                           0 hl ldp#  sp addp  \ HL = stack pointer                        de addp  ldsp  \ update SP                                      jpnext,  end-code ?)                                          [unneeded] 2ndrop ?(                                            code 2ndrop  ( dx1..dxn n -- )                                    hl pop  hl addp  hl addp  exde  \ DE = n cells                  0 hl ldp#  sp addp  \ HL = stack pointer                        de addp  ldsp  \ update SP                                      jpnext,  end-code ?)                                                                                                                                                                          ( create: ;code :noname nextname )                              [unneeded] create:                                              ?\ : create:  ( "name" -- )  create hide ]  ;                   need ?(  [unneeded] ;code ?(                                    : ;code  ( -- )  postpone (;code)  finish-code                                   ; immediate compile-only  exit ?)              [unneeded] :noname ?(                                           : :noname  ( -- xt )                                              here  dup lastxt !  last off  !csp                              docolon [ also assembler ] call, [ previous ]                   noname? on  ]  ;  exit ?)                                     [unneeded] nextname ?(  2variable nextname-string               : nextname-header  ( -- )                                         nextname-string 2@ header, default-header  ;                  : nextname  ( ca len -- )  nextname-string 2!                     ['] nextname-header ['] header defer!  ; ?)                   ( alias! alias realias )                                        need name>>                                                     [defined] alias! [defined] far-banks or                         ?\ need !s : alias!  ( xt nt -- )  name>> !s  ;                 [defined] alias! [undefined] far-banks or                       ?\ : alias!  ( xt nt -- )  name>> far!  ;                       [unneeded] alias                                                ?\ : alias  ( xt "name" -- )  header reveal latest alias!  ;    [unneeded] realias ?exit                                        : realias  ( xt "name" -- )                                       defined dup 0= #-13 ?throw alias!  ;                                                                                                                                                                                                                                                                                                                                                          ( deferred defers defer@ action-of )                            [unneeded] deferred                                             ?\ : deferred  ( xt "name" -- )  defer latest name> defer!  ;   [unneeded] defers                                               ?\ : defers  ( "name" -- )  ' defer@ compile,  ; immediate      [unneeded] defer@ ?\ : defer@  ( xt1 -- xt2 )  >defer @  ;      [unneeded] deferred? ?\ : deferred?  ( xt -- f )  c@ $C3 =  ;   [unneeded] action-of ?exit                                      : action-of  ( Interpretation: "name" -- xt )                                ( Compilation:    "name" -- )                                   ( Runtime:        -- xt )                            ' compiling? if    postpone literal postpone defer@                          else  defer@  then  ; immediate                                                                                                                                                                                                                  ( <is> [is] is  )                                               [needed] [is]                                                   ?\ : <is>  ( xt "name" -- )  ' defer!  ;  [needed] <is> ?exit   : [is]  ( xt "name" -- )                                          postpone ['] postpone defer!  ; immediate compile-only        [needed] [is] ?exit                                             : is  ( xt "name" -- )                                            compiling? if  postpone [is]  else  <is>  then  ; immediatesynonym )                                                     need alias  need nextname                                       : synonym  ( "newname" "oldname" -- )                             parse-name nextname ' dup >r alias                              r> >name dup immediate?     if  immediate     then                           compile-only?  if  compile-only  thenplusd-in plusd-out )                                          need z80-asm  need --hook-codes--                               code plusd-in  ( -- )                                             patch hook                                                      jpnext,                                                         end-code                                                      code plusd-out  ( -- )                                            D3 c, #231 c,     \ out (231),a                                 jpnext,                                                         end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( plusd-in plusd-out )                                          code plusd-in  ( -- )                                             DB c, #231 c,     \ in a,(231)                                  jpnext,                                                         end-code                                                      code plusd-out  ( -- )                                            D3 c, #231 c,     \ out (231),a                                 jpnext,                                                         end-codeplusd-in, plusd-out, )                                        need macro                                                      macro plusd-in,  ( -- )                                           DB c, #231 c,     \ in a,(231)                                  endm                                                          macro plusd-out,  ( -- )                                          D3 c, #231 c,     \ out (231),a                                 endmufia )                                                        24 constant /ufia  create ufia  /ufia allot  ufia /ufia erase   ufia      constant dstr1   \ drive: 1 or 2                      ufia 1+   constant fstr1   \ program number                     ufia 2+   constant sstr1   \ stream number                      ufia 3 +  constant device  \ device: "D" or "d"                 ufia 4 +  constant nstr1   \ directory description              ufia 5 +  constant nstr2   \ file name                          ufia 15 + constant hd00    \ file type                          ufia 16 + constant hd0b    \ file length                        ufia 18 + constant hd0d    \ file start address                 'd' device c! \ "d" or "D"                                      2 sstr1 c!  \ stream 2                                          1 dstr1 c!  \ drive 1                                           variable file-length   \ copy of `hd0b` used by `(<file)`       variable file-address  \ copy of `hd0d` used by `(<file)`       ( --file-types-- )                                              0 constant basic-filetype                                       1 constant data-array-filetype                                  2 constant string-array-filetype                                3 constant code-filetype                                        : --file-typesdirectory-descriptions-- )                                  01 constant basic-file-dir      02 constant data-array-dir      03 constant string-array-dir    04 constant code-file-dir       05 constant snapshot-48k-dir    06 constant microdrive-file-dir 07 constant screens$-file-dir   08 constant special-file-dir    09 constant snapshot-128k-dir   10 constant opentype-file-dir   11 constant execute-file-dir                                    : --directory-descriptionshook-codes-- )                                              $33 constant hxfer  $34 constant ofsm  $35 constant hofile      $36 constant sbyte  $37 constant hsvbk $38 constant cfsm        $39 constant pntp   $3A constant cops  $3B constant hgfile      $3C constant lbyte  $3D constant hldbk $3E constant wsad        $3F constant sad    $40 constant rest  $41 constant heraz       $42 constant cops2  $43 constant pcat  $44 constant hrsad       $45 constant hwsad  $46 constant otfoc $47 constant patch       : --hook-codesget-drive set-drive )                                         need z80-asm  need --hook-codes--                               code get-drive  ( -- n )                                          bc push  \ save the Forth IP                                    patch hook                                                      3ACE fta  \ XXX NEW                                             E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp  end-code                                            code set-drive  ( n -- )                                          hl pop                                                          bc push  \ save the Forth IP                                    l a ld  21 hook   \ select drive in a                           bc pop   next ix ldp#  \ restore the Forth registers            jpnext,  end-code                                                                                                             ( delete-file )                                                 need z80-asm  need ufia  need --hook-codes--                    need filename>ufia                                              code (delete-file)  ( -- ior )                                    bc push  \ save the Forth registers                             ufia ix ldp#                                                    heraz hook  \ erase the file                                    bc pop  next ix ldp#  \ restore the Forth registers             af push                                                         jpnext,                                                         end-code                                                      : delete-file  ( ca len -- ior )                                  filename>ufia (delete-file) dosior>ior  ;                                                                                                                                                                                                                     ( -filename filename! >ufia filename>ufia )                     need ufia  need get-drive                                       10 constant /filename  \ max filename length                    : -filename  ( -- )  nstr2 /filename blank  ;                   : filename!  ( ca len -- )                                        -filename /filename min nstr2 swap cmove  ;                   : >ufia  ( ca1 len1 ca2 len2 -- )                                 3 hd00 c!  4 nstr1 c!  \ code filetype and dir description      filename!                                                       dup hd0b !  file-length !                                       dup hd0d !  file-address !                                      get-drive dstr1 c!  ;                                         1 set-drive  \ default                                          : filename>ufia  ( ca len -- )  0 0 2swap >ufia  ;                                                                                                                                              ( >file )                                                       need z80-asm  need ufia  need --hook-codes--  need >ufia        code (>file)  ( -- ior )                                          bc push  \ save the Forth registers                             ufia ix ldp#                                                    hofile hook \ open the file and create its header               nc if \ no error?                                                 hd0d de ftp  hd0b bc ftp  \ de=start, bc=length                 hsvbk hook \ save to file                                       nc if  cfsm hook  then  \ close the file if no error          then  bc pop  next ix ldp#  \ restore the Forth registers       af push  \ ior                                                  jpnext, end-code                                              : >file  ( ca1 len1 ca2 len2 -- ior )                             >ufia (>file) dosior>ior  ;                                                                                                   ( <file )                                                       need z80-asm  need ufia  need --hook-codes--  need >ufia        code (<file)  ( -- ior )                                          bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       hd00 de ldp#  9 b ld# \ destination and count                   begin  lbyte hook  de stap  de incp  step                       file-address de ftp  file-length bc ftp                         bc tstp z if  hd0b bc ftp  then  hldbk hook                   then  bc pop  next ix ldp#  af push                             jpnext,  end-code                                             : <file  ( a1 len1 ca2 len2 -- ior )                              >ufia (<file) dosior>ior  ;                                                                                                                                                                   ( file>screen )                                                 need z80-asm  need ufia  need --hook-codes--  need >ufia        code (file>screen)  ( -- dosior )                                 bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       patch hook  4000 de ldp#  128 bc ldp#                           d h ld                                                          begin   lbyte hook  de stap                                             a l ld  de push  bc push  1744 call  bc pop  de pop             de incp  bc decp  b a ld  c or                          z until  E7 out  \ page +D out                                then  bc pop  next ix ldp#  af push                             jpnext,  end-code -->                                                                                                                                                                         ( file>screen )                                                 : file>screen  ( ca len -- ior )                                  >ufia (file>screen) dosior>iorcode .100  ( u -- )                                               hl pop                                                          bc push                                                         hl push                                                         patch hook                                                      hl pop                                                          1744 call                                                       E7 out  \ page +D out                                           bc pop  next ix ldp#  jpnext,                                   end-code                                                                                                                                                                                                                                                                                                                                                                                      ( <file-as-is )                                                 need z80-asm  need ufia  need --hook-codes--  need >ufia        code (<file-as-is)  ( -- ior )                                    bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       hd00 de ldp#  9 b ld# \ destination and count                   begin  lbyte hook  de stap  de incp  step                       hd0d de ftp  hd0b bc ftp  hldbk hook                          then  bc pop  next ix ldp#  af push                             jpnext,  end-code                                             : <file-as-is  ( ca len -- ior )                                  0 0 2swap >ufia (<file-as-is) dosior>ior  ;                                                                                                                                                                                                                   ( file? )                                                       need ufia  need filename!  need --hook-codes--                  code (file?)  ( -- f )                                            bc push  \ save the Forth IP                                    patch hook                                                      nstr2 ix ldp#                                                   1146 call  \ FIND_FILE                                          168E call  \ BORD_REST = restore the border                     E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             ' true jpz                                                      ' false jp                                                      end-code                                                      : file?  ( ca len -- f )  filename! (file?)  ;                                                                                                                                                  ( cat acat wcat wacat )                                         need z80-asm  need ufia  need --hook-codes--                    need filename>ufia                                              [defined] ufia1  ?\ $3E01 constant ufia1                        code (cat)  ( n -- )                                              hl pop  bc push  exx                                            patch hook                                                      ufia hl ldp#  ufia1 de ldp#  /ufia bc ldp#  ldir                exx  l a ld  09A5 call  168E call                               E7 out  bc pop  next ix ldp#                                    jpnext,  end-code                                             : wcat  ( ca len -- )  filename>ufia  4 (cat)  ;                : wacat  ( ca len -- )  filename>ufia  2 (cat)  ;  decimal      : cat  ( -- )  s" *" wcat  ;                                    : acat  ( -- )  s" *" wacat ;  decimal                                                                                          ( @dos )                                                        need z80-asm  need --hook-codes--                               code @dos  ( a -- n )                                             hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop m e ld  hl incp  m d ld                                  E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             de push                                                         jpnext,                                                         end-code                                                                                                                                                                                                                                                      ( c@dos )                                                       need z80-asm  need --hook-codes--                               code c@dos  ( a -- b )                                            hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop                                                          m a ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp                                                        end-code                                                                                                                                                                                                                                                      ( c!dos )                                                       need z80-asm  need --hook-codes--                               code c!dos  ( b a -- )                                            hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push hl push                                                 patch hook                                                      hl pop  de pop  e m ld                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext,                                                         end-code                                                                                                                                                                                                                                                                                                                      ( !dos )                                                        need z80-asm  need --hook-codes--                               code !dos  ( n a -- )                                             hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push  hl push                                                patch hook                                                      hl pop  de pop  e m ld  hl incp  d m ld                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext,                                                         end-code                                                                                                                                                                                                                                                                                                                      ( @dosvar )                                                     need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code @dosvar  ( n1 -- n2 )                                        hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop  dos-vars de ldp#  de addp                               m e ld  hl incp  m d ld                                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             de push                                                         jpnext,                                                         end-code                                                                                                                      ( c@dosvar )                                                    need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code c@dosvar  ( n -- b )                                         hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop  dos-vars de ldp#  de addp                               m a ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp                                                        end-code                                                                                                                                                                                      ( !dosvar )                                                     need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code !dosvar  ( n1 n2 -- )                                        hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push  hl push                                                patch hook                                                      hl pop  dos-vars de ldp#  de addp  de pop                       e m ld  hl incp  d m ld                                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext,                                                         end-code                                                                                                                                                                                      ( c!dosvar )                                                    need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code c!dosvar  ( b n -- )                                         hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push hl push                                                 patch hook                                                      hl pop  dos-vars de ldp#  de addp  de pop                       e m ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext,                                                         end-code                                                                                                                                                                                      ( r# top )                                                      variable r#                                                     : top  ( -- )  r# off  ;  topblocked )                                                     only forth definitions                                          need inverse  need list  need update                            need list-lines  need vocabulary  need catch                    : delete  ( ca1 len1 len2 -- )                                    over min >r  r@ - ( left over )  dup 0>                         if  2dup swap dup r@ + -rot swap move  then  + r> blank  ;    : insert  ( ca1 len1 ca2 len2 -- )                                rot over min >r  r@ -  over dup r@ +  rot move  r> move  ;    : replace  ( ca1 len1 ca2 len2 -- ) rot min move  ;             vocabulary editor  also editor definitions                      need r#  need top                                               variable len len off                                            2variable mark 0. mark 2!                                       -->                                                                                                                             ( blocked )                                                     create rbuf $100 allot                                          create ibuf $100 allot                                          create fbuf $100 allot                                          : h  ( -- )                                                       r# @ c/l /mod swap >r scr @ line>string                         2dup drop r@ cr type                                                 r> /string 2dup drop len @ 1 inverse type 0 inverse                             len @ /string type  ;                    : g  ( u -- )  page list h  ;                                   : l  ( -- )  scr @ g  ;                                         : m  ( -- )  scr @ r# @ mark 2!  ;                              : a  ( -- )  mark 2@ m r# ! g  ;                                : c  ( n -- )  r# +! 1 len ! l  ;  -->                                                                                                                                                          ( blocked )                                                     : 'rest ( -- ca len )  scr @ block b/buf r# @ /string  ;        : 'line ( -- ca len )  'rest  1- c/l 1- and 1+  ;               : 'par  ( buf "ccc<eol>" -- ca len )  >r 0 parse dup              0= if  2drop r> count  else  2dup  r> place  then  ;          : t  ( u "ccc<eol>" -- )  c/l * r# ! c/l len !                    0 parse tuck 'line insert if  update  then  l  ;              : i  ( "ccc<eol>" -- )  ibuf 'par 'line insert update l  ;      : d  ( -- )  'line 2dup rbuf place len @ delete update l  ;     : r  ( "ccc<eol>" -- )  d i  ;                                  : y  ( -- )  rbuf count 'line insert update l  ;                : f  ( "ccc<eol>" | -- )                                          'rest len @ c/l mod /string fbuf 'par dup len ! search          0= throw nip b/buf swap - r# ! l  ;                           : il  ( -- )                                                      pad c/l 'rest insert 'rest drop c/l blank update l  ;  -->    ( blocked )                                                     : dl  ( -- ) 'rest c/l delete update l  ;                       : n  ( -- )  scr @ 1+ top g ;                                   : p  ( -- )  scr @ 1- top g  ;                                  : s ( u "ccc<eol>" | u -- )   >r                                  begin  ['] f catch  while  scr @ r@ =  if  rdrop  exit  then           scr @ r@ u<  if  n  else  p  then  repeat  r>  ;       forth definitions                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( editor )                                                      only forth definitions  need list  need update  need flush                              need parse-all need vocabulary          vocabulary editor  also editor definitions                      need r#  need top                                               : text  ( "ccc<eol>" -- )                                         pad c/l 1+ blank  parse-all  pad place  ;                     : line  ( n -- a )                                                dup $FFF0 and #-266 ?throw scr @ line>string drop  ;          : #locate  ( -- n1 n2 )  r# @ c/l /mod  ;                       : #lead  ( -- a n )  #locate line swap  ;                       : #lag  ( -- ca n )  #lead dup >r + c/l r> -  ;                 : -move  ( ca n -- )  line c/l cmove update  ;                  : e  ( n -- )  line c/l blank update  ;                         : s  ( n -- )  dup 1 - $0E do i line i 1+ -move -1 +loop e  ;   : h  ( n -- )  line pad 1+ c/l dup pad c! cmove  ;  -->         ( editor )                                                      : d  ( n -- )  dup h $0F dup rot do i 1+ line i -move loop e  ; : m  ( n -- )  r# +! cr space #lead type '_' emit                              #lag type #locate . drop  ;                      : t  ( n -- )  dup c/l * r# ! dup h 0 m  ;                      : l  ( -- )  scr @ list 0 m  ;                                  : r  ( n -- )  pad 1+ swap -move  ;                             : p  ( n "ccc<eol>"  -- )  text r  ;                            : i  ( n -- )  dup s r  ;                                       : clear  ( n -- )                                                 scr !  l/scr 0 do  [ also forth ] i [ previous ] e  loop  ;   -->                                                                                                                                                                                                                                                                                                                             ( editor )                                                      : -text  ( ca1 len1 ca2 -- f )                                    swap ?dup if  over + swap do                                                    dup c@ [ also forth ] i [ previous ] c@ -                       if  0= leave  else 1+  then                                   loop  else  drop 0=  then  ;                    : match  ( ca1 len1 ca2 len2 -- true n3 | false n4 )              >r >r 2dup r> r> 2swap over + swap [ also forth ]               do 2dup i -text                                                    if  >r 2drop r> - i swap - 0 swap 0 0 leave  then            loop  [ previous ]  2drop swap 0= swap ;                      : 1line  ( -- f )  #lag pad count match r# +!  ;                : find  ( -- )                                                    begin  $03FF r# @ <                                               if  top pad here c/l 1+ cmove #-270 throw  then  1line        until  ;  -->                                                 ( editor )                                                      : delete  ( n -- )  >r #lag + r@ - #lag r@ negate r# +! #lead +                     swap cmove  r> blank  ;                     : n  ( -- )  find 0 m  ;                                        : f  ( "ccc<eol>" -- )  text n  ;                               : b  ( -- )  pad c@ negate m  ;                                 : x  ( "ccc<eol>" -- )  text find pad c@ delete 0 m  ;          : till  ( "ccc<eol>" -- )  #lead + text 1line 0= #-270 ?throw                              #lead + swap - delete 0 m  ;         : (c)  ( ca len -- )                                              #lag rot over min >r r@ r# +! r@ - >r dup here r@ cmove         here #lead + r> cmove r> cmove 0 m  update  ;                 : c  ( "ccc<eol>" -- )                                            text pad count dup if  (c)  else  2drop  then  ;              : copy  ( n1 n2 -- )  swap block cell- ! update save-buffers  ; only forth definitions                                          ( environment? )                                                need search-wordlist  need alias                                wordlist constant environment-wordlist  ( -- wid )              : environment?  ( ca len -- false | i*x true )                    environment-wordlist search-wordlist                            if  execute true  else  false  then  ;                        get-current  environment-wordlist dup >order set-current        8 constant address-unit-bits  ( -- n )                          255 constant max-char  ( -- u )                                 255 constant /counted-string  ( -- n )                          ' /hold alias /hold  ( -- n )                                   84 constant /pad  ( -- n )                                      false constant floored  ( -- f )                                -->                                                                                                                                                                                             ( environment? )                                                32767 constant max-n ( -- n )                                   -1 constant max-u ( -- u )                                      -1 max-n 2constant max-d ( -- d )                               -1. 2constant max-ud ( -- ud )                                  $2C +origin @ constant return-stack-cells ( -- n )              $2A +origin @ constant stack-cells ( -- n )                     set-current previoustandard error codes #-01..#-15 )                             #-01 \ ABORT                                                    #-02 \ ABORT"                                                   #-03 \ stack overflow                                           #-04 \ stack underflow                                          #-05 \ return stack overflow                                    #-06 \ return stack underflow                                   #-07 \ do-loops nested too deeply during execution              #-08 \ dictionary overflow                                      #-09 \ invalid memory address                                   #-10 \ division by zero                                         #-11 \ result out of range                                      #-12 \ argument type mismatch                                   #-13 \ undefined word                                           #-14 \ interpreting a compile-only word                         #-15 \ invalid FORGET                                           ( Standard error codes #-16..#-30 )                             #-16 \ attempt to use zero-length string as a name              #-17 \ pictured numeric output string overflow                  #-18 \ parsed string overflow                                   #-19 \ definition name too long                                 #-20 \ write to a read-only location                            #-21 \ unsupported operation                                    #-22 \ control structure mismatch                               #-23 \ address alignment exception                              #-24 \ invalid numeric argument                                 #-25 \ return stack imbalance                                   #-26 \ loop parameters unavailable                              #-27 \ invalid recursion                                        #-28 \ user interrupt                                           #-29 \ compiler nesting                                         #-30 \ obsolescent feature                                      ( Standard error codes #-31..#-45 )                             #-31 \ >BODY used on non-CREATEd definition                     #-32 \ invalid name argument                                    #-33 \ block read exception                                     #-34 \ block write exception                                    #-35 \ invalid block number                                     #-36 \ invalid file position                                    #-37 \ file I/O exception                                       #-38 \ non-existent file                                        #-39 \ unexpected end of file                                   #-40 \ invalid BASE for floating point conversion               #-41 \ loss of precision                                        #-42 \ floating-point divide by zero                            #-43 \ floating-point result out of range                       #-44 \ floating-point stack overflow                            #-45 \ floating-point stack underflow                           ( Standard error codes #-46..#-60 )                             #-46 \ floating-point invalid argument                          #-47 \ compilation word list deleted                            #-48 \ invalid POSTPONE                                         #-49 \ search-order overflow                                    #-50 \ search-order underflow                                   #-51 \ compilation word list changed                            #-52 \ control-flow stack overflow                              #-53 \ exception stack overflow                                 #-54 \ floating-point underflow                                 #-55 \ floating-point unidentified fault                        #-56 \ QUIT                                                     #-57 \ exception in sending or receiving a character            #-58 \ [IF], [ELSE], or [THEN] exception                        #-59 \ ALLOCATE                                                 #-60 \ FREE                                                     ( Standard error codes #-61..#-75 )                             #-61 \ RESIZE                                                   #-62 \ CLOSE-FILE                                               #-63 \ CREATE-FILE                                              #-64 \ DELETE-FILE                                              #-65 \ FILE-POSITION                                            #-66 \ FILE-SIZE                                                #-67 \ FILE-STATUS                                              #-68 \ FLUSH-FILE                                               #-69 \ OPEN-FILE                                                #-70 \ READ-FILE                                                #-71 \ READ-LINE                                                #-72 \ RENAME-FILE                                              #-73 \ REPOSITION-FILE                                          #-74 \ RESIZE-FILE                                              #-75 \ WRITE-FILE                                               ( Standard error codes #-76..#-79 )                             #-76 \ WRITE-LINE                                               #-77 \ malformed xcharystem error codes #-256..#-270 )                             #-256 \ not a word nor a number                                 #-257 \ warning: is not unique                                  #-258 \ stack imbalance                                         #-259 \ trying to load from block 0                             #-260 \ wrong digit                                             #-261 \ deferred word is uninitialized                          #-262 \ assertion failed                                        #-263 \ execution only                                          #-264 \ definition not finished                                 #-265 \ loading only                                            #-266 \ off current editing block                               #-267 \ warning: not present, though needed                     #-268 \ needed, but not located                                 #-269 \ relative jump too long                                  #-270 \ text not found                                          ( System error codes #-271..#-285 )                             #-271 \ immediate word not allowed in this structure            #-272 \ array index out of range                                #-273 \ invalid assembler condition                             #-274 \ command line history overflow                           #-275 \ wrong number                                            #-276 \ dictionary reached the zone of memory banks             #-277 \ needed, but not indexed                                 #-278 \ empty block found: quit indexing                        #-279 \ user area overflow                                      #-280 \ user area underflow                                     #-281 \ escaped strings search-order overflow                   #-282 \ escaped strings search-order underflow                  #-283 \ assembly label number out of range                      #-284 \ assembly label number already used                      #-285 \ too many unresolved forward assembly label references   ( G+DOS error codes #-1000..#-1014 )                            #-1000 \ G+DOS: Nonsense in G+DOS                               #-1001 \ G+DOS: Nonsense in GNOS                                #-1002 \ G+DOS: Statement end error                             #-1003 \ G+DOS: Break requested                                 #-1004 \ G+DOS: Sector error                                    #-1005 \ G+DOS: Format data lost                                #-1006 \ G+DOS: Check disk in drive                             #-1007 \ G+DOS: No +SYS file                                    #-1008 \ G+DOS: Invalid file name                               #-1009 \ G+DOS: Invalid station                                 #-1010 \ G+DOS: Invalid device                                  #-1011 \ G+DOS: Variable not found                              #-1012 \ G+DOS: Verify failed                                   #-1013 \ G+DOS: Wrong file type                                 #-1014 \ G+DOS: Merge error                                     ( G+DOS error codes #-1015..#-1029 )                            #-1015 \ G+DOS: Code error                                      #-1016 \ G+DOS: Pupil set                                       #-1017 \ G+DOS: Invalid code                                    #-1018 \ G+DOS: Reading a write file                            #-1019 \ G+DOS: Writing a read file                             #-1020 \ G+DOS: O.K. G+DOS                                      #-1021 \ G+DOS: Network off                                     #-1022 \ G+DOS: Wrong drive                                     #-1023 \ G+DOS: Disk write protected                            #-1024 \ G+DOS: Not enough space on disk                        #-1025 \ G+DOS: Directory full                                  #-1026 \ G+DOS: File not found                                  #-1027 \ G+DOS: End of file                                     #-1028 \ G+DOS: File name used                                  #-1029 \ G+DOS: No G+DOS loaded                                 ( G+DOS error codes #-1030..#-1031 )                            #-1030 \ G+DOS: STREAM used                                     #-1031 \ G+DOS: CHANNEL usederror codes #-1128..#-1142 )                               #-1128 \ OS: OK                                                 #-1129 \ OS: NEXT without FOR                                   #-1130 \ OS: Variable not found                                 #-1131 \ OS: Subscript wrong                                    #-1132 \ OS: Out of memory                                      #-1133 \ OS: Out of screen                                      #-1134 \ OS: Number too big                                     #-1135 \ OS: RETURN without GO SUB                              #-1136 \ OS: End of file                                        #-1137 \ OS: STOP statement                                     #-1138 \ OS: Invalid argument                                   #-1139 \ OS: Integer out of range                               #-1140 \ OS: Nonsense in BASIC                                  #-1141 \ OS: BREAK - CONT repeats                               #-1142 \ OS: Out of DATA                                        ( OS error codes #-1143..#-1154 )                               #-1143 \ OS: Invalid file name                                  #-1144 \ OS: No room for line                                   #-1145 \ OS: STOP in INPUT                                      #-1146 \ OS: FOR without NEXT                                   #-1147 \ OS: Invalid I/O device                                 #-1148 \ OS: Invalid colour                                     #-1149 \ OS: BREAK into program                                 #-1150 \ OS: RAMTOP no good                                     #-1151 \ OS: Statement lost                                     #-1151 \ OS: Invalid stream                                     #-1152 \ OS: FN without DEF                                     #-1153 \ OS: Parameter error                                    #-1154 \ OS: Tape loading error                                                                                                                                                                 ( ?compiling ?executing abort" warning" )                       [unneeded] ?compiling                                           ?\ : ?compiling  ( -- )  compiling? 0= -14 ?throw  ;  exit      [unneeded] ?executing                                           ?\ : ?executing  ( -- )  compiling? -263 ?throw  ;  exit        need ?(  [unneeded] abort" ?(                                   [defined] abort-message ?\ 2variable abort-message              : (abort")  ( n -- )                                              r> count rot if  abort-message 2! -2 throw  then + >r  ;      : abort"  ( Compilation: "ccc<quote>" -- )                        postpone (abort") ,"  ; immediate compile-only  exit  ?)      need string-parameter                                           : (warning")  ( f -- )                                            string-parameter rot if  type  else  2drop  then  ;           : warning"  \ Compilation: ( "ccc<quote>" -- )                    postpone (warning") ,"  ; immediate compile-only              ( error>ordinal error>line errors-block .throw-message )        : error>ordinal  ( -n1 -- +n2 )                                   abs dup 256 < ?exit  \ standard                                     dup 1000 < if  [ 256 91 - ] literal - exit  then  \             [ 1000 286 - 256 91 - + ] literal -   ;                   : error>line  ( -n1 -- n2 )                                       error>ordinal dup >r                                            begin  dup dup l/scr / - r@ <>  while  1+  repeat  rdrop  ;   need .line                                                      variable errors-block                                           s" Standard error codes" located errors-block !                 : .throw-message  ( n -- )                                        errors-block @                                                  if    cr error>line errors-block @ .line space                  else  .throw#  then  ;                                        ' .throw-message ' .throw defer!                                ( catch )                                                       : catch  ( xt -- exception# | 0 )                                 sp@ >r          ( xt )  \ save data stack pointer               catcher @ >r    ( xt )  \ save previous catcher                 rp@ catcher !   ( xt )  \ set current catcher                   execute         ( )     \ `execute` returns if no `throw`       r> catcher !    ( )     \ restore previous catcher              r> drop         ( )     \ discard saved stack pointer           0  ;            ( 0 )   \ normal completion, no error                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( +perform base-execute call don't executions )                 [unneeded] +perform  ( a n -- )                                 ?\ : +perform  ( a n -- )  cells + perform  ;  exit             [unneeded] base-execute                                         ?\ : base-execute  ( xt n -- )  base @ >r execute r> base !  ;  need ?(  [unneeded] call ?(                                     code call  ( a -- )                                               E1 c,  C5 c,  CD c, >mark  C1 c,  DD c, 21 c, next , jpnext,                        >resolve E9 c,  end-code  exit ?)         [unneeded] don't ?(                                             : don't  ( n1 n2 -- | n1 n2 )                                     2dup = if  2drop unnest unnest  then  ; compile-only  exit ?) [unneeded] executions ?(  need 2rdrop                           : executions  ( xt n -- )                                         2>r begin   2r@   while                                               2r> 1- 2>r execute  repeat  drop 2rdrop  ;  exit ?)     ( ?repeat recurse ?? )                                          need ?(  [unneeded] ?repeat ?(  need cs-pick                    : ?repeat  ( Compilation: dest -- dest )                                   ( Execution:   f -- )                                  0 cs-pick   postpone until  ; immediate  exit ?)              [unneeded] recurse ?(                                           : recurse  ( -- )                                                 latestxt compile,  ; immediate compile-only  exit ?)          [unneeded] ?? ?(                                                : ??  ( Compilation: "name" -- ) ( Runtime: f -- )                postpone if                                                     defined ( nt | 0 ) ?dup 0= -13 ?throw                           name>immediate? ( xt f ) if  execute  else  compile,  then      postpone then                                                   ;  immediate compile-only                                                                                                     ( retry ?retry ?leave )                                         need ?(                                                         [unneeded] retry ?(  need name>body                             : retry  ( Compilation: -- ) ( Run-time: -- )                     latest name>body postpone again                                 ; immediate compile-only  exit ?)                             [unneeded] ?retry ?(  need retry                                : ?retry  ( Compilation: -- ) ( Run-time: f -- )                  postpone if  postpone retry  postpone then                      ; immediate compile-only  exit ?)                             [unneeded] ?leave ?(                                            code ?leave  ( f -- ) ( R: loop-sys -- | loop-sys )               E1 c, 78 04 + c, B0 05 + c, C2 c, ' leave , jpnext,             end-code ?)                                                                                                                                                                                   ( associative-case: )                                           need create:                                                    : associative-case: ( "name" -- )                                 create:                                                         does> ( n -- ) ( n pfa ) cell+  \ move past `lit`               begin   2dup @ dup 0= >r  ( n a n n')                                   =  r> or  0= ( n a f )                                  while   ( n a )  [ 3 cells ] literal +  \ no match              repeat  nip cell+ perform  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( begincase )                                                   need cs-push  need cs-pop                                       : begincase  ( -- )                                               postpone case  postpone begin  cs-push                          ; immediate compile-only                                      : (repeatcase)  ( -- )                                            cs-pop  postpone again  postpone endcase  ;                   : repeatcase  ( -- )                                              postpone drop  postpone (repeatcase)                            ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                      ( [: ;] )                                                       : [:  \ Compilation: ( -- orig xt )                               postpone ahead  latestxt here lastxt !                          docolon [ also assembler ] call, [ previous ]                   ; immediate compile-only                                      : ;]  \ Compilation: ( orig xt1 -- )                              lastxt !  postpone exit  dup >resolve                           cell+ postpone literal  ; immediate compile-onlyswitcher :switch <switch )                                    need link@  need link,  need pick                               : switcher  ( i*x n head -- j*x )                                 dup cell+ @ >r  \ save default xt                               begin  link@ ?dup while  ( n a )                                  2dup cell+ @ = if   \ match                                       nip cell+ cell+ perform  rdrop exit                           then                                                          repeat  r> execute  ;                                         : :switch  ( xt "name" -- head )                                  create  >mark swap ,  does>  ( n -- )  ( n pfa ) switcher  ;  : <switch  ( head xt n -- head )  2 pick link,  , ,  ;                                                                                                                                                                                                                                                                          ( [+switch [switch switch] runs run: )                          [unneeded] [+switch                                             ?\ need >body  : [+switch  ( "name" -- head )  ' >body  ;  exit need ?(                                                         [unneeded] [switch [unneeded] switch] and ?(  need switcher     : [switch  ( "name1" "name2" -- head )                            create  >mark ' ,  does>  ( n -- )  ( n pfa ) switcher  ;     need alias  ' drop alias switch]  ( head -- ) ?)                [unneeded] runs ?(  need <switch                                : runs  ( head n "name" -- head )  ' swap <switch  ; exit ?)    [unneeded] run: ?(  need evaluate  need <switch  need :noname   : run:  ( head n "ccc<semicolon>" -- head )                       :noname ';' parse evaluate postpone ; ( xt )                    swap <switch  ;  exit ?)                                                                                                                                                                      ( -branch +branch )                                             need ?(                                                         [unneeded] -branch ?(                                           code -branch  ( n -- )                                            E1 c,  CB c, 7C c,  C2 c, ' branch ,  03 c, 03 c,               jpnext,  end-code  exit ?)                                    [unneeded] +branch ?(                                           code +branch  ( n -- )                                            E1 c,  CB c, 7C c,  CA c, ' branch ,  03 c, 03 c,               jpnext,  end-code  exit ?)                                                                                                                                                                                                                                                                                                                                                                                                                                    ( case )                                                        [defined] alias dup 0=                                            ?\   ' 0 alias case                                             ?\  0 constant case                                             immediate compile-only                                        : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      [defined] alias dup 0=                                            ?\ ' else alias endof  ( orig1 -- orig2 )                       ?\ : endof  ( orig1 -- orig2 ) postpone else  ;                 immediate compile-only                                        : endcase                                                         postpone drop  begin  ?dup  while  postpone then  repeat        ; immediate compile-only                                                                                                      ( case )                                                        0 constant case  immediate compile-only                         : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      : endof  ( orig1 -- orig2 )                                       postpone else  ; immediate compile-only                       : endcase                                                         postpone drop  begin  ?dup  while  postpone then  repeat        ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                      ( eforth-case )                                                 0 constant case  immediate compile-only                         : of                                                              postpone over postpone = postpone if  postpone drop             ; immediate compile-only                                      : endof  ( orig1 -- orig2 )                                       postpone else  ; immediate compile-only                       : (endcase) ( 0 orig1..orign -- )                                 begin  ?dup  while  postpone then  repeat  ;                  : endcase                                                         ( Compilation: 0 orig1..orign -- )                              ( Run-time: x -- )                                              postpone drop (endcase)  ; immediate compile-only                                                                                                                                                                                                             ( 94-doc-case )                                                 0 constant case  immediate compile-only                         : of                                                              1+ >r                                                           postpone over  postpone =   \ copy and test case value          postpone if                 \ add orig to control flow stack    postpone drop               \ discards case value if =          r>  ; immediate compile-only                                  : endof                                                           >r  postpone else  r>  ; immediate compile-only               : endcase                                                         postpone drop  \ discard case value                             0 ?do  postpone then  loop  ; immediate compile-only                                                                                                                                                                                                          ( abersoft-case )                                               : case                                                            csp @ !csp  ; immediate compile-only                          : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      : endof                                                           postpone else  ; immediate compile-only                       : endcase                                                         postpone drop                                                   begin  sp@ csp @ <>  while  postpone then  repeat               csp !  ;  immediate                                                                                                                                                                                                                                                                                                           ( between-of )                                                  need between                                                    : (between-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                    2>r dup dup 2r> between 0= if  invert  then  ;                : between-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                      postpone (between-of) postpone of  ;  immediate compile-onlyless-of greater-of )                                          need ?(  [unneeded] less-of ?(                                  [defined] nup ?\ : nup  ( x1 x2 -- x1 x1 x2 )  over swap  ;     : (less-of)  ( x1 x2 -- x1 x1 | x1 x1' )                          nup nup >= if  invert  then  ;                                : less-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 -- | x1 )                            postpone (less-of) postpone of  ;  immediate compile-only     exit ?)                                                         : (greater-of)  ( x1 x2 -- x1 x1 | x1 x1' )                       nup nup <= if  invert  then  ;                                : greater-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 -- | x1 )                         postpone (greater-of) postpone of  ; immediate compile-only                                                                                                                                   ( any-of default-of )                                           need ?(  [unneeded] any-of ?(  need any?  need pick             : (any-of)  ( x0 x1..xn n -- x0 x0 | x0 0 )                       dup 1+ pick >r any? r> tuck and  ;                            : any-of  ( Compilation: -- of-sys )                                      ( Run-time: x0 x1..xn n -- | x0 )                       postpone (any-of) postpone of  ; immediate compile-only       exit ?)                                                         : default-of  ( -- )                                              postpone dup postpone of  ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                            ( within-of or-of )                                             need ?(  [unneeded] within-of ?(  need within                   : (within-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                     2>r dup dup 2r> within 0= if  invert  then  ;                 : within-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                       postpone (within-of) postpone of  ; immediate compile-only    exit ?)                                                         : (or-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                         2>r dup dup dup r> = swap r> = or 0= if  invert  then  ;      : or-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                           postpone (or-of) postpone of  ; immediate compile-only                                                                                                                                                                                                        ( cases: )                                                      : cases:  ( "name" -- orig 0 )                                    create >mark 0                                                  does>  ( selector -- ) ( selector pfa )                           true rot rot dup  ( true selector pfa pfa )                     cell+ swap @   ( true selector pfa+2 options )                  0 do  ( true selector a )                                         2dup @ =  ( true selector a f )                                 if    dup cell+ perform                                               2>r 0= 2r>  ( false selector a )  leave                   else  cell+ cell+  then                                      loop  ( true selector a | false selector a )                    rot if  perform  else  drop  then  drop  ;                   : case>  ( orig counter selector "name" -- orig counter' )        , ' compile, 1+  ;                                            : othercase>  ( orig counter "name" -- )  ' compile, swap !  ;  ( ?ccase )                                                      need alias  need char-position?                                 ' >resolve alias end?ccase  immediate compile-only              : (?ccase)  ( c ca len -- )                                       rot char-position? if  2+ cells r@ + perform  then  ;         : ?ccase                                                          postpone (?ccase) postpone ahead  ; immediate compile-onlyccase0 )                                                      need alias  need char-position?                                 ' >resolve alias endccase0  immediate compile-only              : (ccase0)  ( c ca len -- )                                       rot char-position? if    ( +n ) 3 +                                                else  2                                                         then  cells r@ + perform  ;                : ccase0                                                          postpone (ccase0) postpone ahead  ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( ccase )                                                       need char-position?                                             : endccase                                                        here cell- swap !                                               >resolve                                                        ; immediate compile-only                                      : (ccase)  ( c ca len -- )                                        rot char-position? if    ( +n ) 3 + cells r@ +                                     else  r@ cell+ cell+ @                                          then  perform  ;                           : ccase                                                           postpone (ccase)  postpone ahead  >mark                         ; immediate compile-only                                                                                                                                                                                                                                      ( -if -while -until -exit )                                     need ?(                                                         [unneeded] -if ?(  need +branch                                 : -if  ( f -- )                                                   postpone +branch >mark  ; immediate compile-only  exit ?)     [unneeded] -while ?(  need -if  need cs-swap                    : -while  ( f -- )                                                postpone -if  postpone cs-swap  ; immediate compile-only      exit ?)                                                         [unneeded] -until ?(  need +branch                              : -until  ( n -- )                                                postpone +branch <resolve  ; immediate compile-only  exit ?)  [unneeded] -exit ?(                                             code -exit  ( n -- ) ( R: nest-sys | -- nest-sys | )              E1 c,  CB c, 7C c,  C2 c, ' exit ,  jpnext,  end-code ?)                                                                      ( +if +while +until +exit )                                     need ?(                                                         [unneeded] +if ?(  need -branch                                 : +if  ( n -- )                                                   postpone -branch >mark  ; immediate compile-only  exit ?)     [unneeded] +while ?(  need +if  need cs-swap                    : +while  ( n -- )                                                postpone +if  postpone cs-swap  ; immediate compile-only      exit ?)                                                         [unneeded] +until ?(  need -branch                              : +until  ( n -- )                                                postpone -branch <resolve  ; immediate compile-only  exit ?)  [unneeded] +exit ?(                                             code +exit  ( n -- ) ( R: nest-sys | -- nest-sys | )              E1 c,  CB c, 7C c,  C2 c, ' exit ,  jpnext,  end-code ?)                                                                      ( 0if 0while 0until 0exit )                                     need ?(                                                         [unneeded] 0if ?(                                               : 0if  ( f -- )                                                   postpone ?branch >mark  ; immediate compile-only  exit ?)     [unneeded] 0while ?(  need 0if  need cs-swap                    : 0while  ( f -- )                                                postpone 0if  postpone cs-swap  ; immediate compile-only      exit ?)                                                         [unneeded] 0until ?(                                            : 0until  ( f -- )                                                postpone ?branch <resolve  ; immediate compile-only  exit ?)  [unneeded] 0exit ?(                                             code 0exit  ( f -- ) ( R: nest-sys | -- nest-sys | )              E1 c,  78 04 + c,  B0 05 + c,  CA c, ' exit ,                   jpnext, end-code  exit ?)                                     ( dfor dstep di )                                               : (dstep)  ( R: x d -- x d' )                                     r>  \ save the return address                                   2r> 2dup or  \ is the index zero?                               if    -1. d+ 2>r                                                else  2drop  cell+ cell+                                        then  >r  ;                                                   : dfor  ( d -- )  postpone 2>r <mark  ; immediate compile-only  : dstep  ( -- )                                                   postpone (dstep) postpone branch <resolve                       ; immediate compile-only                                      need alias                                                      ' 2r@ alias dfor-i  ( -- d )                                                                                                                                                                                                                                    ( {if if} if> |if| )                                            need cs-roll                                                    : {if  ( -- 0 )  0  ; immediate compile-only                    : if>                                                             1+ >r postpone if  r> ; immediate compile-only                : |if|                                                            >r postpone ahead \ new orig                                    1 cs-roll postpone then \ resolve old orig                      r>  ; immediate compile-only                                  : if} \ end of conditional                                        >r  postpone ahead                                              1 cs-roll postpone then \ resolve old orig                      -22 postpone literal postpone throw                             r> 0 ?do  postpone then  loop  ; immediate compile-only                                                                                                                                       ( {do do} do> |do| )                                            need cs-pick  need cs-roll                                      : {do  ( c: -- dest )  postpone begin  ; immediate compile-only : do>  ( c: dest -- orig1 dest )                                  postpone if  1 cs-roll  ; immediate compile-only              : |do|  ( c: orig1 dest -- dest )                                 0 cs-pick postpone again \ resolve a copy of dest               1 cs-roll postpone then \ resolve old orig                      ; immediate compile-only                                      : do}  ( c: orig dest -- )                                        postpone again \ resolve dest                                   postpone then \ resolve orig                                    ; immediate compile-only                                                                                                                                                                                                                                      ( doer )                                                        need >body                                                      : doer-noop  ( -- )  ;                                          : doer  ( "name" -- )                                             create  ['] doer-noop >body ,  does>  ( pfa ) @ >r  ;         : (make)                                                          r> dup cell+ dup cell+                                            ( a1 a2 a2 )                                                  swap @ >body !                                                  @ ?dup if  >r  then  ;                                        variable >;and                                                  : make                                                            compiling? if     postpone (make)  here >;and ! 0 ,                        else   here ' >body ! ]  then  ; immediate         : ;and  ( -- )  postpone exit  here >;and @ !  ; immediate      : undo  ( "name" -- )  ['] doer-noop >body  ' >body !  ;        ( for step )                                                    code (step)  ( R: n -- n' )                                       2A c, rp ,                                                      5E c, 23 c, 56 c,                                               7A c, B3 c,                                                     1B c, 72 c, 2B c, 73 c,                                         C2 c, ' branch ,                                                23 c, 23 c, 22 c, rp ,                                          03 c, 03 c, jpnext,                                             end-code                                                      : for  ( n -- )  postpone >r <mark  ; immediate compile-only    : step  ( -- )                                                    postpone (step) <resolve  ; immediate compile-only            need alias                                                      ' r@ alias for-i  ( -- n )                                                                                                      ( j k )                                                         need ?(                                                         [unneeded] j ?(                                                 code j  ( -- n|u ) ( R: do-sys1 do-sys2 -- do-sys1 do-sys2 )      2A c, rp ,  11 c, 3 cells ,  19 c,  C3 c, ' i 3 + ,  end-code ?)                                                              [unneeded] k ?(                                                 code k  ( -- n|u )                                                ( R: loop-sys1..loop-sys3 -- loop-sys1..loop-sys3 )             2A c, rp ,  11 c, 6 cells ,  19 c,  C3 c, ' i 3 + ,  end-code ?)                                                                                                                                                                                                                                                                                                                                                                                              ( options[ )                                                    variable (default-option)                                       variable #options                                               : default-option ( "name" -- )  ' (default-option) !  ;         : (options)  ( i*x x -- j*x )                                     false swap  ( false x ) \ default flag returned by the loop     r> dup @ >r   \ set the new exit point                          cell+ dup >r  \ save the address of the default option xt       dup cell+ @  ( false x a n )                                    0 do                                                              cell+ cell+ 2dup @ =  ( false x a' f )  \ match?                if  nip nip cell+ perform  true 0 0  leave then               loop  ( f x1 x2 )  2drop                                        if    rdrop       \ match, so discard the default option        else  r> perform  \ no match, so execute the default option     then  ;   -->                                                 ( options[ )                                                    : options[                                                        (default-option) off        \ assume no default option          #options off                \ init number of options            postpone (options)          \ compile run-time handler          >mark >mark >mark           ( a1 a2 a3 )                        postpone [                  \ start interpreting options        ; immediate compile-only                                      : option  ( x "name" -- )                                         ,  ' compile,  1 #options +!  ;                               : ]options  ( a1 a2 a3 -- )                                       #options @ swap !           \ store number of options           (default-option) @ swap !   \ store default option xt           >resolve                    \ store exit point                  ]  ;                                                                                                                          ( positional-case: )                                            need create:                                                    : positional-case:  ( "name" -- )                                 create:                                                         does>   ( n -- )                                                        ( n pfa ) swap cells + performselect )                                                      0 constant select immediate                                     0 constant cond immediate                                       : thens  begin  ?dup while  postpone then  repeat  ;            : endselect  postpone drop  thens  ; immediate                  : when                                                            postpone else  >r >r >r  thens  r> r> r>  postpone drop         ; immediate                                                   : continue                                                        >r >r >r thens  0  r> r> r>  ; immediate                      : equal                                                           postpone over  postpone -  postpone if  ; immediate           : (range)  ( x0 x1 x2 -- x0 f )                                   2>r dup 2r> over - -rot - u<  ;                               : range                                                           postpone (range)  postpone if  ; immediate  -->               ( select-test )                                                 : select-test ( n -- )                                            space                                                           select                                                            cond  $00 $1F range                                                   $7F     equal  when  ." Control char "       else         cond  $20 $2F range                                                   $3A $40 range                                                   $5B $60 range                                                   $7B $7E range  when  ." Point "              else         cond  $30 $39 range  when  ." Digit "              else         cond  $41 $5A range  when  ." Upper case letter "  else         cond  $61 $7A range  when  ." Lower case letter "  else         ." Not a character "                                          endselect  ;  -->                                                                                                             ( select-test )                                                 cr cr .( Running 'select' test...)                              cr  'a'  .(   ) dup emit  select-test                           cr  ','  .(   ) dup emit  select-test                           cr  '8'  .(   ) dup emit  select-test                           cr  '?'  .(   ) dup emit  select-test                           cr  'K'  .(   ) dup emit  select-test                           cr  0              dup 3 .r  select-test                        cr  127            dup 3 .r  select-test                        cr  128            dup 3 .r  select-test                                                                                                                                                                                                                                                                                                                                                                                                                        ( cs-pick cs-roll cs-swap cs-drop )                             need alias  need pick  need roll                                ' pick alias cs-pick                                            ' roll alias cs-roll                                            ' swap alias cs-swap                                            ' drop alias cs-dropcs-pick cs-roll cs-drop cs-mark cs-test cs-push cs-pop )        variable cf0                                                    : !cfs ( -- )  sp@ cf0 ! ;  !cfs                                : #cs ( -- n )                                                    sp@ cf0 @ - negate [ 1 cells ] literal / 1-                     0 max ( handle empty stack) ;                                 : cs-pick  pick ( +bal) ;                                       : cs-roll  roll ;                                               : cs-drop  drop ( -bal) ;                                       : cs-mark  0 ( +bal) ;                                          : cs-test  dup 0<> ;                                            : cs-push  #cs -roll ;                                          : cs-pop   #cs roll ;                                                                                                                                                                                                                                         ( cs-pick cs-roll )                                             : cs-pick                                                         ( destu ... orig0|dest0 u -- destu ... orig0|dest0 destu )      dup 2* 1+ pick    \ check destu; dest type is 0                 if -22 throw then    \ control structure mismatch               dup >r  0 swap    \ destu ... orig0|dest0 0 u  r: u             1+ 0 do i 2* 1+ pick or loop                                    1 invert and if -22 throw then  \ ored types should be 0        r> 2* 1+ pick 0                                                 bal 1+ to bal ; compile-only                                  : cs-roll                                                         dup >r  0 swap    \ destu ... orig0|dest0 0 u  r: u             1+ 0 do i 2* 1+ pick or loop                                    1 invert and if -22 throw then  \ ored types should be 0        r@ 2* 1+ roll                                                   r> 2* 1+ roll ; compile-only                                  ( switch: switch :clause )                                      [unneeded] switch:                                              ?\ : switch:  ( "name" -- )  wordlist constant  ;  exit         need ?(                                                         [unneeded] switch [unneeded] :clause and ?(                     need search-wordlist  need nextname  need >bstring              : switch  ( x switch -- )                                         swap >bstring rot search-wordlist if  execute  then  ;        : :clause  ( x switch -- )                                        get-current >r set-current  >bstring nextname :                             r> set-current  ;  exit ?)                                                                                                                                                                                                                                                                                                                                                        ( cswitch :cclause 2switch :2clause )                           need ?(                                                         [unneeded] cswitch [unneeded] :cclause and ?(                   need search-wordlist  need nextname  need >bstring              : cswitch  ( c switch -- )                                        swap c>bstring rot search-wordlist if  execute  then  ;       : :cclause  ( c switch -- )                                       get-current >r set-current  c>bstring nextname :                            r> set-current  ;  exit ?)                        [unneeded] 2switch [unneeded] :2clause and ?(                   need search-wordlist  need nextname  need 2>bstring             : 2switch  ( xd switch -- )                                       swap 2>bstring rot search-wordlist if  execute  then  ;       : :2clause  ( xd switch -- )                                      get-current >r set-current  2>bstring nextname :                            r> set-current  ;  exit ?)                        ( thiscase )                                                    need alias                                                      : ifcase  ( x f -- )                                              postpone if  postpone drop  ; immediate compile-only          : exitcase  ( -- )                                                postpone exit  postpone then  ; immediate compile-only        ' dup alias thiscase  ( x -- x x )                              ' drop alias othercase  ( n -- )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( times dtimes )                                                need ?(                                                         [unneeded] times ?(                                             variable times-xt  \ the _xt_ executed by `times`               : times  ( n -- )                                                 rp@ @  dup cell+ rp@ !  @ times-xt !                            0 ?do  times-xt perform  loop  ; compile-only  exit ?)        [unneeded] dtimes ?(  need dfor  need d-                        variable dtimes-xt  \ the _xt_ executed by `dtimes`             : dtimes  ( d -- )                                                rp@ @  dup cell+ rp@ !  @ dtimes-xt !                           2dup or if    1. d- dfor  dtimes-xt perform  dstep  exit                then  2drop                                             ; compile-only  exit ?)                                                                                                                                                                       ( attr attr-addr )                                              need ?(  [unneeded] attr ?(  need z80-asm need (attr-addr)      code attr ( col row -- b )                                        de pop  hl pop  l d ld  (attr-addr) call  m l ld  0 h ld#       jppushhl, end-code  exit ?)                                   [unneeded] attr-addr ?(  need z80-asm need (attr-addr)          code attr-addr ( col row -- a )                                   de pop  hl pop  l d ld  (attr-addr) call                        jppushhl, end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \ (attr-addr) \                                                 need z80-asm                                                    create (attr-addr)  ( -- a )                                      asm                                                             e a ld  \ line to a 0x00..0x17 (max 00010111)                   rrca rrca rrca  \ rotate bits left                              a e ld  \ store in d as an intermediate value                   E0 and#  \ pick up bits 11100000 (was 00011100)                 d xor  \ combine with column 0x00..0x1F                         a l ld  \ low byte now correct                                  e a ld  \ bring back intermediate result from d                 03 and#  58 xor#                                                a h ld  \ high byte correct                                     ret                                                             end-asm                                                                                                                       ( clear-block )                                                 need z80-asm                                                    code clear-block  ( column row width height -- )                  exx  0 ix ldp#  sp addix                                        #4 ix a ftx  a d ld  rrca rrca rrca  #224 and#  #6 ix orx       a e ld  d a ld  #24 and#  #64 or#  a d ld                       #2 ix c ftx  #0 ix a ftx  a add  a add  a add  a b ld           begin                                                             de push  de hl ldp  de incp  0 m ld#  bc push  c dec            nz if  0 b ld#  ldir  then                                      bc pop  de pop  d inc  d a ld  7 and#                           z if  #32 a ld#  e add  a e ld                                    nc if  d a ld  8 sub#  a d ld  then                           then                                                          step  0 hl ldp#  sp addp  #4 cells de ldp#  de addp  ldsp       exx  next ix ldp#  jpnext,  end-code                          ( color-block )                                                 need z80-asm                                                    code color-block  ( column row width height color -- )            exx  0 ix ldp#  sp addix                                        #6 ix a ftx  #22 d ld#  a add  a add  a add  a add              d rl  a add  d rl  #8 ix orx  a e ld                            #2 ix b ftx  #4 ix c ftx                                        begin                                                             de push  de hl ldp  de incp  bc push  #0 b ld#                  0 ix a ftx  a m ld  c dec                                       nz if  ldir  then                                               bc pop  hl pop  #32 de ldp#  de addp  exde                    step                                                            0 hl ldp#  sp addp  #5 cells de ldp#  de addp  ldsp             exx  next ix ldp#  jpnext,  end-code                                                                                          ( wipe-block )                                                  need z80-asm                                                    code wipe-block  ( column row width height color -- )             exx  0 ix ldp#  sp addix                                        #6 ix a ftx  a d ld  rrca rrca rrca  #224 and#  #8 ix orx       a e ld  d a ld  #24 and#  #64 or#  a d ld                       #4 ix c ftx  #2 ix a ftx  a add  a add  a add  a b ld           begin                                                             de push  de hl ldp  de incp  0 m ld#  bc push  c dec            nz if  0 b ld#  ldir  then                                      bc pop  de pop  d inc  d a ld  7 and#                           z if  #32 a ld#  e add  a e ld                                    nc if  d a ld  8 sub#  a d ld  then                           then                                                          step  -->                                                                                                                     ( wipe-block )                                                    #6 ix a ftx  #22 d ld#  a add  a add  a add  a add              d rl  a add  d rl  #8 ix orx  a e ld  #2 ix b ftx               begin                                                             de push  de hl ldp  de incp  bc push  #0 b ld#                  0 ix a ftx  a m ld  c dec                                       nz if  ldir  then                                               bc pop  hl pop  #32 de ldp#  de addp  exde                    step                                                            0 hl ldp#  sp addp  #5 cells de ldp#  de addp  ldsp             exx  next ix ldp#                                               jpnext,  end-code                                                                                                                                                                                                                                                                                                             ( circle )                                                      need z80-asm                                                    create circle-plot  ( -- a )                                      asm                                                             hl push  bc push  de push                                       ' plot call  \ XXX TODO                                         de pop  bc pop  hl pop  ret                                     end-asm                                                       code circle  ( gx gy radius -- )                                  0 h ld#  l a ld                                                 exx  cpl  a c ld  FF b ld#                                      bc incp  \ bc' is -radius                                       end-code                                                                                                                                                                                                                                                      ( cls-chars0 )                                                  need z80-asm                                                    code cls-chars0  ( -- )                                           bc push                                                         6 b ld#                                                         begin   bc push  57FF hl ldp#                                           begin   20 c ld#  a and                                                 begin   nop  m sla                                                      nop  m rlc                                                      nop  m sla                                                      nop  hl decp  c dec  z until                            3F a ld#  h cp  z until                                 bc pop  step                                            bc pop  jpnext,                                                 end-code                                                                                                                      ( cls-chars1 )                                                  need z80-asm                                                    code cls-chars1  ( -- )                                           bc push                                                         08 b ld#                                                        begin                                                             4000 hl ldp#  \ screen bitmap address                           begin                                                             m srl  hl incp                                                  m sla  hl incp                                                  58 a ld#  h cp                                                z until                                                       step                                                            bc pop  jpnext,  end-code                                                                                                                                                                     ( horizontal-curtain )                                          need z80-asm                                                    code horizontal-curtain  ( b -- )                                 de pop  bc push                                                 e a ld  5800 de ldp#  5AFF hl ldp#                              0C b ld#                                                        begin   bc push  20 b ld#                                               begin   a m ld  de stap                                                 bc push  02 b ld#                                               begin bc push  FF b ld#  begin  step                                  bc pop  step                                              bc pop  de incp  hl decp  step                          bc pop  step                                            bc pop  jpnext,                                                 end-code                                                                                                                      ( vertical-curtain )                                            need z80-asm                                                    code vertical-curtain  ( b -- )                                   de pop  bc push                                                 e a ld  5800 de ldp#  5AFF hl ldp#  10 b ld#                    begin   bc push  18 b ld#  de push  hl push                             begin   a m ld  de stap  bc push  02 b ld#                              begin   bc push  FF b ld#  begin  step                                  bc pop  step                                            20 b ld#                                                        begin  de incp  hl decp  step                                   bc pop  step                                            hl pop  de pop  bc pop  de incp  hl decp  step          bc pop  jpnext,  end-code                                                                                                                                                                     ( nonfull-display full-display save-display restore-display )   : nonfull-display  ( -- )  2 23659 c!  ;                        : full-display  ( -- )  0 23659 c!  ;                           : save-display  ( -- ) ( R: -- col row )                          r> xy 2>r >r save-mode nonfull-display  ;                     : restore-display  ( -- ) ( R: col row -- )                       display full-display restore-mode  r> 2r> at-xy >rg-emit g-type )                                               need z80-asm  need g-emit-routine  need g-emit-udg              need os-chars  need os-coords  need g-emitted                   code (g-emit)  ( c -- )                                           hl pop  l a ld                                                  bc push                                                         os-coords bc ftp                                                os-chars de ftp                                                 g-emit-routine call                                             bc pop  next ix ldp#  jpnext,                                   end-code                                                      : g-emit  ( c -- )                                                dup 127 > if  g-emit-udg  else  (g-emit)  then                  g-emitted  ;                                                  : g-type  ( ca len -- )                                           bounds ?do  i c@ g-emit  loop  drop  ;                        ( g-cr g-emitted )                                              need g-x  need g-y                                              need g-at-x  need g-at-y                                        need c+!  need c-!                                              : g-cr  ( -- )                                                    0 g-at-x  8 (g-y) c-!  g-y 6 > ?exit  191 g-at-y  ;           : g-emitted  ( -- )                                               8 (g-x) c+!  g-x [ 255 6 - ] literal < ?exit  g-crg-emit-0udg )                                                 need z80-asm  need g-emit-routine  need os-udg  need os-coords  code g-emit-0udg  ( gx gy b -- )                                  hl pop  l a ld                                                  bc push                                                         os-coords bc ftp                                                os-udg de ftp                                                   g-emit-routine call                                             bc pop  next ix ldp#  jpnext,                                   end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( g-emit-udg )                                                  need z80-asm  need g-emit-routine  need os-udg  need os-coords  [defined] first-udg ?\ #128 constant first-udg                  code g-emit-udg  ( c -- )                                         hl pop  l a ld  first-udg sub#                                  bc push                                                         os-coords bc ftp                                                os-udg de ftp                                                   g-emit-routine call                                             bc pop  next ix ldp#  jpnext,                                   end-code                                                                                                                                                                                                                                                                                                                                                                                      ( g-emit-routine )                                              need z80-asm  need (pixel-addr)                                 create g-emit-routine  ( -- a )                                   asm                                                             0 h ld#  a l ld  hl addp  hl addp  hl addp  de addp             hl push  ix pop  bc hl ldp  hl push  8 c ld#                    begin                                                             hl pop  h dec  hl push  h inc                                   bc push  hl bc ldp  (pixel-addr) call  bc pop                   a b ld  a xor  b or  0 ix a ftx                                 nz if   exde  0 h ld#  a l ld  8 a ld#  b sub  a b ld                   begin  hl addp  step  exde                                      m a ld  d xor  a m ld                                           hl incp  e a ld  then                                   m xor  a m ld  ix incp  c dec                                 z until  hl pop  ret  end-asm                                 ( g-x g-y g-xy g-at-x g-at-y g-at-xy g-home )                   need os-coords  need os-coordx  need os-coordy  need alias      ' os-coords alias (g-xy)                                        ' os-coordx alias (g-x)                                         ' os-coordy alias (g-y)                                         : g-x  ( -- gx )  (g-x) c@  ;                                   : g-y  ( -- gy )  (g-y) c@  ;                                   : g-xy  ( -- gx gy )  g-x g-y  ;                                : g-at-x  ( gx -- )  (g-x) c!  ;                                : g-at-y  ( gy -- )  (g-y) c!  ;                                : g-at-xy  ( gx gy -- )  g-at-y g-at-x  ;                       : g-home  ( -- )  (g-xy) off  ;                                                                                                                                                                                                                                                                                                 ( rdraw176 )                                                    need z80-asm,                                                   code rdraw176  ( gx gy -- )                                       h pop, d pop, b push, d b ldp,                                  1 e ld#,                                                        b 7 bit,  \ negative gx?                                        nz? rif  c a ld, neg, -1 e ld#, a c ld,  rthen  \ negative gx   l b ld,   \ B = gy                                              1 d ld#,                                                        h 7 bit,  \ negative gy?                                        nz? rif  b a ld, neg, -1 d ld#, a b ld,  rthen  \ negative gy   24BA call, \ alternative entry to the DRAW-LINE ROM routine     b pop,  \ restore Forth IP                                      jpnext, end-code                                                                                                                                                                              ( rdraw )                                                       need z80-asm,  need l:  need os-coords  need (pixel-addr)       code rdraw  ( gx gy -- )                                          h pop, d pop, b push, d b ldp,                                  1 e ld#,  \ default positive sign of gx                         b 7 bit,  \ negative gx?                                        nz? rif  c a ld, neg, -1 e ld#, a c ld,  rthen  \ negative gx   l b ld,   \ B = gy                                              1 d ld#,  \ default positive sign of gy                         h 7 bit,  \ negative gy?                                        nz? rif  b a ld, neg, -1 d ld#, a b ld,  rthen  \ negative gy   c a ld, b cp, c? rif                                            c l ld, d push, a xor, a e ld, 00 l# jr,  rthen                 c or, z? ?ret, b l ld, c b ld, d push, 00 d ld#,                00 l: b h ld, b a ld, rra,                                    -->                                                             ( rdraw )                                                         rbegin  l add, 01 l# c? ?jr, h cp, 02 l# c? ?jr,                01 l: h sub, a c ld, exx, b pop, b push, 03 l# jr,              02 l: a c ld, d push, exx, b pop,                               03 l:                                                           os-coords h ftp, b a ld, h add, a b ld, c a ld, a inc, l add,   05 l# c? ?jr,                                                   04 l: a dec, a c ld,                                            (pixel-addr) call, 22EC 07 + call, exx, c a ld, rstep           d pop, ret,  05 l: 04 l# z? ?jr, b pop, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                      ( x1 incx y1 incy y )                                           2variable x1  2variable incx                                    2variable y1  2variable incyadraw176 )                                                    need plot176  need os-coordx  need os-coordy                    need x1  need incx  need y1  need incy                          : adraw176  ( gx gy -- )                                          [ os-coordy ] literal c@ dup 0 swap y1 2! - dup abs rot         [ os-coordx ] literal c@ dup 0 swap x1 2! - dup abs rot         max >r dup 0<  \ negative xdiff?                                if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incx 2! drop dup 0<  \ negative ydiff?                          if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incy 2! drop r> 1+ 0                                            do  x1 @ y1 @ plot176                                               x1 2@ incx 2@ d+ x1 2!                                          y1 2@ incy 2@ d+ y1 2!  loop  ;                           ( aline176 )                                                    need set-save-pixel176  need os-coordx  need os-coordy          need x1  need incx  need y1  need incy                          : aline176  ( gx gy -- )                                          [ os-coordy ] literal c@ dup 0 swap y1 2! - dup abs rot         [ os-coordx ] literal c@ dup 0 swap x1 2! - dup abs rot         max >r dup 0<  \ negative xdiff?                                if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incx 2! drop dup 0<  \ negative ydiff?                          if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incy 2! drop r> 1+ 0                                            do  x1 @ y1 @ set-save-pixel176                                     x1 2@ incx 2@ d+ x1 2!                                          y1 2@ incy 2@ d+ y1 2!  loop  ;                           ( ocr )                                                         need z80-asm  need ocr-chars                                    code ocr  ( col line -- n )                                       de pop  hl pop  bc push                                         l b ld  e c ld  ocr-charset fthl                                c a ld  rrca  rrca  rrca  E0 and#  b xor  a e ld                c a ld  18 and#  40 xor#  a d ld                                0 de stp |mark 0 unresolved !                                   ocr-chars fta  a b ld                                           begin                                                             bc push  hl push                                                0 de ldp#  \ restore the screen address                         |mark 0 unresolved @ !                                      -->                                                                                                                                                                                             ( ocr )                                                             08 b ld# \ scans                                                begin                                                             de ftap  m xor  \ scan match?                                   here jrnz >relmark 1 unresolved !                               d inc  hl incp  \ update the pointers                         step  \ next scan                                               bc pop  bc pop                                                  ocr-chars fta  b sub  a b ld                                    ocr-first fta  b add  a b ld                                    here jr >relmark 2 unresolved !                                 1 unresolved @ >relresolve                                      hl pop  0008 de ldp#  de addp  bc pop                         step                                                            2 unresolved @ >relresolve  0 h ld#  b l ld                     bc pop  jppushhl,  end-code                                   ( ocr-charset ocr-first ocr-chars ascii-ocr udg-ocr )           variable ocr-charset                                            variable ocr-first                                              variable ocr-chars                                              need os-chars  need os-udg                                      : ascii-ocr  ( -- )                                               os-chars @ 256 + ocr-charset !                                  32 ocr-first !                                                  95 ocr-chars !  ;                                             : udg-ocr  ( n -- )                                               os-udg @ ocr-charset !                                          128 ocr-first !                                                 ocr-chars !  ;                                                19 udg-ocr  \ default                                                                                                                                                                           \ (pixel-addr) slow-(pixel-addr) \                              [defined] (pixel-addr) ?\ defer (pixel-addr)  ( -- a )          create slow-(pixel-addr)  ( -- a )                                asm                                                             3E c, BF c,   \ ld a,191 ; max Y coordinate                     90 00 + c,    \ sub b                                           C3 c, 22B0 ,  \ jp $22B0 ; and return                           end-asm                                                       ' slow-(pixel-addr) ' (pixel-addr) defer!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \ (pixel-addr) fast-(pixel-addr) \                              need z80-asm,                                                   [defined] (pixel-addr) ?\ defer (pixel-addr)  ( -- a )          create fast-(pixel-addr)  ( -- a )                                asm                                                             BF a ld#,  b sub,                                               a b ld, rra, scf, rra, a and, rra,                              b xor, F8 and#, b xor, a h ld,                                  c a ld,                                                         rlca, rlca, rlca,  b xor, C7 and#,                              b xor, rlca, rlca,                                              a l ld,                                                         c a ld, 07 and#,                                                ret,                                                            end-asm                                                       ' fast-(pixel-addr) ' (pixel-addr) defer!                       \ (pixel-addr176) \                                             create (pixel-addr176)  ( -- a )                                  asm                                                             3E c, #175 c,   \ ld a,175 ; max Y coordinate in BASIC          90 00 + c,      \ sub b                                         C3 c, 22B0 ,    \ jp $22B0 ; and return                         end-asmpixel-addr176 )                                               need (pixel-addr176)                                            code pixel-addr176  ( gx gy -- n a )                              E1 c,  D1 c,            \ pop hl / pop de                       C5 c,                   \ push bc                               40 05 + c,              \ ld b,l ; b=gy                         48 03 + c,              \ ld c,e ; c=gx                         CD c, (pixel-addr176) , \ call pixel_addr176                    C1 c,                   \ pop bc                                16 c, 0 c,  58 07 + c,  \ ld d,0 / ld e,a                       C3 c, pushhlde ,        \ jp pushhlde                           end-code                                                                                                                                                                                                                                                                                                                      ( pixel-addr )                                                  need (pixel-addr)                                               code pixel-addr  ( gx gy -- n a )                                 E1 c,  D1 c,            \ pop hl / pop de                       C5 c,                   \ push bc                               40 05 + c,              \ ld b,l ; b=gy                         48 03 + c,              \ ld c,e ; c=gx                         CD c, (pixel-addr) ,    \ call pixel_addr                       C1 c,                   \ pop bc                                16 c, 0 c,  58 07 + c,  \ ld d,0 / ld e,a                       C3 c, pushhlde ,        \ jp pushhlde                           end-code                                                                                                                                                                                                                                                                                                                      ( plot plot176 )                                                need ?(                                                         [unneeded] plot ?(  need (pixel-addr)                           code plot  ( gx gy -- )                                           D9 c, E1 c, C1 c, 40 05 + c,                                    ED c, 43 c, 5C7D ,  CD c, (pixel-addr) ,                        CD c, 22EC ,  D9 c,  DD c, 21 c, next ,  jpnext,  end-code    exit ?)                                                         [unneeded] plot176 ?(                                           code plot176  ( gx gy -- )                                        D9 c, E1 c, C1 c, 40 05 + c,                                    CD c, 22E5 ,  D9 c,  DD c, 21 c, next ,  jpnext,  end-code    ?)                                                                                                                                                                                                                                                              ( set-pixel )                                                   need (pixel-addr)  need z80-asm,                                code set-pixel  ( gx gy -- )                                      h pop, d pop, b push,                                           l b ld, e c ld, (pixel-addr) call,                              a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m or, a m ld,  \ combine pixel with byte in the screen          b pop, jpnext,                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( set-pixel176 )                                                need z80-asm,  need (pixel-addr176)                             code set-pixel176  ( gx gy -- )                                   h pop, d pop, b push,                                           l b ld, e c ld, (pixel-addr176) call,                           a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m or, a m ld,  \ combine pixel with byte in the screen          b pop, jpnext,                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( set-save-pixel176 )                                           need z80-asm,  need (pixel-addr176)  need os-coords             code set-save-pixel176  ( gx gy -- )                              h pop, d pop, b push,                                           l b ld, e c ld, os-coords bc stp, (pixel-addr176) call,         a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m or, a m ld,  \ combine pixel with byte in the screen          b pop, jpnext,                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( reset-pixel )                                                 need (pixel-addr)  need z80-asm,                                code reset-pixel  ( gx gy -- )                                    h pop, d pop, b push,                                           l b ld, e c ld, (pixel-addr) call,                              a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep,                                           cpl, m and, a m ld,  \ combine pixel with byte in the screen    b pop, jpnext,                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( reset-pixel176 )                                              need (pixel-addr176)  need z80-asm,                             code reset-pixel176  ( gx gy -- )                                 h pop, d pop, b push,                                           l b ld, e c ld, (pixel-addr176) call,                           a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep,                                           cpl, m and, a m ld,  \ combine pixel with byte in the screen    b pop, jpnext,                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( toggle-pixel )                                                need (pixel-addr)  need z80-asm,                                code toggle-pixel  ( gx gy -- )                                   h pop, d pop, b push,                                           l b ld, e c ld, (pixel-addr) call,                              a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m xor, a m ld,  \ combine pixel with byte in the screen         b pop, jpnext,                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( toggle-pixel176 )                                             need (pixel-addr176)  need z80-asm,                             code toggle-pixel176  ( gx gy -- )                                h pop, d pop, b push,                                           l b ld, e c ld, (pixel-addr176) call,                           a b ld, b inc, 1 a ld#,                                         rbegin  rrca,  rstep                                            m xor, a m ld,  \ combine pixel with byte in the screen         b pop, jpnext,                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( test-pixel )                                                  need (pixel-addr)  need z80-asm,                                code test-pixel  ( gx gy -- f )                                   h pop, d pop, b push,                                           l b ld, e c ld,                                                 (pixel-addr) call,                                              a b ld, b inc, m a ld,                                          rbegin  rlca,  rstep \ rotate to bit 0                          b pop,   \ restore the Forth IP                                 1 and#,  \ pixel?                                               ' true nz? ?jp,                                                 ' false jp,                                                     end-code                                                                                                                                                                                                                                                      ( test-pixel176 )                                               need (pixel-addr176)  need z80-asm,                             code test-pixel176  ( gx gy -- f )                                h pop, d pop, b push,                                           l b ld, e c ld,                                                 (pixel-addr176) call,                                           a b ld, b inc, m a ld,                                          rbegin  rlca,  rstep \ rotate to bit 0                          b pop,   \ restore the Forth IP                                 1 and#,  \ pixel?                                               ' true nz? ?jp,                                                 ' false jp,                                                     end-code                                                                                                                                                                                                                                                      ( pixels fast-pixels )                                          need z80-asm,  [defined] pixels ?\ defer pixels  ( -- n )       code fast-pixels  ( -- n )                                        exx,  \ save Forth IP                                           4000 h ldp#, l b ld, l c ld,                                    rbegin  \ byte                                                    08 d ld#,                                                       rbegin  \ bit                                                     m rrc, c? rif  b incp,  rthen  d dec,                         z? runtil                                                       h incp, h a ld, 58 cp#,                                       z? runtil                                                       b push,                                                         exx,  \ restore Forth IP                                        jpnext,                                                         end-code  ' fast-pixels ' pixels defer!                       ( pixels slow-pixels )                                          need bits                                                       [defined] pixels ?\ defer pixels  ( -- n )                      : slow-pixels  ( -- n )  16384 6144 bits  ;                     ' slow-pixels ' pixels deferbitmap>attr-addr pixel-attr-addr )                            need ?(                                                         [defined] bitmap>attr-addr ?(                                   code bitmap>attr-addr  ( a1 -- a2 )                               E1 c,  78 04 + c,                                               0F c, 0F c, 0F c,                                               E6 c, 03 c,  F6 c, 58 c,  60 07 + c,                            jppushhl,  end-code  ?)                                       [unneeded] pixel-attr-addr ?exit                                need pixel-addr                                                 : pixel-attr-addr  ( gx gy -- a )                                 pixel-addr nip bitmap>attr-addr  ;                                                                                                                                                                                                                                                                                            ( fade )                                                        need z80-asm                                                    code fade  ( -- )                                                 bc push                                                         8 b ld#                                                         begin  5AFF hl ldp#  halt  halt                                   begin                                                             m a ld  a d ld  07 and#  nz if  a dec  then                     a e ld  a d ld  38 and#  nz if  8 sub#  then                    e or  d xor  3F and#  d xor                                     a m ld  hl decp  h a ld                                         58 cp#                                                        cy until                                                      step                                                            bc pop  jpnext,                                                 end-code                                                      ( inverted water )                                              need ?(  [unneeded] inverted ?(  need z80-asm                   code inverted  ( -- )                                             4000 hl ldp#                                                    begin   m a ld  cpl  a m ld  hl incp  h a ld  58 cp#  jrnz      jpnext,  end-code  exit ?)                                    [unneeded] water ?(  need z80-asm                               code water  ( -- )                                                bc push  20 b ld#                                               begin    57FF hl ldp#                                                    begin   m rrc  hl decp  h 6 bit  z until  step         bc pop  jpnext,  end-code ?)                                                                                                                                                                                                                                                                                                  ( scroll-1px-right )                                            need z80-asm                                                    code scroll-1px-right  ( -- )                                     bc push                                                         4000 hl ldp#  \ screen bitmap address                           C0 c ld#  \ pixel rows                                          begin                                                             m srl  hl incp  \ first char column                             1F b ld#  \ remaining columns                                   begin   m rr  hl incp  step                                     c dec                                                         z until                                                         bc pop jpnext,                                                  end-code                                                                                                                                                                                      ( scroll-1px-up )                                               need z80-asm                                                    create (scroll-1px-up)  ( -- a )                                  asm                                                             4000 hl ldp#  BF b ld#                                          begin                                                             bc push  hl de ldp  h inc  h a ld  F8 and#  h cp                z if    8 b ld#  b sub  rra  rra  rra  a h ld  0020 bc ldp#             bc addp  h a ld  rla  rla  rla  a h ld                  then    hl push  0020 bc ldp#  ldir  hl pop  bc pop           step                                                            end-asm                                                       code scroll-1px-up  ( -- )                                        bc push  \ Forth IP                                             (scroll-1px-up) call                                            bc pop  jpnext,  end-code                                     ( udg-chars 0udg> 0udg! udg! 0udg: udg: )                       need ?(  [unneeded] udg-chars ?(  need rom-font need os-udg     rom-font 'A' 8 * +          \ from                              os-udg @ 144 128 - 8 * +    \ to                                'U' 'A' - 1+ 8 *            \ count                             move                                                            ?)                                                              need os-udg  need 8*                                            [defined] first-udg ?\ #128 constant first-udg                  : 0udg>  ( n -- a )  8* os-udg @ +  ;                           : 0udg!  ( b0..b7 n -- )  0udg> dup 7 + do  i c!  -1 +loop  ;   : udg!  ( b0..b7 c -- )  first-udg - 0udg!  ;                   : udg:  ( b0..b7 c "name" -- )  dup constant  udg!  ;           : 0udg:  ( b0..b7 n "name" -- )  dup constant 0udg!  ;                                                                                                                                          ( 0udg[ udg[ )                                                  need os-udg                                                     [defined] first-udg ?\ #128 constant first-udg                  variable udg0                                                   variable current-udg                                            variable current-scan                                           [defined] binary ?\  : binary  ( -- )  2 base !  ;              : 0udg[  ( b -- )                                                 dup udg0 !  current-udg !  current-scan off  binary  ;        : udg[  ( c -- )  first-udg - 0udg[  ;                          : |  ( b -- )                                                     os-udg @ current-udg @ 8 * current-scan @ + + c!                1 current-udg +!  ;                                           : || ( b -- )                                                     |  1 current-scan +!  udg0 @ current-udg !  ;                 : ||]  ( b -- )  ||  decimal  ;                                 ( udg-block[ )                                                  need s=                                                         : udg-block[  ( c "ccc" -- )                                      begin   parse-name 2dup s" ]udg-block" compare                  while   dup 8 mod dup abort" Wrong scan length"                 repeat  ;                                                     : ]udg-block ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( udg-row[ )                                                    need os-udg  need evaluate                                      [defined] binary  ?\ : binary  ( -- )  2 base !  ;              8 constant udg-height  8 constant udg-width                     variable udg-row-height  variable udg-row-width                 variable udg-row-first-udg                                      : ?block-scan-length  ( n -- )                                    dup udg-width mod abort" Wrong block scan length"               udg-width / udg-row-width @ ?dup                                if    <> abort" Wrong block width"                              else  udg-row-width !  then  ;                                : udg-row-current-row  ( -- n )                                   udg-row-height @ udg-height /  ;                              : udg-current-scan  ( -- n )                                      udg-row-height @ udg-height mod  ;  -->                                                                                       ( udg-row[ )                                                    [defined] first-udg ?\ #128 constant first-udg                  : >udg-scan  ( n -- a )                                           udg-height * udg-current-scan +                                 udg-row-first-udg @ first-udg - udg-height * +  os-udg @ +  ; : udg-scan!  ( b n -- )  >udg-scan c!  ;                        : udg-row-scan  ( ca len -- )                                     base @ >r binary  dup ?block-scan-length                        dup udg-width / 0 do  over udg-width                              evaluate i udg-scan!  udg-width /string                       loop  2drop  r> base !  1 udg-row-height +!  ;                : ]udg-row  ( ca len -- )                                         2drop  udg-row-height @ udg-height <>                           abort" The height of the UDG row is wrong"  ;                 : udg-row-scan?  ( ca len -- f )  s" ]udg-row" compare 0<>  ;   -->                                                             ( udg-row[ )                                                    : parse-udg-row-scan  ( "ccc" -- ca len )                         begin   parse-name dup 0=                                       while   2drop refill 0= abort" UDG row scan is missing"         repeat  ;                                                     : udg-row[  ( c "ccc" -- )                                        udg-row-first-udg !  udg-row-height off  udg-row-width off      begin   parse-udg-row-scan 2dup udg-row-scan?                   while   udg-row-scan                                            repeat  ]udg-row  ;                                                                                                                                                                                                                                                                                                                                                                                                                                           ( make-block-chars )                                            need z80-asm,                                                   code make-block-chars  ( a -- )                                   h pop, b push,                                                  #128 a ld#,  \ first char is #128                               rbegin                                                            af push, a b ld, 0B3B call, af pop, a inc,                    #144 cp#, nz? runtil  \ last char is #143                       b pop, jpnext, end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( block-chars )                                                 $0F $0F $0F $0F $00 $00 $00 $00 #129 need udg! udg!             $F0 $F0 $F0 $F0 $00 $00 $00 $00 #130 udg!                       $FF $FF $FF $FF $00 $00 $00 $00 #131 udg!                       $00 $00 $00 $00 $0F $0F $0F $0F #132 udg!                       $0F $0F $0F $0F $0F $0F $0F $0F #133 udg!                       $F0 $F0 $F0 $F0 $0F $0F $0F $0F #134 udg!                       $FF $FF $FF $FF $0F $0F $0F $0F #135 udg!                       $00 $00 $00 $00 $F0 $F0 $F0 $F0 #136 udg!                       $0F $0F $0F $0F $F0 $F0 $F0 $F0 #137 udg!                       $F0 $F0 $F0 $F0 $F0 $F0 $F0 $F0 #138 udg!                       $FF $FF $FF $FF $F0 $F0 $F0 $F0 #139 udg!                       $00 $00 $00 $00 $FF $FF $FF $FF #140 udg!                       $0F $0F $0F $0F $FF $FF $FF $FF #141 udg!                       $F0 $F0 $F0 $F0 $FF $FF $FF $FF #142 udg! need 0udg>            $FF $FF $FF $FF $FF $FF $FF $FF #143 udg! 0 0udg> 8 erase       ( set-udg get-udg set-font get-font rom-font )                  [unneeded] set-udg                                              ?\ need os-udg  : set-udg  ( a -- )  os-udg !  ;  exit          [unneeded] get-udg                                              ?\ need os-udg  : get-udg  ( -- a )  os-udg @  ;  exit          [unneeded] set-font                                             ?\ need os-chars  : set-font  ( a -- )  os-chars !  ;  exit     [unneeded] get-font                                             ?\ need os-chars  : get-font  ( -- a )  os-chars @  ;  exit     [unneeded] rom-font ?\ 15360 constant rom-font  exit                                                                                                                                                                                                                                                                                                                                                                                                            ( at-accept clear-accept set-accept )                           2variable accept-xy       \ coordinates of the edited string    variable accept-buffer    \ address of the edited string        variable /accept          \ max length of the edited string     variable >accept          \ offset to the cursor position       : at-accept  ( -- )  accept-xy 2@ at-xy  ;                      : clear-accept  ( -- )                                            at-accept span @ spaces at-accept  span off  ;                : set-accept  ( ca1 len1 -- ca1' )                                clear-accept /accept @ min  ( ca1 len1' )                       dup span ! 2dup system-bank type default-bank                   dup >r                                                          accept-buffer @  ( ca1 len1' ca2 )                              smove accept-buffer @  ( ca2 )                                  r> +  ( ca1' )  ;                                                                                                             ( acceptx )                                                     need at-accept  need set-accept  need toggle-capslock           : .acceptx  ( -- )                                                accept-buffer @ >accept @ at-accept type                        1 inverse  >accept @ span @ <                                   if accept-buffer @ >accept @ + c@ emit  else  space  then       0 inverse                                                       accept-buffer @ span @ >accept @ 1+ min /string type  ;       : accept-edit  ( -- )  clear-accept init-accept  ;              : accept-left  ( -- )  ;                                        : accept-right  ( -- )  ;                                       : accept-up  ( -- )  ;                                          : accept-down  ( -- )  ;                                        : accept-delete  ( -- )  ;  -->                                                                                                                                                                 ( acceptx )                                                     create accept-commands ] noop noop noop noop noop noop          toogle-capslock accept-edit accept-left accept-right            accept-down accept-up accept-delete noop noop noop noop noop    noop noop noop noop noop noop noop noop noop noop noop noop [   : >accept-command  ( c -- a )  cells accept-commands +  ;       : accept-command  ( c -- )  >accept-command perform  ;          : init-acceptx  ( ca len -- )                                     /accept !  accept-buffer !  >accept off  xy accept-xy 2!  ;   -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( acceptx )                                                     : (acceptx) ( ca len -- len' )  2dup init-accept                  over + over ( bot eot cur )                                     begin  key dup 13 <> \ not carriage return?                     while                                                             dup 12 =  \ delete?                                             if    drop  >r over r@ < dup  \ any chars?                            if  8 dup emit  bl emit  emit  then  r> +                 else  \ printable                                                     >r  2dup <>  \ more?                                            if r@ over c!  char+  r@ emit                                   then r> drop                                              then                                                          repeat  drop nip swap -  ;                                    : acceptx ( ca len -- len' )                                      span off  ?dup 0= if  drop 0  else  (acceptx)  then  ;        ( nuf? aborted? break? )                                        [unneeded] nuf? dup                                             ?\ need aborted?  need 'cr'                                     ?\ : nuf?  ( -- f )  'cr' aborted?  ;                           need ?(  [unneeded] aborted? ?(                                 : aborted?  ( c -- f )                                            key? dup  if    key 2drop key =                                           else  nip  then  ;  exit ?)                         [unneeded] break? ?(                                            : break?  ( -- f )                                                key? dup if  key 2drop break-key?  then  ;  ?)                                                                                                                                                                                                                                                                                                                                                ( /kk kk-ports kk, kk@ )                                        [defined] /kk ?\ 4 cconstant /kk                                /kk 3 <> dup                                                    ?\ : kk,  ( bitmask port -- ) , c,  ;                           ?\ : kk@  ( a -- bitmask port ) dup c@ swap 1+ @ ;  -->         /kk 4 <> dup dup                                                ?\ need alias                                                   ?\ ' 2, alias kk,  ( bitmask port -- )                          ?\ ' 2@ alias kk@  ( a -- bitmask port )  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( kk-ports )                                                    $01 $F7FE 2constant kk-1  $02 $F7FE 2constant kk-2              $04 $F7FE 2constant kk-3  $08 $F7FE 2constant kk-4              $10 $F7FE 2constant kk-5                                        $01 $FBFE 2constant kk-q  $02 $FBFE 2constant kk-w              $04 $FBFE 2constant kk-e  $08 $FBFE 2constant kk-r              $10 $FBFE 2constant kk-t                                        $01 $FDFE 2constant kk-a  $02 $FDFE 2constant kk-s              $04 $FDFE 2constant kk-d  $08 $FDFE 2constant kk-f              $10 $FDFE 2constant kk-g                                        $01 $FDFE 2constant kk-cs  $02 $FDFE 2constant kk-z             $04 $FDFE 2constant kk-x   $08 $FDFE 2constant kk-c             $10 $FDFE 2constant kk-v                                        -->                                                                                                                                                                                             ( kk-ports )                                                    $01 $EFFE 2constant kk-0  $02 $EFFE 2constant kk-9              $04 $EFFE 2constant kk-8  $08 $EFFE 2constant kk-7              $10 $EFFE 2constant kk-6                                        $01 $DFFE 2constant kk-p  $02 $DFFE 2constant kk-o              $04 $DFFE 2constant kk-i  $08 $DFFE 2constant kk-u              $10 $DFFE 2constant kk-y                                        $01 $BFFE 2constant kk-en  $02 $BFFE 2constant kk-l             $04 $BFFE 2constant kk-k   $08 $BFFE 2constant kk-j             $10 $BFFE 2constant kk-h                                        $01 $7FFE 2constant kk-sp $02 $7FFE 2constant kk-ss             $04 $7FFE 2constant kk-m  $08 $7FFE 2constant kk-n              $10 $7FFE 2constant kk-b                                        -->                                                                                                                                                                                             ( kk-ports )                                                    need kk,                                                        40 cconstant keys                                               create kk-ports                                                 kk-1  kk,  kk-2  kk,  kk-3 kk,  kk-4 kk,  kk-5 kk,              kk-q  kk,  kk-w  kk,  kk-e kk,  kk-r kk,  kk-t kk,              kk-a  kk,  kk-s  kk,  kk-d kk,  kk-f kk,  kk-g kk,              kk-cs kk,  kk-z  kk,  kk-x kk,  kk-c kk,  kk-v kk,              kk-0  kk,  kk-9  kk,  kk-8 kk,  kk-7 kk,  kk-6 kk,              kk-p  kk,  kk-o  kk,  kk-i kk,  kk-u kk,  kk-y kk,              kk-en kk,  kk-l  kk,  kk-k kk,  kk-j kk,  kk-h kk,              kk-sp kk,  kk-ss kk,  kk-m kk,  kk-n kk,  kk-b kk,                                                                                                                                                                                                                                                                              ( kk-1# )                                                       need cenum                                                      0                                                               cenum kk-1#  cenum kk-2#  cenum kk-3# cenum kk-4# cenum kk-5#   cenum kk-q#  cenum kk-w#  cenum kk-e# cenum kk-r# cenum kk-t#   cenum kk-a#  cenum kk-s#  cenum kk-d# cenum kk-f# cenum kk-g#   cenum kk-cs# cenum kk-z#  cenum kk-x# cenum kk-c# cenum kk-v#   cenum kk-0#  cenum kk-9#  cenum kk-8# cenum kk-7# cenum kk-6#   cenum kk-p#  cenum kk-o#  cenum kk-i# cenum kk-u# cenum kk-y#   cenum kk-en# cenum kk-l#  cenum kk-k# cenum kk-j# cenum kk-h#   cenum kk-sp# cenum kk-ss# cenum kk-m# cenum kk-n# cenum kk-b#   drop                                                                                                                                                                                                                                                                                                                            ( kk-chars )                                                    create kk-chars                                                 '1' c,  '2' c,  '3' c,  '4' c,  '5' c,                          'q' c,  'w' c,  'e' c,  'r' c,  't' c,                          'a' c,  's' c,  'd' c,  'f' c,  'g' c,                          128 c,  'z' c,  'x' c,  'c' c,  'v' c,                          '0' c,  '9' c,  '8' c,  '7' c,  '6' c,                          'p' c,  'o' c,  'i' c,  'u' c,  'y' c,                          129 c,  'l' c,  'k' c,  'j' c,  'h' c,                          130 c,  131 c,  'm' c,  'n' c,  'b' c,                                                                                                                                                                                                                                                                                                                                                                                                                          ( #>kk pressed pressed? )                                       need ?(  [unneeded] #>kk ?(  need kk-ports                      : #>kk  ( n -- d )  /kk * kk-ports + kk@  ;  exit ?)            [unneeded] pressed? ?(  need @p                                 : pressed? ( bitmask port -- f )  @p and 0=  ;  exit ?)         [unneeded] pressed ?(  need pressed?  need kk-ports             : pressed  ( -- false | bitmask port true )                       false \ by default                                              [ kk-ports keys /kk * bounds swap ] literal literal             do  i kk@ pressed? if  drop i kk@ 1 leave  then  /kk +loop  ; ?)                                                                                                                                                                                                                                                                                                                                                                                              ( only-one-pressed )                                            need kk-ports                                                   0. 2variable kk-pressed                                         : only-one-pressed  ( -- false | bitmask port true )              0. kk-pressed 2! \ none by default                              [ kk-ports keys /kk * bounds swap ] literal literal             do  i kk@ pressed?                                              if  kk-pressed 2@ + if                                          then                                                            /kk +loop                                                       kk-pressed 2@ 2dup + if  1  else  2drop 0  then  ;                                                                                                                                                                                                                                                                                                                                            ( key-edit key-left key-right key-down key-up key-delete )      [unneeded] key-edit   ?\  7 cconstant key-edit   exit           [unneeded] key-left   ?\  8 cconstant key-left   exit           [unneeded] key-right  ?\  9 cconstant key-right  exit           [unneeded] key-down   ?\ 10 cconstant key-down   exit           [unneeded] key-up     ?\ 11 cconstant key-up     exit           [unneeded] key-delete ?\ 12 cconstant key-up     exitkey-enter )                                                   [unneeded] key-enter  ?\ 13 cconstant key-enter  exitcapslock )                                                    need os-flags2                                                  need ctoggle  need cset   need creset                           %1000 os-flags2 2constant capslock                              : toggle-capslock  ( -- )    capslock ctoggle  ;                : set-capslock     ( -- )    capslock cset  ;                   : unset-capslock   ( -- )    capslock creset  ;                 : capslock?        ( -- f )  capslock c@andget-inkey )                                                   need z80-asm,                                                   code get-inkey  ( -- c | 0 )                                      b push,                                                         028E call, \ KEY-SCAN ROM routine                               z? rif  \ is key press valid?                                     031E call, \ KEY-TEST ROM routine                               c? rif  \ is key code valid?                                      00 c ld#,  \ XXX Spectrum Forth-83 does this                    d dec,  a e ld,                                                 0333 call, \ KEY-DECODE ROM routine                           rthen                                                         rthen                                                           FF cp#,  z? rif  a xor,  rthen  \ convert FF to 00              b pop,  pusha jp,  end-code                                                                                                   ( get-key? )                                                    need z80-asm                                                    code get-key?  ( -- f )                                           bc push                                                         028E call  \ ROM KEY_SCAN                                       here jrnz  >relmark 0 unresolved ! \ to return_false            031E call  \ ROM KEY_TEST                                       here jrnc  >relmark 1 unresolved ! \ to return_false            bc pop  ' true jp                                               0 unresolved @ >relresolve                                      1 unresolved @ >relresolve                                      bc pop  ' false jp                                              end-code                                                                                                                                                                                                                                                      ( fast-get-key? )                                               need z80-asm                                                    code fast-get-key?  ( -- f )                                      bc push                                                         028E call  \ ROM KEY_SCAN                                       0000 jpnz  |mark 0 unresolved ! \ to return_false               031E call  \ ROM KEY_TEST                                       0000 jpnc  |mark 1 unresolved ! \ to return_false               bc pop  ' true jp                                               0 unresolved @ >resolve                                         1 unresolved @ >resolve                                         bc pop  ' false jp                                              end-code                                                                                                                                                                                                                                                      ( inkey )                                                       need z80-asm,                                                   code inkey  ( -- c | 0 )                                          a xor,                                                          01 iy 5 bitx,  \ a new key pressed?                             nz? rif                                                           5C08 h ldp#,  \ LAST-K system variable                          m a ld,                                                         01 iy 5 resx,                                                 rthen                                                           pusha jp,  end-code                                                                                                                                                                                                                                                                                                                                                                           ( y/n? y/n no? yes? )                                           need value                                                      'Y' value "y"  'N' value "n"                                    : y/n?  ( c -- f )  dup "y" = swap "n" = or  ;                  : y/n  ( -- c )                                                   begin  key upper dup y/n? 0=  while  drop  repeat  ;          : no?  ( -- f )  y/n "n" =  ;                                   : yes?  ( -- f )  y/n "ycreate-anon anon +anon n>anon )                               need body>                                                      variable (anon)  ( -- a )                                       : create-anon  ( -- )                                             here (anon) !                                                   [ (anon) body> @ ] literal compile, 0 ,  ;                    : anon  ( Compilation: -- ) ( Run-time: -- a )                    (anon) @                                                        compiling? if  compile,  else  execute  then  ; immediate     : +anon  ( Compilation:  n -- ) ( Run-time: -- )                  cells (anon) @ execute +                                        compiling? if  postpone literal  then ; immediate             : n>anon  ( x1..xn n -- )                                         cells postpone anon swap bounds do  i !  cell +loop  ;                                                                                                                                        ( arguments results )                                           need cell/                                                      variable >args                                                  create arg-actions ] @ ! +! [                                   variable arg-action  arg-action off                             : arg:  ( +n "name" -- )                                          create  c,                                                      does>  ( -- x ) ( x -- )                                          c@ >args @ swap -                                               arg-action @ arg-actions + perform  arg-action off  ;       $00 arg: l0 $02 arg: l1 $04 arg: l2 $06 arg: l3 $08 arg: l4     $0A arg: l5 $0C arg: l6 $0E arg: l7 $10 arg: l8 $12 arg: l9     -->                                                                                                                                                                                                                                                             ( arguments results )                                           : toarg  ( -- )  cell arg-action !  ;                           : +toarg  ( -- )  [ 2 cells ] literal arg-action !  ;           : arguments  ( i*x +n -- j*x )                                    r> >args @ >r >r                                                cells sp@ + dup >args ! [ 10 cells ] literal - sp@ swap -       cell/ 0 do  0  loop  ; compile-only                           : results  ( +n -- )                                              cells >args @ swap - sp@ -                                      cell/ 0 do  drop  loop                                          r> r> >args ! >r  ; compile-only                                                                                                                                                                                                                                                                                                                                                              ( local )                                                       need :noname  need >body                                        :noname  \ Compilation: ( -- xt )                                 2r> swap !  ;                                                 : local  \ Compilation: ( xt -- xt )                              r> swap                     \ save top return address           dup @ 2>r                   \ save variable address and value   [ dup >body ] literal >r    \ force exit via `restore-local`    >r  ;                       \ restore top return address        compile-only                                                    drop  \ delete xt                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  need alias                                                      wordlist constant calculator-wordlist                           : calculator  ( -- )                                              calculator-wordlist >order  $C5 c, $EF c,  ;                  calculator-wordlist >order                                      get-current  calculator-wordlist set-current                    : end-calc  ( -- )  $38 c,  ;                                   : end-calculator  ( -- )  previous end-calc $C1 c,  ;           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : +  ( -- )  $0F c,  ;                                          : -  ( -- )  $03 c,  ;                                          : *  ( -- )  $04 c,  ;                                          : /  ( -- )  $05 c,  ;                                          : mod  ( -- )  $32 c,  ;                                        : **  ( -- )  $06 c,  ;                                         : sqrt  ( -- )  $28 ccalculator )                                                  : negate  ( -- )  $1B c,  ;                                     : sgn  ( -- )  $29 c,  ;                                        : abs  ( -- )  $2A c,  ;                                        : int  ( -- )  $27 c,  ;                                        : truncate  ( -- )  $3A c,  ;                                   : re-stack  ( r -- r' )  $3D c,  ;                              : zero  ( -- )  $A0 c,  ;                                       : one  ( -- )  $A1 c,  ;                                        : half  ( -- )  $A2 c,  ;                                       : pi2/  ( -- )  $A3 c,  ;                                       : ten  ( -- )  $A4 c,  ;                                        -->                                                                                                                                                                                                                                                             ( calculator )                                                  : ln  ( -- )  $25 c,  ;                                         : exp  ( -- )  $26 c,  ;                                        : acos  ( -- )  $23 c,  ;                                       : asin  ( -- )  $22 c,  ;                                       : atan  ( -- )  $24 c,  ;                                       : cos  ( -- )  $20 c,  ;                                        : sin  ( -- )  $1F c,  ;                                        : tan  ( -- )  $21 c,  ;                                        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : drop  ( -- )  $02 c,  ;                                       : dup  ( -- )  $31 c,  ;                                        : swap  ( -- )  $01 c,  ;                                       : >mem  ( n -- )  $C0 [ also forth ] + [ previous ] c,  ;       : mem>  ( n -- )  $E0 [ also forth ] + [ previous ] c,  ;       : over  ( -- )                                                    2 >mem drop 1 >mem 2 mem> 1 mem>  ;                           : 2dup  ( -- )                                                    2 >mem drop 1 >mem drop 1 mem> 2 mem>  1 mem> 2 mem>  ;       -->                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : 0=  ( -- )  $30 c,  ;                                         : 0<  ( -- )  $36 c,  ;                                         : 0>  ( -- )  $37 ccalculator )                                                  -->  \ XXX TMP -- ignore this block                             : =  ( -- )  $0E c,  ;                                          : <>  ( -- )  $0B c,  ;                                         : >  ( -- )  $0C c,  ;                                          : <  ( -- )  $0D c,  ;                                          : <=  ( -- )  $09 c,  ;                                         : >=  ( -- )  $0A ccalculator )                                                  : ?branch  ( -- )  $00 c,  ;                                    : 0branch  ( -- )  0= ?branch  ;                                : branch  ( -- )  $33 ccalculator )                                                  : >mark  ( -- a )  here 0 c,  ;                                 : from-here  ( a -- n )                                           here [ also forth ] swap - [ previous ] ;                     : >resolve  ( a -- )                                              [ also forth ] dup [ previous ] from-here                       [ also forth ] swap [ previous ] c!  ;                        ' here alias <mark  ( -- a )                                    : <resolve  ( a -- )  from-here c,  ;                           : if  ( -- a )  0branch >mark  ;                                : else  ( a1 -- a2 )                                              branch >mark [ also forth ] swap [ previous ] >resolve  ;     ' >resolve alias then  ( a -- )                                 set-current  previous                                                                                                                                                                           ( float float+ float- floats )                                  5 constant float                                                : float+  ( fa1 -- fa2 )  float +  ;                            : float-  ( fa1 -- fa2 )  float -  ;                            : floats  ( n1 -- n2 )  floatfp0 fp (fp@ fp@ empty-fs fdepth )                             need float                                                      23651 constant fp0  \ STKBOT system variable                    23653 constant fp   \ STKEND system variable                    : (fp@  ( -- a )  fp @  ;                                       : fp@  ( -- a )  (fp@ float -  ;                                : empty-fs  ( -- )  fp0 @ fp !  ;                               : fdepth  ( -- n )  (fp@ fp0 @ - floatf>flag )                                                      need (f>s                                                       : f>flag  ( -- f ) ( F: rf -- )  (f>s negateend-calculator-flag )                                         need macro  need f>flag  need call-xt                           macro end-calculator-flag  ( -- f ) ( F: 1|0 -- )                 [ calculator-wordlist >order ] end-calculator [ previous ]      ['] f>flag call-xt  jpnext, endmcalculator-command )                                          need calculator                                                 : calculator-command  ( b -- )                                    $C5 c,  $06 c, c,                                               calculator  $3B c,                                              [ calculator-wordlist >order ] end-calculator [ previous ]      $C1 ccalculator-command>flag )                                     need calculator-command  need f>flag  need call-xt              : calculator-command>flag  ( b -- )                               calculator-command ['] f>flag call-xt                           [ also assembler ] jpnext, [ previousf= f<> )                                                      need calculator-command>flag                                    code f=  ( -- f ) ( F: r1 r2 -- )                                 0E calculator-command>flag  end-code                          code f<>  ( -- f ) ( F: r1 r2 -- )                                0B calculator-command>flag  end-codef~abs f~rel f~relabs f== )                                    need frot  need f-  need fabs  need fswap  need f<  need fover  need f+  need f*  need fp@  need float-  need float  need str=  need fdrop  need fsgn                                           : f~abs  ( -- f ) ( F: r1 r2 r3 -- )                              frot frot f- fabs fswap f<  ;                                 : f~rel  ( -- f ) ( F: r1 r2 r3 -- )                              frot frot fover fabs fover fabs f+                              frot frot f- fabs frot frot f* f<  ;                          : f~relabs  ( -- f ) ( F: r1 r2 r3 -- )  fabs f~rel  ;          : f==  ( -- f ) ( F: r1 r2 -- )                                   fp@ dup float- float tuck str= fdrop fdrop  ;                                                                                                                                                                                                                                                                                 ( f~ )                                                          need f~abs  need f==  need f~relabs                                  ' f~abs ,                                                  here ' f== ,                                                         ' f~relabs ,                                                     constant (f~) \ execution table of `f~`                   : f~  ( -- f ) ( F: r1 r2 r3 -- )                                 fdup fsgn f>s cells (f~) + performf< f<= f> f>= )                                               need calculator-command>flag                                    code f<  ( -- f ) ( F: r1 r2 -- )                                 0D calculator-command>flag  end-code                          code f<=  ( -- f ) ( F: r1 r2 -- )                                09 calculator-command>flag  end-code                          code f>  ( -- f ) ( F: r1 r2 -- )                                 0C calculator-command>flag  end-code                          code f>=  ( -- f ) ( F: r1 r2 -- )                                0A calculator-command>flag  end-code                                                                                                                                                                                                                                                                                                                                                                                                                          ( f0< f0= f0<> f0> )                                            need calculator  need end-calculator-flag                       code f0<  ( -- f ) ( F: r -- )                                    calculator  0<  end-calculator-flag  end-code                 code f0=  ( -- f ) ( F: r -- )                                    calculator  0=  end-calculator-flag  end-code                 code f0<>  ( -- f ) ( F: r -- )                                   calculator  0= 0=  end-calculator-flag  end-code              code f0>  ( -- f ) ( F: r -- )                                    calculator  0>  end-calculator-flag  end-code                                                                                                                                                                                                                                                                                                                                                                                                                 ( fdrop fdup fswap fover )                                      need calculator                                                 code fdrop  ( F: r -- )                                           calculator  drop  end-calculator  jpnext,  end-code           code fdup  ( F: r -- r r )                                        calculator  dup  end-calculator  jpnext,  end-code            code fswap  ( F: r1 r2 -- r2 r1 )                                 calculator  swap  end-calculator  jpnext,  end-code           code fover  ( F: r1 r2 -- r1 r2 r1 )                              calculator  over  end-calculator  jpnext,  end-code                                                                                                                                                                                                                                                                                                                                                                                                           ( f2dup f2drop )                                                code f2dup  ( F: r -- r r )                                       calculator  2dup  end-calculator  jpnext,  end-code           code f2drop  ( F: r -- )                                          calculator  drop drop  end-calculator  jpnext,  end-codefnip ftuck )                                                  need calculator                                                 code fnip  ( F: r1 r2 -- r2 )                                     calculator  swap drop  end-calculator  jpnext,                  end-code                                                      code ftuck  ( F: r1 r2 -- r2 r1 r2 )                              calculator  2 >mem swap 2 mem>  end-calculator  jpnext,         end-codefrot -frot )                                                  need calculator                                                 code frot  ( F: r1 r2 r3 -- r2 r3 r1 )                            calculator                                                        1 >mem drop swap 1 mem> swap                                  end-calculator  jpnext,  end-code                             code -frot  ( F: r1 r2 r3 -- r3 r1 r2 )                           calculator                                                        swap 1 >mem drop swap 1 mem>                                  end-calculator  jpnext,  end-code                                                                                                                                                                                                                                                                                                                                                                                                                             ( f+ f- f* f/ ?f/ fmod )                                        need calculator  need fdup  need f0=                            code f+  ( F: r1 r2 -- r3 )                                       calculator  +  end-calculator  jpnext,  end-code              code f-  ( F: r1 r2 -- r3 )                                       calculator  -  end-calculator  jpnext,  end-code              code f*  ( F: r1 r2 -- r3 )                                       calculator  *  end-calculator  jpnext,  end-code              code f/  ( F: r1 r2 -- r3 )                                       calculator  /  end-calculator  jpnext,  end-code              : ?f/  ( F: r1 r2 -- r3 )  fdup f0= #-42 ?throw f/  ;           code fmod  ( F: r1 -- r2 )                                        calculator  mod  end-calculator  jpnext,  end-code                                                                                                                                                                                                            ( fmax )                                                        need calculator  need calculator-command                        code fmax  ( F: r1 r2 -- r1|r2 )                                  calculator  2dup  end-calculator                                0C calculator-command  ( F: r1 r2 rf -- )                       calculator                                                        if    drop  ( F: r1 )                                           else  swap drop  ( F: r2 )                                      then                                                          end-calculator  jpnext,  end-code                                                                                                                                                                                                                                                                                                                                                                                                                             ( fmin )                                                        need calculator  need calculator-command                        code fmin  ( F: r1 r2 -- r1|r2 )                                  calculator  2dup  end-calculator                                0D calculator-command  ( F: r1 r2 rf -- )                       calculator                                                        if    drop  ( F: r1 )                                           else  swap drop  ( F: r2 )                                      then                                                          end-calculator  jpnext,  end-code                                                                                                                                                                                                                                                                                                                                                                                                                             ( fsgn fabs fnegate )                                           need calculator                                                 code fsgn  ( F: r1 -- -1|0|1 )                                    calculator  sgn  end-calculator  jpnext,  end-code            code fabs  ( F: r1 -- r2 )                                        calculator  abs  end-calculator  jpnext,  end-code            code fnegate  ( F: r1 -- r2 )                                     calculator  negate  end-calculator  jpnext,  end-codefln ?fln flnp1 ?flnp1 fexp f** fsqrt ?fsqrt )                 need calculator  need fdup  need f0<  need f<=                  code fln  ( F: r1 -- r2 )                                         calculator  ln  end-calculator  jpnext,  end-code             : ?fln  ( F: r1 -- r2 )  fdup f0 f<= #-46 ?throw fln  ;         code flnp1  ( F: r1 -- r2 )                                       calculator  one + fln  end-calculator  jpnext,  end-code      : ?flnp1  ( F: r1 -- r2 )                                         fdup f1 fnegate f<= #-46 ?throw fln  ;                        code fexp  ( F: r1 -- r2 )                                        calculator  exp  end-calculator  jpnext,  end-code            code f**  ( F: r1 -- r2 )                                         calculator  **  end-calculator  jpnext,  end-code             code fsqrt  ( F: r1 -- r2 )                                       calculator  sqrt  end-calculator  jpnext,  end-code           : ?fsqrt  ( F: r1 -- r2 )  fdup f0< #-46 ?throw fsqrt  ;        ( f0 f1 fhalf fpi2/ f10 )                                       need calculator                                                 code f0  ( F: -- r )                                              calculator  zero  end-calculator  jpnext,  end-code           code f1  ( F: -- r )                                              calculator  one  end-calculator  jpnext,  end-code            code fhalf  ( F: -- r )                                           calculator  half  end-calculator  jpnext,  end-code           code fpi2/  ( F: -- r )                                           calculator  pi2/  end-calculator  jpnext,  end-code           code f10  ( F: -- r )                                             calculator  ten  end-calculator  jpnext,  end-code                                                                                                                                                                                                                                                                            ( (f>s )                                                        code (f>s  ( -- n ) ( F: r -- )                                   C5 c,  CD c, 2DA2 ,                                             60 00 + c,  68 01 + c,  C1 c,  jppushhl,                        end-codefrestack b>f u>f s>f f>s )                                    need calculator  need fnegate  need fdup  need (f>s  need f0<   code frestack  ( F: r -- r' )                                     calculator  re-stack  end-calculator  jpnext, end-code        code b>f  ( b -- ) ( F: -- r )                                    D9 c, E1 c, 78 05 + c, CD c, 2D28 , D9 c,  jpnext,  end-code  code u>f  ( u -- ) ( F: -- r )                                    D9 c, C1 c, CD c, 2D2B , D9 c,  jpnext,  end-code             : s>f  ( n -- ) ( F: -- r )                                       dup 0< if  abs u>f fnegate  else  u>f  then  ;                : f>s  ( -- n ) ( F: r -- )  fdup (f>s f0< ?negate  ;                                                                                                                                                                                                                                                                                                                                           ( f! f@ )                                                       need z80-asm                                                    code f!  ( fa -- ) ( F: r -- )                                    exx  2BF1 call  \ STK_FETCH ROM routine                              hl pop  a m ld  hl incp                                                 e m ld  hl incp  d m ld  hl incp                                c m ld  hl incp  b m ld                            exx  jpnext, end-code                                         code f@  ( fa -- ) ( F: -- r )                                    exx  hl pop m a ld  hl incp                                                 m e ld  hl incp  m d ld  hl incp                                m c ld  hl incp  m b ld                                         2AB6 call  \ STK_STORE ROM routine                  exx  jpnext, end-code                                                                                                                                                                         ( f, fconstant fvariable )                                      need float  need f!  need f@                                    : f,  ( -- ) ( F: r -- )  here float allot f!  ;                : fconstant  ( "name" -- )  ( F: r -- )                           create  f,  does>  f@  ;                                      : fvariable  ( "name" -- )  create  float allotfacos fasin fatan fcos fsin ftan )                            need calculator                                                 code facos  ( F: r1 -- r2 )                                       calculator  acos  end-calculator  jpnext,  end-code           code fasin  ( F: r1 -- r2 )                                       calculator  asin  end-calculator  jpnext,  end-code           code fatan  ( F: r1 -- r2 )                                       calculator  atan  end-calculator  jpnext,  end-code           code fcos  ( F: r1 -- r2 )                                        calculator  cos  end-calculator  jpnext,  end-code            code fsin  ( F: r1 -- r2 )                                        calculator  sin  end-calculator  jpnext,  end-code            code ftan  ( F: r1 -- r2 )                                        calculator  tan  end-calculator  jpnext,  end-code                                                                                                                                            ( (f. f. )                                                      need fdepth  need fdrop                                         code (f.  ( F: r -- )                                             C5 c,  CD c, 2DE3 ,  C1 c,                                      jpnext,  end-code                                             : f.  ( F: r -- )                                                 fdepth >r  (f. space                                            fdepth r> = if  fdrop  thenfs dump-fs )                                                 need (fp@  need fp0  need f@  need f.                           need fdepth  need float  need float+  need .depth               : (.fs  ( -- )  (fp@ fp0 @ ?do  i f@ f.  float +loop  ;         : .fs   ( -- )  fdepth dup .depth 0> if  (.fs  then  ;          : (dump-fs  ( -- )                                                cr ." Bottom"                                                   (fp@ fp0 @ ?do                                                    i dup cr u. float bounds ?do  i c@ 4 .r  loop                 float +loop  cr ." Top" cr  ;                                 : dump-fs  ( -- )  fdepth dup .depth 0> if  (dump-fs  then  ;                                                                                                                                                                                                                                                                                                                                   ( floor ftrunc fround )                                         need calculator  need fdup  need fsgn  need f*  need f+         code floor  ( F: r1 -- r2 )                                       calculator  int  end-calculator  jpnext,  end-code            code ftrunc  ( F: r1 -- r2 )                                      calculator  truncate  end-calculator  jpnext,  end-code       : fround  ( F: r1 -- r2 )  fdup fsgn fhalf f* f+ ftruncfalign faligned sfalign sfaligned dfalign dfaligned )         need alias                                                      ' noop alias falign     ( -- )        immediate                 ' noop alias faligned   ( a -- fa )   immediate                 ' noop alias sfalign    ( -- )        immediate                 ' noop alias sfaligned  ( a -- dfa )  immediate                 ' noop alias dfalign    ( -- )        immediate                 ' noop alias dfaligned  ( a -- dfa )  immediatenumber )                                                      : number  ( ca len -- n | d )  number? 0= #-275 ?throwstandard-number-point? extended-number-point? )               need ?(                                                         [unneeded] classic-number-point? ?(                             : classic-number-point?  ( c -- f )                               dup ':' = swap ',' - 4 u< or  ;  ?)                           [unneeded] extended-number-point? ?(                            : extended-number-point?  ( c -- f )                              dup ':' = swap '+' - 5 u< orbase# b# d# h# )                                              need evaluate  need catch                                       : base# ( -- ) ( "name" -- )                                      create c, immediate                                             does> c@                                                        base c@ >r  base !    \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw  ;   \ restore radix before error control     2 base# b#                                                     10 base# d#                                                     16 base# h#                                                                                                                                                                                                                                                                                                                     ( x# b# o# d# h# t# )                                           need evaluate  need catch                                       : x# ( -- ) ( "name" -- n | d )                                   does> c@              \ new radix                               base @ >r  base !     \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw  ;   \ restore radix before error control    create b# ( "name" -- n | d )  2 c, x# immediate                create o# ( "name" -- n | d )  2 c, x# immediate                create d# ( "name" -- n | d ) 10 c, x# immediate                create h# ( "name" -- n | d ) 16 c, x# immediate                create t# ( "name" -- n | d ) 36 c, x# immediate                                                                                                                                                                                                                ( c# )                                                          : c#  ( "name" -- c )                                             parse-name drop c@                                              compiling? if  postpone literal  then  ; immediateud.r u.r ud. holds )                                          need ?(                                                         [unneeded] ud.r ?(                                              : ud.r  ( ud n -- )  >r <# #s #> r> over - 0 max spaces type  ; exit ?)                                                         [unneeded] u.r ?(  need u>ud  need ud.r                         : u.r  ( u n -- )  >r u>ud r> ud.r  ;  exit ?)                  [unneeded] ud. ?(  need ud.r                                    : ud.  ( ud -- )  0 ud.r space  ;  exit ?)                      [unneeded] holds ?(                                             : holds  ( ca len -- )                                            begin  dup  while  1- 2dup + c@ hold  repeat                    2drop  ; ?)                                                                                                                                                                                                                                                   ( bin. dec. hex. )                                              [defined] base.                                                 ?\ : base.  ( -- )  does> c@ base @ >r base ! u. r> base !  ;   [unneeded] bin.  ?\ create bin.  ( n -- )   2 c, base.          [unneeded] hex.  ?\ create hex.  ( n -- )  16 c, base.          [unneeded] dec.  [defined] dec.  or                               ?\  create dec.  ( n -- )  10 c, basehex. 16hex. 32hex. <hex hex> )                               [defined] base'  ?\ variable base'                              [defined] (d.)                                                  ?\ : (d.)  ( d n -- ca len )  <# 0 do  #  loop  #>  ;           : <hex  ( -- )  base @ base' ! hex ; \ switch to hex            : hex>  ( -- )  base' @ base !     ; \ and back                 : (dhex.)  ( d n -- )  <hex (d.) hex> type space  ;             : 32hex.    ( d -- )  8 (dhex.)  ;                              : 16hex.     ( n -- )  s>d 4 (dhex.)  ;                         : 8hex.    ( b -- )  s>d 2 (dhex.)  ;                                                                                                                                                                                                                                                                                                                                                                                                                           ( binary 8bin. 16bin. 32bin. <bin bin> )                        [defined] base'  ?\ variable base'                              [defined] binary  ?\ : binary  ( -- )  2 base !  ;              [defined] (d.)                                                  ?\ : (d.)  ( d n -- ca len )  <# 0 do  #  loop  #>  ;           : <bin  ( -- )  base @ base' ! binary ; \ switch to binary      : bin>  ( -- )  base' @ base !        ; \ and back              : (dbin.)  ( d n -- )  <bin (d.) bin> type space  ;             : 32bin.    ( d -- )  32 (dbin.)  ;                             : 16bin.     ( n -- )  s>d 16 (dbin.)  ;                        : 8bin.    ( b -- )  s>d 8 (dbin.)  ;                                                                                                                                                                                                                                                                                                                                                           ( under+ +under )                                               need ?(                                                         [unneeded] under+ ?(                                            code under+  ( n1|u1 x n2|u2 -- n3|u3 x )                         D9 c, D1 c, C1 c, E1 c, 19 c, E5 c, C5 c, D9 c,                 jpnext,  end-code  ?)                                         [unneeded] +under ?(                                            code +under  ( n1|u1 n2|u2 x -- n3|u3 x )                         D9 c, C1 c, D1 c, E1 c, 19 c, E5 c, C5 c, D9 c,                 jpnext,  end-code  ?)                                                                                                                                                                                                                                                                                                                                                                                                                                         ( % u% u>ud within between gcd )                                [unneeded] %                                                    ?\ : %  ( n1 n2 -- n3 )  100 swap */  ;  exit                   [unneeded] u%                                                   ?\ : u%  ( u1 u2 -- u3 )  >r 100 um* r> um/mod nip  ;  exit     [unneeded] u>ud                                                 ?\ need alias  ' 0 alias u>ud ( u -- ud )  exit                 need ?(                                                         [unneeded] within ?(                                            : within  ( n1|u1 n2|u2 n3|u3 -- f )  over - >r - r> u<  ; ?)   [unneeded] between ?(                                           : between  ( n1|u1 n2|u2 n3|u3 -- f )                             over - -rot - u< 0=  ; ?)                                     [unneeded] gcd  ?exit                                           : gcd  ( n1 n2 -- n3 )  begin  ?dup  while  tuck mod  repeat  ;                                                                 ( odd? even? 8* polarity <=> )                                  [unneeded] odd?  ?\ : odd?   ( n -- f )  1 and     ;  exit      [unneeded] even? ?\ : even?  ( n -- f )  1 and 0=  ;  exit      need ?(                                                         [unneeded] 8* ?(                                                code 8*  ( n1 -- n2 )                                             e1 c, 29 c, 29 c, 29 c, jppushhl, end-code  exit ?)           [defined] polarity ?(                                           code polarity  ( n -- -1 | 0 | 1 )                                D1 c, 78 02 + c,  B0 03 + c,  CA c, ' false ,                   CB c, 10 03 + c,  ED c, 62 c,                                   78 05 + c,  F6 c, 01 c,  68 07 + c,  jppushhl,                  end-code  ?)                                                  [unneeded] <=>                                                  ?\ : <=>  ( n1 n2 -- -1|0|1 )  - polarity  ;                                                                                    ( u<= u>= <= >= 0>= 0<= 0max )                                  [unneeded] u<=  ?\ : u<=  ( u1 u2 -- f )  u> 0=  ;  exit        [unneeded] u>=  ?\ : u>=  ( u1 u2 -- f )  u< 0=  ;  exit        [unneeded] <=   ?\ : <=   ( n1 n2 -- f )  > 0=   ;  exit        [unneeded] >=   ?\ : >=   ( n1 n2 -- f )  < 0=   ;  exit        [unneeded] 0>=  ?\ : 0>=  ( n1 n2 -- f )  0< 0=  ;  exit        [unneeded] 0<=  ?\ : 0<=  ( n1 n2 -- f )  0> 0=  ;  exit        [unneeded] 0max ?exit                                           code 0max  ( n -- n | 0 )                                         E1 c,  CB c, 10 05 + c,  DA c, ' false ,  CB c, 18 05 + c,      jppushhl,  end-code                                                                                                                                                                                                                                                                                                                                                                           ( lshift )                                                      need z80-asm                                                    code lshift  ( x1 u -- x2 )                                       exx                                                             bc pop  \ C = loop counter                                      c b ld                                                          hl pop  \ hi 8 bits ignored!                                    b inc  ahead 0 unresolved !                                     begin  hl addp  0 unresolved @ >relresolve  step                hl push exx  jpnext, end-code                                 exit  \ XXX TODO -- make both versions accessible?              code lshift  ( x1 u -- x2 )                                       D1 c, E1 c, 1C c, here 1D c, CA c, pushhl , 29 c, C3 c, ,       end-code                                                                                                                                                                                      ( rshift )                                                      need z80-asm                                                    code rshift  ( x1 u -- x2 )                                       exx                                                             bc pop  \ C = loop counter                                      c b ld                                                          hl pop  \ hi 8 bits ignored!                                    b inc  ahead 0 unresolved !                                     begin  h srl  l rr  0 unresolved @ >relresolve  step            hl push exx jpnext, end-code                                  exit  \ XXX TODO -- make both versions accessible?              code rshift  ( x1 u -- x2 )                                       D1 c, E1 c, 1C c, here 1D c, CA c, pushhl , CB c, 3C c,         CB c, 1D c, C3 c, , end-code                                                                                                                                                                  ( clshift crshift )                                             need ?(                                                         [unneeded] clshift ?(                                           code clshift  ( b1 u -- b2 )                                      D1 c,  E1 c,  78 05 + c,  1C c,                                 here                                                            1D c,  CA c, pusha ,  80 07 + c,  C3 c, ,  end-code  ?)       [unneeded] crshift ?(                                           code crshift  ( b1 u -- b2 )                                      D1 c,  E1 c,  78 05 + c,  1C c,                                 here                                                            1D c,  CA c, pusha ,                                            C3 c, ,  end-code  ?)                                                                                                                                                                                                                                         ( bits )                                                        need z80-asm                                                    code bits  ( ca len -- u )                                        0 hl ldp#  \ init bit count                                     exx  \ save IP and count                                        de pop  hl pop  \ memory zone                                   begin                                                             d a ld  e or  nz if                                               08 b ld#  \ bits per byte                                       begin  m rrc  cy if  exx hl incp exx  then  step                hl incp  de decp  \ next byte                               2swap again then                                                exx jppushhl, end-code                                                                                                                                                                                                                                        ( 2/ cell/ )                                                    need ?(                                                         [unneeded] 2/ ?(                                                code 2/  ( x1 -- x2 )                                             E1 c,           \ pop hl                                        CB c, 2C c,     \ sra h                                         CB c, 1D c,     \ rr l                                          jppushhl,       \ jp pushhl                                     end-code  ?)                                                  [unneeded] cell/  ?\ need alias  need 2/  ' 2/ alias cell/                                                                                                                                                                                                                                                                                                                                                                                                      ( sqrt )                                                        need d2*  need 2/                                               [defined] cell-bits ?\ 16 constant cell-bits                    : (sqrt)  ( radicand -- remainder root )                          0 0                           ( radicand remainder root )       [ cell-bits 2/ ] literal 0 do                                     >r d2* d2* r>               \ shift remainder left 2 bits       2*                          \ shift root left 1 bit             2dup 2* u> if               \ check for next bit of root          >r r@ 2* - 1- r>          \ reduce remainder                    1+                        \ add a bit to root                 then                                                          loop  cr .s rot drop  ;                                       : sqrt  ( radicand -- root )  (sqrt) nip  ;                                                                                                                                                     ( sqrt )                                                        need 2/                                                         : sqrt  ( n1 -- n2 )                                              dup 0< -24 ?throw  \ invalid numeric argument                   dup                                                             if  dup 2/  20 0                                                    do      2dup / + 2/                                             loop    swap drop                                           thenrem /- -rem */-rem */- )                                    need sm/rem                                                     : /-rem  ( n1 n2 -- n3 n4 )  >r  s>d  r> sm/rem  ;              : /-  (  n1 n2 -- n3 )  /-rem nip  ;                            : -rem  ( n1 n2 -- n3 )  /-rem drop  ;                          : */-rem  (  n1 n2 n3 -- n4 n5 )  >r  m*  r> sm/rem  ;          : */-  ( n1 n2 n3 -- n4 )  */-rem nipfm/mod )                                                      : fm/mod  ( d1 n1 -- n2 n3 )                                      dup >r                \ save divisor                            sm/rem                                                          over 0<> over 0< and  \ quotient<0 and remainder<>0?            if                                                                swap r> +           \ add divisor to remainder                  swap 1-             \ decrement quotient                      else r> drop then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( /_mod /_ _mod */_mod */_ )                                    need fm/mod                                                     : /_mod  ( n1 n2 -- n3 n4 )  >r s>d r> fm/mod  ;                : /_  ( n1 n2 -- n3 )  /_mod nip  ;                             : _mod  ( n1 n2 -- n3 )  /_mod drop  ;                          : */_mod  ( n1 n2 n3 -- n4 n5 )  >r m* r> fm/mod  ;             : */_  ( n1 n2 n3 -- n4 )   */_mod nipany? either neither ifelse )                                  need ?(                                                         [unneeded] any? ?(  need roll  variable (any?)                  : any?  ( x0 x1..xn n -- f )                                      dup 1+ roll (any?) !                                            0 swap 0 do  swap (any?) @ = or  loop  ;  ?)                  [unneeded] either ?(                                            : either  ( n1|u1 n2|u2 n3|u3 -- f )                              -rot over = -rot = or  ;  ?)                                  [unneeded] neither ?(                                           : neither  ( n1|u1 n2|u2 n3|u3 -- f )                             -rot over <> -rot <> and  ;  ?)                               [unneeded] ifelse ?(                                            : ifelse  ( x1 x2 f -- x1 | x2 )  if  drop  else  nip  then  ;  ?)                                                                                                                              ( split join )                                                  need ?(                                                         [unneeded] split ?(                                             code split  ( x -- b1 b2 )                                        E1 c,                                                           16 c, 00 c,  58 05 + c,  68 04 + c,  26 c, 00 c,                C3 c, pushhlde ,  end-code  ?)                                [unneeded] join ?(                                              code join  ( b1 b2 -- x )                                         D1 c,  60 03 + c,  D1 c,  68 03 + c,                            jppushhl,  end-code  ?)                                                                                                                                                                                                                                                                                                                                                                       ( ud* d* )                                                      need ?(                                                         [unneeded] ud* ?(                                               : ud*  ( ud1 u2 -- ud3 )  dup >r um* drop  swap r> um* rot +  ; ?)                                                              [unneeded] d* ?(                                                : d* ( d|ud1 d|ud2 -- d|ud3 )                                     >r swap >r 2dup um* rot r> * + rot r> * + ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( du/mod )                                                      need tum*  need t+  need t-  need tum/  need d2*  need lshift   : normalize-divisor  ( d1 -- d1' shift )                          0 >r begin  dup 0< while  d2*  r> 1+ >r  repeat  r>  ;        : du/mod  ( ud1 ud2 -- ud3 ud4 )                                  ?dup 0= if                                                        >r  0 r@ um/mod  r> swap >r  um/mod  0 swap r>  exit          then                                                            normalize-divisor dup >r rot rot 2>r                            1 swap lshift tum*                                              dup  r@ = if   -1  else  2dup  r@ um/mod nip  then              2r@  rot dup >r  tum*  t-                                       dup 0< if  r> 1-  2r@  rot >r  0 t+                               dup 0< if  r> 1-  2r@  rot >r  0 t+  then                     then                                                            r> 2r> 2drop  1 r>  rot >r  lshift tum/  r> 0  ;              ( d0= d0< d< du< )                                              [unneeded] d0= ?\ : d0=  ( d -- f )  or 0=  ;  exit             [unneeded] d0< ?\ : d0<  ( d -- f )  nip 0<  ; exit             need ?(                                                         [unneeded] d< ?(                                                need 2nip                                                       : d<  ( d1 d2 -- f )                                              rot 2dup = if  2drop u< exit  then  2nip >  ;  exit           ?)                                                              [unneeded] du< ?(                                               : du<  ( ud1 ud2 -- f )                                           rot swap 2dup                                                   u<  if  2drop 2drop true   exit  then                           -   if  2drop       false  exit  then  u<  ;  exit            ?)                                                                                                                              ( d= d<> dmin dmax )                                            [unneeded] d=                                                   ?\ : d=  ( d1 d2 -- f )  d<> 0=  ; exit                         need ?(                                                         [unneeded] d<> ?(                                               : d<>  ( d1 d2 -- f )  rot <> if  2drop true exit  then  <>  ;  ?)                                                              [unneeded] dmin ?(                                              : dmin  ( d1 d2 -- d1 | d2 )                                      2over 2over d< 0= if  2swap  then  2drop  ;  exit  ?)         [unneeded] dmax ?(                                              : dmax  ( d1 d2 -- d1 | d2 )                                      2over 2over d< if  2swap  then  2drop  ;  ?)                                                                                                                                                                                                                  ( d- d2* d2/ )                                                  need ?(                                                         [unneeded] d- ?( code d-  ( d1|ud1 d2|ud2 -- d3|ud3 )             D1 c,  D9 c,  D1 c,  D9 c,  E1 c,  D9 c,  E1 c,                 A0 07 + c,  ED c, 52 c,  E5 c,  D9 c,  ED c,  52 c,             jppushhl,  end-code  exit ?)                                  [unneeded] d2* ?(  code d2*  ( xd1 -- xd2 )                       D1 c, E1 c,  29 c,  CB c, 13 c,  CB c, 12 c,  EB c,             pushhlde jp, end-code  exit ?)                                [unneeded] d2/ ?(  code d2/  ( xd1 -- xd2 )                       E1 c, D1 c,  CB c, 2C c,  CB c, 1C c,  CB c, 1D c,              CB c, 1A c,  CB c, 1B c,  EB c,  pushhlde jp,  end-code  ?)                                                                                                                                                                                                                                                                   ( dxor dor dand d10* m* )                                       [unneeded] dxor                                                 ?\ : dxor  ( d1 d2 -- d3 )  rot xor -rot xor swap  ;            [unneeded] dor                                                  ?\ : dor  ( d1 d2 -- d3 )  rot or -rot or swap  ;               [unneeded] dand                                                 ?\ : dand  ( d1 d2 -- d3 )  rot and -rot and swap  ;            [unneeded] d10*                                                 ?\ : d10*  ( ud -- ud*10 )  d2* 2dup d2* d2* d+  ;              [unneeded] m* ?exit                                             need d*                                                         : m*  ( n1 n2 -- d )  >r s>d r> s>d d* ;                                                                                                                                                                                                                                                                                        ( m+ )                                                          need z80-asm                                                    code m+  ( d1|ud1 n -- d2|ud2 )                                   exx     \ save Forth IP                                         bc pop  \ n                                                     de pop  \ d1 hi cell                                            hl pop  \ d1 lo cell                                            bc addp  hl push                                                cy if  de inc  then  de push                                    exx      \ restore Forth IP                                     jpnext,                                                         end-code                                                      exit                                                            : m+  ( d1|ud1 n -- d2|ud2 )  s>d d+  ;                                                                                                                                                         ( m*/ alt-m*/ )                                                 : m*/  ( d1 n1 +n2 -- d2 )                                        >r s>d >r abs -rot s>d r> xor r> swap >r >r dabs                rot tuck um* 2swap um* swap                                     >r 0 d+ r> -rot i um/mod -rot r> um/mod -rot r>                 if    if  1 0 d+  then  dnegate                                 else  drop  then  ;                                           need mt*  need tnegate  need ut/                                : alt-m*/  ( d1 n1 +n2 -- d2 )                                      >r mt* dup 0< if    tnegate r> ut/ dnegate                                    else  r> ut/  then  ;                                                                                                                                                                                                                                                                                                                                                         ( dsqrt )                                                       need q2*  need d2*  need d<  need m+  need d- need 2rot         need 2nip  [defined] cell-bits ?\ 16 constant cell-bits         : (dsqrt)  ( radicand . -- remainder . root . )                   0. 0.             ( radicand . remainder . root . )             cell-bits 0 do    ( radicand . remainder . root . )               cr .s  key drop  \ XXX INFORMER                                 2>r q2* q2* 2r>  d2*                                            2over 2over d2* 2swap                                             cr .s ." d< ?"  \ XXX INFORMER                                  d< if                                                           cr .s ." d<"  \ XXX INFORMER                                    2dup 2>r d2* d- -1 m+ 2r>  1 m+                               then                                                          loop  cr .s 2rot 2drop  ;                                     : dsqrt  ( radicand . -- root . )  (dsqrt) 2nip  ;              ( tum* tum/ t+ t- )                                             [unneeded] tum*                                                 ?\ : tum*  ( d n -- t )  2>r  r@ um*  0 2r>  um* d+  ;  exit    need ?(  [unneeded] t+ ?(                                       : +carry  ( n1 n2 -- n1+n2 carry )  0 tuck d+  ;                : t+  ( t1 t2 -- t3 )                                             >r rot >r  >r swap >r +carry  0 r> r> +carry d+ r> r> + +  ;  exit ?)                                                         [unneeded] tum/ ?(                                              : tum/  ( t n -- d )  dup >r um/mod r> swap >r um/mod nip r>  ; exit ?)                                                         [unneeded] t- ?(  need d-                                       : -borrow  ( n1 n2 -- n1-n2 borrow )  0 tuck d-  ;              : t-  ( t1 t2 -- t3 )  >r rot >r  >r swap >r -borrow                                   s>d r> r> -borrow d+ r> r> - +  ;  ?)                                                                    ( mt* ut/ ut* tnegate )                                         [unneeded] ut* dup                                              ?\ : ut*   ( ud u -- t )  swap >r dup >r  um* 0 r> r> um* d+  ; ?\ exit                                                         need ?(  [unneeded] mt* ?(  need ut*  need tnegate              : mt*   ( d n -- t )  dup 0<                                      if    abs over 0< if  >r dabs r> ut*  else  ut* tnegate  then   else  over 0< if  >r dabs r> ut* tnegate  else  ut*   then      then  ;  exit ?)                                              [unneeded] ut/ ?(                                               : ut/  ( ut n -- d )  dup >r um/mod -rot r> um/mod nip swap  ;  exit ?)                                                         [unneeded] tnegate ?exit                                        : tnegate  ( t1 -- t2 )  invert >r invert >r                                             invert 0 -1 -1 d+ s>d r> 0 d+ r> +  ;                                                                  ( q2* )                                                         need d2*                                                        : q2*  ( n . . . -- 2n . . . )                                    d2* >r >r  dup 0< if    d2* r> 1+ r>                                              else  d2* r> r>  thenq+ q- q0< q0= qu< qnegate qabs )                              code q+  ( nq1 nq2 -- nq3 )                                     end-code                                                        code q-  ( nq1 nq2 -- nq3 )                                     end-code                                                        : q0<  ( nq -- f )  0< push drop 2drop pop  ;                   : q0=  ( nq -- f )  or or or 0=  ;                              : qu<  ( uq uq -- f )  q- q0<  ;                                : qnegate  ( nq -- nq' )  0 0 0 0 4swap q-  ;                   : qabs  ( nq -- uq )  dup 0< if  qnegate  then  ;                                                                                                                                                                                                                                                                                                                                                                                                               ( udm* dm* )                                                    need qnegate                                                    code udm*  ( ud ud - quad )                                     end-code                                                        : dm* ( nd nd - nq )                                              2>r dup 0< dup >r if  dnegate  then                             r> 2r> dup 0< dup >r if  dnegate  then                          rot >r udm* 2r> xor 0< if  qnegate  thenc+! c-! )                                                  need ?(                                                         [unneeded] -! ?(                                                code -!  ( n|u a -- )                                             E1 c, D1 c, 7E c, 90 03 + c, 70 07 + c, 23 c,                   7E c, 98 02 + c, 70 07 + c, jpnext,  end-code ?)              [unneeded] c+! ?(                                               code c+!  ( c ca -- )                                             E1 c, D1 c, 78 03 + c, 86 c, 70 07 + c, jpnext,  end-code ?)  [unneeded] c-! ?(                                               code c-!  ( c ca -- )                                             E1 c, D1 c, 7E c, 90 03 + c, 70 07 + c, jpnext,  end-code ?)                                                                                                                                                                                                                                                                  ( c1+! c1-! 1+! 1-! )                                           [unneeded] c1+!                                                 ?\  code c1+!  ( ca -- )  E1 c, 34 c, jpnext,  end-code  exit   [unneeded] c1-!                                                 ?\  code c1-!  ( ca -- )  E1 c, 35 c, jpnext,  end-code  exit   need ?(                                                         [unneeded] 1+! ?(                                               code 1+!  ( a -- )                                                E1 c, 5E c, 23 c, 56 c, 13 c, 70 02 + c, 2B c, 70 03 + c,       jpnext, end-code  ?)                                          [unneeded] 1-! ?(                                               code 1-!  ( a -- )                                                E1 c, 5E c, 23 c, 56 c, 1B c, 70 02 + c, 2B c, 70 03 + c,       jpnext, end-code  ?)                                                                                                                                                                          ( @+ 2@+ c@+ )                                                  [unneeded] @+                                                   ?\ : @+  ( a -- a' x )  dup cell+ swap @  ;                     [unneeded] 2@+                                                  ?\ : 2@+  ( a -- a' xd )  dup cell+ cell+ swap 2@  ;            [unneeded] c@+ ?exit                                            code c@+  ( ca -- ca' c )                                         E1 c, 7E c, 23 c, E5 c, C3 c, pusha ,  end-coden, nn, n@ nn@ n! nn! )                                        [unneeded] n, ?\ : n,  ( xu..x1 u -- )  0 ?do  ,  loop  ; exit  need ?(  [unneeded] nn, ?(  need need-here  need-here n,        : nn,  ( xu..x1 u -- )  dup , n,  ; ?)                          [unneeded] n@ ?(                                                : n@  ( a u -- xu..x1 )                                           tuck 1- cells +  \ point _a_ to _xu_                            swap 0 ?do  dup i cells - @ swap  loop  drop  ; exit ?)       [unneeded] nn@ ?( need need-here  need-here n@                  : nn@  ( a -- x1..xu u | 0 )  dup @ >r cell+ r@ n@ r>  ; ?)     [unneeded] n! ?(                                                : n!  ( xu..x1 u a -- )                                           swap 0 ?do  dup >r ! r> cell+  loop  drop  ; exit ?)          [unneeded] nn! ?( need need-here  need-here n!                  : nn!  ( xu..x1 u a -- )  2dup ! cell+ n!  ; ?)                                                                                 ( bit>mask bit? set-bit reset-bit )                             [unneeded] bit? [unneeded] set-bit? [unneeded] reset-bit?       [unneeded] bit>bask and and and                                 ?\ need lshift  : bit>mask  ( n -- b )  1 swap lshift  ;        [unneeded] bit?                                                 ?\ : bit? ( b n -- f )  bit>mask and 0<> ;                      [unneeded] set-bit?                                             ?\ : set-bit ( b1 n -- b2 )  bit>mask or ;                      [unneeded] reset-bit?                                           ?\ : reset-bit ( b1 n -- b2 )  bit>mask invert and ;                                                                                                                                                                                                                                                                                                                                                                                                            ( c@and ctoggle )                                               need ?(                                                         [unneeded] c@and ?(                                             code c@and  ( b1 ca -- b2 )                                       E1 c, D1 c, 78 03 + c, A6 c, C3 c, pusha , jpnext,            end-code  exit ?)                                               [unneeded] ctoggle ?(                                           code ctoggle  ( b ca -- )                                         E1 c, D1 c, 7E c, A8 03 + c, 70 07 + c, jpnext,               end-code  exit ?)                                                                                                                                                                                                                                                                                                                                                                                                                                               ( !exchange c!exchange reserve alloted align aligned )          [unneeded] !exchange                                            ?\ : !exchange  ( x1 a -- x2 )  dup @ rot rot !  ;              [unneeded] c!exchange                                           ?\ : c!exchange  ( c1 ca -- c2 )  dup c@ rot rot c!  ;          [unneeded] reserve                                              ?\ : reserve  ( n -- a )  here tuck over erase allot  ;         [unneeded] alloted                                              ?\ : allotted  ( n -- a )  here swap allot ;                    [unneeded] align                                                ?\ need alias  ' noop alias align immediate                     [unneeded] aligned                                              ?\ need alias  ' noop alias aligned immediate                                                                                                                                                                                                                   ( /! *! 2/! 2*! exchange cexchange )                            [unneeded] /!                                                   ?\ : /!  ( n a -- )  tuck @ swap / swap !  ;                    [unneeded] *!                                                   ?\ : *!  ( n a -- )  tuck @ swap * swap !  ;                    [unneeded] 2*!                                                  ?\ : 2*!  ( a -- )  dup @ 2* swap !  ;                          [unneeded] 2/!                                                  ?\ need 2/  : 2/!  ( a -- )  dup @ 2/ swap !  ;                 [unneeded] exchange                                             ?\ : exchange  ( a1 a2 -- )  2dup @ swap @  rot ! swap !  ;     [unneeded] cexchange ?exit                                      : cexchange  ( ca1 ca2 -- )  2dup c@ swap c@  rot c! swap c!  ;                                                                                                                                                                                                 ( a a! a@ )                                                     variable a                                                      code a!  ( a -- )  E1 c, 22 c, a , jpnext,  end-code            code a@  ( -- a )  2A c, a , jppushhl,  end-codea @a c!a c@a )                                               need a  need ?(                                                 [unneeded] !a ?(                                                code !a  ( x -- )  D1 c, 2A c, a , 70 03 + c, 23 c, 70 02 + c,                     jpnext,  end-code ?)                         [unneeded] @a ?(                                                code @a  ( -- x )  2A c, a , 5E c, 23 c, 66 c, 68 03 + c,                          jppushhl,  end-code ?)                       [unneeded] c!a ?(                                               code c!a  ( c -- )  D1 c, 2A c, a , 70 03 + c, jpnext,                              end-code ?)                                 [unneeded] c@a ?(                                               code c@a  ( -- c )  2A c, a , 6E c, 26 c, 00 c, jppushhl,                           end-code ?)                                                                                                                                                                 ( !a+ @a+ c!a+ c@a+ )                                           need a  need ?(                                                 [unneeded] !a+ ?(                                               code !a+  ( x -- )                                                D1 c, 2A c, a , 70 03 + c, 23 c, 70 02 + c, 23 c, 22 c, a ,     jpnext,  end-code ?)                                          [unneeded] @a+ ?(                                               code @a+  ( -- x )                                                2A c, a , 5E c, 23 c, 56 c, 23 c, 22 c, a , D5 c, jpnext,       end-code ?)                                                   [unneeded] c!a+ ?(                                              code c!a+  ( c -- )  D1 c, 2A c, a , 70 03 + c, 23 c,                                22 c, a , jpnext,  end-code ?)             [unneeded] c@a+ ?(                                              code c@a+  ( -- c )  2A c, a , 5E c, 23 c, 16 c, 00 c,                               22 c, a , D5 c, jpnext,  end-code ?)       ( heap )                                                        also forth definitions                                          need vocabulary  need wid-of                                    vocabulary heap-voc  wid-of heap-voc constant heap-wordlist     also heap-voc definitions                                       0 1 2 um/mod nip 1- constant maxpos                             256 cells constant heapsize                                     4 cells 1- constant hysteresis                                  3 cells constant headsize                                       : adjustsize ( n -- n)  headsize +  hysteresis or  1+  ;        0 adjustsize constant overhead                                  create sentinel  here cell+ ,  maxpos ,  0 ,  0 ,               create heap  heapsize allot                                     variable nextnode                                               : >size ( a1 -- a2)  cell+  ;                                   : >prev ( a1 -- a2)  cell+ cell+  ;  -->                        ( heap )                                                        : init-heap ( -- )                                                heap dup nextnode !  dup dup !  dup heapsize  over >size !      >prev !  ;                                                    init-heap                                                       : attach ( a -- )                                                 >prev @  dup sentinel rot !  sentinel >prev !  ;              : search  ( a size -- a|0 )                                       >r begin 2@ swap R@ < invert until  r> drop  >prev @  ;       : detach ( a)  dup >prev @ !  ;                                 : findspace ( size -- a|0 )                                       nextnode @  dup attach  dup rot search  swap detach  ;        : fits ( size a -- f )  >size @ swap -  overhead  <  ;          : togglesize ( a -- )  >size dup @  negate swap !  ;            : next! ( a -- )  nextnode !  ;  -->                                                                                            ( heap )                                                        : sizes! ( size a -- a)  2dup + >r  >size 2dup @ swap -                                  r@ >size !   swap negate swap !  r>  ; : links! ( a1 a2 -- )                                             2dup swap @  2dup  swap !  >prev !  2dup >prev !   swap !  ;  : newnode ( size a)  tuck sizes!  links!  ;                     : makenode ( size a)                                              2dup fits if  togglesize drop  else  newnode  then  ;         forth-wordlist set-current                                      : allocate ( u -- a ior )  dup 0<                                 if    #-59                                                      else  adjustsize  dup findspace dup                                   if    dup next!  tuck makenode  headsize +  0                   else  drop #-59  then                                     then  ;                                                       heap-wordlist set-current  -->                                  ( heap )                                                        : mergesizes ( a1 a2 -- )  >size @ swap >size +!  ;             : mergelinks ( a1 a2 -- )  @ 2dup swap !  >prev !  ;            : jiggle ( -- )  nextnode @ @  >prev @  next!  ;                : merge ( a -- )  dup @ 2dup mergesizes  mergelinks  jiggle  ;  : ?merge ( a1 a2)                                                 >size @ 0> if    dup dup @  u< if  dup merge  then                         then  drop  ;                                      : ?mergenext ( a -- )  dup @ ?merge  ;                          : ?mergeprev ( a -- )  >prev @ dup ?merge  ;                    forth-wordlist set-current                                      : free ( a -- ior)                                                headsize -  dup togglesize  dup ?mergenext  ?mergeprev  0  ;  heap-wordlist set-current                                       variable stash                                                  : savelink ( a)  @ stash !  ;  -->                              ( heap )                                                        : restorelink ( a)  stash @  swap !  ;                          : fixprev ( a)  dup >prev @ !  ;                                : fixnext ( a)  dup @ >prev !  ;                                : fixlinks ( a)  dup fixprev  dup fixnext  @ fixnext  ;         : fixsize ( a -- )  dup >size @ 0>                                if  dup @  2dup <                                                   if    over - swap >size !  else  2drop  then                else  drop  then  ;                                           : fixsizes ( a -- )  dup fixsize  >prev @ fixsize  ;            : repair ( a -- )  dup restorelink  dup fixlinks  dup fixsizes                     togglesize  ;                                : toobig? ( a size -- f )  swap  >size @  >  ;                  : copynode ( a1 a2 -- )                                           over >size @  headsize -  rot  headsize + rot rot move  ; -->                                                                 ( heap )                                                        : enlarge ( a1 size -- a2 ior)                                    over ?mergeprev  allocate dup >r                                if  swap repair  else  tuck copynode  then  r>  ;             : adjust ( a1 size1 -- a2 size2)                                  adjustsize >r  headsize -  dup savelink  dup togglesize         dup ?mergenext r>  ;                                          forth-wordlist set-current                                      : resize ( a1 u -- a2 ior)                                        dup 0<  if  drop -61  \ `resize` error code                             else  adjust  2dup toobig?                                            if enlarge                                                      else  over makenode headsize +  0  then                   then  ;                                                                                                                                                                               ( create-heap )                                                 need value  need set-bit  need reset-bit  need bit?             need reserve  need alias                                        0 value heap  ( -- a )                                          8 constant address-unit-bits                                    16 value /chunk \ bytes per chunk                               : groups ( n1 n2 -- n3 )  /mod swap 0<> abs +  ;                : bytes>chunks ( n1 -- n2 )  /chunk groups  ;                   : chunks>bytes ( n1 -- n2 )  address-unit-bits groups  ;        ' heap alias heap-chunks  ( -- a )                              : heap-unused-chunks  ( -- a )  heap-chunks cell+  ;            : heap-map  ( -- a )  heap-unused-chunks cell+  ;               : /heap-map  ( -- n )  heap-chunks @ chunks>bytes  ;            : heap-data  ( -- a ) heap-map /heap-map +  ;  -->                                                                                                                                              ( create-heap )                                                 : (mapbit)  ( n1 -- n2 ca )                                       address-unit-bits /mod heap-map +  ;                          : mapbit ( n1 -- a2 b n2 )  (mapbit) dup @ rot  ;               : used-chunk? ( n -- f )  (mapbit) @ swap bit?  ;               : use-chunk ( n -- )  mapbit set-bit swap !  ;                  : free-chunk ( n -- )  mapbit reset-bit swap !  ;               : allocated>chunks  ( a -- n )  cell- @  ;                      : allocated>index  ( a -- n )  heap-data - /chunk /  ;          : allocated>map  ( a -- n1 n2 )                                   dup allocated>index swap allocated>chunks  ;                  -->                                                                                                                                                                                                                                                                                                                             ( create-heap )                                                 : locate-chunks  ( n1 -- n1 n2 0 | ior )                          0 tuck  ( n2 n1 count )                                         heap-chunks @ 0 do  ( n2 n1 count )                               i used-chunk? if  drop >r i 1+ r> 0  else  1+  then             2dup = if  drop swap 0 unloop exit  then                      loop  2drop drop -59  ;                                       : chunk>address  ( n1 -- a )  /chunk * heap-data +  ;           : (allocate)  ( n1 n2 -- a )                                      dup chunk>address >r                                            swap bounds do  i use-chunk  loop                               r>  ;                                                         -->                                                                                                                                                                                                                                                             ( create-heap )                                                 : create-heap ( n "name" -- )                                     create  bytes>chunks dup ,  0 ,                                         dup chunks>bytes reserve drop                                   /chunk * allot  ;                                     : allocate  ( n -- a ior )                                        bytes>chunks locate-chunks ?dup ?exit  (allocate) 0  ;        : free  ( a -- ior )                                              allocated>map dup >r                                            bounds do  i free-chunk  loop                                   r> heap-unused-chunks +! 0  ;                                 : empty-heap  ( -- )  heap-chunks @ 0 do  i free-chunk  loop  ; : .heap ( -- )                                                    heap-chunks @ 0 do                                                i used-chunk? if  'x'  else  '-'  then  emit                  loop  ;                                                       ( !s c!s )                                                      : !s  ( x a -- )  system-bank ! default-bank  ;                 : c!s  ( c ca -- )  system-bank c! default-bankget-default-bank set-default-bank )                           : get-default-bank  ( -- +n )  default-bank# c@  ;              : set-default-bank  ( +n -- )  default-bank# ccode-bank )                                                   need save-here  need call  need there                           variable cp  bank-start cp !  \ code pointer                    : code-here   ( -- a )  cp @  ;                                 : code-there  ( a -- )  cp !  ;                                 : code-allot  ( n -- )  cp +!  ;                                variable code-bank#  3 code-bank# !                             : code-bank  ( -- )  code-bank# @ bank  ;                       : code-bank{  ( -- )  save-here code-here there code-bank  ;    : }code-bank  ( -- )  default-bank restore-here  ;              : ?bank  ( -- )  bank-start here u< #-276 ?throw  ;             : code-bank-caller  ( i*x a "name" -- j*x )                       create ?bank ,                                                  does>  ( -- )  ( pfa ) @ code-bank call default-bank  ;       ?bank                                                                                                                           ( farallot farhl questionnextbank questionpreviousbank )        [unneeded] farallot                                             ?\ : farallot  ( n -- )  hp +!  ;  exit                         get-current also assembler definitions                          [unneeded] farhl ?\ ' far 2+ @ constant farhl  ( -- a )         [unneeded] questionnextbank                                     ?\ ' ?next-bank 2+ @ constant questionnextbank  ( -- a )        [unneeded] questionpreviousbank                                 ?\ ' ?previous-bank 2+ @ constant questionpreviousbank  ( -- a) previous set-current                                                                                                                                                                                                                                                                                                                                                                                                                                            ( far2@ far2! far@+ farc@+ far+! farc+! far2@+ )                [unneeded] far2@                                                ?\ : far2@  ( a -- d )  dup cell+ far@ swap far@  ;  exit       [unneeded] far2!                                                ?\ : far2!  ( d a -- )  swap over far! cell+ far!  ;  exit      [unneeded] far@+                                                ?\ : far@+  ( a -- a' x )  dup cell+ swap far@  ;  exit         [unneeded] farc@+                                               ?\ : farc@+  ( ca -- ca' c )  dup char+ swap farc@  ;  exit     [unneeded] far+!                                                ?\ : far+!  ( n a -- )  dup far@ rot + swap far!  ;  exit       [unneeded] farc+!                                               ?\ : farc+!  ( c a -- )  dup farc@ rot + swap farc!  ;  exit    [unneeded] 2@+ ?exit  need far2@                                : far2@+  ( a -- a' xd )  dup cell+ cell+ swap far2@  ;                                                                         ( move>far move<far cmove>far cmove<far )                       need ?(                                                         [unneeded] move>far ?(                                          : move>far  ( a1 a2 len -- )                                      2* bounds ?do  dup @ i far! cell+                                         cell +loop  drop  ;  exit ?)                        [unneeded] move<far ?(                                          : move<far  ( a1 a2 len -- )                                      2* bounds ?do  dup far@ i ! cell+                                         cell +loop  drop  ;  exit ?)                        [unneeded] cmove>far ?(                                         : cmove>far  ( ca1 ca2 len -- )                                   bounds ?do  dup c@ i farc! char+  loop  drop  ;  exit ?)      [unneeded] cmove<far ?(                                         : cmove<far  ( ca1 ca2 len -- )                                   bounds ?do  dup farc@ i c! char+  loop  drop  ;  exit ?)      ( @p !p )                                                       need ?(                                                         [unneeded] @p ?(                                                code @p  ( a -- b )                                               E1 c,  C5 c,  48 05 + c,  40 04 + c,  ED c, 68 c,               C1 c,  26 c, 00 c,  jppushhl,  end-code                       ?)                                                              [unneeded] !p ?(                                                code !p  ( b a -- )                                               E1 c,  D1 c,  C5 c,  48 05 + c,  40 04 + c,  ED c, 59 c,        C1 c,  jpnext,  end-code                                      ?)                                                                                                                                                                                                                                                                                                                              ( begin-module: begin-module public private end-module )        need get-order  need wordlist                                   get-order get-current                                           wordlist dup set-current  >order                                variable current-wid  variable module-wid                       : (begin-module)  ( -- wid )                                      get-current current-wid !                                       wordlist dup module-wid ! dup >order  ;                       set-current                                                     : public  ( -- )  current-wid @ set-current  ;                  : private  ( -- )  module-wid @ set-current  ;                  : begin-module:  ( "name" -- )                                    (begin-module) constant private  ;                            : begin-module  ( -- )  (begin-module) drop private  ;          : end-module  ( -- )  public previous  ;                        set-order                                                       ( internal end-internal unlink-internal hide-internal )         need ?(                                                         [unneeded] internal [unneeded] end-internal and ?(  need alias  ' current-latest alias internal  ( -- nt )                      ' hp@ alias end-internal  ( -- a ) exit ?)                      [unneeded] unlink-internal ?(  need internal  need >>link       [undefined] far-banks dup 0=                                    ?\ : unlink-internal  ( nt xtp -- )  >>link s!  ;               ?\ : unlink-internal  ( nt xtp -- )  >>link far!  ; ?)          [unneeded] hide-internal ?(                                     need internal  need name<name  need >>name                      : hide-internal  ( nt xtp -- )                                    >>name name<name  ( nt1 nt2 ) begin   2dup swap u>                                            while   dup hidden name<name                                    repeat  2drop  ; ?)                                                                             ( module end-module export )                                    need alias  need nextname                                       : module  ( "name" -- parent-wid )                                get-current  wordlist dup >r constant                           r@ >order  r> set-current  ;                                  : export  ( parent-wid "name" -- parent-wid )                     dup get-current  defined name>  parsed-name 2@ nextname         rot set-current alias  set-current  ;                         : end-module  ( parent-wid -- )  set-current previous  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( package public private end-package )                          need named-wid  need +order  need -order  need nextname         : package  ( "name" -- wid0 wid1 )                                get-current parse-name find-name ?dup                           if    name> execute                                             else  wordlist dup parsed-name 2@ nextname constant                            dup named-wid                                    then  dup set-current  dup +order  ;                          : public  ( wid0 wid1 -- wid0 wid1 )  over set-current  ;       : private ( wid0 wid1 -- wid0 wid1 )  dup set-current  ;        : end-package ( wid0 wid1 -- )  -order set-current  ;                                                                                                                                                                                                                                                                                                                                           ( privatize )                                                   need name<name  need abort"                                     variable private-start  variable private-stop                   : private{  ( -- )                                                current-latest private-start !  private-stop off  ;           : }private  ( -- )                                                private-stop @ abort" Extra }private"                           current-latest private-stop !  ;                              : privatize  ( -- )                                               private-start @ 0= abort" Missing private{"                     private-stop @ dup 0= abort" Missing }private"                  begin   dup private-start @ u>                                  while   dup hidden name<name                                    repeat  drop  private-start off  private-stop off  ;                                                                                                                                          ( transient end-transient forget-transient )                    need >>link  need there                                         variable old-dp  variable old-voc-link                          variable old-hp  variable old-limit   variable old-farlimit     variable old-current-latest                                     : transient  ( u1 u2 -- )                                         here old-dp !                                                   hp@ old-hp !    \ XXX TMP -- try 0, 2, 3                        voc-link @ old-voc-link !                                       current-latest old-current-latest !                             limit @ dup old-limit ! swap - dup limit ! there                farlimit @ dup old-farlimit ! swap - dup farlimit ! hp!  ;    -->                                                                                                                                                                                                                                                             ( transient )                                                   : end-transient  ( -- )                                           old-dp @ there                                                    hp@ old-hp @ hp! old-hp !   \ XXX TMP -- try 2, 3             old-farlimit @ farlimit !  old-limit @ limit !  ;             : forget-transient  ( -- )                                        old-voc-link @ voc-link !                                       old-current-latest @ old-hp @ >>link                            [defined] far-banks ?\ !s  ;                                    [undefined] far-banks ?\ far!  ;                                                                                                                                                                                                                                                                                                                                                                                                                              ( benschop-multitasker )                                        need user  user (wait)  ' noop (wait) !                         code switch                                                       rptr ldhl h push d push h clr sp addp exde uptr                 ldhl h dec d m ld h dec e m ld h dec begin h dec m d ld h       dec m e ld exde m a ld a or z until                             h inc m e ld h inc  m d ld h inc uptr sthl  exde ldsp           d pop h pop rptr  sthl jpix end-code                          27028 constant uptr                                             variable task-link                                              variable first-task                                             -->                                                                                                                                                                                                                                                                                                                             ( benschop-multitasker )                                        : task:  ( "name" -- )                                            create here $243 + , ( eerste adres ip)                         task-link @ ,  here task-link !  ( link naar vorige taak)       here first-task @ !  ( maak cirkel rond)                        1 c, 0 , ( nog niet starten&ruimte sp)                          uptr @ here $3C cmove  here 23c + here $0E + ! here             $013C + here $10 + ! $023C allot ( user-variabelen+stack)       smudge ] current @ context ! !csp -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( benschop-multitasker )                                          does> dup $15 + @ 4 - ( stackpointer)                           2dup swap 5 + !  2dup swap @ swap !  ( ip op stack)             over $17 + @ swap 2+ !  ( rp op stack)                          0 swap 4 + c! ( runnable) ;                                   : terminate 2 uptr @ 3 - c!  switch  ;                          : sleep     3 uptr @ 3 - c!  switch  ;                          : stop  ( tid -- )  4 swap 7 + c!  ;                            : start ( tid -- )  0 swap 7 + c!  ;                            : ;task compile terminate ?csp smudge [compile] [ ; immediate   task: main-task                                                  cr ." multi-tasking operating system"                           begin cr &> emit query                                          interpret state @ 0= if ." ok" then 0 until ;task              ' main-task 5 + first-task !  ' main-task 7 + task-link !       task-link @ first-task @ !  -->                                 ( benschop-multitasker )                                        code (start)                                                      ' switch h ldp# (wait) sthl first-task @ 5 +                    h ldp# uptr sthl h dec m d ld h dec m e ld exde ldsp d pop      h pop rptr sthl jpix end-code                                 : startup  ( -- )  main-task (start)  ;                         : tasks  ( -- )                                                   uptr @ dup 27039 = cr if  ." multitasking not active"  else     dup 10 - >name id. 6 emit ." active"                            begin  5 - @ 3 + dup uptr @ -  while                              cr dup 10 - >name id. 6 emit dup 3 -                            c@ dup 0 = if ." runnable" then                                    dup 1 = if ." new"      then                                    dup 2 = if ." terminated" then                                  dup 3 = if ." sleeping" then                                        4 = if ." stopped" then  repeat then drop  ;         ( jiffy! jiffy@ -jiffy )                                        need !dosvar  need @dosvar                                      : jiffy!  ( a -- )  16 !dosvar  ;                               : jiffy@  ( -- a )  16 @dosvar  ;                               : -jiffy  ( -- )  8335 jiffymuench-koh-multitasker )                                      get-current forth-wordlist set-current  need user               user tos       \ top of stack                                   user status    \ `branch` or `wake`                             user follower  \ address of next task's `status`                : pause  ( -- )                                                   rp@ sp@ tos !  follower @ >r  ; compile-only                  : wake  ( -- )                                                    r> userp !  \ `userp` points `follower` of current task         tos @ sp! rp!  ; compile-only                                 : stop  ( -- )  ['] branch status ! pause  ;                    : 's  ( tid a -- a' )                                             userP @ - swap  ( offset tid )  @ +  ;                        : sleep  ( tid -- )  status 's  ['] branch  swap !  ;           : awake  ( tid -- )  status 's  ['] wake  swap !  ;             -->                                                             ( muench-koh-multitasker )                                      : task  ( user_size ds_size rs_size "name" -- )                   create here >r  \ user_size ds_size rs_size  r: tid             0 ,  \ reserve space for `userp` pointer                        allot here cell- >r  ( user_size ds_size ) ( r: tid rp0 )       allot here cell- >r  ( user_size ) ( r: tid rp0 sp0 )           [ 6 cells ] literal + allot  \ minimum user variables           here cell-  ( user_pointer   ) ( r: tid rp0 sp0 )               r> , r> , ( store sp0 and rp0  )                                r@ !  \ store `userp` pointer                                   lastname r> taskname 's !  ;                                  -->                                                                                                                                                                                                                                                                                                                             ( muench-koh-multitasker )                                      : build  ( tid -- )                                               dup sleep                       \ sleep new task                follower @ over follower 's !   \ link new task                 status 's follower !  ;         \ link old task               : activate  ( tid -- )                                            dup 2@        ( tid sp rp )                                     r> over !      \ save entry at rp                               over !         \ save rp at sp                                  over tos 's !  \ save sp in tos                                 awake ; compile-only                                          -->                                                                                                                                                                                                                                                                                                                             ( muench-koh-multitasker )                                      : tasks  ( -- )                                                   follower      \ current task's follower                         begin                                                             cr dup [ taskname follower - ] literal + @ .name                dup cell- @ ['] wake =                                          if  ." awaked "  else  ." sleeping "  then                      @ cell+     \ next task's follower                                dup follower =                                              until drop cr ;                                               set-current                                                                                                                                                                                                                                                                                                                                                                                     ( mini-oof )                                                    need alias                                                      : method  ( m v "name" -- m' v )                                  create  over , swap cell+ swap                                  does>  ( ... o -- ... )  @ over @ + @ execute  ;              : var  ( m v size "name" -- m v' )                                create  over , +  does>  ( o -- addr ) ( o pfa )  @ +  ;      : class  ( class -- class methods vars )  dup 2@  ;             : end-class  ( class methods vars "name" -- )                     create  here >r , dup , 2 cells ?do ['] noop , 1 cells +loop    cell+ dup cell+ r> rot @ 2 cells /string move  ;              : defines  ( xt class "name" -- )  ' >body @ + !  ;             : new  ( class -- o )  here over @ allot swap over !  ;         : ::  ( class "name" -- )  ' >body @ + @ compile,  ;            create object  1 cells , 2 cells ,                              ' noop alias mini-oof                                           ( defined? parse-char parse-all )                               [unneeded] defined?                                             ?\ : defined?  ( ca len -- f )  undefined? 0=  ; exit           [unneeded] parse-char                                           ?\ : parse-char  ( "c"  -- c )  stream drop c@ 1 parsed  ; exit need ?(  [unneeded] parse-all ?(                                : parse-all  ( "ccc<eol>" -- ca len )                             stream dup parsed save-stringexecute-parsing string>source evaluate )                      need ?(                                                         [unneeded] string>source ?(                                     : string>source  ( ca len -- )                                    blk off  (source-id) on  set-source  ; ?)                     [unneeded] execute-parsing ?( need need-here                    need-here string>source                                         : execute-parsing  ( ca len xt -- )                               nest-source >r string>source r> execute unnest-source  ; ?)   [unneeded] evaluate ?(  need need-here                          need-here execute-parsing                                       : evaluate  ( i*x ca len -- j*x )                                 ['] interpret execute-parsing  ; ?)                                                                                                                                                                                                                           ( char [char] word )                                            [unneeded] char                                                 ?\ : char  ( "name" -- c )  parse-name drop c@  ; exit          need ?(  [uneeded] [char]  ?(                                   : [char]  ( "name" -- c )                                         char postpone cliteral  ; immediate compile-only  ?)          [unneeded] word ?(                                              : word  ( c "<chars>ccc<char>" -- ca )                            dup  stream                 ( c c ca len )                      dup >r   rot skip           ( c ca' len' )                      over >r  rot scan           ( ca" len" )                        dup if  char-  then         \ skip trailing delimiter           r> r> rot -   >in +!        \ update `>in`                      tuck -  ( ca' len ) here place  here ( ca )                     bl over count + c!  ; ?)    \ append trailing blank                                                                           ( save-input restore-input )                                    : save-input ( -- xn ... x1 n )                                   source-id 0>                                                    if tib #tib @ 2dup c/l 2 + allocate throw dup >r swap cmove        r> to tib  >in @                                                source-id file-position throw  5                             else blk @ >in @ 2 then  ;                                    : restore-input ( xn ... x1 n -- f )  source-id 0>                if dup 5 <> if 0 ?do drop loop -1 exit then                        drop source-id reposition-file ?dup                             if >r 2drop drop r> exit then                                   >in ! #tib ! to tib false                                    else dup 2 <> if 0 ?do drop loop -1 exit then                      drop >in ! blk ! false                                       then  ;                                                                                                                       ( black blue red magenta green cyan yellow white )              0 cconstant black    1 cconstant blue   2 cconstant red         3 cconstant magenta  4 cconstant green  5 cconstant cyan        6 cconstant yellow   7 cconstant whitepapery brighty flashy )                                       [unneeded] papery                                               ?\ : papery   ( color -- paper-attribute )           8 *  ;     [unneeded] brighty                                              ?\ : brighty  ( attribute -- brighty-attribute )   64 or  ;     [unneeded] flashy                                               ?\ : flashy   ( attribute -- flashy-attribute )   128 orcolor@ color! color-mask@ color-mask! color 2color )          [unneeded] color@                                               ?\ need os-attr-t  : color@  ( -- b )  os-attr-t c@  ;  exit    [unneeded] color!                                               ?\ need os-attr-t  : color!  ( b -- )  os-attr-t c!  ;  exit    [unneeded] color-mask@ dup ?\ need os-mask-t                    ?\ : color-mask@  ( -- b )  os-mask-t c@  ;  exit               [unneeded] color-mask! dup ?\ need os-mask-t                    ?\ : color-mask!  ( b -- )  os-mask-t c!  ;  exit               need ?(  [unneeded] color ?(  need color!                       : color  ( b "name" -- )                                          create c,  does>  ( -- ) ( pfa ) c@ color!  ;  exit ?)        need ?(  [unneeded] 2color ?(  need color!  need color-mask!    : 2color  ( b1 b2 "name" -- )                                     create 2,  does>  ( -- ) ( pfa ) 2@ color! color-mask!  ; ?)                                                                  ( permcolor@ permcolor! permcolor-mask@ permcolor-mask! )       need os-attr-p  need os-mask-p                                  : permcolor@  ( -- b )  os-attr-p c@  ;                         : permcolor!  ( b -- )  os-attr-p c!  ;                         : permcolor-mask@  ( -- b )  os-mask-p c@  ;                    : permcolor-mask!  ( b -- )  os-mask-p cpermcolor 2permcolor )                                        need permcolor!  need permcolor-mask!                           : permcolor  ( b "name" -- )                                      create ,                                                        does>  ( -- ) ( pfa ) @ permcolor!  ;                         : 2permcolor  ( b1 b2 "name" -- )                                 create 2,                                                       does>  ( -- ) ( pfa ) 2@ permcolor! permcolor-maskattr>paper paper>attr paper@ paper! ink@ ink! )               need color@  need color!                                        code attr>paper  ( n1 -- n2 )                                     E1 c, 7D c, E6 c, %00111000 c,                                  CB c, 3F c, CB c, 3F c, CB c, 3F c, pusha jp,  end-code       code paper>attr  ( n1 -- n2 )                                     E1 c, 7F c, E6 c, %00000111 c,                                  CB c, 27 c, CB c, 27 c, CB c, 27 c, pusha jp,  end-code       : paper@  ( -- b )  color@ attr>paper  ;                        : paper!  ( b -- )                                                paper>attr color@ %11000111 and or color!  ;                  : ink@  ( -- b )  color@ %00000111 and  ;                       : ink!  ( b -- )                                                  %00000111 and color@ %11111000 and or color!  ;                                                                                                                                               ( bright@ bright! flash! flash@ )                               need color@  need color!                                        : bright@  ( -- f )                                               color@ %01000000 and 0=  ;                                    : bright!  ( f -- )                                               %01000000 and color@ %10111111 and or color!  ;               : flash@  ( -- f )                                                color@ %10000000 and 0=  ;                                    : flash!  ( f -- )                                                %10000000 and color@ %01111111 and or color!  ;                                                                                                                                                                                                                                                                                                                                                                                                               ( inverse overprint )                                           code inverse  ( f -- )                                            E1 c,  78 04 + c,  B0 05 + c,  28 c, 06 c,                      FD c, CB c, 57 c, C6 08 02 * + c,  jpnext,                      FD c, CB c, 57 c, 86 08 02 * + c,  jpnext,  end-code          code overprint  ( f -- )                                          E1 c,  78 04 + c,  B0 05 + c,  28 c, 06 c,                      FD c, CB c, 57 c, C6 08 00 * + c,  jpnext,                      FD c, CB c, 57 c, 86 08 00 * + c,  jpnext,  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( printer tabulate )                                            [unneeded] printer                                              ?\ : printer  ( -- )  3 channel printing on  ;  exit            need ?(                                                         [unneeded] tabulate ?(                                          need column                                                     variable /tabulate  8 /tabulate !                               : tabulate  ( -- )  column 1+ /tabulate @ tuck mod - spacescr' 'tab' 'bs' crs tab tabs backspace backspaces )           [unneeded] 'tab' ?\ 6 constant 'tab'  exit                      [unneeded] 'bs' ?\ 8 constant 'bs'  exit                        [unneeded] 'cr' ?\ 13 constant 'cr'  exit                       [unneeded] tab                                                  ?\ need 'tab'  : tab  ( -- )  'tab' emit  ;  exit               [unneeded] backspace                                            ?\ need 'bs'  : backspace  ( -- )  'bs'  emit  ;  exit          [unneeded] crs                                                  ?\ need 'cr'  : crs   ( n -- )  'cr'  emits  ;  exit            [unneeded] tabs                                                 ?\ need 'tab'  : tabs  ( n -- )  'tab' emits  ;  exit           [unneeded] backspaces                                           ?\ need 'bs'  : backspaces    ( n -- )  'bs'  emits  ;                                                                                                                                          ( column last-column row last-row at-x at-y )                   [unneeded] column                                               ?\ : column  ( -- col )  xy drop  ;  exit                       [unneeded] last-column                                          ?\ need column  : last-column  ( -- row  )  column 1-  ;  exit  [unneeded] row                                                  ?\ : row  ( -- row )  xy nip  ;  exit                           [unneeded] last-row                                             ?\ need row  : last-row  ( -- row  )  row 1-  ;  exit           [unneeded] at-x                                                 ?\ need row  : at-x  ( col -- )  row at-xy  ;  exit             [unneeded] at-y                                                 ?\ need column  : at-y  ( row -- )  column swap at-xy  ;  exit                                                                                                                                                                                                  ( print )                                                       need last-row  need /name                                       variable #printed   \ Printed chars in the current line.        variable #indented   \ Indented chars in the current line.      : printed+  ( u -- )  #printed +!  ;                            : indented+  ( u -- )  #indented +!  ;                          : (.word) ( ca len -- )  dup printed+ type  ;                   : .char  ( c -- )  emit 1 printed+  ;                           : not-at-home?  ( -- 0f )  xy +  ;                              : no-printed  ( -- )  #printed off #indented off  ;             : print-home  ( -- )  home no-printed  ;                        : print-page  ( -- )  page print-home  ;                        -->                                                                                                                                                                                                                                                             ( print )                                                       : print-start-of-line  ( -- )                                     #printed @ trm+move-cursor-left no-printed  ;                 : at-last-start-of-line?  ( -- f )                                xy last-row = swap 0= and  ;                                  : not-at-start-of-line?  ( -- f )  column 0<>  ;                : print-cr?  ( -- f )                                             not-at-home? not-at-start-of-line? and                          ;                                                             defer (print-cr) ' (print-cr) ' cr defer!                       : print-cr print-cr? ?? (print-cr) no-printed ;                 variable print-width                                            -->                                                                                                                                                                                                                                                             ( print )                                                       : previous-word?  ( -- f )  #printed @ #indented @ >  ;         : ?space  ( -- ) previous-word? if  bl .char  then  ;           : current-print-width  ( -- u )                                   print-width @ ?dup 0= ?? cols  ;                              : too-long?  ( u -- f )                                           1+ #printed @ + current-print-width >  ;                      : .word  ( ca len -- )                                            dup too-long? if  print-cr  else  ?space  then  (.word)  ;    -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( print )                                                       : (print-indentation)  ( u -- )                                   dup trm+move-cursor-right dup indented+ printed+  ;           : print-indentation  ( u -- )  ?dup ?? (print-indentation)  ;   : >word  ( ca1 len1 ca2 len2 -- ca2 len2 ca1 len4 )               tuck 2>r -  2r> 2swap  ;                                      : first-word  ( ca1 len1 -- ca2 len2 ca3 len3 )  /name >word  ; : (print)  ( ca1 len1 -- ca2 len2 )  first-word .word  ;        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( print )                                                       : print  ( ca len --)                                             begin  dup   while  (print)  repeat  2dropfartype type-ascii fartype-ascii )                            need ?(  [unneeded] fartype ?(                                  : fartype  ( ca len -- )                                          bounds ?do  i farc@ emit  loop  drop  ;  exit ?)              [unneeded] type-ascii ?(  need >printable-ascii-char            : type-ascii  ( ca len -- )                                       bounds ?do  i c@ >printable-ascii-char emit  loop  ;  exit ?) [unneeded] fartype-ascii ?(  need >printable-ascii-char         : fartype-ascii  ( ca len -- )                                    bounds ?do  i farc@ >printable-ascii-char emit  loop  ; ?)                                                                                                                                                                                                                                                                                                                                                                                                    ( drop-type padding-spaces type-left )                          [unneeded] drop-type                                            ?\ : drop-type  ( ca len x -- )  drop type  ;  exit             [unneeded] padding-spaces                                       ?\ : padding-spaces  ( len1 len2 -- )  swap - 0 max spaces  ;   [unneeded] type-left ?(  need padding-spaces                    : type-left  ( ca len1 len2 -- )                                  2dup 2>r min type 2r> padding-spacestype-right )                                                  need drop-type  need <=>                                        : type-right-crop  ( ca len1 len2 -- )                            over swap - /string type  ;                                   : type-right-fit  ( ca len1 len2 -- )  over - spaces type  ;          ' type-right-fit ,                                        here  ' drop-type ,                                                   ' type-right-crop ,                                       constant type-right-cases                                       : type-right  ( ca len1 len2 -- )                                 2dup <=> cells type-right-cases + perform  ;                                                                                                                                                                                                                                                                                                                                                  ( type-center )                                                 need drop-type  need <=>                                        : type-center-fit  ( ca len1 len2 -- )                            over - 2 /mod dup >r + spaces type r> spaces  ;               : type-center-crop  ( ca len1 len2 -- )                           over swap - 2 /mod dup >r + /string r> - type  ;                    ' type-center-fit ,                                       here  ' drop-type ,                                                   ' type-center-crop ,                                      constant type-center-cases                                      : type-center  ( ca len1 len2 -- )                                2dup <=> cells type-center-cases + perform  ;                                                                                                                                                                                                                                                                                 ( window set-window )                                           need +field-opt-0124 need cfield:                               0 cfield: ~wx         \ x cursor coordinate                       cfield: ~wy         \ y cursor coordinate                       cfield: ~wx0        \ window left x coordinate on screen        cfield: ~wy0        \ window top y coordinate on screen         cfield: ~wcolumns   \ width                                     cfield: ~wrows      \ heigth                                  constant /window                                                variable current-window                                         : wx        ( -- ca )  current-window @ ~wx        ;            : wy        ( -- ca )  current-window @ ~wy        ;            : wx0       ( -- ca )  current-window @ ~wx0       ;            : wy0       ( -- ca )  current-window @ ~wy0       ;            : wcolumns  ( -- ca )  current-window @ ~wcolumns  ;            : wrows     ( -- ca )  current-window @ ~wrows     ;  -->       ( window set-window )                                           : window  ( "name" -- )                                           create  here  /window allot  current-window !                   does>   ( -- )  ( pfa ) current-window !  ;                   : set-window  ( x0 y0 columns rows -- )                           wrows c!  wcolumns c!  wy0 c! wx0 cwspace wemit wfreecolumns (wat-xy wat-xy at-wxy )             [unneeded] wspace                                               ?\ need wemit  : wspace  ( -- )  bl wemit  ;  exit              need ?(                                                         [unneeded] wemit ?(  need char>string  need wtype               : wemit  ( c -- )  char>string wtype  ;  exit ?)                [unneeded] wfreecolumns ?(  need window                         : wfreecolumns  ( -- n )  wcolumns c@ wx c@ -  ;  exit ?)       [unneeded] (wat-xy ?(  need window  need under+                 : (wat-xy  ( x y -- )  wx0 c@ under+ wy0 c@ + at-xy  ;          exit ?)                                                         [unneeded] wat-xy ?(  need window  need (wat-xy                 : wat-xy  ( x y -- )  2dup wy c! wx c!  (wat-xy  ;  exit ?)     [unneeded] at-wxy ?(  need window  need (wat-xy                 : at-wxy  ( -- )  wx c@ wy c@ (wat-xy  ;  exit ?)                                                                               ( whome wcr ?wcr reset-window wcls )                            [unneeded] whome                                                ?\ need wat-xy  : whome  ( -- )  0 0 wat-xy  ;  exit            need ?(  [unneeded] wcr ?(  need window  need whome             : wcr  ( -- )  wy c@ dup wrows c@ 1- =                                         if  drop whome exit  then  1+ wy c! 0 wx c!  ;   exit ?)                                                         [unneeded] ?wcr ?(  need window  need wcr                       : ?wcr  ( -- )  wx c@ 0= ?exit wcr  ;  exit ?)                  [unneeded] reset-window ?(                                      need columns  need rows  need set-window                        : reset-window  ( -- )  0 0 columns rows set-window  ;  exit ?) [unneeded] wcls ?(  need window  need whome  need ruler         : wcls  ( -- )  bl wcolumns c@ ruler  ( ca len )                  wy0 c@ wrows c@ bounds ?do   2dup wx0 c@ i at-xy type                                  loop  2drop  whome  ;  exit ?)         ( wtype )                                                       need window need at-wxy need wfreecolumns need wcr need ?wcr    : +wc  ( n -- )                                                   wx c@ + dup wx c! wcolumns c@ = if  wcr  then  ;              variable wtyped                                                 : wtype+  ( ca len -- )  tuck type +wc  wtyped on  ;            : /wtype  ( ca len len1 n -- ca' len' )                           >r >r over r> at-wxy wtype+ r> /string  ;                     : wtype  ( ca len -- )  wtyped off                                begin  dup wfreecolumns >  while                                  0 wfreecolumns do  over i + c@ bl =                                                if  i dup 1+ /wtype leave  then                             -1 +loop                                         wtyped @ if    ?wcr wtyped off                                           else  wfreecolumns dup /wtype  then                  repeat  at-wxy wtype+  ;                                      ( rnd random random-range )                                     need ?(                                                         [unneeded] rnd [unneeded] random and ?(                         2variable rnd-seed  $0111 rnd-seed !                            : rnd  ( -- u )                                                   rnd-seed 2@ $62DC um* rot 0 d+ over rnd-seed 2!  ;            : random  ( n -- 0..n-1 )  rnd um* nip  ;  exit ?)              [unneeded] random-range  ?(  need random                        : random-range ( n1 n2 -- n3 ) over - 1+ random +  ;            ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( fast-rnd fast-random )                                        need z80-asm  need os-seed                                      code fast-rnd  ( -- u )                                           os-seed fthl  hl de ldp                                         hl addp  de addp  hl addp  de addp  hl addp                     de addp  hl addp  hl addp  hl addp  hl addp  de addp            h inc  hl incp  os-seed sthl  jppushhl,  end-code             : fast-random  ( n -- 0..n-1 )  fast-rnd um* nipcrnd crandom )                                                need os-seed                                                    code crnd  ( -- b )                                               os-seed fthl                                                    ED c, 5F c,  a d ld  m e ld  de addp  l add  h xor              os-seed sthl  pusha jp  end-code                              : crandom  ( b -- 0..b-1 )  crnd um* nip|1 randomize randomize0 )                                   [unneeded] -1|1                                                 ?\ need random  : -1|1  ( -- -1|1 )  2 random 2* 1-  ;  exit    [unneeded] randomize                                            ?\  need os-seed  : randomize  ( n -- )  os-seed !  ;  exit     [unneeded] randomize0 ?exit                                     need os-frames  need randomize                                  : randomize0  ( n -- )                                            ?dup 0=  if  os-frames @  then  randomize  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( n>r )                                                         need z80-asm                                                    code n>r  ( x1..xn n -- ) ( R: -- x1..xn n )                      exx                                                             bc pop  0000 bc stp  |mark                                      rp fthl                                                         begin  bc tstp  nz while                                          de pop  hl decp  d m ld  hl decp  e m ld  bc decp             repeat                                                          0000 de ldp# |resolve                                           hl decp  d m ld  hl decp  e m ld                                rp sthl  exx  jpnext,                                           end-code                                                                                                                                                                                                                                                      ( nr> )                                                         need z80-asm                                                    code nr>  ( -- x1..xn n ) ( R: x1..xn n -- )                      exx                                                             rp fthl                                                         m c ld  hl incp  m b ld  hl incp                                0000 bc stp  |mark                                              begin  bc tstp  nz while                                          m e ld  hl incp  m d ld  hl incp  de push  bc decp            repeat                                                          rp sthl  exx                                                    0000 hl ldp# |resolve                                           jppushhl,                                                       end-code                                                                                                                                                                                      ( rdepth r'@ 2rdrop dup>r )                                     [unneeded] rdepth                                               ?\ : rdepth  ( -- n )  rp@ rp0 @ - [ cell negate ] literal /  ; need ?(                                                         [unneeded] r'@ ?(                                               : r'@  ( -- x1 ) ( R: x1 x2 -- x1 x2 )                            r> 2r@ drop swap >r  ;  exit ?)                               [unneeded] 2rdrop ?(                                            code 2rdrop  ( R: x1 x2 -- )                                      2A c, rp , 11 c, 02 cells , 19 c, 22 c, rp , jpnext, end-code exit ?)                                                         [unneeded] dup>r ?(                                             code dup>r  ( x -- x ) ( R: -- x )                                D1 c, D5 c, ' >r 1+ jp, end-code ?)                                                                                                                                                           ( mode32 )                                                      need columns  need rows  need set-font  need set-mode-output    : mode32  ( -- )                                                  [ latestxt ] literal current-mode !                             15360 set-font  2548 set-mode-output                            32 to columns  24 to rows                                       ['] mode32-xy ['] xy defer!                                     ['] mode32-at-xy ['] at-xy defer!  ;                          ' mode32 ' default-mode defer!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( mode42 banked-mode42 )                                        need mode32  need <file-as-is need (mode42 need ?(              [unneeded] mode42 ?(  need set-mode-output                      : mode42  ( -- )  [ latestxt ] literal current-mode !                             (mode42 set-mode-output  ;                    get-drive 1 set-drive  s" pr42.bin" <file-as-is throw                                  s" ea5a.f42" <file-as-is throw                       set-drive                                           exit ?)                                                         need set-banked-mode-output  need code-bank                     : banked-mode42  ( -- )  [ latestxt ] literal current-mode !                             (mode42 set-banked-mode-output  ;      code-bank{  get-drive 1 set-drive                                           s" pr42.bin" <file-as-is throw                                  s" ea5a.f42" <file-as-is throw                                  set-drive  }code-bank                               ( (mode42 )                                                     need columns  need rows  need set-font                          [defined] (at-xy)                                               ?\ : (at-xy)  ( col row -- )  22 emit swap emit emit  ;         : mode42-xy  ( -- col row )  0 0  ;  \ XXX TODO                 : (mode42  ( -- a )                                               42 to columns  24 to rows                                       ['] mode42-xy ['] xy defer!                                     ['] (at-xy) ['] at-xy defer!                                    [ 64600 256 - ] literal set-font 63900  ;                                                                                                                                                                                                                                                                                                                                                                                                                     ( mode64 )                                                      need mode32  need <file-as-is  need 4x8font                     get-drive 1 set-drive                                           s" pr64.bin" <file-as-is throw                                  set-drive                                                       [defined] (at-xy)                                               ?\ : (at-xy)  ( col row -- )  22 emit swap emit emit  ;         : mode64-xy  ( -- col row )  0 0  ;  \ XXX TODO                 : mode64  ( -- )                                                  [ latestxt ] literal current-mode !                             64 to columns  24 to rows                                       ['] mode64-xy ['] xy defer!                                     ['] (at-xy) ['] at-xy defer!                                    4x8font set-font  60000 set-mode-output  ;                                                                                                                                                    ( mode64 )                                                      need z80-asm                                                    create mode64-at-flag 0 c,                                      create mode64-column 0 c,                                       create mode64-row 0 c,                                          variable mode64-chars                                           code mode64-emit  ( -- )                                          b a ld                                                          here 1+ 0 unresolved !  \ address of at_flag                    0 a ld#  and a                                                  z if  FF a ld#  then                                            end-code                                                      : mode64  ( -- )                                                  mode64-chars @ set-font  mode64-emit set-mode-outupt            ['] (at-xy) ['] at-xy defer!  ;                                                                                               ( 4x8font )                                                     create 4x8font  hex                                             02 c, 02 c, 02 c, 02 c, 00 c, 02 c, 00 c,  \  !                 52 c, 57 c, 02 c, 02 c, 07 c, 02 c, 00 c,  \ "#                 25 c, 71 c, 62 c, 32 c, 74 c, 25 c, 00 c,  \ $%                 22 c, 42 c, 30 c, 50 c, 50 c, 30 c, 00 c,  \ &'                 14 c, 22 c, 41 c, 41 c, 41 c, 22 c, 14 c,  \ ()                 20 c, 70 c, 22 c, 57 c, 02 c, 00 c, 00 c,  \ *+                 00 c, 00 c, 00 c, 07 c, 00 c, 20 c, 20 c,  \ ,-                 01 c, 01 c, 02 c, 02 c, 04 c, 14 c, 00 c,  \ ./                 22 c, 56 c, 52 c, 52 c, 52 c, 27 c, 00 c,  \ 01                 27 c, 51 c, 12 c, 21 c, 45 c, 72 c, 00 c,  \ 23                 57 c, 54 c, 56 c, 71 c, 15 c, 12 c, 00 c,  \ 45                 17 c, 21 c, 61 c, 52 c, 52 c, 22 c, 00 c,  \ 67                 22 c, 55 c, 25 c, 53 c, 52 c, 24 c, 00 c,  \ 89                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 22 c, 00 c, 00 c, 22 c, 02 c,  \ :;                 00 c, 10 c, 27 c, 40 c, 27 c, 10 c, 00 c,  \ <=                 02 c, 45 c, 21 c, 12 c, 20 c, 42 c, 00 c,  \ >?                 23 c, 55 c, 75 c, 77 c, 45 c, 35 c, 00 c,  \ @A                 63 c, 54 c, 64 c, 54 c, 54 c, 63 c, 00 c,  \ BC                 67 c, 54 c, 56 c, 54 c, 54 c, 67 c, 00 c,  \ DE                 73 c, 44 c, 64 c, 45 c, 45 c, 43 c, 00 c,  \ FG                 57 c, 52 c, 72 c, 52 c, 52 c, 57 c, 00 c,  \ HI                 35 c, 15 c, 16 c, 55 c, 55 c, 25 c, 00 c,  \ JK                 45 c, 47 c, 45 c, 45 c, 45 c, 75 c, 00 c,  \ LM                 62 c, 55 c, 55 c, 55 c, 55 c, 52 c, 00 c,  \ NO                 62 c, 55 c, 55 c, 65 c, 45 c, 43 c, 00 c,  \ PQ                 63 c, 54 c, 52 c, 61 c, 55 c, 52 c, 00 c,  \ RS                 75 c, 25 c, 25 c, 25 c, 25 c, 22 c, 00 c,  \ TU                 -->                                                             ( 4x8font )                                                     55 c, 55 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ VW                 55 c, 55 c, 25 c, 22 c, 52 c, 52 c, 00 c,  \ XY                 73 c, 12 c, 22 c, 22 c, 42 c, 72 c, 03 c,  \ Z[                 46 c, 42 c, 22 c, 22 c, 12 c, 12 c, 06 c,  \ \]                 20 c, 50 c, 00 c, 00 c, 00 c, 00 c, 0F c,  \ ^_                 20 c, 10 c, 03 c, 05 c, 05 c, 03 c, 00 c,  \ ?a                 40 c, 40 c, 63 c, 54 c, 54 c, 63 c, 00 c,  \ bc                 10 c, 10 c, 32 c, 55 c, 56 c, 33 c, 00 c,  \ de                 10 c, 20 c, 73 c, 25 c, 25 c, 43 c, 06 c,  \ fg                 42 c, 40 c, 66 c, 52 c, 52 c, 57 c, 00 c,  \ hi                 14 c, 04 c, 35 c, 16 c, 15 c, 55 c, 20 c,  \ jk                 60 c, 20 c, 25 c, 27 c, 25 c, 75 c, 00 c,  \ lm                 00 c, 00 c, 62 c, 55 c, 55 c, 52 c, 00 c,  \ no                 00 c, 00 c, 63 c, 55 c, 55 c, 63 c, 41 c,  \ pq                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 53 c, 66 c, 43 c, 46 c, 00 c,  \ rs                 00 c, 20 c, 75 c, 25 c, 25 c, 12 c, 00 c,  \ tu                 00 c, 00 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ vw                 00 c, 00 c, 55 c, 25 c, 25 c, 53 c, 06 c,  \ xy                 01 c, 02 c, 72 c, 34 c, 62 c, 72 c, 01 c,  \ z{                 24 c, 22 c, 22 c, 21 c, 22 c, 22 c, 04 c,  \ |}                 56 c, A9 c, 06 c, 04 c, 06 c, 09 c, 06 c,  \ ~?                 decimalcolumns rows set-mode-output set-font )                       [unneeded] columns [unneeded] rows and                          ?\ need value  32 value columns  24 value rows  exit            [unneeded] set-font                                             ?\ need os-chars  : set-font  ( a -- )  os-chars !  ;  exit     need os-chans                                                   : set-mode-output  ( a -- )                                       os-chans @ 2dup ! 2dupset-banked-mode-output )                                      need set-mode-output  need >body                                0 constant (output-routine)                                     code (banked-mode-output)  ( -- )                                 C5 c,  CD c, 0 ,                                                here cell- ' (output-routine) >body !                           C1 c,  DD c, 21 c, next ,  jpnext,  end-code                  : set-banked-mode-output  ( a -- )                                (output-routine) !  \ patch `(banked-mode-output)`              ['] (banked-mode-output) set-mode-output  ;                                                                                                                                                                                                                                                                                                                                                                                                                   ( fzx-test )                                                    need fzx-emit  need <file                                       create font  2048 allot                                         1 set-drive  font 0 s" lettra.fzx" <file                        font fzx-font !                                                 : zxtype  ( ca len -- )  bounds do  i c@ fzx-emit  loop  ;      cr .( fzx-emit is ready ) cr                                    ' (fzx-emit) hex                                                cr .( Code start:   ) dup u.                                    cr .( Code length:  ) ' fzx-emit swap - u.                      cr                                                                                                                                                                                                                                                                                                                                                                                              ( fzx-mode )                                                    need fzx-emit                                                   : fzx-at-xy  ( gx gy -- )  fzx-y c! fzx-x c!  ;                 : fzx-cr  ( -- )  13 fzx-emit  ;                                : fzx-home  ( -- )  0 191 fzx-at-xy  ;                          : fzx-mode  ( -- )                                                ['] fzx-emit ['] emit defer!                                    ['] fzx-at-xy ['] at-xy defer!                                  ['] fzx-home ['] home defer!                                    ['] fzx-cr ['] cr defer!  ;                                                                                                                                                                                                                                                                                                                                                                                                                                   ( fzx-emit )                                                    create fzx-font 60000 ,  \ font address                         0 constant margin  \ XXX TODO -- make it a variable             create fzx-variables                                              here 0 c, \ fzx-flags                                           here margin c, \ fzx-x (margin)                                 here 191 c,  \ fzx-y                                          constant fzx-y  constant fzx-x  constant fzx-flagsfzx-emit )                                                    need z80-asm  need scroll-1px-up                                create (fzx-emit)  ( -- )                                         asm                                                             fzx-flags hl ldp#  \ initial address of local variables         m dec  \ check fzx-flags value by decrementing it               p' if'  \ not expecting a regular character                       nz if  \ not expecting the column                                 cpl  C0 add#  \ now A = 191 - char                              hl incp                                                       then                                                            hl incp  a m ld  ret                                          then'                                                         -->                                                                                                                                                                                             ( fzx-emit )                                                      16 cp#  z if  02 m ld#  ret  then                               m inc  \ increment fzx-flags to restore previous value (0)      hl incp  \ point to fzx-x XXX why?                              fzx-font bc ftp  bc push  ix pop                                0D cp#  0000 jpz |mark 0 unresolved !                           a dec  2 ix cpxfzx-emit )                                                      cy if  \ jr nc, UNDEF_CHAR                                        1F sub#  \ now A = char - 32                                    cy if  \ jr nc, PRINT_CHAR                                    2swap  \ exchange the two `if`, because they are not nested     then                                                            '?' 20 - a ld#  \ print '?' instead of invalid character          thenfzx-emit )                                                      a inc                                                           a l ld  00 h ld#  hl de ldp  hl addp  de addp                   bc addp                                                           r now HL references offset/kern in char table                 m e ld  hl incp  m a ld  3F and#  a d ld                        m xor  rlca  rlca  a c ldfzx-emit )                                                      hl push  de addp  hl decp                                       exsp                                                            hl incp                                                         a xor  rld                                                      af push  rld                                                    0000 sta  |mark 1 unresolved !                                  08 cp#  \ check if char width is larger than 8 bits             rld  \ restore char shift/width                               -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      000E de ldp#  nc if  234E de ldp#  then                         0000 de stp  |mark 2 unresolved !                               hl incp  m a ld                                                 r add  a e ldfzx-emit )                                                      fzx-x hl ldp#  m a ld  c sub                                    cy if  a xor  then                                              a m ld  0000 fta  |mark 3 unresolved !                          m add                                                           0000 callc |mark 4 unresolved !  \ newline callc              -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      fzx-x bc ftp                                                    01 a ld#                                                        00 ix subx  \ now A = 1 - height                                b add  \ now A = fzx-y - height + 1                             nc if  \ end of screen                                            hl pop  hl pop  ret  \ restore the stack and exit             then                                                            af pop  BF add#                                                 22AA 2+ call  exaf                                              here jr >relmark 5 unresolved !  \ jr CHK_LOOP                -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      begin  \ main loop                                                m d ld  \ now D = 1st byte from char definition grid            hl incp  \ next character definition                            2 unresolved @ >resolve                                         m c ld  hl incp                                                 a xor  exsp  exaf                                               nz if                                                             a b ld  exaf                                                    begin  d srl  c rr  rra  step                                 then                                                        -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        l inc  l inc   m or  a m ld  \ put A on screen                  l dec  c a ld  m or  a m ld  \ put C on screen                  l dec  d a ld  m or  a m ld  \ put D on screen                  h inc  \ move screen address by 1 pixel down                    h a ld  07 and#                                                 z if  l a ld  20 add#  a l ld                                     nc if  h a ld  08 sub#  a h ld  then                          then \ CHK_LOOP:                                                5 unresolved @ >relresolve                                  -->                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        exsp  \ now HL = char definition address                        l a ld                                                          e cp  \ check if reached next char definition address         z until  \ loop otherwise (to MAIN_LOOP)                        hl pop  \ discard screen address from stack                     fzx-x hl ldp#                                                   m a ld  \ now A = column                                      \ WIDTH1:                                                         here 1+ dup 1 unresolved @ ! 3 unresolved @ !                   00 add#  \ now A = column + (width - 1)                         scf                                                             01 ix adcx  \ now A = column + width + tracking               -->                                                                                                                                                                                             ( fzx-emit )                                                      cy if                                                             0 unresolved @ >resolve  4 unresolved @ >resolve                margin m ld#  \ move to initial column at left margin           hl incp                                                         m a ld  \ now A = line                                          00 ix subx  \ now A = line - height                           then                                                            a m ld  \ move down a few pixels specified by height            ret                                                             end-asm                                                       -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                    code fzx-emit  ( c -- )                                           hl pop  bc push                                                 l a ld  ' (fzx-emit) call                                       bc pop  next ix ldp#  jpnext,                                   end-codeedit-sound )                                                  get-current  forth-wordlist set-current                         need :noname  need c1+!  need c1-!  need inverse  need case     need value  need play  [defined] /sound ?\ 14 constant /sound   wordlist constant edit-sound-wordlist                           edit-sound-wordlist dup >order set-current                      variable sound  variable register                               'Q' value quit-key  'P' value play-key                            8 value left-key    9 value right-key                          10 value down-key   11 value up-key                            : .help  ( -- )                                                   quit-key emit ."           - quit" cr                           play-key emit ."           - play" cr                           ." left/right - decrease/increase value" cr                     ." up/down    - previous/next register" cr ;                  -->                                                             ( edit-sound )                                                  :noname  ( -- )  ." Env."          ;  \ XXX TODO --             :noname  ( -- )  ." Env. T."       ;  \ XXX TODO --             :noname  ( -- )  ." Env. P."       ;  \ XXX TODO --             :noname  ( -- )  ." C volume"      ;                            :noname  ( -- )  ." B volume"      ;                            :noname  ( -- )  ." A volume"      ;                            :noname  ( -- )  ." Mixer"         ;                            :noname  ( -- )  ." Noise volume"  ;                            :noname  ( -- )  ." C tone"        ;                            :noname  ( -- )  ." C fine tone"   ;                            :noname  ( -- )  ." B tone"        ;                            :noname  ( -- )  ." B fine tone"   ;                            :noname  ( -- )  ." A tone"        ;                            :noname  ( -- )  ." A fine tone"   ;                            create label  , , , , , , , , , , , , , ,  -->                  ( edit-sound )                                                  : .label  ( n -- )  cells label + perform  ;                    : .register  ( n -- )                                             >r 0 r@ at-xy  sound @ r@ + c@ 4 .r  space r> .label cr  ;    : .menu-register  ( n -- )                                        dup register @ = inverse  .register  0 inverse  ;             : .sound  ( -- )  /sound 0 do  i .menu-register  loop  ;        : register@  ( -- n )  register @ dup .register  ;              : register!  ( n -- )  dup register ! .menu-register  ;         : next-register  ( -- )                                           register@ 1+ dup /sound <> and register!  ;                   : previous-register  ( -- )                                       register@ 1- dup 0< if  drop /sound 1-  then  register!  ;    : >register  ( -- ca )  sound @ register @ +  ;                 : increase-value  ( -- )  >register c1+!  ;                     : decrease-value  ( -- )  >register c1-!  ;  -->                ( edit-sound )                                                  forth-wordlist set-current                                      : edit-sound ( a -- )                                             sound ! register off  page .sound cr .help                      begin  .sound                                                     key upper case                                                    quit-key   of  exit               endof                         play-key   of  sound @ play       endof                         left-key   of  decrease-value     endof                         right-key  of  increase-value     endof                         down-key   of  next-register      endof                         up-key     of  previous-register  endof                       endcase                                                       again  ;                                                      set-current  previous                                                                                                           ( edit-sound-test )                                             need edit-sound  need >body  need shoot                         create explosion                                                ' shoot >body explosion /sound movesound sound-register-port sound-write-port !sound )          [unneeded] /sound ?\ 14 constant /sound exit                    #65533 constant sound-register-port                             #49149 constant sound-write-port                                [unneeded] !sound ?exit                                         need !p                                                         : !sound  ( b1 b2 -- )                                            sound-register-port !p sound-write-port !pvol shutup noise )                                            need !sound                                                     : vol  ( b1 b2 -- )  8 + !sound  ;                              : shutup  ( -- )  -1 7 !sound  ;                                : noise  ( -- )  7 7 !soundmusic )                                                       need ms  need roll  need pick  need vocabulary                  need !sound  need vol                                           vocabulary music  get-current  also music definitions           : freq                                                            2* 109.375 3 roll  um/mod nip 256 /mod 2 pick                   1+ !sound  swap !sound  ;                                     variable len  variable tempo  variable octave  variable volume  2 len !  200 tempo !  8 octave !  15 volume ! 1 15 vol          : tones  ( -- )  56 7 !sound  ;                                 : note  ( n "name" -- )                                           create  ,  does>   @ octave @ * 16 /  1 freq tones                                 tempo @ len @ * ms shutup  ;               523 note c  554 note c# 583 note d  622 note d#                 659 note e  698 note f  740 note f# 784 note g                  831 note g# 880 note a  932 note a# 988 note b  -->             ( music )                                                       : l   ( n -- )  len !  ;                                        : o+  ( -- )    octave @ 2 * octave !  ;                        : o-  ( -- )    octave @ 2 / octave !  ;                        : r   ( -- )    tempo @ len @ * ms  ;                           : >>  ( -- )    1 volume @ 1+ vol 1 volume +!  ;                : <<  ( -- )    1 volume @ 1- vol -1 volume +!  ;               set-current previousplay sound, sound )                                           need !sound  need /sound                                        : play  ( a -- )                                                  /sound 0 do  dup c@ i !sound 1+  loop  drop  ;                : sound,  ( b0 ... b13 -- )                                       here /sound allot here 1- do  i c!  -1 +loop  ;               : sound  ( b0 ... b13 "name" -- )                                 create  sound,  does>  ( -- )  ( pfa )  playfplay )                                                       need !p  need c@+                                               need sound-register-port  need sound-write-port  need /sound    : fplay  ( a -- )                                                 /sound 0 do                                                       i sound-register-port !p  c@+ sound-write-port !p             loop  dropzplay )                                                       need z80-asm                                                    need sound-register-port  need sound-write-port  need /sound    code zplay  ( a -- )                                              hl pop  bc push                                                 /sound b ld#  00 e ld#                                          begin   bc push                                                         e a ld  sound-register-port bc ldp#  a outbc                    m a ld  sound-write-port bc ldp#  a outbc                       hl incp  e inc  bc pop  \ next                          step                                                            bc pop  jpnext,  end-code                                                                                                                                                                                                                                                                                                     ( waves shoot helicopter1 train airplane helicopter2 )          need sound  hex                                                 [unneeded] waves                                                ?\ 00 00 00 00 00 00 07 47 14 14 14 00 26 0E sound waves        [unneeded] shoot                                                ?\ 0A 00 B1 00 BF 00 1F 47 14 14 14 5C 1C 03 sound shoot        [unneeded] helicopter1                                          ?\ C8 0F C8 0F C8 0F 00 07 17 17 17 FF 01 0C sound helicopter1  [unneeded] train                                                ?\ 64 78 30 61 0C C8 37 0F 09 0B 37 B4 04 08 sound train        [unneeded] airplane                                             ?\ 0C 1F 00 00 00 1F 07 E8 0F 10 0F 9A 00 18 sound airplane     [unneeded] helicopter2                                          ?\ 09 00 00 06 0C 00 0B C0 10 0E 10 3A 02 1C sound helicopter2  decimal                                                                                                                         ( bomber whip metalic rain2 lightning1 lighting2 )              need sound  hex                                                 [unneeded] bomber                                               ?\ 49 52 3E A5 5A 8A 9F 8C 66 4D 64 A2 57 C9 sound bomber       [unneeded] whip                                                 ?\ 05 12 08 06 13 0B 05 0B 00 13 03 18 15 01 sound whip         [unneeded] metalic                                              ?\ 95 40 68 EC D2 B4 00 20 00 C2 92 49 51 B1 sound metalic      [unneeded] ligthing1                                            ?\ 01 04 00 10 24 43 08 04 1F F5 01 06 1E 02 sound lighting1    [unneeded] lighting2                                            ?\ 00 00 00 00 00 FF 07 04 FF 19 00 3C 3C 03 sound lighting2    decimal                                                                                                                                                                                                                                                         ( bell1 bell2 bell3 rap drum cymbal )                           need sound  hex                                                 [unneeded] bell1                                                ?\ AB 03 2A 02 0C 01 00 F8 10 10 10 00 71 10 sound bell1        [unneeded] bell2                                                ?\ 66 00 4B 00 45 00 00 F8 10 10 10 00 22 10 sound bell2        [unneeded] bell3                                                ?\ FC 06 DE 03 C3 04 00 F8 10 10 10 00 FF 10 sound bell3        [unneeded] rap                                                  ?\ 00 00 00 00 00 00 06 C0 10 10 10 00 05 18 sound rap          [unneeded] drum                                                 ?\ 00 06 00 00 00 05 11 E8 10 10 10 00 0A 10 sound drum         [unneeded] cymbal                                               ?\ 09 00 00 00 00 00 00 C0 10 10 10 03 09 10 sound cymbal       decimal                                                                                                                         ( applause hammer background beach waterdrop2 )                 need sound  hex                                                 [unneeded] applause                                             ?\ 00 00 00 00 00 00 1E 40 0F 10 0F 00 07 18 sound aplausse     [unneeded] hammer                                               ?\ 1B 00 09 00 00 00 1F C8 10 10 10 00 6B 10 sound hammer       [unneeded] background                                           ?\ 03 05 FC 04 0C 05 00 F8 10 10 10 FF FF 0E sound background   [unneeded] beach                                                ?\ 00 00 00 00 00 00 0F C0 0B 10 10 FF 50 0E sound beach        [unneeded] waterdrop2                                           ?\ 24 00 12 00 16 00 00 F8 10 10 10 00 10 18 sound waterdrop2   decimal                                                                                                                                                                                                                                                         ( rain1 waterdrop1 explosion1 explosion2 )                      need sound  hex                                                 [unneeded] rain1                                                ?\ 2C 18 06 06 07 03 03 05 2C 06 03 05 03 03 sound rain1        [unneeded] waterdrop1                                           ?\ 14 53 5E 27 00 08 1F 47 17 17 16 5A 00 00 sound waterdrop1   [unneeded] explosion1                                           ?\ 00 00 00 00 00 06 07 10 10 10 38 08 00 00 sound explosion1   [unneeded] explosion2                                           ?\ 00 00 00 00 00 06 07 10 10 10 38 08 00 00 sound explosion2   decimal                                                                                                                                                                                                                                                                                                                                                                                         ( bleep beep>bleep )                                            need ?(                                                         [unneeded] bleep ?(                                             code bleep  ( duration pitch -- )                                 E1 c,  D1 c,  C5 c,  CD c, 03B5 ,  C1 c,  DD c, 21 c, next ,    jpnext, end-code  exit ?)                                     [unneeded] beep>bleep ?(                                        : beep>bleep  ( frequency duration1 -- duration2 pitch )          over 1000 */ swap  4375 100 rot */ 30 -  ; ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( laser-gun ambulance )                                         [unneeded] laser-gun ?(  need z80-asm                           code laser-gun  ( -- )  bc push  5 b ld#  0500 hl ldp#            begin   0001 de ldp#                                                    hl push  03B5 call  hl pop  \ ROM beeper                        0010 de ldp#  de subp  jrnz                             bc pop  next ix ldp#  jpnext,  end-code  exit ?)              [unneeded] ambulance ?(  need z80-asm                           code ambulance  ( n -- )                                          de pop  bc push  e b ld                                         begin   bc push  0320 hl ldp#  000A de ldp#                             <mark   hl push                                                         03B5 call  \ ROM beeper                                         hl pop  hl decp  hl tstp  jrnz                          bc pop  step                                            bc pop  next ix ldp#  jpnext, end-code ?)                     ( white-noise )                                                 need z80-asm                                                    code white-noise  ( u -- )                                        de pop                                                          bc push  \ save the Forth IP                                    de bc ldp  0000 hl ldp#  \ bc=duration, hl=start of ROM         5C48 fta  a sra  a sra  a sra  07 and#  a d ld                  begin   m e ld  hl incp  bc decp  bc push                               08 b ld#  \ bit counter                                         begin   e a ld  10 and#  e rl  d or  FE out  \ beep                     step                                                    bc pop  bc tstp                                                 jrnz                                                    bc pop  jpnext, \ restore the Forth IP and go next              end-code                                                                                                                      ( str= str< str> trim +place hunt )                             [unneeded] str=                                                 ?\ : str=  ( ca1 len1 ca2 len2 -- f )  compare 0=  ;  exit      [unneeded] str<                                                 ?\ : str<  ( ca1 len1 ca2 len2 -- f )  compare 0<  ;  exit      [unneeded] str>                                                 ?\ : str>  ( ca1 len1 ca2 len2 -- f )  compare 0>  ;  exit      [unneeded] trim                                                 ?\ : trim ( ca1 len1 -- ca2 len2 )  -leading -trailing  ;       need ?(                                                         [unneeded] +place ?(  need c+!                                  : +place  ( ca1 len1 ca2 -- )                                     2dup 2>r count + smove 2r> c+! ;  ?)                          [unneeded] hunt ?(                                              : hunt  ( ca1 len1 ca2 len2 -- ca3 len3 )                         search 0= if  chars + 0  then  ; ?)                           ( ud>str u>str d>str char>string chars>string )                 [unneeded] ud>str                                               ?\ : ud>str  ( ud -- ca len )  <# #s #>  ;  exit                [unneeded] u>str                                                ?\ need ud>str  : u>str  ( u -- ca len )  s>d ud>str  ;  exit   need ?(  [unneeded] d>str ?(                                    : d>str  ( d -- ca len )  tuck dabs <# #s rot sign #>  ;        exit ?)                                                         [unneeded] char>string ?(                                       : char>string  ( c -- ca len )                                    1 allocate-string tuck c! 1  ; ?)                             [unneeded] chars>string ?(                                      : chars>string  ( c1..cn n -- ca len )                            dup if    dup allocate-string swap 2dup 2>r  ( c1..cn ca n )              bounds do  i c!  loop  2r>                                else  pad swap  then  ; ?)                                ( >bstring c>bstring 2>bstring )                                [unneeded] >bstring                                             ?\ : >bstring  ( u -- ca len )  pad ! pad cell  ;  exit         [unneeded] c>bstring                                            ?\ : c>bstring  ( c -- ca len )  pad c! pad 1  ;  exit          need ?(                                                         [unneeded] 2>bstring  ?(                                        : 2>bstring  ( xd -- ca len )                                     pad 2! pad [ 2 cells ] literal  ;  exit ?)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( lengths s+ )                                                  need ?(                                                         [unneeded] lengths ?(                                           code lengths                                                      D9 c, E1 c, D1 c, C1 c, C5 c, D5 c, E5 c, C5 c, E5 c, D9 c,     jpnext, end-code ?)                                           [unneeded] s+  ?(  need lengths  need pick                      : s+  ( ca1 len1 ca2 len2 -- ca3 len3 )                           lengths + >r           ( ca1 len2 ca2 len2 ) ( r: len3 )        r@ allocate-string >r  ( r: len3 ca3 )                          2 pick r@ +            ( ca1 len1 ca2 len2 len1+ca3 )           smove                  ( ca1 len1 )  \ 2nd string to buffer     r@ smove               \  1st string to buffer                  r> r>  ; ?)                                                                                                                                                                                   ( uppers1 #spaces #chars )                                      [unneeded] uppers1                                              ?\ : uppers1 ( ca len -- )  drop 1 uppers  ;  exit              need ?)                                                         [unneeded] #spaces ?(  need under+                              : #spaces  ( ca len -- +n )                                       0 rot rot  0 do  count bl = under+  loop  drop abs  ;         exit ?)                                                         [unneeded] #chars ?(  need under+                               : #chars  ( ca len c -- +n )                                      0 2swap 0 do                                                      ( c count ca ) count over = under+  loop  2drop abs  ; ?)                                                                                                                                                                                                                                                                   ( /name first-name last-name )                                  need ?(  [unneeded] last-name ?(  need trim                     : last-name  ( ca1 len1 -- ca2 len2 )                             trim  begin  2dup bl scan bl skip dup                                 while  2nip  repeat  2drop  ;  exit ?)                  : /name  ( ca1 len1 -- ca2 len2 ca3 len3 )                        bl skip 2dup bl scan  ;                                       [unneeded] first-name ?exit                                     : first-name  ( ca1 len1 -- ca2 len2 )  /name nip -  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( prefix? suffix? -prefix -suffix )                             need ?(                                                         [unneeded] prefix? ?(  need str=                                : prefix?  ( ca1 len1 ca2 len2 -- f )                             tuck 2>r min 2r> str=  ; ?)                                   [unneeded] suffix? (?  need pick  need str=                     : suffix? ( ca1 len1 ca2 len2 -- f )                              2swap dup 3 pick - /string str=  ; ?)                         [unneeded] -prefix ?(  need prefix?                             : -prefix  ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )           dup >r 2over 2swap prefix?                                      if  swap r@ + swap r> -  else  rdrop  then  ; ?)              [unneeded] -suffix ?(  need suffix?                             : -suffix ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )            dup >r 2over 2swap suffix?                                      if  r> -  else  rdrop  then  ; ?)                             ( contains chop s"" sconstant save-counted-string s' )          [unneeded] contains ?\ : contains  search nip nip  ;  exit      [unneeded] chop                                                 ?\ : chop  ( ca len -- ca' len' )  1- swap char+ swap  ;  exit  [unneeded] s""                                                  ?\ : s""  ( -- ca len )  0 allocate-string 0  ;  exit           [unneeded] s'                                                   ?\ : s'  ''' parse-string  ; immediate                          need ?(  [unneeded] save-counted-string ?(                      : save-counted-string  ( ca1 len1 -- ca2 )                        dup 1+ allocate-string dup >r place r>  ; ?)                                                                                                                                                                                                                                                                                                                                                  ( string/ char-in-string? char-position? ruler )                need ?(                                                         code string/  ( ca1 len1 len2 -- ca2 len2 )                       D9 c, C1 c, D1 c, E1 c, 19 c, A7 c, ED c, 42 c,                 E5 c, C5 c, D9 c, jpnext,  end-code                           [unneeded] char-in-string? ?(  need -rot                        : char-in-string? ( ca len c -- f )                               -rot bounds ?do   dup i c@ = if  drop true unloop exit  then                loop  drop false  ; ?)                            [unneeded] char-position? ?(  need -rot                         : char-position?  ( ca len c -- +n true | false )                 -rot 0 ?do   2dup i + c@ = if  2drop i true unloop exit  then          loop  2drop false  ; ?)                                [unneeded] ruler ?(                                             : ruler  ( c len -- ca len )                                      dup allocate-string swap 2dup 2>r rot fill 2r>  ; ?)          ( sconstant sconstants-does> sconstants /sconstants )           need ?(                                                         [unneeded] sconstant ?(                                         : sconstant  ( ca len "name" -- )                                 here >r s, r> count 2constant  ; exit ?)                      [unneeded] sconstants-does> ?(  need array>                     : sconstants-does>  ( -- )                                        does>  ( n -- ca len )  ( n pfa ) array> @ count  ;  exit ?)  [unneeded] sconstants ?(  need sconstants-does>                 : sconstants  ( 0 ca[n]..ca[1] "name" -- )                        create  begin  ?dup  while  ,  repeat                           sconstants-does>  ;  exit ?)                                  [unneeded] /sconstants ?exit  need sconstants-does>             : /sconstants  ( 0 ca[n]..ca[1] "name" -- n )                     create  0 begin  swap ?dup  while  , 1+  repeat                 sconstants-does>  ;  exit ?)                                  ( cslit csliteral c" )                                          : cslit  ( -- ca )  r@ dup c@ 1+ r> + >r  ;                     : csliteral  ( ca len -- )                                        compile cslit s,  ; immediate compile-only                    : c"  ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca )                                         '"' parse postpone csliteral  ; immediate compile-only        exit                                                            : csliteral  ( Compilation: ca len -- )                                      ( Run-time: -- ca )                                  2>r postpone ahead here 2r> s, >r postpone then                 r> postpone literal  ; immediate compile-only                                                                                                                                                                                                                                                                                 ( esc-standard-chars-wordlist )                                 get-current  forth-wordlist set-current  need parse-char        wordlist dup constant esc-standard-chars-wordlist               dup >order set-current case-sensitive @ case-sensitive on       7 1 2constant a  8 1 2constant b  27 1 2constant e              12 1 2constant f  10 1 2constant l  '"' 1 2constant q           13 1 2constant r  9 1 2constant t  11 1 2constant v             0 1 2constant z  '\' 1 2constant \                              : m  ( -- c1 c2 2 )  10 13 2  ;                                 : (x)  ( "c" -- n )                                               parse-char upper 16 digit? 0= #-260 ?throw  ;                 : x  ( "<hexdigit><hexdigit>" -- c 1 )  (x) 16 * (x) + 1  ;     [defined]   alias ?\ '"' 1 2constant "  13 1 2constant n        [undefined] alias ?\       ' q alias "       ' r alias n        case-sensitive ! set-current previous                                                                                           ( parse-esc-string )                                            need parse-esc-char>chars  need chars>string  need s+           need get-esc-order                                              : (parse-esc-string)  ( ca len "ccc<quote>"  -- ca' len' )        begin   parse-char dup '"' <>  \ not finished?                  while   dup '\' =  \ maybe escaped?                                     if    drop parse-esc-char>chars                                 else  1  then  chars>string s+                          repeat  drop  ;                                               variable case-sensitive-esc-chars  case-sensitive-esc-chars on  : parse-esc-string  ( "ccc<quote>"  -- ca len )                   get-order get-esc-order set-order                               case-sensitive @ case-sensitive-esc-chars @ case-sensitive !    0 0 (parse-esc-string)                                          2>r case-sensitive ! set-order 2r>  ;                                                                                         ( s\" .\" )                                                     need ?(                                                         [unneeded] s\" ?(                                               need parse-esc-string  need esc-standard-chars-wordlist         : s\"  ( Interpretation: "ccc<quote>" -- ca len )                      ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca len )                                    parse-esc-string compiling? if  postpone sliteral  then         ; immediate  exit ?)                                          [unneeded] .\" ?(                                               need parse-esc-string  need esc-standard-chars-wordlist         : .\"  ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca len )                                    compile (.")  parse-esc-string s,                               ; immediate compile-only ?)                                                                                                   ( max-esc-order #esc-order esc-context ?esc-order )             [unneeded] max-esc-order                                        ?\ 4 constant max-esc-order  exit                               need ?(                                                         [unneeded] #esc-order [unneeded] esc-context and ?(             need max-esc-order                                              variable #esc-order  #esc-order off                             create esc-context max-esc-order cells 2dup allot erase ?)      [unneeded] ?esc-order ?exit                                     need max-esc-order                                              : ?esc-order  ( n -- )                                            dup 0< #-282 ?throw  max-esc-order < ?exit  #-281 throw  ;                                                                                                                                                                                                                                                                    ( set-esc-order get-esc-order )                                 need ?(                                                         [unneeded] set-esc-order ?(                                     need ?esc-order  need #esc-order  need esc-context              : set-esc-order  ( -1 | 0 | widn..wid1 n -- )                     dup ?esc-order  dup #esc-order !                                0 ?do  i cells esc-context + !  loop  ;  exit ?)              [unneeded] get-esc-order ?(                                     need #esc-order  need esc-context                               : get-esc-order  ( -- wid[n]..wid[1] n )                          #esc-order @ 0 ?do                                                #esc-order @ i - 1- cells esc-context + @                     loop  #esc-order @  ; ?)                                                                                                                                                                                                                                      ( >esc-order parse-esc-char>chars )                             need ?(                                                         [unneeded] >esc-order ?(                                        need get-esc-order  need set-esc-order                          : >esc-order  ( wid -- )                                          >r get-esc-order 1+ r> swap set-esc-order  ;  exit ?)         [unneeded] esc-previous ?(                                      : esc-previous  ( -- )                                            get-esc-order nip 1- set-esc-order  ;  exit ?)                [unneeded] parse-esc-char>chars ?(                              need parse-char  need char>string                               : parse-esc-char>chars  ( "c" -- c[n-1]..c[0] n )                 parse-char dup char>string find-name                            ?dup if  nip name> execute  else  '\' 2  then  ; ?)                                                                                                                                           ( first-esc-block-char esc-block-chars-wordlist )               get-current  forth-wordlist set-current                         need parse-esc-char>chars  need even?  need nextname            variable first-esc-block-char  128 first-esc-block-char !       wordlist dup constant esc-block-chars-wordlist                           dup >order set-current                                 variable column  column off                                     : left-column?  ( -- f )  column @ even?  1 column +!  ;        : >parsed-block-char  ( n1 n2 -- c 1 )                            + first-esc-block-char @ + 1  ;                               -->                                                                                                                                                                                                                                                                                                                                                                                             ( esc-block-chars-wordlist )                                    s"  " nextname                                                  :    ( "c" | n1 -- n1 | n2 1 )                                    left-column? if    0 parse-esc-char>chars                                    else  0 >parsed-block-char  then  ;              : '  ( "c" | n1 -- n1 | n2 1 )                                    left-column? if    2 parse-esc-char>chars                                    else  1 >parsed-block-char then  ;               : .  ( "c" | n1 -- n1 | n2 1 )                                    left-column? if    8 parse-esc-char>chars                                    else  4 >parsed-block-char  then  ;              : :  ( "c" | n1 -- n1 | n2 1 )                                    left-column? if    10 parse-esc-char>chars                                   else   5 >parsed-block-char  then  ;             set-current previous                                                                                                            ( esc-udg-chars-wordlist )                                      get-current                                                     wordlist dup constant esc-udg-chars-wordlist set-current        case-sensitive @ case-sensitive on                              144 1 2constant A  145 1 2constant B  146 1 2constant C         147 1 2constant D  148 1 2constant E  149 1 2constant F         150 1 2constant G  151 1 2constant H  152 1 2constant I         153 1 2constant J  154 1 2constant K  155 1 2constant L         156 1 2constant M  157 1 2constant N  158 1 2constant O         159 1 2constant P  160 1 2constant Q  161 1 2constant R         162 1 2constant S  163 1 2constant T  164 1 2constant U         case-sensitive !                                                set-current                                                                                                                                                                                                                                                     ( replaces )                                                    need search-wordlist                                            s" /counted-string" environment? 0= [if] 256 [then]             chars constant string-max                                       wordlist constant replaces-wordlist                             [defined] vfxforth [if] \ vfx forth                               : makesubst \ c-addr len -- c-addr                                get-current >r wid-subst set-current                            ($create)  \ like create but takes c-addr/len                   r> set-current                                                  here string-max allot 0 over c! \ create buffer space           ;                                                           [then]                                                                                                                                                                                                                                                          ( replaces )                                                    [defined] (wid-create) [if] \ swiftforth                        : makesubst \ c-addr len -- c-addr                                wid-subst (wid-create)                                          last @ >create !                                                here string-max allot 0 over c! \ create buffer space           ;                                                             [then]                                                          : findsubst  ( ca len -- xt f | 0 )                               wid-subst search-wordlist  ;                                  : replaces \ text tlen name nlen --                               2dup findsubst if    nip nip execute  \ get buffer address                     else  makesubst                                                 then  place  ;                                                                                                                                                                 ( os-chars os-chans os-flags2 os-seed os-frames os-udg )        [unneeded] os-chars    ?\ 23606 constant os-chars               [unneeded] os-chans    ?\ 23631 constant os-chans               [unneeded] os-flags2   ?\ 23658 constant os-flags2              [unneeded] os-seed     ?\ 23670 constant os-seed                [unneeded] os-frames   ?\ 23672 constant os-frames              [unneeded] os-udg      ?\ 23675 constant os-udgos-coords os-coordx os-coordy )                               [unneeded] os-coords      ?\ 23677 constant os-coords           [unneeded] os-coordx      ?\ 23677 constant os-coordx           [unneeded] os-coordy      ?\ 23678 constant os-coordyos-attr-p os-mask-p os-attr-t os-mask-t os-p-flag )           [unneeded] os-attr-p      ?\ 23693 constant os-attr-p           [unneeded] os-mask-p      ?\ 23694 constant os-mask-p           [unneeded] os-attr-t      ?\ 23695 constant os-attr-t           [unneeded] os-mask-t      ?\ 23696 constant os-mask-t           [unneeded] os-p-flag      ?\ 23697 constant os-mask-twrite-tape-file read-tape-file )                              17 constant /tape-header                                        create tape-header  /tape-header 2 * allot                      10 constant /tape-filename \ filename max length                : tape-filetype  ( -- ca )  tape-header  ;                      : tape-filename  ( -- ca )  tape-header 1+  ;                   : tape-length    ( -- a )   tape-header 11 +  ;                 : tape-start     ( -- a )   tape-header 13 +  ;                 3 tape-filetype c!  \ "code" filetype by default                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( write-tape-file read-tape-file )                              : -tape-filename  ( -- )  tape-filename /tape-filename blank  ; : any-tape-filename  ( -- )  255 tape-filename c!  ;            : set-tape-filename  ( ca len -- )                                -tape-filename  /tape-filename min                              tape-filename swap cmove  ;                                   : ?set-tape-filename  ( ca len -- )                               dup if    set-tape-filename                                         else  2drop any-tape-filename  then  ;                    : set-tape-memory  ( ca len -- )                                  tape-length ! tape-start !  ;                                 -->                                                                                                                                                                                                                                                                                                                             ( write-tape-file read-tape-file )                              code (read-tape-file)  ( -- )                                     C5 c,  DD c, 21 c, tape-header ,  2A c, tape-start ,            3E c, 01 c,  32 c, 5C74 ,  CD c, 075A ,                         C1 c,  DD c, 21 c, next ,                                       jpnext,  end-code                                             : read-tape-file  ( ca1 len1 ca2 len2 -- )                        ?set-tape-filename set-tape-memory (read-tape-filewrite-tape-file read-tape-file )                              code (write-tape-file)  ( -- )                                    C5 c,  DD c, 21 c, tape-header ,                                A8 07 + c,  32 c, 5C74 ,                                        21 c, here 0A + ,  E5 c,                                        2A c, tape-start ,  E5 c,                                       C3 c, 0984 ,                                                    C1 c,  DD c, 21 c, next ,                                       jpnext,  end-code                                             : write-tape-file  ( ca1 len1 ca2 len2 -- )                       set-tape-filename set-tape-memory (write-tape-file)  ;                                                                                                                                                                                                                                                                                                                                        ( .tape )                                                       : .tape  ( -- )                                                   cr ." Tape header " tape-header u. cr                              ." Filetype    " tape-filetype c@ . cr                          ." Filename    " tape-filename /tape-filename type cr           ." Length      " tape-length @ u. cr                            ." Start       " tape-start @ u. cr                             .s cr                                                           ." Press any key" key drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( seconds ms )                                                  [unneeded] seconds                                              ?\ need ms  : seconds  ( n -- )  1000 * ms  ;  exit             [unneeded] ms ?exit                                             need z80-asm,                                                   code ms  ( u -- )                                                 d pop, d tstp, nz? rif                                            rbegin  #171 a ld#,  rbegin  nop, a dec,  z? runtil                    d decp,  d tstp,                                         z? runtil                                                     rthen  jpnext,  end-code                                                                                                                                                                                                                                                                                                                                                                      ( frames@ frames! reset-frames )                                need os-frames                                                  : frames@  ( -- d )                                               os-frames @ [ os-frames cell+ ] literal c@  ;                 : frames!  ( d -- )                                               [ os-frames cell+ ] literal c! os-frames !  ;                 : reset-frames  ( -- )  0. framespause do-pause )                                              need ?(                                                         [unneeded] pause ?(  need os-frames                             : pause  ( u -- )                                                 os-frames @ +                                                   begin  dup os-frames @ u< key? or  until drop  ;  exit ?)     need ?(  [unneeded] do-pause ?(  need os-frames                 : do-pause  ( u -- )                                              os-frames @ +  begin  dup os-frames @ u<  until drop  ; ?)    exit                                                            need z80-asm,                                                   code do-pause ( u -- )                                            d pop, b push,                                                  rbegin  halt, d decp, d tstp,  z? runtil                        b pop, jpnext,  end-code  exit ?)                                                                                             ( leapy-year? )                                                 : leapy-year?  ( n -- f )                                         dup 400 mod 0= if  drop true   exit  then                       dup 100 mod 0= if  drop false  exit  then                             4 mod 0= if       false  exit  then                       false  ;                                                      exit                                                            need thiscase                                                   : leapy-year?  ( n -- f )                                         thiscase 400 mod 0= ifcase  true   exitcase                     thiscase 100 mod 0= ifcase  false  exitcase                     thiscase   4 mod 0= ifcase  true   exitcase                     othercase false  ;                                                                                                                                                                                                                                            ( set-date get-date )                                           create (date)  1 c,  1 c,  2016 ,                               : get-date  ( -- day month year )                                 (date) c@                                                       [ (date) 1+ ] literal c@                                        [ (date) 2+ ] literal @  ;                                    : set-date  ( day month year -- )                                 [ (date) 2+ ] literal !                                         [ (date) 1+ ] literal c!                                        (date) !  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( set-time get-time reset-time )                                need frames@  need frames!  need m+  need alias  need ud*       : get-time  ( -- second minute hour )                             frames@ 50 um/mod nip s>d   ( sec . )                                   60 um/mod s>d       ( sec min . )                               60 um/mod           ( sec min hour )  ;               : set-time  ( second minute hour -- )                             3600 um*  rot 60 * m+  rot m+  ( seconds )                      50. ud* frames!  ;                                            ' reset-frames alias reset-time  ( -- )                                                                                                                                                                                                                                                                                                                                                                                                                         ( .time .system-time .date .system-date .time&date time&date )  need get-time  need get-date                                    : .00  ( n -- )  s>d <# # # #> type  ;                          : .0000  ( n -- )  s>d <# # # # # #> type  ;                    : .time  ( second minute hour -- )                                .00 ':' emit .00 ':' emit .00  ;                              : .system-time  ( -- )  get-time .time  ;                       : .date  ( day month year -- )                                    .0000 '-' emit .00 '-' emit .00  ;                            : .system-date  ( -- )  get-date  .date  ;                      : .time&date  ( second minute hour day month year -- )            .date 'T' emit .time  ;                                       : time&date  ( -- second minute hour day month year )             get-time get-date  ;                                                                                                                                                                          ( assert assert= assert( )                                      [unneeded] assert                                               ?\ : assert   ( n -- )    0= if  abort  then  ;  exit           [unneeded] assert=                                              ?\ need assert  : assert=  ( a b -- )  = assert  ;  exit        [unneeded] assert( ?exit                                        variable assert-level  ( -- a )  1 assert-level !               : assertn  ( n -- )  assert-level @ > if  postpone (  then  ;   : assert0(  ( -- )  0 assertn  ; immediate                      : assert1(  ( -- )  1 assertn  ; immediate                      : assert2(  ( -- )  2 assertn  ; immediate                      : assert3(  ( -- )  3 assertn  ; immediate                      : assert(  ( -- )  postpone assert1(  ; immediate               : (endassert)  ( f -- )  0= #-262 ?throw  ;                     : )  ( f -- )  postpone (endassert)  ; immediate                                                                                ( fyi )                                                         need u.r                                                        : fyi.  ( u -- )  cr 5 u.r space  ;                             : fyi  ( -- )                                                     here           fyi. ." here"                                    voc-link @     fyi. ." voc-link @"                              limit @        fyi. ." limit @"                                 unused         fyi. ." unused"                                  hp@            fyi. ." hp@"                                     latest         fyi. ." latest"                                  current-latest fyi. ." current-latest"                          farlimit @     fyi. ." farlimit @"                              farunused      fyi. ." farunused"  ;                                                                                                                                                                                                                          ( ~~ )                                                          need :noname  need defer  need .s  need columns                 variable ~~?  ~~? on                                            variable ~~y  ~~y off                                           variable ~~quit-key  'q' ~~quit-key !                           variable ~~resume-key  bl ~~resume-key !                        : ~~info  ( nt line block -- )                                    0 ~~y @ 2dup 2>r at-xy columns 2* spaces 2r@ at-xy              ." Block" 4 .r ."  Line" 3 .r space .name 2r> 1+ at-xy .s  ;  : ~~control?  ( -- f )  ~~resume-key @ ~~quit-key @ or  ;       : ~~press?  ( c a -- f )  @ tuck = swap 0<> and ;               : ~~control  ( -- )                                               ~~control? 0= ?exit                         begin  key dup        ~~quit-key ~~press? if  drop quit  then                           ~~resume-key @ 0< if  drop exit  then                       ~~resume-key ~~press? if  exit       then   again   ;  -->    ( ~~ )                                                          2variable ~~xy-backup                                           defer ~~save  ( -- )  defer ~~restore  ( -- )                   : ~~save-xy  ( -- )  xy ~~xy-backup 2!  ;                       : ~~restore-xy  ( -- )  ~~xy-backup 2@ at-xy  ;                 ' ~~save-xy ' ~~save defer!  ' ~~restore-xy ' ~~restore defer!  defer ~~app-info  ( -- )  ' noop ' ~~app-info defer!            : (~~)  ( nt line block -- )                                      ~~? @ if    ~~save ~~app-info ~~info ~~control ~~restore              else  2drop drop  then  ;                               : ~~  ( -- )                                                      latest      ( nt )    postpone literal                          >in @ c/l / ( line )  postpone literal                          blk @       ( block ) postpone literal                                                postpone (~~)  ; immediate compile-only                                                                 ( where )                                                       : where  ( -- )                                                   error-pos 2@  ( n1 n2 )                                         dup if                                                            dup scr !                                                       ." Scr #" dec. cr                                               swap c/l /mod c/l * rot block + c/l type cr                     here c@ - spaces '^' emit                                     else  2drop  then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( fardump )                                                     need 16hex.  need fartype-ascii  need backspace  need ?leave    : fardump  ( ca len -- )                                          8 max 8 2dup mod - + 8 / 1- 0                                   ?do                                                               cr dup 16hex.                                                   8 0 do  i over + far@ flip 16hex.  cell +loop                   dup backspace 8 fartype-ascii                                   break-key? ?leave                                             8 + loop  drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                             ( farwdump )                                                    need 16hex.  need ?leave                                        : farwdump  ( a len -- )                                          0                                                               ?do                                                               i 4 mod 0= if  cr dup 16hex. space  then  \ show address        dup far@ 16hex. cell+                                           break-key? ?leave                                             loop  dropdump )                                                        need 16hex.  need type-ascii  need backspace  need ?leave       : dump  ( ca len -- )                                             8 max 8 2dup mod - + 8 / 1- 0                                   ?do                                                               cr dup 16hex.                                                   8 0 do  i over + @ flip 16hex.  cell +loop                      dup backspace 8 type-ascii                                      break-key? ?leave                                             8 + loop  drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                             ( wdump )                                                       need 16hex.  need ?leave                                        : wdump  ( a len -- )                                             0                                                               ?do                                                               i 4 mod 0= if  cr dup 16hex. space  then  \ show address        dup @ 16hex. cell+                                              break-key? ?leave                                             loop  drophistory )                                                     variable /history                                               variable hp0                                                    variable hp                                                     : used-history  ( -- u )  hp0 @ hp @  -  ;                      : unused-history  ( -- n )  /history @ used-history -  ;        : allot-history  ( +n -- )  hp +!  ;                            : len>history  ( len -- +n )  1+ cell+  ;                       : history>link  ( ca -- a )  cell-  ;                           : history<history  ( ca1 -- ca2 )  history>link @s  ;           : history>history  ( ca1 -- ca2 )                                 system-bank count default-bank  + cell+  ;                    : history>string  ( ca1 -- ca2 len2 )                             system-bank count save-string default-bank  ;  -->                                                                                                                                            ( history )                                                     variable browsed-history                                        : oldest-history?  ( -- f )  browsed-history @ hp0 @ =  ;       : browse-older-history  ( -- )                                    oldest-history? ?exit                                           browsed-history @ history<history browsed-history !  ;        : newest-history?  ( -- )                                         browsed-history @ history>history hp @ =                        browsed-history @ hp @ =  or  ;                               : browse-newer-history  ( -- )                                    newest-history? ?exit                                           browsed-history @ history>history browsed-history !  ;        : init-history  ( n -- )                                          dup /history !  $FFFF swap -                                    dup hp0 !  dup hp !  browsed-history !  0 hp0 @ c!s  ;        1024 init-history  -->                                          ( history )                                                     need str=                                                       : history-empty?  ( -- f )  used-history 0=  ;                  : allocate-history  ( len -- ior )                                1+ dup /history @ > if  drop #-274 exit  thenhistory )                                                     : latest-history$  ( -- ca len )                                  hp @ history<history history>string  ;                        : duplicated-history?  ( ca len -- f )  latest-history$ str=  ; : longer-history?  ( len -- f )                                   len>history unused-history >  ;                               : history,  ( ca len -- )                                         hp @ dup >r  over >r  ( ca len ca1 ) ( R: len ca1 -- )          system-bank place default-bank                                  r> 1+ allot-history  r> hp @ !s  cell allot-history  ;        : (>history)  ( ca len -- )                                       dup 0= if  2drop exit  then                                     2dup duplicated-history? if  2drop exit  then                   dup longer-history? if  dup allocate-history throw  then        history,  hp @ browsed-history !  ;                           -->                                                             ( history )                                                     : browsed-history$  ( -- ca len )                                 browsed-history @ history>string  ;                           : get-history   ( -- ca )  browsed-history$ set-accept  ;       : (history-up)    ( -- ca )                                       get-history browse-older-history  ;                           : (history-down)  ( -- ca )                                       get-history browse-newer-historyhistory )                                                     variable history                                                : history-off  ( -- )                                             ['] 2drop ['] >history defer!                                   ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off  ;                 : history-on  ( -- )                                              ['] (>history) ['] >history defer!                              ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on  ;     -->                                                                                                                                                                                                                                                                                                                                                                                             ( history )                                                     : .history  ( -- )                                                hp0 @ begin  dup hp @ u<  while                                         dup history>string type cr  history>history                   repeat  drop  ;                                         need dump                                                       : hdump  ( ca len -- )  system-bank dump default-bank  ;        : .h  ( -- )  hp0 dup hp @ - hdump  ;                           \ history-onhistory-xxx-old )                                             variable hp                                                     $FFFF constant hp0                                              variable /history  1024 /history !                              : init-hp0  ( -- )  0 hp0 c!s  ;                                : history-bounds  ( -- ca1 ca2 )  hp0 hp @  ;                   : used-history  ( -- u )  history-bounds -  ;                   : unused-history  ( -- n )  /history @ used-historyhistory-xxx-old )                                             variable previously-browsed-history                             variable currently-browsed-history                              : older-history  ( -- )                                           currently-browsed-history @ dup previously-browsed-history !    system-bank count default-bank +                                currently-browsed-history !  ;                                : newer-history  ( -- )                                           currently-browsed-history @                                     previously-browsed-history @ currently-browsed-history !        currently-browsed-history !  ;                                : init-history  ( -- )                                            init-hp0  hp0 dup hp ! currently-browsed-history !  ;         init-history  -->                                                                                                                                                                               ( history-xxx-old )                                             need str=                                                       : allot-history  ( +n -- )  negate hp +!  ;                     : history-empty?  ( -- f )  history-bounds =  ;                 : allocate-history  ( len -- ior )                                1+ dup /history @ > if  drop #-274 exit  then                   0  ; \ XXX TMP                                                : latest-history  ( -- ca len )                                   system-bank  hp @ count  save-string  default-bank  ;         : browsed-history  ( -- ca len )                                  currently-browsed-history @                                     system-bank  count save-string  default-bank  ;               : (history>)  ( -- ca len )                                       browsed-history  dup 0= ?exit                                                    dup 1+ negate allot-history                    history-empty? if  init-hp0  then  ;  -->                     ( history-xxx-old )                                             : duplicated-history?  ( ca len -- f )  latest-history str=  ;  : too-long-for-history?  ( len -- f )  1+ unused-history > ;    : (>history)  ( ca len -- )                                       dup 0= if  2drop exit  then                                     history-empty? if  dup hp0 c!s  then                            2dup duplicated-history? if  2drop exit  then                   dup too-long-for-history?                                       if  dup allocate-history throw  then                            dup 1+ allot-history                                            hp @ dup system-bank place default-bank                                  currently-browsed-history !  ;                       -->                                                                                                                                                                                                                                                             ( history-xxx-old )                                             : get-history   ( -- ca )  browsed-history set-accept  ;        : (history-up)    ( -- ca )  get-history older-history  ;       : (history-down)  ( -- ca )  get-history newer-history  ;       variable history                                                : history-off  ( -- )                                             ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off  ;                 : history-on  ( -- )                                              ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on  ;     : .history  ( -- )                                                hp @  begin  dup hp0 <  while                                           system-bank count 2dup type cr default-bank  +                repeat  drop  ;                                         \ history-on                                                    ( /line# .line# .line list-line list-lines list )               [unneeded] /line# ?\ : /line#  ( -- n )  #16 base @ - 4 / 1+  ; [unneeded] .line#                                               ?\ need /line#  : .line#  ( n -- )  /line# .r  ;  exit          [unneeded] .line                                                ?\ : .line  ( n1 n2 -- )  line>string -trailing type  ;  exit   need ?(  [unneeded] list-line ?(  need .line#  need .line       : list-line  ( n1 n2 -- )                                         cr over .line# space .line  ;  exit ?)                        [unneeded] list-lines ?(                                        need .line  need nuf?  need list-line  need ?leave              : list-lines  ( u1 u2 u3 -- )                                     rot dup scr ! cr ." Screen " .  1+ swap                         ?do  i scr @ list-line nuf? ?leave  loop cr  ;  exit ?)       [unneeded] list ?(  need list-lines                             : list  ( u -- )  0 [ l/scr 1- ] literal list-lines  ;  exit ?) ( /block# .block# .index index )                                [unneeded] /block# ?\ 3 constant /block#  exit                  need ?(                                                         [unneeded] .block# ?(  need /block#                             : .block#  ( n -- )  /block# .r  ;  exit ?)                     [unneeded] .index ?(  need .line                                : .index  ( u -- )                                                cr dup .block# space 0 swap .line  ;  exit ?)                 [unneeded] index ?(  need .line  need nuf?  need ?leave         : index  ( u1 u2 -- )                                             1+ swap ?do  cr i .block# space 0 i .line  nuf? ?leave          loop  ;                                                       exit ?)                                                                                                                                                                                                                                                         ( index-like index-ilike )                                      need ?(  need .index  need contains  need nuf?  need ?leave     [unneeded] index-like ?(                                        : index-like  ( u1 u2 "name" -- )                                 parse-name 2swap                                                1+ swap ?do  0 i line>string 2over contains                                  if  i .index  then  nuf? ?leave                    loop  2drop  ;  exit ?)                                       [unneeded] index-ilike ?(                                       : index-ilike  ( u1 u2 "name" -- )                                parse-name save-string 2dup uppers                              2swap 1+ swap ?do                                                 save-string  0 i line>string save-string 2dup uppers            2over contains if  i .index  then                               nuf? ?leave                                                   loop  2drop  ;  exit ?)                                       ( qx nx px )                                                    need rows  need columns                                         need .line#  need /line#  need .block#  need /block#            : qx-columns  ( -- n )  columns 14 /  ;                         : /qx-column  ( -- n )  columns qx-columns /  ;                 : /qx  ( -- n )  rows 2- qx-columns *  ;                        : qx-bounds  ( -- u1 u2 )                                         scr @ /qx / /qx * /qx bounds 0 max swap blk/disk min swap  ;  : qx ( -- )                                                       home  qx-bounds ?do                                               i scr @ = if  '>' /block# emits  else  i .block#  then          i block /qx-column /block# - type                             loop  ;                                                       : nx  ( -- )                                                      /qx scr @ + [ blk/disk 1- ] literal min scr ! qx  ;           : px  ( -- )  scr @ /qx - 0 max scr ! qx  ;                     ( lt lm lb )                                                    need list-lines                                                 : lt  ( -- )  scr @ 0 [ l/scr 2 / 1- ] literal list-lines  ;    : lm  ( -- )  scr @ [ l/scr 4 / ] literal                                           [ l/scr 4 / 3 * 1- ] literal list-lines  ;  : lb  ( -- )  scr @ [ l/scr 2 / ] literal                                           [ l/scr 1-  ] literal list-linesdepth .s u.s )                                               [unneeded] .depth                                               ?\ : .depth  ( n -- )  ." <" 0 .r ." > "  ;  exit               need ?(                                                         [unneeded] .s ?(  need .depth                                   : .s   ( -- )                                                     depth dup .depth 0> if                                            sp@ sp0 @ cell- do i @ .  [ cell negate ] literal +loop       then  ;  exit ?)                                              [unneeded] u.s ?(  need .depth                                  : u.s   ( -- )                                                    depth dup .depth 0> if                                            sp@ sp0 @ cell- do i @ u.  [ cell negate ] literal +loop      then  ; ?)                                                                                                                                                                                    ( wordlists .wid .current .context order )                      need ?(                                                         [unneeded] wordlists ?(                                         : wordlists  ( -- )                                               voc-link begin  @ ?dup  while  dup .wid wid>link  repeat  ;   exit ?)                                                         need wid>name  need get-order                                   : .wid  ( wid -- )                                                dup wid>name ?dup if  .name drop exit  then  u.  ;            : .current  ( -- )  get-current .wid  ;                         : .context  ( -- )                                                get-order begin  ?dup  while  swap .wid 1-  repeat  ;         : order  ( -- )                                                   cr ." Search: " .context cr ." Compile: " .current  ;                                                                                                                                         ( .word .wordname more-words? words wordlist-words )            need ?(  [unneeded] .word ?(  need tab  defer .word  ( nt -- )  : (.word  ( nt -- )  .name tab  ;  ' (.word ' .word defer! ?)   [unneeded] .wordname ?(  need u.r                               : .wordname  ( nt -- ) cr dup 5 u.r space .name  ;              ' .wordname ' .word defer!  exit ?)                             [unneeded] more-words? ?(  need nuf?                            : more-words?  ( nt|0 -- nt|0 f )  dup 0<>  nuf? 0= and  ;      exit ?)                                                         [unneeded] words ?(  need trail  need more-words?                                    need .word  need name<name                 : words  ( -- ) trail begin  more-words?  while                                 dup .word name<name  repeat  drop  ;  exit  ?)  [unneeded] wordlist-words  ?(  need words                       : wordlist-words  ( wid -- )  >order  words  previous  ; ?)                                                                     ( words-like words# )                                           need ?(                                                         [unneeded] words-like ?(  need trail     need name<name                                   need tab       need more-words?                                 need contains  need .word             : words-like  ( "name" -- )                                       parse-name 2dup uppers trail  ( ca len nt )                     begin  more-words?  while                                         dup >r name>string 2over contains if  r@ .word  then                r> name<name                                              repeat drop 2drop  ;  exit ?)                                 [unneeded] words# ?(  need trail  need name<name                : words#  ( -- n ) 0 trail begin  ( n nt ) dup 0<>  while                                    swap 1+ swap  name<name                                       repeat drop  ;  ?)                                                                                   ( marker )                                                      : wordlists,  ( -- )                                              voc-link @ begin                                                  dup cell- @  ( a nt ) , @                                     ?dup 0= until  ;                                              : @wordlists  ( a -- )                                            voc-link @ begin                                                  2dup  swap @ swap cell- !                                       swap cell+ swap  @                                            ?dup 0= until  drop  ;                                        -->                                                                                                                                                                                                                                                                                                                                                                                             ( marker )                                                      need get-order  need @cell+  need nn,  need nn@  need there     : @order  ( a -- )  nn@ set-order  ;                            : unmarker  ( a -- )                                              dup there                                                       @cell+ hp!  @cell+ last !  @cell+ lastxt !  @cell+ voc-link !   @cell+ set-current                                              dup dup @ 1+ cells + >r  @order  r> @wordlists  ;             : order,  ( -- )  get-order nn,  ;                              : marker,  ( -- a )                                               here  hp@ ,  last @ ,  lastxt @ ,  voc-link @ ,                       get-current ,  order,  wordlists,  ;                    : marker  ( "name" -- )                                           marker, create ,  does>  ( -- )  ( pfa ) @ unmarker  ;                                                                                                                                        ( anew )                                                        need possibly  need marker                                      : anew  ( "name" -- )  >in @  possibly  >in !  markersee )                                                         get-current  also forth definitions decimal                     need body>name  need name>body  need case                       need recurse  need >body  need body>                            variable see-level  see-level off \ depth of nesting            variable see-address  \ in the word being decoded               : indent  ( -- )  cr see-address @ u. see-level @ 2* spaces  ;  : indent+  ( -- )  1 see-level +! indent  ;                     : see-branch    ( a1 -- a2 )  cell+ dup @ u.  ;                 : see-literal   ( a1 -- a2 )  cell+ dup @ .  ;                  : see-2literal   ( a1 -- a2 )  cell+ dup 2@ d. cell+  ;         : see-cliteral  ( a1 -- a2 )  cell+ dup c@ . 1-  ;              : see-sliteral  ( a1 -- a2 )                                      cell+ dup count type  dup c@ + 1-  ;                          : see-compile   ( a1 -- a2 )  cell+ dup @ >name .name  ;  -->                                                                   ( see )                                                         : see-special  ( a1 -- a1 | a2 )  dup @ case                        ['] compile   of  see-compile    endof                          ['] lit       of  see-literal    endof                          ['] 2lit      of  see-2literal   endof                          ['] clit      of  see-cliteral   endof                          ['] slit      of  see-sliteral   endof                          ['] branch    of  see-branch     endof                          ['] 0branch   of  see-branch     endof                          ['] ?branch   of  see-branch     endof                          ['] (do)      of  see-branch     endof                          ['] (?do)     of  see-branch     endof                          ['] (.")      of  see-sliteral   endof                          [undefined] cslit   ?\ ['] cslit   of see-sliteral endof        [undefined] -branch ?\ ['] -branch of see-branch   endof      endcase  ;  -->                                               ( see )                                                         : colon-end?  ( xt -- f )                                         dup  ['] exit =  swap ['] (;code) =  or  ;                    : colon-xt?  ( xt -- f )                                          dup c@ $CD = swap 1+ @ docolon = and  ;                       defer colon-body?  ( pfa -- f )                                 : (colon-body?)  ( pfa -- f )  body> colon-xt?  ;               defer .see-body-name  ( pfa -- )                                : (.see-body-name)  ( pfa -- )                                    indent  ." : " body>name .name  ;                             : be-see-body  ( -- )                                             ['] (colon-body?) ['] colon-body? defer!                        ['] (.see-body-name) ['] .see-body-name defer!  ; be-see-body : no-colon-check  ( pfa -- true )  drop true  ;  -->                                                                                                                                            ( see )                                                         : see-body  ( pfa -- )                                            dup colon-body?  if                                               dup body> see-address ! dup .see-body-name  be-see-body         begin   ( pfa+n ) dup see-address !                                     dup @  ( pfa+n xt ) dup colon-end? 0=                   while  \ high level & not end of colon definition                 >body ( pfa+n pfa' ) dup indent+  body>name .name               key case  'q' of  sp0 @ sp! quit  endof                                   bl  of  drop            endof                                   swap recurse  \ default                                   endcase  see-special  cell+  -1 see-level +!              repeat  indent >name .name                                    else  ." Not a colon definition."  then drop  ;  -->                                                                                                                                          ( see )                                                         : see-usage  ( -- )                                               cr ." Keys: space=more, q=quit, other=deeper." cr  ;          : see  ( "name" -- )                                              defined  ( nt | 0 )  dup 0= -13 ?throw  see-usage               name>body  see-level off  see-bodysee-body-from see-xt )                                        need ?(  [unneeded] see-body-from ?(  need see                  : see-body-from  ( a -- )                                         ['] drop ['] .see-body-name defer!                              ['] no-colon-check ['] colon-body? defer!  see-body  ; ?)     [unneeded] see-xt ?(  need see  need nuf?                       : see-xt  ( xt -- )  dup colon-xt?  if  see-level off               dup see-address ! indent  ." : " dup >name .name >body          begin   ( pfa+n ) dup see-address !                                     dup @  ( pfa+n xt ) dup colon-end? 0=  nuf? 0= and      while   >body ( pfa+n pfa' ) indent+ body>name .name                    see-special  cell+  -1 see-level +!                     repeat  indent >name .name                                    else  ." Not a colon definition."  then drop  ; ?)            previous set-current                                                                                                            ( extend size system turnkey )                                  : extend  ( -- )                                                  latest $08 +origin !  \ top most word in `forth` vocabulary     here $1F +origin !   \ `dp` init value                          hp@ $26 +origin !   \ `hp` init value                           voc-link @ $0C +origin !  ;  \ `voc-link` init value          : size  ( -- u )  here 0 +origin -  ;                           : system  ( -- a len )  extend  0 +origin size 10 +  ;          : turnkey  ( xt -- a len )  boot defer! system  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( wid>link (wid>name wid>name )                                 [unneeded] wid>link                                             ?\ need alias  ' cell+ alias wid>link  ( wid -- a ) exit        [unneeded] (wid>name                                            ?\ : (wid>name  ( wid -- a )  cell+ cell+  ; exit               [unneeded] wid>name                                             ?\ need (wid>name : wid>name  ( wid -- nt|0 )  (wid>name @  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( +order -order )                                               [unneeded] +order                                               ?\ need -order  : +order ( wid -- )  dup -order >order ;  exit  [unneeded] -order ?exit                                         need n>r  need under+                                           variable -order-wid                                             : -order  ( wid -- )                                              -order-wid !  get-order n>r r> dup                              begin dup  while  1-                                              r@ -order-wid @ = if  rdrop -1 under+  else  r> -rot  then    repeat  drop set-order ;                                                                                                                                                                                                                                                                                                                                                                      ( named-wid wid>vocabulary vocabulary search-wordlist )         need ?(  [unneeded] named-wid ?(  need (wid>name                : named-wid  ( wid -- )  (wid>name latest swap !  ; exit ?)     [unneeded] wid>vocabulary ?(  need named-wid                    : wid>vocabulary  ( wid "name" -- )                               create dup , named-wid dovocabulary  ; exit ?)                [unneeded] vocabulary ?(  need wid>vocabulary                   : vocabulary  ( "name" -- )  wordlist wid>vocabulary  ; exit ?) [unneeded] search-wordlist ?(                                   : search-wordlist  ( ca len wid -- 0 | xt 1 | xt -1 )             @ find-name-from dup 0= ?exit  name>immediate? 0= 1 or  ; ?)                                                                                                                                                                                                                                                                                                                                  ( seal trail find-name-in find swap-current wid-of )            [unneeded] seal                                                 ?\ : seal  ( -- )  1 #order !  ;  exit                          [unneeded] trail ?\ : trail  ( -- nt )  context @ @  ;  exit    [unneeded] find-name-in                                         ?\ : find-name-in  ( ca len wid -- nt | 0 ) @ find-name-from  ; need ?(  [unneeded] find ?(                                     : find  ( ca -- ca 0 | xt 1 | xt -1 )                             dup count find-name dup                                         if  nip name>immediate? 1 or negate  then  ; ?)               [unneeded] swap-current ?(                                      : swap-current  ( wid1 -- wid2 )                                  get-current swap set-current  ; ?)                            [unneeded] wid-of ?( need >body                                   : wid-of  ( "name" -- wid )  ' >body