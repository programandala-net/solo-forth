; kernel.gplusdos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; Last modified: 201702060045

; ==============================================================
; Description

; The part of the Solo Forth's kernel that is specific to G+DOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; History

; See
; http://programandala.net/en.program.solo_forth.history.html

; Latest changes:

; 2016-11-26: Improve `transfer-block` using a literal for the second
; `transfer-block`.
;
; 2016-12-29: Change definition names to lowercase, after the
; changes in the main kernel.
;
; 2017-02-05: Move `read-block` and `write-block` to the main
; file of the kernel, because they are identical in G+DOS,
; TR-DOS and +3DOS. Move `rec/track` to the main file of the
; kernel.
;
; 2017-02-06: Improve documentation.

; ==============================================================
; Requirements

if defined gplusdos

; XXX TODO -- implement _ior_ in DOS calls

; ==============================================================
; Dictionary

; ----------------------------------------------
_colon_header dosior_to_ior_,'dosior>ior'

; doc{
;
; dosior>ior ( dosior -- ior )
;
; Convert a DOS _dosior_ to a Forth _ior_.
;
; _dosior_ = the error number returned by G+DOS commands in the
; AF register:

; * bit 0 (CY) = set: error; unset: no error
; * bits 8-14  = error code
; * bit 15     = set: OS error; unset: G+DOS error

; _ior_ = zero (no error) or Forth exception code:

; * -1031..-1000: Equivalent to G+DOS error codes 0..31.
; * -1154..-1128: Equivalent to OS error codes 0..27.

; ----
; : dosior>ior  ( dosior -- ior )
;   dup 1 and negate          \ error?
;   swap flip %11111111 and   \ get upper 8 bits
;   1000 + negate and  ;
; ----

; }doc

; XXX TODO -- remove the gap between G+DOS and OS error
; numbers

  dw dup_
  _literal 1
  dw and_,negate_  ; error?
  dw swap_,flip_
  _literal %11111111
  dw and_ ; get upper 8 bits
  _literal 1000
  dw plus_,negate_,and_
  dw exit_

; ----------------------------------------------
  _colon_header sector_id_,'sector-id'

; doc{

; sector-id  ( n -- x )

; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by G+DOS: The high byte of _x_
; is the track (0..79 for side 0; 128..207 for side 1); its low
; byte is the sector (1..10).

; ----
; : sector-id  ( n -- x )
;   \ x (high byte) = track 0..79 for side 0, 128..207 for side 1
;   \   (low byte)  = sector 1..10
;   \ track0        = 0..79
;   \ track         = 0..207
;   \ side          = 0..1
;   dup sectors/track mod 1+    ( n sector )
;   swap dup 20 /               ( sector n track0 )
;   swap sectors/track / 1 and  ( sector track0 side )
;   negate 128 and or           ( sector track )
;   flip or  ;
; ----

; }doc

  dw dup_,rec_slash_track_,mod_,one_plus_,swap_,dup_
  _literal 20
  dw slash_
  dw swap_,rec_slash_track_,slash_
  _literal 1
  dw and_
  dw negate_
  _literal 128
  dw and_,or_
  dw flip_,or_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'transfer-block'

; doc{
;
; transfer-block  ( n -- )
;
; The block-level disk read-write linkage.
; Transfer block _n_ to or from disk.
; The read or write mode must be previously set
; by `write-mode` or `read-mode`.
;
; See: `read-mode`, `write-mode`, `transfer-sector`.
;
; }doc

  ; XXX TODO restore the current drive

  dw rec_slash_blk_,star_ ; sequential number of the first sector of the block
  dw dup_
  dw sector_id_
  dw buffer_data_
  dw transfer_sector_,throw_

  dw one_plus_,sector_id_
  _literal buffer_data+bytes_per_sector
  dw transfer_sector_,throw_

  dw exit_

; ----------------------------------------------
  _code_header transfer_sector_,'transfer-sector'

; doc{
;
; transfer-sector  ( x a -- ior )
;
; The sector-level disk read-write linkage.  Transfer sector
; _x_ to or from disk.  The read or write mode must be
; previously set by `write-mode` or `read-mode`.

; * x = sector to read or write
;     ** high byte = track 0..79, +128 if side 1
;     ** low byte  = sector 1..10
; * a = source or destination address

; See: `read-mode`, `write-mode`, `transfer-block`.
;
; }doc

  pop ix ; address
  pop de ; d = track 0..79, +128 if side 1
         ; e = sector 1..10
  push bc ; save the Forth IP
transfer_sector.drive equ $+1 ; XXX TODO -- not used yet
  ld a,2 ; drive
  rst 8 ; G+DOS hook
transfer_sector.command:
  ; G+DOS command already patched:
  db $44 ; $44 = read ; $45 = write
  pop bc ; restore the Forth IP
  ld ix,next
  jp nc,false_ ; no error
  push af ; DOS error code
  jp dosior_to_ior_

; ----------------------------------------------
  _colon_header write_mode_,'write-mode'

; doc{
;
; write-mode  ( -- )
;
; Set the write mode for `transfer-sector` and `transfer-block`.
;
; }doc

  _literal $45 ; G+DOS write sector command
  dw branch_,transfer_mode

; ----------------------------------------------
  _colon_header read_mode_,'read-mode'

; doc{
;
; read-mode  ( -- )
;
; Set the read mode for `transfer-sector` and `transfer-block`.
;
; }doc

  _literal $44 ; G+DOS read sector command
transfer_mode:
  dw lit_,transfer_sector.command,c_store_
  dw exit_

; ==============================================================

endif ; defined gplusdos

; vim: filetype=z80:textwidth=64
