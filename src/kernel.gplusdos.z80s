; kernel.gplusdos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; Last modified: 201608050023

; ==============================================================
; Description

; The part of the Solo Forth's kernel that is specific to G+DOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; History

; See
; http://programandala.net/en.program.solo_forth.history.html

; ==============================================================

; XXX TODO -- implement _ior_ in DOS calls

if defined gplusdos

; ==============================================================
; Dictionary

; ----------------------------------------------
  _constant_header rec_slash_track_,'REC/TRACK'

; doc{
;
; rec/track  ( -- n )
;
; Records (sectors) per disk track.
;
; }doc

  dw 10
  ; XXX TODO -- use a label and move to the kernel

; ----------------------------------------------
  _colon_header sector_id_,'SECTOR-ID'

; doc{

; sector-id  ( n -- x )

; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by G+DOS: The high byte of _x_
; is the track (0..79 for side 0; 128..207 for side 1); its low
; byte is the sector (1..10).
;
; ----
; : sector-id  ( n -- x )
;   \ x (high byte) = track 0..79 for side 0, 128..207 for side 1
;   \   (low byte)  = sector 1..10
;   \ track0        = 0..79
;   \ track         = 0..207
;   \ side          = 0..1
;   dup sectors/track mod 1+    ( n sector )
;   swap dup 20 /               ( sector n track0 )
;   swap sectors/track / 1 and  ( sector track0 side )
;   negate 128 and or           ( sector track )
;   flip or  ;
; ----
;
; }doc

  dw dup_,rec_slash_track_,mod_,one_plus_,swap_,dup_
  _literal 20
  dw slash_
  dw swap_,rec_slash_track_,slash_
  _literal 1
  dw and_
  dw negate_
  _literal 128
  dw and_,or_
  dw flip_,or_
  dw exit_

; ----------------------------------------------
  _colon_header read_block_,'READ-BLOCK'

; doc{
;
; read-block  ( n -- )
;
; Read disk block _n_ to the buffer.
;
; ----
; : read-block  ( n -- )
;   read-mode transfer-block  ;
; ----
;
; }doc

  dw read_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header write_block_,'WRITE-BLOCK'

; doc{
;
; write-block  ( n -- )
;
; Write the buffer to disk block _n_.
;
; ----
; : write-block  ( n -- )
;   write-mode transfer-block  ;
; ----
;
; }doc

  dw write_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'TRANSFER-BLOCK'

; doc{
;
; transfer-block  ( n -- )
;
; The block-level disk read-write linkage.
; Transfer block _n_ to or from disk.
; The read or write mode must be previously set
; by `write-mode` or `read-mode`.
;
; }doc

  ; XXX TODO restore the current drive

  dw rec_slash_blk_,star_ ; sequential number of the first sector of the block
  dw dup_
  dw sector_id_
  dw buffer_data_
  dw transfer_sector_

  dw one_plus_,sector_id_

  ; XXX TODO -- benchmark again
  dw buffer_data_,b_slash_rec_,plus_ ; XXX 23768 frames
  ;_literal disk_buffer+cell+bytes_per_sector ; XXX 24425 frames??

  dw transfer_sector_

  dw exit_

; ----------------------------------------------
  _code_header transfer_sector_,'TRANSFER-SECTOR'

; doc{
;
; transfer-sector  ( x a -- )
;
; The sector-level disk read-write linkage.
; Transfer sector _x_ to or from disk.
; The read or write mode must be previously set
; by `write-mode` or `read-mode`.
;
; x = sector to read or write
;     high byte = track 0..79, +128 if side 1
;     low byte  = sector 1..10
; a = source or destination address
;
; }doc

; XXX TODO -- format the parameters list of the documentation,
; and other similar cases as well

  pop ix ; address
  pop de ; d = track 0..79, +128 if side 1
         ; e = sector 1..10
  push bc ; save the Forth IP
transfer_sector.drive equ $+1 ; XXX TODO -- not used yet
  ld a,2 ; drive
  rst 8 ; G+DOS hook
transfer_sector.command:
  ; G+DOS command already patched:
  db $44 ; $44 = read ; $45 = write
  ; XXX TODO -- check error code
  pop bc ; restore the Forth IP
  ld ix,next
  _jp_next

; ----------------------------------------------
  _colon_header set_library_drive_,'SET-LIBRARY-DRIVE'

; doc{
;
; set-library-drive  ( b -- )
;
; Set disk drive _b_ (1 or 2) as the library drive.  By default
; it's drive 2.
;
; See `get-library-drive`.
;
; }doc

  _literal transfer_sector.drive
  dw c_store_
  dw exit_

  ; XXX TODO -- do not patch `transfer-sector`, but a higher level.
  ; XXX TODO -- move to the library

; ----------------------------------------------
  _colon_header get_library_drive_,'GET-LIBRARY-DRIVE'

; doc{
;
; get-library-drive  ( b -- )
;
; Get the disk drive _b_ (1 or 2) used the library drive.  By default
; it's drive 2.
;
; See `set-library-drive`.
;
; }doc

  _literal transfer_sector.drive
  dw c_store_
  dw exit_

  ; XXX TODO -- move to the library

; ----------------------------------------------
  _colon_header write_mode_,'WRITE-MODE'

; doc{
;
; write-mode  ( -- )
;
; Set the write mode for `transfer-sector` and `transfer-block`.
;
; }doc

  _literal $45 ; G+DOS write sector command
  dw branch_,transfer_mode

; ----------------------------------------------
  _colon_header read_mode_,'READ-MODE'

; doc{
;
; read-mode  ( -- )
;
; Set the read mode for `transfer-sector` and `transfer-block`.
;
; }doc

  _literal $44 ; G+DOS read sector command
transfer_mode:
  dw lit_,transfer_sector.command,c_store_
  dw exit_

endif

; vim: filetype=z80:textwidth=64
