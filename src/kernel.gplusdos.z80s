; kernel.gplusdos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; Last modified: 201804091328
; See change log at the end of the file

; ==============================================================
; Description

; The part of the kernel that is specific to G+DOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016, 2017, 2018.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; Requirements

if gplusdos

; XXX TODO -- implement _ior_ in DOS calls

; ==============================================================
; Dictionary

; ----------------------------------------------
_colon_header dosior_to_ior_,'dosior>ior'

; doc{
;
; dosior>ior ( dosior -- ior )
;
; Convert a DOS _dosior_ to a Forth _ior_.
;
; _dosior_ = the error number returned by G+DOS commands in the
; AF register:

; * bit 0 (Fc) = set: error; unset: no error
; * bits 8-14  = error code
; * bit 15     = set: OS error; unset: G+DOS error

; _ior_ = zero (no error) or Forth exception code:

; * -1031..-1000: Equivalent to G+DOS error codes 0..31.
; * -1154..-1128: Equivalent to OS error codes 0..27.
;
; Definition:

; ----
; : dosior>ior ( dosior -- ior )
;   dup 1 and negate          \ error?
;   swap flip %11111111 and   \ get upper 8 bits
;   1000 + negate and ;
; ----

; }doc

; XXX TODO -- remove the gap between G+DOS and OS error
; numbers

  dw dup_
  _literal 1
  dw and_,negate_       ; error?
  dw swap_,flip_
  _literal %11111111
  dw and_               ; get upper 8 bits
  _literal 1000
  dw plus_,negate_,and_

if 0 ; XXX TMP -- For debugging:
  dw rp_fetch_,cr_,u_dot_ ; RP = 24660
  _literal 5
  dw border_,key_,drop_
endif

  dw exit_

; ----------------------------------------------
  _code_header sector_to_dos_,'sector>dos'

; doc{
;
; sector>dos ( sector track -- x )
;
; Convert the 8-bit sector number _sector_ and the 8-bit track
; number _track_ to the 16-bit number _x_ in the format used by
; G+DOS: The high byte of _x_ is the track, and its low byte is
; the sector.
;
; ``sector>dos`` is a factor of `block-sector#>dos`.
;
; ``sector>dos`` is written in Z80. Its equivalent definition in
; Forth is the following:
;
; ----
; : sector>dos ( sector track -- x ) flip or ;
; ----
;
; }doc

  pop de
  pop hl
  ld h,e
  push hl
  _jp_next

; ----------------------------------------------
  _colon_header sector_hash_to_dos_,'sector#>dos'

; doc{
;
; sector#>dos ( n -- x )
;
; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by G+DOS: The high byte of _x_ is
; the track (0..79 for side 0; 128..207 for side 1); its low
; byte is the sector (1..10)..

; Definition:

; ----
; : sector#>dos ( n -- x )
;   dup sectors/track mod 1+    ( n sector )
;   swap dup 20 /               ( sector n track0 )
;   swap sectors/track / 1 and  ( sector track0 side )
;   negate 128 and or           ( sector track )
;   sector>dos ;

;   \ Notes:
;
;   \ x (high byte) = track 0..79 for side 0, 128..207 for side 1
;   \ x (low byte)  = sector 1..10
;   \ track0        = 0..79
;   \ track         = 0..207
;   \ side          = 0..1
; ----

; See: `sectors/track`, `sector>dos`, `transfer-sector`.
;
; }doc

  dw dup_,sectors_slash_track_,mod_,one_plus_,swap_,dup_
  _literal 20
  dw slash_
  dw swap_,sectors_slash_track_,slash_
  _literal 1
  dw and_
  dw negate_
  _literal 128
  dw and_,or_
  dw sector_to_dos_
  dw exit_

; ----------------------------------------------
  _alias_header block_sector_hash_to_dos_,'block-sector#>dos',,sector_hash_to_dos_

; doc{
;
; block-sector#>dos ( n -- x )
;
; Convert the sequential disk sector _n_ of a block drive to the
; disk sector id _x_, in the format required by G+DOS: The high
; byte of _x_ is the track (0..79 for side 0; 128..207 for side
; 1); its low byte is the sector (1..10).
;
; In G+DOS all sectors of a block disk can be used for blocks.
; Therefore ``block-sector#>dos`` is an alias of `sector#>dos`.
;
; See: `transfer-block`.
;
; }doc

; ----------------------------------------------
  _colon_header transfer_block_,'transfer-block'

; doc{
;
; transfer-block ( u -- )
;
; The block-level disk read-write linkage.  Transfer block _u_
; to or from disk.  The read or write mode must be previously
; set by `write-mode` or `read-mode`.
;
; Definition:

; ----
; : transfer-block ( u -- )
;   >drive-block sectors/block * dup
;      block-sector#>dos buffer-data
;      transfer-sector throw
;   1+ block-sector#>dos [ buffer-data b/sector ] literal
;      transfer-sector throw ;
; ----

; See: `transfer-sector`, `block-sector#>dos`,
; `>drive-block`.
;
; }doc

  dw to_drive_block_
  dw sectors_slash_block_,star_ ; sequential number of the first sector of the block
  dw dup_
  dw block_sector_hash_to_dos_
  dw buffer_data_
  dw transfer_sector_,throw_

  dw one_plus_,block_sector_hash_to_dos_
  _literal buffer_data+bytes_per_sector
  dw transfer_sector_,throw_

  dw exit_

; ----------------------------------------------
  _code_header transfer_sector_,'transfer-sector'

; doc{
;
; transfer-sector ( x a -- ior )
;
; The sector-level disk read-write linkage.  Transfer sector
; _x_ to or from the disk in the current drive.  The read or
; write mode must be previously set by `write-mode` or
; `read-mode`.

; * _x_ = sector to be read or written
;     ** high byte = track 0..79, +128 if side 1
;     ** low byte  = sector 1..10
; * _a_ = source or destination address

; See: `block-sector#>dos`, `transfer-block`.
;
; }doc

  pop ix                       ; address
  pop de                       ; D = track 0..79, +128 if side 1
                               ; E = sector 1..10
  push bc                      ; save the Forth IP
  in a,(231)                   ; page in the Plus D memory
  ld a,($3ACE)                 ; get the current drive
  out (231),a                  ; page out the Plus D memory
  rst 8                        ; G+DOS hook
transfer_sector.command:       ; G+DOS command already patched:
  db $44                       ; $44 = read, $45 = write
  pop bc                       ; restore the Forth IP
  ld ix,next                   ; restore IX
  jp nc,false_                 ; no error
  push af                      ; DOS error code
  jp dosior_to_ior_

; ----------------------------------------------
  _code_header write_mode_,'write-mode'

; doc{
;
; write-mode ( -- )
;
; Set the write mode for `transfer-sector` and `transfer-block`.
;
; See: `read-mode`.
;
; }doc

  ld a,$45 ; G+DOS write sector command
  jr transfer_mode

; ----------------------------------------------
  _code_header read_mode_,'read-mode'

; doc{
;
; read-mode ( -- )
;
; Set the read mode for `transfer-sector` and `transfer-block`.
;
; See: `write-mode`.
;
; }doc

  ld a,$44 ; G+DOS read sector command

transfer_mode:
  ; A = G+DOS command: read sector or write sector
  ld (transfer_sector.command),a
  _jp_next

; ----------------------------------------------
  _code_header set_drive_,'set-drive'

; doc{
;
; set-drive ( n -- ior )
;
; Set the drive _n_ (1 or 2) as the current one. If the drive is
; successfully selected, _ior_ is zero. Otherwise it's an
; exception code.
;
; See: `get-drive`, `?set-drive`, `drive`, `set-block-drives,`
; `2-block-drives`.
;
; }doc

  pop hl       ; L = drive
  push bc      ; save the Forth IP
  ld a,l       ; A = drive
  rst 8        ; G+DOS hook
  defb $21     ; call the SEL_DRIVE hook to select the drive in A
  pop bc       ; restore the Forth IP
  ld ix,next   ; restore Forth IX
  and a        ; wrong drive number?
  jp nz,false_ ; if no error, return zero
  ld hl,-1022  ; otherwise, exception code "wrong drive"
  jp push_hl

  ; Note: The G+DOS routine accessed with hook $21 (at address
  ; $0E38) does nothing when the drive number is wrong, except
  ; loading A with zero. If the drive number is correct, A is
  ; not loaded with an explicit value, but it's never zero at
  ; the end of the routine.

; ==============================================================

endif ; defined gplusdos

; ==============================================================
; Change log

; Older changes are in
; http://programandala.net/en.program.solo_forth.history.html

; 2016-11-26: Improve `transfer-block` using a literal for the
; second `transfer-block`.
;
; 2016-12-29: Change definition names to lowercase, after the
; changes in the main kernel.
;
; 2017-02-05: Move `read-block` and `write-block` to the main
; file of the kernel, because they are identical in G+DOS,
; TR-DOS and +3DOS. Move `rec/track` to the main file of the
; kernel.
;
; 2017-02-06: Improve documentation.
;
; 2017-02-07: Rewrite `read-mode` and `write-mode` in Z80.
;
; 2017-02-08: Improve `transfer-sector` to use the current drive
; (formerly it always used drive 2). Move `set-drive` from the
; library, because of that.
;
; 2017-02-09: Add `>drive-block` to `transfer-block`.
;
; 2017-02-17: Update cross references.
;
; 2017-03-03: Improve documentation.
;
; 2017-03-11: Update notation of Z80 flags.
;
; 2017-03-13: Update names including "rec" to "sector(s)";
; update names including "blk" to "block(s)".  Rename
; `sector-id` to `block-sector#>dos` and factor `sector>dos` and
; `sector#>dos` from it.
;
; 2017-03-28: Fix and improve documentation.
;
; 2017-05-09: Replace `_jp_pushhl` with `push hl` and
; `_jp_next`.
;
; 2018-03-14: Improve documentation.
;
; 2018-03-15: Remove debugging version of `((cat`.
;
; 2018-04-07: Improve documentation.
;
; 2018-04-09: Update documentation with reference to
; `?set-drive`.

; vim: filetype=z80:textwidth=64
