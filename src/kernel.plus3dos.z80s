; kernel.plus3dos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; Last modified: 202007112256
; See change log at the end of the file

; ==============================================================
; Description

; The part of the kernel that is specific to +3DOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016, 2017, 2018, 2020.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; Requirements

if plus3dos

include inc/zx_spectrum_plus3dos.z80s

; ==============================================================
; Routines to call +3DOS

; ------------------------------
; DOS call (routine in IX)

dos.ix:

  ; Input:
  ;   IX = address of the +3DOS routine
  ; Output:
  ;   IX = Forth `next`

  ; All other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; +3DOS requirements).

  call dos_in
  call call_ix    ; call routine in IX
dos.ix.return:
  call dos_out
  ld ix,next      ; restore Forth IX
  ret

; ------------------------------
; DOS call (routine in TOS)

dos.tos:

  ; The top of the Z80 stack holds the address of the DOS
  ; routine to be run.  All registers are passed intact to the
  ; DOS routine and are returned from it.

  ; This routine is used when the IX register is a parameter of
  ; the DOS routine.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements).

  call dos_in
  exx                  ; preserve parameters
  pop de               ; return address to Forth word
  pop hl               ; address of the DOS routine
  push de              ; return address to Forth word
  ld de,dos.ix.return  ; return address from the DOS routine
  push de              ; force the return later
  push hl              ; address of the DOS routine
  exx                  ; restore parameters
  ret                  ; call routine in TOS, then continue at dos.ix.return

; ------------------------------
; Page in DOS

dos_in:

  push af
  push bc                  ; temp save registers while switching
  ld   a,(sys_bankm)       ; RAM/ROM switching system variable
  or   %00000111           ; set bits 0-3: RAM 7
  res  4,a                 ; and DOS ROM
  ld   bc,bank1_port       ; port used for horiz. ROM switch and RAM paging
  di
  ld   (sys_bankm),a       ; keep system variables up to date
  out  (c),a               ; RAM page 7 to top and DOS ROM
  ei
  pop  bc
  pop  af
  ret

; ------------------------------
; Page out DOS

dos_out:

  push af
  push bc
  ld   a,(sys_bankm)
  and  %11111000           ; reset bits 0-3: RAM 0
  set  4,a                 ; switch to ROM 3 (48 BASIC)
  ld   bc,bank1_port
  di
  ld   (sys_bankm),a
  out  (c),a               ; switch back to RAM page 0 and 48 BASIC
  ei
  pop  bc
  pop  af
  ret

; ------------------------------
; DOS call (routine in IX, preserving the Forth IP)

dos.ix.preserve_ip:

  ; This routine is used when the BC register (the Forth IP) is
  ; not a parameter of the DOS routine.

  ; IX holds the address of the DOS routine to be run. All
  ; other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements), so saved AF and BC will not be switched
  ; out.

  push bc
  call dos.ix
  pop bc
  ret

; ------------------------------
; DOS call (routine in IX)
; Push EHL and DOS ior and continue at `next`

dos.ix_ehl:

  ; Address of an entry point to the Forth inner interpreter.
  ; This entry point is jumped to at the end of a code word, in
  ; order to execute first the +3DOS command hold in the IX
  ; register, which returns a double-cell result in registers E
  ; and HL.

  ; Input:
  ;   B    = file number
  ;   IX   = DOS routine
  ;   (SP) = Forth IP
  ; Output:
  ;   BC   = Forth IP
  ;   IX   = Forth `next`
  ; Output stack:
  ;   ( d ior )
  ;   Where _d_ is the content of registers EHL.

  call dos.ix
  pop bc ; restore the Forth IP
  ; EHL = result
  push hl ; low part
  ld d,0
  push de ; high part

  ; Execution continues at `push_dos_ior`:

; ------------------------------
; Push DOS ior and continue at `next`

push_dos_ior:

  ; This routine is entered with `jp`, not with `call`, because
  ; it works as the end of a code Forth word: it jumps to
  ; `next` at the end.

  ; Input:
  ;   A  = +3DOS error code (0..36)
  ;   Fc = no error?
  ; Output (error):
  ;   TOS = Forth exception code (-1036..-1000)
  ; Output (no error):
  ;   TOS = false

  jp c,false_   ; no error
  call dosior_to_ior
  ; HL = error code
  push hl
  _jp_next

; ------------------------------
; Save and restore the Forth IP

; These routines are used when a ROM call needs many parameters
; and not all of them can be taken from the stack in order to
; push BC before the call.  `dos.ix.preserve_ip` is not useful
; in those cases.

save_ip:
  ld h,b
  ld l,c
  ld (saved_ip),hl
  ret

restore_ip:
saved_ip: equ $+1
  ld bc,0 ; patched by save_ip
  ret

; ==============================================================
; Dictionary

; ----------------------------------------------
  _constant_header save_ip_underscore_,'save-ip_'

; doc{
;
; save-ip_ ( -- a ) "save-I-P-underscore"
;
; Address of a routine that saves the Forth IP (Z80 register
; BC), which must be restored later by the routine pointed by
; `restore-ip_`.
;
; This routine used when a ROM call needs many parameters and
; not all of them can be taken from the stack in order to push
; BC before the call. `dos-ix-preserve-ip_` is not useful in
; those cases.

; }doc

  dw save_ip

; ----------------------------------------------
  _constant_header restore_ip_underscore_,'restore-ip_'

; doc{
;
; restore-ip_ ( -- a ) "restore-I-P-underscore"
;
; Address of a routine that restores the Forth IP (Z80 register
; BC), previously saved by the routine pointed by `save-ip_`.

; See: `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  dw restore_ip

; ----------------------------------------------
  _constant_header dos_ix_underscore_,'dos-ix_'

; doc{
;
; dos-ix_ ( -- a ) "dos-I-X-underscore"
;
; Address of a routine that executes the +3DOS command hold in
; the IX register.

; ....
; Input:
;   IX = address of the +3DOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; +3DOS requirements).
;
; See: `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix

; ----------------------------------------------
  _constant_header dos_ix_ehl_underscore_,'dos-ix-ehl_'

; doc{
;
; dos-ix-ehl_ ( -- a ) "dos-I-X-E-H-L-underscore"
;
; Address of an entry point to the Forth inner interpreter.
; This entry point is jumped to at the end of a code word, in
; order to execute first the +3DOS command hold in the IX
; register, which returns a double-cell result in registers E
; and HL.

; ....
; Input:
;   B    = file number
;   IX   = address of the +3DOS routine
;   (SP) = Forth IP
; Output:
;   BC   = Forth IP
;   IX   = Forth `next`
; Output stack:
;   ( d ior )
;   Where _d_ is the content of registers EHL.
; ....

; The stack must be somewhere in central 32K (conforming to
; +3DOS requirements).
;
; See: `dos-ix_`, `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix_ehl

; ----------------------------------------------
  _constant_header dos_tos_underscore_,'dos-tos_'

; doc{
;
; dos-tos_ ( -- a ) "dos-T-O-S-underscore"
;
; Address of a routine that executes the +3DOS command hold on
; the top of the stack.
;
; This routine is used when the IX register is a parameter of
; the +3DOS routine.

; ....
; Input:
;   (TOS) = address of the +3DOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; +3DOS requirements).
;
; See: `dos-ix_`, `dos-ix-preserve-ip_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.tos

; ----------------------------------------------
  _constant_header dos_in_underscore_,'dos-in_'

; doc{
;
; dos-in_ ( -- a ) "dos-in-underscore"
;
; Address of a routine that pages in RAM 7 and ROM 2 (DOS), as
; needed to call a +3DOS routine.
;
; The stack must be somewhere in central 32K (conforming to
; +3DOS requirements).
;
; See: `dos-out_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos_in

; ----------------------------------------------
  _constant_header dos_out_underscore_,'dos-in_'

; doc{
;
; dos-out_ ( -- a ) "dos-out-underscore"
;
; Address of a routine that pages out RAM 7 and ROM 2 (DOS),
; paging in the default memory configuration: RAM 0 and ROM 3
; (48 BASIC).
;
; The stack must be somewhere in central 32K (conforming to
; +3DOS requirements).
;
; See: `dos-in_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos_in

; ----------------------------------------------
  _constant_header dos_ix_preserve_ip_underscore_,'dos-ix-preserve-ip_'

; doc{
;
; dos-ix-preserve-ip_ ( -- a ) "dos-I-X-preserve-I-P-underscore"
;
; Address of a routine that executes the +3DOS command hold in
; the IX register, preserving the Forth IP.

; ....
; Input:
;   IX = address of the +3DOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; +3DOS requirements).
;
; See: `dos-ix_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix.preserve_ip

; ----------------------------------------------
  _constant_header push_dos_ior_,'pushdosior'

  ; XXX TODO -- Move to the assembler word list.

; doc{
;
; pushdosior ( -- a ) "push-dos-I-O-R"
;
; Address of an entry point to the Forth inner interpreter.
; This entry point is jumped to at the end of a code word, in
; order to convert a _dosior_ into a _ior_ and push it.

; ....
; Input:
;   A  = +3DOS error result (0..36)
; Output (no error):
;   TOS = zero
; Output (error):
;   TOS = Forth exception code (-1036..-1000)
; ....

; See: `dosior>ior`.
;
; }doc

  dw push_dos_ior

; ----------------------------------------------
_code_header dosior_to_ior_,'dosior>ior'

; doc{
;
; dosior>ior ( dosior -- ior ) "dos-I-O-R-to-I-O-R"
;
; Convert a DOS ior to a Forth ior.
;
; ``dosior>ior`` is written in Z80. Its equivalent definition in
; Forth is the following:

; ----
; : dosior>ior ( dosior -- ior ) 1000 + negate ;
; ----

; See: `pushdosior`.
;
; }doc

  pop hl
  call dosior_to_ior.hl
  push hl
  _jp_next

dosior_to_ior:

  ; Input:
  ;   A  = +3DOS error code (0..36)
  ; Output:
  ;   HL = Forth exception code (-1036..-1000)

  ld h,0
  ld l,a

dosior_to_ior.hl:

  ; Input:
  ;   HL  = +3DOS error code (0..36)
  ; Output:
  ;   HL = Forth exception code (-1036..-1000)

  ld de,1000
  add hl,de
  jp negate_hl

; ----------------------------------------------
  _code_header sector_to_dos_,'sector>dos'

; doc{
;
; sector>dos ( sector track -- x ) "sector-to-dos"
;
; Convert the 8-bit sector number _sector_ and the 8-bit track
; number _track_ to the 16-bit number _x_ in the format used by
; +3DOS: The high byte of _x_ is the track, and its low byte is
; the sector.
;
; ``sector>dos`` is a factor of `sector#>dos` and
; `block-sector#>dos`.
;
; ``sector>dos`` is written in Z80. Its equivalent definition in
; Forth is the following:

; ----
; : sector>dos ( sector track -- x ) flip or ;
; ----

; }doc

  pop de
  pop hl
  ld h,e
  push hl
  _jp_next

; ----------------------------------------------
  _colon_header sector_number_sign_to_dos_,'sector#>dos'

; doc{
;
; sector#>dos ( n -- x ) "sector-number-sign-to-dos"
;
; Convert the sequential disk sector _n_ (0 index) to the disk
; sector id _x_, in the format required by +3DOS: The high byte
; of _x_ is the logical track (0 index); its low byte is the
; logical sector (0 index).
;
; Definition:

; ----
; : sector#>dos ( n -- x ) sectors/track /mod sector>dos ;
; ----

; See: `sectors/track`, `sector>dos`, `transfer-sector`.
;
; }doc

  dw sectors_slash_track_,slash_mod_,sector_to_dos_
  dw exit_

; ----------------------------------------------
  _colon_header block_sector_number_sign_to_dos_,'block-sector#>dos'

; doc{
;
; block-sector#>dos ( n -- x ) "block-sector-number-sign-to-dos"
;
; Convert the sequential disk sector _n_ (0 index) of a block
; disk to the disk sector id _x_, in the format required by
; +3DOS: The high byte of _x_ is the logical track (0 index);
; its low byte is the logical sector (0 index).
;
; In +3DOS the first sector of a block disk cannot be used for
; blocks.
;
; Definition:

; ----
; : block-sector#>dos ( n -- x ) 1+ sector#>dos ;
; ----

; See: `sectors/track`, `sector#>dos`, `transfer-block`.
;
; }doc

  dw one_plus_,sector_number_sign_to_dos_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'transfer-block'

; doc{
;
; transfer-block ( u -- ior )
;
; The block-level disk read-write linkage.  Transfer block _u_
; to or from the current drive set by `set-drive` or
; `set-block-drives`.  The read or write mode must be previously
; set by `write-mode` or `read-mode`.
;
; Definition:

; ----
; : transfer-block ( u -- )
;   >drive-block sectors/block * dup
;   block-sector#>dos buffer-data
;     transfer-sector throw
;   1+ block-sector#>dos [ buffer-data b/sector + ] literal
;     transfer-sector throw ;
; ----

; See: `transfer-sector`, `block-sector#>dos`, `>drive-block`,
; `set-drive`.
;
; }doc

  dw to_drive_block_
  dw sectors_slash_block_,star_ ; sequential number of the first sector of the block
  dw dup_
  dw block_sector_number_sign_to_dos_
  dw buffer_data_
  dw transfer_sector_,throw_

  dw one_plus_,block_sector_number_sign_to_dos_
  _literal buffer_data+bytes_per_sector
  dw transfer_sector_,throw_

  dw exit_

; ----------------------------------------------
  _code_header transfer_bytes_,'transfer-bytes'

; doc{
;
; transfer-bytes ( n ca len fid -- ior )
;
; Transfer _len_ bytes to/from file _fid_ to/from memory, using _n_ as
; page $C000..$FFFF.  The read or write mode must be previously set by
; `write-mode` or `read-mode`.
;
; }doc

  ; XXX OLD
  ; XXX TODO -- Move to the library.
  ; XXX TODO -- Update `read-mode` and `write-mode` to modify
  ; this word too

  ld (transfer_bytes.backup_ip),bc ; save Forth IP
  pop bc ; C = fid
  ld a,c ; A = fid
  pop de ; length
  pop hl ; address
  pop bc ; C = page
  ld b,a ; B = fid
transfer_bytes.command equ $+2
  ld ix,dos_write
  call dos.ix
transfer_bytes.backup_ip equ $+1
  ld bc,0 ; restore Forth IP
  jp push_dos_ior

; ----------------------------------------------
  _code_header transfer_sector_,'transfer-sector'

; doc{
;
; transfer-sector ( x a -- ior )
;
; The sector-level disk read-write linkage.  Transfer one sector
; from memory address _a_ to disk sector _x_ of the current
; drive, or the other way around.  The read or write mode must
; be previously set by `write-mode` or `read-mode`.
;
; See: `transfer-block`, `set-drive`.
;
; }doc

transfer_sector.xdpb: equ $+2
  ld ix,0  ; IX = XDPB of the current drive (patched by `set-drive`)
  pop hl   ; HL = address of origin or destination buffer
  pop de   ; D = logical track, E = logical sector

  push bc  ; preserve Forth IP

  ld a,(address_of_default_bank)
  ld b,a                                ; page for $C000..$FFFF
transfer_sector.physical_drive: equ $+1
  ld c,0                                ; physical drive: 0..1 (patched by `set-drive`)

  exx                                   ; save HL
transfer_sector.command equ $+1
  ld hl,dd_read_sector
  push hl
  exx                                   ; restore HL

  ; B   = page for $C000..$FFFF
  ; C   = unit (physical drive): 0..1
  ; D   = logical track
  ; E   = logical sector
  ; HL  = address of origin or destination buffer
  ; IX  = XDPB of the current drive
  ; TOS = address of DOS routine,
  ;       either DD READ SECTOR or DD WRITE SECTOR
  call dos.tos

transfer_sector.end:
  pop bc                                ; restore Forth IP
  ld ix,next                            ; restore Forth IX
  jp push_dos_ior

; ----------------------------------------------
  _code_header write_mode_,'write-mode'

; doc{
;
; write-mode ( -- )
;
; Set the write mode for `transfer-sector` and `transfer-block`.
;
; See: `read-mode`.
;
; }doc

  ld hl,dd_write_sector
  jr transfer_mode

; ----------------------------------------------
  _code_header read_mode_,'read-mode'

; doc{
;
; read-mode ( -- )
;
; Set the read mode for `transfer-sector` and `transfer-block`.
;
; See: `write-mode`.
;
; }doc

  ld hl,dd_read_sector

transfer_mode:
  ; HL = DOS routine
  ld (transfer_sector.command),hl
  _jp_next

; ----------------------------------------------
if 0 ; XXX OLD
  _code_header open_disk_,'open-disk'

; doc{
;
; open-disk ( c fid -- ior )
;
; Open disk _c_ ('A'..'P') as a single file _fid_ (0..15).
;
; }doc

  ; XXX TODO -- Finish the documentation.

  ; XXX TODO -- Move to the library.

  pop hl               ; L = file number
  pop de               ; E = drive
  push bc              ; save Forth IP
  ld a,e               ; drive
  ld b,l               ; file number
  ld c,%011            ; access mode: exclusive-read-write ; XXX TMP --
  ld ix,dos_open_drive
  call dos.ix
  pop bc               ; restore Forth IP
  jp push_dos_ior

endif

; ----------------------------------------------
  _code_header get_drive_,'get-drive'

; doc{
;
; get-drive ( -- c ior )
;
; Get the current default drive _c_ ('A'..'P'), i.e.  the drive
; implied by all filenames that do not specify a drive, and the
; drive used by block operations. The default drive is initially
; 'A'.  Return also an error result _ior_.
;
; See: `set-drive`, `get-user`.
;
; }doc

  ; XXX TODO -- Move to the library.

  ld a,255
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  ld h,0
  ld l,a
  push hl
  jp push_dos_ior

; ----------------------------------------------
if 0 ; XXX TODO --

  _code_header log_in_disk_,'log-in-disk'

; doc{
;
; log-in-disk ( n -- ior )
;
; Log in a new disk in phyisical drive unit _n_ (0..1).
;
; }doc

  exx                   ; save Forth IP
  pop bc                ; C = physical drive unit (0..1)
  ld ix,xdpb0_dfa       ; XDPB for physical drive unit 0
  ld a,c
  and a                 ; physical drive unit 0?
  jr z,log_in_disk.call ; if so, continue
  ld ix,xdpb1_dfa       ; XDPB for physical drive unit 0
log_in_disk.call:
  call dos_in
  call dd_login
  call dos_out
  exx                   ; restore Forth IP
  ld ix,next            ; restore Forth IX
  jp push_dos_ior

endif

; ----------------------------------------------
if 0 ; XXX TMP --

  _code_header set_sector_drive_,'set-sector-drive'

  ; XXX TMP -- Experimental factor.

; doc{
;
; set-sector-unit ( n -- ior )
;
; Set unit _n_ (0..1) as the default unit for sector-level
; access, i.e.  the unit used by `transfer-sector` and
; `transfer-block`. The default unit is initially 0.
;
; See: `set-sector-unit`.
;
; }doc

  pop hl
  ld a,l
  sub 'A'
  ld hl,xdpb0_dfa
  jr z,set_sector_drive.patch_transfer_sector
  ld hl,xdpb1_dfa
set_sector_drive.patch_transfer_sector:
  ld (transfer_sector.physical_drive),a
  ld (transfer_sector.xdpb),hl
  jp push_dos_ior

; ----------------------------------------------
  _code_header get_sector_unit_,'get-sector-unit'

  ; XXX TMP -- Experimental factor.

; doc{
;
; get-sector-unit ( -- n )
;
; Get unit _n_ (0..1) currently used for sector-level access,
; i.e.  the unit used by `transfer-sector` and `transfer-block`.
; The default unit is initially 0.
;
; See: `set-sector-unit`.
;
; }doc

  ld a,(transfer_sector.physical_drive)
  jp push_a

endif

; ----------------------------------------------
  _code_header set_filename_drive_,'set-filename-drive'

  ; XXX TMP -- Experimental factor.

; doc{
;
; set-filename-drive ( c -- ior )
;
; Set drive _c_ ('A'..'P') as the current default drive, i.e.
; the drive implied by all filenames that do not specify a
; drive.
;
; Does not access the drive, but merely checks that there is a
; driver for it (which does not imply that the drive exists).
;
; See: `get-filename-drive`.
;
; }doc

  pop hl
  ld a,l
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  jp push_dos_ior

; ----------------------------------------------
  _code_header get_filename_drive_,'get-filename-drive'

  ; XXX TMP -- Experimental factor.

; doc{
;
; get-filename-drive ( -- c ior )
;
; Get drive _c_ ('A'..'P') currently used as default drive, i.e.
; the drive implied by all filenames that do not specify a
; drive.
;
; See: `set-filename-drive`.
;
; }doc

  ld a,$FF
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  ld h,0
  ld l,a
  push hl
  jp push_dos_ior

; ----------------------------------------------
  _code_header set_drive_,'set-drive'

; doc{
;
; set-drive ( c -- ior )
;
; Set drive _c_ ('A'..'P') as the current one, i.e.  the drive
; implied by all filenames that do not specify a drive, and the
; drive used by `transfer-sector` and `transfer-block`,
; returning the I/O result code _ior_.  If the drive is
; successfully selected, _ior_ is zero, otherwise it's an
; exception code.  The default drive is 'A'.
;
; ``set-drive`` does not access the drive, but merely checks
; that there is a driver for it (which does not imply that the
; drive exists).
;
; See: `get-drive`, `?set-drive`, `drive`, `set-block-drives`,
; `2-block-drives`, `set-user`.
;
; }doc

  pop hl ; L = drive
  push bc ; save Forth IP
  ld a,l ; A = drive
  ld ix,dos_set_drive
  call dos.ix
  jr nc,set_drive.end ; skip if error

  ; A = default logical drive ('A'..'P')
  push af
  sub 'A' ; calculate physical drive (0..1)
  ld (transfer_sector.physical_drive),a ; patch `transfer-sector`
  ld (set_drive.physical_drive),a ; patch below
  pop af

  call dos_in
  call dos_ref_xdpb ; IX = XDPB of the current drive
  call dos_out
  jr nc,set_drive.end ; skip if error
  ld (transfer_sector.xdpb),ix ; patch `transfer-sector`

set_drive.physical_drive: equ $+1
  ld c,0 ; physical drive (0..1) (patched above)
  call dos_in
  call dd_login
  call dos_out
  ld ix,next ; restore Forth IX

set_drive.end:
  pop bc ; restore Forth IP
  jp push_dos_ior

; ----------------------------------------------
  _code_header ref_xdbp_,'ref-xdpb'

; doc{
;
; ref-xdbp ( c -- a ior ) "ref-X-D-B-P"
;
; Return the address _a_ of the XDPB of drive _c_ ('A'..'P').
;
; }doc

  ; XXX TODO -- Confirm: The returned address is accessible
  ; when bank 7 is paged in.

  ; XXX TODO -- Move to the library.

  pop hl
  ld a,l               ; drive 'A'..'P'
  ld ix,dos_ref_xdpb
  call dos.ix.preserve_ip
  push ix
  jp push_dos_ior

; ----------------------------------------------
  _code_header default_1346_,'default-1346'

  ; doc{

  ; default-1346 ( -- ) "default-1-3-4-6"
  ;
  ; Set the default configuration of memory banks for +3DOS.
  ;
  ; +3DOS uses RAM banks 1, 3, 4 and 6 as an array of 128
  ; sector buffers (numbered 0 .. 127), each of 512 bytes, thus
  ; 32 buffers per RAM bank. The cache and RAM disk occupy two
  ; separate (contiguous) areas of this array.
  ;
  ; The original default configuration of +3DOS is the
  ; following:

  ; [cols="<,>*"]
  ; .Original configuration of memory buffers on +3DOS. 
  ; |===
  ; | Usage    | First buffer | Number of buffers | KiB
  ;
  ; | Cache    |           32 |                 8 |   4
  ; | RAM disk |           40 |                88 |  44
  ;
  ; | Total    |              |               176 |  48
  ; |===

  ;
  ; In order to free 3 RAM banks for the Forth name space, and
  ; still keep a small RAM disk, the default configuration is
  ; modified by ``default-1346`` the following way:

  ; [cols="<,>*"]
  ; .Solo Forth configuration of memory buffers on +3DOS. 
  ; |===
  ; | Usage    | First buffer | Number of buffers | KiB
  ;
  ; | Cache    |           96 |                 8 |   4
  ; | RAM disk |          104 |                24 |  12
  ;
  ; | Total    |              |                32 |  16
  ; |===

  ; ``default-1346`` is executed by `cold`.
  ;
  ; See: `get-1346`, `set-1346`, `bank`, `far-banks`,
  ; `farlimit`.
  ;
  ; }doc

  exx                  ; save Forth IP
  ld de,$6008 ; $08 sectors for the cache, from sector $60
  ld hl,$6818 ; $18 sectors for the RAM disk, from sector $68
  ld ix,dos_set_1346 ; set RAM pages 1, 3, 4 and 6
  call dos.ix
  exx                  ; restore Forth IP
  _jp_next

; ==============================================================

endif ; defined plus3dos

; ==============================================================
; Change log

; Older changes are in
; http://programandala.net/en.program.solo_forth.history.html

; Latest changes:

; 2016-12-29: Change definition names to lowercase, after the
; changes in the main kernel.
;
; 2017-02-05: Move `read-block` and `write-block` to the main
; file of the kernel, because they are identical in G+DOS,
; TR-DOS and +3DOS. Improve the layout.  Move `rec/track` to the
; main file of the kernel.
;
; 2017-02-07: Rewrite `read-mode` and `write-mode` in Z80. First
; draft of `transfer-sector`.
;
; 2017-02-09: Add `>drive-block` to `transfer-block`.
;
; 2017-02-17: Update cross references.
;
; 2017-03-03: Factor the DOS page in and page out from DOS call
; routine. Rename the DOS entry points. Add `dos.tos`.
;
; 2017-03-04: Update naming convention of Z80 routines, after
; the changes in the kernel.  Move `/filename` ,`>filename`,
; `(rename-file)`, `rename-file`, `dos-set-1346` and
; `dos-get-1364` to the library.
;
; 2017-03-05: Try alternative code to make `set-block-drives`
; work.
;
; 2017-03-06: Reorganize all the code alternatives with
; conditional compilation.
;
; 2017-03-08: Move `close-file` to the library.
;
; 2017-03-09: Move `file-position` and `reposition-file` to the
; library.
;
; 2017-03-11: Update notation of Z80 flags.
;
; 2017-03-13: Update names including "rec" to "sector(s)";
; update names including "blk" to "block(s)".  Rename
; `sector-id` to `block-sector#>dos` and factor `sector>dos` and
; `sector#>dos` from it. Improve documentation.
;
; 2017-03-28: Fix and improve documentation.
;
; 2017-05-09: Replace `_jp_pushhl` with `push hl` and
; `_jp_next`.
;
; 2017-09-09: Update notation "pfa" to the standard "dfa".
;
; 2017-12-05: Fix documentation.
;
; 2018-02-14: Add routines `save_ip` and `restore_ip`, and the
; corresponding Forth constants `save-ip_` and `restore-ip_`.
;
; 2018-03-04: Add `default-1346`, factored from `cold`.
;
; 2018-03-13: Improve documentation.
;
; 2018-03-26: Add `dos-ix-ehl_`.
;
; 2018-03-29: Update documentation.
;
; 2018-04-07: Improve documentation.
;
; 2018-04-08: Improve documentation.
;
; 2018-04-08: Improve documentation. Draft
; `current_drive_method` number 5.
;
; 2018-04-09: Finish the fixed versions of `set-drive` and
; `transfer-sector`: finally, both drive units can be used
; together as block drives. Improve documentation. Remove old
; versions of `set-drive` and `transfer-sector`. Improve
; documentation.
;
; 2018-07-21: Improve documentation of `set-drive`.
;
; 2020-05-24: Fix typo.
;
; 2020-05-24: Add missing pronunciations. Replace "hash"
; notation with "number sign".
;
; 2020-06-15: Improve internal documentation.
;
; 2020-07-07: Improve documentation of `default-1346`.
;
; 2020-07-09: Improve the markup of the `default-1346` table.
;
; 2020-07-11: Add titles to tables.

; vim: filetype=z80:textwidth=64
