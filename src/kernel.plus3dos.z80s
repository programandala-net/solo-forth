; kernel.plus3dos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; XXX UNDER DEVELOPMENT

; Last modified: 201608102151

; ==============================================================
; Description

; The part of the Solo Forth's kernel that is specific to +3DOS.
; Not finished.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; History

; See
; http://programandala.net/en.program.solo_forth.history.html

; ==============================================================

if defined plus3dos

dos_set_drive equ 0 ; XXX TODO --
dos_set_user equ 0 ; XXX TODO --

back_from_dos:
  ; cy = no error?
  ; a  = error code
  jp c,false_   ; no error

back_from_dos.error:
  ; a = error code
  call convert_dos_error_code
  ; hl = error code
  _jp_pushhl

convert_dos_error_code:
  ; Input:   a  = original DOS error code (0..36)
  ; Outptut: hl = DOS error code converted to Forth range (-1000..-1036)
  ; XXX TODO make a Forth word to access this code?
  ld h,0
  ld l,a
convert_dos_error_code.hl:
  ld de,1000
  add hl,de
  jp negate_hl

get_current_drive:
  ld a,$FF

set_current_drive:
  ; a = drive (ASCII 'A'..'P' to set it; $FF to get it)
  ld ix,dos_set_drive
  jr do_dos

get_current_user:
  ld a,$FF

set_current_user:
  ; a = user ($00..$0F to set it; $FF to get it)
  ld ix,dos_set_user

; ------------------------------
; DOS call

dos:

  ; Adapted from the ZX Spectrum +3 manual.

  ; IX holds the address of the DOS routine to be run. All other registers are
  ; passed intact to the DOS routine and are returned from it.

  ; Stack must be somewhere in central 32K (conforming to DOS requirements), so
  ; saved AF and BC will not be switched out.

  push af
  push bc                  ; temp save registers while switching
  ld   a,(sys_bankm)       ; RAM/ROM switching system variable
  or   7                   ; want RAM page 7
  res  4,a                 ; and DOS ROM
  ld   bc,bank1_port       ; port used for horiz ROM switch and RAM paging
  di
  ld   (sys_bankm),a       ; keep system variables up to date
  out  (c),a               ; RAM page 7 to top and DOS ROM
  ei
  pop  bc
  pop  af

  call call_dos.ix         ; go sub routine address in IX

  push af
  push bc
  ld   a,(sys_bankm)
  and  0F8h                ; reset bits for page 0
  set  4,a                 ; switch to ROM 3 (48 BASIC)
  ld   bc,bank1_port
  di
  ld   (sys_bankm),a
  out  (c),a               ; switch back to RAM page 0 and 48 BASIC
  ei
  pop  bc
  pop  af
  ret

call_dos.ix:

  jp   (ix)                ; standard way to CALL (IX), by calling this jump

; ------------------------------
; DOS call preserving the Forth IP

; This is used when the BC register (the Forth IP) is not a parameter of the
; DOS routine

do_dos:
  ; IX = DOS routine to run
  push bc
  call dos
  pop bc
  ret

; ==============================================================
; Dictionary

; ----------------------------------------------
_colon_header dosior_to_ior_,'DOSIOR>IOR'

; doc{
;
; dosior>ior ( dosior -- ior )
;
; Convert a DOS _dosior_ to a Forth _ior_.
;
; }doc

  ; XXX TODO --

  dw exit_

; ----------------------------------------------
  _constant_header rec_slash_track_,'REC/TRACK'

; doc{
;
; rec/track  ( -- n )
;
; Records (sectors) per disk track.
;
; }doc

  dw 9
  ; XXX TODO -- use a label and move to the kernel

; ----------------------------------------------
  _colon_header sector_id_,'SECTOR-ID'

; doc{

; sector-id  ( n -- x )

; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by +3DOS.
;
; ----
;
; }doc

  ; XXX TODO --

  dw exit_

; ----------------------------------------------
  _colon_header read_block_,'READ-BLOCK'

; doc{
;
; read-block  ( n -- )
;
; Read disk block _n_ to the buffer.
;
; ----
; : read-block  ( n -- )
;   read-mode transfer-block  ;
; ----
;
; }doc

  dw read_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header write_block_,'WRITE-BLOCK'

; doc{
;
; write-block  ( n -- )
;
; Write the buffer to disk block _n_.
;
; ----
; : write-block  ( n -- )
;   write-mode transfer-block  ;
; ----
;
; }doc

  dw write_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'TRANSFER-BLOCK'

; doc{
;
; transfer-block  ( n -- )
;
; The block-level disk read-write linkage.
; Transfer block _n_ to or from disk.
; The read or write mode must be previously set
; by `write-mode` or `read-mode`.
;
; }doc

  ; XXX TODO restore the current drive

  dw rec_slash_blk_,star_ ; sequential number of the first sector of the block
  dw dup_
  dw sector_id_
  dw buffer_data_
  dw transfer_sector_,throw_

  dw one_plus_,sector_id_

  ; XXX TODO -- benchmark again
  dw buffer_data_,b_slash_rec_,plus_ ; XXX 23768 frames
  ;_literal disk_buffer+cell+bytes_per_sector ; XXX 24425 frames??

  dw transfer_sector_,throw_

  dw exit_

; ----------------------------------------------
  _code_header transfer_sector_,'TRANSFER-SECTOR'

; doc{
;
; transfer-sector  ( x a -- ior )
;
; The sector-level disk read-write linkage.  Transfer sector _x_ to or
; from disk.  The read or write mode must be previously set by
; `write-mode` or `read-mode`.
;
; x = sector to read or write a = source or destination address
;
; }doc

; XXX TODO --

  jp false_

; ----------------------------------------------
  _colon_header write_mode_,'WRITE-MODE'

; doc{
;
; write-mode  ( -- )
;
; Set the write mode for `transfer-sector` and `transfer-block`.
;
; }doc

  ; XXX TODO --
  dw exit_

; ----------------------------------------------
  _colon_header read_mode_,'READ-MODE'

; doc{
;
; read-mode  ( -- )
;
; Set the read mode for `transfer-sector` and `transfer-block`.
;
; }doc

  ; XXX TODO --
  dw exit_

endif

; vim: filetype=z80:textwidth=64
