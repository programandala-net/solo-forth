; kernel.plus3dos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; XXX UNDER DEVELOPMENT

; Last modified: 201702221439

; ==============================================================
; Description

; The part of the kernel that is specific to +3DOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016, 2017.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; History

; See
; http://programandala.net/en.program.solo_forth.history.html

; Latest changes:

; 2016-12-29: Change definition names to lowercase, after the
; changes in the main kernel.
;
; 2017-02-05: Move `read-block` and `write-block` to the main
; file of the kernel, because they are identical in G+DOS,
; TR-DOS and +3DOS. Improve the layout.  Move `rec/track` to
; the main file of the kernel.
;
; 2017-02-07: Rewrite `read-mode` and `write-mode` in Z80.
; First draft of `transfer-sector`.
;
; 2017-02-09: Add `>drive-block` to `transfer-block`.
;
; 2017-02-17: Update cross references.

; ==============================================================
; Requirements

if defined plus3dos

include inc/zx_spectrum_plus3dos.z80s

; ==============================================================
; Routines to call +3DOS

; ------------------------------
; DOS call

dos:

  ; Adapted from the ZX Spectrum +3 manual.

  ; IX holds the address of the DOS routine to be run. All
  ; other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements), so saved AF and BC will not be switched
  ; out.

  push af
  push bc                  ; temp save registers while switching
  ld   a,(sys_bankm)       ; RAM/ROM switching system variable
  or   %00000111           ; set bits 0-3: RAM 7
  res  4,a                 ; and DOS ROM
  ld   bc,bank1_port       ; port used for horiz. ROM switch and RAM paging
  di
  ld   (sys_bankm),a       ; keep system variables up to date
  out  (c),a               ; RAM page 7 to top and DOS ROM
  ei
  pop  bc
  pop  af

  call dos.jp_ix           ; call routine in IX

  push af
  push bc
  ld   a,(sys_bankm)
  and  %11111000           ; reset bits 0-3: RAM 0
  set  4,a                 ; switch to ROM 3 (48 BASIC)
  ld   bc,bank1_port
  di
  ld   (sys_bankm),a
  out  (c),a               ; switch back to RAM page 0 and 48 BASIC
  ei
  pop  bc
  pop  af
  ret

dos.jp_ix:

  jp   (ix)                ; call address in IX by calling this jump

; ------------------------------
; DOS call preserving the Forth IP

dos.preserve_ip:

  ; This is used when the BC register (the Forth IP) is not a
  ; parameter of the DOS routine.

  ; IX holds the address of the DOS routine to be run. All
  ; other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements), so saved AF and BC will not be switched
  ; out.

  push bc
  call dos
  pop bc
  ret

; ------------------------------
; Push DOS ior and continue at `next`

push_dos_ior:

  ; This routine is entered with `jp`, not with `call`, because
  ; it works as the end of a code Forth word: it jumps to
  ; `next` at the end.

  ; Input:
  ;   CY = no error?
  ;   A  = +3DOS error code (0..36)
  ; Output if error:
  ;   TOS = Forth exception code (-1036..-1000)
  ; Output if no error:
  ;   TOS = false

  jp c,false_   ; no error
  call dosior_to_ior
  ; HL = error code
  _jp_pushhl

; ------------------------------

if 0

  ; XXX TODO -- move to the library

get_current_drive:
  ld a,$FF

set_current_drive:
  ; a = drive (ASCII 'A'..'P' to set it; $FF to get it)
  ld ix,dos_set_drive
  jr dos.preserve_ip

get_current_user:
  ld a,$FF

set_current_user:
  ; a = user ($00..$0F to set it; $FF to get it)
  ld ix,dos_set_user

endif

; ==============================================================
; Dictionary

; ----------------------------------------------
_code_header dosior_to_ior_,'dosior>ior'

; doc{
;
; dosior>ior ( dosior -- ior )
;
; Convert a DOS ior to a Forth ior.
;
; This word is written in Z80. Its equivalent code in Forth is
; the following:

; ----
; : dosior>ior ( dosior -- ior )
;   1000 + negate ;
; ----

; }doc

  pop hl
  call dosior_to_ior.hl
  _jp_pushhl

dosior_to_ior:

  ; Input:
  ;   A  = +3DOS error code (0..36)
  ; Output:
  ;   HL = Forth exception code (-1036..-1000)

  ld h,0
  ld l,a

dosior_to_ior.hl:

  ; Input:
  ;   HL  = +3DOS error code (0..36)
  ; Output:
  ;   HL = Forth exception code (-1036..-1000)

  ld de,1000
  add hl,de
  jp negate_hl

; ----------------------------------------------
  _colon_header sector_id_,'sector-id'

  ; XXX UNDER DEVELOPMENT -- not usable
  ; XXX TODO --

; doc{

; sector-id ( n -- x )

; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by +3DOS: The high byte of _x_
; is the logical track (0..79 for side 0; ...); its low
; byte is the logical sector (0..).
;
; ----
; : sector-id ( n -- x )
;   rec/track +             \ the first track is not used
;   dup sectors/track mod   ( n sector )
;   swap sectors/track /    ( sector track )
;   flip or ;
; ----
;
; }doc

  dw rec_slash_track_,plus_  ; the first track is not used
  dw dup_,rec_slash_track_,mod_
  dw swap_,rec_slash_track_,slash_
  dw flip_,or_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'transfer-block'

; doc{
;
; transfer-block ( n -- ior )
;
; The block-level disk read-write linkage.  Transfer block _n_ to or
; from disk.  The read or write mode must be previously set by
; `write-mode` or `read-mode`.
;
; }doc

if 0 ; XXX OLD

  dw b_slash_buf_,u_m_star_
  dw library_file_,fetch_
  dw reposition_file_
  dw question_dup_,question_exit_
  _literal default_bank
  dw buffer_data_,b_slash_buf_
  dw library_file_,fetch_
  dw transfer_bytes_
  dw exit_

else

  dw to_drive_block_
  dw rec_slash_blk_,star_    ; sequential number of the first sector of the block
  dw rec_slash_track_,plus_  ; but the first track is not used
  dw dup_
  dw sector_id_
  dw buffer_data_
  dw transfer_sector_,throw_

  dw one_plus_,sector_id_
  _literal buffer_data+bytes_per_sector
  dw transfer_sector_,throw_

  dw exit_

endif

; ----------------------------------------------
  _code_header reposition_file_,'reposition-file'

; doc{
;
; reposition-file ( ud fid -- ior )
;
; }doc

  ; XXX TODO -- Move to the library.

  ld (reposition_file.backup_ip),bc ; save Forth IP
  pop bc
  ld b,c ; fid
  pop de ;
  pop hl ; EHL = file pointer
  ld ix,dos_set_position
  call dos
reposition_file.backup_ip equ $+1
  ld bc,0 ; restore Forth IP
  ld ix,next ; restore IX
  jp push_dos_ior

; ----------------------------------------------
  _code_header file_position_,'file-position'

; doc{
;
; file-position ( fid -- ud ior )
;
; }doc

  ; XXX TODO -- Move to the library.

  pop hl ; L = fid
  push bc ; save Forth IP
  ld b,l ; fid
  ld ix,dos_get_eof
  call dos
  pop bc ; restore Forth IP
  push hl ; low part of _ud_
  push de ; high part of _ud_
  ld ix,next ; restore IX
  jp push_dos_ior

; ----------------------------------------------
  _code_header transfer_bytes_,'transfer-bytes'

; doc{
;
; transfer-bytes ( n ca len fid -- ior )
;
; Transfer _len_ bytes to/from file _fid_ to/from memory, using _n_ as
; page $C000..$FFFF.  The read or write mode must be previously set by
; `write-mode` or `read-mode`.
;
; }doc

  ; XXX OLD
  ; XXX TODO -- Move to the library.
  ; XXX TODO -- Update `read-mode` and `write-mode` to modify
  ; this word too

  ld (transfer_bytes.backup_ip),bc ; save Forth IP
  pop bc ; C = fid
  ld a,c ; A = fid
  pop de ; length
  pop hl ; address
  pop bc ; C = page
  ld b,a ; B = fid
transfer_bytes.command equ $+2
  ld ix,dos_write
  call dos
transfer_bytes.backup_ip equ $+1
  ld bc,0 ; restore Forth IP
  ld ix,next ; restore IX
  jp push_dos_ior

; ----------------------------------------------
  _code_header transfer_sector_,'transfer-sector'

; doc{
;
; transfer-sector ( x a -- ior )
;
; The sector-level disk read-write linkage.  Transfer one
; sector from memory address _a_ to disk sector _x_ or the
; other way around.  The read or write mode must be previously
; set by `write-mode` or `read-mode`.
;
; }doc

  ld (transfer_sector.backup_ip),bc ; save Forth IP

  ld ix,dos_ref_xdpb
  ld a,'A'                          ; XXX TMP -- drive 'A'..'P'
  call dos                          ; IX = XDPB of the drive

  pop hl                            ; address of origin or destination buffer
  pop de                            ; D = logical track, E = logical sector

  jr nc,transfer_sector.end         ; exit if the DOS call failed

  ld a,(address_of_default_bank)
  ld b,a                            ; page for $C000..$FFFF
  ld c,0                            ; XXX TMP -- unit 0/1

transfer_sector.command equ $+2
  ld ix,dd_read_sector
  call dos

transfer_sector.end:
transfer_sector.backup_ip equ $+1
  ld bc,0                           ; restore Forth IP
  ld ix,next                        ; restore Forth IX
  jp push_dos_ior

; ----------------------------------------------
  _code_header write_mode_,'write-mode'

; doc{
;
; write-mode ( -- )
;
; Set the write mode for `transfer-sector` and `transfer-block`.
;
; See also: `read-mode`.
;
; }doc

  ld hl,dd_write_sector
  jr transfer_mode

; ----------------------------------------------
  _code_header read_mode_,'read-mode'

; doc{
;
; read-mode ( -- )
;
; Set the read mode for `transfer-sector` and `transfer-block`.
;
; See also: `write-mode`.
;
; }doc

  ld hl,dd_read_sector

transfer_mode:
  ; HL = DOS routine
  ld (transfer_sector.command),hl
  _jp_next

; ----------------------------------------------
  _code_header dos_get_1346_,'dos-get-1346'

; doc{
;
; dos-get-1346 ( -- n1 n2 n3 n4 )
;
; See also: `dos-set-1346`.
;
; }doc

  ; XXX TODO -- Finish the documentation.

  ; XXX TODO -- Move to the library.

  ld (dos_get_1346.ip_backup),bc
  ld ix,dos_get_1346
  call dos
  ld b,0
  ld c,d                         ; first buffer of cache
  push bc
  ld c,e                         ; number of cache sector buffers
  push bc
  ld c,h                         ; first buffer of RAM disk
  push bc
  ld c,l                         ; number of RAM disk sector buffers
  push bc
dos_get_1346.ip_backup equ $+1
  ld bc,0                        ; restore Forth IP
  ld ix,next                     ; restore IX
  _jp_next

; ----------------------------------------------
  _code_header dos_set_1346_,'dos-set-1346'

; doc{
;
; dos-set-1346 ( n1 n2 n3 n4 -- )
;
; See also: `dos-get-1346`.
;
; }doc

  ; XXX TODO -- Finish the documentation.

  ; XXX TODO -- Move to the library.

  pop hl               ; L = number of RAM disk sector buffers
  pop af
  ld h,a               ; H = first buffer of RAM disk
  pop de               ; E = number of cache sector buffers
  pop af
  ld d,a               ; D = first buffer of cache
  ld ix,dos_set_1346
  call dos.preserve_ip
  ld ix,next           ; restore IX
  _jp_next

; ----------------------------------------------
  _code_header close_file_,'close-file'

; doc{
;
; close-file ( fid -- ior )
;
; Close the file _fid_ (0..15).
;
; }doc

  ; XXX TODO -- Finish the documentation.

  ; XXX TODO -- Move to the library.

  pop hl          ; l = file number
  push bc         ; save Forth IP
  ld b,l          ; file number
  ld ix,dos_close
  call dos
  pop bc          ; restore Forth IP
  ld ix,next      ; restore IX
  jp push_dos_ior

; ----------------------------------------------
  _code_header open_disk_,'open-disk'

; doc{
;
; open-disk ( c n -- ior )
;
; Open disk _c_ ('A'..'P') as a single file _n_ (0..15).
;
; }doc

  ; XXX TODO -- Finish the documentation.

  ; XXX TODO -- Move to the library.

  pop hl               ; L = file number
  pop de               ; E = drive
  push bc              ; save Forth IP
  ld a,e               ; drive
  ld b,l               ; file number
  ld c,%011            ; access mode: exclusive-read-write ; XXX TMP --
  ld ix,dos_open_drive
  call dos
  pop bc               ; restore Forth IP
  ld ix,next           ; restore IX
  jp push_dos_ior

; ----------------------------------------------
if 0 ; XXX OLD

  _variable_header library_file_,'library-file'

; library-file ( -- a )
;
; A variable that holds the fid (0..15) used to open the library disks
; as a single file.

  dw 0

endif

; ----------------------------------------------
  _colon_header set_drive_,'set-drive'

; set-drive ( c -- ior )
;
; Sed drive _c_ ('A'..'P') as the current library drive.

if 0 ; XXX OLD

  dw library_file_,fetch_,dup_,close_file_
  dw dup_
  _literal -1029                ; exception code: "file number not open"
  dw not_equals_,question_exit_ ; other errors force an exit
  dw drop_                      ; discard -1029
  dw open_disk_
endif
  dw exit_

; ----------------------------------------------
  _code_header ref_xdbp_,'ref-xdpb'

; doc{
;
; ref-xdbp ( c -- a ior )
;
; Return the address _a_ of the XDPB of drive _c_ ('A'..'P').
;
; }doc

  ; XXX TODO -- Confirm: The returned address is accessible
  ; when bank 7 is paged in.

  pop hl
  ld a,l               ; drive 'A'..'P'
  ld ix,dos_ref_xdpb
  call dos.preserve_ip
  push ix
  ld ix,next           ; restore Forth next
  jp push_dos_ior

; ==============================================================

endif ; defined plus3dos

; vim: filetype=z80:textwidth=64
