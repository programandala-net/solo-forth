; kernel.plus3dos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; XXX UNDER DEVELOPMENT

; Last modified: 201608141426

; ==============================================================
; Description

; The part of the Solo Forth's kernel that is specific to +3DOS.
; Not finished.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; History

; See
; http://programandala.net/en.program.solo_forth.history.html

; ==============================================================

if defined plus3dos

include inc/zx_spectrum_plus3dos.z80s

back_from_dos:
  ; cy = no error?
  ; a  = error code
  jp c,false_   ; no error

back_from_dos.error:
  ; a = error code
  call dosior_to_ior
  ; hl = error code
  _jp_pushhl

if 0

  ; XXX TODO -- move to the library

get_current_drive:
  ld a,$FF

set_current_drive:
  ; a = drive (ASCII 'A'..'P' to set it; $FF to get it)
  ld ix,dos_set_drive
  jr dos.preserve_ip

get_current_user:
  ld a,$FF

set_current_user:
  ; a = user ($00..$0F to set it; $FF to get it)
  ld ix,dos_set_user

endif

; ------------------------------
; DOS call

dos:

  ; Adapted from the ZX Spectrum +3 manual.

  ; IX holds the address of the DOS routine to be run. All other registers are
  ; passed intact to the DOS routine and are returned from it.

  ; Stack must be somewhere in central 32K (conforming to DOS requirements), so
  ; saved AF and BC will not be switched out.

  push af
  push bc                  ; temp save registers while switching
  ld   a,(sys_bankm)       ; RAM/ROM switching system variable
  or   %00000111           ; set bits 0-3: RAM 7
  res  4,a                 ; and DOS ROM
  ld   bc,bank1_port       ; port used for horiz ROM switch and RAM paging
  di
  ld   (sys_bankm),a       ; keep system variables up to date
  out  (c),a               ; RAM page 7 to top and DOS ROM
  ei
  pop  bc
  pop  af

  call dos.jp_ix           ; call routine in IX

  push af
  push bc
  ld   a,(sys_bankm)
  and  %11111000           ; reset bits 0-3: RAM 0
  set  4,a                 ; switch to ROM 3 (48 BASIC)
  ld   bc,bank1_port
  di
  ld   (sys_bankm),a
  out  (c),a               ; switch back to RAM page 0 and 48 BASIC
  ei
  pop  bc
  pop  af
  ret

dos.jp_ix:

  jp   (ix)                ; standard way to CALL (IX), by calling this jump

; ------------------------------
; DOS call preserving the Forth IP

; This is used when the BC register (the Forth IP) is not a parameter
; of the DOS routine

dos.preserve_ip:
  ; IX = DOS routine to run
  push bc
  call dos
  pop bc
  ret

; ==============================================================
; Dictionary

; ----------------------------------------------
_code_header dosior_to_ior_,'DOSIOR>IOR'

; doc{
;
; dosior>ior  ( dosior -- ior )
;
; Convert a DOS ior to a Forth ior.

; ----
; : dosior>ior  ( dosior -- ior )
;   1000 + negate  ;
; ----

; }doc

  pop hl
  call dosior_to_ior.hl
  _jp_pushhl

dosior_to_ior:
  ; Input:   a  = original DOS error code (0..36)
  ; Output: hl = DOS error code converted to Forth range (-1000..-1036)
  ld h,0
  ld l,a
dosior_to_ior.hl:
  ; Input:   hl  = original DOS error code (0..36)
  ; Output: hl = DOS error code converted to Forth range (-1000..-1036)
  ld de,1000
  add hl,de
  jp negate_hl

; ----------------------------------------------
  _constant_header rec_slash_track_,'REC/TRACK'

; doc{
;
; rec/track  ( -- n )
;
; Records (sectors) per disk track.
;
; }doc

  dw 9
  ; XXX TODO -- use a label and move to the kernel
  ; XXX TODO -- not used in +3DOS

; ----------------------------------------------
  _colon_header sector_id_,'SECTOR-ID'

; doc{

; sector-id  ( n -- x )

; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by +3DOS.
;
; ----
;
; }doc

  ; XXX TODO --

  dw exit_

; ----------------------------------------------
  _colon_header read_block_,'READ-BLOCK'

; doc{
;
; read-block  ( n -- )
;
; Read disk block _n_ to the buffer.
;
; ----
; : read-block  ( n -- )
;   read-mode transfer-block  ;
; ----
;
; }doc

  dw read_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header write_block_,'WRITE-BLOCK'

; doc{
;
; write-block  ( n -- )
;
; Write the buffer to disk block _n_.
;
; ----
; : write-block  ( n -- )
;   write-mode transfer-block  ;
; ----
;
; }doc

  dw write_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'TRANSFER-BLOCK'

; doc{
;
; transfer-block  ( n -- ior )
;
; The block-level disk read-write linkage.  Transfer block _n_ to or
; from disk.  The read or write mode must be previously set by
; `write-mode` or `read-mode`.
;
; }doc

  dw b_slash_buf_,u_m_star_
  dw library_file_,fetch_
  dw reposition_file_
  dw question_dup_,question_exit_
  _literal default_bank
  dw buffer_data_,b_slash_buf_
  dw library_file_,fetch_
  dw transfer_bytes_
  dw exit_

; ----------------------------------------------
  _code_header reposition_file_,'REPOSITION-FILE'

; doc{
;
; reposition-file ( ud fid -- ior )
;
; }doc

  ld (reposition_file.backup_ip),bc ; save Forth IP
  pop bc
  ld b,c ; fid
  pop de ;
  pop hl ; EHL = file pointer
  ld ix,dos_set_position
  call dos
reposition_file.backup_ip equ $+1
  ld bc,0 ; restore Forth IP
  ld ix,next ; restore IX
  jp back_from_dos

; ----------------------------------------------
  _code_header file_position_,'FILE-POSITION'

; doc{
;
; file-position ( fid -- ud ior )
;
; }doc

; XXX TODO -- move to the library

  pop hl ; L = fid
  push bc ; save Forth IP
  ld b,l ; fid
  ld ix,dos_get_eof
  call dos
  pop bc ; restore Forth IP
  push hl ; low part of _ud_
  push de ; high part of _ud_
  ld ix,next ; restore IX
  jp back_from_dos

; ----------------------------------------------
  _code_header transfer_bytes_,'TRANSFER-BYTES'

; doc{
;
; transfer-bytes  ( n ca len fid -- ior )
;
; Transfer _len_ bytes to/from file _fid_ to/from memory, using _n_ as
; page $C000..$FFFF.  The read or write mode must be previously set by
; `write-mode` or `read-mode`.
;
; }doc

  ld (transfer_bytes.backup_ip),bc ; save Forth IP
  pop bc ; C = fid
  ld a,c ; A = fid
  pop de ; length
  pop hl ; address
  pop bc ; C = page
  ld b,a ; B = fid
transfer_bytes.command equ $+2
  ld ix,dos_write
  call dos
transfer_bytes.backup_ip equ $+1
  ld bc,0 ; restore Forth IP
  ld ix,next ; restore IX
  jp back_from_dos

; ----------------------------------------------
  _colon_header write_mode_,'WRITE-MODE'

; doc{
;
; write-mode  ( -- )
;
; Set the write mode for `transfer-sector` and `transfer-block`.
;
; }doc

  _literal dos_write
  dw branch_,transfer_mode

; ----------------------------------------------
  _colon_header read_mode_,'READ-MODE'

; doc{
;
; read-mode  ( -- )
;
; Set the read mode for `transfer-sector` and `transfer-block`.
;
; }doc

  _literal dos_read
transfer_mode:
  _literal transfer_bytes.command
  dw store_
  dw exit_

; ----------------------------------------------
  _code_header dos_get_1346_,'DOS-GET-1346'

; doc{
;
; dos-get-1346  ( -- n1 n2 n3 n4 )
;
; }doc

; XXX TODO -- move to the library

  ld (dos_get_1346.ip_backup),bc
  ld ix,dos_get_1346
  call dos
  ld b,0
  ld c,d ; first buffer of cache
  push bc
  ld c,e ; number of cache sector buffers
  push bc
  ld c,h ; first buffer of RAM disk
  push bc
  ld c,l ; number of RAM disk sector buffers
  push bc
dos_get_1346.ip_backup equ $+1
  ld bc,0 ; restore Forth IP
  ld ix,next ; restore IX
  _jp_next

; ----------------------------------------------
  _code_header dos_set_1346_,'DOS-SET-1346'

; doc{
;
; dos-set-1346  ( n1 n2 n3 n4 -- )
;
; }doc

; XXX TODO -- move to the library

  pop hl ; L = number of RAM disk sector buffers
  pop af
  ld h,a ; H = first buffer of RAM disk
  pop de ; E = number of cache sector buffers
  pop af
  ld d,a ; D = first buffer of cache
  ld ix,dos_set_1346
  call dos.preserve_ip
  ld ix,next ; restore IX
  _jp_next

; ----------------------------------------------
  _code_header close_file_,'CLOSE-FILE'

; doc{
;
; close-file  ( fid -- ior )
;
; Close the file _fid_ (0..15).
;
; }doc

  pop hl ; l = file number
  push bc ; save Forth IP
  ld b,l ; file number
  ld ix,dos_close
  call dos
  pop bc ; restore Forth IP
  ld ix,next ; restore IX
  jp back_from_dos

; ----------------------------------------------
  _code_header open_disk_,'OPEN-DISK'

; doc{
;
; open-disk  ( c n -- ior )
;
; Open disk _c_ ('A'..'P') as a single file _n_ (0..15).
;
; }doc

  pop hl ; l = file number
  pop de ; e = drive
  push bc ; save Forth IP
  ld a,e ; drive
  ld b,l ; file number
  ld c,%011 ; access mode: exclusive-read-write ; XXX TMP --
  ld ix,dos_open_drive
  call dos
  pop bc ; restore Forth IP
  ld ix,next ; restore IX
  jp back_from_dos

; ----------------------------------------------
  _variable_header library_file_,'LIBRARY-FILE'

; doc{
;
; library-file  ( -- a )
;
; A variable that holds the fid (0..15) used to open the library disks
; as a single file.
;
; }doc

  dw 0

; ----------------------------------------------
  _colon_header set_drive_,'SET-DRIVE'

; doc{
;
; set-drive  ( c -- ior )
;
; Sed drive _c_ ('A'..'P') as the current library drive.
;
; }doc

  dw library_file_,fetch_,dup_,close_file_
  dw dup_
  _literal -1029 ; exception code: "file number not open"
  dw not_equals_,question_exit_ ; other errors force an exit
  dw drop_ ; discard -1029
  dw open_disk_
  dw exit_

endif

; vim: filetype=z80:textwidth=64
