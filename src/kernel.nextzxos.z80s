; kernel.nextzxos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; Last modified: 202101061844.
; See change log at the end of the file.

; ==============================================================
; Description

; The part of the kernel that is specific to NextZXOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016, 2017, 2018, 2020,
; 2021.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; Requirements

if nextzxos

include inc/zx_spectrum_plus3dos.z80s
; XXX TODO
;include inc/zx_spectrum_nextzxos.z80s

; ==============================================================
; Routines to call NextZXOS

; ------------------------------
; DOS call (routine in IX)

dos.ix:

  ; Input:
  ;   IX = address of the NextZXOS routine
  ; Output:
  ;   IX = Forth `next`

  ; All other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; NextZXOS requirements).

  call dos_in
  call call_ix    ; call routine in IX
dos.ix.return:
  call dos_out
  ld ix,next      ; restore Forth IX
  ret

; ------------------------------
; DOS call (routine in TOS)

dos.tos:

  ; The top of the Z80 stack holds the address of the DOS
  ; routine to be run.  All registers are passed intact to the
  ; DOS routine and are returned from it.

  ; This routine is used when the IX register is a parameter of
  ; the DOS routine.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements).

  call dos_in
  exx                  ; preserve parameters
  pop de               ; return address to Forth word
  pop hl               ; address of the DOS routine
  push de              ; return address to Forth word
  ld de,dos.ix.return  ; return address from the DOS routine
  push de              ; force the return later
  push hl              ; address of the DOS routine
  exx                  ; restore parameters
  ret                  ; call routine in TOS, then continue at dos.ix.return

; ------------------------------
; Page in DOS

dos_in:

  push af
  push bc                  ; temp save registers while switching
  ld   a,(sys_bankm)       ; RAM/ROM switching system variable
  or   %00000111           ; set bits 0-3: RAM 7
  res  4,a                 ; and DOS ROM
  ld   bc,bank_128_port    ; port used for horiz. ROM switch and RAM paging
  di
  ld   (sys_bankm),a       ; keep system variables up to date
  out  (c),a               ; RAM page 7 to top and DOS ROM
  ei
  pop  bc
  pop  af
  ret

; ------------------------------
; Page out DOS

dos_out:

  push af
  push bc
  ld   a,(sys_bankm)
  and  %11111000           ; reset bits 0-3: RAM 0
  set  4,a                 ; switch to ROM 3 (48 BASIC)
  ld   bc,bank_128_port
  di
  ld   (sys_bankm),a
  out  (c),a               ; switch back to RAM page 0 and 48 BASIC
  ei
  pop  bc
  pop  af
  ret

; ------------------------------
; DOS call (routine in IX, preserving the Forth IP)

dos.ix.preserve_ip:

  ; This routine is used when the BC register (the Forth IP) is
  ; not a parameter of the DOS routine.

  ; IX holds the address of the DOS routine to be run. All
  ; other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements), so saved BC will not be switched out.

  push bc
  call dos.ix
  pop bc
  ret

; ------------------------------
; DOS call (routine in IX)
; Push EHL and DOS ior and continue at `next`

dos.ix_ehl:

  ; Address of an entry point to the Forth inner interpreter.
  ; This entry point is jumped to at the end of a code word, in
  ; order to execute first the NextZXOS command hold in the IX
  ; register, which returns a double-cell result in registers E
  ; and HL.

  ; Input:
  ;   B    = file number
  ;   IX   = DOS routine
  ;   (SP) = Forth IP
  ; Output:
  ;   BC   = Forth IP
  ;   IX   = Forth `next`
  ; Output stack:
  ;   ( d ior )
  ;   Where _d_ is the content of registers EHL.

  call dos.ix
  pop bc ; restore the Forth IP
  ; EHL = result
  push hl ; low part
  ld d,0
  push de ; high part

  ; Execution continues at `push_dos_ior`:

; ------------------------------
; Push DOS ior and continue at `next`

push_dos_ior:

  ; This routine is entered with `jp`, not with `call`, because
  ; it works as the end of a code Forth word: it jumps to
  ; `next` at the end.

  ; Input:
  ;   A  = NextZXOS error code (0..36)
  ;   Fc = no error?
  ; Output (error):
  ;   TOS = Forth exception code (-1036..-1000)
  ; Output (no error):
  ;   TOS = false

  jp c,false_   ; no error
  call dosior_to_ior
  ; HL = error code
  push hl
  _jp_next

; ------------------------------
; Save and restore the Forth IP

; These routines are used when a ROM call needs many parameters
; and not all of them can be taken from the stack in order to
; push BC before the call.  `dos.ix.preserve_ip` is not useful
; in those cases.

save_ip:
  ld h,b
  ld l,c
  ld (saved_ip),hl
  ret

restore_ip:
saved_ip: equ $+1
  ld bc,0 ; patched by save_ip
  ret

; ==============================================================
; Dictionary

; ----------------------------------------------
  _constant_header save_ip_underscore_,'save-ip_'

; doc{
;
; save-ip_ ( -- a ) "save-I-P-underscore"
;
; Address of a routine that saves the Forth IP (Z80 register
; BC), which must be restored later by the routine pointed by
; `restore-ip_`.
;
; This routine used when a ROM call needs many parameters and
; not all of them can be taken from the stack in order to push
; BC before the call. `dos-ix-preserve-ip_` is not useful in
; those cases.

; }doc

  dw save_ip

; ----------------------------------------------
  _constant_header restore_ip_underscore_,'restore-ip_'

; doc{
;
; restore-ip_ ( -- a ) "restore-I-P-underscore"
;
; Address of a routine that restores the Forth IP (Z80 register
; BC), previously saved by the routine pointed by `save-ip_`.

; See also: `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  dw restore_ip

; ----------------------------------------------
  _constant_header dos_ix_underscore_,'dos-ix_'

; doc{
;
; dos-ix_ ( -- a ) "dos-I-X-underscore"
;
; Address of a routine that executes the NextZXOS command hold in
; the IX register.

; ....
; Input:
;   IX = address of the NextZXOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix

; ----------------------------------------------
  _constant_header dos_ix_ehl_underscore_,'dos-ix-ehl_'

; doc{
;
; dos-ix-ehl_ ( -- a ) "dos-I-X-E-H-L-underscore"
;
; Address of an entry point to the Forth inner interpreter.
; This entry point is jumped to at the end of a code word, in
; order to execute first the NextZXOS command hold in the IX
; register, which returns a double-cell result in registers E
; and HL.

; ....
; Input:
;   B    = file number
;   IX   = address of the NextZXOS routine
;   (SP) = Forth IP
; Output:
;   BC   = Forth IP
;   IX   = Forth `next`
; Output stack:
;   ( d ior )
;   Where _d_ is the content of registers EHL.
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix_`, `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix_ehl

; ----------------------------------------------
  _constant_header dos_tos_underscore_,'dos-tos_'

; doc{
;
; dos-tos_ ( -- a ) "dos-T-O-S-underscore"
;
; Address of a routine that executes the NextZXOS command hold on
; the top of the stack.
;
; This routine is used when the IX register is a parameter of
; the NextZXOS routine.

; ....
; Input:
;   (TOS) = address of the NextZXOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix_`, `dos-ix-preserve-ip_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.tos

; ----------------------------------------------
  _constant_header dos_in_underscore_,'dos-in_'

; doc{
;
; dos-in_ ( -- a ) "dos-in-underscore"
;
; Address of a routine that pages in RAM 7 and ROM 2 (DOS), as
; needed to call a NextZXOS routine.
;
; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-out_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos_in

; ----------------------------------------------
  _constant_header dos_out_underscore_,'dos-in_'

; doc{
;
; dos-out_ ( -- a ) "dos-out-underscore"
;
; Address of a routine that pages out RAM 7 and ROM 2 (DOS),
; paging in the default memory configuration: RAM 0 and ROM 3
; (48 BASIC).
;
; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-in_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos_in

; ----------------------------------------------
  _constant_header dos_ix_preserve_ip_underscore_,'dos-ix-preserve-ip_'

; doc{
;
; dos-ix-preserve-ip_ ( -- a ) "dos-I-X-preserve-I-P-underscore"
;
; Address of a routine that executes the NextZXOS command hold in
; the IX register, preserving the Forth IP.

; ....
; Input:
;   IX = address of the NextZXOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix.preserve_ip

; ----------------------------------------------
  _constant_header push_dos_ior_,'pushdosior'

; doc{
;
; pushdosior ( -- a ) "push-dos-I-O-R"
;
; Address of an entry point to the Forth inner interpreter.
; This entry point is jumped to at the end of a code word, in
; order to convert a _dosior_ into a _ior_ and push it.

; ....
; Input:
;   A  = NextZXOS error result (0..36)
; Output (no error):
;   TOS = zero
; Output (error):
;   TOS = Forth exception code (-1036..-1000)
; ....

; See also: `dosior>ior`.
;
; }doc

  dw push_dos_ior

; ----------------------------------------------
_code_header dosior_to_ior_,'dosior>ior'

; doc{
;
; dosior>ior ( dosior -- ior ) "dos-I-O-R-to-I-O-R"
;
; Convert a DOS ior to a Forth ior.
;
; ``dosior>ior`` is written in Z80. Its equivalent definition in
; Forth is the following:

; ----
; : dosior>ior ( dosior -- ior ) 1000 + negate ;
; ----

; See also: `pushdosior`.
;
; }doc

  pop hl
  call dosior_to_ior.hl
  push hl
  _jp_next

dosior_to_ior:

  ; Input:
  ;   A  = NextZXOS error code (0..74)
  ; Output:
  ;   HL = Forth exception code (-1074..-1000)

  ld h,0
  ld l,a

dosior_to_ior.hl:

  ; Input:
  ;   HL  = NextZXOS error code (0..74)
  ; Output:
  ;   HL = Forth exception code (-1074..-1000)

  ld de,1000
  add hl,de
  jp negate_hl

; ----------------------------------------------
  _variable_header block_f_i_d_,'block-fid'

; doc{
;
; block-fid ( -- a ) "block-f-i-d"
;
; A `variable`. _a_ is the address of a cell containing the file
; ID of the current blocks file. When no blocks file is open,
; the content of ``block-fid`` is a `true` flag. ``block-fid``
; is checked by `blocks?`.
;
; Origin: Gforth.
;
; See also: `open-blocks`, `close-blocks`.
;
; }doc

  dw -1 ; -1 (=true) means no blocks file is open

; ----------------------------------------------
  _c_constant_header number_sign_file_i_d_s_,'#file-ids'

; doc{
;
; #file-ids ( -- n ) "number-sign-file-i-d-s"
;
; _n_ is the total number of file identifiers that can be
; used.
;
; See also: `file-ids`, `file-id`.
;
; }doc

number_sign_file_i_d_s: equ 16

  db number_sign_file_i_d_s

; ----------------------------------------------
  _variable_header file_i_d_s_,'file-ids'

; XXX TODO -- Use also to remember which files are headed, using
; one bit.

; doc{
;
; file-ids ( -- ca ) "file-i-d-s"
;
; _ca_ is the address of a byte table containing the status
; of the file identifiers:
;
; .Meaning of the bytes hold in the ``file-ids`` table.
; |===
; | Byte | Meaning
;
; | $00  | Not used
; | $FF  | Used
; |===
;
; See also: `#file-ids`, `file-id`.
;
; }doc

  ds number_sign_file_i_d_s

  ; XXX REMARK: The Pasmo assembler fills the reserved space
  ; with zeroes, or with an optional second parameter to `ds`.

; ----------------------------------------------
  _colon_header file_i_d_,'file-id'

; doc{
;
; file-id ( -- fid true | false ) "file-i-d"
;
; If there is a file identifier not used yet, return it _fid_
; and `true`; otherwise return `false`.
;
; Definition:

; ----
; : file-id ( -- fid true | false )
;   #file-ids 0 ?do
;     i file-ids + dup c@ 0=
;     if $FF swap c! i true unloop exit then drop
;   loop false ;
; ----  

; See also: `#file-ids`, file-ids`.
;
; }doc

  dw number_sign_file_i_d_s_,zero_
  dw paren_question_do_,file_id.loop_exit ; ?do
  dw i_,file_i_d_s_,plus_,dup_,c_fetch_,zero_equals_
  dw zero_branch_,file_id.continue
  _literal $FF
  dw swap_,c_store_,i_,true_,unloop_,exit_
file_id.continue:
  dw drop_
  dw paren_loop_ ; loop
file_id.loop_exit:
  dw false_
  dw exit_

; ----------------------------------------------
  _code_header do_dos_open_underscore_,'do-dos-open_'

; doc{
;
; do-dos-open_ ( -- a )
;
; Return the address _a_ of a Z80 routine used by '(create-file'
; and `(open-file`.
;
; ....
; Entry conditions:
;   B = fid
;   C = fam
;   D = create action
;   E = open action
;   HL = address of filename (no wildcards), with trailing 0xFF
;   (TOS) = Forth IP
;   (NOS) = fid + 256*fam
; ....
;
; }doc

  ld ix,dos_open
  call dos.ix
  pop bc  ; restore the Forth IP
  jp nc,push_dos_ior
  ; no error
  pop hl      ; l = fid
  ld h,0
  push hl     ; fid
  jp false_   ; no error

; ----------------------------------------------
  _code_header paren_open_file_,'(open-file'

  pop de  ; E = fid
  pop hl  ; L = fam
  ld d,l  ; D = fam
  pop hl  ; HL = ca
  push de ; save fid
  push bc ; save the Forth IP
  ld b,e  ; B = fid
  ld c,d  ; C = fam
  ; Calculate the open action
  bit 7,c ; headed? (maybe set by 'headed')
  res 7,c
  ld a,1  ; open action 1: position after the header
  jr nz,paren_open_file_.actions ; jump if headed
  ; Open a file with no header
  inc a   ; open action 2: ignore any header, position at 0
paren_open_file_.actions:
  ; A = open action
  ld d,0  ; D = create action: error, file does not exist
  ld e,a  ; E = open action
  jp do_dos_open_underscore_

; doc{
;
; (open-file ( ca fam fid -- fid ior )
;
;  Open the file named in the $FF-terminated string pointed at
;  _ca_, and open it with file access method _fam_ and file
;  identifier _fid_.
;
; If the  file  was  successfully and  opened, _ior_ is zero,
; _fid_  is  the file identifier and the file has been
; positioned to the start of the file.  Otherwise _ior_ is the
; I/O result code and _fid_ is undefined.
;
; ``(open-file`` is a low-level factor of `open-file`.
;
; See also: `r/o`, `w/o`, `r/w`, `s/r`, `bin`, `do-dos-open_`.
;
; }doc

; ----------------------------------------------
  _c_constant_header slash_filename_,'/filename'

; doc{
;
; /filename ( -- len ) "slash-filename"
;
; Return the maximum length _len_ of a NextZXOS filename,
; including drive, user area and filename extension.
;
; See also: `/base-filename`, `>filename`.
;
; }doc

; XXX TODO Adapt to NextZXOS.

  db 16

; ----------------------------------------------
  _colon_header to_filename_,'>filename'

; doc{
;
; >filename ( ca1 len1 -- ca2 ) "to-filename"
;
; Convert the filename _ca1 len1_ to a $FF-terminated string
; at _ca2_ in the `stringer`.
;
; Definition:

; ----
; : >filename ( ca1 len1 -- ca2 )
;   /filename min char+ >stringer
;   2dup + char- $FF swap c! drop ;
; ----

; See also: `/filename`, `>stringer`.
;
; }doc

  dw slash_filename_,min_,char_plus_,to_stringer_
  dw two_dup_,plus_,char_minus_
  _literal $FF
  dw swap_,c_store_,drop_
  dw exit_

; ----------------------------------------------
  _colon_header open_file_,'open-file'

; doc{
;
; open-file ( ca len fam -- fid ior )
;
;  Open the file named in the character string specified by
;  _ca len_, and open it with file access method _fam_.
;
; If the  file  was  successfully and  opened, _ior_ is zero,
; _fid_  is  the file identifier and the file has been
; positioned to the start of the file.  Otherwise _ior_ is
; the I/O result code and _fid_ is undefined.
;
; Definition:

; ----
; : open-file ( ca len fam -- fid ior )
;  >r >filename r> file-id if (open-file exit then drop #-288 ;
; ----

; Origin: Forth-94 (FILE), Forth-2012 (FILE).
;
; See also: `close-file`, `create-file`, `r/o`, `w/o`, `r/w`,
; `s/r`, `bin`, `>filename`, `file-id`, `(open-file`.
;
; }doc

  dw to_r_,to_filename_,from_r_,file_i_d_
  dw zero_branch_,open_file.end
  dw paren_open_file_,exit_
open_file.end:
  dw drop_
  _literal -288
  dw exit_

; ----------------------------------------------
  _c_constant_header r_w_,'r/w'

; doc{
;
; r/w ( -- fam ) "r-w"
;
; Return the "read/write" file access method _fam_.
;
; See also: `r/o`, `w/o`, `s/r`, `bin`,
; `create-file`, `open-file`.
;
; Origin: Forth-94 (FILE), Forth-2012 (FILE).
;
; }doc

  db %011

; ----------------------------------------------
  _colon_header blocks_question_,'blocks?'

; doc{
;
; blocks? ( -- f )
;
; Check the content of `block-fid`. Return a true flag if
; there's a blocks file open. Otherwise return a false flag.
;
; See also: `open-blocks`, `close-blocks`.
;
; }doc

  dw block_f_i_d_,fetch_,true_,not_equals_
  dw exit_

; ----------------------------------------------
  _colon_header open_blocks_,'open-blocks'

; doc{
;
; open-blocks ( ca len -- )
;
; If a blocks file is already open, `throw` error #-294.
; Otherwise open the file whose name is given by _ca len_ to use
; it as the blocks file.
;
; Definition:

; ----
; : open-blocks ( ca len -- )
;   blocks? #-294 ?throw
;   r/w open-file throw block-fid ! ;
; ----

; Origin: Gforth.
;
; See also: `blocks?`, `block-fid`, `block`, `buffer`,
; `read-block`, `write-block`, `transfer-block`.
;
; }doc

  dw blocks_question_
  _question_throw error.a_blocks_file_is_open
  dw r_w_,open_file_,throw_
  dw block_f_i_d_,store_
  dw exit_

; ----------------------------------------------
  _code_header reposition_file_,'reposition-file'

; doc{
;
; reposition-file ( ud fid -- ior )
;
; Reposition the file identified by _fid_ to _ud_ and return
; the I/O result code _ior_.
;
; Origin: Forth-94 (FILE), Forth-2012 (FILE).
;
; See also: `file-position`, `open-file`, `create-file`.
;
; }doc

  pop hl
  ld a,l ; A = fid
  pop de ;
  pop hl ; EHL = file pointer ; XXX TODO DEHL?
  push bc ; save Forth IP
  ld b,a ; B = fid
  ld ix,dos_set_position
  call dos.ix
  pop bc ; restore Forth IP
  jp push_dos_ior

; ----------------------------------------------
  _code_header bank_write_file_,'bank-write-file'

; doc{
;
; bank-write-file ( ca len fid +n -- ior )
;
; Write _len_ characters from address _ca_ to the file
; identified by _fid_ starting at its current position, while
; memory bank _+n_ is paged in addresses $C000..$FFFF.
; Return I/O result code _ior_.
;
; See also: `write-file`, `write-byte`, `bank`, `create-file`,
; `open-file`.
;
; }doc

  ; Credit:
  ; Adapted from DZX-Forth.

  pop hl ; l = bank
  ld a,l
bank_write_file_.a:
  call save_ip
  ld c,a
  pop hl
  ld b,l ; fid
  pop de ; len
  pop hl ; ca
  ld ix,dos_write
  call dos.ix
  call restore_ip
  jp push_dos_ior

; ----------------------------------------------
  _code_header write_file_,'write-file'

; doc{
;
; write-file ( ca len fid -- ior )
;
; Write _len_ characters from address _ca_ to the file
; identified by _fid_ starting at its current position.
; Return I/O result code _ior_.
;
; See also: `bank-write-file`, `write-byte`, `create-file`,
; `open-file`.
;
; }doc

  ; Credit:
  ; Adapted from DZX-Forth.

  ld a,(sys_bankm) ; $5B5C
  and %111 ; current page for 0xC000..0xFFFF
  jp bank_write_file_.a

; ----------------------------------------------
  _code_header read_file_,'read-file'

; doc{

; read-file ( ca len1 fid -- len2 ior )

; Read _len1_ consecutive  characters to  _ca_ from the
; current position  of the  file identified by _fid_.

; If _len1_ characters are read without an exception, _ior_
; is zero and _len2_ is equal to _len1_.

; If the end of the file is reached before _len1_ characters
; are read, _ior_ is zero and _len2_ is the number of
; characters actually read.

; If the operation is initiated when the value returned by
; `file-position` is equal to the value returned by
; `file-size` for the file identified by _fid, _len2_ is zero
; and _ior_ is zero.

; If an exception occurs, _ior_ is the I/O result code and
; _len2_ is the number of characters transferred to _ca_
; without an exception.

; At the conclusion of the operation, `file-position` returns
; the next file position after the last character read.

; See also: `bank-read-file`, `read-byte`, `open-file`,
; `write-file`.

; }doc

; XXX TODO -- Finish adapting the documentation.

; XXX REMARK -- An ambiguous condition exists if the operation is initiated
; when the value returned by `file-position` is greater than
; the value returned by `file-size` for the file identified
; by fileid, or if the requested operation attempts to read
; portions of the file not written.

  ; Credit:
  ; Adapted from DZX-Forth.

  ld a,(sys_bankm) ; $5B5C
  and %111 ; current page for 0xC000..0xFFFF
  ld l,a
  push hl
  ; execution continues in `bank-read-file`

; ----------------------------------------------
  _code_header bank_read_file_,'bank-read-file'

; doc{
;
; bank-read-file ( ca len1 fid +n -- len2 ior )
;
; Read _len_ consecutive  characters to  _ca_ from the
; current position  of the  file identified by _fid_ with
; bank _+n_ paged in address range $C000..$FFFF.
;
; If _len1_ characters are read without an exception, _ior_
; is zero and _len2_ is equal to _len1_.
;
; If the end of the file is reached before _len1_ characters
; are read, _ior_ is zero and _len2_ is the number of
; characters actually read.
;
; If the operation is initiated when the value returned by
; `file-position` is equal to the value returned by
; `file-size` for the file identified by _fid, _ior_ is zero
; and _len2_ is zero.
;
; If an exception occurs _ior_ is the I/O result code and
; _len2_ is the number of characters transferred to _ca_
; without an exception.
;
; At the conclusion of the operation, `file-position` returns
; the next file position after the last character read.
;
; See also: `bank-read-file`, `read-byte`, `open-file`,
; `write-file`.
;
; }doc

; XXX TODO -- Finish adapting the documentation.
;
; XXX REMARK -- An ambiguous condition exists if the operation
; is initiated when the value returned by `file-position` is
; greater than the value returned by `file-size` for the file
; identified by fileid, or if the requested operation attempts
; to read portions of the file not written.

; XXX TODO: Check if this +3DOS issue was fixed in NextZXOS:
;
; NextZXOS causes EOF error when the desired length is beyond
; the end of file (not counting the padding 0x1A at the end).
; This makes it impossible to behave according to Forth-94.
;
; Solution: check the file position at the start.

  ; Credit:
  ; Adapted from DZX-Forth.

  call save_ip
  pop bc  ; C = bank
  pop hl
  ld b,l  ; B = fid
  pop de  ; DE = len
  pop hl  ; HL = ca
  push de ; save len for later
  ld ix,dos_read
  call dos.ix
  pop hl ; len
  call restore_ip
  jr c,page_read_file_.no_error

  ; error
  ; hl = len
  ; a = error code
  ; de = number of bytes remaining unread

  and a
  sbc hl,de ; hl = bytes actually read
  cp 21 ; is it "bad parameter"? XXX TODO label
  jr z, page_read_file_.no_error
  push hl
  jp push_dos_ior

page_read_file_.no_error:
  ; no error
  ; hl = len
  push hl
  jp false_

; ----------------------------------------------
  _colon_header transfer_block_,'transfer-block'

; doc{
;
; transfer-block ( u f -- ior )
;
; Transfer block _u_ to or from the current blocks file set by
; `open-blocks`. If _f_ is zero, read block _u_ from the file
; into `buffer-data`, otherwise write the contents of
; `buffer-data` into block _u_ of the file.
;
; ``transfer-block`` is the block-level disk read-write linkage.  
;
; Definition:

; ----
; : transfer-block ( u f -- )
;   >r b/buf um* block-fid @ reposition-file throw
;      buffer-data b/buf block-fid @ 
;   r> if   write-file throw
;      else read-file throw b/buf < #-33 ?throw then ;
; ----

; See also: `read-block`, `write-block`, `b/buf`,
; `reposition-file`, `block-fid`, `write-file`, `read-file`.
;
; }doc

  ; Credit:
  ;
  ; Adapted from DZX-Forth.

  dw to_r_
  dw b_slash_buf_,u_m_star_,block_f_i_d_,fetch_,reposition_file_,throw_
  dw buffer_data_,b_slash_buf_,block_f_i_d_,fetch_
  dw from_r_
  dw zero_branch_,transfer_block.read
transfer_block.write: 
  dw write_file_,throw_
  dw exit_
transfer_block.read: 
  dw read_file_,throw_
  dw b_slash_buf_,less_than_
  _question_throw error.block_read_exception
  dw exit_

; ----------------------------------------------
  _colon_header read_block_,'read-block'

; doc{
;
; read-block ( u -- )
;
; Read disk block _u_ to the buffer.
;
; See also: `transfer-block`, `write-block`, `block`.
;
; }doc

  dw false_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header write_block_,'write-block'

; doc{
;
; write-block ( n -- )
;
; Write the buffer to disk block _n_.
;
; See also: `transfer-block`, `read-block`, `block`.
;
; }doc

  dw true_,transfer_block_
  dw exit_

; ----------------------------------------------
  _code_header get_drive_,'get-drive'

; doc{
;
; get-drive ( -- c ior )
;
; Get the current default drive _c_ ('A'..'P'), i.e.  the drive
; implied by all filenames that do not specify a drive, and the
; drive used by block operations. The default drive is initially
; 'A'.  Return also an error result _ior_.
;
; See also: `set-drive`, `get-user`.
;
; }doc

  ; XXX TODO -- Move to the library.

  ld a,255
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  ld h,0
  ld l,a
  push hl
  jp push_dos_ior

; ----------------------------------------------
  _code_header set_filename_drive_,'set-filename-drive'

  ; XXX TMP -- Experimental factor.

; doc{
;
; set-filename-drive ( c -- ior )
;
; Set drive _c_ ('A'..'P') as the current default drive, i.e.
; the drive implied by all filenames that do not specify a
; drive.
;
; Does not access the drive, but merely checks that there is a
; driver for it (which does not imply that the drive exists).
;
; See also: `get-filename-drive`.
;
; }doc

  pop hl
  ld a,l
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  jp push_dos_ior

; ----------------------------------------------
  _code_header get_filename_drive_,'get-filename-drive'

  ; XXX TMP -- Experimental factor.

; doc{
;
; get-filename-drive ( -- c ior )
;
; Get drive _c_ ('A'..'P') currently used as default drive, i.e.
; the drive implied by all filenames that do not specify a
; drive.
;
; See also: `set-filename-drive`.
;
; }doc

  ld a,$FF
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  ld h,0
  ld l,a
  push hl
  jp push_dos_ior

; ----------------------------------------------
  _code_header set_drive_,'set-drive'

; doc{
;
; set-drive ( c -- ior )
;
; Set drive _c_ ('A'..'P') as the current one, i.e.  the drive
; implied by all filenames that do not specify a drive,
; returning the I/O result code _ior_.  If the drive is
; successfully selected, _ior_ is zero, otherwise it's an
; exception code.  The default drive is 'C'.
;
; ``set-drive`` does not access the drive, but merely checks
; that there is a driver for it (which does not imply that the
; drive exists).
;
; See also: `get-drive`, `?set-drive`, `drive`,
; `set-user`.
;
; }doc

  ; XXX TODO move to the library

  pop hl ; L = drive
  push bc ; save Forth IP
  ld a,l ; A = drive
  ld ix,dos_set_drive
  call dos.ix
  pop bc ; restore Forth IP
  jp push_dos_ior

; ----------------------------------------------
  _code_header default_1346_,'default-1346'

  ; doc{

  ; default-1346 ( -- ) "default-1-3-4-6"
  ;
  ; Set the default configuration of memory banks for NextZXOS.
  ;
  ; NextZXOS uses RAM banks 1, 3, 4 and 6 as an array of 128
  ; sector buffers (numbered 0 .. 127), each of 512 bytes, thus
  ; 32 buffers per RAM bank. The cache and RAM disk occupy two
  ; separate (contiguous) areas of this array.
  ;
  ; The original default configuration of NextZXOS is the
  ; following:

  ; [cols="<,>*"]
  ; .Original configuration of memory buffers on NextZXOS. 
  ; |===
  ; | Usage    | First buffer | Number of buffers | KiB
  ;
  ; | Cache    |           32 |                 8 |   4
  ; | RAM disk |           40 |                88 |  44
  ;
  ; | Total    |              |               176 |  48
  ; |===

  ;
  ; In order to free 3 RAM banks for the Forth name space, and
  ; still keep a small RAM disk, the default configuration is
  ; modified by ``default-1346`` the following way:

  ; [cols="<,>*"]
  ; .Solo Forth configuration of memory buffers on NextZXOS. 
  ; |===
  ; | Usage    | First buffer | Number of buffers | KiB
  ;
  ; | Cache    |           96 |                 8 |   4
  ; | RAM disk |          104 |                24 |  12
  ;
  ; | Total    |              |                32 |  16
  ; |===

  ; ``default-1346`` is executed by `cold`.
  ;
  ; See also: `get-1346`, `set-1346`, `bank`, `far-banks`,
  ; `farlimit`.
  ;
  ; }doc

  exx                  ; save Forth IP
  ld de,$6008 ; $08 sectors for the cache, from sector $60
  ld hl,$6818 ; $18 sectors for the RAM disk, from sector $68
  ld ix,dos_set_1346 ; set RAM pages 1, 3, 4 and 6
  call dos.ix
  exx                  ; restore Forth IP
  _jp_next

; ==============================================================
; Temporary words for debugging

; ----------------------------------------------
  _colon_header bd_,'bd'

  ; bd ( -- ca len )

  ; Return the address and length of the block buffer.

  dw buffer_data_,b_slash_buf_
  dw exit_

; ----------------------------------------------
  _colon_header rf_,'rf'

  ; rf ( -- )

  ; Read the next block from the current blocks file into the
  ; block buffer and type it.

  dw bd_,block_f_i_d_,fetch_,read_file_,throw_,u_dot_
  dw bd_,type_
  dw exit_

; ----------------------------------------------
  _colon_header rpf_,'rpf'

  ; rpf ( +n -- )

  ; Reposition the current blocks file to block _+n_.

  dw b_slash_buf_,u_m_star_
  dw block_f_i_d_,fetch_,reposition_file_,throw_
  dw exit_

; ==============================================================

endif ; defined nextzxos

; ==============================================================
; Change log

; 2021-01-04: Start. Copy from <kernel.plus3dos.zx80s> (2015,
; 2016, 2017, 2018, 2020). Remove the code about direct sectors
; access.
;
; 2021-01-05: Delete `read-mode` and `write-mode`; deactivate
; some Z80 instructions. Delete `transfer-bytes`. Rewrite
; `transfer-block`. Move `read-block` and `write-block` from the
; kernel and adapt them; the original versions will be shared by
; +3DOS, G+DOS and TR-DOS. Add `block-fid`, `flush`,
; `close-blocks`, `open-blocks`. Move from the library all the
; words required to use the library blocks file: `read-file`,
; `bank-read-file`, `write-file`, `bank-write-file`,
; `reposition-file`, `>filename`, `r/w`, `open-file`,
; `(open-file`, `/filename`, `do-dos-open_`, `file-id`,
; `file-ids`, `#file-ids`.  Delete `ref-xdbp`. Improve
; documentation of `transfer-block`. Remove unnecessary +3DOS
; code from `set-drive` (beside, it made the Forth system crash
; when the default drive was set to "C" in the kernel).
;
; 2021-01-06: Update port variable names. Move `flush` and
; `close-blocks` to the library. Add `blocks?`, improve
; `open-blocks` with it and improve the related documentation.
; Update the exception codes ranges.

; vim: filetype=z80:textwidth=64
