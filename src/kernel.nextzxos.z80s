; kernel.nextzxos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; Last modified: 202101050325.
; See change log at the end of the file.

; ==============================================================
; Description

; The part of the kernel that is specific to NextZXOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2015, 2016, 2017, 2018, 2020,
; 2021.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; Requirements

if nextzxos

include inc/zx_spectrum_plus3dos.z80s
; XXX TODO
;include inc/zx_spectrum_nextzxos.z80s

; ==============================================================
; Routines to call NextZXOS

; ------------------------------
; DOS call (routine in IX)

dos.ix:

  ; Input:
  ;   IX = address of the NextZXOS routine
  ; Output:
  ;   IX = Forth `next`

  ; All other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; NextZXOS requirements).

  call dos_in
  call call_ix    ; call routine in IX
dos.ix.return:
  call dos_out
  ld ix,next      ; restore Forth IX
  ret

; ------------------------------
; DOS call (routine in TOS)

dos.tos:

  ; The top of the Z80 stack holds the address of the DOS
  ; routine to be run.  All registers are passed intact to the
  ; DOS routine and are returned from it.

  ; This routine is used when the IX register is a parameter of
  ; the DOS routine.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements).

  call dos_in
  exx                  ; preserve parameters
  pop de               ; return address to Forth word
  pop hl               ; address of the DOS routine
  push de              ; return address to Forth word
  ld de,dos.ix.return  ; return address from the DOS routine
  push de              ; force the return later
  push hl              ; address of the DOS routine
  exx                  ; restore parameters
  ret                  ; call routine in TOS, then continue at dos.ix.return

; ------------------------------
; Page in DOS

dos_in:

  push af
  push bc                  ; temp save registers while switching
  ld   a,(sys_bankm)       ; RAM/ROM switching system variable
  or   %00000111           ; set bits 0-3: RAM 7
  res  4,a                 ; and DOS ROM
  ld   bc,bank1_port       ; port used for horiz. ROM switch and RAM paging
  di
  ld   (sys_bankm),a       ; keep system variables up to date
  out  (c),a               ; RAM page 7 to top and DOS ROM
  ei
  pop  bc
  pop  af
  ret

; ------------------------------
; Page out DOS

dos_out:

  push af
  push bc
  ld   a,(sys_bankm)
  and  %11111000           ; reset bits 0-3: RAM 0
  set  4,a                 ; switch to ROM 3 (48 BASIC)
  ld   bc,bank1_port
  di
  ld   (sys_bankm),a
  out  (c),a               ; switch back to RAM page 0 and 48 BASIC
  ei
  pop  bc
  pop  af
  ret

; ------------------------------
; DOS call (routine in IX, preserving the Forth IP)

dos.ix.preserve_ip:

  ; This routine is used when the BC register (the Forth IP) is
  ; not a parameter of the DOS routine.

  ; IX holds the address of the DOS routine to be run. All
  ; other registers are passed intact to the DOS routine and
  ; are returned from it.

  ; The stack must be somewhere in central 32K (conforming to
  ; DOS requirements), so saved BC will not be switched out.

  push bc
  call dos.ix
  pop bc
  ret

; ------------------------------
; DOS call (routine in IX)
; Push EHL and DOS ior and continue at `next`

dos.ix_ehl:

  ; Address of an entry point to the Forth inner interpreter.
  ; This entry point is jumped to at the end of a code word, in
  ; order to execute first the NextZXOS command hold in the IX
  ; register, which returns a double-cell result in registers E
  ; and HL.

  ; Input:
  ;   B    = file number
  ;   IX   = DOS routine
  ;   (SP) = Forth IP
  ; Output:
  ;   BC   = Forth IP
  ;   IX   = Forth `next`
  ; Output stack:
  ;   ( d ior )
  ;   Where _d_ is the content of registers EHL.

  call dos.ix
  pop bc ; restore the Forth IP
  ; EHL = result
  push hl ; low part
  ld d,0
  push de ; high part

  ; Execution continues at `push_dos_ior`:

; ------------------------------
; Push DOS ior and continue at `next`

push_dos_ior:

  ; This routine is entered with `jp`, not with `call`, because
  ; it works as the end of a code Forth word: it jumps to
  ; `next` at the end.

  ; Input:
  ;   A  = NextZXOS error code (0..36)
  ;   Fc = no error?
  ; Output (error):
  ;   TOS = Forth exception code (-1036..-1000)
  ; Output (no error):
  ;   TOS = false

  jp c,false_   ; no error
  call dosior_to_ior
  ; HL = error code
  push hl
  _jp_next

; ------------------------------
; Save and restore the Forth IP

; These routines are used when a ROM call needs many parameters
; and not all of them can be taken from the stack in order to
; push BC before the call.  `dos.ix.preserve_ip` is not useful
; in those cases.

save_ip:
  ld h,b
  ld l,c
  ld (saved_ip),hl
  ret

restore_ip:
saved_ip: equ $+1
  ld bc,0 ; patched by save_ip
  ret

; ==============================================================
; Dictionary

; ----------------------------------------------
  _constant_header save_ip_underscore_,'save-ip_'

; doc{
;
; save-ip_ ( -- a ) "save-I-P-underscore"
;
; Address of a routine that saves the Forth IP (Z80 register
; BC), which must be restored later by the routine pointed by
; `restore-ip_`.
;
; This routine used when a ROM call needs many parameters and
; not all of them can be taken from the stack in order to push
; BC before the call. `dos-ix-preserve-ip_` is not useful in
; those cases.

; }doc

  dw save_ip

; ----------------------------------------------
  _constant_header restore_ip_underscore_,'restore-ip_'

; doc{
;
; restore-ip_ ( -- a ) "restore-I-P-underscore"
;
; Address of a routine that restores the Forth IP (Z80 register
; BC), previously saved by the routine pointed by `save-ip_`.

; See also: `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  dw restore_ip

; ----------------------------------------------
  _constant_header dos_ix_underscore_,'dos-ix_'

; doc{
;
; dos-ix_ ( -- a ) "dos-I-X-underscore"
;
; Address of a routine that executes the NextZXOS command hold in
; the IX register.

; ....
; Input:
;   IX = address of the NextZXOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix

; ----------------------------------------------
  _constant_header dos_ix_ehl_underscore_,'dos-ix-ehl_'

; doc{
;
; dos-ix-ehl_ ( -- a ) "dos-I-X-E-H-L-underscore"
;
; Address of an entry point to the Forth inner interpreter.
; This entry point is jumped to at the end of a code word, in
; order to execute first the NextZXOS command hold in the IX
; register, which returns a double-cell result in registers E
; and HL.

; ....
; Input:
;   B    = file number
;   IX   = address of the NextZXOS routine
;   (SP) = Forth IP
; Output:
;   BC   = Forth IP
;   IX   = Forth `next`
; Output stack:
;   ( d ior )
;   Where _d_ is the content of registers EHL.
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix_`, `dos-ix-preserve-ip_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix_ehl

; ----------------------------------------------
  _constant_header dos_tos_underscore_,'dos-tos_'

; doc{
;
; dos-tos_ ( -- a ) "dos-T-O-S-underscore"
;
; Address of a routine that executes the NextZXOS command hold on
; the top of the stack.
;
; This routine is used when the IX register is a parameter of
; the NextZXOS routine.

; ....
; Input:
;   (TOS) = address of the NextZXOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix_`, `dos-ix-preserve-ip_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.tos

; ----------------------------------------------
  _constant_header dos_in_underscore_,'dos-in_'

; doc{
;
; dos-in_ ( -- a ) "dos-in-underscore"
;
; Address of a routine that pages in RAM 7 and ROM 2 (DOS), as
; needed to call a NextZXOS routine.
;
; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-out_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos_in

; ----------------------------------------------
  _constant_header dos_out_underscore_,'dos-in_'

; doc{
;
; dos-out_ ( -- a ) "dos-out-underscore"
;
; Address of a routine that pages out RAM 7 and ROM 2 (DOS),
; paging in the default memory configuration: RAM 0 and ROM 3
; (48 BASIC).
;
; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-in_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos_in

; ----------------------------------------------
  _constant_header dos_ix_preserve_ip_underscore_,'dos-ix-preserve-ip_'

; doc{
;
; dos-ix-preserve-ip_ ( -- a ) "dos-I-X-preserve-I-P-underscore"
;
; Address of a routine that executes the NextZXOS command hold in
; the IX register, preserving the Forth IP.

; ....
; Input:
;   IX = address of the NextZXOS routine
; Output:
;   IX = Forth `next`
; ....

; The stack must be somewhere in central 32K (conforming to
; NextZXOS requirements).
;
; See also: `dos-ix_`, `dos-tos_`.
;
; }doc

  ; XXX TODO -- Move to the assembler word list.

  dw dos.ix.preserve_ip

; ----------------------------------------------
  _constant_header push_dos_ior_,'pushdosior'

  ; XXX TODO -- Move to the assembler word list.

; doc{
;
; pushdosior ( -- a ) "push-dos-I-O-R"
;
; Address of an entry point to the Forth inner interpreter.
; This entry point is jumped to at the end of a code word, in
; order to convert a _dosior_ into a _ior_ and push it.

; ....
; Input:
;   A  = NextZXOS error result (0..36)
; Output (no error):
;   TOS = zero
; Output (error):
;   TOS = Forth exception code (-1036..-1000)
; ....

; See also: `dosior>ior`.
;
; }doc

  dw push_dos_ior

; ----------------------------------------------
_code_header dosior_to_ior_,'dosior>ior'

; doc{
;
; dosior>ior ( dosior -- ior ) "dos-I-O-R-to-I-O-R"
;
; Convert a DOS ior to a Forth ior.
;
; ``dosior>ior`` is written in Z80. Its equivalent definition in
; Forth is the following:

; ----
; : dosior>ior ( dosior -- ior ) 1000 + negate ;
; ----

; See also: `pushdosior`.
;
; }doc

  pop hl
  call dosior_to_ior.hl
  push hl
  _jp_next

dosior_to_ior:

  ; Input:
  ;   A  = NextZXOS error code (0..36)
  ; Output:
  ;   HL = Forth exception code (-1036..-1000)

  ld h,0
  ld l,a

dosior_to_ior.hl:

  ; Input:
  ;   HL  = NextZXOS error code (0..36)
  ; Output:
  ;   HL = Forth exception code (-1036..-1000)

  ld de,1000
  add hl,de
  jp negate_hl

; ----------------------------------------------
  _variable_header block_f_i_d_,'block-fid'

; doc{
;
; block-fid ( -- a ) "block-f-i-d"
;
; A `variable`. _a_ is the address of a cell containing the file
; ID of the current blocks file.
;
; Origin: Gforth.
;
; See also: `open-blocks`.
;
; }doc

; ----------------------------------------------
  _colon_header flush_,'flush'

; doc{
;
; flush ( -- )
;
; Perform the function of `save-buffers`, then unassign all
; block buffers with `empty-buffers`.
;
; Origin: Forth-83 (Required Word Set), Forth-94 (BLOCK).
; Forth-2012 (BLOCK).
;
; See also: `close-blocks`.
;
; }doc

  dw save_buffers_,empty_buffers_
  dw exit_

; ----------------------------------------------
  _colon_header open_blocks_,'close-blocks'

; XXX FIXME: the unused value of `block-fid` cannot be 0..15.

; doc{
;
; close-blocks ( -- )
;
; Close the current blocks file, if any.
;
; Definition:


; ----
; : close-blocks ( -- )
;   block-fid @ ?dup
;   if flush close-file throw then ;
; ----

; See also: `open-blocks`, `block-fid`, `flush`, `close-file`.
;
; }doc

; ----------------------------------------------
  _colon_header open_blocks_,'open-blocks'

; XXX FIXME: this words needs `open-file` from the library.

; doc{
;
; open-blocks ( ca len -- )
;
; Use the file, whose name is given by _ca len_, as the blocks
; file.
;
; Definition:


; ----
; : open-blocks ( ca len -- )
;   close-blocks r/w open-file throw block-fid ! ;
; ----

; Origin: Gforth.
;
; See also: `block-fid`, `read-block`, `write-block`,
; `transfer-block`, `block`, `buffer`.
;
; }doc

  dw close_blocks_,r_slash_w_,open_file_,throw_
  dw block_f_i_d_,store_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'transfer-block'

; doc{
;
; transfer-block ( u f -- ior )
;
; The block-level disk read-write linkage.  Transfer block _u_
; to or from the current block file set by `open-blocks`. If _f_
; is zero, read the file from the file, otherwise write it to
; the file. 
;
; Definition:

; ----
; : transfer-block ( u f -- )
;   >r b/buf um* block-fid @ reposition-file throw
;      buffer-data b/buf block-fid @ 
;   r> if   write-file
;      else read-file throw b/buf < #-33 ?throw
;      then throw ;
; ----

; See also: `read-block`, `write-block`.
;
; }doc

  ; Credit:
  ;
  ; Adapted from DZX-Forth.

  dw to_r_
  dw b_slash_buf_,u_m_star_,block_f_i_d_,fetch_,reposition_file_,throw_
  dw buffer_data_,b_slash_buf_,block_f_i_d_,fetch_
  dw r_from_
  dw zero_branch_,transfer_block.read
  dw write_file_
  dw branch_,interpret.begin
transfer_block.read:
  dw read_file_,throw_
  dw b_slash_buf_,less_than_
  _question_throw error.block_read_exception
transfer_block.end:
  dw throw_
  dw exit_

; ----------------------------------------------
  _colon_header read_block_,'read-block'

; doc{
;
; read-block ( u -- )
;
; Read disk block _u_ to the buffer.
;
; See also: `transfer-block`, `write-block`, `block`.
;
; }doc

  dw false_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header write_block_,'write-block'

; doc{
;
; write-block ( n -- )
;
; Write the buffer to disk block _n_.
;
; See also: `transfer-block`, `read-block`, `block`.
;
; }doc

  dw true_,transfer_block_
  dw exit_

; ----------------------------------------------
  _code_header get_drive_,'get-drive'

; doc{
;
; get-drive ( -- c ior )
;
; Get the current default drive _c_ ('A'..'P'), i.e.  the drive
; implied by all filenames that do not specify a drive, and the
; drive used by block operations. The default drive is initially
; 'A'.  Return also an error result _ior_.
;
; See also: `set-drive`, `get-user`.
;
; }doc

  ; XXX TODO -- Move to the library.

  ld a,255
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  ld h,0
  ld l,a
  push hl
  jp push_dos_ior

; ----------------------------------------------
  _code_header set_filename_drive_,'set-filename-drive'

  ; XXX TMP -- Experimental factor.

; doc{
;
; set-filename-drive ( c -- ior )
;
; Set drive _c_ ('A'..'P') as the current default drive, i.e.
; the drive implied by all filenames that do not specify a
; drive.
;
; Does not access the drive, but merely checks that there is a
; driver for it (which does not imply that the drive exists).
;
; See also: `get-filename-drive`.
;
; }doc

  pop hl
  ld a,l
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  jp push_dos_ior

; ----------------------------------------------
  _code_header get_filename_drive_,'get-filename-drive'

  ; XXX TMP -- Experimental factor.

; doc{
;
; get-filename-drive ( -- c ior )
;
; Get drive _c_ ('A'..'P') currently used as default drive, i.e.
; the drive implied by all filenames that do not specify a
; drive.
;
; See also: `set-filename-drive`.
;
; }doc

  ld a,$FF
  ld ix,dos_set_drive
  call dos.ix.preserve_ip
  ld h,0
  ld l,a
  push hl
  jp push_dos_ior

; ----------------------------------------------
  _code_header set_drive_,'set-drive'

; doc{
;
; set-drive ( c -- ior )
;
; Set drive _c_ ('A'..'P') as the current one, i.e.  the drive
; implied by all filenames that do not specify a drive,
; returning the I/O result code _ior_.  If the drive is
; successfully selected, _ior_ is zero, otherwise it's an
; exception code.  The default drive is 'A'.
;
; ``set-drive`` does not access the drive, but merely checks
; that there is a driver for it (which does not imply that the
; drive exists).
;
; See also: `get-drive`, `?set-drive`, `drive`,
; `set-user`.
;
; }doc

  pop hl ; L = drive
  push bc ; save Forth IP
  ld a,l ; A = drive
  ld ix,dos_set_drive
  call dos.ix
  jr nc,set_drive.end ; skip if error

  ; A = default logical drive ('A'..'P')
  push af
  sub 'A' ; calculate physical drive (0..1)
  ;ld (transfer_sector.physical_drive),a ; patch `transfer-sector`; XXX OLD
  ld (set_drive.physical_drive),a ; patch below
  pop af

  call dos_in
  call dos_ref_xdpb ; IX = XDPB of the current drive
  call dos_out
  jr nc,set_drive.end ; skip if error
  ;ld (transfer_sector.xdpb),ix ; patch `transfer-sector`; XXX OLD

set_drive.physical_drive: equ $+1
  ld c,0 ; physical drive (0..1) (patched above)
  call dos_in
  call dd_login
  call dos_out
  ld ix,next ; restore Forth IX

set_drive.end:
  pop bc ; restore Forth IP
  jp push_dos_ior

; ----------------------------------------------
  _code_header ref_xdbp_,'ref-xdpb'

; doc{
;
; ref-xdbp ( c -- a ior ) "ref-X-D-B-P"
;
; Return the address _a_ of the XDPB of drive _c_ ('A'..'P').
;
; }doc

  ; XXX TODO -- Confirm: The returned address is accessible
  ; when bank 7 is paged in.

  ; XXX TODO -- Move to the library.

  pop hl
  ld a,l               ; drive 'A'..'P'
  ld ix,dos_ref_xdpb
  call dos.ix.preserve_ip
  push ix
  jp push_dos_ior

; ----------------------------------------------
  _code_header default_1346_,'default-1346'

  ; doc{

  ; default-1346 ( -- ) "default-1-3-4-6"
  ;
  ; Set the default configuration of memory banks for NextZXOS.
  ;
  ; NextZXOS uses RAM banks 1, 3, 4 and 6 as an array of 128
  ; sector buffers (numbered 0 .. 127), each of 512 bytes, thus
  ; 32 buffers per RAM bank. The cache and RAM disk occupy two
  ; separate (contiguous) areas of this array.
  ;
  ; The original default configuration of NextZXOS is the
  ; following:

  ; [cols="<,>*"]
  ; .Original configuration of memory buffers on NextZXOS. 
  ; |===
  ; | Usage    | First buffer | Number of buffers | KiB
  ;
  ; | Cache    |           32 |                 8 |   4
  ; | RAM disk |           40 |                88 |  44
  ;
  ; | Total    |              |               176 |  48
  ; |===

  ;
  ; In order to free 3 RAM banks for the Forth name space, and
  ; still keep a small RAM disk, the default configuration is
  ; modified by ``default-1346`` the following way:

  ; [cols="<,>*"]
  ; .Solo Forth configuration of memory buffers on NextZXOS. 
  ; |===
  ; | Usage    | First buffer | Number of buffers | KiB
  ;
  ; | Cache    |           96 |                 8 |   4
  ; | RAM disk |          104 |                24 |  12
  ;
  ; | Total    |              |                32 |  16
  ; |===

  ; ``default-1346`` is executed by `cold`.
  ;
  ; See also: `get-1346`, `set-1346`, `bank`, `far-banks`,
  ; `farlimit`.
  ;
  ; }doc

  exx                  ; save Forth IP
  ld de,$6008 ; $08 sectors for the cache, from sector $60
  ld hl,$6818 ; $18 sectors for the RAM disk, from sector $68
  ld ix,dos_set_1346 ; set RAM pages 1, 3, 4 and 6
  call dos.ix
  exx                  ; restore Forth IP
  _jp_next

; ==============================================================

endif ; defined nextzxos

; ==============================================================
; Change log

; 2021-01-04: Start. Copy from <kernel.plus3dos.zx80s> (2015,
; 2016, 2017, 2018, 2020). Remove the code about direct sectors
; access.
;
; 2021-01-05: Delete `read-mode` and `write-mode`; deactivate
; some Z80 instructions. Delete `transfer-bytes`. Rewrite
; `transfer-block`. Move `read-block` and `write-block` from the
; kernel and adapt them; the original versions will be shared by
; +3DOS, G+DOS and TR-DOS. Add `block-fid`, `flush`,
; `close-blocks`, `open-blocks`.

; vim: filetype=z80:textwidth=64
