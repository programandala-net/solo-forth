  \ tool.debug.assert.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201611141114

  \ -----------------------------------------------------------
  \ Description

  \ Versions of the `assert` debugging tool.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-11-14: Improve documentation.

( assert assert= )

  \ Credit:
  \
  \ Taken from Brad Nelson's code:
  \ http://bradn123.github.io/literateforth/out/events.fs

: assert   ( n -- )    0= if  abort  then  ;
: assert=  ( a b -- )  = assert  ;

( assert( )

  \ Credit:
  \
  \ Documentation and public-domain code from Gforth.

  \ It is a good idea to make your programs self-checking, in
  \ particular, if you use an assumption (e.g., that a certain
  \ field of a data structure is never zero) that may become
  \ wrong during maintenance.  Gforth supports assertions for
  \ this purpose. They are used like this:

  \      assert( FLAG )

  \ The code between `assert(' and `)' should compute a flag,
  \ that should be true if everything is alright and false
  \ otherwise. It should not change anything else on the stack.
  \ The overall stack effect of the assertion is `( -- )'. E.g.

  \   assert( 1 1 + 2 = ) \ what we learn in school
  \   assert( dup 0<> ) \ the top of stack should not be zero
  \   assert( false ) \ this code should not be reached

  \ The need for assertions is different at different times.
  \ During debugging, we want more checking, in production we
  \ sometimes care more for speed. Therefore, assertions can be
  \ turned off, i.e., the assertion becomes a comment.
  \ Depending on the importance of an assertion and the time it
  \ takes to check it, you may want to turn off some assertions
  \ and keep others turned on. Gforth provides several levels
  \ of assertions for this purpose:

  \ Note that the `assert-level' is evaluated at compile-time,
  \ not at run-time. I.e., you cannot turn assertions on or off
  \ at run-time, you have to set the `assert-level'
  \ appropriately before compiling a piece of code. You can
  \ compile several pieces of code at several `assert-level's
  \ (e.g., a trusted library at level 1 and newly written code
  \ at level 3).

variable assert-level  ( -- a )  1 assert-level !

  \ doc{
  \
  \ assert-level  ( -- a )
  \
  \ Variable that holds the highest assertions that are turned
  \ on (0..3).  Its default value is 1: all assertions above 1
  \ are turned off.
  \
  \ See: `assert(`.
  \
  \ Origin: Gforth.
  \
  \ }doc

: assertn  ( n -- )  assert-level @ > if  postpone (  then  ;

  \ doc{
  \
  \ assertn  ( n -- )
  \
  \ If the contents of `assert-level` is greater than _n_, then
  \ parse and discard the input stream to the next right paren
  \ (the end of the assertion); else do nothing.  This word is
  \ the common factor of `assert0(`, `assert1(`, `assert2(`,
  \ and `assert3(`.
  \
  \ See: `assert-level`, `assert(`, `assert0(`, `assert1(`,
  \ `assert2(`, `assert3(`.
  \
  \ Origin: Gforth.
  \
  \ }doc

: assert0(  ( -- )  0 assertn  ; immediate

  \ doc{
  \
  \ assert0(  ( -- )
  \
  \ Start an important assertion.  Important assertions should
  \ always be turned on.
  \
  \ See: `assert-level`, `assert(`, `assert1(`, `assert2(`,
  \ assert3(`, `)`.
  \
  \ Origin: Gforth.
  \
  \ }doc

: assert1(  ( -- )  1 assertn  ; immediate

  \ doc{
  \
  \ assert1(  ( -- )
  \
  \ Start a normal assertion.  Normal assertions are turned on
  \ by default.
  \
  \ See: `assert-level`, `assert(`, `assert0(`, `assert2(`,
  \ assert3(`, `)`.
  \
  \ Origin: Gforth.
  \
  \ }doc

: assert2(  ( -- )  2 assertn  ; immediate

  \ doc{
  \
  \ assert2(  ( -- )
  \
  \ Start a debugging assertion.
  \
  \ See: `assert-level`, `assert(`, `assert0(`, `assert1(`,
  \ assert3(`, `)`.
  \
  \ Origin: Gforth.
  \
  \ }doc

: assert3(  ( -- )  3 assertn  ; immediate

  \ doc{
  \
  \ assert3(  ( -- )
  \
  \ Start a slow assertion.  Slow assertions are those you may
  \ not want to turn on in normal debugging; you would turn
  \ them on mainly for thorough checking.
  \
  \ See: `assert-level`, `assert(`, `assert0(`, `assert1(`,
  \ `assert2(`, `)`.
  \
  \ Origin: Gforth.
  \
  \ }doc

: assert(  ( -- )  postpone assert1(  ; immediate

  \ doc{
  \
  \ assert(  ( -- )
  \
  \ Start a normal assertion.  Normal assertion are turned on
  \ by default. This word is equivalent to `assert1(`.
  \
  \ See: `assert-level`, `assert0(`, `assert1(`, `assert2(`,
  \ assert3(`, `)`.
  \
  \ Origin: Gforth.
  \
  \ }doc

: (endassert)  ( f -- )  0= #-262 ?throw  ;

: )  ( f -- )  postpone (endassert)  ; immediate

  \ doc{
  \
  \ ) ( f -- )
  \
  \ End an assertion.
  \
  \ See: `assert(`.
  \
  \ Origin: Gforth.
  \
  \ }doc


  \ vim: filetype=soloforth
