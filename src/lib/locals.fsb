  \ locals.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html
  \ 
  \ This file contains words related to locals.
  \
  \ Copyright (C) 2015,2016 Marcos Cruz (programandala.net)

  \ -------------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain all copyright notices, all credit notices, and this
  \ license in all files of all redistributed copies and derived
  \ works. There is no warranty.

( local restore-local )

  \ A simple solution to use an ordinary variable as local,
  \ saving its current value on the return stack and restoring
  \ it at the end.

  \ 2015-11-14

  \ Credits:
  \
  \ Original code by Henning Hanseng, published on Forth
  \ Dimensions 9/5 p. 6 (1988-01).

: restore-local  ( -- )  ( R: a x -- )  2r> swap !  ;
  \ a = address of a variable
  \ x = its original value
  \ Restore variable address and value.

: local  ( a0 -- )  ( R: a1 -- a0 x pfa a1 )
  \ a0 = address of a variable
  \ x = its current value
  \ a1 = return address
  \ pfa = pfa of `restore-local`
  r> swap                     \ save top return address
  dup @ 2>r                   \ save variable address and value
  ['] restore-local >body >r  \ force exit via `restore-local`
  >r  ;                       \ restore top return address

  \ Usage example:
  \
  \ variable v
  \ 1 v !  v ?  \ default value
  \ : test  ( -- )
  \   v local
  \   v ?  1887 v !  v ?  ;
  \ v ?  \ default value

( local restore-local )

  \ A simple solution to use an ordinary variable or value as
  \ local, saving its current value on the return stack and
  \ restoring it at the end.

  \ XXX UNDER DEVELOPMENT

  \ 2015-11-14: Start.

  \ Credits:
  \
  \ Original code by Michael Barr, published on Forth
  \ Dimensions 10/1 p. 6 (1988-05).

code (restore-local)
  \ XXX TODO
  jpnext
  end-code

: restore-local
  (restore-local)  ;

code (local)  ( a0 -- )  ( R: a1 -- a0 x pfa a1 )
  \ a0 = address of a variable
  \ x = its current value
  \ a1 = return address
  \ pfa = pfa of `restore-local`
  \ XXX TODO
  jpnext
  end-code

: local  ( "name" -- )
  ' >body postpone literal postpone (local)
  ; immediate compile-only

  \ Usage example:
  \
  \ variable v
  \ 1 v !  v ?  \ default value
  \ : test  ( -- )
  \   v local
  \   v ?  1887 v !  v ?  ;
  \ v ?  \ default value

( arguments results )

  \ XXX UNDER DEVELOPMENT

  \ 2015-11-14: Start.

  \ Credits:
  \
  \ Original code by Marc Perkel, published on Forth Dimensions
  \ (volume 3, number 6, page 6, 1982-03).

need 2/

variable >args
  \ address of the current arguments in the data stack
variable arg-action
  \ id of the argument action (fetch, store or add)

: arg:  ( n "name" -- )
  create  ,
  does>  ( a -- x ) ( x a -- )
    \ ( a pfa | x a pfa )
    @ >args @ swap -
    arg-action @ ?dup if    0< if  +!  else  !  then
                      else  @
                      then  arg-action off  ;
  \ create a new argument

$00 arg: s0 $02 arg: s1 $04 arg: s2 $06 arg: s3 $08 arg: s4
$0A arg: s5 $0C arg: s6 $0E arg: s7 $0A arg: s8 $0C arg: s9

: to  ( -- )  1 arg-action !  ;
  \ set the store action

: +to  ( -- )  -1 arg-action !  ;
  \ set the add action

-->

( arguments results )

  \ XXX OLD -- original
  \ : arguments  ( n -- )
  \   r> >args @ >r >r  \ save the contents of `>args`
  \   cells sp@ + dup >args ! 12 - sp@ swap -
  \   2/ 0 do  0  loop  arg-action !  ;

  : arguments  ( n -- )
  r> >args @ >r >r        \ save `>args`
  cells sp@ + dup >args ! 12 - sp@ swap -
  2/ 0 do  0  loop  arg-action !  ;

: results  ( n -- )
  cells >args @ swap - sp@ -
  2/ 0 do drop loop
  r> r> >args ! >r  ;     \ restore `>args`

-->

( arguments results )

  \ test

: test  ( n1 n2 n3 -- )
  cr ." check 1" .s \ XXX INFORMER
  3 arguments
  cr ." check 2" .s \ XXX INFORMER
  s0 s1 s2 * * to s4
  s0 s1 s2 + + to s5
  s5 to s2
  s4 to s1
  cr ." check 3" .s \ XXX INFORMER
  2 results
  cr ." check 4" .s \ XXX INFORMER
  ;

( create-anon anon +anon n>anon )

  \ Anonymous variables.

  \ 2015-11-14

  \ Credits:
  \
  \ Adapted, modified, improved and commented from original
  \ code written by Leonard Morgenstern, published on Forth
  \ Dimensions 6/1 p. 33 (1984-05).

variable (anon)  ( -- a )
  \ xt of the latest anonymous variable.

: create-anon  ( -- )
  here (anon) !
  [ (anon) body> @ ] literal compile, 0 ,  ;
  \ Create a new anonymous variable.  `(anon)` is used to get
  \ and compile the xt executed by all variables.

: anon  ( Compilation: -- ) ( Run-time: -- a )
  (anon) @
  compiling? if  compile,  else  execute  then  ; immediate
  \ Current anonymous variable (first cell),
  \ equivalent to `0 +anon`.

: +anon  ( Compilation:  n -- ) ( Run-time: -- )
  cells (anon) @ execute +
  compiling? if  postpone literal  then ; immediate
  \ Current anonymous variable (cell _n_, first is 0).

: n>anon  ( x1..xn n -- )
  cells postpone anon swap bounds do  i !  cell +loop  ;
  \ Store the given _n_ cells into the current anonymous
  \ variable.

  \ Usage example:

  \ create-anon 5 cells allot
  \
  \ : test
  \   400 300 200 100 000  5 n>anon
  \   anon ?          \ prints 0
  \   123 anon !
  \   anon ?          \ prints 123
  \   [ 2 ] +anon ?   \ prints 200
  \   555 [ 2 ] +anon !
  \   [ 2 ] +anon ?   \ prints 555
  \   ;

( { } )

  \ XXX UNDER DEVELOPMENT
  \ XXX TODO -- this depends on `(local)` and `refill`

  \ XXX TODO -- an alternative implementation with string
  \ comparisons is in the Forth-2012 documentation, but a
  \ dictionary search seems a better option.

  \ Credits:
  \
  \ Code adapted from pForth.

  \ ____
  \
  \ @(#) $M$ 98/01/26 1.2 standard { v0 v1 ... vn | l0 l1 .. lm
  \ -- } syntax based on ANSI basis words (LOCAL) and TO
  \
  \ Author: Phil Burk Copyright 1994 3DO, Phil Burk, Larry
  \ Polansky, Devid Rosenboom
  \
  \ The pForth software code is dedicated to the public domain,
  \ and any third party may reproduce, distribute and modify
  \ the pForth software code or any derivative works thereof
  \ without any compensation or license.  The pForth software
  \ code is provided on an "as is" basis without any warranty
  \ of any kind, including, without limitation, the implied
  \ warranties of merchantability and fitness for a particular
  \ purpose and their equivalents under the laws of any
  \ jurisdiction.
  \
  \ MOD: PLB 2/11/00 Allow EOL and \ between { }.  ____

need privatize

private{
variable loc-temp-mode
  \ if true, declaring temporary variables
variable loc-comment-mode
  \ if true, in comment section
variable loc-done
}private

-->

( { } )

: {  ( <local-declaration}> -- )
  loc-done off  loc-temp-mode off  loc-comment-mode off
  begin
    parse-name dup 0>  \ not at the end of a line?
    if
      over c@ case
        \ handle special characters

        [char] }  of  loc-done on          2drop  endof
        [char] |  of  loc-temp-mode on     2drop  endof
        [char] -  of  loc-comment-mode on  2drop  endof
        [char] )  of  ." { ... ) imbalance!" cr abort  endof
        [char] \  of  postpone \
                      2drop endof

        -->

( { } )

        \ process name
        >r  \ save char
        ( addr len ) loc-comment-mode @
        if  2drop else  loc-temp-mode @ if  compile false  then
          \ if in temporary mode, assign local var = 0
          \ otherwise take value from stack
          (local)
        then  r>

      endcase

    else  2drop refill 0=
          abort" end of input while defining local variables!"

    then  loc-done @

  until  0 0 (local)  ; immediate  privatize

( {}-tests )

  \ tests

: tlv1  { n -- }  n  dup n *  dup n *  ;

: tlv2 { v1 v2 | l1 l2 -- }
  v1 . v2 . cr
  v1 v2 + -> l1
  l1 . l2 . cr
  ;

  \ vim: filetype=soloforth
