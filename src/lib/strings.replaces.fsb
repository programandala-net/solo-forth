  \ strings.replaces.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201701220050

  \ -----------------------------------------------------------
  \ Description

  \ Forth-2012's `replaces`.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016, 2017.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Credit

  \ Code adapted from the Forth-2012 documentation.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-05-18: Use `wordlist` instead of `vocabulary`, which
  \ has been moved to the library.
  \
  \ 2016-11-26: Need `search-wordlist`, which has been moved to
  \ the library.
  \
  \ 2017-01-21: Finish. Test. Document. Make all words
  \ individually accessible to `need`.
  \
  \ 2017-01-22: Improve documentation.

( substitute-wordlist create-substitution )

[unneeded] substitute-wordlist
?\  wordlist constant substitute-wordlist

  \ doc{
  \
  \ substitute-wordlist  ( -- wid )
  \
  \ Word list for substitution names and replacement texts.
  \
  \ See: `replaces`.
  \
  \ }doc

need ?(

[unneeded] create-substitution ?(

need substitute-wordlist  need /counted-string  need nextname

: create-substitution  ( ca1 len1 -- ca2 )
  get-current >r substitute-wordlist set-current
  nextname create
  r> set-current
  here 0 c, /counted-string chars allot  ; ?)

  \ doc{
  \
  \ create-substitution  ( ca1 len1 -- ca2 )
  \
  \ Given a string _ca1 len1_ create its substitution and
  \ storage space.  Return the address of the buffer for the
  \ substitution text.
  \
  \ See: `replaces`.
  \
  \ }doc

( find-substitution replaces )

need ?(

[unneeded] find-substitution ?(

need substitute-wordlist  need search-wordlist

: find-substitution  ( ca len -- xt f | 0 )
  substitute-wordlist search-wordlist  ; ?)

  \ doc{
  \
  \ find-substitution  ( ca len -- xt f | 0 )
  \
  \ Given a string _ca len_, find its substitution.  Return
  \ _xt_ and _f_ if found, or just zero if not found.
  \
  \ See: `replaces`.
  \
  \ }doc

[unneeded] replaces ?(

need find-substitution  need create-substitution

: replaces  ( ca1 len1 ca2 len2 -- )
  2dup find-substitution if    nip nip execute
                         else  create-substitution
                         then  place  ; ?)

  \ doc{
  \
  \ replaces  ( ca1 len1 ca2 len2 -- )
  \
  \ Set the string _ca1 len1_ as the text to substitute for the
  \ substitution named by _ca2 len2_. If the substitution does
  \ not exist it is created. The  program may then reuse the
  \ buffer _ca1 len1_ without affecting the definition  of the
  \ substitution.
  \
  \ The name of a substitution should not contain the "%"
  \ delimiter character.
  \
  \ `replaces` allots data space and creates a definition.
  \
  \ Origin: Forth-2012 (STRING EXT).
  \
  \ See: `substitute`, `unescape`, `create-substitution`,
  \ `find-substitution`, `substitute-wordlist`.
  \
  \ }doc

  \ vim: filetype=soloforth
