  \ tool.list.words.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201605042236

  \ -----------------------------------------------------------
  \ Description

  \ Words to list words.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2015-09-12: Fix `words-like`.
  \ 2016-05-04: Compact the blocks. Add `words#`. Document.

( more-words? words wordlist-words )

need nuf?

: more-words?  ( nt|0 -- nt|0 f )  dup 0<>  nuf? 0= and  ;

  \ doc{
  \
  \ more-words?  ( nt|0 -- nt|0 f )
  \
  \ A common factor of `words` and `words-like`.
  \
  \ }doc


[needed] more-word? ?exit

  \ Credit:
  \
  \ Code adapted from Spectrum Forth-83.

need trail  need name<name  need tab

: words  ( -- )
  trail begin  more-words?  while
          dup .name tab  name<name
        repeat drop  ;

  \ doc{
  \
  \ words  ( -- )
  \
  \ List the definition names in the first word list of
  \ the search order.
  \
  \ Origin: Forth-83 (Uncontrolled Reference Words), Forth-94
  \ (TOOLS), Forth-2012 (TOOLS).
  \
  \ }doc

[needed] words  ?exit

: wordlist-words  ( wid -- )  >order  words  previous  ;

  \ doc{
  \
  \ wordlist-words  ( wid -- )
  \
  \ List the definition names in word list _wid_.
  \
  \ }doc

( words-like words# )

need trail  need name<name  need tab  need more-words?
need [if]

[needed] words-like [if]  [defined] contains
?\ : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;
   \ Does the string _ca1 len1_ contains the string _ca2
   \ len2?_

: words-like  ( "name" -- )
  parse-name 2dup uppers trail  ( ca len nt )
  begin  more-words?  while
    dup >r name>string 2over contains if  r@ .name tab  then
        r> name<name
  repeat drop 2drop  ;  [then]

  \ doc{
  \
  \ words-like  ( "name" -- )
  \
  \ List the definition names, from the first word list of
  \ the search order, that contain substring "name".
  \
  \ }doc

  \ Credit:
  \
  \ Code of `words-like` adapted from pForth.

[needed] words# [if]
: words#  ( -- n ) 0 trail begin  ( n nt ) dup 0<>  while
                             swap 1+ swap  name<name
                           repeat drop  ;  [then]

  \ doc{
  \
  \ words#  ( -- n )
  \
  \ Return number _n_ of words defined in the first word list
  \ of the search order.
  \
  \ }doc

  \ vim: filetype=soloforth
