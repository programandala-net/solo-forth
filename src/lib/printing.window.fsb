  \ printing.window.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ XXX UNDER DEVELOPMENT

  \ Last modified: 201612241744

  \ -----------------------------------------------------------
  \ Description

  \ Basic text windows, which use special printing words.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2016-12-23: Start.
  \
  \ 2016-12-24: First working version.

( window )

need cfield:  need +field-opt-0124
need columns  need rows  need under+  need ruler

need ~~

-->

( window )

0 cfield: ~wx         \ x cursor coordinate
  cfield: ~wy         \ y cursor coordinate
  cfield: ~wx0        \ window left x coordinate on screen
  cfield: ~wy0        \ window top y coordinate on screen
  cfield: ~wcolumns   \ width
  cfield: ~wrows      \ heigth
constant /window

variable current-window

: wx        ( -- ca )  current-window @ ~wx        ;
: wy        ( -- ca )  current-window @ ~wy        ;
: wx0       ( -- ca )  current-window @ ~wx0       ;
: wy0       ( -- ca )  current-window @ ~wy0       ;
: wcolumns  ( -- ca )  current-window @ ~wcolumns  ;
: wrows     ( -- ca )  current-window @ ~wrows     ;  -->

( window )

: window  ( "name" -- )
  create  here  /window allot  current-window !
  does>   ( -- )  ( pfa ) current-window !  ;
  \ Create a window called _name_ and make it the current one.
  \ Later execution of `name` will make it the current one.

: set-window  ( x0 y0 columns rows -- )
  wrows c!  wcolumns c!  wy0 c! wx0 c!  ;
  \ Set the current window: _x0 y0_ is the position of
  \ its top left corner on the screen, and _columns rows_ is
  \ its size.

: reset-window  ( -- )  0 0 columns rows set-window  ;
  \ Set the current window to use the full screen.

: (wat-xy)  ( x y -- )  wx0 c@ under+ wy0 c@ + at-xy  ;
  \ Set the cursor at current window coordinates _x y_.

: wat-xy  ( x y -- )  2dup wy c! wx c!  (wat-xy)  ;
  \ Set the current window coordinates to _x y_ and set the
  \ cursor there.

: at-wxy  ( -- )  wx c@ wy c@ (wat-xy)  ;
  \ Set the cursor at the current window coordinates.

: whome  ( -- )  0 0 wat-xy  ;
  \ Set the current window coordinates to the first column and
  \ the first row.

: wcls  ( -- )
  bl wcolumns c@ ruler  wy0 c@ wrows c@ bounds ?do
                          2dup wx0 c@ i at-xy type
                        loop  2drop  whome  ;  -->
  \ Clear the current window.

( wtype )

: wcr  ( -- )  wy c@ dup wrows c@ 1- =
               if  drop whome exit  then  1+ wy c! 0 wx c!  ;
  \ Cause subsequent output to the current window appear at the
  \ beginning of the next line.
  \
  \ XXX TODO -- scroll instead of `whome`

: ?wcr  ( -- )  wx c@ 0= ?exit wcr  ;
  \ If the current window x coordinate is not zero, cause
  \ subsequent output to the current window appear at the
  \ beginning of the next line.

: wfreecolumns  ( -- n )  wcolumns c@ wx c@ -  ;
  \ Return the number _n_ of free columns in the current
  \ line of the current window.


: +wc  ( n -- )
  ~~ wx c@
  ~~ + dup wx c! wcolumns c@
  ~~ = if
  ~~ wcr  then  ;
  \ Increase the x coordinate of the current window with _n_
  \ character positions

-->

( window )

variable wtyped

: (wtype)  ( ca len -- )  ~~ tuck type +wc  wtyped on  ;
  \ Type string _ca len_ in the current window and update
  \ the window coordinates accordingly.

:noname   ( ca len -- )
 0 ~~y @ 3 + at-xy ." x " wx c@ . ." y " wy c@ .
                   ." free " wfreecolumns .  ;

' ~~app-info defer!

: /wtype  ( ca len len1 n -- ca' len' )
  >r >r over r> at-wxy (wtype) r> /string  ;
  \ Type the first  _len1_ characters of _ca len_ in the
  \ current window and remove its first _n_ characters,
  \ returning the string _ca' len'_.

-->

( window )

: wtype  ( ca len -- )  wtyped off
  begin  dup wfreecolumns ~~ >      \ line  2
  while 2dup wfreecolumns min 0 ~~y @ 2+ at-xy type ." <      "
    0 wfreecolumns ~~               \ line  4
    do  ~~                          \ line  5
      over i + c@ bl ~~ = if        \ line  6
        i dup 1+ /wtype ~~ leave           \ line  7
      then
    -1 +loop                        \ line  9
    wtyped @ if    ?wcr wtyped off
             else  wfreecolumns dup /wtype  then
  repeat  ~~                        \ line 11
  at-wxy (wtype) ~~  ;              \ line 12
  \ Type string _ca len_ in the current window.

( wemit wspace )

need char>string  need window

: wemit  ( c -- )  char>string wtype  ;

: wspace  ( -- )  bl wemit  ;


( window-test )

  \ XXX TMP -- for debugging

need window

window my-window
my-window
20 5 8 15 set-window

: wipe  ( -- )  0 paper cls 6 paper wcls 7 ink 0 paper  ;

wipe

: txt1  ( -- ca len )
  s" En un lugar de La Mancha de cuyo nombre no quiero"  ;

: txt2  ( -- ca len )
  s" acordarme no ha mucho tiempo que viv√≠a un hidalgo"  ;

txt2

.s

  \ vim: filetype=soloforth
