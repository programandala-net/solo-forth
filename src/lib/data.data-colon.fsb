  \ data.data-colon.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201701182337

  \ -----------------------------------------------------------
  \ Description

  \ Words to define cell, double-cell and character data zones.
  \ The data are compiled as usual with `,`, `2,` or `c,`. The
  \ defined words return the start address and the number of
  \ items.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2016, 2017.

  \ -----------------------------------------------------------
  \ Credit

  \ Words inspired by TurboForth's `data`, which nevertheless
  \ works different: it's a parsing word that parses and
  \ compiles a given number of literals, including the count.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2016-11-25: Start.
  \
  \ 2017-01-18: Remove `exit` at the end of conditional
  \ interpretation.

( data: 2data: cdata: )

need ?(

[unneeded] data: ?(

: data:  ( "name" -- orig )
  create >mark
  does>  ( -- a len ) ( pfa ) dup cell+ swap @  ;

  \ doc{
  \
  \ data:  ( "name" -- orig )
  \
  \ Create a definition for _name_, in order to compile cell
  \ data, finished by `;data`. Leave _orig_ to be used by
  \ `;data`.  When _name_ is executed, it will leave the
  \ address of the first cell and the number of cells.
  \ 
  \ Usage example:
  
  \ ----
  \ data: list  ( -- a len )
  \   1 , 2 , 3 , 4 , 5 ,  ;data
  \ ----
  \ 
  \ See: `;data`, `2data:`, `cdata:`.
  \
  \ }doc

: ;data  ( orig -- )  here over cell+ - cell / swap !  ;

  \ doc{
  \
  \ ;data  ( orig -- )
  \
  \ Finish the definition started by `data:`: calculate the
  \ length of the cell data compiled and store it at _orig_.
  \
  \ See: `data:`.
  \
  \ }doc

exit ?)

[unneeded] 2data: ?(  need alias

' data: alias 2data: ( "name" -- orig )

  \ doc{
  \
  \ 2data:  ( "name" -- orig )
  \
  \ Create a definition for _name_, in order to compile
  \ double-cell data, finished by `;2data`. Leave _orig_ to be
  \ used by `;2data`.  When _name_ is executed, it will leave
  \ the address of the first double cell and the number of
  \ double cells.
  \ 
  \ Usage example:
  
  \ ----
  \ 2data: 2list  ( -- a len )
  \   1. 2, 2. 2, 3. 2, 4. 2, 5. 2,  ;2data
  \ ----
  \ 
  \ See: `2;data`, `data:`, `cdata:`.
  \
  \ }doc

: ;2data  ( orig -- )
  here over cell+ - [ 2 cells ] literal / swap !  ; ?)

  \ doc{
  \
  \ ;2data  ( orig -- )
  \
  \ Finish the definition started by `2data:`: calculate the
  \ length of the double-cell data compiled and store it at
  \ _orig_.
  \
  \ See: `2data:`.
  \
  \ }doc

[unneeded] cdata: ?(  need alias

' data: alias cdata: ( "name" -- orig )

  \ doc{
  \
  \ cdata:  ( "name" -- orig )
  \
  \ Create a definition for _name_, in order to compile
  \ character data, finished by `;cdata`. Leave _orig_ to be
  \ used by `;cdata`.  When _name_ is executed, it will leave
  \ the address of the first character and the number of
  \ characters.
  \ 
  \ Usage example:
  
  \ ----
  \ cdata: clist  ( -- ca len )
  \   1 c, 2 c, 3 c, 4 c, 5 c,  ;cdata
  \ ----
  \ 
  \ See: `c;data`, `data:`, `2data:`.
  \
  \ }doc

: ;cdata  ( orig -- )  here over cell+ - swap !  ; ?)

  \ doc{
  \
  \ ;cdata  ( orig -- )
  \
  \ Finish the definition started by `cdata:`: calculate the
  \ length of the character data compiled and store it at
  \ _orig_.
  \
  \ See: `cdata:`.
  \
  \ }doc

  \ vim: filetype=soloforth
