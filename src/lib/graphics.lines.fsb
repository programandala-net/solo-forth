  \ graphics.lines.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201612260058

  \ -----------------------------------------------------------
  \ Description

  \ Words to draw lines.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-05-07: Make block titles compatible with `indexer`.
  \
  \ 2016-12-20: Rename `jpnext` to `jpnext,` after the change
  \ in the kernel.
  \
  \ 2016-12-25: Rename `rdraw` to `rdraw176`, and `adraw` to
  \ `adraw176`. Improve documentation. Convert `rdraw176` to
  \ the `z80-asm,` assembler. First steps to write `rdraw` with
  \ a modified version of the ROM routine.

( rdraw176 )

need z80-asm,

code rdraw176  ( gx gy -- )
  h pop, d pop, b push, d b ldp,
  \ HL = gy
  \ BC = gx
  1 e ld#,
  b 7 bit,  \ negative x?
  nz? rif  c a ld, neg, -1 e ld#, a c ld,  rthen  \ negative x

  l b ld,   \ y
  1 d ld#,
  h 7 bit,  \ negative y?
  nz? rif  b a ld, neg, -1 d ld#, a b ld,  rthen  \ negative y

  24BA call, \ alternative entry to the DRAW-LINE ROM routine

  b pop,

  jpnext, end-code

  \ Credit:
  \
  \ Code adapted from Spectrum Forth-83's `DRAW`.

  \ doc{
  \
  \ rdraw176  ( gx gy -- )
  \
  \ Draw a line relative _gx gy_ to the current coordinates,
  \ using only the top 176 pixel rows of the screen (the lower
  \ 16 pixel rows are not used). _gx_ is 0..255; _gy_ is
  \ 0..175.
  \
  \ This word is equivalent to Sinclair BASIC's DRAW command.
  \
  \ }doc

( rdraw )

  \ XXX UNDER DEVELOPMENT

  \ XXX TODO -- adapt the DRAW-LINE ROM routine

need z80-asm-comma

code rdraw  ( gx gy -- )

  a c ld, b cp, c? rif
    \  ld      a,c
    \  cp      b
    \  jr      nc,dl_x_ge_y

    c l ld, d push, a xor, a e ld, XXX jr,
    \  ld      l,c
    \  push    de
    \  xor     a
    \  ld      e,a
    \  jr      dl_larger

  rthen
    \ dl_x_ge_y:
  c or, z? ?ret
    \  or      c
    \  ret     z

  b l ld, c b ld, d push, 00 d ld#,
    \  ld      l,b
    \  ld      b,c
    \  push    de
    \  ld      d,$00

    \ dl_larger:
  b h ld, b a ld, rra,
    \  ld      h,b
    \  ld      a,b
    \  rra

  rbegin
    \ d_l_loop:
  l a add, XXX jr,
    \  add     a,l
    \  jr      c,d_l_diag

  h cp, XXX jr,
    \  cp      h
    \  jr      c,d_l_hr_vt

    \ d_l_diag:
  h sub, a c ld, exx, b pop, b push, XXX jr,
    \  sub     h
    \  ld      c,a
    \  exx
    \  pop     bc
    \  push    bc
    \  jr      d_l_step

-->

( rdraw )

    \ d_l_hr_vt:
  a c ld, d push, exx, b pop,
    \  ld      c,a
    \  push    de
    \  exx
    \  pop     bc

    \ d_l_step:
  os-coords h ftp, b a ld, h add, a b ld, c a ld, a inc, l add,
  XXX c? ?jr,
  XXX z? ?jr,
    \  ld      hl,($5c7d) ; coords
    \  ld      a,b
    \  add     a,h
    \  ld      b,a
    \  ld      a,c
    \  inc     a
    \  add     a,l
    \  jr      c,d_l_range
    \  jr      z,report_bc ; XXX TODO -- adapt, integer out of range

    \ d_l_plot:
  a dec, a c ld, 22E5 07 + call, exx, c a ld,
    \  dec     a
    \  ld      c,a
    \  call    l22e5      ; routine plot-sub \ XXX TODO
    \ XXX TODO -- replace `call PLOT-SUB` with `call PLOT-SUB+7`
    \  exx
    \  ld      a,c
  rstep
    \  djnz    d_l_loop

  d pop, ret,
    \  pop     de
    \  ret

    \ d_l_range:
  XXX z? ?jr,
    \  jr      z,d_l_plot
  jpnext, end-code

( adraw176 )

need plot  need os-coordx  need os-coordy

2variable x1  2variable incx  2variable y1  2variable incy

: adraw176  ( gx gy -- )

  [ os-coordy ] literal c@ ( y0 )
  dup 0 swap y1 2! - dup abs rot
  \ ( +-ydiff ydiff x )

  [ os-coordx ] literal c@ ( x0 )
  dup 0 swap x1 2! - dup abs rot
  \ ( +-ydiff +-xdiff xdiff ydiff )

  max >r dup 0<  \ negative xdiff?
  if    abs 0 swap r@ ud/mod dnegate
  else  0 swap r@ ud/mod  then

  incx 2! drop dup 0<  \ negative ydiff?
  if    abs 0 swap r@ ud/mod dnegate
  else  0 swap r@ ud/mod  then

  -->

( adraw176 )

  incy 2! drop r> 1+ 0
  do  x1 @ y1 @ plot
      x1 2@ incx 2@ d+ x1 2!
      y1 2@ incy 2@ d+ y1 2!  loop  ;

  \ Credit:
  \
  \ Code adapted from Abersoft Forth's `DRAW`.

  \ doc{
  \
  \ adraw176  ( gx gy -- )
  \
  \ Draw a line from the current coordinates to the given
  \ absolute coordinates, using only the top 176 pixel rows of
  \ the screen (the lower 16 pixel rows are not used). _gx_ is
  \ 0..255; _gy_ is 0..175.
  \
  \ }doc

  \ vim: filetype=soloforth
