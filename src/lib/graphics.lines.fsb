  \ graphics.lines.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201612250106

  \ -----------------------------------------------------------
  \ Description

  \ Words to draw lines.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-05-07: Make block titles compatible with `indexer`.
  \
  \ 2016-12-20: Rename `jpnext` to `jpnext,` after the change
  \ in the kernel.
  \
  \ 2016-12-25: Rename `rdraw` to `rdraw176`, and `adraw` to
  \ `adraw176`. Improve documentation.

( rdraw176 )

need z80-asm

code rdraw176  ( gx gy -- )

  hl pop  de pop  bc push
  de bc ldp

  \ hl = y
  \ bc = x
  1 e ld#
  b 7 bit  \ negative x?
  nz if  c a ld  neg  -1 e ld#  a c ld  then  \ negative x

  l b ld   \ y
  1 d ld#
  h 7 bit  \ negative y?
  nz if  b a ld  neg  -1 d ld#  a b ld  then  \ negative y

  24BA call \ alternative entry to the DRAW-LINE ROM routine

  bc pop

  jpnext, end-code

  \ Credit:
  \
  \ Code adapted from Spectrum Forth-83's `DRAW`.

  \ doc{
  \
  \ rdraw176  ( gx gy -- )
  \
  \ Draw a line relative _gx gy_ to the current coordinates,
  \ using the top 176 pixel rows of the screen.
  \
  \ This word is equivalent to Sinclair BASIC's DRAW command.
  \
  \ }doc

  \ XXX FIXME -- use the whole screen

( rdraw )

  \ XXX UNDER DEVELOPMENT

  \ XXX TODO -- adapt the DRAW-LINE ROM routine

need z80-asm

code rdraw  ( gx gy -- )


  \  ld      a,c
  \  cp      b
  \  jr      nc,dl_x_ge_y
  \
  \  ld      l,c
  \  push    de
  \  xor     a
  \  ld      e,a
  \  jr      dl_larger
  \
  \ dl_x_ge_y:
  \  or      c
  \  ret     z
  \
  \  ld      l,b
  \  ld      b,c
  \  push    de
  \  ld      d,$00
  \
  \ dl_larger:
  \  ld      h,b
  \  ld      a,b
  \  rra
  \
  \ d_l_loop:
  \  add     a,l
  \  jr      c,d_l_diag
  \
  \  cp      h
  \  jr      c,d_l_hr_vt
  \
  \ d_l_diag:
  \  sub     h
  \  ld      c,a
  \  exx
  \  pop     bc
  \  push    bc
  \  jr      d_l_step
  \
  \ d_l_hr_vt:
  \  ld      c,a
  \  push    de
  \  exx
  \  pop     bc
  \
  \ d_l_step:
  \  ld      hl,($5c7d) ; coords
  \  ld      a,b
  \  add     a,h
  \  ld      b,a
  \  ld      a,c
  \  inc     a
  \  add     a,l
  \  jr      c,d_l_range
  \  jr      z,report_bc ; XXX TODO -- adapt, integer out of range
  \
  \ d_l_plot:
  \  dec     a
  \  ld      c,a
  \  call    l22e5      ; routine plot-sub \ XXX TODO
  \ XXX TODO -- replace `call PLOT-SUB` with `call PLOT-SUB+7`
  \  exx
  \  ld      a,c
  \  djnz    d_l_loop
  \
  \  pop     de
  \  ret
  \
  \ d_l_range:
  \  jr      z,d_l_plot

end-asm

( adraw176 )

need plot  need os-coordx  need os-coordy

2variable x1  2variable incx  2variable y1  2variable incy

: adraw176  ( gx gy -- )

  [ os-coordy ] literal c@ ( y0 )
  dup 0 swap y1 2! - dup abs rot
  \ ( +-ydiff ydiff x )

  [ os-coordx ] literal c@ ( x0 )
  dup 0 swap x1 2! - dup abs rot
  \ ( +-ydiff +-xdiff xdiff ydiff )

  max >r dup 0<  \ negative xdiff?
  if    abs 0 swap r@ ud/mod dnegate
  else  0 swap r@ ud/mod  then

  incx 2! drop dup 0<  \ negative ydiff?
  if    abs 0 swap r@ ud/mod dnegate
  else  0 swap r@ ud/mod  then

  -->

( adraw176 )

  incy 2! drop r> 1+ 0
  do  x1 @ y1 @ plot
      x1 2@ incx 2@ d+ x1 2!
      y1 2@ incy 2@ d+ y1 2!  loop  ;

  \ Credit:
  \
  \ Code adapted from Abersoft Forth's `DRAW`.

  \ doc{
  \
  \ adraw176  ( gx gy -- )
  \
  \ Draw a line from the current coordinates to the given
  \ absolute coordinates, using the top 176 pixel rows of the
  \ screen.
  \
  \ }doc

  \ vim: filetype=soloforth
