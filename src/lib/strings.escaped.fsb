  \ strings.escaped.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201612221609

  \ -----------------------------------------------------------
  \ Description

  \ Words related to escaped strings.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-04-24: Remove `[char]` and `char`, which have been
  \ moved to the library.
  \
  \ 2016-05-18: Use `wordlist` instead of `vocabulary`, which
  \ has been moved to the library.
  \
  \ 2016-12-18: Improve documentation of `escaped-wordlist`.
  \
  \ 2016-12-22: Rename `escaped-wordlist` to
  \ `standard-esc-chars-wordlist`. Use `internal` to hide `(x)`
  \ in the word list. Make the escaped characters configurable
  \ with the search order. Improve documentation.  Rename
  \ "escaped" to "esc" in word names, because some of them were
  \ longer than 31 characters. Rename `unescape-chr` to
  \ `esc-char>chars` and fix it. Factor `parse-esc-string`. Use
  \ `alias` (31 bytes) if already defined, to save 14 bytes of
  \ 2 double-cell constants defined in
  \ `standard-esc-chars-wordlist`.

( standard-esc-chars-wordlist )

get-current  forth-wordlist set-current

need parse-char  need internal  need unlink-internal

wordlist dup constant standard-esc-chars-wordlist
         dup >order set-current

  \ doc{
  \
  \ standard-esc-chars-wordlist  ( -- wid )
  \
  \ Identifier of the word list that contains the words whose
  \ names are the standard characters that must be escaped
  \ after a backslash in strings parsed by `s\"` and other
  \ words.
  \
  \ The execution of the words defined in this word list
  \ returns the new character(s) on the stack (the last one at
  \ the bottom) and the count. Example of the stack effect of a
  \ escaped character that returns two characters:

  \ ----
  \   ( -- c[1] c[0] 2 )
  \ ----

  \ Most of the escaped characters are translated to one
  \ character, so they are defined as double constants.
  \
  \ Conversion rules:

  \ |===
  \ | Escaped | Name | ASCII characters
  \
  \ | \a | BEL (alert)          |  7
  \ | \b | BS (backspace)       |  8
  \ | \e | ESC (escape)         | 27
  \ | \f | FF (form feed)       | 12
  \ | \l | LF (line feed)       | 10
  \ | \m | CR/LF                | 13, 10
  \ | \n | newline              | 13
  \ | \q | double-quote         | 34
  \ | \r | CR (carriage return) | 13
  \ | \t | HT (horizontal tab)  |  9
  \ | \v | VT (vertical tab)    | 11
  \ | \z | NUL (no character)   |  0
  \ | \" | double-quote         | 34
  \ | \x<hexdigit><hexdigit>  | | Conversion of the two hexadecimal digits
  \ |===

  \ Note: The translation is not fully standard, because in
  \ Standard Forth the character after the backslash is
  \ case-sensitive. At the moment (2016-12-22), in Solo Forth
  \ the character after the backslash is case-insensitive.
  \
  \ See: `parse-esc-string`, `s\"`, `.\"`.
  \ `set-standard-esc-string-order`, `set-esc-string-order`.
  \
  \ }doc

7 1 2constant a  8 1 2constant b  27 1 2constant e
  \ \a = backspace
  \ \b = alert
  \ \e = escape
12 1 2constant f  10 1 2constant l  '"' 1 2constant q
  \ \f = form feed
  \ \l = line feed
  \ \q = double quote
13 1 2constant r  9 1 2constant t  11 1 2constant v
  \ \r = carriage return
  \ \t = horizontal tab
  \ \v = vertical tab
0 1 2constant z  '\' 1 2constant \
  \ \z = null character
  \ \\ = backslash

: m  ( -- c1 c2 2 )  10 13 2  ;                        internal
  \ \m = carriage return and line feed

: (x)  ( "c" -- n )
  parse-char upper 16 digit? 0= #-260 ?throw  ;    end-internal
  \ Parse an hex digit and convert it to a number.
  \ XXX TODO -- move to other word list

: x  ( "<hexdigit><hexdigit>" -- c 1 )  (x) 16 * (x) + 1  ;
  \ \x = hex character code
  \ Parse the 8-bit hex number of a character code.

[defined]   alias ?\ '"' 1 2constant "  13 1 2constant n
[undefined] alias ?\       ' q alias "       ' r alias n
  \ \" = double quote
  \ \n = new line

unlink-internal  set-current previous

( parse-esc-string )

need char>string  need chars>string  need s+
need standard-esc-chars-wordlist

: set-standard-esc-string-order  ( -- )
  standard-esc-chars-wordlist 1 set-order  ;

  \ doc{
  \
  \ set-standard-esc-string-order  ( -- )
  \
  \ Set `standard-esc-chars-wordlist` the only word list in
  \ the search order.  This is the default action of
  \ `set-esc-string-order`. This word makes
  \ `parse-esc-string` escape only the standard escaped
  \ characters defined in Forth-2012. `parse-esc-string` is
  \ the common factor of `s\"` and `.\"`.
  \
  \ See: `standard-esc-chars-wordlist`,
  \ `set-esc-string-order`.  `parse-esc-string`, `s\"`,
  \ `.\"`.
  \
  \ }doc

defer set-esc-string-order  ( -- )

  \ doc{
  \
  \ set-esc-string-order  ( -- )
  \
  \ A deferred word that sets the search order used by
  \ `parse-esc-string`. Its default action is
  \ `set-standard-esc-string-order`.
  \
  \ See: `set-standard-esc-string-order`,
  \ `standard-esc-chars-wordlist`, `parse-esc-string`.
  \
  \ }doc

' set-standard-esc-string-order
' set-esc-string-order defer!

: esc-char>chars  ( c -- c[n-1]..c[0] n )
  dup char>string find-name
  ?dup if  nip name> execute  else  '\' 2  then  ;

  \ doc{
  \
  \ esc-char>chars  ( c -- c[n-1]..c[0] n )
  \
  \ Translate a escaped char _c_ to a number of chars
  \ _c[n-1]..c[0] and their count _n_.
  \
  \ The translation is done by searching the name of the
  \ escaped char in the current search order, which has been
  \ set by calling `set-esc-string-order` in
  \ `parse-esc-string`.
  \
  \ See: `set-esc-string-order`, `parse-esc-string`.
  \
  \ }doc

-->

( parse-esc-string )

: (parse-esc-string)  ( ca len "ccc<quote>"  -- ca' len' )
  begin   parse-char dup '"' <>  \ not finished?
  while   dup '\' =  \ maybe escaped?
          if    drop parse-char esc-char>chars
          else  1
          then  chars>string s+
  repeat  drop  ;

  \ doc{
  \
  \ (parse-esc-string)  ( ca len "ccc<quote>"  -- ca' len' )
  \
  \ Parse a text string delimited by a double quote,
  \ translating some configurable characters that are escaped
  \ with a backslash.  Add the translated string to _ca len_,
  \ returning a new string _ca' len'_ in
  \ the circular string buffer.
  \
  \ This word is a factor of `parse-esc-string`.
  \
  \ See: `parse-esc-string`.
  \
  \ }doc

: parse-esc-string  ( "ccc<quote>"  -- ca len )
  get-order set-esc-string-order  0 0 (parse-esc-string)
  2>r set-order 2r>  ;

  \ doc{
  \
  \ parse-esc-string  ( "ccc<quote>"  -- ca len )
  \
  \ Parse a text string delimited by a double quote,
  \ translating some configurable characters that are escaped
  \ with a backslash.  Return the translated string _ca len_ in
  \ the circular string buffer.
  \
  \ The characters that must be escaped depend on the search
  \ order set by the deferred word `set-esc-string-order`,
  \ whose default action is `set-standard-esc-string-order`.
  \ Therefore, by default, the escaped characters are those
  \ described in Forth-2012's `s\"`.
  \
  \ This word is a common factor of `s\"` and `.\"`.
  \
  \ See: `s\"`, `.\"`, `set-esc-string-order`,
  \ `set-standard-esc-string-order`, `(parse-esc-string)`.
  \
  \ }doc

( s\" .\" )

need ?(

[unneeded] s\" ?(  need parse-esc-string
: s\"  ( Interpretation: "ccc<quote>" -- ca len )
       ( Compilation: "ccc<quote>" -- )
       ( Run-time: -- ca len )
  parse-esc-string compiling? if  postpone sliteral  then
  ; immediate  exit ?)

  \ XXX TODO documentation
  \ doc{
  \
  \ s\"  ( "ccc<quote>" -- ca len )
  \
  \ Note: The translation is not fully standard, because in
  \ Standard Forth the character after the backslash is
  \ case-sensitive. At the moment (2016-12-22), in Solo Forth
  \ the character after the backslash is case-insensitive.
  \
  \ See: `parse-esc-string`, `.\"`.
  \
  \ }doc

[unneeded] .\" ?(  need parse-esc-string
: .\"  ( Compilation: "ccc<quote>" -- )
       ( Run-time: -- ca len )
  compile (.")  parse-esc-string s,
  ; immediate compile-only ?)

  \ XXX TODO documentation
  \ doc{
  \
  \ .\"  ( "ccc<quote>" -- )
  \
  \ Note: The translation is not fully standard, because in
  \ Standard Forth the character after the backslash is
  \ case-sensitive. At the moment (2016-12-22), in Solo Forth
  \ the character after the backslash is case-insensitive.
  \
  \ See: `parse-esc-string`, `s\"`.
  \
  \ }doc

  \ vim: filetype=soloforth
