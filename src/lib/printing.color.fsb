  \ printing.color.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201701242250

  \ -----------------------------------------------------------
  \ Description

  \ Words related to color.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016, 2017.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2016-05-01: Start. New words:
  \
  \   color@ color! color-mask@ color-mask! color 2color
  \   permcolor@ permcolor! permcolor-mask@ permcolor-mask!
  \   permcolor 2permcolor paper@ paper! ink@ ink!  bright@
  \   bright! flash! flash@
  \
  \ 2016-05-04: Move `inverse` and `overprint` from the kernel.
  \
  \ 2016-08-01: Move color constants, `papery`, `brighty` and
  \ `flashy` from _Nuclear Invaders_
  \ (http://programandala.net/en.program.nuclear_invaders.html).
  \
  \ 2016-12-02: Fix `bright!`.
  \
  \ 2016-12-03: Rename `>paper` to `paper>attr` and `paper>` to
  \ `attr>paper`, and rewrite them in Z80: much faster, and 2
  \ bytes smaller each.
  \
  \ 2016-12-16: Make `color@`, `color!`, `color-mask@`,
  \ `color-mask!`, `color` and `2color` individually accesible
  \ to `need`.
  \
  \ 2016-12-20: Rename `jpnext` to `jpnext,` after the change
  \ in the kernel.
  \
  \ 2017-01-12: Rewrite `papery`, `brighty` and `flashy` in Z80
  \ (smaller and faster code) and document them. Improve
  \ `permcolor`.
  \
  \ 2017-01-18: Remove `exit` at the end of conditional
  \ interpretation.
  \
  \ 2017-01-22: Rewrite `color!` and `color-mask!` in Z80.
  \
  \ 2017-01-24: Rename all words that fetch and store the
  \ system attributes: prefix "color" to "attr", prefix
  \ "permcolor" to "perm-attr". Rewrite `perm-attr!`,
  \ `perm-attr-mask!`, `attr@`, `attr-mask@` in Z80.

  \ -----------------------------------------------------------
  \ Documentation

  \ (From the ZX Spectrum +3 manual transcribed by Russell
  \ Marks et al.; and from the ZX Spectrum ROM disassembly.)

  \ System variables:

  \ 23693 = ATTR_P -- permanent colors

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ ATTR_P  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23693   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ 23694 = MASK_P -- permanent mask
  \ MASK_P is used for transparent colours. Any bit that is 1
  \ shows that the corresponding attribute is taken not from
  \ ATTR_P but from what is already on the screen.

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ MASK_P  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23694   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ 23695 = ATTR_T -- temporary colors

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ ATTR_T  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23695   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ 23696 = MASK_T -- temporary mask
  \ MASK_T is used for transparent colours. Any bit that is 1
  \ shows that the corresponding attribute is taken not from
  \ ATTR_T but from what is already on the screen.

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ MASK_T  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23696   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ P_FLAG holds the print flags.  Even bits are the temporary
  \ flags; odd bits are the permanent flags.

  \         {paper9 }{ ink9 }{ inv1 }{ over1}
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ P_FLAG  |   |   |   |   |   |   |   |   |
  \         | p | t | p | t | p | t | p | t |
  \ 23697   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

( black blue red magenta green cyan yellow white )

0 cconstant black    1 cconstant blue   2 cconstant red
3 cconstant magenta  4 cconstant green  5 cconstant cyan
6 cconstant yellow   7 cconstant white

( papery brighty flashy )

need ?(

[unneeded] papery ?(  need 8*  need alias
' 8* alias papery  ( b1 -- b2 ) ?)

  \ doc{
  \
  \ papery   ( b1 -- b2 )
  \
  \ Convert paper color _b1_ to its equivalent attribute _b2_.
  \
  \ This word is an alias of `8*`, which is written in Z80.
  \ Its equivalent in Forth is the following:

  \ ----
  \ : papery  ( b1 -- b2 )  8 *  ;
  \ ----

  \ See: `brighty`, `flashy`.
  \
  \ }doc

[unneeded] brighty ?(
code brighty  ( attribute -- brighty-attribute )
  E1 c, CB c, C0 6 8 * + 5 + c, jppushhl,  end-code ?)
  \ pop hl
  \ set 6,l
  \ jp pushhl

  \ doc{
  \
  \ brighty  ( b1 -- b2 )
  \
  \ Convert attribute _b1_ to its brighty equivalent _b2_.
  \
  \ This word is written in Z80. Its equivalent in Forth is the
  \ following:

  \ ----
  \ : brighty  ( b1 -- b2 )   64 or  ;
  \ ----

  \ See: `papery`, `flashy`.
  \
  \ }doc

[unneeded] flashy ?(
code flashy   ( b1 -- b2 )
  E1 c, CB c, C0 7 8 * + 5 + c, jppushhl,  end-code ?)
  \ pop hl
  \ set 7,l
  \ jp pushhl

  \ doc{
  \
  \ flashy   ( b1 -- b2 )
  \
  \ Convert attribute _b1_ to its flashy equivalent _b2_.
  \
  \ This word is written in Z80. Its equivalent in Forth is the
  \ following:

  \ ----
  \ : flashy   ( b1 -- b2 )   128 or  ;
  \ ----

  \ See: `papery`, `brighty`.
  \
  \ }doc

( attr@ attr! attr-mask@ attr-mask! )

need ?(

[unneeded] attr@ ?( need os-attr-t

code attr@  ( -- b )
  3A c, os-attr-t , C3 c, jp pusha , end-code
  \ ld a,(sys_attr_t)
  \ jp push_a

  \ doc{
  \
  \ attr@  ( -- b )
  \
  \ Get temporary color attribute _b_.
  \
  \ }doc

need ?(

[unneeded] attr! ?(  need os-attr-t

code attr!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-attr-t , jpnext, end-code ?)

  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_attr_t),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ attr!  ( b -- )
  \
  \ Set temporary color attribute _b_.
  \
  \ }doc

[unneeded] attr-mask@ ?( need os-mask-t

code attr-mask@  ( -- b )
  3A c, os-mask-t , C3 c, jp pusha , end-code
  \ ld a,(sys_mask_t)
  \ jp push_a

  \ doc{
  \
  \ attr-mask!  ( b -- )
  \
  \ Get temporary color attribute mask _b_.
  \
  \ }doc

[unneeded] attr-mask! ?( need os-mask-t

code attr-mask!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-mask-t , jpnext, end-code ?)

  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_mask_t),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ attr-mask!  ( b -- )
  \
  \ Set temporary color attribute mask _b_.
  \
  \ }doc

( color 2color )

need ?(

[unneeded] color ?(  need attr!

: color  ( b "name" -- )
  create c,  does>  ( -- ) ( pfa ) c@ attr!  ; ?)

  \ doc{
  \
  \ color  ( b "name" -- )
  \
  \ Create a definition "name" that, when executed, will
  \ set temporary color attribute _b_.
  \
  \ }doc

[unneeded] 2color ?(  need attr!  need attr-mask!

: 2color  ( b1 b2 "name" -- )
  create 2,  does>  ( -- ) ( pfa ) 2@ attr! attr-mask!  ; ?)

  \ doc{
  \
  \ 2color  ( b1 b2 "name" -- )
  \
  \ Create a definition "name" that, when executed, will
  \ set temporary color attribute _b2_ and mask _b1_.
  \
  \ }doc

( perm-attr@ perm-attr! perm-attr-mask@ perm-attr-mask! )

need ?(

[unneeded] perm-attr@ ?(  need os-attr-p

: perm-attr@  ( -- b )  os-attr-p c@  ; ?)

  \ doc{
  \
  \ perm-attr@  ( -- b )
  \
  \ Get permanent color attribute _b_.
  \
  \ }doc

[unneeded] perm-attr! ?(  need os-attr-p

code perm-attr!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-attr-p , jpnext, end-code ?)

  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_attr_p),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ perm-attr!  ( b -- )
  \
  \ Set permanent color attribute _b_.
  \
  \ }doc

[unneeded] perm-attr-mask@ ?(  need os-mask-p

: perm-attr-mask@  ( -- b )  os-mask-p c@  ; ?)

  \ doc{
  \
  \ perm-attr-mask@  ( -- b )
  \
  \ Get permanent color attribute mask _b_.
  \
  \ }doc

[unneeded] perm-attr-mask! ?(  need os-mask-p

code perm-attr-mask!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-mask-p , jpnext, end-code ?)

  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_mask_p),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ perm-attr-mask!  ( b -- )
  \
  \ Set permanent color attribute mask _b_.
  \
  \ }doc

( permcolor 2permcolor )

need perm-attr!  need perm-attr-mask!

: permcolor  ( b "name" -- )
  create c,
  does>  ( -- ) ( pfa ) c@ perm-attr!  ;

  \ doc{
  \
  \ permcolor  ( b "name" -- )
  \
  \ Create a definition "name" that, when executed, will
  \ set permanent color attribute _b_.
  \
  \ }doc

: 2permcolor  ( b1 b2 "name" -- )
  create 2,
  does>  ( -- ) ( pfa ) 2@ perm-attr! perm-attr-mask!  ;

  \ doc{
  \
  \ 2permcolor  ( b1 b2 "name" -- )
  \
  \ Create a definition "name" that, when executed, will
  \ set permanent color attribute _b2_ and mask _b1_.
  \
  \ }doc

( attr>paper paper>attr paper@ paper! ink@ ink! )

need attr@  need attr!

code attr>paper  ( b1 -- b2 )
  E1 c, 7D c, E6 c, %00111000 c,
  \ pop hl
  \ ld a,l
  \ and %00111000
  CB c, 3F c, CB c, 3F c, CB c, 3F c, pusha jp,  end-code
  \ srl a
  \ srl a
  \ srl a
  \ jp push_a

  \ doc{
  \
  \ attr>paper  ( b1 -- b2 )
  \
  \ Convert paper attribute _b1_ to actual paper color number
  \ _b2_.
  \
  \ This word is written in Z80. The equivalent code in Forth
  \ is the following:
  \
  \ ----
  \ : attr>paper  ( b1 -- b2 )  %00111000 and 3 rshift  ;
  \ ----
  \
  \ }doc

code paper>attr  ( b1 -- b2 )
  E1 c, 7F c, E6 c, %00000111 c,
  \ pop hl
  \ ld a,l
  \ and %00000111
  CB c, 27 c, CB c, 27 c, CB c, 27 c, pusha jp,  end-code
  \ sla a
  \ sla a
  \ sla a
  \ jp push_a

  \ doc{
  \
  \ paper>attr  ( b1 -- b2 )
  \
  \ Convert paper color _b1_ (only bits 0..2 are used) to paper
  \ attribute _b2_.
  \
  \ This word is written in Z80. The equivalent code in Forth
  \ is the following:
  \
  \ ----
  \ : paper>attr  ( b1 -- b2 )  %00000111 and 3 lshift  ;
  \ ----
  \
  \ }doc

: paper@  ( -- b )  attr@ attr>paper  ;

: paper!  ( b -- )
  paper>attr attr@ %11000111 and or attr!  ;

: ink@  ( -- b )  attr@ %00000111 and  ;

: ink!  ( b -- )
  %00000111 and attr@ %11111000 and or attr!  ;

( bright@ bright! flash! flash@ )

need attr@  need attr!

: bright@  ( -- f )
  attr@ %01000000 and 0=  ;

: bright!  ( f -- )
  %01000000 and attr@ %10111111 and or attr!  ;

: flash@  ( -- f )
  attr@ %10000000 and 0=  ;

: flash!  ( f -- )
  %10000000 and attr@ %01111111 and or attr!  ;

( inverse overprint )

code inverse  ( f -- )
  E1 c,  78 04 + c,  B0 05 + c,  28 c, 06 c,
    \ pop hl
    \ ld a,h
    \ or l
    \ jr z,inverse.off
  FD c, CB c, 57 c, C6 08 02 * + c,  jpnext,
    \ set 2,(iy+sys_p_flag_offset) ; temporary inverse flag
    \ _jp_next
    \ inverse.off:
  FD c, CB c, 57 c, 86 08 02 * + c,  jpnext,  end-code
    \ res 2,(iy+sys_p_flag_offset) ; temporary inverse flag
    \ _jp_next

  \ doc{
  \
  \ inverse  ( f -- )
  \
  \ If _f_ is zero, turn the inverse printing mode off; else
  \ turn it on.
  \
  \ }doc

code overprint  ( f -- )
  E1 c,  78 04 + c,  B0 05 + c,  28 c, 06 c,
    \ pop hl
    \ ld a,h
    \ or l
    \ jr z,overprint.off
  FD c, CB c, 57 c, C6 08 00 * + c,  jpnext,
    \ set 0,(iy+sys_p_flag_offset) ; temporary overprint flag
    \ _jp_next
    \ overprint.off:
  FD c, CB c, 57 c, 86 08 00 * + c,  jpnext,  end-code
    \ res 0,(iy+sys_p_flag_offset) ; temporary overprint flag
    \ _jp_next

  \ doc{
  \
  \ overprint  ( f -- )
  \
  \ If _f_ is zero, turn the overprint mode off; else turn it
  \ on.
  \
  \ }doc

  \ vim: filetype=soloforth
