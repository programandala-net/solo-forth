  \ printing.color.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201701311654

  \ -----------------------------------------------------------
  \ Description

  \ Words related to color.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016, 2017.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2016-05-01: Start. New words:
  \
  \   color@ color! color-mask@ color-mask! color 2color
  \   permcolor@ permcolor! permcolor-mask@ permcolor-mask!
  \   permcolor 2permcolor paper@ paper! ink@ ink!  bright@
  \   bright! flash! flash@
  \
  \ 2016-05-04: Move `inverse` and `overprint` from the kernel.
  \
  \ 2016-08-01: Move color constants, `papery`, `brighty` and
  \ `flashy` from _Nuclear Invaders_
  \ (http://programandala.net/en.program.nuclear_invaders.html).
  \
  \ 2016-12-02: Fix `bright!`.
  \
  \ 2016-12-03: Rename `>paper` to `paper>attr` and `paper>` to
  \ `attr>paper`, and rewrite them in Z80: much faster, and 2
  \ bytes smaller each.
  \
  \ 2016-12-16: Make `color@`, `color!`, `color-mask@`,
  \ `color-mask!`, `color` and `2color` individually accesible
  \ to `need`.
  \
  \ 2016-12-20: Rename `jpnext` to `jpnext,` after the change
  \ in the kernel.
  \
  \ 2017-01-12: Rewrite `papery`, `brighty` and `flashy` in Z80
  \ (smaller and faster code) and document them. Improve
  \ `permcolor`.
  \
  \ 2017-01-18: Remove `exit` at the end of conditional
  \ interpretation.
  \
  \ 2017-01-22: Rewrite `color!` and `color-mask!` in Z80.
  \
  \ 2017-01-24: Rename all words that fetch and store the
  \ system attributes: prefix "color" to "attr", prefix
  \ "permcolor" to "perm-attr". Rewrite `perm-attr!`,
  \ `perm-attr-mask!`, `attr@`, `attr-mask@`, `perm-attr@`,
  \ `perm-attr-mask@` in Z80. Improve documentation. Make all
  \ words individually accessible to `need`. Add `inverse-on`
  \ and `inverse-off` and rewrite `inverse` after them.  Add
  \ `overprint-on` and `overprint-off` and rewrite `overprint`
  \ after them.
  \
  \ 2017-01-25: Remove `permcolor` and `2permcolor`: they are
  \ hardly useful.  Rename `color` to `attr-setter`, and
  \ `2color` to `mask+attr-setter`.
  \
  \ 2017-01-27: Fix or improve several assembly jumps. Add
  \ `mask+attr!` and `mask+attr@`. Improve documentation.
  \ Improve `mask+attr-setter`.
  \
  \ 2017-01-31: Fix requirement of `paper!`. Fix Z80 opcode in
  \ `paper>attr`. Rename `paper!`, `paper@` and family to
  \ `set-paper`, `get-paper`, etc. Move `paper.`, `ink.`,
  \ `bright.` and `flash.` from the kernel. Improve
  \ documentation.

  \ -----------------------------------------------------------
  \ Documentation

  \ (From the ZX Spectrum +3 manual transcribed by Russell
  \ Marks et al.; and from the ZX Spectrum ROM disassembly.)

  \ System variables:

  \ 23693 = ATTR_P -- permanent colors

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ ATTR_P  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23693   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ 23694 = MASK_P -- permanent mask
  \ MASK_P is used for transparent colours. Any bit that is 1
  \ shows that the corresponding attribute is taken not from
  \ ATTR_P but from what is already on the screen.

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ MASK_P  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23694   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ 23695 = ATTR_T -- temporary colors

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ ATTR_T  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23695   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ 23696 = MASK_T -- temporary mask
  \ MASK_T is used for transparent colours. Any bit that is 1
  \ shows that the corresponding attribute is taken not from
  \ ATTR_T but from what is already on the screen.

  \         {fl}{br}{   paper   }{  ink    }
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ MASK_T  |   |   |   |   |   |   |   |   |
  \         |   |   |   |   |   |   |   |   |
  \ 23696   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

  \ P_FLAG holds the print flags.  Even bits are the temporary
  \ flags; odd bits are the permanent flags.

  \         {paper9 }{ ink9 }{ inv1 }{ over1}
  \          ___ ___ ___ ___ ___ ___ ___ ___
  \ P_FLAG  |   |   |   |   |   |   |   |   |
  \         | p | t | p | t | p | t | p | t |
  \ 23697   |___|___|___|___|___|___|___|___|
  \           7   6   5   4   3   2   1   0

( black blue red magenta green cyan yellow white )

0 cconstant black    1 cconstant blue   2 cconstant red
3 cconstant magenta  4 cconstant green  5 cconstant cyan
6 cconstant yellow   7 cconstant white

( papery brighty flashy )

need ?(

[unneeded] papery ?(  need 8*  need alias

' 8* alias papery  ( b1 -- b2 ) ?)

  \ doc{
  \
  \ papery   ( b1 -- b2 )
  \
  \ Convert paper color _b1_ to its equivalent attribute _b2_.
  \
  \ This word is an alias of `8*`, which is written in Z80.
  \ Its equivalent in Forth is the following:

  \ ----
  \ : papery  ( b1 -- b2 )  8 *  ;
  \ ----

  \ See: `brighty`, `flashy`, `attr>paper`.
  \
  \ }doc

[unneeded] brighty ?(

code brighty  ( b1 -- b2 )
  E1 c, CB c, C0 6 8 * + 5 + c, jppushhl,  end-code ?)
  \ pop hl
  \ set 6,l
  \ jp pushhl

  \ doc{
  \
  \ brighty  ( b1 -- b2 )
  \
  \ Convert attribute _b1_ to its brighty equivalent _b2_.
  \
  \ This word is written in Z80. Its equivalent in Forth is the
  \ following:

  \ ----
  \ : brighty  ( b1 -- b2 )   %01000000 or  ;
  \ ----

  \ See: `papery`, `flashy`.
  \
  \ }doc

[unneeded] flashy ?(

code flashy   ( b1 -- b2 )
  E1 c, CB c, C0 7 8 * + 5 + c, jppushhl,  end-code ?)
  \ pop hl
  \ set 7,l
  \ jp pushhl

  \ doc{
  \
  \ flashy   ( b1 -- b2 )
  \
  \ Convert attribute _b1_ to its flashy equivalent _b2_.
  \
  \ This word is written in Z80. Its equivalent in Forth is the
  \ following:

  \ ----
  \ : flashy   ( b1 -- b2 )   %10000000 or  ;
  \ ----

  \ See: `papery`, `brighty`.
  \
  \ }doc

( attr@ attr! attr-mask@ attr-mask! )

need ?(

[unneeded] attr@ ?( need os-attr-t

code attr@  ( -- b )
  3A c, os-attr-t , pusha jp, end-code ?)
  \ ld a,(sys_attr_t)
  \ jp push_a

  \ doc{
  \
  \ attr@  ( -- b )
  \
  \ Get the temporary attribute _b_.
  \
  \ See: `attr!`, `perm-attr@`.
  \
  \ }doc

[unneeded] attr! ?(  need os-attr-t

code attr!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-attr-t , jpnext, end-code ?)

  \                   ;  T  B
  \                   ; -----
  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_attr_t),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ attr!  ( b -- )
  \
  \ Set _b_ as the temporary attribute.
  \
  \ See: `attr@`, `perm-attr!`.
  \
  \ }doc

[unneeded] attr-mask@ ?(  need os-mask-t

code attr-mask@  ( -- b )
  3A c, os-mask-t , pusha jp, end-code ?)
  \ ld a,(sys_mask_t)
  \ jp push_a

  \ doc{
  \
  \ attr-mask@  ( -- b )
  \
  \ Get the temporary attribute mask _b_.
  \
  \ See: `attr-mask!`, `perm-attr-mask@`.
  \
  \ }doc

[unneeded] attr-mask! ?(  need os-mask-t

code attr-mask!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-mask-t , jpnext, end-code ?)

  \                   ;  T  B
  \                   ; -----
  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_mask_t),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ attr-mask!  ( b -- )
  \
  \ Set _b_ as the temporary attribute mask.
  \
  \ See: `attr-mask@`, `perm-attr-mask!`.
  \
  \ }doc

( mask+attr! mask+attr@ )

need ?(

[unneeded] mask+attr! ?(  need os-attr-t

code mask+attr!  ( b1 b2 -- )
  E1 c, D1 c, 60 03 + c, 22 c, os-attr-t , jpnext,  end-code ?)

  \                     ;  T  B
  \                     ; -----
  \ pop hl              ; 10 01
  \ pop de              ; 10 01
  \ ld h,e              ; 04 01
  \ ld (sys_attr_t),hl  ; 16 03
  \ _jp_next            ; 08 02 ; jp (ix)
  \                     ; -----
  \                     ; 48 08

  \ doc{
  \
  \ mask+attr!  ( b1 b2 -- )
  \
  \ Set _b1_ as the temporary attribute mask
  \ and _b2_ as the temporary attribute.
  \
  \ See: `mask+attr@`, `attr!`, `attr-mask!`
  \
  \ }doc

[unneeded] mask+attr@ ?(  need os-attr-t

code mask+attr@  ( -- b1 b2 )
  26 c, 00 c, ED c, 5B c, os-attr-t , 68 02 + c, E5 c,
  \ ld h,0
  \ ld de,(sys_attr_t)
  \ ld l,d
  \ push hl
  68 03 + c, jppushhl,  end-code ?)
  \ ld l,e
  \ _jp_pushhl

  \ doc{
  \
  \ mask+attr@  ( -- b1 b2 )
  \
  \ Set _b_ as the temporary attribute mask.
  \
  \ See: `attr-mask!`, `perm-attr-mask@`.
  \
  \ }doc

( attr-setter mask+attr-setter )

need ?(

[unneeded] attr-setter ?(  need attr!

: attr-setter  ( b "name" -- )
  create c,  does>  ( -- ) ( pfa ) c@ attr!  ; ?)

  \ doc{
  \
  \ attr-setter  ( b "name" -- )
  \
  \ Create a definition "name" that, when executed, will
  \ set _b_ as the temporary attribute.
  \
  \ See: `mask+attr-setter`.
  \
  \ }doc

[unneeded] mask+attr-setter ?(  need mask+attr!

: mask+attr-setter  ( b1 b2 "name" -- )
  create 2,  does>  ( -- ) ( pfa ) 2@ mask+attr!  ; ?)

  \ doc{
  \
  \ mask+attr-setter  ( b1 b2 "name" -- )
  \
  \ Create a definition "name" that, when executed, will set
  \ _b1_ as the temporary attribute mask and _b2_ as the
  \ temporary attribute.
  \
  \ See: `attr-setter`.
  \
  \ }doc

( perm-attr@ perm-attr! perm-attr-mask@ perm-attr-mask! )

need ?(

[unneeded] perm-attr@ ?(  need os-attr-p

code perm-attr@  ( -- b )
  3A c, os-attr-p , pusha jp, end-code ?)
  \ ld a,(sys_attr_p)
  \ jp push_a

  \ doc{
  \
  \ perm-attr@  ( -- b )
  \
  \ Get the permanent attribute _b_.
  \
  \ See: `perm-attr!`, `attr@`.
  \
  \ }doc

[unneeded] perm-attr! ?(  need os-attr-p

code perm-attr!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-attr-p , jpnext, end-code ?)

  \                   ;  T  B
  \                   ; -----
  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_attr_p),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ perm-attr!  ( b -- )
  \
  \ Set _b_ as the permanent attribute.
  \
  \ See: `perm-attr@`, `attr!`.
  \
  \ }doc

[unneeded] perm-attr-mask@ ?(  need os-mask-p

code perm-attr-mask@  ( -- b )
  3A c, os-mask-p , pusha jp, end-code ?)
  \ ld a,(sys_mask_p)
  \ jp push_a

  \ doc{
  \
  \ perm-attr-mask@  ( -- b )
  \
  \ Get the permanent attribute mask _b_.
  \
  \ See: `perm-attr-mask!`, `attr-mask@`.
  \
  \ }doc

[unneeded] perm-attr-mask! ?(  need os-mask-p

code perm-attr-mask!  ( b -- )
  D1 c, 78 03 + c, 32 c, os-mask-p , jpnext, end-code ?)

  \                   ;  T  B
  \                   ; -----
  \ pop de            ; 10 01
  \ ld a,e            ; 04 01
  \ ld (sys_mask_p),a ; 13 03
  \ jp (ix)           ; 08 02
  \                   ; -----
  \                   ; 35 07

  \ doc{
  \
  \ perm-attr-mask!  ( b -- )
  \
  \ Set _b_ as the permanent attribute mask.
  \
  \ See: `perm-attr-mask@`, `attr-mask!`.
  \
  \ }doc

( attr>paper paper>attr )

need ?(

[unneeded] attr>paper ?(

code attr>paper  ( b1 -- b2 )
  E1 c, 7D c, E6 c, %00111000 c,
  \ pop hl
  \ ld a,l
  \ and %00111000
  CB c, 3F c, CB c, 3F c, CB c, 3F c, pusha jp,  end-code ?)
  \ srl a
  \ srl a
  \ srl a
  \ jp push_a

  \ doc{
  \
  \ attr>paper  ( b1 -- b2 )
  \
  \ Convert paper attribute _b1_ to actual paper color number
  \ _b2_.
  \
  \ This word is written in Z80. The equivalent code in Forth
  \ is the following:
  \
  \ ----
  \ : attr>paper  ( b1 -- b2 )  %00111000 and 3 rshift  ;
  \ ----
  \
  \ }doc

[unneeded] paper>attr ?(

code paper>attr  ( b1 -- b2 )
  E1 c, 78 05 + c, E6 c, %00000111 c,
  \ pop hl
  \ ld a,l
  \ and %00000111
  CB c, 27 c, CB c, 27 c, CB c, 27 c, pusha jp,  end-code ?)
  \ sla a
  \ sla a
  \ sla a
  \ jp push_a

  \ doc{
  \
  \ paper>attr  ( b1 -- b2 )
  \
  \ Convert paper color _b1_ (only bits 0..2 are used) to paper
  \ attribute _b2_.
  \
  \ This word is written in Z80. The equivalent code in Forth
  \ is the following:
  \
  \ ----
  \ : paper>attr  ( b1 -- b2 )  %00000111 and 3 lshift  ;
  \ ----
  \
  \ }doc

( get-paper set-paper get-ink set-ink )

need ?(

[unneeded] get-paper ?(  need attr@  need attr>paper

: get-paper  ( -- b )  attr@ attr>paper  ; ?)

[unneeded] set-paper ?(

need paper>attr  need attr@  need attr!

: set-paper  ( b -- )
  paper>attr attr@ %11000111 and or attr!  ; ?)

[unneeded] get-ink ?(  need attr@

: get-ink  ( -- b )  attr@ %00000111 and  ; ?)

[unneeded] set-ink ?(  need attr@  need attr!

: set-ink  ( b -- )
  %00000111 and attr@ %11111000 and or attr!  ; ?)

( get-bright set-bright set-flash get-flash )

need ?(

[unneeded] get-bright ?(  need attr@

: get-bright  ( -- f )  attr@ %01000000 and 0=  ; ?)

[unneeded] set-bright ?(  need attr@  need attr!

: set-bright  ( f -- )
  %01000000 and attr@ %10111111 and or attr!  ; ?)

[unneeded] get-flash ?(  need attr@

: get-flash  ( -- f )  attr@ %10000000 and 0=  ; ?)

[unneeded] set-flash ?(  need attr@  need attr!

: set-flash  ( f -- )
  %10000000 and attr@ %01111111 and or attr!  ; ?)

( inverse-on inverse-off inverse )

need ?(

[unneeded] inverse-on ?(

code inverse-on  ( f -- )
  FD c, CB c, 57 c, C6 08 02 * + c,  jpnext,  end-code ?)
    \ set 2,(iy+sys_p_flag_offset) ; temporary inverse flag
    \ _jp_next

  \ doc{
  \
  \ inverse-on  ( f -- )
  \
  \ Turn the temporary inverse printing mode on.
  \
  \ See: `inverse-off`, `inverse`.
  \
  \ }doc

[unneeded] inverse-off ?(

code inverse-off  ( -- )
  FD c, CB c, 57 c, 86 08 02 * + c,  jpnext,  end-code ?)
    \ res 2,(iy+sys_p_flag_offset) ; temporary inverse flag
    \ _jp_next

  \ doc{
  \
  \ inverse-off  ( -- )
  \
  \ Turn the temporary inverse printing mode off.
  \
  \ See: `inverse-on`, `inverse`.
  \
  \ }doc

[unneeded] inverse ?(  need inverse-off  need inverse-on

code inverse  ( f -- )
  E1 c, 78 04 + c, B0 05 + c,
    \ pop hl
    \ ld a,h
    \ or l
  CA c, ' inverse-off , ' inverse-on jp,  end-code ?)
    \ jp z,inverse_off_
    \ jp inverse_on_

  \ doc{
  \
  \ inverse  ( f -- )
  \
  \ If _f_ is zero, turn the temporary inverse printing mode
  \ off; else turn it on.
  \
  \ See: `inverse-off`, `inverse-on`, `overprint`.
  \
  \ }doc

( overprint-on overprint-off overprint )

need ?(

[unneeded] overprint-on ?(

code overprint-on  ( -- )
  FD c, CB c, 57 c, C6 08 00 * + c,  jpnext,  end-code ?)
    \ set 0,(iy+sys_p_flag_offset) ; temporary overprint flag

  \ doc{
  \
  \ overprint-on  ( -- )
  \
  \ Turn the temporary overprint mode on.
  \
  \ See: `overprint-off`, `overprint`.
  \
  \ }doc

[unneeded] overprint-off ?(

code overprint-off  ( -- )
  FD c, CB c, 57 c, 86 08 00 * + c,  jpnext,  end-code ?)
    \ res 0,(iy+sys_p_flag_offset) ; temporary overprint flag
    \ _jp_next

  \ doc{
  \
  \ overprint-off  ( -- )
  \
  \ Turn the temporary overprint mode off.
  \
  \ See: `overprint-on`, `overprint`.
  \
  \ }doc

[unneeded] overprint ?(  need overprint-on  need overprint-off

code overprint  ( f -- )
  E1 c, 78 04 + c, B0 05 + c,
    \ pop hl
    \ ld a,h
    \ or l
  CA c, ' overprint-off , ' overprint-on jp,  end-code ?)
    \ jp z,overprint_off_
    \ jp plus_inverse_

  \ doc{
  \
  \ overprint  ( f -- )
  \
  \ If _f_ is zero, turn the temporary overprint mode off; else
  \ turn it on.
  \
  \ See: `overprint-on`, `overprint-off`, `inverse`.
  \
  \ }doc

( paper. ink. (0-9-color. flash. bright. (0-1-8-color. )

need ?(

[unneeded] paper. ?(  need (0-9-color.

code paper.  ( b -- )  3E c, 11 c, (0-9-color. jp,  end-code ?)
  \ ld a,paper_control_char
  \ jp print_0_9_color

  \ doc{
  \
  \ paper.  ( b -- )
  \
  \ Set paper color to _b_ (0..9), by printing the
  \ corresponding control characters.  If _b_ is greater than
  \ 9, 9 is used instead.
  \
  \ This word is much slower than `set-paper` or `attr!`, but
  \ it can handle pseudo-colors 8 (transparent) and 9
  \ (contrast), setting the correspondent system variables and
  \ flags accordingly.
  \
  \ See: `set-paper`, `attr!`, `ink.`, `(0-9-color.`.
  \
  \ }doc

[unneeded] ink. ?(  need (0-9-color.

code ink.  ( b -- )  3E c, 10 c, (0-9-color. jp,  end-code ?)
  \ ld a,ink_control_char
  \ jp print_0_9_color

  \ doc{
  \
  \ ink.  ( b -- )
  \
  \ Set ink color to _b_ (0..9), by printing the corresponding
  \ control characters.  If _b_ is greater than 9, 9 is used
  \ instead.
  \
  \ This word is much slower than `set-ink` or `attr!`, but it
  \ can handle pseudo-colors 8 (transparent) and 9 (contrast),
  \ setting the correspondent system variables and flags
  \ accordingly.
  \
  \ See: `set-ink`, `attr!`, `paper.`, `(0-9-color.`.
  \
  \ }doc

[unneeded] (0-9-color. ?(  need assembler

create (0-9-color.  ( -- a )  asm

  prt, h pop, l a ld, 0A cp#, nc? rif  09 a ld#,  rthen prt,

  \   rst $10 ; print the control char in A
  \   pop hl
  \   ld a,l ; A = color
  \   cp $0A ; value is 0..9?
  \   jr c,print_0_9_attribute.valid
  \   ld a,$09
  \ print_0_9_attribute.valid:
  \   ; A = color 0..9
  \   rst $10 ; print the attribute value in A (0..9)
  jpnext, end-asm ?)
  \   _jp_next

  \ doc{
  \
  \ (0-9-color.  ( -- a )
  \
  \ Return the address _a_ of a routine used by `paper.` and
  \ `ink.`.  This routine prints a color attribute in the range
  \ 0..9.

  \ Input:
  \ - A = attribute control char ($10 for ink, $11 for paper)
  \ - TOS = attribute value (0..9)

  \ Note: If TOS is greater than 9, 9 is used instead.

  \ See: `paper.`, `ink.`.
  \
  \ }doc

[unneeded] flash.

?\ need (0-1-8-color.  : flash.  ( n -- )  18 (0-1-8-color.   ;

  \ doc{
  \
  \ flash.  ( n -- )
  \
  \ Set flash _n_ by printing the corresponding control
  \ characters.  If _n_ is zero, turn flash off; if _n_ is one,
  \ turn it on; if _n_ is eight, set transparent flash. Other
  \ turn it on; if _n_ is eight, set transparent bright. Other
  \ values of _n_ are converted as follows:

  \ - 2, 4 and 6 are converted to 0.
  \ - 3, 5 and 7 are converted to 1.
  \ - Values greater than 8 or less than 0 are converted to 8.

  \
  \ This word is much slower than `set-flash` or `attr!`, but
  \ it can handle pseudo-color 8 (transparent).
  \
  \ See: `set-flash`, `attr!`, `bright.`, `(0-1-8-color.`.
  \
  \ }doc

[unneeded] bright.

?\ need (0-1-8-color.  : bright.  ( n -- )  19 (0-1-8-color.  ;

  \ doc{
  \
  \ bright.  ( n -- )
  \
  \ Set bright _n_ by printing the corresponding control
  \ characters.  If _n_ is zero, turn bright off; if _n_ is one,
  \ turn it on; if _n_ is eight, set transparent bright. Other
  \ values of _n_ are converted as follows:

  \ - 2, 4 and 6 are converted to 0.
  \ - 3, 5 and 7 are converted to 1.
  \ - Values greater than 8 or less than 0 are converted to 8.

  \ This word is much slower than `set-bright` or `attr!`, but
  \ it can handle pseudo-color 8 (transparent).
  \
  \ See: `set-bright`, `attr!`, `flash.`, `(0-1-8-color.`.
  \
  \ }doc

[unneeded] (0-1-8-color.

?\ : (0-1-8-color.  ( n c -- )  emit %1001 and 8 min emit  ;

  \ doc{
  \
  \ (0-1-8-color.  ( n c -- )
  \
  \ Print control character _c_. Then convert _n_ to the set 0,
  \ 1 and 8 and print it as a character. The conversion of _n_
  \ is done as follows:

  \ - 0, 1 and 8 are not changed.
  \ - 2, 4 and 6 are converted to 0.
  \ - 3, 5 and 7 are converted to 1.
  \ - Values greater than 8 or less than 0 are converted to 8.

  \ This word is a factor of `flash.` and `bright.`.
  \
  \ See: `flash.`, `bright.`.
  \
  \ }doc

  \ vim: filetype=soloforth
