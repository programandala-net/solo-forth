  \ graphics.g-emit.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201604231907

  \ -----------------------------------------------------------
  \ Description

  \ Words to print characters at high resolution coordinates.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2015-09-03: First version.

  \ 2016-04-23: Rename "hires-" prefix to "g-". Rename
  \ `g-emit-udg` to `g-emit-0udg`, because zero-index is used,
  \ instead of the default UDG char codes 128..255. Add
  \ `g-emit-udg` for codes 128..255. Improve documentation.
  \ First versions of `g-emitted` and `g-cr`.

( g-emit g-type )


  \ XXX TODO -- `g-emit` use the current coordinates

need z80-asm  need g-emit-routine  need g-emit-udg
need os-chars  need os-coords  need g-emitted

code (g-emit)  ( c -- )

  hl pop  l a ld
  bc push
  os-coords bc ftp
  os-chars de ftp
  g-emit-routine call
  bc pop  next ix ldp#  jpnext
  end-code

  \ doc{
  \
  \ g-emit  ( c -- )
  \
  \ Display character _c_ (32..127) at the current graphic
  \ coordinates.
  \
  \ The character is printed with overprinting (equivalent to `1
  \ overprint`).
  \
  \ }doc

: g-emit  ( c -- )
  dup 127 > if  g-emit-udg  else  (g-emit)  then
  g-emitted  ;

  \ XXX TODO -- update the coordinates

  \ doc{
  \
  \ g-emit  ( gx gy c -- )
  \
  \ Display character _c_ (32..255) at the current graphic
  \ coordinates.  If _c_ is 32..127, it is printed from the
  \ main font.  If _c_ is 128..255, it is printed from the UDG
  \ font.
  \
  \ The character is printed with overprinting (equivalent to `1
  \ overprint`).
  \
  \ }doc

: g-type  ( ca len -- )
  bounds ?do  i c@ g-emit  loop  drop  ;

  \ doc{
  \
  \ g-type  ( ca len -- )
  \
  \ If _len_ is greater than zero, display the character string
  \ _ca len_ at the current graphic coordinates.
  \
  \ }doc

( g-cr g-emitted )

  \ XXX UNDER DEVELOPMENT

need g-x  need g-y
need g-at-x  need g-at-y
need c+!  need c-!

: g-cr  ( -- )
  0 g-at-x  8 (g-y) c-!  g-y 6 > ?exit  191 g-at-y  ;

  \ Move the graphic coordinates to the next printing
  \ position.

: g-emitted  ( -- )
  8 (g-x) c+!  g-x [ 255 6 - ] literal < ?exit  g-cr  ;

  \ Update the current graphic coordinates after printing a
  \ character at them. See `g-emit`, `g-cr`.

( g-emit-0udg )

need z80-asm  need g-emit-routine  need os-udg  need os-coords

code g-emit-0udg  ( gx gy b -- )

  hl pop  l a ld
  bc push
  os-coords bc ftp
  os-udg de ftp
  g-emit-routine call
  bc pop  next ix ldp#  jpnext
  end-code

  \ doc{
  \
  \ g-emit-0udg  ( gx gy b -- )
  \
  \ Display UDG _b_ (0..255) at the current graphic
  \ coordinates, from the font pointed by system variable
  \ `os-udg`, which contains the address of the first UDG
  \ bitmap (0).
  \
  \ The UDG character is printed with overprinting (equivalent
  \ to `1 overprint`).
  \
  \ }doc

( g-emit-udg )

need z80-asm  need g-emit-routine  need os-udg  need os-coords

code g-emit-udg  ( c -- )

  hl pop  l a ld  80 sub#
  bc push
  os-coords bc ftp
  os-udg de ftp
  g-emit-routine call
  bc pop  next ix ldp#  jpnext
  end-code

  \ doc{
  \
  \ g-emit-udg  ( gx gy c -- )
  \
  \ Display UDG _c_ (127..255) at the current graphic
  \ coordinates, from the font pointed by system variable
  \ `os-udg`, which contains the address of the first UDG
  \ bitmap (127).
  \
  \ The UDG character is printed with overprinting (equivalent
  \ to `1 overprint`).
  \
  \ }doc

( g-emit-routine )

need z80-asm  need (pixel-addr)

  \ Credit:
  \
  \ Code Adapted from "Smooth Move",
  \ written by Simon N. Goodwin,
  \ published on Todospectrum, issue 2 (1984-10), page 16.
  \ http://microhobby.speccy.cz/zxsf/revistas-ts.htm

create g-emit-routine  ( -- a )

  asm

  0 h ld#  a l ld  hl addp  hl addp  hl addp  de addp
  hl push  ix pop  bc hl ldp  hl push  8 c ld#

  begin

    hl pop  h dec  hl push  h inc
      \ next line

    bc push  hl bc ldp  (pixel-addr) call  bc pop
      \ convert the coords H (x) and L (y) to an address in HL
      \ and a bit in A

    a b ld  a xor  b or  0 ix a ftx
    nz if   exde  0 h ld#  a l ld  8 a ld#  b sub  a b ld
            begin  hl addp  step  exde
            m a ld  d xor  a m ld
            hl incp  e a ld  then

    m xor  a m ld  ix incp  c dec
      \ next char scan, one screen line less

  z until  hl pop  ret  end-asm

  \ doc{
  \
  \ g-emit-routine  ( -- a )
  \
  \ Address of a machine code routine that prints an 8x8 bits
  \ charater at graphic coordinates. Used by `g-emit-udg`
  \ and `g-emit-0udg`.
  \
  \ Input registers:
  \
  \ - DE = address of the first char (0) bitmap in a charset
  \ - A = char code (0..255)
  \ - B = y coordinate
  \ - C = x coordinate
  \
  \ Modifies: AF BC HL IX DE
  \
  \ }doc

  \ vim: filetype=soloforth
