  \ data.misc.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201611171540

  \ -----------------------------------------------------------
  \ Description

  \ Misc words related to data structures.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2015-11-15: Add `link@` and `link,`.
  \
  \ 2016-04-28: Rename `set` to `storer` and improve it. Add
  \ `cstorer`.
  \
  \ 2016-05-02: Join two blocks to save space.
  \
  \ 2016-05-10: Add `2storer`.
  \
  \ 2016-11-17: Add `const`, `cconst`, `2const`.
  \
  \ 2016-11-25: Move `storer`, `cstorer` and `2storer` to its
  \ own module <data.storer.fsb>.

( buffer: cvariable enum link@ link, )

[unneeded] buffer:
?\ : buffer:  ( len "name" -- )  create allot  ;  exit

[unneeded] cvariable
?\ : cvariable  ( "name"  -- )  create 1 allot  ;  exit

[unneeded] enum
?\ : enum  (  n "name" -- n+1 )  dup constant 1+  ;  exit

[unneeded] link@  [unneeded] link, and ?exit

  \ Credit:
  \
  \ Code of `link@` and `link,` written after the description
  \ by Rick VanNorman, published on Forth Dimensions (volume
  \ 20, number 3, pages 19-22, 1998-09).

defer link@  ( node1 -- node2 )  ' @ ' link@ defer!
  \ Fetch the linked list node _node_ is pointing to.

: link,  ( node -- )  here over @ , swap !  ;
  \ Create a new linked list node, pointing to _node_.

( const cconst 2const )

  \ Definers of so called "fast constants", which work like
  \ ordinary constants, except their value is compiled as a
  \ literal. A literal is placed on the stack faster than a
  \ constant.
  \
  \ Credit:
  \
  \ Words inspired by IsForth's `const`.

need ?(

[unneeded] const ?(

: const  ( x "name" -- )
  create immediate ,
  does>  @ executing? ?exit  postpone literal  ; exit ?)

  \ doc{
  \
  \ const  ( x "name" -- )
  \
  \ Create a fast constant for "name", with value _x_.
  \
  \ A fast constant works like an ordinary constant, except its
  \ value is compiled as a literal.
  \
  \ See: `constant`, `cconst`, `2const`.
  \
  \ Origin: IsForth.
  \
  \ }doc

[unneeded] cconst ?(

: cconst  ( c "name" -- )
  create immediate c,
  does>  c@ executing? ?exit  postpone cliteral  ; exit ?)

  \ doc{
  \
  \ cconst  ( c "name" -- )
  \
  \ Create a character fast constant for "name", with value
  \ _c_.
  \
  \ A fast constant works like an ordinary constant, except its
  \ value is compiled as a literal.
  \
  \ See: `cconstant`, `const`, `2const`.
  \
  \ Origin: IsForth's `const`.
  \
  \ }doc

[unneeded] 2const ?(

: 2const  ( xd "name" -- )
  create immediate 2,
  does>  2@ executing? ?exit  postpone 2literal  ; exit ?)

  \ doc{
  \
  \ 2const  ( xd "name" -- )
  \
  \ Create a double fast constant for "name", with value
  \ _xd_.
  \
  \ A fast constant works like an ordinary constant, except its
  \ value is compiled as a literal.
  \
  \ See: `2constant`, `const`, `cconst`.
  \
  \ Origin: IsForth's `const`.
  \
  \ }doc

  \ vim: filetype=soloforth
