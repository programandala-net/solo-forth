  \ compilation.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html
  \ 
  \ This file contains words related to compilation.
  \
  \ Copyright (C) 2015,2016 Marcos Cruz (programandala.net)

  \ -------------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain all copyright notices, all credit notices, and this
  \ license in all files of all redistributed copies and derived
  \ works. There is no warranty.

( [false] [true] )

         0 constant [false] immediate
[false] 0= constant [true]  immediate

( [if] [else] [then] )

need s=

: [else]  ( "..." -- )

  \ 1 begin   parse-name 2dup swap c@ and \ XXX OLD
  1 begin   parse-name dup
    while   2dup s" [if]" s=
            if    2drop 1+
            else  2dup s" [else]" s=
                  if    2drop 1- dup if  1+  then
                  else  s" [then]" s= if  1-  then
                  then
            then  ?dup 0= if  exit  then
  repeat  2drop drop  ; immediate

: [if]  ( "..." -- )  0= if postpone [else] then  ; immediate

: [then]  ( -- )  ; immediate

( body>name name>body link>name name>link >>link name<name )

[unneeded] body>name
?\ : body>name  ( pfa -- nt ) body> >name  ;

[unneeded] name>body
?\ : name>body  ( nt -- pfa ) name> >body  ;

[unneeded] link>name dup  ?\ need alias
?\ ' cell+ alias link>name  ( nt -- pfa )

[unneeded] name>link dup  ?\ need alias
?\ ' cell- alias name>link  ( nt -- pfa )

[unneeded] >>link dup  ?\ need alias
?\ ' cell+ alias >>link  ( xtp -- lfa )

[unneeded] name<name dup  ?\ need name>link
?\ : name<name  ( nt1 -- nt2 )  name>link @s  ;
  \ Get the previous _nt2_ from _nt1_.

( name>interpret name>compile )

  \ XXX UNDER DEVELOPMENT

: name>interpret  ( nt -- xt | 0 )
  ;

  \ doc{
  \
  \ name>interpret  ( nt -- xt | 0 )
  \
  \ Return a _xt_ that represents the interpretation semantics
  \ of the word _nt_. If _nt_ has no interpretation
  \ semantics, return zero.
  \
  \ Origin: Forth-2012 (TOOLS EXT).
  \
  \ }doc

: name>compile  ( nt -- x xt )
  ;

  \ doc{
  \
  \ name>compile  ( nt -- x xt )
  \
  \ Return _x xt_ that represents the compilation semantics
  \ of the word _nt_. The  returned _xt_ has the stack
  \ effect ( i*x  x -- j*x  ).  Executing _xt_ consumes
  \ _x_ and performs the compilation semantics of the word
  \ represented by _nt_.
  \
  \ Origin: Forth-2012 (TOOLS EXT).
  \
  \ }doc

( smudge smudged )

need c!toggle-bits

: smudged  ( nt -- )
  smudge-mask swap system-bank c!toggle-bits default-bank  ;

  \ doc{
  \
  \ smudged  ( nt -- )
  \
  \ Toggle the "smudge bit" of the given _nt_.
  \
  \ This word is obsolete. `hided` and `revealed` are used
  \ instead.
  \
  \ }doc

 : smudge  ( -- )  latest smudged  ;

  \ doc{
  \
  \ smudge  ( -- )
  \
  \ Toggle the "smudge bit" of the latest definition's name
  \ field.  This prevents an uncompleted definition from being
  \ found during dictionary searches, until compiling is
  \ completed without error.
  \
  \ This word is obsolete. `hide` and `reveal` are used
  \ instead.
  \
  \ Origin: fig-Forth.
  \
  \ }doc

( ?pairs )

: ?pairs  ( x1 x2 -- )  <> #-22 ?throw  ;
  \ If _x1_ not equals _x2_ throw an error -22 (control
  \ structure mismatch).

( save-here restore-here )

variable here-backup
: save-here  ( -- )  here here-backup !  ;
: restore-here  ( -- )  here-backup there  ;

( privatize )

  \ Usage example:
  \
  \ ----
  \ private{
  \
  \ : hello  ( -- )  ." hello"  ;
  \
  \ }private
  \
  \ : salute  ( -- )  hello  ;
  \
  \ privatize
  \
  \ salute  \ ok!
  \ hello   \ error!
  \ ----

  \ Credits:
  \
  \ The idea for this code was taken from an article by Deway
  \ Val Schorre, _Structured programming by adding modules to
  \ FORTH_, published on Forth Dimensions 2/5 page 132
  \ (1981-01). The following original code is for fig-Forth.
  \ I added stack effects and comments:

  \ : INTERNAL  ( -- nt )  CURRENT @ @  ;
  \   \ Start the definition of internal words of the module.
  \   \ Return the nt of the latest word created in the
  \   \ `current` vocabulary.
  \
  \ : EXTERNAL  ( -- nt )  HERE  ;
  \   \ Start the definition of external words of the module.
  \   \ Return the nt of the next word to be defined.
  \
  \ : MODULE  ( nt1 nt2 -- )  PFA LFA !  ;
  \   \ End the module.
  \   \ Link the first external word to the word before the
  \   \ first internal word, thus making the internal words
  \   \ invisible.

  \ The names have been changed after an analogous code from
  \ pForth, for clarity.

need >>link

: private{  ( -- nt )  latest  ;
  \ Start private definitions.
  \ Return the nt of the latest word created in the
  \ `current` vocabulary.

: }private  ( -- xtp )  np@  ;
  \ End private definitions.
  \ Return the xtp (execution token pointer) of the first
  \ word to be defined as public, that is, the current value
  \ of the names pointer.

: privatize  ( nt xtp -- )  >>link !s  ;
  \ Hide all words between `private{` and `}private`:
  \ Link the first public word to the word before the
  \ first private word, thus making the private words
  \ invisible.

( privatize )

  \ Credits:
  \
  \ Code adapted from pForth.

  \ ____
  \
  \ @(#) private.fth 98/01/26 1.2
  \ PRIVATIZE
  \
  \ Privatize words that are only needed within the file
  \ and do not need to be exported.

  \ Usage example:
  \
  \    private{
  \    \ everything between private{ and }private
  \    \ will become private.
  \    : foo ;
  \    : moo ;
  \    }private
  \    : goo   foo moo ;  \ can use foo and moo
  \    privatize          \ hide foo and moo
  \    ' foo              \ will fail

  \ Copyright 1996 Phil Burk
  \ ____

need name<name  need abort"

variable private-start  variable private-stop

: private{  ( -- )
  latest private-start !  private-stop off  ;
  \ Start private definitions.

: }private  ( -- )
  private-stop @ abort" Extra }private"
  latest private-stop !  ;
  \ End private definitions.

: privatize  ( -- )
  private-start @ 0= abort" Missing private{"
  private-stop @ dup 0= abort" Missing }private"
  begin   dup private-start @ u>
  while   dup hide name<name
  repeat  drop  private-start off  private-stop off  ;
  \ Hide all words between `private{` and `}private`.

( begin-module: begin-module public private end-module )

  \ Credits:
  \
  \ Code adapted and modified from Galope.

need get-order  need wordlist

  \ Inner words

get-order get-current

wordlist dup set-current  >order

variable current-wid  variable module-wid

: (module)  ( -- wid )
  get-current current-wid !
  wordlist dup module-wid ! dup >order  ;

set-current

  \ Interface words

: public  ( -- )  current-wid @ set-current  ;
  \ Public definitions follow.

: private  ( -- )  module-wid @ set-current  ;
  \ Private definitions follow.

: begin-module:  ( "name" -- )  (module) constant private  ;
  \ Start a named module.
  \ Private definitions follow.

: begin-module  ( -- )  (module) drop private  ;
  \ Start an anonymous module.
  \ Private definitions follow.

: end-module  ( -- )  public previous  ;
  \ End a module.

set-order

  \ Description and usage.

  \ Modules hide the internal implementation and leave visible the
  \ words of the outer interface. Example:

  \ begin-module: my_module
  \   \ Inner/helper words.
  \ public
  \   \ Interface words,
  \   \ compiled in the outer vocabulary,
  \   \ thus seen from the extern.
  \ private
  \   \ Inner/helper words again.
  \ public
  \   \ Interface words again. And so on.
  \ end-module

  \ As an alternative, the word 'begin-module' starts an unnamed module.

( transient[ )

  \ XXX TODO -- Finish.

need >>link

variable old-dp
variable old-np
variable old-latest
variable old-voc-link

: transient[  ( u -- )

  \ Start transient code, reserving u bytes for it (including
  \ dictionary space and data stack).
  \
  \ This word must be used before compiling the transient code.
  \ the compiled size of the transient code must be known in
  \ advance.

  here        old-dp !
  np@         old-np !
  latest      old-latest !
  voc-link @  old-voc-link !

  \ XXX FIXME -- after changing `dp` the interpreter does not
  \ recognize any input, just issues error #1, "not
  \ understood".

  0 swap - there  ;

: ]transient  ( -- )  old-dp @ there  old-np @ np !  ;

  \ End the transient code.
  \
  \ This word must be used after compiling the transient code.

: -transient  ( -- )

  \ Remove the transient code, unlinking the dictionary space
  \ that was reserved for it.
  \
  \ This word must be used when the transient code is not going
  \ to be used any more.

  old-voc-link @ voc-link !

  \ Store the nt of the latest word created before compiling
  \ the transient code, into the lfa of the first word created
  \ after the transient code was finished by `]transient`.

  \ XXX TODO

  old-latest @ old-np @ >>link !s  ;

  \ vim: filetype=soloforth
