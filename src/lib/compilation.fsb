  \ compilation.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201604242056

  \ -----------------------------------------------------------
  \ Description

  \ Words related to compilation.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2015-06-04: Add `[if] [else] [then]`, adapted from Afera.
  \ 2015-06-17: Add `[true]`, `[false]`.
  \ 2015-06-25: Finish `[if] [else] [then]`.
  \ 2015-10-22: Rename words that convert header addresses.
  \ 2015-10-24: Move `body>name`, `name>link`, `link>name` and
  \ `>>link` from the kernel.
  \ 2015-10-29: Move `smudge` and `smudged` from the kernel.
  \ 2015-11-13: Move `?pairs` from the kernel.
  \ 2016-03-19: Add `save-here` and `restore-here`.
  \ 2016-04-17: Add `name>>`.
  \ 2016-04-24: Add `]l`, `]2l`, `exec`, `eval`.
  \ 2016-04-24: Add `[const]`, `[2const]`, `[cconst]`.
  \ 2016-04-24: Move `cliteral` from the kernel.

( [false] [true] )

         0 constant [false] immediate
[false] 0= constant [true]  immediate

( [if] [else] [then] )

need s=

: [else]  ( "..." -- )

  1 begin   parse-name dup
    while   2dup s" [if]" s=
            if    2drop 1+
            else  2dup s" [else]" s=
                  if    2drop 1- dup if  1+  then
                  else  s" [then]" s= if  1-  then
                  then
            then  ?dup 0= if  exit  then
  repeat  2drop drop  ; immediate

: [if]  ( "..." -- )  0= if postpone [else] then  ; immediate

: [then]  ( -- )  ; immediate

( body>name name>body link>name name>link name<name )

[unneeded] body>name
?\ : body>name  ( pfa -- nt ) body> >name  ;

[unneeded] name>body
?\ : name>body  ( nt -- pfa ) name> >body  ;

[unneeded] link>name dup  ?\ need alias
?\ ' cell+ alias link>name  ( nt -- pfa )

[unneeded] name>link dup  ?\ need alias
?\ ' cell- alias name>link  ( nt -- pfa )

[unneeded] name<name dup  ?\ need name>link
?\ : name<name  ( nt1 -- nt2 )  name>link @s  ;
  \ Get the previous _nt2_ from _nt1_.

( >>link name>> )

[unneeded] >>link dup  ?\ need alias
?\ ' cell+ alias >>link  ( xtp -- lfa )

[unneeded] name>>
?\ : name>>  ( nt -- xtp )  [ 2 cells ] literal -  ;

( name>interpret name>compile )

  \ XXX UNDER DEVELOPMENT

: name>interpret  ( nt -- xt | 0 )
  ;

  \ doc{
  \
  \ name>interpret  ( nt -- xt | 0 )
  \
  \ Return a _xt_ that represents the interpretation semantics
  \ of the word _nt_. If _nt_ has no interpretation
  \ semantics, return zero.
  \
  \ Origin: Forth-2012 (TOOLS EXT).
  \
  \ }doc

: name>compile  ( nt -- x xt )
  ;

  \ doc{
  \
  \ name>compile  ( nt -- x xt )
  \
  \ Return _x xt_ that represents the compilation semantics
  \ of the word _nt_. The  returned _xt_ has the stack
  \ effect ( i*x  x -- j*x  ).  Executing _xt_ consumes
  \ _x_ and performs the compilation semantics of the word
  \ represented by _nt_.
  \
  \ Origin: Forth-2012 (TOOLS EXT).
  \
  \ }doc

( smudge smudged )

need c!toggle-bits

: smudged  ( nt -- )
  smudge-mask swap system-bank c!toggle-bits default-bank  ;

  \ doc{
  \
  \ smudged  ( nt -- )
  \
  \ Toggle the "smudge bit" of the given _nt_.
  \
  \ This word is obsolete. `hided` and `revealed` are used
  \ instead.
  \
  \ }doc

 : smudge  ( -- )  latest smudged  ;

  \ doc{
  \
  \ smudge  ( -- )
  \
  \ Toggle the "smudge bit" of the latest definition's name
  \ field.  This prevents an uncompleted definition from being
  \ found during dictionary searches, until compiling is
  \ completed without error.
  \
  \ This word is obsolete. `hide` and `reveal` are used
  \ instead.
  \
  \ Origin: fig-Forth.
  \
  \ }doc

( ?pairs )

: ?pairs  ( x1 x2 -- )  <> #-22 ?throw  ;
  \ If _x1_ not equals _x2_ throw an error -22 (control
  \ structure mismatch).

( save-here restore-here )

variable here-backup
: save-here  ( -- )  here here-backup !  ;
: restore-here  ( -- )  here-backup there  ;

  \ XXX TODO -- behead `here-backup`

( ]l ]2l exec eval )

need [if]

[needed] ]l [if]

: ]l  ( x -- )  ] postpone literal  ; immediate compile-only

  \ doc{
  \
  \ ]l  ( x -- )
  \
  \ A short form of the idiom `] literal`.
  \
  \ }doc

[then]

[needed] ]2l [if]

: ]2l  ( xd -- )  ] postpone 2literal  ; immediate compile-only

  \ doc{
  \
  \ ]2l  ( xd -- )
  \
  \ A short form of the idiom `] 2literal`.
  \
  \ }doc

[then]

[needed] exec [if]

: exec  ( "name" -- i*x )
  parse-name find-name ?dup 0= #-13 ?throw  name> execute  ;

  \ doc{
  \
  \ exec  ( "name" -- i*x )
  \
  \ Parse, find and execute "name".
  \
  \ }doc

[then]

[needed] eval [if]

: eval  ( i*x "name" -- j*x )  parse-name evaluate  ;

  \ doc{
  \
  \ exec  ( i*x "name" -- j*x )
  \
  \ Parse and evaluate "name".
  \ 
  \ This is a common factor of `[const]`, `[2const]` and
  \ `[cconst]`.
  \
  \ }doc

[then]

( [const] [2const] [cconst] )

need eval  need [if]

[needed] [const] [if]

: [const]  ( "name" -- )
  eval postpone literal  ; immediate compile-only

  \ doc{
  \
  \ [const]  ( "name" -- )
  \
  \ Evaluate "name". Then compile the single-cell value left on
  \ the stack.
  \
  \ This word is intented to compile constants as literals, in
  \ order to gain execution speed.
  \
  \ Usage example:
  \ 
  \ ----
  \ 48 constant zx
  \ : test  ( -- )  [const] zx .  ;
  \ ----
  \
  \ }doc

[then]

[needed] [2const] [if]

: [2const]  ( "name" -- )
  eval postpone 2literal  ; immediate compile-only

  \ doc{
  \
  \ [2const]  ( "name" -- )
  \
  \ Evaluate "name". Then compile the double-cell value left on
  \ the stack.
  \
  \ This word is intented to compile double-cell constants as
  \ literals, in order to gain execution speed.
  \
  \ Usage example:
  \ 
  \ ----
  \ 48. 2constant zx
  \ : test  ( -- )  [2const] zx d.  ;
  \ ----
  \
  \ }doc

[then]

[needed] [cconst] [if]

: [cconst]  ( "name" -- )
  eval postpone cliteral  ; immediate compile-only

  \ doc{
  \
  \ [cconst]  ( "name" -- )
  \
  \ Evaluate "name". Then compile the char left
  \ on the stack.
  \
  \ This word is intented to compile char constants as literals, in
  \ order to gain execution speed.
  \
  \ Usage example:
  \
  \ ----
  \ 48 cconstant zx
  \ : test  ( -- )  [cconst] zx emit  ;
  \ ----
  \
  \ }doc

[then]

( cliteral )

: cliteral  ( b -- )  compile clit c,  ; immediate compile-only

  \ doc{
  \
  \ cliteral  ( b -- )
  \
  \ Compile _b_ in the current definition.
  \
  \ This word does the same than `literal` but saves one byte
  \ of data space.
  \
  \ Origin: Comus.
  \
  \ }doc

  \ vim: filetype=soloforth
