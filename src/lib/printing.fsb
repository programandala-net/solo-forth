  \ printing.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html
  \ 
  \ This file contains words related to printing.
  \
  \ Copyright (C) 2015,2016 Marcos Cruz (programandala.net)

  \ -------------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain all copyright notices, all credit notices, and this
  \ license in all files of all redistributed copies and derived
  \ works. There is no warranty.

( tabulate tab-stop )

need column

  \ 2015-12-14
  \ XXX FIXME

variable tab-stop  8 tab-stop !

: tabulate  ( -- )  column 1+ tab-stop @ tuck mod - spaces  ;

( 'cr' 'tab' 'bs' crs tab tabs backspace backspaces )

 6 constant 'tab'
 8 constant 'bs'
13 constant 'cr'

: tab          ( -- )  'tab' emit  ;
: backspace    ( -- )  'bs'  emit  ;

: crs           ( n -- )  'cr'  emits  ;
: tabs          ( n -- )  'tab' emits  ;
: backspaces    ( n -- )  'bs'  emits  ;

( column last-column row last-row at-x at-y )

: column  ( -- col )  xy drop  ;
  \ Current column (x coordinate).

: last-column  ( -- row  )  column 1-  ;
  \ Last column (x coordinate).

: row  ( -- row )  xy nip  ;
  \ Current row (y coordinate).

: last-row  ( -- row  )  row 1-  ;
  \ Last row (y coordinate).

: at-x  ( col -- )  row at-xy  ;
  \ Set the cursor
  \ at the given column (x coordinate)
  \ and the current row (y coordinate).

: at-y  ( row -- )  column swap at-xy  ;
  \ Set the cursor
  \ at the current column (x coordinate)
  \ and the given row (y coordinate).

( ud.r ud. )

  \ Credits:
  \
  \ Code adapted from Spectrum Forth-83.

: ud.r  ( d n -- )  >r <# #s #> r> over - 0 max spaces type  ;

  \ : u.r  ( n1 n2 -- )  >r 0 r> ud.r  ;

: ud.  ( d -- )  0 ud.r space  ;

( print )

  \ XXX UNDER DEVELOPMENT
  \ Adapted from Galope <print.fs>.

need last-row  need /name

  \ export

variable #printed   \ Printed chars in the current line.
variable #indented   \ Indented chars in the current line.
: printed+  ( u -- )  #printed +!  ;
: indented+  ( u -- )  #indented +!  ;
: (.word) ( ca len -- )  dup printed+ type  ;
: .char  ( c -- )  emit 1 printed+  ;
: not-at-home?  ( -- f )  xy +  ;

  \ export

: no-printed  ( -- )  #printed off #indented off  ;
: print-home  ( -- )  home no-printed  ;
: print-page  ( -- )  page print-home  ;

-->

( print )

: print-start-of-line  ( -- )
  #printed @ trm+move-cursor-left no-printed  ;

  \ : print-cr  ( -- )  not-at-home? if  cr  then  no-printed  ;
  \ XXX OLD first version

  \ hide

: at-last-start-of-line?  ( -- wf )
  xy last-row = swap 0= and  ;
: not-at-start-of-line?  ( -- wf )  column 0<>  ;
: print-cr?  ( -- wf )
  not-at-home? not-at-start-of-line? and
  \ xxx fixme 2012-09-30 what this was for?:
  \ at-last-start-of-line? 0= or
  ;

  \ export

defer (print-cr) ' (print-cr) ' cr defer!

: print-cr print-cr? ?? (print-cr) no-printed ;

variable print-width

-->

( print )

  \ hide

: previous-word?  ( -- wf )  #printed @ #indented @ >  ;
: ?space  ( -- ) previous-word? if  bl .char  then  ;
: current-print-width  ( -- u )
  print-width @ ?dup 0= ?? cols  ;
: too-long?  ( u -- wf )
  1+ #printed @ + current-print-width >  ;
: .word  ( ca len -- )
  dup too-long? if  print-cr  else  ?space  then  (.word)  ;

-->

( print )

: (print-indentation)  ( u -- )
  dup trm+move-cursor-right dup indented+ printed+  ;

  \ export

: print-indentation  ( u -- )  ?dup ?? (print-indentation)  ;

  \ hide

: >word  ( ca1 len1 ca2 len2 -- ca2 len2 ca1 len4 )
  \ ca1 len1 = Text, from the start of its first word.
  \ ca2 len2 = Same text, from the char after its first word.
  \ ca1 len4 = First word of the text.
  tuck 2>r -  2r> 2swap  ;

: first-word  ( ca1 len1 -- ca2 len2 ca3 len3 )  /name >word  ;

: (print)  ( ca1 len1 -- ca2 len2 )  first-word .word  ;

-->

( print )

  \ export

: print  ( ca len --)
  begin  dup   while  (print)  repeat  2drop  ;

  \ Suggested usage in the application:

  \ 4 value indentation
  \ : paragraph  ( ca len -- )
  \   print-cr indentation print-indentation print  ;

  \ vim: filetype=soloforth
