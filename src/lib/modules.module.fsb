  \ modules.module.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201612071654

  \ -----------------------------------------------------------
  \ Description

  \ Implementation of VFX-like `module`.

  \ -----------------------------------------------------------
  \ Authors

  \ Ulrich Hoffmann (http://theforth.net/package/modules),
  \ 2015, 2016.

  \ Marcos Cruz (programandala.net) integrated the code into
  \ Solo Forth, 2016.

  \ -----------------------------------------------------------
  \ License

  \ The MIT License (MIT)

  \ Copyright (c) 2015-2016 Ulrich Hoffmann

  \ Permission is hereby granted, free of charge, to any person
  \ obtaining a copy of this software and associated
  \ documentation files (the "Software"), to deal in the
  \ Software without restriction, including without limitation
  \ the rights to use, copy, modify, merge, publish,
  \ distribute, sublicense, and/or sell copies of the Software,
  \ and to permit persons to whom the Software is furnished to
  \ do so, subject to the following conditions:

  \ The above copyright notice and this permission notice shall
  \ be included in all copies or substantial portions of the
  \ Software.

  \ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  \ KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  \ WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
  \ PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
  \ OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  \ OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  \ OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  \ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  \ -----------------------------------------------------------
  \ History

  \ 2016-12-07: Start. Copy the code and documentation of
  \ Modules 1.0.2 (http://theforth.net/package/modules) and
  \ modify the code style after the conventions used in Solo
  \ Forth.

( module end-module export expose-module )

: module  ( "name" -- old-current )
  get-current  wordlist create dup >r ,
  get-order r@ swap 1+ set-order
  r> set-current  ;

  \ doc{
  \
  \ module  ( "name" -- old-current )
  \
  \ Start the definition of a new module named _name_.
  \
  \ }doc

: export  ( "name" old-current -- old-currrent )
  >r  >in @  '  swap >in !  get-current  r@ set-current
  create swap , set-current r>
  does>  ( -- )  ( pfa ) @ execute  ;

  \ doc{
  \
  \ export  ( "name" old-current -- old-currrent )
  \
  \ Make the word named _name_ accessible outside the module
  \ currently defined.  After `end-module` this word is still
  \ available.
  \
  \ }doc

: expose-module  ( "name" -- )
  get-order  ' >body @  swap 1+ set-order  ;

  \ doc{
  \
  \ expose-module  ( "name" -- )
  \
  \ Make all internal words of the module named _name_
  \ available.
  \
  \ }doc

: end-module  ( old-current -- )
  set-current  get-order nip 1- set-order  ;

  \ doc{
  \
  \ end-module  ( old-current -- )
  \
  \ End a module definition. All module internal words are no
  \ longer accessible.  Only words that have been exported with
  \ `export` are still available.
  \
  \ }doc

  \ vim: filetype=soloforth
