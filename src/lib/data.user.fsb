  \ data.user.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201701191512

  \ -----------------------------------------------------------
  \ Description

  \ Words to use the user data space.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016, 2017.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2015-09: First draft.
  \
  \ 2016-04-21: New version, moved from the kernel.
  \
  \ 2016-11-18: Add conditional compilation. Improve
  \ documentation.
  \
  \ 2017-01-18: Remove `exit` at the end of conditional
  \ interpretation.
  \
  \ 2017-01-19: Remove remaining `exit` at the end of
  \ conditional interpretation.

( ucreate ?user uallot user 2user )

[unneeded] ucreate
?\ : ucreate  ( "name" -- )  udp @ (user)  ;

  \ doc{
  \
  \ ucreate  ( "name" -- )
  \
  \ Create a header _name_ which points to the first available
  \ offset within the user area.  Execution of _name_ leaves
  \ its absolute user area storage address. No user space is
  \ allocated.
  \
  \ See: `uallot`, `user`, `2user`, `?user`.
  \
  \ }doc

need ?(

[unneeded] ?user ?(
: ?user  ( -- )
  udp @ dup /user > #-279 ?throw  0< #-280 ?throw  ; ?)
  \ Error codes: #-279: user area overflow
  \              #-280: user area underflow

  \ doc{
  \
  \ ?user  ( -- )
  \
  \ Throw an exception if the user area pointer is out of
  \ bounds.
  \
  \ See: `ucreate`, `uallot`, `user`, `2user`.
  \
  \ }doc

[unneeded] uallot ?(  need ?user
: uallot  ( n -- )  udp +! ?user  ; ?)

  \ doc{
  \
  \ uallot  ( n -- )
  \
  \ If _n_ is greater than zero, reserve _n_ address units of
  \ user data space. If _n_ is less than zero, release _n_
  \ address units of user data space. If _n_ is zero, leave the
  \ user data-space pointer unchanged. An exception is thrown
  \ if the user-data pointer is out of bounds after the
  \ operation.
  \
  \ See: `ucreate`, `?user`, `user`, `2user`.
  \
  \ }doc

[unneeded] user ?(  need ucreate  need uallot
: user  ( "name" -- )  ucreate cell uallot  ; ?)

  \ doc{
  \
  \ user  ( n "name" -- )
  \
  \ Create a user variable _name_ in the first available offset
  \ within the user area.  Execution of _name_ leaves its
  \ absolute user area storage address.
  \
  \ See: `2user`, `ucreate`, `uallot`, `?user`.
  \
  \ }doc

[unneeded] 2user ?(  need ucreate  need uallot
: 2user  ( "name" -- )
  ucreate [ 2 cells ] literal uallot  ; ?)

  \ doc{
  \
  \ 2user  ( "name" -- )
  \
  \ Create a user double variable _name_ in the first available
  \ offset within the user area.  Execution of _name_ leaves
  \ its absolute user area storage address.
  \
  \ See: `user`, `ucreate`, `uallot`, `?user`.
  \
  \ }doc

  \ vim: filetype=soloforth
