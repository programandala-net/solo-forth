  \ data.associative-list.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201603241827

  \ -----------------------------------------------------------
  \ Description

  \ An associative list implemented with standard word lists.

  \ -----------------------------------------------------------
  \ Authors

  \ Wil Baden, published on: Forth Dimensions (volume 17,
  \ number 4, page 36, 1995-11).

  \ Adapted and modified by Marcos Cruz (programandala.net),
  \ 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Recent changes

  \ 2016-03-24: Comments.

( associative-list )


  \ XXX UNDER DEVELOPMENT
  \
  \ XXX REMARK -- the items of original version returned its
  \ pfa; this version was modified to return a counted string.
  \
  \ XXX TODO -- improve the code to define different types of
  \ items.

need words  need abort"

: associative-list  ( "name" -- )  wordlist constant  ;
  \ Create a new associative list "name".

: entry  ( ca len wid "name" -- )
  get-current >r set-current  create  s,  r> set-current
  does>  ( -- ca len )  ( pfa ) count  ;
  \ Create a new entry "name", with value _ca len_, in the
  \ associative list _wid_,

: item?  ( ca len wid -- 0 | xt )
  search-wordlist dup if  drop  then  ;
  \ Is _ca len_ an item of associative list _wid_?
  \ If so return its _xt_, else return zero.

: item  ( ca1 len1 wid -- ca2 len2 )
  item? dup 0= abort" Not an item." execute  ;
  \ Return value _ca2 len2_ of item _ca1 len1_ from associative
  \ list _wid_.
  \ XXX TODO -- use `throw` instead

: items  ( wid -- )  >order words previous  ;
  \ List items of associative list _wid_.

  \ vim: filetype=soloforth
