  \ data.associative-list.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201611262312

  \ -----------------------------------------------------------
  \ Description

  \ An associative list implemented with standard word lists.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ Credit

  \ Based on code written by Wil Baden, published in Forth
  \ Dimensions (volume 17, number 4, page 36, 1995-11).

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2015-11-06: Start, adapted from Wil Baden's code.
  \
  \ 2016-03-24: Comments.
  \
  \ 2016-04-15: Improved with different types of items.
  \ Factored. An obscure bug was discovered in during the
  \ changes.  Finally its origin was found in `(;code)`, in the
  \ kernel, and fixed.
  \
  \ 2016-11-26: Need `search-wordlist`, which has been moved to
  \ the library.

  \ -----------------------------------------------------------
  \ To-do

  \ XXX TODO -- document

( associative-list item? item create-entry )

need search-wordlist

: associative-list  ( "name" -- )  wordlist constant  ;
  \ Create a new associative list "name".

: item?  ( ca len wid -- false | xt true )
  search-wordlist 0<> ;
  \ Is _ca len_ an item of associative list _wid_?
  \ If so return its _xt_ and _true_, else return _false_.

: item  ( ca len wid -- i*x )
  item? 0= #-13 ?throw execute  ;
  \ If _ca len_ is an item of associative list _wid_, return
  \ its value _i*x_; else throw exception -13, "undefined
  \ word".

: create-entry  ( i*x wid xt "name" -- )
  get-current >r swap set-current
  create execute
  r> set-current  ;
  \ Create an entry "name" in associative list _wid_,
  \ using _xt_ to store its value _i*x_.

-->

( entry char-entry double-entry string-entry )

: entry  ( x wid "name" -- )
  ['] , create-entry does>  ( -- x )  ( pfa ) @  ;
  \ Create a cell entry "name" in associative list
  \ _wid_, with value _x_.

: char-entry  ( c wid "name" -- )
  ['] c, create-entry does>  ( -- c )  ( pfa ) c@  ;
  \ Create a character entry "name" in associative list
  \ _wid_, with value _c_.

: double-entry  ( dx wid "name" -- )
  ['] 2, create-entry does>  ( -- dx )  ( pfa ) 2@  ;
  \ Create a double-cell entry "name" in associative list
  \ _wid_, with value _dx_.

: string-entry  ( ca len wid "name" -- )
  ['] s, create-entry does>  ( -- ca len )  ( pfa ) count  ;
  \ Create a string entry "name" in associative list
  \ _wid_, with value _ca len_.

( items )

need alias  need wordlist-words

' wordlist-words alias items  ( wid -- )
  \ List items of associative list _wid_.

( associative-list-demo )

need associative-list need items

associative-list stuff

1887          stuff entry year
char E        stuff char-entry letter
s" Saluton"   stuff string-entry hello
314159.       stuff double-entry pi

cr .( Keys:) cr stuff items cr

cr .( Values: ) cr

s" year"    stuff item . cr
s" letter"  stuff item emit cr
s" hello"   stuff item type cr
s" pi"      stuff item d. cr

  \ vim: filetype=soloforth
