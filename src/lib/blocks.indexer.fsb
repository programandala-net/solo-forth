  \ blocks.indexer.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201611191618

  \ -----------------------------------------------------------
  \ Description

  \ A blocks indexer that improves the default behaviour of
  \ `need` and related words. See the documentation of
  \ `indexer`.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2016-04-02: Start.
  \
  \ 2016-04-03: First working version.
  \
  \ 2016-04-24: Add `need nextname`, because `nextname` has
  \ been moved from the kernel to the library.
  \
  \ 2016-05-05: Update `s=` to `str=`. Improve documentation.
  \
  \ 2016-05-07: New method: the indexed word is an alias, which
  \ doesn't use data space, and its execution token is the
  \ block it's associated to. This way, no data space is used
  \ by the index.
  \
  \ 2016-05-14: Update: `evaluate` has been moved to the
  \ library.
  \
  \ 2016-08-05: Compact the code to save one block.
  \
  \ 2016-11-13: Check the code with the far-memory system
  \ recently implemented in the kernel. Now the library disk
  \ can be indexed. Improve the documentation. Remove old
  \ unused code.
  \
  \ 2016-11-19: Move to <blocks.index-wordlist.fsb> the code
  \ shared with the new module <blocks.fly-indexer.fsb>.

( indexer )

only forth definitions
need index-wordlist  need get-order  need set-order

: index-reneeded  ( ca len -- )
  search-index 0= #-277 ?throw load  ;

  \ doc{
  \
  \ index-reneeded  ( ca len-- )
  \
  \ Search the index word list for word _ca len_. If found,
  \ load the block it's associated to.  If not found, throw an
  \ exception -277 ("required, but not indexed").
  \
  \ This is an alternative behaviour of the deferred word
  \ `reneeded`.
  \
  \ }doc

: index-reneed  ( "name" -- )  parse-name index-reneeded  ;

  \ doc{
  \
  \ index-reneed  ( "name" -- )
  \
  \ Search the index word list for word "name". If found,
  \ execute it, causing its associated block be loaded.  If not
  \ found, throw an exception -277 ("required, but not
  \ indexed").
  \
  \ This is an alternative behaviour of the deferred word
  \ `reneed`.
  \
  \ }doc

: index-needed  ( ca len -- )
  needed-word 2@ 2>r  new-needed-word  2dup undefined?
  if  index-reneeded  else  2drop  then  2r> needed-word 2!  ;

  \ doc{
  \
  \ index-needed ( ca len -- )
  \
  \ If word _ca len_ is found in the current search order, do
  \ nothing. Otherwise search the index word list for it. If
  \ found, execute it, causing its associated block be loaded.
  \ If not found, throw an exception -277 ("required, but not
  \ indexed").
  \
  \ This is an alternative behaviour of the deferred word
  \ `needed`.
  \
  \ }doc

: index-need  ( "name" -- )  parse-name index-needed  ;  -->

  \ doc{
  \
  \ index-need  ( "name" -- )
  \
  \ If word "name" is found in the current search order, do
  \ nothing. Otherwise search the index word list for it. If
  \ found, execute it, causing its associated block be loaded.
  \ If not found, throw an exception -277 ("required, but not
  \ indexed").
  \
  \ This is an alternative behaviour of the deferred word
  \ `need`.
  \
  \ }doc

( indexer )

: set-indexed-need  ( -- )
  ['] index-reneeded ['] reneeded  defer!
  ['] index-reneed   ['] reneed    defer!
  ['] index-need     ['] need      defer!
  ['] index-needed   ['] needed    defer!  ;

  \ doc{
  \
  \ set-indexed-need  ( -- )
  \
  \ Set the alternative behaviour of `need`, `needed`, `reneed`
  \ and `reneeded`: Use the library index created by `indexer`.
  \ In fact `indexer` executes `set-indexed-need` after
  \ creating the index.
  \
  \ The default behaviour can be restored by
  \ `set-located-need`.
  \
  \ See: `indexer`, `set-located-need`.
  \
  \ }doc

need evaluate

: index-block  ( +n -- )
  dup indexed-block ! 0 swap line>string evaluate  ;

  \ doc{
  \
  \ index-block  ( +n -- )
  \
  \ Index block _+n_. This word is a factor of `(indexer)`.
  \
  \ See: `(indexer)`, `indexer`.
  \
  \ }doc

: (indexer)  ( -- )  last-locatable @ 1+ first-locatable @
                     ?do  i index-block  loop  ;
  \ doc{
  \
  \ (indexer)  ( -- )
  \
  \ Create the blocks index, from `last-locatable` to
  \ `last-locatable`. This word is a factor of `indexer`.
  \
  \ See: `indexer`, `first-locatable`, `last-locatable`.
  \
  \ }doc

: indexer  ( -- )
  get-current  get-order
  index-wordlist set-current  indexer-wordlist 1 set-order
  ['] (indexer) catch  dup #-278 <> swap ?throw
  set-order set-current  set-indexed-need  ;

  \ doc{
  \
  \ indexer  ( -- )
  \
  \ Create the blocks index and activate it. The current word
  \ list and the current search order are preserved.
  \
  \ This word changes the default behaviour of `need` `needed`,
  \ `reneed` and `reneeded`: It creates a word list from the
  \ names that are on the index (header) line of every
  \ searchable block, ignoring duplicates.  These words will
  \ load the block they belong to. This way, after indexing all
  \ the disk blocks only once, `need` will search the word list
  \ and execute the word found, which will load its block. On
  \ the contrary, the default behaviour of `need` is to search
  \ all the blocks every time.
  \
  \ The default behaviour of `need` and related words can be
  \ restored with `set-located-need`.
  \
  \ See: `need`, `needed`, `reneed`, `reneeded`,
  \ `set-indexed-need`, `set-located-need`.
  \
  \ }doc

  \ vim: filetype=soloforth
