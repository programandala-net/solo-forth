  \ time.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201612202023

  \ -----------------------------------------------------------
  \ Description

  \ Words related to time.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-05-07: Make block titles compatible with `indexer`.
  \
  \ 2016-05-17: Need `>body`, which has been moved to the
  \ library.
  \
  \ 2016-11-17: Improve documentation of `frames@`, `frames!`,
  \ `reset-frames`.
  \
  \ 2016-12-16: Add `seconds`.
  \
  \ 2016-12-20: Rewrite `ms`, after the v.Forth version.
  \ Rewrite `pause`. Add `do-pause`. Move drafts and variants
  \ of `ms` and `pause` to the development archive, to be
  \ reused in the future.  Rename `jpnext` to `jpnext,` after
  \ the change in the kernel. Update syntax of the `thiscase`
  \ structure.

( seconds ms )

[unneeded] seconds
?\ need ms  : seconds  ( n -- )  1000 * ms  ;  exit

  \ doc{
  \
  \ seconds  ( n -- )
  \
  \ Wait _n_ seconds.
  \
  \ }doc

[unneeded] ms ?exit

need z80-asm,

code ms  ( u -- )
  d pop, d tstp, nz? rif
    rbegin  #171 a ld#,  rbegin  nop, a dec,  z? runtil
           d decp,  d tstp,
    z? runtil
  rthen  jpnext,  end-code

  \ Credit:
  \ Code adapted from v.Forth.

  \ XXX TODO -- support for multitasking (see the
  \ implementation in Z88 CamelForth)

  \ doc{
  \
  \ ms  ( u -- )
  \
  \ Wait at least _u_ ms (miliseconds).
  \
  \ Origin: Forth-94 (FACILITY EXT), Forth-202 (FACILITY
  \ EXT).
  \
  \ }doc

( frames@ frames! reset-frames )

need os-frames

: frames@  ( -- d )
  os-frames @ [ os-frames cell+ ] literal c@  ;

  \ doc{
  \
  \ frames@  ( -- d )
  \
  \ Fetch the system frames counter, which is incremented every
  \ 20 ms by the OS.
  \
  \ See: `frames!`, `reset-frames`.
  \
  \ }doc

: frames!  ( d -- )
  [ os-frames cell+ ] literal c! os-frames !  ;

  \ doc{
  \
  \ frames!  ( d -- )
  \
  \ Store _d_ at the system frames counter, which is
  \ incremented every 20 ms by the OS.
  \
  \ See: `frames@`, `reset-frames`.
  \
  \ }doc

: reset-frames  ( -- )  0. frames!  ;

  \ doc{
  \
  \ reset-frames  ( -- )
  \
  \ Reset the system frames counter, which is incremented every
  \ 20 ms by the OS, seeting it to zero.
  \
  \ See: `frames@`, `frames!`.
  \
  \ }doc

( pause do-pause )

need ?(

[unneeded] pause ?(  need os-frames
: pause  ( u -- )
  os-frames @ +
  begin  dup os-frames @ u< key? or  until drop  ;  exit ?)

  \ XXX TODO -- multitasking

  \ doc{
  \
  \ do-pause  ( u -- )
  \
  \ Stop execution during _u_ frames of the TV (there are 50
  \ frames per second in in Europe and 60 frames per second in
  \ USA), or until a key is pressed.
  \
  \ See: `do-pause`.
  \
  \ }doc

need ?(  [unneeded] do-pause ?(  need os-frames
: do-pause  ( u -- )
  os-frames @ +  begin  dup os-frames @ u<  until drop  ; ?)

  \ XXX TODO -- multitasking

  \ doc{
  \
  \ do-pause  ( u -- )
  \
  \ Stop execution during _u_ frames of the TV (there are 50
  \ frames per second in in Europe and 60 frames per second in
  \ USA).
  \
  \ See: `pause`.
  \
  \ }doc

exit

  \ Alternative definition in assembler
  \
  \ XXX TODO -- rewrite with Z80 opcodes

need z80-asm,

code do-pause ( u -- )
  d pop, b push,
  rbegin  halt, d decp, d tstp,  z? runtil
  b pop, jpnext,  end-code  exit ?)

  \ XXX TODO -- multitasking

  \ Credit:
  \
  \ Code adapted from Spectrum Forth-83.

( leapy-year? )

  \ 2015-11-15

  \ Credit:
  \
  \ Code written by Wil Baden, published on Forth Dimensions
  \ (volume 8, number 5, page 31, 1987-01).

: leapy-year?  ( n -- f )
  dup 400 mod 0= if  drop true   exit  then
  dup 100 mod 0= if  drop false  exit  then
        4 mod 0= if       false  exit  then
  false  ;

exit

  \ Alternative:

need thiscase

: leapy-year?  ( n -- f )
  thiscase 400 mod 0= ifcase  true   exitcase
  thiscase 100 mod 0= ifcase  false  exitcase
  thiscase   4 mod 0= ifcase  true   exitcase
  othercase false  ;

( set-date get-date )

create (date)  1 c,  1 c,  2016 ,
  \ day, month, year

: get-date  ( -- day month year )
  (date) c@
  [ (date) 1+ ] literal c@
  [ (date) 2+ ] literal @  ;

  \ doc{
  \
  \ get-date  ( -- day month year )
  \
  \ Get the current date. The default date is 2016-01-01. It
  \ can be changed with `set-date`. The date is not updated by
  \ the system.
  \
  \ }doc

: set-date  ( day month year -- )
  [ (date) 2+ ] literal !
  [ (date) 1+ ] literal c!
  (date) !  ;

  \ doc{
  \
  \ set-date  ( day month year -- )
  \
  \ Set the current date. The default date is 2016-01-01. It
  \ can be fetch with `get-date`. The date is not updated by
  \ the system.
  \
  \ }doc

( set-time get-time reset-time )

need frames@  need frames!  need m+  need alias  need ud*

: get-time  ( -- second minute hour )
  frames@ 50 um/mod nip s>d   ( sec . )
          60 um/mod s>d       ( sec min . )
          60 um/mod           ( sec min hour )  ;

  \ doc{
  \
  \ get-time  ( -- second minute hour )
  \
  \ Return the current time.
  \
  \ The system doesn't have an actual clock. The system frames
  \ counter is used instead. It is increased by the interrupts
  \ routine every 20th ms. The counter is a 24-bit value, so
  \ its maximum is $FFF ticks of 20 ms (5592 minutes, 93
  \ hours), then it starts again from zero.
  \
  \ }doc

: set-time  ( second minute hour -- )
  3600 um*  rot 60 * m+  rot m+  ( seconds )
  50. ud* frames!  ;

  \ doc{
  \
  \ set-time  ( second minute hour -- )
  \
  \ Set the current time. See `get-time`.
  \
  \ }doc

' reset-frames alias reset-time  ( -- )

  \ doc{
  \
  \ reset-time  ( -- )
  \
  \ Reset the current time to 00:00:00. See `get-time`.
  \
  \ }doc

( .time .system-time .date .system-date .time&date time&date )

  \ XXX TODO document

need get-time  need get-date

: .00  ( n -- )  s>d <# # # #> type  ;
: .0000  ( n -- )  s>d <# # # # # #> type  ;

: .time  ( second minute hour -- )
  .00 ':' emit .00 ':' emit .00  ;

: .system-time  ( -- )  get-time .time  ;

: .date  ( day month year -- )
  .0000 '-' emit .00 '-' emit .00  ;

: .system-date  ( -- )  get-date  .date  ;

: .time&date  ( second minute hour day month year -- )
  .date 'T' emit .time  ;

: time&date  ( -- second minute hour day month year )
  get-time get-date  ;

  \ doc{
  \
  \ time&date  ( -- second minute hour day month year )
  \
  \ Return the current time and date: second (0..59), minute
  \ (0..59), hour (0..23), day (1..31), month (1..12) and year
  \ (e.g., 2016).
  \
  \ See: `get-time`, `get-date`, `set-time`, `set-date`.
  \
  \ Origin: Forth-94 (FACILITY EXT), Forth-201 (FACILITY
  \ EXT).
  \
  \ }doc

  \ vim: filetype=soloforth
