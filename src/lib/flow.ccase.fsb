  \ flow.ccase.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201604281631

  \ -----------------------------------------------------------
  \ Description

  \ `?ccase` control structure, which is a positional `case`
  \ that uses the position of a character in a string as key,
  \ and has no default option.
  \
  \ `ccase0` is a variant that uses the first compiled option
  \ as default, and the next options for matches.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2016.

  \ -----------------------------------------------------------
  \ Credit

  \ `?ccase` was inspired by MMSFORTH's `acase`.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2016-04-28: Write `?ccase`, `ccase0`.

( ?ccase )

need alias  need char-position?  

' >resolve alias end?ccase  immediate compile-only
  \ Compilation: ( C: orig -- )
  \ Run-time: ( -- )

  \ doc{
  \
  \ end?ccase
  \
  \   Compilation: ( C: orig -- )
  \   Run-time: ( -- )
  \
  \ End of a `?ccase` control structure.
  \ See `?ccase` for a usage example.
  \
  \ }doc

: (?ccase)  ( c ca len -- )
  rot char-position? if  2+ cells r@ + perform  then  ;

  \ doc{
  \
  \ (?ccase) ( c ca len -- )
  \ 
  \ Run-time procedure compiled by `?ccase`.  If _c_ is in the
  \ string _ca len_, execute the n-th word compiled after
  \ `?ccase`, where _n_ is the position of the first _c_ in the
  \ string (0..len-1).  If _c_ is not in _ca len_, do nothing.
  \ 
  \ See: `?ccase`.
  \
  \ }doc

: ?ccase 
  \ Compilation: ( C: -- orig )
  \ Run-time: ( c ca len -- )
  postpone (?ccase) postpone ahead  ; immediate compile-only

  \ doc{
  \
  \ ?ccase
  \
  \ Compilation: ( C: -- orig ) Run-time: ( c ca len -- )
  \ 
  \ Start a `?ccase end?ccase` structure. If _c_ is in the string
  \ _ca len_, execute the n-th word compiled after `?ccase`,
  \ where _n_ is the position of the first _c_ in the string
  \ (0..len-1), then continue after `endcase`.  If _c_ is not
  \ in _ca len_, just continue after `end?ccase`.
  \ 
  \ Usage example:

  \ ----
  \ : .a   ( -- )  ." Letter A"  ;
  \ : .b   ( -- )  ." Letter B"  ;
  \ : .c   ( -- )  ." Letter C"  ;
  \
  \ : letter  ( c -- )
  \   s" abc" ?ccase  .a .b .c  end?ccase  ."  The End" cr  ;
  \ ----
  \
  \ }doc

( ccase0 )

need alias  need char-position?

' >resolve alias endccase0  immediate compile-only
  \ Compilation: ( C: orig -- )
  \ Run-time: ( -- )

  \ doc{
  \
  \ endccase0
  \
  \   Compilation: ( C: orig -- )
  \   Run-time: ( -- )
  \
  \ End of a `ccase0` control structure.
  \ See `ccase0` for a usage example.
  \
  \ }doc

: (ccase0)  ( c ca len -- )
  rot char-position? if    3 + \ found, skip default
                     else  2   \ not found, default
                     then  cells r@ + perform  ;

  \ doc{
  \
  \ (ccase0) ( c ca len -- )
  \ 
  \ Run-time procedure compiled by `ccase0`.  If _c_ is in the
  \ string _ca len_, execute the n-th word compiled after
  \ `ccase0`, where _n_ is the position of the first _c_ in the
  \ string (0..len-1) plus 1.  If _c_ is not in _ca len_, 
  \ execute the word compiled right after `ccase0`.
  \ 
  \ See: `ccase0`.
  \
  \ }doc

: ccase0
  \ Compilation: ( C: -- orig )
  \ Run-time: ( c ca len -- )
  postpone (ccase0) postpone ahead  ; immediate compile-only

  \ doc{
  \
  \ ccase0
  \
  \ Compilation: ( C: -- orig ) Run-time: ( c ca len -- )
  \ 
  \ Start a `ccase0 endccase` structure. If _c_ is in the
  \ string _ca len_, execute the n-th word compiled after
  \ `ccase`, where _n_ is the position of the first _c_ in the
  \ string (0..len-1) plus 1, then continue after `endcase`.
  \ If _c_ is not in _ca len_, execute the word compiled right
  \ after `ccase0`, then continue after `endccase`.
  \ 
  \ Usage example:

  \ ----
  \ : .a     ( -- )  ." Letter A"  ;
  \ : .b     ( -- )  ." Letter B"  ;
  \ : .c     ( -- )  ." Letter C"  ;
  \ : .nope  ( -- )  ." Nope!"  ;
  \
  \ : letter  ( c -- )
  \   s" abc" ccase0  .nope .a .b .c  endccase0
  \   ."  The End" cr  ;
  \ ----
  \
  \ }doc

  \ vim: filetype=soloforth
