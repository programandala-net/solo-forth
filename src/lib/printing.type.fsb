  \ printing.type.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201701181905

  \ -----------------------------------------------------------
  \ Description

  \ Versions of `type`.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016, 2017.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2016-04-27: Move `ascii-type` from module "tool.dump.fsb"
  \ and rename it to `type-ascii`.
  \
  \ 2016-04-27: Start `type-center`, `type-left` and
  \ `type-right`.
  \
  \ 2016-04-28: First working versions of `type-center`,
  \ `type-left` and `type-right`.
  \
  \ 2016-11-26: Move `fartype` from the kernel. Move
  \ `fartype-ascii` from the far memory module.
  \
  \ 2016-12-03: Factor `>printable-ascii-char` from
  \ `type-ascii` and `fartype-ascii`.
  \
  \ 2017-01-10: Fix `fartype`.
  \
  \ 2017-01-18: Improve `type-center` and `type-right` with
  \ `array>`, which makes them a bit faster. Improve
  \ documentation.

( fartype type-ascii fartype-ascii )

need ?(  [unneeded] fartype ?(

: fartype  ( ca len -- )
  bounds ?do  i farc@ emit  loop  ;  exit ?)

  \ doc{
  \
  \ fartype  ( ca len -- )
  \
  \ If _len_ is greater than zero, display the character string
  \ _ca len_, which is stored in the far memory.
  \
  \ See: `far-banks`, `type`.
  \
  \ }doc

[unneeded] type-ascii ?(  need >printable-ascii-char

: type-ascii  ( ca len -- )
  bounds ?do  i c@ >printable-ascii-char emit  loop  ;  exit ?)

  \ doc{
  \
  \ type-ascii  ( ca len -- )
  \
  \ Type string _ca len_, replacing non-ASCII and control chars
  \ with a dot.
  \
  \ }doc

[unneeded] fartype-ascii ?(  need >printable-ascii-char

: fartype-ascii  ( ca len -- )
  bounds ?do  i farc@ >printable-ascii-char emit  loop  ; ?)

  \ doc{
  \
  \ fartype-ascii  ( ca len -- )
  \
  \ Type string _ca len_, which is stored in far memory,
  \ replacing non-ASCII and control chars with a dot.
  \
  \ }doc

( drop-type padding-spaces type-left )

[unneeded] drop-type
?\ : drop-type  ( ca len x -- )  drop type  ;  exit

[unneeded] padding-spaces
?\ : padding-spaces  ( len1 len2 -- )  swap - 0 max spaces  ;

  \ doc{
  \
  \ : padding-spaces  ( len1 len2 -- )
  \
  \ If _len2_ minus _len1_ is a positive number, print that
  \ number of spaces; else do nothing.
  \
  \ }doc

[unneeded] type-left ?(  need padding-spaces

: type-left  ( ca len1 len2 -- )
  2dup 2>r min type 2r> padding-spaces  ; ?)

  \ doc{
  \
  \ type-left  ( ca len1 len2 -- )
  \
  \ Type string _ca len1_ at the left of a field of _len2_
  \ characters.
  \
  \ }doc

( type-right )

need drop-type  need <=>  need array>

: type-right-crop  ( ca len1 len2 -- )
  over swap - /string type  ;

  \ doc{
  \
  \ type-right-crop  ( ca len1 len2 -- )
  \
  \ Type string _ca len1_ at the right of a field of _len2_
  \ characters, which is shorter than the string.
  \
  \ }doc

: type-right-fit  ( ca len1 len2 -- )  over - spaces type  ;

  \ doc{
  \
  \ type-right-fit  ( ca len1 len2 -- )
  \
  \ Type string _ca len1_ at the right of a field of _len2_
  \ characters, which is longer than the string.
  \
  \ }doc

      ' type-right-fit ,
here  ' drop-type ,
      ' type-right-crop ,
constant type-right-cases
  \ Execution table of `type-right`.

: type-right  ( ca len1 len2 -- )
  2dup <=> type-right-cases array> perform  ;

  \ doc{
  \
  \ type-right  ( ca len1 len2 -- )
  \
  \ Type string _ca len1_ at the right of a field of _len2_
  \ characters.
  \
  \ }doc

( type-center )

need drop-type  need <=>  need array>

: type-center-fit  ( ca len1 len2 -- )
  over - 2 /mod dup >r + spaces type r> spaces  ;

  \ doc{
  \
  \ type-center-fit  ( ca len1 len2 -- )
  \
  \ Type string _ca len1_ at the center of a field of _len2_
  \ characters, which is longer than the string.
  \
  \ See: `type-center-crop`, `type-center`.
  \
  \ }doc

: type-center-crop  ( ca len1 len2 -- )
  over swap - 2 /mod dup >r + /string r> - type  ;

  \ doc{
  \
  \ type-center-crop  ( ca len1 len2 -- )
  \
  \ Type string _ca len1_ at the center of a field of _len2_
  \ characters, which is shorter than the string.
  \
  \ See: `type-center-fit`, `type-center`.
  \
  \ }doc

      ' type-center-fit ,
here  ' drop-type ,
      ' type-center-crop ,
constant type-center-cases
  \ Execution table of `type-center`.

: type-center  ( ca len1 len2 -- )
  2dup <=> type-center-cases array> perform  ;

  \ doc{
  \
  \ type-center  ( ca len1 len2 -- )
  \
  \ Type string _ca len1_ at the center of a field of _len2_
  \ characters.
  \
  \ See: `type-center-fit`, `type-center-crop`.
  \
  \ }doc

  \ vim: filetype=soloforth
