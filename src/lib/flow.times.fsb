  \ flow.times.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 20160324

  \ -----------------------------------------------------------
  \ Description

  \ `times`.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

( times )

  \ XXX UNDER DEVELOPMENT
  \ XXX third version
  \ No check is done during compilation.

  \ Credit:
  \
  \ `(times)` was inspired by cmForth's `repeats`.

: (times)  ( n -- )
  rp@ @ dup cell+ rp@ ! @ swap
  0 ?do  dup execute  loop  drop  ;

: times  ( Compilation: "name" -- ) ( Run-time: n -- )
  postpone (times)  ; immediate compile-only

  \ Repeat the next instruction if the count on top of the
  \ stack is not zero.  The count is also decremented.  If
  \ count is zero, pop it and continue executing the following
  \ instruction.

  \ `times` is useful to implement complicated math operations,
  \ like shifts, multiply, divide and square root, from
  \ appropriate math step instructions.  It is also useful in
  \ repeating auto-indexing memory instructions.

( times )

  \ XXX UNDER DEVELOPMENT
  \ XXX second version
  \ Immediate words are not allowed.

  \ Credit:
  \
  \ `(times)` was inspired by cmForth's `repeats`.

: (times)  ( n -- )
  rp@ @ dup cell+ rp@ ! @ swap
  0 ?do  dup execute  loop  drop  ;

: times  ( Compilation: "name" -- ) ( Run-time: n -- )
  postpone (times)
  defined ( nt | 0 ) ?dup 0= -13 ?throw
  name>immediate? ( xt f )  -271 ?throw  compile,
  ; immediate compile-only

  \ Repeat the next instruction if the count on top of the
  \ stack is not zero.  The count is also decremented.  If
  \ count is zero, pop it and continue executing the following
  \ instruction.

  \ `times` is useful to implement complicated math operations,
  \ like shifts, multiply, divide and square root, from
  \ appropriate math step instructions.  It is also useful in
  \ repeating auto-indexing memory instructions.

( times )

  \ XXX UNDER DEVELOPMENT
  \ XXX first version

  \ Credit:
  \
  \ `(times)` was inspired by cmForth's `repeats`.

  \ XXX TODO
  \ code (times)  ( n -- )
  \   \ ld h,b
  \   \ ld l,c
  \   \ ld e,(hl)
  \   \ inc hl
  \   \ ld d,(hl) ; de = xt to execute
  \   end-code

: (times)  ( n -- )
  rp@ @ dup cell+ rp@ ! @ swap
  0 ?do  dup execute  loop  drop  ;

: times  ( Compilation: "name" -- ) ( Run-time: n -- )
  postpone (times) postpone [']  ; immediate compile-only

  \ Repeat the next instruction if the count on top of the
  \ stack is not zero.  The count is also decremented.  If
  \ count is zero, pop it and continue executing the following
  \ instruction.

  \ `times` is useful to implement complicated math operations,
  \ like shifts, multiply, divide and square root, from
  \ appropriate math step instructions.  It is also useful in
  \ repeating auto-indexing memory instructions.

  \ vim: filetype=soloforth
