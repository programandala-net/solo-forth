  \ flow.times.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201611261543

  \ -----------------------------------------------------------
  \ Description

  \ `times` and `dtimes`: control flow structures which execute
  \ _n_ or _d_ times the next word compiled.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ Credit

  \ `times` was inspired by cmForth's `repeats`.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2015..2016: Several drafts, with different behaviours
  \ during compilation.
  \
  \ 2016-04-16: Finished. Simplest version. Documented.
  \
  \ 2016-11-26: Move `dtimes` from its own module and finish it
  \ after `times` (do nothing if the parameter is zero). Finish
  \ documentation.

( times dtimes )

need ?(

[unneeded] times ?(

variable times-xt  \ the _xt_ executed by `times`

: times  ( n -- )
  rp@ @  dup cell+ rp@ !  @ times-xt !
  0 ?do  times-xt perform  loop  ; compile-only  exit ?)

  \ doc{
  \
  \ times  ( n -- )
  \
  \ Repeat the next compiled instruction _n_ times.  If _n_ is
  \ zero, continue executing the following instruction.
  \
  \ `times` is useful to implement complicated math operations,
  \ like shifts, multiply, divide and square root, from
  \ appropriate math step instructions.  It is also useful in
  \ repeating auto-indexing memory instructions.
  \
  \ This structure is not nestable.
  \
  \ Usage example:
  \
  \ ----
  \ : blink  ( -- )  7 0 do  i border  loop  0 border  ;
  \ : blinking  ( -- )  100 times blink  ." Done" cr  ;
  \ ----
  \
  \ See: `dtimes`, `executions`.
  \
  \ }doc

[unneeded] dtimes ?(  need dfor  need d-

variable dtimes-xt  \ the _xt_ executed by `dtimes`

: dtimes  ( d -- )
  rp@ @  dup cell+ rp@ !  @ dtimes-xt !
  2dup or if    1. d- dfor  dtimes-xt perform  dstep  exit
          then  2drop
  ; compile-only  exit ?)

  \ doc{
  \
  \ dtimes  ( d -- )
  \
  \ Repeat the next compiled instruction _d_ times.  If _d_ is
  \ zero, continue executing the following instruction.
  \
  \ This structure is not nestable.
  \
  \ Usage example:
  \
  \ ----
  \ : blink  ( -- )  7 0 do  i border  loop  0 border  ;
  \ : blinking  ( -- )  100000. dtimes blink  ." Done" cr  ;
  \ ----
  \
  \ See: `times`, `executions`.
  \
  \ }doc

  \ vim: filetype=soloforth
