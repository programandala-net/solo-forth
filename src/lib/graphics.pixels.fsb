  \ graphics.pixels.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201612270012

  \ -----------------------------------------------------------
  \ Description

  \ Words that manipulate pixels.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-10-15: Make `(pixel-addr)` deferred. Rename previous
  \ versions to `slow-(pixel-addr)` and `fast-(pixel-addr)`.
  \ This way the application can choose the version associated
  \ to `(pixel-addr)`, which will be used by other words.
  \
  \ 2016-10-15: Make `pixels` deferred. Rename previous
  \ versions to `slow-pixels` and `fast-pixels`.  This way the
  \ application can choose the version associated to `pixels`.
  \
  \ 2016-10-15: Add `bitmap>attr-addr`, `pixel-attr-addr`.
  \
  \ 2016-12-20: Rename `jppushhl` to `jppushhl,` and `jpnext`
  \ to `jpnext,`, after the change in the kernel.
  \
  \ 2016-12-25: Improve documentation. Write `plot176`.
  \
  \ 2016-12-26: Convert all code words (`fast-(pixel-addr)`,
  \ `set-pixel`, `reset-pixel`, `toggle-pixel` `test-pixel`,
  \ and `pixels`) from the `z80-asm` assembler to the
  \ `z80-asm,` assembler. Add `(pixel-addr176)`,
  \ `pixel-addr176`, `set-pixel176`, `reset-pixel176`,
  \ `toggle-pixel176`, `test-pixel176`, `set-save-pixel176`.
  \
  \ 2017-01-04: Rename `test-pixel` to `get-pixel` and
  \ `test-pixel176` to `get-pixel176`.

\ (pixel-addr) slow-(pixel-addr) \

[defined] (pixel-addr) ?\ defer (pixel-addr)  ( -- a )

create slow-(pixel-addr)  ( -- a )
  asm
  3E c, BF c,   \ ld a,191 ; max Y coordinate
  90 00 + c,    \ sub b
  C3 c, 22B0 ,  \ jp $22B0 ; and return
  end-asm

' slow-(pixel-addr) ' (pixel-addr) defer!

  \ doc{
  \
  \ slow-(pixel-addr)  ( -- a )
  \
  \ Return address _a_ of an alternative entry point to the
  \ "pixel-add" ROM routine ($22AA), to let the range of the y
  \ coordinate to be 0..191 instead of 0..175.
  \
  \ This is the default behaviour of `(pixel-addr)`. When
  \ `fast-(pixel-addr)` (which is faster but bigger, and
  \ requires the assembler) is needed, the application must use
  \ `need fast-(pixel-addr)` before `need set-pixel` or any
  \ other word that needs `(pixel-addr)`.
  \
  \ Input registers:
  \
  \ - C = x cordinate (0..255)
  \ - B = y coordinate (0..191)
  \
  \ Output registers:
  \
  \ - HL = address of the pixel byte in the screen bitmap
  \ - A = position of the pixel in the byte address (0..7),
  \       note: position 0=bit 7, position 7=bit 0.
  \
  \ See: `(pixel-addr)`, `fast-(pixel-addr)`,
  \ `(pixel-addr176)`.
  \
  \ }doc

  \ doc{
  \
  \ (pixel-addr)  ( -- a )
  \
  \ A deferred word that executes `fast-(pixel-addr)` or
  \ `slow-(pixel-addr)`.  Return address _a_ of an alternative
  \ to the "pixel-add" ROM routine ($22AA), to let the range
  \ of the y coordinate to be 0..191 instead of 0..175.
  \
  \ See: `fast-(pixel-addr)`, `slow-(pixel-addr)`,
  \ `(pixel-addr176)`.
  \
  \ }doc

\ (pixel-addr) fast-(pixel-addr) \

need z80-asm,

[defined] (pixel-addr) ?\ defer (pixel-addr)  ( -- a )

create fast-(pixel-addr)  ( -- a )

  asm

  BF a ld#,  b sub,
    \ b= adjusted Y coordinate (0..191)

  a b ld, rra, scf, rra, a and, rra,
    \ the line number from top of screen to B
    \                     0xxxxxxx
    \ set carry flag
    \                     10xxxxxx
    \ clear carry flag
    \                     010xxxxx

  b xor, F8 and#, b xor, a h ld,
    \
    \ keep the top 5 bits 11111000
    \                     010xxbbb
    \ transfer high byte to H

  c a ld,
    \ the x value 0..255

  rlca, rlca, rlca,  b xor, C7 and#,
    \ the y value
    \ apply mask             11000111

  b xor, rlca, rlca,
    \ restore unmasked bits  xxyyyxxx
    \ rotate to              xyyyxxxx
    \ required position      yyyxxxxx

  a l ld,
    \ low byte to L

  c a ld, 07 and#,
    \ form the pixel position in A

  ret,

  end-asm

' fast-(pixel-addr) ' (pixel-addr) defer!

  \ doc{
  \
  \ fast-(pixel-addr)  ( -- a )
  \
  \ Return address _a_ of a a modified copy of the "pixel-add"
  \ ROM routine ($22AA), to let the range of the y coordinate
  \ to be 0..191 instead of 0..175. This code is a bit faster
  \ than `slow-(pixel-addr)` because the necessary jump to the
  \ ROM is saved and a useless `and a` has been removed. But in
  \ most cases the speed gain is so small (only 0.01: see
  \ `set-pixel-bench`) that it's not worth the extra space,
  \ including the assembler.
  \
  \ Input registers:
  \
  \ - C = x cordinate (0..255)
  \ - B = y coordinate (0..191)
  \
  \ Output registers:
  \
  \ - HL = address of the pixel byte in the screen bitmap
  \ - A = position of the pixel in the byte address (0..7),
  \       note: position 0=bit 7, position 7=bit 0.
  \
  \ See: `(pixel-addr)`, `slow-(pixel-addr)`,
  \ `(pixel-addr176)`.
  \
  \ }doc

\ (pixel-addr176) \

  \ XXX UNDER DEVELOPMENT -- 2016-12-26

create (pixel-addr176)  ( -- a )
  asm
  3E c, #175 c,   \ ld a,175 ; max Y coordinate in BASIC
  90 00 + c,      \ sub b
  C3 c, 22B0 ,    \ jp $22B0 ; and return
  end-asm

  \ doc{
  \
  \ (pixel-addr176)  ( -- a )
  \
  \ Return address _a_ of an alternative entry point to
  \ the
  \ "pixel-add" ROM routine ($22AA), 
  \ bypass the error check.
  \ to let the range of the y
  \ coordinate to be 0..191 instead of 0..175.
  \
  \ Input registers:
  \
  \ - C = x cordinate (0..255)
  \ - B = y coordinate (0..176)
  \
  \ Output registers:
  \
  \ - HL = address of the pixel byte in the screen bitmap
  \ - A = position of the pixel in the byte address (0..7),
  \       note: position 0=bit 7, position 7=bit 0.
  \
  \ See: `pixel-addr176`, `(pixel-addr)`.
  \
  \ }doc

( pixel-addr176 )

need (pixel-addr176)

code pixel-addr176  ( gx gy -- n a )
  E1 c,  D1 c,            \ pop hl / pop de
  C5 c,                   \ push bc
  40 05 + c,              \ ld b,l ; b=gy
  48 03 + c,              \ ld c,e ; c=gx
  CD c, (pixel-addr176) , \ call pixel_addr176
  C1 c,                   \ pop bc
  16 c, 0 c,  58 07 + c,  \ ld d,0 / ld e,a
  C3 c, pushhlde ,        \ jp pushhlde
  end-code

  \ doc{
  \
  \ pixel-addr176  ( gx gy -- n a )
  \
  \ Return screen address _a_ and pixel position _n_ (0..7) of
  \ pixel coordinates _gx_ (0..255) and _gy_ (0..175).
  \
  \ See: `(pixel-addr176)`, `pixel-addr`.
  \
  \ }doc

( pixel-addr )

need (pixel-addr)

code pixel-addr  ( gx gy -- n a )
  E1 c,  D1 c,            \ pop hl / pop de
  C5 c,                   \ push bc
  40 05 + c,              \ ld b,l ; b=gy
  48 03 + c,              \ ld c,e ; c=gx
  CD c, (pixel-addr) ,    \ call pixel_addr
  C1 c,                   \ pop bc
  16 c, 0 c,  58 07 + c,  \ ld d,0 / ld e,a
  C3 c, pushhlde ,        \ jp pushhlde
  end-code

  \ doc{
  \
  \ pixel-addr  ( gx gy -- n a )
  \
  \ Return screen address _a_ and pixel position _n_ (0..7) of
  \ pixel coordinates _gx_ (0..255) and _gy_ (0..191).
  \
  \ See: `(pixel-addr)`, `pixel-addr176`.
  \
  \ }doc

( plot plot176 )

need ?(

[unneeded] plot ?(  need (pixel-addr)

code plot  ( gx gy -- )

  D9 c, E1 c, C1 c, 40 05 + c,
    \ exx               ; save Forth IP
    \ pop hl
    \ pop bc            ; C = x coordinate
    \ ld b,l            ; B = y coordinate (0..191)
  ED c, 43 c, 5C7D ,  CD c, (pixel-addr) ,
    \ ld ($5C7D),bc     ; update COORDS
    \ call pixel_addr   ; hl = screen address
    \                   ; a = pixel position in hl (0..7)
  CD c, 22EC ,  D9 c,  DD c, 21 c, next ,  jpnext,  end-code
    \ call $22EC        ; ROM PLOT-SUB + 7
    \ exx               ; restore Forth IP
    \ ld ix,next        ; restore ix
    \ jp (ix)           ; jp next

exit ?)

  \ doc{
  \
  \ plot  ( gx gy -- )
  \
  \ Set a pixel, changing the color attributes
  \ and the current graphic coordinates.
  \ _gx_ is 0..255; _gy_ is 0..191.
  \
  \ See: `set-pixel`, `plot176`.
  \
  \ }doc

[unneeded] plot176 ?(

code plot176  ( gx gy -- )

  D9 c, E1 c, C1 c, 40 05 + c,
    \ exx               ; save Forth IP
    \ pop hl
    \ pop bc            ; C = x coordinate
    \ ld b,l            ; B = y coordinate (0..175)
  CD c, 22E5 ,  D9 c,  DD c, 21 c, next ,  jpnext,  end-code
    \ call $22E5        ; ROM PLOT-SUB
    \ exx               ; restore Forth IP
    \ ld ix,next        ; restore ix
    \ jp (ix)           ; jp next

?)

  \ doc{
  \
  \ plot176  ( gx gy -- )
  \
  \ Set a pixel, changing the color attributes and the current
  \ graphic coordinates, using only the top 176 pixel rows of
  \ the screen (the lower 16 pixel rows are not used). _gx_ is
  \ 0..255; _gy_ is 0..175.
  \
  \ This word is equivalent to Sinclair BASIC's PLOT command.
  \
  \ WARNING: If parameters are out of range, the ROM will throw
  \ a BASIC error, and the system will crash.
  \
  \ See: `plot`, `set-pixel`.
  \
  \ }doc

( set-pixel )

need (pixel-addr)  need z80-asm,

code set-pixel  ( gx gy -- )

  h pop, d pop, b push,
  l b ld, e c ld, (pixel-addr) call,
  a b ld, b inc, 1 a ld#,
  rbegin  rrca,  rstep
  m or, a m ld,  \ combine pixel with byte in the screen
  b pop, jpnext,

  end-code

  \ doc{
  \
  \ set-pixel  ( gx gy -- )
  \
  \ Set a pixel without changing the color attributes
  \ or the current graphic coordinates.
  \ _gx_ is 0..255; _gy_ is 0..191.
  \
  \ See:  `plot`, `plot176`, `reset-pixel`, `toggle-pixel`.
  \
  \ }doc

  \ Credit:
  \
  \ Author of the original code: José Manuel Lazo.
  \ Published on Microhobby, issue 85 (1986-07), page 24:
  \ http://microhobby.org/numero085.htm
  \ http://microhobby.speccy.cz/mhf/085/MH085_24.jpg

( set-pixel176 )

need z80-asm,  need (pixel-addr176)

code set-pixel176  ( gx gy -- )

  h pop, d pop, b push,
  l b ld, e c ld, (pixel-addr176) call,
  a b ld, b inc, 1 a ld#,
  rbegin  rrca,  rstep
  m or, a m ld,  \ combine pixel with byte in the screen
  b pop, jpnext,

  end-code

  \ doc{
  \
  \ set-pixel176  ( gx gy -- )
  \
  \ Set a pixel without changing the color attributes or the
  \ current graphic coordinates, and using only the top 176
  \ pixel rows of the screen (the lower 16 pixel rows are not
  \ used).  _gx_ is 0..255; _gy_ is 0..175.
  \
  \ See:  `set-save-pixel176`, `set-pixel`, `plot`, `plot176`,
  \ `reset-pixel`, `toggle-pixel`, `reset-pixel176`,
  \ `toggle-pixel176`.
  \
  \ }doc

  \ Credit:
  \
  \ Author of the original code: José Manuel Lazo.
  \ Published on Microhobby, issue 85 (1986-07), page 24:
  \ http://microhobby.org/numero085.htm
  \ http://microhobby.speccy.cz/mhf/085/MH085_24.jpg

( set-save-pixel176 )

need z80-asm,  need (pixel-addr176)  need os-coords

code set-save-pixel176  ( gx gy -- )

  h pop, d pop, b push,
  l b ld, e c ld, os-coords bc stp, (pixel-addr176) call,
  a b ld, b inc, 1 a ld#,
  rbegin  rrca,  rstep
  m or, a m ld,  \ combine pixel with byte in the screen
  b pop, jpnext,

  end-code

  \ doc{
  \
  \ set-save-pixel176  ( gx gy -- )
  \
  \ Set a pixel without changing the color attributes, and
  \ using only the top 176 pixel rows of the screen (the lower
  \ 16 pixel rows are not used).  _gx_ is 0..255; _gy_ is
  \ 0..175.  This word updates the graphic coordinates
  \ (contrary to `set-pixel176`).
  \
  \ See:  `set-pixel176`, `set-pixel`, `plot`, `plot176`,
  \ `reset-pixel`, `toggle-pixel`, `reset-pixel176`,
  \ `toggle-pixel176`.
  \
  \ }doc

  \ Credit:
  \
  \ Author of the original code: José Manuel Lazo.
  \ Published on Microhobby, issue 85 (1986-07), page 24:
  \ http://microhobby.org/numero085.htm
  \ http://microhobby.speccy.cz/mhf/085/MH085_24.jpg

( reset-pixel )

need (pixel-addr)  need z80-asm,

code reset-pixel  ( gx gy -- )

  h pop, d pop, b push,
  l b ld, e c ld, (pixel-addr) call,
  a b ld, b inc, 1 a ld#,
  rbegin  rrca,  rstep,
  cpl, m and, a m ld,  \ combine pixel with byte in the screen
  b pop, jpnext,

  end-code

  \ doc{
  \
  \ reset-pixel  ( gx gy -- )
  \
  \ Reset a pixel without changing the color attributes
  \ or the current graphic coordinates.
  \ _gx_ is 0..255; _gy_ is 0..191.
  \
  \ See: `set-pixel`, `toggle-pixel`, `reset-pixel176`.
  \
  \ }doc

  \ Credit:
  \
  \ Based on code written by José Manuel Lazo,
  \ published on Microhobby, issue 85 (1986-07), page 24:
  \ http://microhobby.org/numero085.htm
  \ http://microhobby.speccy.cz/mhf/085/MH085_24.jpg

( reset-pixel176 )

need (pixel-addr176)  need z80-asm,

code reset-pixel176  ( gx gy -- )

  h pop, d pop, b push,
  l b ld, e c ld, (pixel-addr176) call,
  a b ld, b inc, 1 a ld#,
  rbegin  rrca,  rstep,
  cpl, m and, a m ld,  \ combine pixel with byte in the screen
  b pop, jpnext,

  end-code

  \ doc{
  \
  \ reset-pixel176  ( gx gy -- )
  \
  \ Reset a pixel without changing the color attributes or the
  \ current graphic coordinates, and using only the top 176
  \ pixel rows of the screen (the lower 16 pixel rows are not
  \ used).  _gx_ is 0..255; _gy_ is 0..175.
  \
  \ See: `set-pixel176`, `toggle-pixel176`, `reset-pixel`,
  \ `set-pixel`, `toggle-pixel`, `plot`, `plot176`.
  \
  \ }doc

  \ Credit:
  \
  \ Based on code written by José Manuel Lazo,
  \ published on Microhobby, issue 85 (1986-07), page 24:
  \ http://microhobby.org/numero085.htm
  \ http://microhobby.speccy.cz/mhf/085/MH085_24.jpg

( toggle-pixel )

need (pixel-addr)  need z80-asm,

code toggle-pixel  ( gx gy -- )

  h pop, d pop, b push,
  l b ld, e c ld, (pixel-addr) call,
  a b ld, b inc, 1 a ld#,
  rbegin  rrca,  rstep
  m xor, a m ld,  \ combine pixel with byte in the screen
  b pop, jpnext,

  end-code

  \ doc{
  \
  \ toggle-pixel  ( gx gy -- )
  \
  \ Toggle a pixel without changing the color attributes or the
  \ current graphic coordinates.  _gx_ is 0..255; _gy_ is
  \ 0..191.
  \
  \ See: `set-pixel`, `reset-pixel`, `toggle-pixel176`,
  \ `set-pixel176`, `reset-pixel176`, `plot`, `plot176`.
  \
  \ }doc

  \ Credit:
  \
  \ Based on code written by José Manuel Lazo,
  \ published on Microhobby, issue 85 (1986-07), page 24:
  \ http://microhobby.org/numero085.htm
  \ http://microhobby.speccy.cz/mhf/085/MH085_24.jpg

( toggle-pixel176 )

need (pixel-addr176)  need z80-asm,

code toggle-pixel176  ( gx gy -- )

  h pop, d pop, b push,
  l b ld, e c ld, (pixel-addr176) call,
  a b ld, b inc, 1 a ld#,
  rbegin  rrca,  rstep
  m xor, a m ld,  \ combine pixel with byte in the screen
  b pop, jpnext,

  end-code

  \ doc{
  \
  \ toggle-pixel176  ( gx gy -- )
  \
  \ Toggle a pixel without changing the color attributes or the
  \ current graphic coordinates, and using only the top 176
  \ pixel rows of the screen (the lower 16 pixel rows are not
  \ used).  _gx_ is 0..255; _gy_ is 0..175.
  \
  \ See: `toggle-pixel`, `set-pixel`, `reset-pixel`,
  \ `set-pixel176`, `reset-pixel176`, `plot`, `plot176`.
  \
  \ }doc

  \ Credit:
  \
  \ Based on code written by José Manuel Lazo,
  \ published on Microhobby, issue 85 (1986-07), page 24:
  \ http://microhobby.org/numero085.htm
  \ http://microhobby.speccy.cz/mhf/085/MH085_24.jpg


( get-pixel )

need (pixel-addr)  need z80-asm,

code get-pixel  ( gx gy -- f )
  h pop, d pop, b push,
  \ L = gy coordinate
  \ E = gx coordinate
  \ (SP) = Forth IP
  l b ld, e c ld,
  \ B = gy coordinate
  \ C = gx coordinate
  (pixel-addr) call,
  \ HL = screen address
  \ A = pixel position in HL
  a b ld, b inc, m a ld,
  rbegin  rlca,  rstep \ rotate to bit 0
  b pop,   \ restore the Forth IP
  1 and#,  \ pixel?
  ' true nz? ?jp,
  ' false jp,
  end-code

( get-pixel176 )

need (pixel-addr176)  need z80-asm,

code get-pixel176  ( gx gy -- f )
  h pop, d pop, b push,
  \ L = gy coordinate
  \ E = gx coordinate
  \ (SP) = Forth IP
  l b ld, e c ld,
  \ B = gy coordinate
  \ C = gx coordinate
  (pixel-addr176) call,
  \ HL = screen address
  \ A = pixel position in HL
  a b ld, b inc, m a ld,
  rbegin  rlca,  rstep \ rotate to bit 0
  b pop,   \ restore the Forth IP
  1 and#,  \ pixel?
  ' true nz? ?jp,
  ' false jp,
  end-code

( pixels fast-pixels )

need z80-asm,  [defined] pixels ?\ defer pixels  ( -- n )

code fast-pixels  ( -- n )

  exx,  \ save Forth IP
  4000 h ldp#, l b ld, l c ld,
  rbegin  \ byte
    08 d ld#,
    rbegin  \ bit
      m rrc, c? rif  b incp,  rthen  d dec,
    z? runtil
    h incp, h a ld, 58 cp#,
  z? runtil
  b push,
  exx,  \ restore Forth IP
  jpnext,
  end-code  ' fast-pixels ' pixels defer!

  \ doc{
  \
  \ pixels  ( -- n )
  \
  \ Return the number _n_ of pixels set on the screen.
  \ This is a deferred word associated `fast-pixels`
  \ or `slow-pixels`.
  \
  \ See: `fast-pixels`, `slow-pixels`.
  \
  \ }doc

  \ doc{
  \
  \ fast-pixels  ( -- n )
  \
  \ Return the number _n_ of pixels set on the screen.
  \ This is the default behaviour of `pixels`.
  \
  \ See: `pixels`, `slow-pixels`.
  \
  \ }doc

  \ 26 bytes used.

  \ Credit:
  \
  \ Original code written by Juan Antonio Paz,
  \ published on Microhobby, issue 170 (1988-05), page 21:
  \ http://microhobby.org/numero170.htm
  \ http://microhobby.speccy.cz/mhf/170/MH170_21.jpg

  \ Original code:
  \
  \ ld hl,16384
  \ ld b,l
  \ ld c,l
  \   byte:
  \ ld d,8
  \   bit:
  \ rrc (hl)
  \ jr nc,next_bit
  \ inc bc
  \   next_bit:
  \ dec d
  \ jr nz,bit
  \ inc hl
  \ ld a,h
  \ cp 88
  \ jr nz,byte
  \ ret

( pixels slow-pixels )

  \ Slower version of `pixels`.

need bits

[defined] pixels ?\ defer pixels  ( -- n )

: slow-pixels  ( -- n )  16384 6144 bits  ;

' slow-pixels ' pixels defer!

  \ doc{
  \
  \ slow-pixels  ( -- n )
  \
  \ Return the number _n_ of pixels set on the screen.  This is
  \ the alternative behaviour of the deferred word `pixels`.
  \
  \ See: `pixels`, `fast-pixels`.
  \
  \ }doc

( bitmap>attr-addr pixel-attr-addr )

need ?(

[defined] bitmap>attr-addr ?(

code bitmap>attr-addr  ( a1 -- a2 )
  E1 c,  78 04 + c,
    \ pop hl
    \ ld a,h ; fetch high byte $40..$57
  0F c, 0F c, 0F c,
    \ rrca
    \ rrca
    \ rrca ; shift bits 3 and 4 to right
  E6 c, 03 c,  F6 c, 58 c,  60 07 + c,
    \ and $03 ; range is now 0..2
    \ or $58 ; form correct high byte for third of screen
    \ ld h,a
  jppushhl,  end-code  ?)

  \ Credit:
  \
  \ The code is extracted from the PO-ATTR ROM routine
  \ (at $0BDB).

  \ doc{
  \
  \ bitmap>attr-addr  ( a1 -- a2 )
  \
  \ Convert screen bitmap address _a1_ to its correspondent
  \ attributes address _a2_.
  \
  \ }doc

[unneeded] pixel-attr-addr ?exit

need pixel-addr

: pixel-attr-addr  ( gx gy -- a )
  pixel-addr nip bitmap>attr-addr  ;

  \ doc{
  \
  \ pixel-attr-addr  ( gx gy -- a )
  \
  \ Convert pixel coordinates _gx gy_ to their correspondent
  \ attributes address _a_.
  \
  \ }doc

  \ vim: filetype=soloforth
