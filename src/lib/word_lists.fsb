  \ word_lists.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201611261158

  \ -----------------------------------------------------------
  \ Description

  \ Words related to word lists.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2016-04-17: Added the requisite of `recurse`, which is not
  \ in the kernel anymore.
  \
  \ 2016-05-02: Join several blocks, to save space.
  \
  \ 2016-05-04: Improve the documentation of `trail`.
  \
  \ 2016-05-17: Need `>body`, which has been moved to the
  \ library. Improve conditional compilation.
  \
  \ 2016-05-18: Simplify conditional compilation. Move
  \ `vocabulary` from the kernel and rewrite it after
  \ `wid>vocabulary` and the new word `dovocabulary`.
  \
  \ 2016-11-26: Improve `(wid>name`. Remove old definitions
  \ `get-order` and `order@`. Move `seal` from the kernel.

( wid>link (wid>name wid>name )

[unneeded] wid>link
?\ need alias  ' cell+ alias wid>link  ( wid -- a ) exit

[unneeded] (wid>name
?\ : (wid>name  ( wid -- a )  cell+ cell+  ; exit

  \ doc{
  \
  \ (wid>name  ( wid -- a )
  \
  \ Return the address _a_ which holds the _nt_ of word list
  \ _wid_ (or zero if the word list has no associated name).
  \
  \ }doc

[unneeded] wid>name
?\ need (wid>name : wid>name  ( wid -- nt|0 )  (wid>name @  ;

  \ doc{
  \
  \ wid>name  ( wid -- nt|0 )
  \
  \ Return the _nt_ associated to word list _wid_ (or zero if
  \ the word list has no associated name).
  \
  \ }doc

( named-wid wid>vocabulary vocabulary )

need ?(  [unneeded] named-wid ?(  need (wid>name
: named-wid  ( wid -- )  (wid>name latest swap !  ; ?)

  \ doc{
  \
  \ named-wid ( wid -- )
  \
  \ Associate the latest name to word list _wid_.
  \
  \ }doc

[unneeded] wid>vocabulary ?(  need named-wid
: wid>vocabulary  ( wid "name" -- )
  create dup , named-wid dovocabulary  ; ?)

  \ doc{
  \
  \ wid>vocabulary  ( wid "name" -- )
  \
  \ Create a vocabulary "name" for the word list _wid_.
  \
  \ }doc

[unneeded] vocabulary ?(  need wid>vocabulary
: vocabulary  ( "name" -- )  wordlist wid>vocabulary  ; ?)

  \ doc{
  \
  \ vocabulary  ( "name" -- )
  \
  \ Create a vocabulary _name_. A vocabulary is a named word
  \ list. Subsequent execution of `name` replaces the first
  \ entry in the search order with the word list associated to
  \ `name`. When `name` becomes the compilation word list new
  \ definitions will be appended to `name`'s word list.
  \
  \ See: `wordlist`, `definitions`.
  \
  \ Origin: Forth-83 (Required Word Set).
  \
  \ }doc

( trail find-name-in find swap-current wid-of )

[unneeded] seal
?\ : seal  ( -- )  1 #order !  ;  exit

  \ doc{
  \
  \ seal  ( -- )
  \
  \ Remove all word list from the search order stack other than
  \ the word list that is currently on top of the search order
  \ stack. I.e., change the search order such that only the
  \ vocabulary at the top of the search order will be searched.
  \
  \ Origin: Gforth.
  \
  \ }doc

[unneeded] trail ?\ : trail  ( -- nt )  context @ @  ;  exit

  \ doc{
  \
  \ trail ( -- nt )
  \
  \ Leave the _nt_ of the topmost word in the first word list
  \ of the search order.
  \
  \ }doc

[unneeded] find-name-in
?\ : find-name-in  ( ca len wid -- nt | 0 ) @ find-name-from  ;

  \ doc{
  \
  \ find-name-in  ( ca len wid -- nt | 0 )
  \
  \ Find the definition named in the string at _ca len_, in
  \ word list _wid_. If the definition is found, return its
  \ _nt_, else return zero.
  \
  \ The search is case-insensitive.
  \
  \ }doc

need ?(  [unneeded] find ?(
: find  ( ca -- ca 0 | xt 1 | xt -1 )
  dup count find-name dup
  if  nip name>immediate? 1 or negate  then  ; ?)

  \ doc{
  \
  \ find  ( ca -- ca 0 | xt 1 | xt -1 )
  \
  \ Find the definition named in the counted  string at _ca_.
  \ If the definition is  not found, return _ca_ and zero. If
  \ the definition is found, return its execution token _xt_.
  \ If the definition  is immediate,  also  return one  (1),
  \ otherwise  also  return minus-one (-1).
  \
  \ Origin: Forth-83 (Required word set), Forth-94 (CORE,
  \ SEARCH), Forth-2012 (CORE, SEARCH).
  \
  \ }doc

[unneeded] swap-current ?(
: swap-current  ( wid1 -- wid2 )
  get-current swap set-current  ; ?)

  \ Credit:
  \
  \ Idea for `swap-current` from lpForth.

[unneeded] wid-of ?( need >body
  : wid-of  ( "name" -- wid )  ' >body @  ; ?)

  \ doc{
  \
  \ wid-of  ( "name" -- wid )
  \
  \ Return the _wid_ associated to vocabulary "name".
  \
  \ Origin: eForth's `widof`.
  \
  \ }doc

  \ vim: filetype=soloforth
