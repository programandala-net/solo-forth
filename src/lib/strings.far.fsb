  \ strings.far.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ Last modified: 201701101723

  \ -----------------------------------------------------------
  \ Description

  \ Words to manage far-memory strings.

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016, 2017.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ Latest changes

  \ 2017-01-10: Move this code from <strings.MISC.fsb>.

( far," fars, farsconstant )

[unneeded] far,"
?\ need fars,  : far,"  ( -- )  '"' parse fars,  ;  exit

  \ doc{
  \
  \ far,"  ( "ccc<quote>" -- )
  \
  \ Parse "ccc" delimited by a double-quote and compile the
  \ string in far memory.
  \
  \ }doc

[unneeded] fars, ?(  need farplace  need farallot

: fars,  ( ca len -- )  tuck hp@ farplace 1+ farallot  ; ?)

  \ doc{
  \
  \ fars,  ( ca len -- )
  \
  \ Compile a string in far memory.
  \
  \
  \ }doc

need ?(

[unneeded] farsconstant ?(  need fars,
: farsconstant  ( ca len "name" -- )
  hp@ >r fars, r> farcount 2constant  ; exit ?)

  \ doc{
  \
  \ farsconstant  ( ca len "name" -- )
  \
  \ Create a string constant _name_ in far memory with value
  \ _ca len_.
  \
  \ }doc

( farsconstants, /farsconstants, )

[unneeded] farsconstants, ?(

need far,

: farsconstants,  ( 0 ca[n]..ca[1] "name" -- )
  create  hp@ , begin  ?dup  while  far,  repeat  ;  exit ?)

  \ doc{
  \
  \ farsconstants,  ( 0 ca[n]..ca[1] "name" -- )
  \
  \ Create a table of string constants _name_ in far memory,
  \ using counted strings _ca[n]..ca[1]_, being _0_ a mark for
  \ the last string on the stack.
  \
  \ When _name_ is executed, it returns an address that holds
  \ the address of the table in far memory.
  \
  \ This word is a common factor of `farsconstants` and
  \ `far>sconstants`.
  \
  \ See: `farsconstants`, `far>sconstants`.
  \
  \ }doc

[unneeded] /farsconstants, ?exit

need far,

: /farsconstants,  ( 0 ca[n]..ca[1] "name" -- n )
  create  hp@ , 0 begin  swap ?dup  while  far, 1+  repeat  ;

exit ?)

  \ doc{
  \
  \ /farsconstants,  ( 0 ca[n]..ca[1] "name" -- n )
  \
  \ Create a table of string constants _name_ in far memory,
  \ using counted strings _ca[n]..ca[1]_, being _0_ a mark for
  \ the last string on the stack, and return the number _n_ of
  \ compiled strings.
  \
  \ When _name_ is executed, it returns an address that holds
  \ the address of the table in far memory.
  \
  \ This word is a common factor of `/farsconstants` and
  \ `/far>sconstants`.
  \
  \ See: `/farsconstants`, `/far>sconstants`.
  \
  \ }doc

( farsconstants-does> farsconstants /farsconstants )

need ?(

[unneeded] farsconstants-does> ?(  need array>
: farsconstants-does>  ( -- )
  does>  ( n -- ca len ) ( n pfa ) @ array> far@ farcount  ; ?)

[unneeded] farsconstants ?(

need farsconstants,  need farsconstants-does>  need far,

: farsconstants  ( 0 ca[n]..ca[1] "name" -- )
  farsconstants, farsconstants-does>  ;  exit ?)

  \ doc{
  \
  \ farsconstants  ( 0 ca[n]..ca[1] "name" -- )
  \
  \ Create a table of string constants _name_ in far memory,
  \ using counted strings _ca[n]..ca[1]_, being _0_ a mark for
  \ the last string on the stack.
  \
  \ When _name_ is executed, it converts the index on the stack
  \ (0.._n-1_) to the correspondent string _ca len_ in far
  \ memory.
  \
  \ Usage example:

  \ ----
  \
  \ 0                  \ end of strings
  \   hp@ far," kvar"  \ string 4
  \   hp@ far," tri"   \ string 3
  \   hp@ far," du"    \ string 2
  \   hp@ far," unu"   \ string 1
  \   hp@ far," nul"   \ string 0
  \ farsconstants digitname
  \
  \ 0 digitname cr fartype
  \ 1 digitname cr fartype
  \ 2 digitname cr fartype
  \ 3 digitname cr fartype cr
  \ ----

  \ See: `/farsconstants`, `/sconstants`, `farsconstants,`.
  \
  \ }doc

[unneeded] /farsconstants ?exit

need /farsconstants,  need farsconstants-does>  need far,

: /farsconstants  ( 0 ca[n]..ca[1] "name" -- n )
  /farsconstants, farsconstants-does>  ;  exit ?)

  \ doc{
  \
  \ farsconstants  ( 0 ca[n]..ca[1] "name" -- )
  \
  \ Create a table of string constants _name_ in far memory,
  \ using counted strings _ca[n]..ca[1]_, being _0_ a mark for
  \ the last string on the stack.
  \
  \ When _name_ is executed, it converts the index on the stack
  \ (0.._n-1_) to the correspondent string _ca len_ in far
  \ memory.
  \
  \ Usage example:

  \ ----
  \
  \ 0                \ end of strings
  \   hp@ far," kvar"  \ string 4
  \   hp@ far," tri"   \ string 3
  \   hp@ far," du"    \ string 2
  \   hp@ far," unu"   \ string 1
  \   hp@ far," nul"   \ string 0
  \ /farsconstants digitname  constant digitnames
  \
  \ cr .( There are ) digitnames . .( digit names:)
  \ 0 digitname cr fartype
  \ 1 digitname cr fartype
  \ 2 digitname cr fartype
  \ 3 digitname cr fartype cr
  \ ----

  \ See: `farsconstants`, `sconstants`.
  \
  \ }doc

( save-farstring )

need cmove<far

: save-farstring  ( ca1 len1 -- ca2 len1 )
  dup allocate-string swap 2dup 2>r cmove<far 2r>  ;

  \ doc{
  \
  \ save-farstring  ( ca1 len1 -- ca2 len1 )
  \
  \ Save the string _ca1 len1_, which is in far memory, in the
  \ circular string buffer and return it at its new address as
  \ _ca2 len1_.
  \
  \ See: `save-string`, `csb0`.
  \
  \ }doc

( far>sconstants-does> far>sconstants /far>sconstants )

need ?(

[unneeded] far>sconstants-does> ?(

need array>  need save-farstring

: far>sconstants-does>  ( -- )
  does>  ( n -- ca len )
  ( n pfa ) @ array> far@ farcount save-farstring  ; ?)

[unneeded] far>sconstants ?(

need farsconstants, need far>sconstants-does>  need far,

: far>sconstants  ( 0 ca[n]..ca[1] "name" -- )
  farsconstants, far>sconstants-does>  ;  exit ?)

  \ doc{
  \
  \ far>sconstants  ( 0 ca[n]..ca[1] "name" -- )
  \
  \ Create a table of string constants _name_ in far memory,
  \ using counted strings _ca[n]..ca[1]_, being _0_ a mark for
  \ the last string on the stack.
  \
  \ When _name_ is executed, it converts the index on the stack
  \ (0.._n-1_) to the correspondent string _ca len_ in far
  \ memory and return a copy in the circular string buffer.
  \
  \ Usage example:

  \ ----
  \
  \ 0                  \ end of strings
  \   hp@ far," kvar"  \ string 4
  \   hp@ far," tri"   \ string 3
  \   hp@ far," du"    \ string 2
  \   hp@ far," unu"   \ string 1
  \   hp@ far," nul"   \ string 0
  \ farsconstants digitname
  \
  \ 0 digitname cr type
  \ 1 digitname cr type
  \ 2 digitname cr type
  \ 3 digitname cr type cr
  \ ----

  \ See: `/farsconstants`, `/sconstants`, `farsconstants,`.
  \
  \ }doc

[unneeded] /far>sconstants ?exit

need /farsconstants,  need far>sconstants-does>  need far,

: /far>sconstants  ( 0 ca[n]..ca[1] "name" -- n )
  /farsconstants, far>sconstants-does>  ;  exit ?)

  \ doc{
  \
  \ far>sconstants  ( 0 ca[n]..ca[1] "name" -- n )
  \
  \ Create a table of string constants _name_ in far memory,
  \ using counted strings _ca[n]..ca[1]_, being _0_ a mark for
  \ the last string on the stack, and return the number _n_ of
  \ compiled strings.
  \
  \ When _name_ is executed, it converts the index on the stack
  \ (0.._n-1_) to the correspondent string _ca len_ in far
  \ memory, and return a copy in the circular string buffer.
  \
  \ Usage example:

  \ ----
  \
  \ 0                \ end of strings
  \   hp@ far," kvar"  \ string 4
  \   hp@ far," tri"   \ string 3
  \   hp@ far," du"    \ string 2
  \   hp@ far," unu"   \ string 1
  \   hp@ far," nul"   \ string 0
  \ /farsconstants digitname  constant digitnames
  \
  \ cr .( There are ) digitnames . .( digit names:)
  \ 0 digitname cr type
  \ 1 digitname cr type
  \ 2 digitname cr type
  \ 3 digitname cr type cr
  \ ----

  \ See: `far>sconstants`, `/farsconstants`, `sconstants`,
  \ `/farsconstants,`.
  \
  \ }doc

  \ vim: filetype=soloforth

