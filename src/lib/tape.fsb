  \ tape.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html

  \ XXX UNDER DEVELOPMENT

  \ Last modified: 201604101656

  \ -----------------------------------------------------------
  \ Description

  \ Tape files support. The only supported filetype is "code".

  \ -----------------------------------------------------------
  \ Author

  \ Marcos Cruz (programandala.net), 2015, 2016.

  \ -----------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain every copyright, credit and authorship notice, and
  \ this license.  There is no warranty.

  \ -----------------------------------------------------------
  \ History

  \ 2015-12-04: Started adapting the tape words from the Afera
  \ library.
  \ 2015-12-23: Changes.
  \ 2016-04-10: Fixed. First working version.

  \ -----------------------------------------------------------
  \ Development documentation

  \ The information was guessed from from Don Thomasson's book
  \ _Advanced Spectrum Forth_ (page 119), the ZX Spectrum ROM
  \ disassembly (whose description of the tape headers is
  \ wrong), the _Abersoft Forth disassembled_ project
  \ (http://programandala.net/en.program.abersoft_forth.html)
  \ and the Afera library
  \ (http://programandala.net/en.program.afera.html).

  \ Structure of a tape header

  \ +00 : byte, filetype (3 for code files)
  \ +01 : 10-char filename, padded with spaces
  \ +11 : cell, length
  \ +13 : cell, start address
  \ +15 : cell, not used for code files

  \ Arrangement of both tape headers.

  \ IX addresses the first header, which must contain the data.
  \ The second header is used by the system when loading and
  \ verifying.

  \ NEW     OLD     PROG   DATA  DATA  CODE
  \ HEADER  HEADER  num    chr          NOTES
  \ ------  ------  ----   ----  ----  ----   ----------------------------
  \ IX+$00  IX+$11  0      1     2     3      Type
  \ IX+$01  IX+$12  x      x     x     x      F  ($FF if filename is null)
  \ IX+$02  IX+$13  x      x     x     x      i
  \ IX+$03  IX+$14  x      x     x     x      l
  \ IX+$04  IX+$15  x      x     x     x      e
  \ IX+$05  IX+$16  x      x     x     x      n
  \ IX+$06  IX+$17  x      x     x     x      a
  \ IX+$07  IX+$18  x      x     x     x      m
  \ IX+$08  IX+$19  x      x     x     x      e
  \ IX+$09  IX+$1A  x      x     x     x      .
  \ IX+$0A  IX+$1B  x      x     x     x      Padding spaces
  \ IX+$0B  IX+$1C  lo     lo    lo    lo     Total...
  \ IX+$0C  IX+$1D  hi     hi    hi    hi     ...length of datablock
  \ IX+$0D  IX+$1E  Auto   -     -     Start  Various
  \ IX+$0E  IX+$1F  Start  a-z   a-z   addr   ($80 if no autostart).
  \ IX+$0F  IX+$20  lo     -     -     -      Length of program only...
  \ IX+$10  IX+$21  hi     -     -     -      ...i.e. without variables

( write-tape-file read-tape-file )

17 constant /tape-header
  \ bytes per tape header

create tape-header  /tape-header 2 * allot
  \ save (=new) and load (=old) headers

10 constant /tape-filename \ filename max length

: tape-filetype  ( -- ca )  tape-header  ;
: tape-filename  ( -- ca )  tape-header 1+  ;
: tape-length    ( -- a )   tape-header 11 +  ;
: tape-start     ( -- a )   tape-header 13 +  ;

3 tape-filetype c!  \ "code" filetype by default

-->

( write-tape-file read-tape-file )

  \ XXX FIXME -- Don't show the message "Start tape, then press
  \ any key." and don't wait for a key before saving. Use
  \ direct calls to lower-level ROM routines.

code (tape)  ( n -- )
  E1 c,  C5 c,  78 05 + c,
    \ pop hl
    \ push bc ; save Forth IP
    \ ld a,l ; 0=save, 1=load, 2=verify
  DD c, 21 c, tape-header ,  2A c, tape-start ,
    \ ld ix,tape_header
    \ ld hl,(tape_start)
  32 c, 5C74 ,  CD c, 075A ,
    \ ld (5C74),A ; T_ADDR system variable
    \ call 075A ; SA_ALL ROM routine
  C1 c,  DD c, 21 c, next ,
    \ pop bc ; restore Forth IP
    \ ld ix,next ; restore the address of Forth next
  jpnext  end-code

  \ doc{
  \
  \ (tape)  ( n -- )
  \
  \ Tape primitive that uses the data stored at `tape-header`
  \ to save (n=0), load (n=1) or verify (n=2) a tape file.
  \
  \ }doc

-->

( write-tape-file read-tape-file )

: -tape-filename  ( -- )  tape-filename /tape-filename blank  ;

  \ doc{
  \
  \ -tape-filename  ( -- )
  \
  \ Blank the filename of the tape header.
  \
  \ }doc

: set-tape-filename  ( ca len -- )
  -tape-filename  /tape-filename min
  tape-filename swap cmove  ;

  \ doc{
  \
  \ set-tape-filename  ( ca len -- )
  \
  \ Store a filename into the tape header.
  \
  \ }doc

: any-tape-filename  ( -- )  255 tape-filename c!  ;
  \ Configure the tape header to load any filename,
  \ by replacing the first char of the filename with 255.

-->

( write-tape-file read-tape-file )

need save-display  need restore-display

: transfer-tape-file  ( ca len n -- )
  save-display
  >r  tape-length ! tape-start !  r> (tape)
  restore-display  ;

  \ doc{
  \
  \ : transfer-tape-file  ( ca len n -- )
  \
  \ Read or write the tape file whose filename and filetype
  \ have been already set in `tape-header`.  _n_ is 0 for
  \ writing or 1 for reading; _ca len_ is the memory zone.
  \
  \ }doc

: read-tape-file  ( ca1 len1 ca2 len2 -- )
  dup if    set-tape-filename
      else  2drop any-tape-filename
      then  1 transfer-tape-file  ;

  \ doc{
  \
  \ read-tape-file  ( ca1 len1 ca2 len2 -- )
  \
  \ Read a tape file _ca2 len2_ (_len2_ is zero if filename is
  \ unspecified) into a memory region _ca1 len1_.
  \
  \ _ca1_ is zero if the address must be taken from the file
  \ header instead, which is the address the file was saved
  \ from.  _len1_ is zero if is unspecified.
  \
  \ }doc

: write-tape-file  ( ca1 len1 ca2 len2 -- )
  set-tape-filename 0 transfer-tape-file  ;

  \ doc{
  \
  \ write-tape-file  ( ca1 len1 ca2 len2 -- )
  \
  \ Write a memory region _ca1 len1_ into a tape file _ca2
  \ len2_.
  \
  \ }doc

( .tape )

  \ XXX TMP -- for debugging

: .tape  ( -- )
  cr ." Tape header " tape-header u. cr
     ." Filetype    " tape-filetype c@ . cr
     ." Filename    " tape-filename /tape-filename type cr
     ." Length      " tape-length @ u. cr
     ." Start       " tape-start @ u. cr
     .s cr
     ." Press any key" key drop  ;

  \ vim: filetype=soloforth
