  \ tape.fsb
  \
  \ This file is part of Solo Forth
  \ http://programandala.net/en.program.solo_forth.html
  \ 
  \ This file contains words related to tape.
  \
  \ Copyright (C) 2015,2016 Marcos Cruz (programandala.net)

  \ -------------------------------------------------------------
  \ License

  \ You may do whatever you want with this work, so long as you
  \ retain all copyright notices, all credit notices, and this
  \ license in all files of all redistributed copies and derived
  \ works. There is no warranty.


( write-tape-file read-tape-file )

  \ XXX UNDER DEVELOPMENT -- second approach:
  \ save header and data apart

  \ Credits:
  \
  \ Code adapted from Afera.

  \ -----------------------------------------------------------
  \ Development documentation

  \ Credits:
  \
  \ Information retrieved from from Don Thomasson's book
  \ _Advanced Spectrum Forth_ (page 119).

  \ The load tape header is pointed by IX before calling the ROM
  \ routine. Its structure is the following:

  \ +00 : byte, filetype (3 for code files)
  \ +01 : 10-char filename, padded with spaces
  \ +11 : cell, length
  \ +13 : cell, start address
  \ +15 : cell, not used for code files

  \ The save (=old) tape header is right after the load (=new)
  \ header.

  \   Arrangement of two headers in workspace.
  \
  \   Originally IX addresses the load (=old) header, which is
  \   the only one header required when saving.

  \   OLD     NEW         PROG   DATA  DATA  CODE
  \   HEADER  HEADER             num   chr          NOTES.
  \   ------  ------      ----   ----  ----  ----   -----------------------------
  \   IX-$11  IX+$00      0      1     2     3      Type.
  \   IX-$10  IX+$01      x      x     x     x      F  ($FF if filename is null).
  \   IX-$0F  IX+$02      x      x     x     x      i
  \   IX-$0E  IX+$03      x      x     x     x      l
  \   IX-$0D  IX+$04      x      x     x     x      e
  \   IX-$0C  IX+$05      x      x     x     x      n
  \   IX-$0B  IX+$06      x      x     x     x      a
  \   IX-$0A  IX+$07      x      x     x     x      m
  \   IX-$09  IX+$08      x      x     x     x      e
  \   IX-$08  IX+$09      x      x     x     x      .
  \   IX-$07  IX+$0A      x      x     x     x      (terminal spaces).
  \   IX-$06  IX+$0B      lo     lo    lo    lo     Total
  \   IX-$05  IX+$0C      hi     hi    hi    hi     Length of datablock.
  \   IX-$04  IX+$0D      Auto   -     -     Start  Various
  \   IX-$03  IX+$0E      Start  a-z   a-z   addr   ($80 if no autostart).
  \   IX-$02  IX+$0F      lo     -     -     -      Length of Program
  \   IX-$01  IX+$10      hi     -     -     -      only i.e. without variables.

17 constant /tape-header
  \ bytes per tape header

  \ After the book by Don Thomasson:
create tape-header  /tape-header 2 * allot
  \ load (=new) and save (=old) headers

  \ After the ROM disassembly:
  \
  \ /tape-header allot  \ old header
  \ create tape-header  /tape-header allot  \ new header

10 constant /tape-filename \ filename max length

: tape-filetype  ( -- ca )  tape-header  ;
: tape-filename  ( -- ca )  tape-header 1+  ;
: tape-length    ( -- a )   tape-header 11 +  ;
: tape-start     ( -- a )   tape-header 13 +  ;

3 tape-filetype c!  \ "code" filetype by default

code (tape)  ( n -- )
  E1 c,  C5 c,  78 05 + c,
    \ pop hl
    \ push bc ; save Forth IP
    \ ld a,l ; 1=load, 0=save
  DD c, 21 c, tape-header ,  2A c, tape-length ,
    \ ld ix,tape_header
    \ ld hl,(tape_length)
  32 c, 5C74 ,  CD c, 075A ,
    \ ld (5C74),A ; T_ADDR system variable
    \ call 075A ; SA_ALL ROM routine ; XXX FIXME crash!
  C1 c,  DD c, 21 c, next ,
    \ pop bc ; restore Forth IP
    \ ld ix,next ; restore the address of Forth next
  jpnext  end-code
  \ Tape primitive that uses the data stored at
  \ `tape-header` to load (n=1) or save (n=0)
  \ a tape file.

-->

( write-tape-file read-tape-file )

: -tape-filename  ( -- )  tape-filename /tape-filename blank ;
  \ Blank the filename of the load header.

: set-tape-filename  ( ca len -- )
  -tape-filename  /tape-filename min
  tape-filename swap cmove  ;
  \ Store a filename into the load header.

: any-tape-filename  ( -- )  255 tape-filename c!  ;
  \ Configure the load header to load any filename.

: transfer-tape-file  ( ca len n -- )
  >r tape-length ! tape-start !
  tape-header dup /tape-header + /tape-header move  \ XXX TMP
  \ save-mode default-mode
  2 23659 c!
    \ system variable DF_SZ (lines in the lower screen)
  r> (tape)
  0 23659 c!
    \ system variable DF_SZ (lines in the lower screen)
  \ restore-mode
    ;
  \ Read or write the tape file whose filename and filetype
  \ have been already set in the tape header.  _n_ is 0 for
  \ writing or 1 for reading; _ca len_ is the memory zone.

-->

( write-tape-file read-tape-file )

: read-tape-file  ( ca1 len1 ca2 len2 -- )
  dup if    set-tape-filename
      else  2drop any-tape-filename
      then  1 transfer-tape-file  ;
  \ Read a tape file into a memory region.
  \ ca1 len1 = memory zone (len1 is zero if unspecified)
  \ ca2 len2 = filename (len2 is zero if unspecified)

: write-tape-file  ( ca1 len1 ca2 len2 -- )
  set-tape-filename 0 transfer-tape-file  ;
  \ Write a memory region into a tape file.
  \ ca1 len1 = memory zone
  \ ca2 len2 = filename

( write-tape-file read-tape-file )

  \ XXX UNDER DEVELOPMENT -- first approach
  \ XXX FIXME

  \ Credits:
  \
  \ Code adapted from Afera.

  \ -----------------------------------------------------------
  \ Development documentation

  \ Credits:
  \
  \ Information retrieved from from Don Thomasson's book
  \ _Advanced Spectrum Forth_ (page 119).

  \ The load tape header is pointed by IX before calling the ROM
  \ routine. Its structure is the following:

  \ +00 : byte, filetype (3 for code files)
  \ +01 : 10-char filename, padded with spaces
  \ +11 : cell, length
  \ +13 : cell, start address
  \ +15 : cell, not used for code files

  \ XXX FIXME This information from the ZX Spectrum ROM
  \ disassembly is contradictory:

  \ The save tape header is right after the save header.

  \   Arrangement of two headers in workspace.
  \   Originally IX addresses first location and only one header is required
  \   when saving.
  \
  \   OLD     NEW         PROG   DATA  DATA  CODE
  \   HEADER  HEADER             num   chr          NOTES.
  \   ------  ------      ----   ----  ----  ----   -----------------------------
  \   IX-$11  IX+$00      0      1     2     3      Type.
  \   IX-$10  IX+$01      x      x     x     x      F  ($FF if filename is null).
  \   IX-$0F  IX+$02      x      x     x     x      i
  \   IX-$0E  IX+$03      x      x     x     x      l
  \   IX-$0D  IX+$04      x      x     x     x      e
  \   IX-$0C  IX+$05      x      x     x     x      n
  \   IX-$0B  IX+$06      x      x     x     x      a
  \   IX-$0A  IX+$07      x      x     x     x      m
  \   IX-$09  IX+$08      x      x     x     x      e
  \   IX-$08  IX+$09      x      x     x     x      .
  \   IX-$07  IX+$0A      x      x     x     x      (terminal spaces).
  \   IX-$06  IX+$0B      lo     lo    lo    lo     Total
  \   IX-$05  IX+$0C      hi     hi    hi    hi     Length of datablock.
  \   IX-$04  IX+$0D      Auto   -     -     Start  Various
  \   IX-$03  IX+$0E      Start  a-z   a-z   addr   ($80 if no autostart).
  \   IX-$02  IX+$0F      lo     -     -     -      Length of Program
  \   IX-$01  IX+$10      hi     -     -     -      only i.e. without variables.

17 constant /tape-header
  \ bytes per tape header

  \ After the book by Don Thomasson:
create tape-header  /tape-header 2 * allot
  \ load (=new) and save (=old) headers

  \ After the ROM disassembly:
  \
  \ /tape-header allot  \ old header
  \ create tape-header  /tape-header allot  \ new header

10 constant /tape-filename \ filename max length

: tape-filetype  ( -- ca )  tape-header  ;
: tape-filename  ( -- ca )  tape-header 1+  ;
: tape-length    ( -- a )   tape-header 11 +  ;
: tape-start     ( -- a )   tape-header 13 +  ;

3 tape-filetype c!  \ "code" filetype by default

code (tape)  ( n -- )
  E1 c,  C5 c,  78 05 + c,
    \ pop hl
    \ push bc ; save Forth IP
    \ ld a,l ; 1=load, 0=save
  DD c, 21 c, tape-header ,  2A c, tape-length ,
    \ ld ix,tape_header
    \ ld hl,(tape_length)
  32 c, 5C74 ,  CD c, 075A ,
    \ ld (5C74),A ; T_ADDR system variable
    \ call 075A ; SA_ALL ROM routine
  C1 c,  DD c, 21 c, next ,
    \ pop bc ; restore Forth IP
    \ ld ix,next ; restore the address of Forth next
  jpnext  end-code
  \ Tape primitive that uses the data stored at
  \ `tape-header` to load (n=1) or save (n=0)
  \ a tape file.

-->

( write-tape-file read-tape-file )

: -tape-filename  ( -- )  tape-filename /tape-filename blank ;
  \ Blank the filename of the load header.

: set-tape-filename  ( ca len -- )
  -tape-filename  /tape-filename min
  tape-filename swap cmove  ;
  \ Store a filename into the load header.

: any-tape-filename  ( -- )  255 tape-filename c!  ;
  \ Configure the load header to load any filename.

: transfer-tape-file  ( ca len n -- )
  >r tape-length ! tape-start !  r> (tape)  ;
  \ Read or write the tape file whose filename and filetype
  \ have been already set in the tape header.  _n_ is 0 for
  \ writing or 1 for reading; _ca len_ is the memory zone.

: read-tape-file  ( ca1 len1 ca2 len2 -- )
  dup if    set-tape-filename
      else  2drop any-tape-filename
      then  1 transfer-tape-file  ;
  \ Read a tape file into a memory region.
  \ ca1 len1 = memory zone (len1 is zero if unspecified)
  \ ca2 len2 = filename (len2 is zero if unspecified)

: write-tape-file  ( ca1 len1 ca2 len2 -- )
  set-tape-filename 0 transfer-tape-file  ;
  \ Write a memory region into a tape file.
  \ ca1 len1 = memory zone
  \ ca2 len2 = filename

  \ vim: filetype=soloforth
