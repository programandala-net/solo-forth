; kernel.trdos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; XXX UNDER DEVELOPMENT

; Last modified: 201608041725

; ==============================================================
; Description

; The part of the Solo Forth's kernel that is specific to TR-DOS.
; Not finished.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2016.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; History

; See
; http://programandala.net/en.program.solo_forth.history.html

; ==============================================================

if defined trdos


trdos_do_command equ $3D13
  ; Routine to execute a TR-DOS command.
  ; Input:
  ;   C = command

trdos_read_sectors_command equ $05
trdos_write_sectors_command equ $06

; ----------------------------------------------
  _constant_header rec_slash_track_,'REC/TRACK'

; doc{
;
; rec/track  ( -- n )
;
; Records (sectors) per disk track.
;
; }doc

  dw 16
  ; XXX TODO -- use a label and move to the kernel

; ----------------------------------------------
  _colon_header sector_id_,'SECTOR-ID'

; doc{

; sector-id  ( n -- x )

; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by TR-DOS: The high byte of _x_
; is the track (0..79 for side 0; 80..159 for side 1); its low
; byte is the sector (0..15).
;
; ----
; : sector-id  ( n -- x )
;   \ x (high byte) = track 0..79 for side 0, 80..159 for side 1
;   \   (low byte)  = sector 0..15
;   rec/track +             \ the first track is not used
;   dup sectors/track mod   ( n sector )
;   swap sectors/track /    ( sector track )
;   flip or  ;
; ----
;
; }doc

  dw rec_slash_track_,plus_  ; the first track is not used
  dw dup_,rec_slash_track_,mod_
  dw swap_,rec_slash_track_,slash_
  dw flip_,or_
  dw exit_

; ----------------------------------------------
  _colon_header read_block_,'READ-BLOCK'

; doc{
;
; read-block  ( n -- )
;
; Read disk block _n_ to the buffer.
;
; ----
; : read-block  ( n -- )
;   read-mode transfer-block  ;
; ----
;
; }doc

  dw read_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header write_block_,'WRITE-BLOCK'

; doc{
;
; write-block  ( n -- )
;
; Write the buffer to disk block _n_.
;
; ----
; : write-block  ( n -- )
;   write-mode transfer-block  ;
; ----
;
; }doc

  dw write_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'TRANSFER-BLOCK'

; doc{
;
; transfer-block  ( n -- )
;
; The block-level disk read-write linkage.
; Transfer block _n_ to or from disk.
; The read or write mode must be previously set
; by `write-mode` or `read-mode`.
;
; ----
; : transfer-block  ( n -- )
;   rec/blk * sector-id buffer-data rec/blk transfer-sectors  ;
;
; ----
; }doc

  ; XXX TODO restore the current drive

  dw rec_slash_blk_,star_ ; sequential number of the first sector of the block
  dw sector_id_
  dw buffer_data_
  dw rec_slash_blk_
  dw transfer_sectors_
  dw exit_

; ----------------------------------------------
  _code_header transfer_sectors_,'TRANSFER-SECTORS'

; doc{
;
; transfer-sectors  ( x a n -- )
;
; The sector-level disk read-write linkage.  Transfer _n_ sectors from
; memory address _a_ to disk sector _x_ or the other way around.  The
; read or write mode must be previously set by `write-mode` or
; `read-mode`.
;
; The high byte of _x_ is the track (0..79 for side 0; 80..159 for
; side 1); its low byte is the sector (0..15).
;
; See `sector-id`.
;
; }doc

  pop hl
  ld a,l    ; number of sectors
  pop hl    ; address
  pop de    ; d = track 0..159; e = sector 0..15
  push ix   ; save the address of `next`
  push bc   ; save the Forth IP
  ld b,a    ; number of sectors
transfer_sectors.command equ $+1
  ld c,trdos_read_sectors_command
  ;_z80_border_wait 4 ; XXX INFORMER
  call trdos_do_command
  ;_z80_border_wait 2 ; XXX INFORMER
  ; XXX TODO -- check error code returned in bc
  pop bc    ; restore the Forth IP
  pop ix    ; restore the address of `next`
  _z80_border_wait 1 ; XXX INFORMER
  _jp_next

; ----------------------------------------------
;  _colon_header library_disk_,'LIBRARY-DISK'

; doc{
;
; library-disk  ( c -- )
;
; Set disk drive _c_ ('a', 'b', 'c' or 'd') as the current library
; disk.  By default it's disk drive 'b'.
;
; }doc

  ; XXX TMP -- for debugging

  _colon_header set_drive_,'SET-DRIVE'
  ; _literal transfer_sector.drive
  _literal 23833
  dw c_store_
  dw exit_
  
  _colon_header get_drive_,'GET-DRIVE'
  ; _literal transfer_sector.drive
  _literal 23833
  dw c_fetch_
  dw exit_

; ----------------------------------------------
  _colon_header write_mode_,'WRITE-MODE'

; doc{
;
; write-mode  ( -- )
;
; Set the write mode for `transfer-sectors` and `transfer-block`.
;
; }doc

  _literal trdos_write_sectors_command
  dw branch_,transfer_mode

; ----------------------------------------------
  _colon_header read_mode_,'READ-MODE'

; doc{
;
; read-mode  ( -- )
;
; Set the read mode for `transfer-sectors` and `transfer-block`.
;
; }doc

  _literal trdos_read_sectors_command
transfer_mode:
  _literal transfer_sectors.command
  dw c_store_
  dw exit_

endif

; vim: filetype=z80:textwidth=64
