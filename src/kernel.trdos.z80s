; kernel.trdos.z80s

; This file is part of Solo Forth
; http://programandala.net/en.program.solo_forth.html

; XXX UNDER DEVELOPMENT

; Last modified: 201608042240

; ==============================================================
; Description

; The part of the Solo Forth's kernel that is specific to TR-DOS.

; ==============================================================
; Author

; Marcos Cruz (programandala.net), 2016.

; ==============================================================
; License

; You may do whatever you want with this work, so long as you
; retain every copyright, credit and authorship notice, and this
; license.  There is no warranty.

; ==============================================================
; History

; See
; http://programandala.net/en.program.solo_forth.history.html

; ==============================================================

if defined trdos

; ==============================================================
; TR-DOS Commands

trdos_routine.execute_command             equ 15635 ; $3D13
  ; Routine to execute a TR-DOS command, whose code is in the C
  ; register.

trdos_command.init_drive                  equ $01
trdos_command.read_sectors                equ $05
trdos_command.write_sectors               equ $06
trdos_command.cat                         equ $07
trdos_command.read_file_descriptor        equ $08
trdos_command.write_file_descriptor       equ $09
trdos_command.find_file                   equ $0A
trdos_command.save_code_file              equ $0B
trdos_command.save_basic_program          equ $0C
trdos_command.delete_file                 equ $12
trdos_command.copy_from_hl_to_descriptor  equ $13
trdos_command.copy_from_descriptor_to_hl  equ $14
trdos_command.test_track                  equ $15
trdos_command.select_bottom_side          equ $16
trdos_command.selet_top_side              equ $17
trdos_command.read_system_track           equ $18

; ==============================================================
; TR-DOS variables

trdos_variable.current_drive              equ 23798
trdos_variable.default_drive              equ 23833

; ==============================================================
; Routines

; ------------------------------
; DOS call

dos:

if 0

  push bc   ; save the Forth IP
  push ix   ; save the address of `next`
dos.command equ $+1
  ld c,0    ; DOS command (must be patched before calling)
  call trdos_routine.execute_command
  ld a,c    ; error code
  pop ix    ; restore the address of `next`
  pop bc    ; restore the Forth IP
  ret

else

; Input:
;   (dos.command) = command
; Output:
;   A  = error code or zero
;   BC = error code or zero
;   Z  = no error?

dos.command equ $+1
  ld c,0    ; DOS command (must be patched before calling)
  call trdos_routine.execute_command
  ld a,c    ; error code
  and a
  ret

endif

back_from_dos:
;   A  = error code or zero
;   Z  = no error?
  jp z,false_

back_from_dos.error:
  ; a = error code
  call convert_dos_error_code
  ; hl = error code
  _jp_pushhl

convert_dos_error_code:
  ; Input:   a  = original DOS error code (0..12)
  ; Outptut: hl = DOS error code converted to Forth range (-1012..-1000)
  ; XXX TODO make a Forth word to access this code?
  ld h,0
  ld l,a
convert_dos_error_code.hl:
  ld de,1000
  add hl,de
  _z80_border_wait 2 ; XXX INFORMER
  jp negate_hl

; ==============================================================
; Dictionary

; ----------------------------------------------
  _constant_header rec_slash_track_,'REC/TRACK'

; doc{
;
; rec/track  ( -- n )
;
; Records (sectors) per disk track.
;
; }doc

  dw 16
  ; XXX TODO -- use a label and move to the kernel

; ----------------------------------------------
  _colon_header sector_id_,'SECTOR-ID'

; doc{

; sector-id  ( n -- x )

; Convert the sequential disk sector _n_ to the disk sector id
; _x_, in the format required by TR-DOS: The high byte of _x_
; is the track (0..79 for side 0; 80..159 for side 1); its low
; byte is the sector (0..15).
;
; ----
; : sector-id  ( n -- x )
;   \ x (high byte) = track 0..79 for side 0, 80..159 for side 1
;   \   (low byte)  = sector 0..15
;   rec/track +             \ the first track is not used
;   dup sectors/track mod   ( n sector )
;   swap sectors/track /    ( sector track )
;   flip or  ;
; ----
;
; }doc

  dw rec_slash_track_,plus_  ; the first track is not used
  dw dup_,rec_slash_track_,mod_
  dw swap_,rec_slash_track_,slash_
  dw flip_,or_
  dw exit_

; ----------------------------------------------
  _colon_header read_block_,'READ-BLOCK'

; doc{
;
; read-block  ( n -- )
;
; Read disk block _n_ to the buffer.
;
; ----
; : read-block  ( n -- )
;   read-mode transfer-block  ;
; ----
;
; }doc

  dw read_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header write_block_,'WRITE-BLOCK'

; doc{
;
; write-block  ( n -- )
;
; Write the buffer to disk block _n_.
;
; ----
; : write-block  ( n -- )
;   write-mode transfer-block  ;
; ----
;
; }doc

  dw write_mode_,transfer_block_
  dw exit_

; ----------------------------------------------
  _colon_header transfer_block_,'TRANSFER-BLOCK'

; doc{
;
; transfer-block  ( n -- )
;
; The block-level disk read-write linkage.
; Transfer block _n_ to or from disk.
; The read or write mode must be previously set
; by `write-mode` or `read-mode`.
;
; ----
; : transfer-block  ( n -- )
;   rec/blk * sector-id buffer-data rec/blk transfer-sectors  ;
;
; ----
; }doc

  ; XXX TODO restore the current drive

  dw rec_slash_blk_,star_ ; sequential number of the first sector of the block
  dw sector_id_
  dw buffer_data_
  dw rec_slash_blk_
  dw transfer_sectors_
  dw exit_

; ----------------------------------------------
  _code_header transfer_sectors_,'TRANSFER-SECTORS'

if 0

; doc{
;
; transfer-sectors  ( x a n -- )
;
; The sector-level disk read-write linkage.  Transfer _n_ sectors from
; memory address _a_ to disk sector _x_ or the other way around.  The
; read or write mode must be previously set by `write-mode` or
; `read-mode`.
;
; The high byte of _x_ is the track (0..79 for side 0; 80..159 for
; side 1); its low byte is the sector (0..15).
;
; See `sector-id`.
;
; }doc

  pop hl
  ld a,l    ; number of sectors
  pop hl    ; address
  pop de    ; d = track 0..159; e = sector 0..15
  push ix   ; save the address of `next`
  push bc   ; save the Forth IP
  ld b,a    ; number of sectors
transfer_sectors.command equ $+1
  ld c,trdos_command.read_sectors
  call trdos_routine.execute_command
  ; XXX TODO -- check error code returned in bc
  pop bc    ; restore the Forth IP
  pop ix    ; restore the address of `next`
  _jp_next

else

; doc{
;
; transfer-sectors  ( x a n -- ior )
;
; The sector-level disk read-write linkage.  Transfer _n_ sectors from
; memory address _a_ to disk sector _x_ or the other way around.  The
; read or write mode must be previously set by `write-mode` or
; `read-mode`.
;
; The high byte of _x_ is the track (0..79 for side 0; 80..159 for
; side 1); its low byte is the sector (0..15).
;
; See `sector-id`.
;
; }doc

  ; XXX FIXME -- when there's no disk in the drive, the system never
  ; returns from the DOS.

transfer_sectors.command equ $+1
  ld a,trdos_command.read_sectors
  ld (dos.command),a
  pop hl
  ld a,l    ; number of sectors
  pop hl    ; address
  pop de    ; d = track 0..159; e = sector 0..15
  push ix   ; save the address of `next`
  push bc   ; save the Forth IP
  ld b,a    ; number of sectors
  call dos
  ; XXX TODO -- check error code returned in bc
  pop bc    ; restore the Forth IP
  pop ix    ; restore the address of `next`
  jp back_from_dos

endif



; XXX TODO -- flash the border, like G+DOS

; ----------------------------------------------
;  _colon_header library_disk_,'LIBRARY-DISK'

; doc{
;
; library-disk  ( c -- )
;
; Set disk drive _c_ ('a', 'b', 'c' or 'd') as the current library
; disk.  By default it's disk drive 'b'.
;
; }doc

  ; XXX TMP -- for debugging

; ----------------------------------------------
  _code_header init_drive_,'INIT-DRIVE'

if 0

; doc{
;
; init-drive  ( n -- )
;
; }doc

; Note: this TR-DOS routine stores the drive number in
; `trdos_variable.current_drive`.

  pop hl
  ld a,l    ; drive number (0..3)
  push bc   ; save the Forth IP
  push ix   ; save the address of `next`
  ld c,trdos_command.init_drive
  call trdos_routine.execute_command
  pop ix    ; restore the address of `next`
  pop bc    ; restore the Forth IP
  _jp_next

else

; doc{
;
; init-drive  ( n -- ior )
;
; }doc

; Note: this TR-DOS routine stores the drive number in
; `trdos_variable.current_drive`.

  ; XXX FIXME -- when there's no disk in the drive, the system never
  ; returns from the DOS.

  ld a,trdos_command.init_drive
  ld (dos.command),a
  pop hl
  ld a,l    ; drive number (0..3)
  push bc   ; save the Forth IP
  push ix   ; save the address of `next`
  call dos
  pop ix    ; restore the address of `next`
  pop bc    ; restore the Forth IP
  _z80_border_wait 1 ; XXX INFORMER
  jp back_from_dos

endif

; ----------------------------------------------
  _colon_header set_drive_,'SET-DRIVE'

  ; XXX FIXME -- hang:
  ;_literal trdos_variable.current_drive
  ;dw c_store_

  ; XXX FIXME -- no effect:
  ; _literal trdos_variable.default_drive
  ; dw c_store_

  ; XXX FIXME -- hang:
  ; dw dup_,init_drive_
  ; _literal trdos_variable.default_drive
  ; dw c_store_

  ; XXX TODO -- how to set the default drive?

  ; XXX FIXME -- no effect:
  dw dup_
  _literal trdos_variable.default_drive
  dw c_store_
  _literal trdos_variable.current_drive
  dw c_store_

  dw exit_

; ----------------------------------------------
  _colon_header get_drive_,'GET-DRIVE'

  _literal trdos_variable.current_drive
  dw c_fetch_
  dw exit_

; Value of some TR-DOS variables after changing the default drive with
; command `*"a"`, `*"b"`, etc.
;
;        A  B  C  D
;
; 23798  0  1  2  3  = current drive
; 23800  0  0  0  0
; 23801  0  0  0  0
; 23833  0  1  2  3  = default drive

; ----------------------------------------------
  _colon_header write_mode_,'WRITE-MODE'

; doc{
;
; write-mode  ( -- )
;
; Set the write mode for `transfer-sectors` and `transfer-block`.
;
; }doc

  _literal trdos_command.write_sectors
  dw branch_,transfer_mode

; ----------------------------------------------
  _colon_header read_mode_,'READ-MODE'

; doc{
;
; read-mode  ( -- )
;
; Set the read mode for `transfer-sectors` and `transfer-block`.
;
; }doc

  _literal trdos_command.read_sectors
transfer_mode:
  _literal transfer_sectors.command
  dw c_store_
  dw exit_

; ----------------------------------------------
  _colon_header type_ascii_,'TYPE-ASCII'

  ; XXX TMP -- for debugging

; : type-ascii  ( ca len -- )
;   bounds ?do
;     i c@ dup dup ascii-char? 0= swap control-char? or
;     if  drop '.'  then  emit
;   loop  ;

  dw bounds_
  dw paren_question_do_,type_ascii.loop_exit
  dw i_,c_fetch_,dup_,dup_
  _literal 127
  dw greater_than_
  dw swap_,b_l_,less_than_,or_
  dw zero_branch_,type_ascii.then
  dw drop_
  _literal '.'
type_ascii.then
  dw emit_
  dw paren_loop_
type_ascii.loop_exit
  dw exit_

; ----------------------------------------------
  _colon_header trdos_tester_,'TRDOS-TESTER'

  ; XXX TMP -- for debugging

; : trdos-tester  ( u1 u2 -- )
;   page
;   1+ swap ?do
;     i block drop
;     i 3 .r space buffer-data 28 type-ascii
;     key 'q' = if  unloop exit  then
;   loop  ;
; ----

; Read a range of blocks, waiting for a key after every block is read,
; in order to check if they are right, using the memory viewer of the
; Fuse emulator.

  dw page_
  dw one_plus_,swap_
  dw paren_question_do_,trdos_tester.loop_exit
  dw i_,block_,drop_
  dw i_
  _literal 3
  dw dot_r_,space_
  dw buffer_data_
  _literal 28
  dw type_ascii_
  dw key_
  _literal 'q'
  dw equals_
  dw zero_branch_,trdos_tester.continue
  dw unloop_,exit_
trdos_tester.continue
  dw paren_loop_
trdos_tester.loop_exit
  dw exit_

endif

; vim: filetype=z80:textwidth=64
