( Solo Forth library )                                          \ http://programandala.net/en.program.solo_forth.htmlload                                                            need --fp-rom--                                                 100 s>f  200 s>f  300 s>fcontains delimited located )                                  : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;       variable default-first-locatable  variable first-locatable      variable last-locatable  blk/disk 1- last-locatable !           : delimited  ( ca1 len1 -- ca2 len2 )                             dup 2+ dup allocate-string swap  ( ca1 len1 ca2 len2 )          2dup blank  2dup 2>r drop char+ smove 2r>  ;                  : located  ( ca len -- block | false )                            delimited  last-locatable @ 1+  first-locatable @               default-first-locatable @  first-locatable !                    do  0 i line>string 2over                                           contains if  2drop i unloop exit  then                          break-key? ?leave                                           loop  2drop 0  ;                                              -->                                                                                                                             ( ?located locate from reneeded reneed )                        : ?located  ( block | 0 -- )  dup 0= #-268 ?throw  ;            : locate  ( "name" -- block | 0 )                                 parse-name save-string located  ;                             : from  ( "name" -- )  locate ?located first-locatable !  ;     defer reneeded  ( ca len -- )                                   : locate-reneeded  ( ca len -- )  located ?located load  ;      defer reneed  ( "name" -- )                                     : locate-reneed  ( "name" -- )                                    parse-name save-string reneeded  ;                            -->                                                                                                                                                                                                                                                                                                                                                                                             ( needed-word [needed] [unneeded] )                             2variable needed-word                                           : [needed]  ( "name" -- wf )                                      parse-name needed-word 2@ 2dup or                               if  compare 0=  exit  then  2drop 2drop true   ; immediate    : [unneeded]  ( "name" -- wf )                                    postpone [needed] 0=  ; immediate                             : new-needed-word  ( ca len -- ca len )                           -trailing -leading save-string 2dup needed-word 2!  ;         -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( needed need )                                                 defer needed  ( ca len -- )                                     : locate-needed  ( ca len -- )                                    needed-word 2@ 2>r  new-needed-word  2dup undefined?            if  locate-reneeded  else  2drop  then  2r> needed-word 2!  ; defer need  ( "name" -- )                                       : locate-need  ( "name" -- )  parse-name needed  ;              : set-located-need  ( -- )                                        ['] locate-reneeded ['] reneeded  defer!                        ['] locate-reneed   ['] reneed    defer!                        ['] locate-need     ['] need      defer!                        ['] locate-needed   ['] needed    defer!  ;                   set-located-need                                                blk @ 1+ dup default-first-locatable !  first-locatable !                                                                                                                                       ( macro )                                                       need get-order                                                  get-order get-current                                           only forth definitions  also assembler                          : macro  ( "name" -- )  : asm  ;                                : endm  ( -- )  end-asm postpone ;  ;  immediate                set-current  set-orderneed @c+  need for                                              : <<  ( -- a depth )  here depth  ;                             : >>  ( a depth -- )                                              depth 1- - #-258 ?throw cr base @ >r hex                        dup 4 u.r space  here over - for  c@+ 3 u.r  step drop          r> base !  spacez80-asm, )                                                    only forth definitions                                          need ?pairs  need 3dup                                          : 8*   ( n1 -- n2 )  2* 2* 2*  ;                                : z80-asm,  ( -- )  assembler  ;                                also assembler definitions hexz80-asm, )                                                    0 constant b   1 constant c   2 constant d   3 constant e       4 constant h   5 constant l   6 constant m   7 constant a       0 constant bc  2 constant de  4 constant hl                     6 constant sp  6 constant af                                    DD constant ix-op  FD constant iy-op                            : ix  ( -- rphl )  ix-op c, hl  ;                               : iy  ( -- rphl )  iy-op c, hl  ;                               : ?page  ( n -- n )  dup 80 + FF swap u< #-269 ?throw  ;        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm, )                                                    : m1  ( 8b "name" -- )                                            create c, does>  ( -- )  ( pfa ) c@ c,  ;                     : m2  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ + c,  ;               : m3  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ swap 8* + c,  ;       : m4  ( 8b "name" -- )                                            create c, does>  ( 8b -- )  ( 8b pfa ) c@ c, c,  ;            : m5  ( 8b "name" -- )                                            create c, does>  ( 16b -- )  ( 16b pfa ) c@ c, ,  ;           : m6  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) CB c, c@ + c,  ;           -->                                                                                                                                                                                           ( z80-asm, )                                                    : m7  ( 8b "name" -- )                                            create c, does>  ( r bit -- )                                     ( r bit pfa ) CB c, c@ swap 8* + + c,  ;                    : m8  ( 16b "name" -- )                                           create , does>  ( -- )  ( pfa ) @ ,  ;                        : m9  ( 8b "name" -- )                                            create c, does>  ( a -- )                                         ( a pfa )  c@ c, here 1+ - ?page c,  ;                      -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm, )                                                    : ma  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) c@ c, drop c,  ;                          : mb  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) CB c, c@ c, drop c,  ;                    : mc  ( 8b "name" -- )                                            create c, does>  ( disp rphl bit -- )                             ( disp rphl bit pfa )                                           CB c, c@ rot drop rot c, swap 8* + c,  ;                    -->                                                                                                                                                                                                                                                                                                                             ( z80-asm, )                                                    00 m1 nop, 02 m3 stap, 03 m3 incp, 04 m3 inc, 05 m3 dec, 07 m1  rlca, 08 m1 exaf, 09 m3 addp, 0A m3 ftap, 0B m3 decp, 0F m1     rrca, 10 m9 djnz, 17 m1 rla, 18 m9 jr,  1F m1 rra, 20 m9 jrnz,  22 m5 sthl, 27 m1 daa, 28 m9 jrz, 2A m5 fthl, 2F m1 cpl, 30 m9  jrnc, 32 m5 sta, 37 m1 scf, 38 m9 jrc, 3A m5 fta, 3F m1 ccf, 76 m1 halt, 80 m2 add, 88 m2 adc, 90 m2 sub, 98 m2 sbc, B8 m2 cp,  C1 m3 pop, C2 m5 jpnz, C3 m5 jp, C5 m3 push, C6 m4 add#, C7 m2  rst, C9 m1 ret, CA m5 jpz, CD m5 call, CE m4 adc#, D2           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm, )                                                    m5 jpnc, D3 m4 out, 41 m3 outbc, D6 m4 sub#, D9 m1 exx, DA m5   jpc, DB m4 in, 40 m3 inbc, 0DE m4 sbc#, E2 m5 jppo, E3 m1       exsp, E6 m4 and#, E9 m1 jphl, EA m5 jppe, EB m1 exde, EE m4     xor#, F2 m5 jpp, F3 m1 di,  F6 m4 or#, F9 m1 ldsp, FA m5 jpm,   FB m1 ei, FE m4 cp#, 00 m6 rlc, 08 m6 rrc, 10 m6 rl, 18 m6      rr, 20 m6 sla,  28 m6 sra, 38 m6 srl,  40 m7 bit, 80 m7 res, C0 m7 set, B0ED m8 ldir, B8ED m8 lddr, 44ED m8 neg, 57ED m8 ldai,  47ED m8 ldia, 56ED m8 im1 5EED m8 im2 B1ED m8 cpir, 6FED m8     rld,                                                            -->                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm, )                                                    : jpix,  ( -- )  ix-op c, jphl,  ;                              : ldp#,  ( 16b rp -- )  8* 1+ c, ,  ;                           : ld#,  ( 8b r -- )  8* 06 + c, c,  ;                           : ld,  ( r1 r2 -- )  8* 40 + + c,  ;                            : sbcp,  ( rp -- )  ED c, 8* 42 + c,  ;                         : adcp,  ( rp1 rp2 -- )  ED c, 8* 4A + c,  ;                    : stp,  ( a rp -- )  ED c, 8* 43 + c, ,  ;                      : ftp,  ( a rp -- )  ED c, 8* 4B + c, ,  ;                      : addix,  ( rp -- )  ix-op c, addp,  ;                          : addiy,  ( rp -- )  iy-op c, addp,  ;                          : clr,  ( rp -- )  0 swap ldp#,  ;                              : ldp,  ( rp1 rp2 -- )  2dup ld, 1+ swap 1+ swap ld,  ;         CF m4 hook, \ rst 0x08                                          D7 m1 prt,  \ rst 0x16                                          -->                                                             ( z80-asm, )                                                    86 ma addx, 8E ma adcx, 96 ma subx, 9E ma sbcx, A6 ma andx,     AE ma xorx, B6 ma orx,  BE ma cpx,  34 ma incx, 35 ma decx,     06 mb rlcx, 0E mb rrcx, 16 mb rlx,  1E mb rrx,  26 mb slax,     2E mb srax, 3E mb srlx, 46 mc bitx, 86 mc resx, C6 mc setx,     : ftx,   ( disp rpi r -- )   nip 8* 46 + c, c,  ;               : stx,   ( r disp rphl -- )  drop swap 70 + c, c,  ;            : st#x,  ( 8b disp rpi -- )  drop 36 c, swap c, c,  ;           : ftpx,  ( disp rpi rp -- )  3dup 1+ ftx, rot 1+ -rot ftx,  ;   : stpx,  ( disp rpi rp -- )  3dup 1+ stx, rot 1+ -rot stx,  ;   -->                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm, )                                                    C2 constant z  CA constant nz D2 constant cy DA constant nc     E2 constant pe EA constant po F2 constant ne  FA constant p     : jp>jr  ( op1 -- op2 )  dup nc > #-273 ?throwz80-asm, )                                                    : ?ret,  ( op -- )  8 xor 2- c,  ;                              : retc,   ( -- )  cy ?ret,  ;    : retnc,  ( -- )  nc ?ret,  ;  : retz,   ( -- )   z ?ret,  ;    : retnz,  ( -- )  nz ?ret,  ;  : retm,   ( -- )  ne ?ret,  ;    : retp,   ( -- )   p ?ret,  ;  : retpe,  ( -- )  pe ?ret,  ;    : retpo,  ( -- )  po ?ret,  ;  : ?call,  ( a op -- )  8 xor 2+ c, ,  ;                         : callc,   ( -- )  cy ?call,  ;                                 : callnc,  ( -- )  nc ?call,  ;                                 : callz,   ( -- )   z ?call,  ;                                 : callnz,  ( -- )  nz ?call,  ;                                 : callm,   ( -- )  ne ?call,  ;                                 : callp,   ( -- )   p ?call,  ;                                 : callpe,  ( -- )  pe ?call,  ;                                 : callpo,  ( -- )  po ?call,  ;                                 -->                                                             ( z80-asm, )                                                    : >relmark  ( -- orig )  here 1-  ;                             : relresolve  ( orig dest -- )  1- over - ?page swap c!  ;      : >relresolve  ( orig -- )  here relresolve  ;                  : <relresolve  ( dest -- )  here 1- swap relresolvez80-asm, )                                                    : ahead  ( -- orig  )  18 , >relmark  ;                         : rif  ( op -- orig cs-id )  jp>jr , >relmark 0A  ;             : rthen  ( orig cs-id -- )  0A ?pairs >relresolve  ;            : relse  ( orig cs-id -- cs-id ) \ XXX TODO document              0A ?pairs 18 rif rot swap rthen 0A  ;                         : rbegin  (  -- dest cs-id )  <mark 0B  ;                       : rwhile  (  op -- orig cs-id )  jp>jr rif 2+  ;                : runtil  (  dest cs-id op -- )  , 0B ?pairs <relresolve  ;     : ragain  (  dest cs-id -- )  18 runtil  ;                      : rrepeat  (  dest cs-id1 orig cs-id2 )                           2swap ragain 2- rthen  ;                                      : rstep    ( dest cs-id -- )  10 runtil  ;  -->                                                                                                                                                                                                                 ( z80-asm, )                                                    : aif  (  op -- orig cs-id )  c, >mark 08  ;                    : athen  (  orig cs-id -- )  08 ?pairs >resolve  ;              : aelse  (  cs-id -- cs-id )                                      08 ?pairs C3 aif rot swap athen 08  ;                         : abegin  (  -- dest cs-id )  <mark 09  ;                       : awhile  (  op -- orig cs-id )  aif 2+  ;                      : auntil  (  cs-id op -- )  c, 09 ?pairs <resolve  ;            : aagain  (  cs-id -- )  C3 auntil  ;                           : arepeat  (  dest cs-id1 orig cs-id2 )                           2swap aagain 2- athen  ;                                      : |mark  ( -- a )  here 2-  ;                                   : |resolve  ( a -- )  |mark swap !  ;                           -->                                                                                                                                                                                             ( z80-asm, )                                                    A0 m2 and,  B0 m2 or,  A8 m2 xor,                               : subp,  ( rp -- )  a and sbcp,  ;                              : tstp,  ( rp -- )  dup a ld, 1+ orz80-asm, )                                                    6 cells allocate-string                                         : unresolved  ( n -- a )  cells [ dup ] literal +  ;  drop      decimal only forth definitionsexecute-hl, call-xt, )                                        need z80-asm,  need macro                                       macro execute-hl,  ( -- )                                         0000 bc stp,  |mark  \ save the Forth IP                        0000 bc ldp#, |mark  \ point IP to phony_compiled_word          jphl,          \ execute the xt in HL                           >resolve \ phony_compiled_word                                  here cell+ ,      \ point to the phony xt following             0000 bc ldp#  |resolve  \ restore the Forth IP                  endm                                                          macro call-xt,  ( xt -- )                                         hl ldp#,  execute-hl,                                           endm                                                                                                                                                                                                                                                          ( z80-asm )                                                     only forth definitions                                          need ?pairs  need 3dup                                          : 8*   ( n1 -- n2 )  2* 2* 2*  ;                                : z80-asm  ( -- )  assembler  ;                                 also assembler definitions hexz80-asm )                                                     0 constant b   1 constant c   2 constant d   3 constant e       4 constant h   5 constant l   6 constant m   7 constant a       0 constant bc  2 constant de  4 constant hl                     6 constant sp  6 constant af                                    DD constant ix-op  FD constant iy-op                            : ix  ( -- rphl )  ix-op c, hl  ;                               : iy  ( -- rphl )  iy-op c, hl  ;                               : ?page  ( n -- n )  dup 80 + FF swap u< #-269 ?throw  ;        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm )                                                     : m1  ( 8b "name" -- )                                            create c, does>  ( -- )  ( pfa ) c@ c,  ;                     : m2  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ + c,  ;               : m3  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) c@ swap 8* + c,  ;       : m4  ( 8b "name" -- )                                            create c, does>  ( 8b -- )  ( 8b pfa ) c@ c, c,  ;            : m5  ( 8b "name" -- )                                            create c, does>  ( 16b -- )  ( 16b pfa ) c@ c, ,  ;           : m6  ( 8b "name" -- )                                            create c, does>  ( r -- )  ( r pfa ) CB c, c@ + c,  ;           -->                                                                                                                                                                                           ( z80-asm )                                                     : m7  ( 8b "name" -- )                                            create c, does>  ( r bit -- )                                     ( r bit pfa ) CB c, c@ swap 8* + + c,  ;                    : m8  ( 16b "name" -- )                                           create , does>  ( -- )  ( pfa ) @ ,  ;                        : m9  ( 8b "name" -- )                                            create c, does>  ( a -- )                                         ( a pfa )  c@ c, here 1+ - ?page c,  ;                      -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm )                                                     : ma  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) c@ c, drop c,  ;                          : mb  ( 8b "name" -- )                                            create c, does>  ( disp rphl -- )                                 ( disp rphl pfa ) CB c, c@ c, drop c,  ;                    : mc  ( 8b "name" -- )                                            create c, does>  ( disp rphl bit -- )                             ( disp rphl bit pfa )                                           CB c, c@ rot drop rot c, swap 8* + c,  ;                    -->                                                                                                                                                                                                                                                                                                                             ( z80-asm )                                                     00 m1 nop 02 m3 stap 03 m3 incp 04 m3 inc 05 m3 dec 07 m1 rlca  08 m1 exaf 09 m3 addp 0A m3 ftap 0B m3 decp 0F m1 rrca 10 m9    djnz 17 m1 rla 18 m9 jr  1F m1 rra 20 m9 jrnz 22 m5 sthl 27 m1  daa 28 m9 jrz 2A m5 fthl 2F m1 cpl 30 m9 jrnc 32 m5 sta 37 m1   scf 38 m9 jrc 3A m5 fta 3F m1 ccf 76 m1 halt 80 m2 add 88 m2    adc 90 m2 sub 98 m2 sbc B8 m2 cp C1 m3 pop C2 m5 jpnz C3 m5 jp  C5 m3 push C6 m4 add# C7 m2 rst C9 m1 ret CA m5 jpz CD m5 call  CE m4 adc# D2 m5 jpnc D3 m4 out 41 m3 outbc D6 m4 sub# D9 m1    exx DA m5 jpc DB m4 in 40 m3 inbc 0DE m4 sbc# E2 m5 jppo E3 m1  exsp E6 m4 and# E9 m1 jphl EA m5 jppe EB m1 exde EE m4 xor# F2  m5 jpp F3 m1 di  F6 m4 or# F9 m1 ldsp FA m5 jpm FB m1 ei FE m4  cp# 00 m6 rlc 08 m6 rrc 10 m6 rl 18 m6 rr 20 m6 sla  28 m6 sra  38 m6 srl  40 m7 bit 80 m7 res C0 m7 set B0ED m8 ldir B8ED m8   lddr 44ED m8 neg 57ED m8 ldai 47ED m8 ldia 56ED m8 im1 5EED m8  im2 B1ED m8 cpir 6FED m8 rld -->                                ( z80-asm )                                                     : 0outbc  ( -- )  ED c, 71 c,  ;                                : jpix  ( -- )  ix-op c, jphl  ;                                : ldp#  ( 16b rp -- )  8* 1+ c, ,  ;                            : ld#  ( 8b r -- )  8* 06 + c, c,  ;                            : ld  ( r1 r2 -- )  8* 40 + + c,  ;                             : sbcp  ( rp -- )  ED c, 8* 42 + c,  ;                          : adcp  ( rp1 rp2 -- )  ED c, 8* 4A + c,  ;                     : stp  ( a rp -- )  ED c, 8* 43 + c, ,  ;                       : ftp  ( a rp -- )  ED c, 8* 4B + c, ,  ;                       : addix  ( rp -- )  ix-op c, addp  ;                            : addiy  ( rp -- )  iy-op c, addp  ;                            : clr  ( rp -- )  0 swap ldp#  ;                                : ldp  ( rp1 rp2 -- )  2dup ld 1+ swap 1+ swap ld  ;            CF m4 hook       \ rst 0x08                                     D7 m1 prt  -->   \ rst 0x16                                     ( z80-asm )                                                     86 ma addx 8E ma adcx 96 ma subx 9E ma sbcx A6 ma andx          AE ma xorx B6 ma orx  BE ma cpx  34 ma incx 35 ma decx          06 mb rlcx 0E mb rrcx 16 mb rlx  1E mb rrx  26 mb slax          2E mb srax 3E mb srlx 46 mc bitx 86 mc resx C6 mc setx          : ftx   ( disp rpi r -- )   nip 8* 46 + c, c,  ;                : stx   ( r disp rphl -- )  drop swap 70 + c, c,  ;             : st#x  ( 8b disp rpi -- )  drop 36 c, swap c, c,  ;            : ftpx  ( disp rpi rp -- )  3dup 1+ ftx rot 1+ -rot ftx  ;      : stpx  ( disp rpi rp -- )  3dup 1+ stx rot 1+ -rot stx  ;      -->                                                                                                                                                                                                                                                                                                                                                                                             ( z80-asm )                                                     20 constant z  28 constant nz  30 constant cy  38 constant nc   C2 constant z'  CA constant nz' D2 constant cy' DA constant nc' E2 constant pe' EA constant po' F2 constant m'  FA constant p'  : ?ret  ( op -- )  8 xor 2- c,  ;                               : retc  ( -- )  cy' ?ret ;    : retnc  ( -- )  nc' ?ret  ;      : retz  ( -- )  z' ?ret ;     : retnz  ( -- )  nz' ?ret  ;      : retm  ( -- )  m' ?ret ;     : retp  ( -- )  p' ?ret  ;        : retpe  ( -- )  pe' ?ret ;   : retpo  ( -- )  po' ?ret  ;      : ?call  ( a op -- )  8 xor 2+ c, ,  ;                          : callc  ( -- )  cy' ?call ;    : callnc  ( -- )  nc' ?call  ;  : callz  ( -- )  z' ?call ;     : callnz  ( -- )  nz' ?call  ;  : callm  ( -- )  m' ?call ;     : callp  ( -- )  p' ?call  ;    : callpe  ( -- )  pe' ?call ;   : callpo ( -- )  po' ?call  ;   -->                                                                                                                             ( z80-asm )                                                     : >relmark  ( -- orig )  here 1-  ;                             : relresolve  ( orig dest -- )  1- over - ?page swap c!  ;      : >relresolve  ( orig -- )  here relresolve  ;                  : <relresolve  ( dest -- )  here 1- swap relresolve  ;          : ahead  ( -- orig  )  18 , >relmark  ;                         : if  ( op -- orig cs-id )  , >relmark 0A  ;                    : then  ( orig cs-id -- )  0A ?pairs >relresolve  ;             : else  ( orig cs-id -- cs-id ) \ XXX TODO document               0A ?pairs 18 if rot swap then 0A  ;                           : begin  (  -- dest cs-id )  <mark 0B  ;                        : while  (  op -- orig cs-id )  if 2+  ;                        : until  (  dest cs-id op -- )  , 0B ?pairs <relresolve  ;      : again  (  dest cs-id -- )  18 until  ;                        : repeat  (  dest cs-id1 orig cs-id2 )  2swap again 2- then  ;  : step    ( dest cs-id -- )  10 until  ;  -->                   ( z80-asm )                                                     : if'  (  op -- orig cs-id )  c, >mark 08  ;                    : then'  (  orig cs-id -- )  08 ?pairs >resolve  ;              : else'  (  cs-id -- cs-id )                                      08 ?pairs C3 if' rot swap then' 08  ;                         : begin'  (  -- dest cs-id )  <mark 09  ;                       : while'  (  op -- orig cs-id )  if' 2+  ;                      : until'  (  cs-id op -- )  c, 09 ?pairs <resolve  ;            : again'  (  cs-id -- )  C3 until'  ;                           : repeat'  (  dest cs-id1 orig cs-id2 )                           2swap again' 2- then'  ;                                      : |mark  ( -- a )  here 2-  ;                                   : |resolve  ( a -- )  |mark swap !  ;                           -->                                                                                                                                                                                             ( z80-asm )                                                     A0 m2 and  B0 m2 or  A8 m2 xor                                  : subp  ( rp -- )  a and sbcp  ;                                : tstp  ( rp -- )  dup a ld 1+ orz80-asm )                                                     6 cells allocate-string                                         : unresolved  ( n -- a )  cells [ dup ] literal +  ;  drop      decimal only forth definitionsexecute-hl call-xt )                                          need z80-asm  need macro                                        macro execute-hl  ( -- )                                          0000 bc stp  |mark  \ save the Forth IP                         0000 bc ldp# |mark  \ point IP to phony_compiled_word           jphl          \ execute the xt in HL                            >resolve \ phony_compiled_word                                  here cell+ ,      \ point to the phony xt following             0000 bc ldp#  |resolve  \ restore the Forth IP                  endm                                                          macro call-xt  ( xt -- )                                          hl ldp#  execute-hl                                             endm                                                                                                                                                                                                                                                          ( do-prime )                                                    forth definitions decimal                                       8190 constant size  variable flags  size allot                  : do-prime  ( -- )                                                flags size 1 fill                                               0 size 0                                                        do flags i + c@                                                    if i dup + 3 + dup i +                                               begin   dup size <                                              while   0 over flags + c! over +                                repeat  drop drop 1+                                       then                                                         loop  .  ." primes "  ;                                                                                                                                                                                                                                       ( byte-magazine-benchmark )                                     need bench{                                                     8190 constant size  variable bflags size allot                  : c<- ( a b -- ) swap c!  ;                                     : do-prime  ( -- )                                                bflags size 1 fill  0                                           size 0 do   bflags i + c@ if                                                  i 2* 3 + dup i + bflags +                                       begin   dup size bflags +  u<                                   while   dup 0 c<- over +                                        repeat  drop drop 1+                                          then                                                loop                                                            drop  \ XXX NEW                                                 ;  -->                                                                                                                        ( byte-magazine-benchmark )                                     : byte-magazine-benchmark  ( n -- )                               cr dup u. ." iterations..." cr                                  bench{ 0 ?do  do-prime  loop }bench.  ;                         cr                                                              .( To run the BYTE Magazine) cr                                 .( benchmark type:) cr                                          .(   n byte-magazine-benchmark) cr                              .( where _n_ is the number of) cr                               .( iterations. The original code) cr                            .( used 1000 iterations.) cr                                                                                                                                                                                                                                                                                                                                                                  ( bench{ }bench }bench. bench. benched )                        need reset-frames  need frames@                                 : bench{  ( -- )  reset-frames  ;                               : }bench  ( -- d )  frames@ ;                                   : bench.  ( d -- )                                                2dup d. ." frames (" 50 m/ nip . ." s) "  ;                   : }bench.  ( -- )  frames@ bench.  ;                            : benched  ( xt n -- d )                                          bench{ 0 do  dup execute  loop  }bench rot drop  ;            : benched.  ( xt n -- )                                           bench{ 0 do  dup execute  loop  }bench. drop  ;                                                                                                                                                                                                                                                                                                                                               ( all-benchmarks )                                              need byte-magazine-benchmark                                    need interface-age-benchmark                                    need vector-loop-benchmark                                      : all-benchmarks  ( n1 n2 -- )                                    byte-magazine-benchmark                                         interface-age-benchmark                                         vector-loop-benchmark  ;                                        .( To run all benchmarks type:) cr                              .(   n1 n2 all-benchmarks) cr                                                                                                                                                                                                                                                                                                                                                                                                                                 ( interface-age-benchmark )                                     need bench{  need 2/                                            : (interface-age-benchmark)  ( n -- )                             dup 2/ 1+ swap cr                                               1 ?do                                                             dup i 1 rot 2 do                                                  drop dup 0 i um/mod dup                                         0=  if  drop drop 1 leave  then                                 1 = if    drop 1                                                    else  dup 0= if  drop 0 leave  then                                   0< 0= if  1  then                                         then                                                      loop                                                            2drop  \ XXX NEW                                              loop  drop  ;  -->                                                                                                            ( interface-age-benchmark )                                     : interface-age-benchmark  ( n -- )                               bench{ (interface-age-benchmark) }bench.  ;                     cr                                                              .( To run the interface age) cr                                 .( benchmark type:) cr                                          .(   n interface-age-benchmark  ) cr                            .( where _n_ is the number of) cr                               .( iterations. The original code) cr                            .( used 5000 iterations.) cr                                                                                                                                                                                                                                                                                                                                                                                                                                  ( Interface Age Benchmark program )                             : bench  ( -- )                                                   dup 2 / 1+ swap ." Starting " cr                                1 do dup i 1 rot                                                  2 do drop dup i /mod                                              dup 0= if  drop drop 1 leave                                    else  1 = if drop 1                                                   else  dup 0 > if  drop 1                                              else  0= if  0 leave  then                                      then                                                      then                                                      then                                                          loop                                                            if  4 .r  else  drop  then                                    loop  drop cr ." Finished " ;                                                                                                 ( vector-loop-benchmark )                                       need bench{                                                     1000 constant vsize  \ vector size                              : vector  ( n -- )                                                create  cells allot                                             does>  ( index -- address )  ( index pfa ) swap cells +  ;    vsize vector vec1  vsize vector vec2  vsize vector vec3         : vecload  ( -- )  \ put some stuff into the vectors              0 begin                                                            dup vec1 dup !               \ vec1 gets its own address        dup vec2 dup negate swap !   \ vec2 gets negated address        1+ dup vsize =                                               until  drop  ;                                                -->                                                                                                                                                                                             ( vector-loop-benchmark )                                       : loop0  ( -- )  \ null loop                                      0 begin  1+ dup vsize =  until  drop  ;                       : loop1  ( -- )  \ vector add                                     0 begin                                                            dup vec1 @ over vec2 @ + over vec3 !                            1+ dup vsize =                                               until  drop  ;                                                : loop2 ( -- )  \ vector multiply                                 0 begin                                                            dup vec1 @ over vec2 @ * over vec3 !                            1+ dup vsize =                                               until  drop  ;                                                -->                                                                                                                                                                                             ( vector-loop-benchmark )                                       : loop3 ( -- ) \ vector divide                                    0 begin                                                           dup vec1 @ over vec2 @ / over vec3 !                            1+ dup vsize =                                                until  drop  ;                                                : loop4 ( -- )  \ vector scale                                    0 begin                                                            dup vec1 @ 10000 10000 */ over vec2 !  1+ dup vsize =        until  drop  ;                                                -->                                                                                                                                                                                                                                                                                                                                                                                             ( vector-loop-benchmark )                                       1000 constant reps  \ repetitions                               : bench0  ( -- )  \ benchmark loop0                               bench{ 0 begin  loop0 1+ dup reps =  until  drop }bench.        ." Vector No-Op" cr  ;                                        : bench1 ( -- ) \ benchmark loop1                                 bench{ 0 begin  loop1 1+ dup reps =  until  drop }bench.        ." Vector +    " cr  ;                                        : bench2 ( -- ) \ benchmark loop2                                 bench{ 0 begin  loop2 1+ dup reps =  until  drop }bench.        ." Vector *    " cr  ;                                        -->                                                                                                                                                                                                                                                                                                                             ( vector-loop-benchmark )                                       : bench3 ( -- )  \ benchmark loop3                                bench{ 0 begin  loop3 1+ dup reps =  until  drop }bench.        ." Vector /    " cr  ;                                        : bench4 ( -- ) \ benchmark loop4                                 bench{ 0 begin  loop4 1+ dup reps =  until  drop }bench.        ." Vector */   " cr  ;                                        : vector-loop-benchmarks  ( -- )                                  vecload  cr bench0 bench1 bench2 bench3 bench4  ;               cr                                                              .( To run the vector loop) cr                                   .( benchmarks type:) cr                                         .(   vector-loop-benchmarks ) cr                                                                                                                                                                                                                              ( ?--> )                                                        : ?-->  ( f -- )  if  postpone -->  then  ; immediateupdate flush thru )                                           [unneeded] update                                               ?\ : update  ( -- )  disk-buffer @ $8000 or disk-buffer !  ;    [unneeded] flush                                                ?\ : flush  ( -- )  save-buffers empty-buffers  ;               [unneeded] thru                                                 ?\ : thru  ( block1 block2 -- )  1+ swap ?do  i load  loopcontinued ?load reload loads +load +thru loader )             [unneeded] continued                                            ?\ : continued  ( u -- )  ?loading (load)  ;                    [unneeded] ?load                                                ?\ : ?load  ( block f -- )  if  dup load  then  drop  ;         [unneeded] reload                                               ?\ : reload  ( -- )  empty-buffers  scr @ load  ;               [unneeded] loads                                                ?\ : loads  ( block n -- )  bounds ?do  i load  loop  ;         [unneeded] +load  [unneeded] +thru  and                         ?\ : +load  ( n -- )  blk @ + load  ;                           [unneeded] +thru                                                ?\ : +thru  ( n1 n2 -- )  1+ swap do  i +load  loop  ;          [unneeded] loader ?exit                                         : loader  ( block "name" -- )                                     create ,  does>  ( pfa )  @ load  ;                           ( .line )                                                       : .line  ( n1 n2 -- )  line>string -trailing typeindexer )                                                     only forth definitions                                          need loader  need s=  need alias  need string/                  need get-order  need set-order                                  wordlist constant index-wordlist                                : search-index  ( ca len -- 0 | xt 1 | xt -1 )                    index-wordlist search-wordlist  ;                             : name-indexed?  ( ca len -- f )                                  search-index 0<> dup if  nip  then  ;                         variable indexed-block                                          : (index-name)  ( ca len -- )                                     2dup name-indexed? if  2drop exit  then                         nextname indexed-block @ loader  ;                            -->                                                                                                                                                                                             ( indexer )                                                     wordlist dup constant indexer-wordlist set-current              : (  ( "ccc<space><paren><space|eof>" -- )                        begin  parse-name 2dup s" )" s= 0=                              while  (index-name)  repeat  2drop  ;                         ' ( alias .(                                                    : \  ( "ccc<space><backslash><space|eof>" -- )                    begin  parse-name 2dup s" \" s= 0=                              while  (index-name)  repeat  2drop  ;                         -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( indexer )                                                     forth-wordlist set-current                                      : index-reneeded  ( ca len -- )                                   search-index 0= #-277 ?throw execute  ;                       : index-reneed  ( "name" -- )  parse-name index-reneeded  ;     : index-needed  ( ca len -- )                                     needed-word 2@ 2>r  new-needed-word  2dup undefined?            if  index-reneeded  else  2drop  then  2r> needed-word 2!  ;  : index-need  ( "name" -- )  parse-name index-needed  ;         : set-indexed-need  ( -- )                                        ['] index-reneeded ['] reneeded  defer!                         ['] index-reneed   ['] reneed    defer!                         ['] index-need     ['] need      defer!                         ['] index-needed   ['] needed    defer!  ;                    -->                                                                                                                             ( indexer )                                                     : valid-block-header?  ( ca len -- f )                            -trailing dup 0= #-278 ?throw                                   2 string/ 2dup s"  )" s= >r s"  \" s= r> or  ;                : index-block-header  ( ca len -- )                               2dup valid-block-header? if  evaluate exit  then  2drop  ;    : index-block  ( +n -- )                                          dup indexed-block ! 0 swap line>string index-block-header  ;  : (indexer)  ( -- )                                               last-locatable @ 1+ first-locatable @                           ?do  i index-block  loop  ;                                   : indexer  ( -- )                                                 get-current  get-order                                          index-wordlist set-current  indexer-wordlist 1 set-order        ['] (indexer) catch  dup #-278 <> swap ?throw                   set-order set-current  set-indexed-need  ;                    ( [false] [true] )                                                       0 constant [false] immediate                           [false] 0= constant [true]  immediate                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( [if] [else] [then] )                                          need s=                                                         : [else]  ( "..." -- )                                            1 begin   parse-name dup                                          while   2dup s" [if]" s=                                                if    2drop 1+                                                  else  2dup s" [else]" s=                                              if    2drop 1- dup if  1+  then                                 else  s" [then]" s= if  1-  then                                then                                                      then  ?dup 0= if  exit  then                          repeat  2drop drop  ; immediate                               : [if]  ( "..." -- )  0= if postpone [else] then  ; immediate   : [then]  ( -- )  ; immediate                                                                                                                                                                   ( body>name name>body link>name name>link name<name )           [unneeded] body>name                                            ?\ : body>name  ( pfa -- nt ) body> >name  ;                    [unneeded] name>body                                            ?\ : name>body  ( nt -- pfa ) name> >body  ;                    [unneeded] link>name dup  ?\ need alias                         ?\ ' cell+ alias link>name  ( nt -- pfa )                       [unneeded] name>link dup  ?\ need alias                         ?\ ' cell- alias name>link  ( nt -- pfa )                       [unneeded] name<name dup  ?\ need name>link                     ?\ : name<name  ( nt1 -- nt2 )  name>link @s  ;                                                                                                                                                                                                                                                                                                                                                 ( >>link name>> )                                               [unneeded] >>link dup  ?\ need alias                            ?\ ' cell+ alias >>link  ( xtp -- lfa )                         [unneeded] name>>                                               ?\ : name>>  ( nt -- xtp )  [ 2 cells ] literalname>interpret name>compile )                                 : name>interpret  ( nt -- xt | 0 )                                ;                                                             : name>compile  ( nt -- x xt )                                    ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( smudge smudged )                                              need c!toggle-bits                                              : smudged  ( nt -- )                                              smudge-mask swap system-bank c!toggle-bits default-bank  ;     : smudge  ( -- )  latest smudgedpairs )                                                      : ?pairs  ( x1 x2 -- )  <> #-22 ?throwsave-here restore-here )                                      variable here-backup                                            : save-here  ( -- )  here here-backup !  ;                      : restore-here  ( -- )  here-backup therearray )                                                      need <=                                                         : long ; immediate                                              : 1array ( len #bytes/datum --) \ ( #b len data ...)              create 2dup , , * allot ;                                     : _len ( base_addr -- len)  cell+ @ ;                           : } ( base_adr indx -- adr[indx] )                                over _len over <= over 0< or #-272 ?throw                       over @ * + cell+ cell+ ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( 2array ) \ noble-arrays                                       need 1array                                                     : wide ; immediate                                              : 2array ( hgt wid data_size --) \ ( wid #b len data ...)         create >r tuck , ( wid hgt)                                     r@ , * dup , r> * allot ;                                     : }} ( base_adr m n -- adr[m,n] ) \ data stored row-wise          2>r cell+ dup cell- @                                           r> * r> + ( base_adr+cell m+n*w)                                } ;                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( array ato )                                                   need within                                                     : array>  ( n 'array -- a )                                       2dup @ 0 swap within 0= #-272 ?throw                            cell+ swap cells +  ;                                         : array  ( n "name" -- )                                          create dup , cells allot                                        does> ( n -- x ) ( n pfa ) array> @  ;                        : (ato)  ( x n array -- )  >body array> !  ;                    : ato  ( x n "name" -- )                                          compiling?  if    postpone ['] postpone (ato)                               else  ' (ato)  then ; immediate                   : (+ato)  ( x n array -- )  >body array> +!  ;                  : +ato  ( n "name" -- )                                           compiling? if    postpone ['] postpone (+ato)                              else  ' (+ato)  then  ; immediate                  ( associative: )                                                : associative:  ( n "name" -- )                                   constant                                                        does>  ( x -- index )                                             ( x pfa )                                                       dup @ ( x pfa n ) -rot dup @ 0 ( n x pfa n 0 )                  do ( n x pfa )                                                    cell+ 2dup @ = ( n x pfa' flag )                                if  2drop drop i unloop exit  then                            loop 2drop ( n )  ;                                                                                                                                                                                                                                                                                                                                                                                                                                         ( associative-list item? item create-entry )                    : associative-list  ( "name" -- )  wordlist constant  ;         : item?  ( ca len wid -- false | xt true )                        search-wordlist 0<> ;                                         : item  ( ca len wid -- i*x )                                     item? 0= #-13 ?throw execute  ;                               : create-entry  ( i*x wid xt "name" -- )                          get-current >r swap set-current                                 create execute                                                  r> set-current  ;                                             -->                                                                                                                                                                                                                                                                                                                                                                                             ( entry char-entry double-entry string-entry )                  : entry  ( x wid "name" -- )                                      ['] , create-entry does>  ( -- x )  ( pfa ) @  ;              : char-entry  ( c wid "name" -- )                                 ['] c, create-entry does>  ( -- c )  ( pfa ) c@  ;            : double-entry  ( dx wid "name" -- )                              ['] 2, create-entry does>  ( -- dx )  ( pfa ) 2@  ;           : string-entry  ( ca len wid "name" -- )                          ['] s, create-entry does>  ( -- ca len )  ( pfa ) count  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( items )                                                       need alias  need wordlist-words                                 ' wordlist-words alias items  ( wid -- )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( associative-list-demo )                                       need associative-list need items                                associative-list stuff                                          1887          stuff entry year                                  char E        stuff char-entry letter                           s" Saluton"   stuff string-entry hello                          314159.       stuff double-entry pi                             cr .( Keys:) cr stuff items cr                                  cr .( Values: ) cr                                              s" year"    stuff item . cr                                     s" letter"  stuff item emit cr                                  s" hello"   stuff item type cr                                  s" pi"      stuff item d. cr                                                                                                                                                                                                                                    ( begin-stringtable end-stringtable )                           : begin-stringtable  ( "name" -- stringtable-sys )                create  here ( a1 ) cell allot here  ( a1 a2 )                  does> ( n -- ca len )                                             ( n pfa )  @ swap cells + @ count  ;                        : end-stringtable  ( stringtable-sys -- )                         ( a1 a2 )                                                       here rot !   \ set the index                                    here swap  ( a3 a2 )                                            begin  2dup <>  while                                             dup ,   \ store the start of the string in the index            count chars +  \ move to the next string                      repeat  2drop  ;                                                                                                                                                                                                                                              ( begin-structure +field field: 2field: cfield: )               : begin-structure  ( "name" -- struct-sys 0 )                     create  >mark 0                                                 does>   ( -- n )  ( pfa ) @   ;                               : +field  ( n1 n2 "name" -- n3 )                                  create  over , +                                                does>   ( a -- a' )  ( a pfa ) @ +  ;                         : field:    ( n1 "name" -- n2 )  cell +field  ;                 : 2field:   ( n1 "name" -- n2 )  [ 2 cells ] literal +field  ;  : cfield:   ( n1 "name" -- n2 )  [ 1 chars ] literal +field  ;  : end-structure  ( struct-sys n -- )  swap !  ;                                                                                                                                                                                                                                                                                                                                                 ( buffer: cvariable enum )                                      [unneeded] buffer:                                              ?\ : buffer:  ( u "name" -- )  create allot  ;                  [unneeded] cvariable                                            ?\ : cvariable  ( "name"  -- )  create 1 allot  ;               [unneeded] enum                                                 ?\ : enum  (  n "name" -- n+1 )  dup constantset )                                                         : set  ( x a "name" -- )                                          create  swap , ,                                                does>   ( pfa )  dup @ swap celllink@ link, )                                                 defer link@  ( node1 -- node2 )                                   ' @ ' link@ defer!                                            : link,  ( node -- )  here over @ , swapuser )                                                        : user  ( n "name -- )                                            create c,  does>  c@ up @ +  ;                                exit                                                            : user  ( n "name -- )                                            cconstant                                                       ;code asm                                                       de incp  \ de=pfa                                               exde                                                            m e ld                                                          00 d ld#  \ de = index of the user variable                     up fthl \ ld hl,(user_variables_pointer) \ XXX FIXME            de addp  \ hl= address of the user variable                     jppushhl  end-asm                                                                                                                                                                             ( cvalue cto )                                                  : cvalue  ( b "name"  -- )  cconstant  ;                        : cto  ( Interpretation: b "name" -- )                                 ( Compilation: "name" -- )                                 ' >body compiling? if    postpone literal postpone c!                                else  c!  then  ; immediatevalue 2to )                                                  : 2value  ( d "name"  -- )  2constant  ;                        : 2to  ( Interpretation: d "name" -- )                                 ( Compilation: "name" -- )                                 ' >body compiling? if    postpone literal postpone 2!                              else  2!  then  ; immediatevalue 2value to )                                             : value  ( n "name"  -- )  create  0 c, ,  does> 1+ @  ;        : 2value  ( n "name"  -- )  create  1 c, , ,  does> 1+ 2@  ;    : to  ( Interpretation: n "name" -- )                                 ( Compilation: "name" -- )                                  ' >body dup 1+ swap c@                                          compiling? if  swap postpone literal                                           if  postpone 2!  else  postpone !  then  exit               then                                                 if  2!  else  !  then                                           ; immediate                                                                                                                                                                                                                                                                                                                                                                                   ( value to )                                                    : value  ( n "name"  -- )  constant  ;                          : to  ( Interpretation: n "name" -- )                                 ( Compilation: "name" -- )                                  ' >body compiling? if    postpone literal postpone !                               else  !  then  ; immediatevalue to )                                                    variable (value)  ['] @ (value) !                               : to    ( -- )  ['] ! (value) !  ;                              : value  ( n "name" -- )                                          create ,  does>   (value) perform  ['] @ (valuexstack )                                                      need value  need allocate  need free                            0 value xsize  0 value xp  0 value xp0                          : xstack  ( n "name" -- )                                         create  cells dup allocate throw  cell - dup                      , , ,                                                         does> ( -- )                                                      ( pfa ) dup @ to xp0  cell+ dup to xp  cell+ @ to xsize  ;  : xp@  ( -- a )  xp @  ;                                        : xp!  ( a -- )  xp !  ;                                        : xp+!  ( n -- )  xp +!  ;                                      : xclear  ( -- )  xp0 xp!  ;                                    : xfree  ( -- )  xp0 free throw  ;                                                                                                                                                                                                                              ( >x x@ xdrop x> xdup xpick )                                   need xstack                                                     : >x  ( x -- ) ( X: -- x )  cell xp+!  xp@ !   ;                : x@  ( -- x ) ( X: x -- x )  xp@ @  ;                          : xdrop  ( X: x -- )  [ cell negate ] literal xp+!  ;           : x>  ( -- x ) ( X: x -- )  x@ xdrop  ;                         : xdup  ( X: x -- x x )  x@ >x  ;                               : xpick  ( n -- x'n ) ( X: x'n ... x'0 -- x'n ... x'0 )           xp@ swap cells - @  ;                                         : xover  ( X: x1 x2 -- x1 x2 x1 )  1 xpick >x  ;                                                                                                                                                                                                                                                                                                                                                                                                                ( 2x@ 2>x 2x> 2xdrop 2xdup )                                    need xstack  need x@  need >x  need xpick  need xover           : 2x@  ( -- x1 x2 ) ( X: x1 x2 -- x1 x2 )  x@ 1 xpick swap  ;   : 2>x  ( x1 x2 -- ) ( X: -- x1 x2 )  swap >x >x  ;              : 2x>  ( -- x1 x2 ) ( X: x1 x2 -- )  x> x> swap  ;              : 2xdrop  ( X: x1 x2 -- )  [ -2 cells ] literal xp+!  ;         : 2xdup  ( X: x1 x2 -- x1 x2 x1 x2 )  xover xoverxdepth .x )                                                   need xstack                                                     : xlen  ( -- n )  xp@ xp0 -  ;                                  : xdepth  ( -- n )  xlen cell /  ;                              : xdepth.  ( -- )  ." <"  s>d <# #s #> type  ." > "  ;          : (.x)  ( -- )  xp0 cell+ xlen bounds ?do  i @ . cell +loop  ;  : .x  ( -- )  xdepth dup xdepth. if  (.x)  then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( 2nip )  \ ==datastack==                                       code 2nip  ( x1 x2 x3 x4 -- x3 x4 )                               E1 c,            \ pop hl                                       D1 c,            \ pop de                                       F1 c,            \ pop af                                       F1 c,            \ pop af                                       C3 c, pushhlde , \ jp pushhlde                                  end-coderoll )                                                        need z80-asm                                                    code roll  ( xu xn .. x0 u -- xn .. x0 xu )                       hl pop  hl addp  hl de ldp  sp addp                             bc push  m c ld  hl incp  m b ld                                bc push  de bc ldp  hl de ldp                                   bc tstp                                                         0000 jpz |mark 0 unresolved !                                   hl decp  hl decp  lddr                                          0 unresolved @ >resolve                                         hl pop  bc pop  exsp                                            jpnext                                                          end-code                                                                                                                                                                                                                                                      ( 3drop 4drop )                                                 code 3drop  ( x1 x2 x3 -- )                                       E1 c,  E1 c,  E1 c,                                             jpnext  end-code                                              code 4drop  ( x1 x2 x3 x4 -- )                                    E1 c,  E1 c,  E1 c,  E1 c,                                      jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( 3dup )                                                        code 3dup  ( x1 x2 x3 -- x1 x2 x3 x1 x2 x3 )                      D9 c,                                                           C1 c,  D1 c,  E1 c,                                             E5 c,  D5 c,  C5 c,                                             E5 c,  D5 c,  C5 c,                                             D9 c,                                                           jpnext  end-code                                              exit  \ slower and smaller version:                             : 3dup  ( x1 x2 x3 -- x1 x2 x3 x1 x2 x3 )  dup 2over rot  ;                                                                                                                                                                                                                                                                                                                                                                                                     ( 2rot )                                                        need roll                                                       : 2rot  ( x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2 )                5 roll 5 rollswapped )                                                     : swapped  ( i*x n1 n2 -- j*x )                                   >r 1+ cells sp@ +     ( i*x a1 ) ( R: n2 )                      r> 2+ cells sp@ +     ( i*x a1 a2 )                             over @ over @         ( i*x a1 a2 x1 x2 )                       >r swap !  r> swapnup drup dip )                                                code nup  ( x1 x2 -- x1 x1 x2 )                                   E1 c,  D1 c,  D5 c,  C3 c, pushhlde ,                           end-code                                                      code drup  ( x1 x2 -- x1 x1 )                                     D1 c,  E1 c,  E5 c,  E5 c,  jpnext                              end-code                                                      code dip  ( x1 x2 -- x2 x2 )                                      E1 c, D1 c, E5 c, E5 c,  jpnext                                 end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( 0dup -dup )                                                   code 0dup  ( x -- x | 0 0 )                                       E1 c,  78 04 + c,  B0 05 + c,                                   C2 c, pushhl ,  E5 c,  jppushhl                                 end-code                                                      code -dup  ( x -- x | 0 0 )                                       E1 c,  CB c, 7C c,                                              C2 c, pushhl ,  E5 c,  jppushhl                                 end-codendrop )                                                       need z80-asm                                                    code ndrop  ( x1..xn n -- )                                       hl pop  hl addp  exde  \ DE = n cells                           0 hl ldp#  sp addp  \ HL = stack pointer                        de addp  ldsp  \ update SP                                      jpnext                                                          end-codendrop )                                                      need z80-asm                                                    code 2ndrop  ( dx1..dxn n -- )                                    hl pop  hl addp  hl addp  exde  \ DE = n cells                  0 hl ldp#  sp addp  \ HL = stack pointer                        de addp  ldsp  \ update SP                                      jpnext                                                          end-codealias realias )                                               need name>>  need !s                                            : alias  ( xt "name" -- )  header reveal latest name>> !s  ;    : realias  ( xt "name" -- )                                       defined dup 0= #-13 ?throw name>> !sdeferred )                                                    : deferred  ( xt "name" -- )  defer latest name> deferdefers action-of )                                            : defers  ( "name" -- )  ' defer@ compile,  ; immediate         : action-of  ( Interpretation: "name" -- xt )                                ( Compilation:    "name" -- )                                   ( Runtime:        -- xt )                            ' compiling? if    postpone literal postpone defer@                          else  defer@  then  ; immediateis> [is] is  )                                               : <is>  ( xt "name" -- )  ' defer!  ;                           : [is]  ( xt "name" -- )                                          postpone ['] postpone defer!  ; immediate compile-only        : is  ( xt "name" -- )                                            compiling? if  postpone [is]  else  <is>  then  ; immediatedeferred? )                                                   : deferred?  ( xt -- wf )  csynonym )                                                     need alias                                                      : synonym  ( "newname" "oldname" -- )                             parse-name nextname ' dup >r alias                              r> >name dup immediate?     if  immediate     then                           compile-only?  if  compile-only  thencase-benchs )                                                 need bench{                                                     warnings off                                                    : .used  ( u -- )  unused - cr u. ." B used " ;                 32767 constant iterations                                       defer (case-bench)  ( -- )                                      : case-bench  ( n xt -- )                                         cr ." ..."                                                      ['] (case-bench) defer!                                         bench{                                                          iterations 0 do  i %11 and (case-bench)  loop                   }bench.  ;                                                    -->                                                                                                                                                                                                                                                             ( case-benchs )                                                 cr .( case)                                                     unused need case .used  unused                                  : case-example  ( n -- )                                          case                                                            0 of  noop  endof  1 of  noop  endof  2 of  noop  endof         noop endcase  ;                                               .used .( by its example)  ' case-example case-bench             cr .( eForth case)                                              unused need eforth-case .used  unused                           : case-example  ( n -- )                                          case                                                            0 of  noop  endof  1 of  noop  endof  2 of  noop  endof         noop endcase  ;                                               .used .( by its example)  ' case-example case-bench             -->                                                             ( case-benchs )                                                 cr .( case from the Forth-94 docs)                              unused need eforth-case .used  unused                           : case-example  ( n -- )                                          case                                                            0 of  noop  endof  1 of  noop  endof  2 of  noop  endof         noop endcase  ;                                               .used .( by its example)  ' case-example case-bench             cr .( Abersoft Forth case)                                      unused need eforth-case .used  unused                           : case-example  ( n -- )                                          case                                                            0 of  noop  endof  1 of  noop  endof  2 of  noop  endof         noop endcase  ;                                               .used .( by its example)  ' case-example case-bench             -->                                                             ( case-benchs )                                                 cr .( positional-case:)                                         unused need positional-case: .used  unused                      positional-case:  positional-case:-example  ( n -- )              noop  noop  noop  noop ;                                      .used .( by its example)  ' positional-case:-example case-bench cr .( options[)                                                 unused need options[ .used  unused                              : options[-example  ( n -- )                                      options[                                                          0 option noop  1 option noop  2 option noop                       default-option noop                                         ]options  ;                                                   .used .( by its example)  ' options[-example case-bench         -->                                                                                                                             ( case-benchs )                                                 cr .( cases:)                                                   unused need cases: .used  unused                                cases: cases:-example  ( n -- )                                   0 case> noop  1 case> noop  2 case> noop  other> noop         .used .( by its example)  ' cases:-example case-bench           cr .( baden-case)                                               unused need baden-case .used  unused                            : baden-case-example  ( n -- )                                    case 0 = of  noop  endof                                        case 1 = of  noop  endof                                        case 2 = of  noop  endof                                                 othercase noop  ;                                    .used .( by its example)  ' baden-case-example case-bench       -->                                                                                                                             ( case-benchs )                                                 cr .( baden-case-like)                                          unused .used  unused                                            : baden-case-like-example  ( n -- )                               dup 0 = if drop  noop  exit then                                dup 1 = if drop  noop  exit then                                    2 = if       noop  exit then                                noop  ;                                                       .used .( by its example)  ' baden-case-like-example case-bench  cr .( vannorman-switch)                                         unused need [switch .used  unused                               [switch vannorman-switch-example drop                             0 runs noop  1 runs noop  2 runs noop                         switch]                                                         .used .( by its example)  ' vannorman-switch-example case-bench                                                                 ( do-bench )                                                    need bench{                                                     32767 0 2constant range                                         : forth-83-do  ( -- )  bench{  range do83  loop83  }bench.  ;   : forth-79-do  ( -- )  bench{  range do  loop  }bench.  ;       : forth-83-i  ( -- )                                              bench{  range do83  i83 drop  loop83  }bench.  ;              : forth-79-i  ( -- )                                              bench{  range do  i drop  loop  }bench.  ;                    : forth-83-+loop  ( -- )                                          bench{  range do83  2 +loop83  }bench.  ;                     : forth-79-+loop  ( -- )  bench{  range do  2 +loop  }bench.  ; : do-bench  ( -- )                                                forth-83-do forth-79-do                                         forth-83-i forth-79-i                                           forth-83-+loop forth-79-+loop  ;                              ( number-base-bench )                                           : number-base-1  ( ca len -- ca' len' n )                         over c@ [char] $ = if  1 /string 16  exit  then                 over c@ [char] % = if  1 /string  2  exit  then                 over c@ [char] # = if  1 /string 10  exit  then  base @  ;    : number-base-2  ( ca len -- ca' len' n )                         over c@ >r                                                      r@ [char] $ = if  1 /string 16  rdrop exit  then                r@ [char] % = if  1 /string  2  rdrop exit  then                r> [char] # = if  1 /string 10  exit  then  base @  ;         : number-base-3  ( ca len -- ca' len' n )                         over c@                                                         dup >r [char] $ = if  1 /string 16  rdrop exit  then                r@ [char] % = if  1 /string  2  rdrop exit  then                r> [char] # = if  1 /string 10  exit  then  base @  ;     -->                                                             ( number-base-bench )                                           : number-base-4  ( ca len -- ca' len' n )                         over c@                                                         dup [char] $ = if  drop 1 /string 16  exit  then                dup [char] % = if  drop 1 /string  2  exit  then                    [char] # = if  1 /string 10  exit  then  base @  ;        need frames@  need reset-frames  defer (number-base)            : (number-base-bench)  ( n xt -- )                                ['] (number-base) defer!                                        reset-frames  0 do  s" 000" (number-base) drop 2drop  loop      frames@ d. cr  ;                                              : number-base-bench  ( n -- )                                     dup ['] number-base-1 (number-base-bench)                       dup ['] number-base-2 (number-base-bench)                       dup ['] number-base-3 (number-base-bench)                           ['] number-base-4 (number-base-bench) ;                   ( fill-bench )                                                  need frames@  need reset-frames  need rnd                       defer (fill)                                                    : (fill-bench)  ( n xt -- )                                       ['] (fill) defer!                                               reset-frames  0                                                 do  16384 6144 rnd (fill)  loop                                 frames@ cr d.                                                   key drop  ;                                                   : fill-bench  ( n -- )                                            dup ['] fill (fill-bench)                                       dup ['] fill2 (fill-bench)                                          ['] fill88 (fill-bench)  ;                                                                                                                                                                                                                                ( value-bench )                                                 need frames@  need reset-frames                                 0 value v1                                                      : value-bench  ( n -- )                                           reset-frames  0 do  v1 drop  loop  frames@ cr dvalue-bench )                                                need frames@  need reset-frames                                 0. 2value v2                                                    : 2value-bench  ( n -- )                                          reset-frames  0 do  v2 2drop  loop  frames@ cr dto-value-bench )                                              need frames@  need reset-frames                                 0 value v1                                                      : to-value-bench  ( n -- )                                        reset-frames  0                                                 do  0 to v1   loop                                              frames@ cr dto-2value-bench )                                             need frames@  need reset-frames                                 0. 2value v2                                                    : to-2value-bench  ( n -- )                                       reset-frames  0                                                 do  0. to v2   loop                                             frames@ cr dto-2value-bench )                                            need frames@  need reset-frames                                 0. 2value v2                                                    : 2to-2value-bench  ( n -- )                                      reset-frames  0                                                 do  0. 2to v2   loop                                            frames@ cr drshift-bench lshift-bench )                                   need frames@  need reset-frames                                 : rshift-bench  ( n -- )                                          reset-frames  0                                                 do  128 255 rshift drop   loop                                  frames@ cr d.  ;                                              : lshift-bench  ( n -- )                                          reset-frames  0                                                 do  128 255 lshift drop   loop                                  frames@ cr d.  ;                                                                                                                                                                                                                                                                                                                                                                                                                                              ( /-bench )                                                     need frames@  need reset-frames  need rnd                       : drnd  ( -- d )  rnd rnd  ;                                    [defined] (/)  ?\ defer (/)                                     : (/-bench)  ( n -- )                                             reset-frames                                                    1+ 1 do  drnd i (/) 2drop  loop  frames@ cr d.  ;             : /-bench  ( n -- )                                               dup ['] m/ ['] (/) defer! (/-bench)                                 ['] sm/rem ['] (/) defer! (/-bench)  ;                                                                                                                                                                                                                                                                                                                                                                                                                    ( um*-bench )                                                   need frames@  need reset-frames                                 : um*-bench  ( n -- )                                             reset-frames  0 do  i i um* 2drop  loop  frames@ dum/mod-bench )                                                need bench{                                                     : um/mod-bench  ( n -- )                                          bench{  0 do  i s>d i um/mod 2drop  loop  }bench.  ;          : um/mod-bench88  ( n -- )                                        bench{  0 do  i s>d i um/mod88 2drop  loop  }bench.  ;        : um/mod-bench  ( n -- )                                          dup cr ." Abersoft Forth  U/MOD ..." um/mod-bench                   cr ." Z88 CamelForth UM/MOD ..." um/mod-bench88  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( ud/mod-bench )                                                need bench{                                                     : a-m/mod  ( n -- )                                               bench{  0 do  i s>d i ud/mod drop 2drop  loop  }bench.  ;     : z1-ud/mod  ( n -- )                                             bench{  0 do  i s>d i ud/mod881 drop 2drop  loop  }bench.  ;  : z2-ud/mod  ( n -- )                                             bench{  0 do  i s>d i ud/mod882 drop 2drop  loop  }bench.  ;  : run  ( n -- )                                                   dup cr ." Abersoft Forth  M/MOD ..." a-m/mod                    dup cr ." Z88 CamelForth UD/MOD 1..." z1-ud/mod                     cr ." Z88 CamelForth UD/MOD 2..." z2-ud/mod  ;                                                                                                                                                                                                                                                                            ( ud/mod-bench )                                                need bench{                                                     : a-m/mod  ( n -- )                                               bench{  0 do  i s>d i ud/mod drop 2drop  loop  }bench.  ;     : z-ud/mod  ( n -- )                                              bench{  0 do  i s>d i ud/mod88 drop 2drop  loop  }bench.  ;   : run  ( n -- )                                                       cr ." UD/MOD from:"                                         dup cr ." Abersoft Forth and Gforth ..." a-m/mod                dup cr ." Z88 CamelForth .............." z-ud/mod  ;                                                                                                                                                                                                                                                                                                                                                                                                          ( number?-bench )                                               need frames@  need reset-frames                                 : empty-stack  ( -- )  sp0 @ sp!  ;                             defer num?                                                      : number?-bench  ( n -- )                                         reset-frames  0 do                                                s" " num?  s" 12345" num?   s" 12345." num?                     s" -12345" num?  s" -12345." num?  empty-stack                loop  frames@ cr d.  ;                                        : benchs  ( -- )                                                  100 number?-bench 1000 number?-bench 10000 number?-bench  ;      ' solo-number? ' num? defer! benchs  \ Solo Forth                                                                                                                                                                                                                                                                            ( number?-bench )                                               need frames@  need reset-frames                                 : empty-stack  ( -- )  sp0 @ sp!  ;                             defer num?                                                      : number?-bench  ( n -- )                                         reset-frames  0 do                                                s" " num?  s" 123x45." num?   s" 12345.999x" num?               s" -12345.x" num?  s" -12345.999x" num?                         s" -12345.000.000" num?                                         empty-stack                                                   loop  frames@ cr d.  ;                                        : benchs  ( -- )                                                  100 number?-bench 1000 number?-bench 10000 number?-bench  ;   ' solo-number? ' num? defer! benchs                                                                                                                                                             ( dummy-neededbuffer-benchmark-1 )                                            2 load need reset-frames                                        reset-frames                                                    need dummy-needed need dummy-needed need dummy-needed           need dummy-needed need dummy-needed need dummy-needed           need dummy-needed need dummy-needed need dummy-needed           need dummy-needed need dummy-needed need dummy-needed           need dummy-needed need dummy-needed need dummy-needed           need dummy-needed                                               frames@ cr .( Frames ) d. cr                                                                                                                                                                                                                                                                                                                                                                                                                                  ( buffer-benchmark-2 )                                            2 load  need reset-frames  warnings off  reset-frames           need list  need dump  need wdump  need decode                   need life  need hanoi  need tt need siderator  need pong        need doer  need a!  need defer  need value  need editor         need case  need times  need dtimes  need for                    frames@ cr .( Frames ) d. crheader-benchmark )                                            need bench{ warnings off bench{ : w ; : w ; : w ; : w ;         : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ;     : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; : w ; }bench.   ( header-benchmark )                                            need bench{ warnings off blk @ 1+ constant b bench{ b load      b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load b load  b load b load b load b load b load b load b load b load }bench. ( header-benchmark )                                            : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; : foo ; ( interpret-benchmark )                                           need bench{  bench{                                           1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 sp0 @ sp!    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 sp0 @ sp!    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 sp0 @ sp!    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 sp0 @ sp!    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20                }bench. sp0 @ sp!                                             ( interpret-benchmark )                                           need bench{  bench{                                           : foo  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20       1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  ;             }bench.                                                       ( interpret-benchmark )                                           need bench{  bench{                                           noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop       }bench.                                                       ( interpret-benchmark )                                           need bench{  bench{                                           : foo noop noop noop noop noop noop noop noop noop noop noop    noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop     noop noop noop noop noop noop noop noop noop noop noop noop ;     }bench.                                                       ( constant-bench )                                              need bench{ need }bench.                                        3 constant const1                                               : bench1  ( n -- )                                                bench{ 0 do  const1 drop  loop }bench.  ;                     : bench2  ( n -- )                                                bench{ 0 do  3 drop  loop }bench.  ;                          : constant-bench  ( n -- )  dup cr bench1 cr benchconstant-bench )                                              need reset-frames  need frames@                                 0 constant const1                                               : bench1  ( n -- )                                                reset-frames 0 do  const1 drop  loop                            frames@ d. cr ;                                               : const2  ( -- x )  const1 cell+  ;                             : bench2  ( n -- )                                                reset-frames 0 do  const2 drop  loop                            frames@ d. cr ;                                                                                                                                                                                                                                                                                                                                                                                                                                               ( literal-bench )                                               need reset-frames  need frames@                                 : bench1  ( n -- )                                                reset-frames 0 do  cell negate drop  loop                       frames@ d. cr ;                                               : bench2  ( n -- )                                                reset-frames 0 do  [ cell negate ] literal drop  loop           frames@ d. crbench false-bench )                                         need reset-frames  need frames@                                 : 0-bench  ( n -- )                                               reset-frames 0 do  0 drop  loop                                 frames@ d. cr ;                                               : false-bench  ( n -- )                                           reset-frames 0 do  false drop  loop                             frames@ d. crd*-bench )                                                    : baden-d*  ( d1 d2 -- d3 )                                       >r swap >r            ( d1lo d2lo ) ( R: d2hi d1hi )            2dup um* 2swap        ( d1lo*d2lo d1lo d2lo )                   r> * swap r> * + +  ; ( d1*d2 ) ( R: )                        need pick  need roll                                            : smith-d*  ( d1 d2 -- d3 )                                       over 4 pick um*  5 roll 3 roll * +  2swap * +  ;              unused                                                          : dx-d* ( d|ud1 d|ud2 -- d|ud3 )                                  >r swap >r 2dup um* rot r> * + rot r> * + ;                   unused - . cr key drop                                          -->                                                                                                                                                                                                                                                             ( d*-bench )                                                    need bench{                                                     : baden-d*-bench  ( n -- )  0 do  1. 2. baden-d* 2drop  loop  ; : smith-d*-bench  ( n -- )  0 do  1. 2. smith-d* 2drop  loop  ; : dx-d*-bench  ( n -- )  0 do  1. 2. dx-d* 2drop  loop  ;       : d*-benchs  ( -- )                                               page                                                            32767 dup bench{ baden-d*-bench }bench.                               dup bench{ smith-d*-bench }bench.                                   bench{ dx-d*-bench }bench.  ;                                                                                                                                                                                                                                                                                                                                                                                                                       ( misc-benchs )                                                 need bench{  need 0if                                           : bench1  ( n -- )                                                begin  ?dup if  1 - else  exit  then  again  ;                : bench1a  ( n -- )                                               begin  ?dup if  1- else  exit  then  again  ;                 : bench2  ( n -- )                                                begin  dup 0= if  drop  exit  then  1-  again  ;              : bench2a  ( n -- )                                               begin  dup 0if  drop exit  then  1-  again  ;                 : bench3  ( n -- )                                                 begin  ?dup 0if  exit  then  1-  again  ;                    : misc-benchs  ( -- )                                             32767 dup bench{ bench1 }bench.                                       dup bench{ bench2 }bench.                                           bench{ bench3 }bench.  ;                            ( 2swap-bench )                                                 need bench{                                                     : 2swap-bench  ( -- )                                             32767 0 bench{ 2dup do  2swap  loop  }bench. 2dropdnegate-bench )                                               need bench{                                                     : dnegate-bench  ( -- )                                           32767 0 bench{ 2dup do  dnegate  loop  }bench. 2drop  ;       : dnegate-bench2  ( -- )                                          32767 0 bench{ 2dup do  dnegate2  loop  }bench. 2dropdup-bench )                                                  need bench{  variable times  40000 times !                      : iterations  ( -- n1 n2 )  times @ 0  ;                        : forth-0-?dup-bench  ( -- )                                      bench{ iterations do  0 ?dup drop  loop  }bench.  ;           : z80-0-?dup-bench  ( -- )                                        bench{ iterations do  0 ?dup80 drop  loop  }bench.  ;         : forth-1-?dup-bench  ( -- )                                      bench{ iterations do  1 ?dup 2drop  loop  }bench.  ;          : z80-1-?dup-bench  ( -- )                                        bench{ iterations do  1 ?dup80 2drop  loop  }bench.  ;        : ?dup-bench  ( -- )                                              cr ." Forth version:" cr ." 0 ?dup :" forth-0-?dup-bench cr                              ." 1 ?dup :" forth-1-?dup-bench cr        ." Z80 version:"   cr ." 0 ?dup :" z80-0-?dup-bench cr                                ." 1 ?dup :" z80-1-?dup-bench cr  ;  ( #spaces-bench )                                               need under+                                                     : #spaces1  ( ca len -- +n )                                      0 rot rot  0 do  count bl = 1 and under+  loop  drop ;        : #spaces2  ( ca len -- +n )                                      0 rot rot  bounds do  i c@ bl = +  loop  abs  ;               : #spaces3  ( ca len -- +n )                                      0 rot rot  0 do  count bl = under+  loop  drop abs  ;         need bench{                                                     defer #spaces                                                   : #spaces-bench  ( n -- )                                         cr bench{  0 do  0 32767 #spaces drop  loop  }bench.  ;       : run  ( n -- )                                                   dup ['] #spaces1 ['] #spaces defer! ." 1..." #spaces-bench      dup ['] #spaces2 ['] #spaces defer! ." 2..." #spaces-bench          ['] #spaces3 ['] #spaces defer! ." 3..." #spaces-bench  ; ( emit-udg-bench )                                              need bench{                                                     : e  ( n -- )                                                     bench{ 0 ?do  home 128 emit  loop  }bench.  ;                 : eu  ( n -- )                                                    bench{ 0 ?do  home 128 emit-udg  loop  }benchm+-bench )                                                    need bench{  need m+                                            : code-m+-bench  ( n -- )                                         bench{  0 do  i s>d i m+ 2drop  loop  }bench.  ;              unused                                                          : high-m+  ( n -- )  s>d d+  ;                                  unused - cr .( bytes of high M+ ) .                             : high-m+-bench  ( d1|ud1 n -- d2|ud2 )                           bench{  0 do  i s>d i high-m+ 2drop  loop  }bench.  ;         : run  ( n -- )                                                   cr dup cr ." Code M+ ..." code-m+-bench                                cr ." High M+ ..." high-m+-bench  ;                                                                                                                                                                                                                                                                                    ( du<-bench )                                                   need bench{  need j                                             unused                                                          : dzx-forth-du<  ( ud1 ud2 -- f )                                 rot swap 2dup                                                   u<  if  2drop 2drop -1 exit  then                               -   if  2drop 0 exit  then  u<  ;                             unused - cr .( DZX-Forth ) . .( bytes)  \ 41                    unused                                                          : m3forth-du< ( ud1 ud2 -- f )                                    rot 2dup = if 2drop u< else u> nip nip then  ;                unused - cr .( m3forth ) . .( bytes)  \ 29                      -->                                                                                                                                                                                                                                                             ( du<-bench )                                                   defer (u<)                                                      : du<-bench  ( n xt -- )                                          ['] (u<) defer!                                                 bench{                                                            dup 0 ?do  0 ?do  i s>d j s>d (u<) drop  loop  loop           }bench.  ;                                                    : run  ( n -- )                                                       cr ." DU< from:"                                            dup cr ." DZX-Forth ..." ['] dzx-forth-du< du<-bench                cr ." 3mforth ....." ['] m3forth-du< du<-bench  ;                                                                                                                                                                                                                                                                                                                                         ( m*/-bench )                                                   unused                                                          : gforth-m*/  ( d1 n1 +n2 -- d2 )                                 >r s>d >r abs -rot s>d r> xor r> swap >r >r dabs                rot tuck um* 2swap um* swap                                     >r 0 d+ r> -rot i um/mod -rot r> um/mod -rot r>                 if     if     1 0 d+                                                   then                                                            dnegate                                                  else   drop                                                     then  ;                                                       unused - cr .( gforth ) . .( bytes)  \ 89 bytes                 -->                                                                                                                                                                                                                                                             ( m*/-bench )                                                   unused                                                          need mt*  need tnegate  need ut/                                unused                                                          : coldforth-m*/  ( d1 n1 +n2 -- d2 )                                >r mt* dup 0< if    tnegate r> ut/ dnegate                                    else  r> ut/  then  ;                                  cr .( coldforth:)                                      unused - cr .( m*/ only ) . .( bytes)  \ 33 bytes               unused - cr .( with requirements) . .( bytes)  \ 185 bytes      -->                                                                                                                                                                                                                                                                                                                                                                                             ( m*/-bench )                                                   need bench{                                                     defer (m*/)                                                     : m*/-bench  ( n xt -- )                                          ['] (m*/) defer!                                                bench{                                                            1+ 1 ?do  i s>d i i (m*/) 2drop  loop                         }bench.  ;                                                    : run  ( n -- )                                                       cr ." M*/ from:"                                            dup cr ." Gforth ......" ['] gforth-m*/ m*/-bench                   cr ." ColdForth ..." ['] coldforth-m*/ m*/-bench  ;                                                                                                                                                                                                                                                                       ( u<-bench )                                                    need bench{                                                     defer (u<)  need j                                              : u<-bench  ( n xt -- )                                           ['] (u<) defer!                                                 bench{                                                            dup 0 ?do  0 ?do  i j (u<) drop  loop  loop                   }bench.  ;                                                    : run  ( n -- )                                                       cr ." u< from:"                                             dup cr ." DZX-Forth .........." ['] dzxu< u<-bench                  cr ." Z88 CamelForth ....." ['] u< u<-bench  ;                                                                                                                                                                                                                                                                            ( rnd-benchmark )                                               need bits  need u%                                              $FFFF constant #sampled                                         8 constant /byte  \ bits                                        #sampled /byte / constant /sample                               create sample  /sample allot                                    : -sample  ( -- )  sample /sample erase  ;                      : sampled  ( -- u )  sample /sample bits  ;                     : remember  ( u -- )  /byte /mod sample + c!set-bits  ;         : sampled%.  ( u -- )  #sampled u% 0.r ." %"  ;                 : .sampled  ( u -- )  dup u. ." (" sampled%. ." )"  ;           : report  ( ca len -- )  type sampled .sampled cr  ;            : rnd-benchmark  ( ca len xt -- )                                 -sample                                                         #sampled 0 do  dup execute remember  loop  drop                 report  ;                                                     ( random-pix-benchmark )                                        need set-pixel  need bench{  need pixels  need u%  need 3dup    256 192 * constant #pixels                                      defer rng  ( n -- 0..n-1 )                                      : pixels%.  ( u -- )  #pixels u% 0.r ." %"  ;                   : .pixels  ( u -- )  dup u. ." pixels (" pixels%. ." )"  ;      : .title  ( ca len -- )  ." Code: " type  ;                     variable cycles                                                 defer .cycles  ( -- )                                           : (.cycles)  ( -- )                                               cycles ?  s" cycles" cycles @ 1 = + type  ;                   : .time  ( d -- )  bench. ." per cycle" cr  ;                   : .result  ( ca len d -- )                                        2>r pixels >r  .title cr  r> .pixels cr                         2r> .time .cycles   ;                                         -->                                                             ( random-pix-benchmark )                                        defer random-coords  ( -- gx gy )                               : (random-coords)  ( -- gx gy )  256 rng 192 rng  ;             : fill-screen  ( -- )                                             #pixels 0 do  random-coords set-pixel  loop  ;                : signal  ( -- )  cycles @ %111 and border  ;                   : (random-pix-benchmark)  ( -- d )                                1 cycles +!  signal  bench{ fill-screen }bench  ;             : wait  ( -- )  key drop  ;                                     : finish  ( ca len d -- )  0 border  .result  wait  ;           : init  ( xt1 xt2 xt3 -- )                                        ['] random-coords defer!  ['] .cycles defer!  ['] rng defer!    page  -1 cycles !  ;                                          defer finish?  ( i*x -- j*x f )                                 : new-pixels?  ( n1 -- n2 f )  pixels tuck =  ;                 ' new-pixels? ' finish? defer!  -->                             ( random-pix-benchmark )                                        defer random-pix-benchmark  ( ca len xt -- )                    : (random-pix-benchmark2)  ( ca len -- )                          0 begin   (random-pix-benchmark) 2>r                                      finish? dup 0= if  2rdrop  then                       until     drop 2r> finish  ;                                  : random-pix-benchmark2  ( ca len xt -- )                         ['] (.cycles) ['] (random-coords) init                          (random-pix-benchmark2)  ;                                    ' random-pix-benchmark2 ' random-pix-benchmark defer!           : (.cycle)  ( -- )  ." First cycle only"  ;                     : (random-pix-benchmark1)  ( ca len -- )                          (random-pix-benchmark) .result wait  ;                        : random-pix-benchmark1  ( ca len xt -- )                         ['] (.cycle) ['] (random-coords) init                           (random-pix-benchmark1)  ;  -->                               ( random-pix-benchmark )                                        : crnd-coords  ( -- gx gy )  rng rng 192 min  ;                 : crnd-pix-benchmark2  ( ca len xt -- )                           ['] (.cycles) ['] crnd-coords init                              (random-pix-benchmark2)  ;                                    : crnd-pix-benchmark1  ( ca len xt -- )                           ['] (.cycle) ['] crnd-coords init                               (random-pix-benchmarkbit-random-pix-benchmarks )                                need random-pix-benchmark  need +thru  2 21 +thru               ace-random-pix-benchmark                                        cgm-5E9B-random-pix-benchmark                                   cgm-61BF-random-pix-benchmark                                   cgm-62DC-random-pix-benchmark                                   cgm-6363-random-pix-benchmark                                   cgm-6594-random-pix-benchmark                                   cgm-65E8-random-pix-benchmark                                   dx-random-pix-benchmark gf-random-pix-benchmark                 jer-random-pix-benchmark jml-random-pix-benchmark               lb-random-pix-benchmark lina-random-pix-benchmark               mb-random-pix-benchmark                                         sf83-random-pix-benchmark tt-random-pix-benchmark               vf-random-pix-benchmark z88-random-pix-benchmark                zh-random-pix-benchmark  -->                                    ( 16-bit-random-pix-benchmarks )                                ' random-pix-benchmark1 ' random-pix-benchmark defer!           cgm-5E9B-random-pix-benchmark                                   cgm-61BF-random-pix-benchmark                                   cgm-62DC-random-pix-benchmark                                   cgm-6363-random-pix-benchmark                                   cgm-6594-random-pix-benchmark                                   cgm-65E8-random-pix-benchmark                                   dx-random-pix-benchmark  vf-random-pix-benchmark                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( ace-random )                                                  need os-seed                                                    : ace-rnd  ( -- u )                                               os-seed @ 75 um* 75. d+ 2dup u< - - 1- dup os-seed !  ;       : ace-random  ( n -- 0..n-1 )  ace-rnd um* nip  ;               need random-pix-benchmark                                       : ace-random-pix-benchmark  ( -- )                                os-seed off  s" Jupiter ACE manual"                             ['] ace-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( cgm-5E9B-random )                                             2variable rloc  $111 rloc !  \ seed with nonzero                : cgm-5E9B-rnd  ( -- u )                                          rloc 2@ $5E9B um* rot 0 d+ over rloc 2!  ;                    : cgm-5E9B-random  ( n -- 0..n-1 )  cgm-5E9B-rnd um* nip  ;     need random-pix-benchmark                                       : cgm-5E9B-random-pix-benchmark  ( -- )                           s" C. G. Montgomery $5E9B"                                      ['] cgm-5E9B-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( cgm-61BF-random )                                             2variable rloc  $111 rloc !  \ seed with nonzero                : cgm-61BF-rnd  ( -- u )                                          rloc 2@ $61BF um* rot 0 d+ over rloc 2!  ;                    : cgm-61BF-random  ( n -- 0..n-1 )  cgm-61BF-rnd um* nip  ;     need random-pix-benchmark                                       : cgm-61BF-random-pix-benchmark  ( -- )                           s" C. G. Montgomery $61BF"                                      ['] cgm-61BF-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( cgm-62DC-random )                                             2variable rloc  $111 rloc !  \ seed with nonzero                : cgm-62DC-rnd  ( -- u )                                          rloc 2@ $62DC um* rot 0 d+ over rloc 2!  ;                    : cgm-62DC-random  ( n -- 0..n-1 )  cgm-62DC-rnd um* nip  ;     need random-pix-benchmark                                       : cgm-62DC-random-pix-benchmark  ( -- )                           s" C. G. Montgomery $62DC"                                      ['] cgm-62DC-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( cgm-6363-random )                                             2variable rloc  $111 rloc !  \ seed with nonzero                : cgm-6363-rnd  ( -- u )                                          rloc 2@ $6363 um* rot 0 d+ over rloc 2!  ;                    : cgm-6363-random  ( n -- 0..n-1 )  cgm-6363-rnd um* nip  ;     need random-pix-benchmark                                       : cgm-6363-random-pix-benchmark  ( -- )                           s" C. G. Montgomery $6363"                                      ['] cgm-6363-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( cgm-6594-random )                                             2variable rloc  $111 rloc !  \ seed with nonzero                : cgm-6594-rnd  ( -- u )                                          rloc 2@ $6594 um* rot 0 d+ over rloc 2!  ;                    : cgm-6594-random  ( n -- 0..n-1 )  cgm-6594-rnd um* nip  ;     need random-pix-benchmark                                       : cgm-6594-random-pix-benchmark  ( -- )                           s" C. G. Montgomery $6594"                                      ['] cgm-6594-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( cgm-65E8-random )                                             2variable rloc  $111 rloc !  \ seed with nonzero                : cgm-65E8-rnd  ( -- u )                                          rloc 2@ $65E8 um* rot 0 d+ over rloc 2!  ;                    : cgm-65E8-random  ( n -- 0..n-1 )  cgm-65E8-rnd um* nip  ;     need random-pix-benchmark                                       : cgm-65E8-random-pix-benchmark  ( -- )                           s" C. G. Montgomery $65E8"                                      ['] cgm-65E8-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( dx-random )                                                   2variable dx-seed  1. dx-seed 2!                                need d*                                                         : dx-rnd ( -- u )                                                 dx-seed 2@ $15A4E35. d* 1. d+ tuck dx-seed 2!  ;              : dx-random ( u -- 0..u-1 )  dx-rnd um* nip  ;                  need random-pix-benchmark                                       : dx-random-pix-benchmark  ( -- )                                 s" DX-Forth" ['] dx-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( gf-random )                                                   need os-seed  need ud*                                          : gf-rnd  ( -- n )                                                272958469. os-seed @ ud* d>s 1+ dup os-seed !  ;              : gf-random  ( n -- 0..n-1 )  gf-rnd um* nip  ;                 need random-pix-benchmark                                       : gf-random-pix-benchmark  ( -- )                                 os-seed off  s" Gforth"                                         ['] gf-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( jer-random )                                                  need os-seed                                                    : jer-rnd  ( -- n )                                               os-seed @ 259 * 3 + 32767 and dup os-seed !  ;                : jer-random ( n1 -- n2 )                                         jer-rnd 32767 */  ;                                           need random-pix-benchmark                                       : jer-random-pix-benchmark  ( -- )                                os-seed off  s" J. E. Rickenbacker"                             ['] jer-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                        ( jml-random )                                                  need z80-asm  need os-seed                                      code jml-rnd  ( -- u )                                            os-seed fthl  hl push                                           hl addp  hl addp  hl addp  hl addp  hl addp  hl addp            de pop  de addp  0029 de ldp#  de addp                          os-seed sthl                                                    jppushhl                                                        end-code                                                      : jml-random  ( n -- 0..n-1 )  jml-rnd um* nip  ;               need random-pix-benchmark                                       : jml-random-pix-benchmark  ( -- )                                os-seed off  s" J. M. Lazo"                                     ['] jml-random random-pix-benchmark  ;                                                                                                                                                        ( lb-random )                                                   need os-seed                                                    : lb-rnd  ( -- u )  os-seed @ 31421 * 6927 + dup os-seed !  ;   : lb-random  ( n -- 0..n-1 )  lb-rnd um* nip  ;                 need random-pix-benchmark                                       : lb-random-pix-benchmark  ( -- )                                 os-seed off  s" Leo Brodie"                                     ['] lb-random random-pix-benchmarklina-random )                                                 need os-seed                                                    : lina-rnd  ( -- n )                                              os-seed @ 107465 * 234567 + dup os-seed !  ;                  : lina-random  ( n -- 0..n-1 )  lina-rnd um* nip ;              need random-pix-benchmark                                       : lina-random-pix-benchmark  ( -- )                               os-seed off  s" lina"                                           ['] lina-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( mb-random )                                                   need z80-asm  need os-seed                                      code mb-rnd  ( -- u )                                             os-seed de ftp                                                  d a ld  e h ld  #253 l ld#                                      a or  de sbcp                                                   0 sbc#  de sbcp                                                 0 d ld#  d sbc  a e ld  de sbcp                                 cy if  hl incp  then                                            os-seed sthl                                                    jppushhl   end-code                                           : mb-random  ( n -- 0..n-1 )  mb-rnd um* nip  ;                 need random-pix-benchmark                                       : mb-random-pix-benchmark  ( -- )                                 os-seed off  s" Milos Bazelides"                                ['] mb-random random-pix-benchmark  ;                         ( mm-random )                                                   need cell/  need frames@                                        variable seed1  variable seed2                                  : randomize  ( -- )  frames@ seed1 ! seed2 !  ;                 : 0seed  ( -- )  seed1 off seed2 off  ;  0seed                  : mm-random  ( n1 --- n2 )                                        seed1 @ 123 * 234 + seed2 @ 234 * 123 +                         2dup + seed2 ! 2dup xor seed1 !                                 + swap cells mod cell/ ;                                      need random-pix-benchmark                                       : mm-random-pix-benchmark  ( -- )                                 s" IsForth" ['] mm-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                             ( sf83-random )                                                 need os-seed  3 os-seed !                                       : sf83-random  ( n -- 0..n-1 )                                    os-seed @ 743 * 43 + dup os-seed ! um* swap drop  ;           need random-pix-benchmark                                       : sf83-random-pix-benchmark  ( -- )                               s" Spectrum Forth-83"                                           ['] sf83-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( tt-random )                                                   need os-seed                                                    : tt-random   ( n -- 0..n-1 )                                       os-seed @ 13 * $7FFF and                                        dup os-seed !  swap mod ;                                   need random-pix-benchmark                                       : tt-random-pix-benchmark  ( -- )                                 os-seed on  s" Tetris for terminals"                            ['] tt-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( vf-random )                                                   need os-frames                                                  : vf-random  ( n -- 0..n-1 )                                      1+ 8195 os-frames @ um* 1. d+                                   16383 um/mod drop                                               swap mod  ;                                                   need random-pix-benchmark                                       : vf-random-pix-benchmark  ( -- )                                 s" vForth" ['] vf-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( z88-random )                                                  need ud*  need os-seed                                          : z88-random  ( n -- 0..n-1 )                                     1103515245. \ 20077 16838                                       os-seed @ ud* 12345. d+ over os-seed !                          rot ud/mod 2drop  ;                                           need random-pix-benchmark                                       : z88-random-pix-benchmark  ( -- )                                os-seed off  s" Z88 CamelForth"                                 ['] z88-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                                        ( zh-random )                                                   need z80-asm  need os-seed                                      code zh-rnd  ( -- u )                                             os-seed fthl                                                    hl de ldp                                                       hl addp  de addp  hl addp  de addp  hl addp                     de addp  hl addp  hl addp  hl addp  hl addp  de addp            h inc  hl incp                                                  os-seed sthl                                                    jppushhl   end-code                                           : zh-random  ( n -- 0..n-1 )  zh-rnd um* nip  ;                 need random-pix-benchmark                                       : zh-random-pix-benchmark  ( -- )                                 os-seed off  s" Z80 Heaven"                                     ['] zh-random random-pix-benchmark  ;                                                                                         ( random-byte )                                                 code random-byte  ( -- b )                                        ED c, 5F c,     \ ld a,r                                        C3 c, pusha ,   \ jp pusha                                      end-code                                                      need bench{                                                     : random-byte-test  ( -- )                                        ['] random-byte ['] rng defer!  cls  bench{ pixels              do  rng rng 192 min set-pixel  loop  }bench.                    ." Z80 R register" cr key drop ;                                                                                                                                                                                                                                                                                                                                                                                                                              ( lcm-random )                                                  need d*  need du/mod  need 2nip                                 2variable 2seed                                                 2147483647. 2constant max32                                     : lcm-rnd  ( -- d )                                               2seed 2@ 16807. d*                                              max32 du/mod  2nip                                              2dup 2seed 2!  ;                                              : lcm-random  ( n -- 0..n-1 )  lcm-rnd d>s um* nip  ;           need random-pix-benchmark                                       : lcm-random-pix-benchmark  ( -- )                                s" LCM" ['] lcm-random random-pix-benchmark  ;                                                                                                                                                                                                                                                                                ( 8-bit-random-pix-benchmarks )                                 need random-pix-benchmark  need +thru  1 5 +thru                ' crnd-pix-benchmark2 ' random-pix-benchmark defer!               mb1-random-pix-benchmark                                        mb2-random-pix-benchmark                                      ' crnd-pix-benchmark1 ' random-pix-benchmark deferjw-crnd )                                                     need z80-asm  need os-seed                                      code jw-crnd  ( -- b )                                            os-seed fthl                                                    ED c, 5F c,  a d ld  m e ld                                     de addp  l add  h xor                                           os-seed sthl                                                    pusha jp                                                        end-code                                                      need random-pix-benchmark                                       : jw-random-pix-benchmark  ( -- )                                 os-seed off  s" Joe Wingbermuehle"                              ['] jw-crnd random-pix-benchmark  ;                                                                                                                                                                                                                           ( mb1-crnd )                                                    need z80-asm  need os-seed                                      code mb1-crnd  ( -- b )                                           os-seed fta                                                     a d ld  a add  a add  d add                                     a inc  os-seed sta                                              pusha jp                                                        end-code                                                      : mb1-crandom  ( n1 -- n2 )  mb1-crnd um* nip  ;                need random-pix-benchmark                                       : mb1-random-pix-benchmark  ( -- )                                os-seed off  s" Milos Bazelides 1 (8 bit)"                      ['] mb1-crnd random-pix-benchmark  ;                                                                                                                                                                                                                          ( mb2-crnd )                                                    need z80-asm  need os-seed                                      code mb2-crnd  ( -- b )                                           os-seed fta                                                     a d ld  a add  a add  d add                                     07 add#  os-seed sta                                            pusha jp  end-code                                            : mb2-crandom  ( n1 -- n2 )  mb2-crnd um* nip  ;                need random-pix-benchmark                                       : mb2-random-pix-benchmark  ( -- )                                os-seed off  s" Milos Bazelides 2 (8 bit)"                      ['] mb2-crnd random-pix-benchmark  ;                                                                                                                                                                                                                                                                                          ( zh-crnd )                                                     code zh-crnd  ( -- b )                                            os-seed fta  a e ld                                             a add  e add  a add  a add  e add  #83 add#                     os-seed sta                                                     pusha jp                                                        end-code                                                      need random-pix-benchmark                                       : zh-random-pix-benchmark  ( -- )                                 s" Z80 Heaven (8 bit)" ['] zh-crnd random-pix-benchmark  ;                                                                                                                                                                                                                                                                                                                                                                                                    ( opt3-libzx-crnd )                                             need z80-asm  need os-seed  need random-pix-benchmark           variable rom-pointer  rom-pointer off  os-seed off              code opt3-libzx-crnd  ( -- b )                                    bc push  af push                                                rom-pointer hl ftp  hl incp                                     h a ld  %00111111 and  a h ld  hl rom-pointer stp               bc pop  c rlc  b rlc  os-seed fta                               47 add#  b add  c add  d add  e add  h add  l add               rom-pointer hl ldp#  m add                                      os-seed sta  bc pop  pusha jp  end-code                       : libzx-random-pix-benchmark  ( -- )                              rom-pointer off  os-seed off  s" libzx opt3 (8 bit)"            ['] opt3-libzx-crnd random-pix-benchmark  ;                   ' crnd-pix-benchmark2 ' random-pix-benchmark defer!             libzx-random-pix-benchmark  \ XXX TMP --                        ( opt2-libzx-crnd )                                             need z80-asm  need os-seed  need random-pix-benchmark           variable rom-pointer  rom-pointer off  os-seed off              code opt2-libzx-crnd  ( -- b )                                    bc push  af push                                                rom-pointer hl ftp  hl incp                                     h a ld  %00111111 and  a h ld  hl rom-pointer stp               bc pop  c rlc  b rlc  os-seed fta                               47 add#  b add  c add  d add  e add  h add  l add               rom-pointer hl ldp#  m add                                      os-seed sta                                                     bc pop  pusha jp  end-code                                    : libzx-random-pix-benchmark  ( -- )                              rom-pointer off  os-seed off  s" libzx opt2 (8 bit)"            ['] opt2-libzx-crnd random-pix-benchmark  ;                   libzx-random-pix-benchmark  \ XXX TMP --                        ( opt1-libzx-crnd )                                             need z80-asm  need os-seed  need random-pix-benchmark           variable rom-pointer  3 rom-pointer !  33 os-seed c!            code opt1-libzx-crnd  ( -- b )                                    bc push  af push                                                rom-pointer bc ftp 3 hl ldp#  bc addp                           h a ld  %00111111 and  a h ld  hl rom-pointer stp               bc pop  c rlc  b rlc  os-seed fta                               47 add#  b add  c add  d add  e add  h add  l add               rom-pointer hl ldp#  m add                                      os-seed sta                                                     bc pop  pusha jp  end-code                                    : libzx-random-pix-benchmark  ( -- )                              3 rom-pointer !  33 os-seed c!                                  s" libzx opt1 (8 bit)"                                          ['] opt1-libzx-crnd random-pix-benchmark  ;                   ( libzx-crnd )                                                  need z80-asm  need os-seed  need random-pix-benchmark           variable rom-pointer  3 rom-pointer !  33 os-seed c!            code libzx-crnd  ( -- b )                                         bc push  af push                                                rom-pointer hl ldp#                                             m c ld  hl incp  m b ld  3 hl ldp#  bc addp                     h a ld  %00111111 and  a h ld  hl rom-pointer stp               bc pop  c rlc  b rlc  os-seed fta                               47 add#  b add  c add  d add  e add  h add  l add               rom-pointer hl ldp#  m add                                      os-seed ldp#  m a ld                                            bc pop  0 h ld#  a l ld  jppushhl end-code                    : libzx-random-pix-benchmark  ( -- )                              3 rom-pointer !  33 os-seed c!                                  s" libzx (8 bit)" ['] libzx-crnd random-pix-benchmark  ;      ( alias-test synonym-test )                                     need alias need synonym                                         ' literal alias literal-a                                       ' border alias border-a                                         ' if alias if-a                                                 synonym border-s border                                         synonym literal-s literal                                       synonym if-s if                                                 synonym2 border-s2 border                                       synonym2 literal-s2 literal                                     synonym2 if-s2 if                                                                                                                                                                                                                                                                                                                                                                               ( until-test )                                                  need z80-asm  need dump                                         code until-test  ( -- )                                           begin                                                             nop                                                           z until  jpnext                                                 end-code                                                      ' until-test >body 5 dumpif'-test )                                                    need z80-asm  need dump                                         code if'-test  ( -- )                                             .( here is ) here u.                                            p' if'  \ not expecting a regular character                       nz if  \ not expecting the column                                 cpl  C0 add#  \ now A = 191 - char                              hl incp                                                       then                                                            hl incp  a m ld                                                 ret                                                           then'  end-code                                               ' if'-test >body dup here swap - dump                                                                                                                                                                                                                           ( {if-test {do-test )                                           : test2  ( n -- )                                                 {do   dup 5 <   do> ." <5" cr 1+                                |do|  dup 10 <  do> ." <10" cr 1+                               do} drop  ;                                                   : test1  ( n1 n2 -- )                                             {if   2dup > if> ." >" cr                                       |if|  2dup < if> ." <" cr                                       if}options[-test )                                               : o1 ." option 1" ;  : o2 ." option 2" ;  : o3 ." option 3" ;   : test  ( c -- )                                                  options[                                                          char a option o1  char b option o2  char c option o3          ]options  ." end of test" cr   ;                              : retest  ( -- )  [char] a test ." end of retest" cr  ;         : o0 ." default" ;                                              : testd  ( c -- )                                                 options[                                                          char a option o1  char b option o2  char c option o3            default-option o0                                             ]options  ;                                                                                                                                                                                                                                                   ( /-test )                                                      [defined] (/)  ?\ defer (/)                                     : ((/-test))  ( dividend divisor -- )                             >r s>d r> (/) swap . . space  ;                               : (/-test)  ( -- )                                                cr  10  7 ((/-test)) -10  7 ((/-test))                              10 -7 ((/-test)) -10 -7 ((/-test))  ;                     : /-test  ( -- )                                                  dup ['] m/     ['] (/) defer! (/-test)                              ['] sm/rem ['] (/) defer! (/-test)  ;                                                                                                                                                                                                                                                                                                                                                                                                                     ( exception-test )                                              : could-fail  ( -- c )                                            key dup [char] q =                                              if  -1 throw  then  ;                                         : do-it  ( a b -- c )                                             2drop could-fail  ;                                           : try-it  ( -- )                                                  1 2 ['] do-it catch                                             if    ( x1 x2 )  2drop ." There was an exception" cr            else  ." The character was " emit cr then  ;                  : retry-it  ( -- )                                                begin   1 2 ['] do-it catch                                     while   ( x1 x2 ) 2drop ." Exception, keep trying" cr           repeat  ( c )                                                   ." The character was " emit cr  ;                                                                                             ( err>ord )                                                     : err>ord  ( -- )                                                 91 1 do  i . i error>ordinal ."  -> " . cr  loop                286 256 do  i . i error>ordinal ."  -> " . cr  loop             1025 1000 do  i . i error>ordinal ."  -> " . cr  loopblock x line 0)                                                .( block x line 1 ) cr                                          .( block x line 2 ) cr                                          .( block x line 3 ) cr                                          .( block x line 4 ) cr                                          .( block x line 5 ) cr                                          .( block x line 6 ) cr                                          .( block x line 7 ) cr                                          .( block x line 8 ) cr                                          .( block x line 9 ) cr                                          .( block x line 10 ) cr                                         .( block x line 11 ) cr                                         .( block x line 12 ) cr                                         .( block x line 13 ) cr                                         .( block x line 14 ) cr                                         .( block x line 15 ) cr                                       .( block x+1 line 0)                                              .( block x+1 line 1 ) cr                                        .( block x+1 line 2 ) cr                                        .( block x+1 line 3 ) cr                                        .( block x+1 line 4 ) cr                                        .( block x+1 line 5 ) cr                                        .( block x+1 line 6 ) cr                                        .( block x+1 line 7 ) cr                                        .( block x+1 line 8 ) cr                                        .( block x+1 line 9 ) cr                                        .( block x+1 line 10 ) cr                                       .( block x+1 line 11 ) cr                                       .( block x+1 line 12 ) cr                                       .( block x+1 line 13 ) cr                                       .( block x+1 line 14 ) cr                                       .( block x+1 line 15 ) cr                                     ( XXX TMP -- block for temporary tries)                         need thru                                                       blk @ 1+ blk @ 2+ thrublock for temporary tries)                         : helloplusd-in plusd-out )                                          need z80-asm  need --hook-codes--                               code plusd-in  ( -- )                                             patch hook                                                      jpnext                                                          end-code                                                      code plusd-out  ( -- )                                            D3 c, #231 c,     \ out (231),a                                 jpnext                                                          end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( plusd-in plusd-out )                                          code plusd-in  ( -- )                                             DB c, #231 c,     \ in a,(231)                                  jpnext                                                          end-code                                                      code plusd-out  ( -- )                                            D3 c, #231 c,     \ out (231),a                                 jpnext                                                          end-codeplusd-in, plusd-out, )                                        need macro                                                      macro plusd-in,  ( -- )                                           DB c, #231 c,     \ in a,(231)                                  endm                                                          macro plusd-out,  ( -- )                                          D3 c, #231 c,     \ out (231),a                                 endmufia )                                                        24 constant /ufia  create ufia  /ufia allot  ufia /ufia erase   ufia      constant dstr1   \ drive: 1 or 2                      ufia 1+   constant fstr1   \ program number                     ufia 2+   constant sstr1   \ stream number                      ufia 3 +  constant device  \ device: "D" or "d"                 ufia 4 +  constant nstr1   \ directory description              ufia 5 +  constant nstr2   \ file name                          ufia 15 + constant hd00    \ file type                          ufia 16 + constant hd0b    \ file length                        ufia 18 + constant hd0d    \ file start address                 char d device c! \ "d" or "D"                                   2 sstr1 c!  \ stream 2                                          1 dstr1 c!  \ drive 1                                           variable file-length   \ copy of `hd0b` used by `(<file)`       variable file-address  \ copy of `hd0d` used by `(<file)`       ( --file-types-- )                                              0 constant basic-filetype                                       1 constant data-array-filetype                                  2 constant string-array-filetype                                3 constant code-filetype                                        : --file-typesdirectory-descriptions-- )                                  01 constant basic-file-dir      02 constant data-array-dir      03 constant string-array-dir    04 constant code-file-dir       05 constant snapshot-48k-dir    06 constant microdrive-file-dir 07 constant screens$-file-dir   08 constant special-file-dir    09 constant snapshot-128k-dir   10 constant opentype-file-dir   11 constant execute-file-dir                                    : --directory-descriptionshook-codes-- )                                              $33 constant hxfer  $34 constant ofsm  $35 constant hofile      $36 constant sbyte  $37 constant hsvbk $38 constant cfsm        $39 constant pntp   $3A constant cops  $3B constant hgfile      $3C constant lbyte  $3D constant hldbk $3E constant wsad        $3F constant sad    $40 constant rest  $41 constant heraz       $42 constant cops2  $43 constant pcat  $44 constant hrsad       $45 constant hwsad  $46 constant otfoc $47 constant patch       : --hook-codesdosior>error ?dos-error dosior>ior )                          : dosior>error  ( dosior -- f n )                                 dup 1 and negate swap   \ calculate f                           flip %11111111 and      \ upper 8 bits of ior                   1000 + negate  ;                                              : ?dos-error  ( dosior -- )                                       dosior>error ?throw  ;                                        : dosior>ior  ( dosior -- ior )                                   dup 1 and negate          \ error?                              swap flip %11111111 and   \ get upper 8 bits                    1000 + negate and  ;                                                                                                                                                                                                                                                                                                                                                                          ( get-drive set-drive )                                         need z80-asm  need --hook-codes--                               code get-drive  ( -- n )                                          bc push  \ save the Forth IP                                    patch hook                                                      3ACE fta  \ XXX NEW                                             E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp  end-code                                            code set-drive  ( n -- )                                          hl pop                                                          bc push  \ save the Forth IP                                    l a ld  21 hook   \ select drive in a                           bc pop   next ix ldp#  \ restore the Forth registers            jpnext  end-code                                                                                                              ( delete-file )                                                 need z80-asm  need ufia  need --hook-codes--                    need filename>ufia  need dosior>ior                             code (delete-file)  ( -- ior )                                    bc push  \ save the Forth registers                             ufia ix ldp#                                                    heraz hook  \ erase the file                                    bc pop  next ix ldp#  \ restore the Forth registers             af push                                                         jpnext                                                          end-code                                                      : delete-file  ( ca len -- ior )                                  filename>ufia (delete-file) dosior>ior  ;                                                                                                                                                                                                                     ( -filename filename! >ufia filename>ufia )                     need ufia  need get-drive                                       10 constant /filename  \ max filename length                    : -filename  ( -- )  nstr2 /filename blank  ;                   : filename!  ( ca len -- )                                        -filename /filename min nstr2 swap cmove  ;                   : >ufia  ( a1 len1 ca2 len2 -- )                                  3 hd00 c!  4 nstr1 c!  \ code filetype and dir description      filename!                                                       dup hd0b !  file-length !                                       dup hd0d !  file-address !                                      get-drive dstr1 c!  ;                                         1 set-drive  \ default                                          : filename>ufia  ( ca len -- )  0 0 2swap >ufia  ;                                                                                                                                              ( >file )                                                       need z80-asm  need ufia  need --hook-codes--                    need >ufia  need dosior>ior                                     code (>file)  ( -- ior )                                          bc push  \ save the Forth registers                             ufia ix ldp#                                                    hofile hook \ open the file and create its header               nc if \ no error?                                                 hd0d de ftp  hd0b bc ftp  \ de=start, bc=length                 hsvbk hook \ save to file                                       nc if  cfsm hook  then  \ close the file if no error          then  bc pop  next ix ldp#  \ restore the Forth registers       af push  \ ior                                                  jpnext end-code                                               : >file  ( a1 len1 ca2 len2 -- ior )                              >ufia (>file) dosior>ior  ;                                   ( <file )                                                       need z80-asm  need ufia  need --hook-codes--                    need >ufia  need dosior>ior                                     code (<file)  ( -- ior )                                          bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       hd00 de ldp#  9 b ld# \ destination and count                   begin  lbyte hook  de stap  de incp  step                       file-address de ftp  file-length bc ftp                         bc tstp z if  hd0b bc ftp  then  hldbk hook                   then  bc pop  next ix ldp#  af push                             jpnext  end-code                                              : <file  ( a1 len1 ca2 len2 -- ior )                              >ufia (<file) dosior>ior  ;                                                                                                   ( file>screen )                                                 need z80-asm  need ufia  need --hook-codes--                    need >ufia  need dosior>ior                                     code (file>screen)  ( -- dosior )                                 bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       patch hook  4000 de ldp#  128 bc ldp#                           d h ld                                                          begin   lbyte hook  de stap                                             a l ld  de push  bc push  1744 call  bc pop  de pop             de incp  bc decp  b a ld  c or                          z until  E7 out  \ page +D out                                then  bc pop  next ix ldp#  af push                             jpnext  end-code -->                                                                                                          ( file>screen )                                                 : file>screen  ( ca2 len2 -- ior )                                >ufia (file>screen) dosior>iorcode .100  ( u -- )                                               hl pop                                                          bc push                                                         hl push                                                         patch hook                                                      hl pop                                                          1744 call                                                       E7 out  \ page +D out                                           bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                                                                                                                                                                                                                      ( <file-as-is )                                                 need z80-asm  need ufia  need --hook-codes--                    need >ufia  need dosior>ior                                     code (<file-as-is)  ( -- ior )                                    bc push  \ save the Forth IP                                    ufia ix ldp#  hgfile hook \ get the file                        nc if \ no error?  -- load the file header:                       hd00 de ldp#  9 b ld# \ destination and count                   begin  lbyte hook  de stap  de incp  step                       hd0d de ftp  hd0b bc ftp  hldbk hook                          then  bc pop  next ix ldp#  af push                             jpnext  end-code                                              : <file-as-is  ( ca len -- ior )                                  0 0 2swap >ufia (<file-as-is) dosior>ior  ;                                                                                                                                                   ( file? )                                                       need ufia  need filename!  need --hook-codes--                  code (file?)  ( -- f )                                            bc push  \ save the Forth IP                                    patch hook                                                      nstr2 ix ldp#                                                   1146 call  \ FIND_FILE                                          168E call  \ BORD_REST = restore the border                     E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             ' true jpz                                                      ' false jp                                                      end-code                                                      : file?  ( ca len -- f )  filename! (file?)  ;                                                                                                                                                  ( cat acat wcat wacat )                                         need z80-asm  need ufia  need --hook-codes--                    need filename>ufia                                              [defined] ufia1  ?\ $3E01 constant ufia1                        code (cat)  ( n -- )                                              hl pop  bc push  exx                                            patch hook                                                      ufia hl ldp#  ufia1 de ldp#  /ufia bc ldp#  ldir                exx  l a ld  09A5 call \ XXX NEW                                E7 out  bc pop  next ix ldp#  jpnext  end-code                : wcat  ( ca len -- )  filename>ufia  4 (cat)  ;                : wacat  ( ca len -- )  filename>ufia  2 (cat)  ;  decimal      : cat  ( -- )  s" *" wcat  ;                                    : acat  ( -- )  s" *" wacat ;  decimal                                                                                                                                                          ( @dos )                                                        need z80-asm  need --hook-codes--                               code @dos  ( a -- n )                                             hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop m e ld  hl incp  m d ld                                  E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             de push                                                         jpnext                                                          end-code                                                                                                                                                                                                                                                      ( c@dos )                                                       need z80-asm  need --hook-codes--                               code c@dos  ( a -- b )                                            hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop                                                          m a ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp                                                        end-code                                                                                                                                                                                                                                                      ( c!dos )                                                       need z80-asm  need --hook-codes--                               code c!dos  ( b a -- )                                            hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push hl push                                                 patch hook                                                      hl pop  de pop  e m ld                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                                                                                                                                                      ( !dos )                                                        need z80-asm  need --hook-codes--                               code !dos  ( n a -- )                                             hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push  hl push                                                patch hook                                                      hl pop  de pop  e m ld  hl incp  d m ld                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                                                                                                                                                      ( @dosvar )                                                     need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code @dosvar  ( n1 -- n2 )                                        hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop  dos-vars de ldp#  de addp                               m e ld  hl incp  m d ld                                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             de push                                                         jpnext                                                          end-code                                                                                                                      ( c@dosvar )                                                    need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code c@dosvar  ( n -- b )                                         hl pop                                                          bc push  \ save the Forth IP                                    hl push                                                         patch hook                                                      hl pop  dos-vars de ldp#  de addp                               m a ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             pusha jp                                                        end-code                                                                                                                                                                                      ( !dosvar )                                                     need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code !dosvar  ( n1 n2 -- )                                        hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push  hl push                                                patch hook                                                      hl pop  dos-vars de ldp#  de addp  de pop                       e m ld  hl incp  d m ld                                         E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                      ( c!dosvar )                                                    need z80-asm  need --hook-codes--                               [defined] dos-vars ?\ 8192 constant dos-vars                    code c!dosvar  ( b n -- )                                         hl pop  de pop                                                  bc push  \ save the Forth IP                                    de push hl push                                                 patch hook                                                      hl pop  dos-vars de ldp#  de addp  de pop                       e m ld                                                          E7 out  \ page +D out                                           bc pop  next ix ldp#  \ restore the Forth registers             jpnext                                                          end-code                                                                                                                                                                                      ( editor )                                                      only forth definitions                                          need list  need update  need flush  need parse-line             vocabulary editor  also editor definitions  hex                 : text  ( "ccc<eol>" -- )                                         pad c/l 1+ blank  parse-line  pad place  ;                    : line  ( n -- a )                                                dup FFF0 and #-266 ?throw scr @ line>string drop  ;           variable r#                                                     : #locate  ( -- n1 n2 )  r# @ c/l /mod  ;                       : #lead  ( -- a n )  #locate line swap  ;                       : #lag  ( -- a n )  #lead dup >r + c/l r> -  ;                  : -move  ( a n -- )  line c/l cmove update  ;                   : h  ( n -- )  line pad 1+ c/l dup pad c! cmove  ;              -->                                                                                                                             ( editor )                                                      : e  ( n -- )  line c/l blank update  ;                         : s  ( n -- )  dup 1 - 0E do i line i 1+ -move -1 +loop e  ;    : d  ( n -- )  dup h 0F dup rot do i 1+ line i -move loop e  ;  : m  ( n -- )                                                     r# +! cr space #lead type [char] _ emit                         #lag type #locate . drop  ;                                   : t  ( n -- )  dup c/l * r# ! dup h 0 m  ;                      : l  ( n -- )  scr @ list 0 m  ;                                : r  ( n -- )  pad 1+ swap -move  ;                             : p  ( n "ccc<eol>"  -- )  text r  ;                            : i  ( n -- )  dup s r  ;                                       : top  ( -- )  0 r# !  ;                                        -->                                                                                                                                                                                             ( editor )                                                      : clear  ( n -- )                                                 scr !  10 0 do [ also forth ] i [ previous ] e loop  ;        : -text  ( a1 len1 a2 -- f )                                      swap ?dup if                                                      over + swap do                                                    dup c@ [ also forth ] i [ previous ] c@ -                       if  0= leave  else 1+  then                                   loop  else  drop 0=  then  ;                                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( editor )                                                      also forth                                                      : match  ( a1 len1 a2 len2 -- true n3 | false n4 )                >r >r 2dup r> r> 2swap over + swap                              do                                                                2dup i -text                                                    if  >r 2drop r> - i swap - 0 swap 0 0 leave  then             loop                                                            2drop swap 0= swap ;  previous                                : 1line  ( -- f )  #lag pad count match r# +!  ;                : find  ( -- )                                                    begin                                                             03FF r# @ <                                                     if  top pad here c/l 1+ cmove #-270 throw  then  1line        until  ;                                                      -->                                                             ( editor )                                                      : delete  ( n -- )                                                >r #lag + r@ - #lag r@ negate r# +! #lead + swap cmove          r> blank  ;                                                   : n  ( -- )  find 0 m  ;                                        : f  ( "ccc<eol>" -- )  text n  ;                               : b  ( -- )  pad c@ negate m  ;                                 : x  ( "ccc<eol>" -- )  text find pad c@ delete 0 m  ;          : till  ( "ccc<eol>" -- )                                         #lead + text 1line 0= #-270 ?throw                              #lead + swap - delete 0 m  ;                                  -->                                                                                                                                                                                                                                                                                                                             ( editor )                                                      : (c)  ( ca len -- )                                              #lag rot over min >r r@ r# +! r@ - >r                           dup here r@ cmove here #lead + r> cmove r> cmove 0 m            update  ;                                                     : c  ( "ccc<eol>" -- )                                            text pad count dup if  (c)  else  2drop  then  ;              also forth                                                      : copy  ( n1 n2 -- )                                              swap block cell- ! update save-buffers  ;                     only forth definitions decimal                                                                                                                                                                                                                                                                                                                                                                  ( environment? )                                                need wid-of                                                     vocabulary environment ( -- )                                   wid-of environment constant environment-wordlist ( -- wid )     : environment? ( ca len -- false | i*x true )                     environment-wordlist search-wordlist                            if  execute true  else  false  then  ;                        also environment definitions                                    8 constant address-unit-bits ( -- n )                           255 constant max-char ( -- u )                                  255 constant /counted-string ( -- n )                           address-unit-bits cells 2* 2+ constant /hold ( -- n )           84 constant /pad ( -- n )                                       1 -3 mod 0< constant floored ( -- f )                           -->                                                                                                                             ( environment? )                                                32767 constant max-n ( -- n )                                   -1 constant max-u ( -- u )                                      -1 max-n 2constant max-d ( -- d )                               -1. 2constant max-ud ( -- ud )                                  $50 constant return-stack-cells ( -- n )                        $50 constant stack-cells ( -- n )                               forth definitions  previoustandard error codes #-01..#-15)                              \ #-01 ABORT                                                    \ #-02 ABORT"                                                   \ #-03 stack overflow                                           \ #-04 stack underflow                                          \ #-05 return stack overflow                                    \ #-06 return stack underflow                                   \ #-07 do-loops nested too deeply during execution              \ #-08 dictionary overflow                                      \ #-09 invalid memory address                                   \ #-10 division by zero                                         \ #-11 result out of range                                      \ #-12 argument type mismatch                                   \ #-13 undefined word                                           \ #-14 interpreting a compile-only word                         \ #-15 invalid FORGET                                           ( Standard error codes #-16..#-30)                              \ #-16 attempt to use zero-length string as a name              \ #-17 pictured numeric output string overflow                  \ #-18 parsed string overflow                                   \ #-19 definition name too long                                 \ #-20 write to a read-only location                            \ #-21 unsupported operation                                    \ #-22 control structure mismatch                               \ #-23 address alignment exception                              \ #-24 invalid numeric argument                                 \ #-25 return stack imbalance                                   \ #-26 loop parameters unavailable                              \ #-27 invalid recursion                                        \ #-28 user interrupt                                           \ #-29 compiler nesting                                         \ #-30 obsolescent feature                                      ( Standard error codes #-31..#-45)                              \ #-31 >BODY used on non-CREATEd definition                     \ #-32 invalid name argument                                    \ #-33 block read exception                                     \ #-34 block write exception                                    \ #-35 invalid block number                                     \ #-36 invalid file position                                    \ #-37 file I/O exception                                       \ #-38 non-existent file                                        \ #-39 unexpected end of file                                   \ #-40 invalid BASE for floating point conversion               \ #-41 loss of precision                                        \ #-42 floating-point divide by zero                            \ #-43 floating-point result out of range                       \ #-44 floating-point stack overflow                            \ #-45 floating-point stack underflow                           ( Standard error codes #-46..#-60)                              \ #-46 floating-point invalid argument                          \ #-47 compilation word list deleted                            \ #-48 invalid POSTPONE                                         \ #-49 search-order overflow                                    \ #-50 search-order underflow                                   \ #-51 compilation word list changed                            \ #-52 control-flow stack overflow                              \ #-53 exception stack overflow                                 \ #-54 floating-point underflow                                 \ #-55 floating-point unidentified fault                        \ #-56 QUIT                                                     \ #-57 exception in sending or receiving a character            \ #-58 [IF], [ELSE], or [THEN] exception                        \ #-59 ALLOCATE                                                 \ #-60 FREE                                                     ( Standard error codes #-61..#-75 )                             \ #-61 RESIZE                                                   \ #-62 CLOSE-FILE                                               \ #-63 CREATE-FILE                                              \ #-64 DELETE-FILE                                              \ #-65 FILE-POSITION                                            \ #-66 FILE-SIZE                                                \ #-67 FILE-STATUS                                              \ #-68 FLUSH-FILE                                               \ #-69 OPEN-FILE                                                \ #-70 READ-FILE                                                \ #-71 READ-LINE                                                \ #-72 RENAME-FILE                                              \ #-73 REPOSITION-FILE                                          \ #-74 RESIZE-FILE                                              \ #-75 WRITE-FILE                                               ( Standard error codes #-76..#-79 )                             \ #-76 WRITE-LINE                                               \ #-77 malformed xcharystem error codes #-256..#-270 )                             \ #-256 not a word nor a number                                 \ #-257 warning: is not unique                                  \ #-258 stack imbalance                                         \ #-259 trying to load from block 0                             \ #-260 wrong digit                                             \ #-261 deferred word is uninitialized                          \ #-262 assertion failed                                        \ #-263 execution only                                          \ #-264 definition not finished                                 \ #-265 loading only                                            \ #-266 off current editing block                               \ #-267 warning: not present, though required                   \ #-268 required, but not located                               \ #-269 relative jump too long                                  \ #-270 text not found                                          ( System error codes #-271..#-285)                              \ #-271 immediate word not allowed in this structure            \ #-272 array index out of range                                \ #-273 invalid assembler condition                             \ #-274 command line history overflow                           \ #-275 wrong number                                            \ #-276 dictionary reached the zone of memory banks             \ #-277 required, but not indexed                               \ #-278 empty block found: quit indexing                        \ #-279                                                         \ #-280                                                         \ #-281                                                         \ #-282                                                         \ #-283                                                         \ #-284                                                         \ #-285                                                         ( G+DOS error codes #-1000..#-1014)                             \ #-1000 G+DOS: Nonsense in G+DOS                               \ #-1001 G+DOS: Nonsense in GNOS                                \ #-1002 G+DOS: Statement end error                             \ #-1003 G+DOS: Break requested                                 \ #-1004 G+DOS: Sector error                                    \ #-1005 G+DOS: Format data lost                                \ #-1006 G+DOS: Check disk in drive                             \ #-1007 G+DOS: No +SYS file                                    \ #-1008 G+DOS: Invalid file name                               \ #-1009 G+DOS: Invalid station                                 \ #-1010 G+DOS: Invalid device                                  \ #-1011 G+DOS: Variable not found                              \ #-1012 G+DOS: Verify failed                                   \ #-1013 G+DOS: Wrong file type                                 \ #-1014 G+DOS: Merge error                                     ( G+DOS error codes #-1015..#-1029)                             \ #-1015 G+DOS: Code error                                      \ #-1016 G+DOS: Pupil set                                       \ #-1017 G+DOS: Invalid code                                    \ #-1018 G+DOS: Reading a write file                            \ #-1019 G+DOS: Writing a read file                             \ #-1020 G+DOS: O.K. G+DOS                                      \ #-1021 G+DOS: Network off                                     \ #-1022 G+DOS: Wrong drive                                     \ #-1023 G+DOS: Disk write protected                            \ #-1024 G+DOS: Not enough space on disk                        \ #-1025 G+DOS: Directory full                                  \ #-1026 G+DOS: File not found                                  \ #-1027 G+DOS: End of file                                     \ #-1028 G+DOS: File name used                                  \ #-1029 G+DOS: No G+DOS loaded                                 ( G+DOS error codes #-1030..#-1031)                             \ #-1030 G+DOS: STREAM used                                     \ #-1031 G+DOS: CHANNEL usederror codes #-1128..#-1142)                                \ #-1128 OS:                                                    \ #-1129 OS:                                                    \ #-1130 OS:                                                    \ #-1131 OS:                                                    \ #-1132 OS:                                                    \ #-1133 OS:                                                    \ #-1134 OS:                                                    \ #-1135 OS:                                                    \ #-1136 OS:                                                    \ #-1137 OS:                                                    \ #-1138 OS:                                                    \ #-1139 OS:                                                    \ #-1140 OS:                                                    \ #-1141 OS:                                                    \ #-1142 OS:                                                    ( OS error codes #-1143..#-1154)                                \ #-1143 OS:                                                    \ #-1144 OS:                                                    \ #-1145 OS:                                                    \ #-1146 OS:                                                    \ #-1147 OS:                                                    \ #-1148 OS:                                                    \ #-1149 OS:                                                    \ #-1150 OS:                                                    \ #-1151 OS:                                                    \ #-1151 OS:                                                    \ #-1152 OS:                                                    \ #-1153 OS:                                                    \ #-1154 OS:                                                                                                                                                                                    ( abort" )                                                      [defined] abort-message ?\ 2variable abort-message              : (abort")  ( n -- )                                              r> count rot if  abort-message 2! -2 throw  then + >r  ;      : abort"  ( Compilation: "ccc<quote>" -- )                        postpone (abort") ,"  ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( error>ordinal error>line )                                    : error>ordinal  ( -n1 -- +n2 )                                   abs dup 256 < ?exit                                                 dup 1000 < if  [ 256 091 - ] literal - exit  then               [ 1000 286 - 256 091 - + ] literal -   ;                  : error>line  ( -n1 -- n2 )                                       error>ordinal dup >r                                            begin                                                             dup dup 16 / - r@ <>  while  1+                               repeat  rdrop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                              ( error-messages-block .throw-message )                         need error>line  need .line                                     variable error-messages-block                                   s" Standard error codes" located error-messages-block !         : .throw-message  ( n -- )                                        error-messages-block @                                          if    error>line error-messages-block @ .line space             else  .throw#  then  ;                                        ' .throw-message ' .throw defer!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( ?compiling ?executing )                                       [unneeded] ?compiling                                           ?\ : ?compiling  ( -- )  compiling? 0= -14 ?throw  ;            [unneeded] ?executing                                           ?\ : ?executing  ( -- )  compiling? -263 ?throwassociative-case: )                                           need create:                                                    : associative-case: ( "name" -- )                                 create:                                                         does> ( n -- ) ( n pfa ) cell+  \ move past `lit`               begin   2dup @ dup 0= >r  ( n a n n')                                   =  r> or  0= ( n a f )                                  while   ( n a )  [ 3 cells ] literal +  \ no match              repeat  nip cell+ perform  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( base-execute )                                                : base-execute  ( xt n -- )  base @ >r execute r> basebegincase )                                                   need cs-push  need cs-pop                                       : begincase                                                       postpone case  postpone begin  cs-push  ; immediate           : (nextcase)                                                      cs-pop  postpone again  postpone endcase  ; immediate         : nextcase                                                        postpone drop  postpone (nextcase)  ; immediate               : test                                                            begincase                                                         cr ." press a key ('2' '4' '9' exits) : " key                   [char] 2 of  ." ... 2 "  endof                                  [char] 4 of  ." ... 4 "  endof                                  [char] 9 of  ." ... 9 "  endof                                    dup emit ."  try again"                                     nextcase  ;                                                   ( [switch switch] )                                             need link@  need link,                                          : switcher  ( i*x n head -- j*x )                                 dup cell+ @ >r  \ save default xt                               begin  link@ ?dup while  ( n a )                                  2dup cell+ @ = if   \ match                                       nip cell+ cell+ perform  r> drop exit                         then                                                          repeat  r> execute  ;                                         : :switch  ( xt "name" -- a )                                     create  >mark swap ,                                            does>  ( n -- )  ( n pfa ) switcher  ;                        : <switch  ( head xt n -- head )                                  2 pick link,  , ,  ;                                          -->                                                                                                                             ( [switch switch] )                                             : [switch  ( "name1" "name2" -- head )                            create  >mark ' ,                                               does>  ( n -- )  ( n pfa ) switcher  ;                        : [+switch  ( "name" -- head )  ' >body  ;                      : switch]  ( head -- )  drop  ;                                 : runs  ( head n "name" -- )  ' swap <switch  ;                 exit                                                            : run:  ( head n "ccc<semicolon>" -- )                            :noname [char] ; parse evaluate postpone ; ( xt )               swap >switch  ;                                                                                                                                                                                                                                                                                                                                                                               ( [switch-test ) \ without syntactic sugar                      : one    ( -- )  ." unu " ;                                     : two    ( -- )  ." du "  ;                                     : three  ( -- )  ." tri "  ;                                    : many   ( n -- )  . ." is too much! "  ;                       ' many :switch numbers                                            ' one   1 <switch                                               ' two   2 <switch                                               ' three 3 <switch  drop                                       cr 1 numbers 2 numbers 3 numbers 4 numbers                      ' numbers >body  :noname  ." kvar "  ; 4 <switch drop           cr 1 numbers 2 numbers 3 numbers 4 numbers                      -->                                                                                                                                                                                                                                                             ( [switch-test ) \ with syntactic sugar                         [switch sugar-numbers many                                        1 runs one                                                      2 runs two                                                      3 runs three                                                  switch]                                                         cr 1 sugar-numbers 2 sugar-numbers                                 3 sugar-numbers 4 sugar-numbers                              : four  ." kvar "  ;                                            [+switch sugar-numbers                                            4 runs four                                                   switch]                                                         cr 1 sugar-numbers 2 sugar-numbers                                 3 sugar-numbers 4 sugar-numbers                                                                                                                                                              ( call )                                                        code call  ( a -- )                                               E1 c,               \ pop hl                                    C5 c,               \ push bc                                   CD c, >mark         \ call call_hl                              C1 c,               \ pop bc                                    DD c, 21 c, next ,  \ ld ix,next                                jpnext              \ jp next                                   >resolve            \ call_hl:                                  E9 c,               \ jp (hl)                                   end-code                                                                                                                                                                                                                                                                                                                                                                                      ( case )                                                        0 constant case  immediate compile-only                         : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      : endof  ( orig1 -- orig2 )                                       postpone else  ; immediate compile-only                       : endcase                                                         postpone drop  begin  ?dup  while  [compile] then  repeat       ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                      ( eforth-case )                                                 0 constant case  immediate compile-only                         : of                                                              postpone over postpone = postpone if  postpone drop             ; immediate compile-only                                      : endof  ( orig1 -- orig2 )                                       postpone else  ; immediate compile-only                       : (endcase) ( 0 orig1..orign -- )                                 begin  ?dup  while  [compile] then  repeat  ;                 : endcase                                                         ( Compilation: 0 orig1..orign -- )                              ( Run-time: x -- )                                              postpone drop (endcase)  ; immediate compile-only                                                                                                                                                                                                             ( 94-doc-case )                                                 0 constant case  immediate compile-only                         : of                                                              1+ >r                                                           postpone over  postpone =   \ copy and test case value          postpone if                 \ add orig to control flow stack    postpone drop               \ discards case value if =          r>  ; immediate compile-only                                  : endof                                                           >r  postpone else  r>  ; immediate compile-only               : endcase                                                         postpone drop  \ discard case value                             0 ?do  postpone then  loop  ; immediate compile-only                                                                                                                                                                                                          ( abersoft-case )                                               : case                                                            csp @ !csp  ; immediate compile-only                          : of                                                              postpone over  postpone =  postpone if  postpone drop           ; immediate compile-only                                      : endof                                                           postpone else  ; immediate compile-only                       : endcase                                                         postpone drop                                                   begin  sp@ csp @ <>  while  postpone then  repeat               csp !  ;  immediate                                                                                                                                                                                                                                                                                                           ( between-of )                                                  need between                                                    : (between-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                    2>r dup dup 2r> between 0= if  invert  then  ;                : between-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                      postpone (between-of) postpone of  ;  immediate compile-onlyless-of )                                                     [defined] nup ?\ : nup  ( x1 x2 -- x1 x1 x2 )  over swap  ;     : (less-of)  ( x1 x2 -- x1 x1 | x1 x1' )                          nup nup >= if  invert  then  ;                                : less-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 -- | x1 )                            postpone (less-of) postpone of  ;  immediate compile-onlygreater-of )                                                  [defined] nup ?\ : nup  ( x1 x2 -- x1 x1 x2 )  over swap  ;     : (greater-of)  ( x1 x2 -- x1 x1 | x1 x1' )                       nup nup <= if  invert  then  ;                                : greater-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 -- | x1 )                         postpone (greater-of) postpone of  ; immediate compile-onlywithin-of )                                                   need within                                                     : (within-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                     2>r dup dup 2r> within 0= if  invert  then  ;                 : within-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                       postpone (within-of) postpone of  ; immediate compile-onlyany-of )                                                      need any?                                                       : (any-of)  ( x0 x1..xn n -- x0 x0 | x0 0 )                       dup 1+ pick >r any? r> tuck and  ;                            : any-of  ( Compilation: -- of-sys )                                      ( Run-time: x0 x1..xn n -- | x0 )                       postpone (any-of) postpone of  ; immediate compile-onlydefault-of )                                                  : default-of  ( -- )                                              postpone dup postpone of  ; immediate compile-onlyor-of )                                                       : (or-of)  ( x1 x2 x3 -- x1 x1 | x1 x1' )                         2>r dup dup dup r> = swap r> = or 0= if  invert  then  ;      : or-of  ( Compilation: -- of-sys )                                      ( Run-time: x1 x2 x3 -- | x1 )                           postpone (or-of) postpone of  ; immediate compile-onlycases: )                                                      : cases:  ( "name" -- orig 0 )                                    create >mark 0                                                  does>  ( selector -- ) ( selector pfa )                           true rot rot dup  ( true selector pfa pfa )                     cell+ swap @   ( true selector pfa+2 options )                  0 do  ( true selector a )                                         2dup @ =  ( true selector a f )                                 if    dup cell+ perform                                               2>r 0= 2r>  ( false selector a )  leave                   else  cell+ cell+  then                                      loop  ( true selector a | false selector a )                    rot if  perform  else  drop  then  drop  ;                   : case>  ( orig counter selector "name" -- orig counter' )        , ' compile, 1+  ;                                            : other>  ( orig counter "name" -- )  ' compile, swap !  ;      ( create: )                                                     : create:  ( "name" -- )  create hidedfor dstep di )                                               : (dstep)  ( R: x d -- x d' )                                     r>  \ save the return address                                   2r> 2dup or  \ is the index zero?                               if    -1. d+ 2>r                                                else  2drop  [ 2 cells ] literal +                              then  >r  ;                                                   : dfor  ( d -- )  postpone 2>r <mark  ; immediate compile-only  : dstep  ( -- )                                                   postpone (dstep) postpone branch <resolve                       ; immediate compile-only                                      need alias                                                      ' 2r@ alias dfor-i  ( -- d )                                                                                                                                                                                                                                    ( {if if} if> |if| )                                            need cs-roll                                                    : {if  ( -- 0 )  0  ; immediate compile-only                    : if>                                                             1+ >r postpone if  r> ; immediate compile-only                : |if|                                                            >r postpone ahead \ new orig                                    1 cs-roll postpone then \ resolve old orig                      r>  ; immediate compile-only                                  : if} \ end of conditional                                        >r  postpone ahead                                              1 cs-roll postpone then \ resolve old orig                      -22 postpone literal postpone throw                             r> 0 ?do  postpone then  loop  ; immediate compile-only                                                                                                                                       ( {do do} do> |do| )                                            need cs-pick  need cs-roll                                      : {do  ( c: -- dest )  postpone begin  ; immediate compile-only : do>  ( c: dest -- orig1 dest )                                  postpone if  1 cs-roll  ; immediate compile-only              : |do|  ( c: orig1 dest -- dest )                                 0 cs-pick postpone again \ resolve a copy of dest               1 cs-roll postpone then \ resolve old orig                      ; immediate compile-only                                      : do}  ( c: orig dest -- )                                        postpone again \ resolve dest                                   postpone then \ resolve orig                                    ; immediate compile-only                                                                                                                                                                                                                                      ( doer )                                                        : doer-noop ;                                                   : doer  ( "name" -- )                                             create  ['] doer-noop >body ,                                   does>  ( pfa ) @ >r ;                                         : (make)                                                          r> dup cell+ dup cell+                                            ( a1 a2 a2 )                                                  swap @ >body !                                                  @ ?dup if  >r  then ;                                         variable >;and                                                  : make                                                            compiling? if     postpone (make)  here >;and ! 0 ,                        else   here ' >body ! ]  then  ; immediate         : ;and  ( -- )  postpone exit  here >;and @ !  ; immediate      : undo  ( "name" -- )  ['] doer-noop >body  ' >body ! ;         ( doer-test )                                                   need doer                                                       doer test                                                         .( Test 1: ) test                                             make test  cr ." test 2" ;                                        .( Test 2: ) test                                             : change    make test ." test 3" ;and  test ;                   change                                                            .( Test 3: ) test                                             undo test                                                         .( Test 4: ) test                                                                                                                                                                                                                                                                                                                                                                             ( don't )                                                       : don't  ( n1 n2 -- | n1 n2 )                                     2dup = if  2drop unnest unnest  then  ; compile-onlydtimes )                                                      need dfor                                                       : (dtimes)  ( d -- )                                              rp@ @ dup cell+ rp@ ! @ swap                                    dfor  dup execute  dstep  drop  ;                             : dtimes  ( Compilation: "name" -- ) ( Run-time: d -- )           postpone (times)  ; immediate compile-onlyexecutions )                                                  : executions  ( xt n -- )                                         2>r                                                             begin   2r@                                                     while   2r> 1- 2>r execute                                      repeat  drop 2rdropfor step )                                                    code (step)  ( R: n -- n' )                                       2A c, rp ,                                                      5E c, 23 c, 56 c,                                               7A c, B3 c,                                                     1B c, 72 c, 2B c, 73 c,                                         C2 c, ' branch ,                                                23 c, 23 c, 22 c, rp ,                                          03 c, 03 c, jpnext                                              end-code                                                      : for  ( n -- )  postpone >r <mark  ; immediate compile-only    : step  ( -- )                                                    postpone (step) <resolve  ; immediate compile-only            need alias                                                      ' r@ alias for-i  ( -- n )                                                                                                      ( j )                                                           code j  ( -- n|u ) ( R: do-sys1 do-sys2 -- do-sys1 do-sys2 )      2A c, rp ,  11 c, 3 cells ,  19 c,  C3 c, (i) ,                 end-codek )                                                           code k  ( -- n|u )                                                ( R: loop-sys1..loop-sys3 -- loop-sys1..loop-sys3 )             2A c, rp ,  11 c, 6 cells ,  19 c,  C3 c, (i) ,                 end-codebranch )                                                     code -branch  ( f -- )                                            E1 c,                                                           CB c, 7C c,                                                     CA c, ' branch ,                                                03 c, 03 c,                                                     jpnext                                                          end-codeif -while -until )                                           need -branch  need cs-swap                                      : -if  ( f -- )                                                   postpone -branch >mark  ; immediate compile-only              : -while  ( f -- )                                                postpone -if  postpone cs-swap  ; immediate compile-only      : -until  ( f -- )                                                postpone -branch <resolve  ; immediate compile-onlyexit )                                                       code -exit  ( n -- ) ( R: nest-sys | -- nest-sys | )              E1 c,                   \ pop hl                                CB c, 7C c,             \ bit 7,h ; negative?                   C2 c, ' exit ,          \ jp nz,exit_code                       jpnext                  \ jp next                               end-codeoptions[ )                                                    variable (default-option)                                       variable #options                                               : default-option ( "name" -- )  ' (default-option) !  ;         : (options)  ( i*x x -- j*x )                                     false swap  ( false x ) \ default flag returned by the loop     r> dup @ >r   \ set the new exit point                          cell+ dup >r  \ save the address of the default option xt       dup cell+ @  ( false x a n )                                    0 do                                                              [ 2 cells ] literal + 2dup @ =  ( false x a' f )  \ match?      if  nip nip cell+ perform  true 0 0  leave then               loop  ( f x1 x2 )  2drop                                        if    rdrop       \ match, so discard the default option        else  r> perform  \ no match, so execute the default option     then  ;   -->                                                 ( options[ )                                                    : options[  ( -- a1 a2 a3 )                                       (default-option) off        \ assume no default option          #options off                \ number of options is 0 so far     compile (options)           \ compile run time handler          >mark >mark >mark  ( a1 a2 a3 )                                 postpone [  ; immediate compile-only                          : option  ( x "name" -- )                                         ,  ' ,  1 #options +!  ;                                      : ]options  ( a1 a2 a3 -- )                                       #options @ swap !           \ store number of options           (default-option) @ swap !   \ store default option xt           >resolve                    \ store exit point                  ]  ;                                                                                                                                                                                          ( positional-case: )                                            need create:                                                    : positional-case:  ( "name" -- )                                 create:                                                         does>   ( n -- )                                                        ( n pfa ) swap cells + performompilation: "name" -- ) ( Runtime: f -- )                postpone if                                                     defined ( nt | 0 ) ?dup 0= -13 ?throw                           name>immediate? ( xt f ) if  execute  else  compile,  then      postpone then                                                   ;  immediate compile-onlyrepeat )                                                     need cs-pick                                                    : ?repeat  ( dest -- dest ) \ Compilation                                  ( flag -- )      \ Execution                             0 cs-pick   postpone until                                    ; immediaterecurse )                                                     : recurse  ( -- )                                                 latest name> compile,  ; immediate compile-onlyretry ?retry )                                                need name>body                                                  : retry  ( -- )                                                   latest name>body postpone again                                 ; immediate compile-only                                      : ?retry  ( run-time: f -- )                                      postpone if  postpone retry  postpone then                      ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( select )                                                      0 constant select immediate                                     0 constant cond immediate                                       : thens  ( 0 a'1 ... a'n -- )                                     begin  ?dup while  postpone then  repeat  ;                   : endselect                                                       postpone drop  thens  ; immediate                             : when                                                            postpone else  >r >r >r  thens  r> r> r>  postpone drop         ; immediate                                                   -->                                                                                                                                                                                                                                                                                                                                                                                             ( select )                                                      : continue                                                        >r >r >r thens  0  r> r> r>  ; immediate                      : equal                                                           postpone over  postpone -  postpone if  ; immediate           : (range)  ( x0 x1 x2 -- x0 wf )                                  2>r dup 2r> over - -rot - u<  ;                               : range                                                           postpone (range)  postpone if  ; immediate                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( select-test )                                                 : select-test ( n -- )                                            space                                                           select                                                            cond  $00 $1F range                                                   $7F     equal  when  ." Control char "       else         cond  $20 $2F range                                                   $3A $40 range                                                   $5B $60 range                                                   $7B $7E range  when  ." Point "              else         cond  $30 $39 range  when  ." Digit "              else         cond  $41 $5A range  when  ." Upper case letter "  else         cond  $61 $7A range  when  ." Lower case letter "  else         ." Not a character "                                          endselect  ;  -->                                                                                                             ( select-test )                                                 cr cr .( Running 'select' test...)                              cr  char a  .(   ) dup emit  select-test                        cr  char ,  .(   ) dup emit  select-test                        cr  char 8  .(   ) dup emit  select-test                        cr  char ?  .(   ) dup emit  select-test                        cr  char K  .(   ) dup emit  select-test                        cr  0              dup 3 .r  select-test                        cr  127            dup 3 .r  select-test                        cr  128            dup 3 .r  select-test                                                                                                                                                                                                                                                                                                                                                                                                                        ( cs-pick cs-roll cs-swap cs-drop )                             need alias need pick  need roll                                 ' pick alias cs-pick                                            ' roll alias cs-roll                                            ' swap alias cs-swap                                            ' drop alias cs-dropcs-pick cs-roll cs-drop cs-mark cs-test cs-push cs-pop )        variable cf0                                                    : !cfs ( -- )  sp@ cf0 ! ;  !cfs                                : #cs ( -- n )                                                    sp@ cf0 @ - negate [ 1 cells ] literal / 1-                     0 max ( handle empty stack) ;                                 : cs-pick  pick ( +bal) ;                                       : cs-roll  roll ;                                               : cs-drop  drop ( -bal) ;                                       : cs-mark  0 ( +bal) ;                                          : cs-test  dup 0<> ;                                            : cs-push  #cs -roll ;                                          : cs-pop   #cs roll ;                                           : : ( "name" -- ) ... ( !csp bal off) !cfs ;                    : :noname ( -- xt ) ... ( xt ) ( !csp bal off) !cfs ;           : cold ( -- ) ... !cfs ;                                      ( cs-pick cs-roll )                                             : cs-pick                                                         ( destu ... orig0|dest0 u -- destu ... orig0|dest0 destu )      dup 2* 1+ pick    \ check destu; dest type is 0                 if -22 throw then    \ control structure mismatch               dup >r  0 swap    \ destu ... orig0|dest0 0 u  r: u             1+ 0 do i 2* 1+ pick or loop                                    1 invert and if -22 throw then  \ ored types should be 0        r> 2* 1+ pick 0                                                 bal 1+ to bal ; compile-only                                  : cs-roll                                                         dup >r  0 swap    \ destu ... orig0|dest0 0 u  r: u             1+ 0 do i 2* 1+ pick or loop                                    1 invert and if -22 throw then  \ ored types should be 0        r@ 2* 1+ roll                                                   r> 2* 1+ roll ; compile-only                                  ( switch )                                                      : n>code-string  ( n -- ca len )  2 pad ! pad 1+ ! pad   ;      : switch:  ( "name" -- )  wordlist constant  ;                  : switch  ( n switch -- )                                         swap n>code-string rot search-wordlist if  execute  then  ;   : :clause  ( n switch -- )                                        get-current >r set-current                                      n>code-string next-name 2! :                                    r> set-current  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( switch )                                                      : n>code-string  ( n -- ca len )  2 pad ! pad 1+ ! pad   ;      : switch:  ( "name" -- )  wordlist constant  ;                  : switch  ( n switch -- )                                         swap n>code-string rot search-wordlist if  execute  then  ;   : :clause  ( n switch -- )                                        get-current >r set-current                                      n>code-string next-name 2! :                                    r> set-current  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( thiscase )                                                    need alias                                                      ' dup alias thiscase  ( n -- n n )                              ' drop alias othercase  ( n -- )                                : ifcase  ( n f -- )                                              postpone if  postpone drop  ; immediate compile-only          : exitcase  ( n f -- )                                            postpone exit  postpone then  ; immediate compile-onlytimes )                                                       variable times-xt  \ the _xt_ executed by `times`               : times  ( i*x n -- j*x )                                         rp@ @  dup cell+ rp@ !  @ times-xt !                            0 ?do  times-xt perform  loop  ; compile-onlyif 0while 0until )                                           : 0if  ( f -- )                                                   postpone ?branch >mark  ; immediate compile-only              : 0while  ( f -- )                                                postpone 0if  postpone swap  ; immediate compile-only         : 0until  ( f -- )                                                postpone ?branch <resolve  ; immediate compile-onlyexit )                                                       code 0exit  ( f -- ) ( R: nest-sys | -- nest-sys | )              E1 c,                 \ pop hl                                  78 04 + c,            \ ld a,h                                  B0 05 + c,            \ or l                                    CA c, ' exit ,        \ jp z,exit_code                          jpnext                \ jp next                                 end-codelife )                                                        need ms  need c+!  need 2/                                      1 CHARS CONSTANT /Char                                          32 CONSTANT How-Deep  24 CONSTANT How-Wide                      How-Wide How-Deep *                                                CONSTANT Homes                                               : World  ( "name" -- )                                            CREATE  Homes CHARS ALLOT                                       DOES>  ( u -- c-addr )                                            ( u pfa ) SWAP Homes +  Homes MOD  CHARS + ;                World old  World new                                            -->                                                                                                                                                                                                                                                                                                                             ( life )                                                        $10 CONSTANT Alive  \ 0y = not alive                            : Lonely  ( char -- flag )  $12 < ;                             : Crowded  ( char -- flag )  $13 > ;                            : -Sustaining  ( char -- flag )  DUP Lonely  SWAP Crowded  OR ; : Quickening  ( char -- flaglife )                                                        : N  ( i -- j )  How-Wide - ;                                   : S  ( i -- j )  How-Wide + ;                                   : E  ( i -- j )  1+ ;                                           : W  ( i -- j )  1- ;                                           : Home+!  ( -1|1 i -- )  >R  Alive *  R> new C+! ;              : Neighbors+!  ( -1|0|1 i -- )                                    2DUP N W new C+!  2DUP N new C+!  2DUP N E new C+!              2DUP   W new C+!  (     i      )  2DUP   E new C+!              2DUP S W new C+!  2DUP S new C+!       S E new C+! ;          : Bureau-of-Vital-Statistics ( -1|1 i -- )                        2DUP Home+!  Neighbors+! ;                                    CHAR ? CONSTANT Soul  BL CONSTANT Body                          -->                                                                                                                                                                                             ( life )                                                        : Home  ( char i -- )  How-Wide /MOD AT-XY  EMIT ;              : Is-Born  ( i -- )                                               Soul OVER Home  1 SWAP Bureau-of-Vital-Statistics ;           : Dies  ( i -- )                                                  Body OVER Home  -1 SWAP Bureau-of-Vital-Statistics ;          : One  ( c-addr -- i )  0 old -  /Charlife )                                                        : there  ( -- )  How-Wide 1- 0 AT-XY ;                          : Everything  ( -- )                                              0 old  Homes                                                    BEGIN  DUP                                                      WHILE  OVER C@  DUP Alive AND                                      IF   -Sustaining IF  OVER One Dies     THEN                     ELSE  Quickening IF  OVER One Is-Born  THEN THEN                1 /STRING                                                    REPEAT  2DROP                                                   there  ;                                                      -->                                                                                                                                                                                                                                                                                                                             ( life )                                                        : Void  ( -- )  0 old  Homes BLANK ;                            : Voice  ( -- c-addr u )                                          PAGE ." Say: "  0 new  DUP Homes ACCEPT ;                     : Serpent  ( -- )                                                 0 2 AT-XY  ." Press a key for knowledge."  KEY DROP             0 2 AT-XY  ." Press space to re-start, Esc to escape life." ; : Innocence  ( -- )                                               Homes 0 DO  I new C@  Alive /  I Neighbors+!  LOOP ;          : Passes  ( -- )  0 new  0 old  Homes  CMOVE ;                  -->                                                                                                                                                                                                                                                                                                                                                                                             ( life )                                                        : Paradise  ( c-addr u -- )                                       >R  How-Deep How-Wide *  How-Deep 2 MOD 0=  How-Wide AND -      R@  -  2/  old                                                  R>  CMOVE                                                       0 old  Homes 0                                                  DO  COUNT BL <>                                                     DUP IF  Soul I Home  THEN                                       Alive AND  I new C!                                         LOOP  DROP                                                      Serpent                                                         Innocence Passes ;                                            -->                                                                                                                                                                                                                                                             ( life )                                                        : Creation  ( -- )  Void Voice Paradise ;                       100 CONSTANT Ideas                                              : Dreams  ( -- )  Ideas MS ;                                    100 CONSTANT Images                                             : Meditation  ( -- )  Images MS ;                               : Action  ( -- char )                                             KEY? DUP                                                        IF  DROP KEY  DUP BL = IF  Creation  THEN                       THEN ;                                                        7 CONSTANT Escape                                               : Goes-On  ( -- )                                                 BEGIN  Everything Passes  Dreams Action Meditation                     Escape = UNTIL ;                                       : Life  ( -- )  Creation Goes-On ;                                                                                              ( pong )                                                        need columns  need rows  need udg:  need rnd  need ??           3 constant /kk  need pressed?                                   need cvariable  need 2/  need pixel-addr                        need hires-emit-udg  need c!toggle-bits                         0 cconstant black  7 cconstant white                            8 cconstant ball-delay0                                         variable ball-delay                                             4 cconstant racket-size                                         : brighty  ( n1 -- n2 )  %1000000 or  ;                         : paper-color  ( n1 -- n2 )  8 *  ;                             white paper-color brighty cconstant racket-color                22528 constant top-line-attr                                    23264 constant bottom-line-attr                                 code sync  ( -- )  78 c,  jpnext  end-code                      -->                                                             ( pong )                                                        $01 $F7FE 2constant left1-key   char 1 cconstant left1-char     $02 $F7FE 2constant right1-key  char 2 cconstant right1-char    $10 $EFFE 2constant left2-key   char 6 cconstant left2-char     $08 $EFFE 2constant right2-key  char 7 cconstant right2-char    variable x  variable y                                          cvariable direction                                             variable points1  variable points2                              variable racket1-x  columns racket-size - 2/  racket1-x !       variable racket2-x  racket1-x @ racket2-x !                     0 cconstant racket1-y                                           rows 1- cconstant racket2-y                                     -->                                                                                                                                                                                                                                                             ( pong )                                                        %00111100                                                       %01111110                                                       %11111111                                                       %11111111                                                       %11111111                                                       %11111111                                                       %01111110                                                       %00111100 128 udg: (ball)  0 cconstant ball \ XXX TMP           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( pong )                                                        : restore-screen  ( -- )  default-colors page  ;                : init-screen  ( -- )  restore-screen white ink  ;              : ball-xy  ( -- x y )  x @ y @  ;                               : show-ball  ( -- )  ball-xy ball sync hires-emit-udg  ;        : erase-ball  ( -- )  ball-xy ball sync hires-emit-udg  ;       : (border)  ( a -- )                                              columns [ white paper-color ] literal sync fill  ;            : top-border  ( -- )  top-line-attr (border)  ;                 : bottom-border  ( -- )  bottom-line-attr (border)  ;           -->                                                                                                                                                                                                                                                                                                                                                                                             ( pong )                                                        : show-racket  ( a -- )  racket-size racket-color sync fill  ;  : show-racket1  ( -- )                                            top-line-attr dup (border) racket1-x @ + show-racket  ;       : show-racket2  ( -- )                                            bottom-line-attr dup (border) racket2-x @ + show-racket  ;    : show-rackets  ( -- )  show-racket1 show-racket2  ;            : racket-initial-x  ( -- n )                                      columns 2/ [ racket-size 2/ ] literal -  ;                    : reset-rackets  ( -- )                                           racket-initial-x dup racket1-x ! racket2-x !  ;               -->                                                                                                                                                                                                                                                                                                                             ( pong )                                                        : erase-racket  ( a1 a2 -- )  @ + racket-size erase  ;          : erase-racket1  ( -- )                                           top-line-attr racket1-x erase-racket  ;                       : erase-racket2  ( -- )                                           bottom-line-attr racket2-x erase-racketpong )                                                        : (print-points)  ( n y -- )                                      0 swap at-xy s>d <# # # # #>                                    black ink sync type white ink  ;                              : print-points1  ( -- )                                           points1 @ racket1-y (print-points) show-racket1  ;            : print-points2  ( -- )                                           points2 @ racket2-y (print-points) show-racket2  ;            : print-points  ( -- )  print-points1 print-points2  ;          : change-x  ( -- )  %10 direction c!toggle-bits  ;              : change-y  ( -- )  %01 direction c!toggle-bits  ;              : faster  ( -- )                                                  exit  ;  \ XXX OLD                                            -->                                                                                                                                                                                             ( pong )                                                        : ball-moving-right?  ( -- f )  direction c@ %10 and  ;         : ball-moving-down?  ( -- f )  direction c@ %01 and  ;          : ball-at-right?  ( -- wf )  x @ 247 >  ;                       : ball-at-left?  ( -- wf )  x @ 1 <  ;                          : ball-at-bottom?  ( -- wf )  y @ 16 <  ;                       : ball-at-top?  ( -- wf )  y @ 182 >  ;                         : move-ball-x  ( -- )                                             ball-moving-right?                                              if                                                                ball-at-right?  if  change-x  then  1                         else                                                              ball-at-left?   if  change-x  then  -1                        then  x +!  ;                                                 -->                                                                                                                             ( pong )                                                        : reset-ball  ( -- )                                              128 x !  95 y !  rnd %11 and direction c!  ;                  : ready  ( -- )  reset-rackets reset-ball  ;                    : score-player1  ( -- )  1 points1 +! print-points1  ;          : score-player2  ( -- )  1 points2 +! print-points2  ;          [defined] 8* ?\ : 8*  ( n1 -- n2 )  2* 2* 2*  ;                 : hit-racket1?  ( -- wf )                                         x @ racket1-x @ 8* 1- >                                         x @ racket1-x @ 8* racket-size 8* + <  and  ;                 : hit-racket2?  ( -- wf )                                         x @ racket2-x @ 8* 1- >                                         x @ racket2-x @ 8* racket-size 8* + <  and  ;                 -->                                                                                                                                                                                             ( pong )                                                        : possible-top-hit  ( -- )                                        hit-racket2? if change-y  else  score-player1 ready  then  ;  : move-ball-down  ( -- )                                          ball-at-bottom? if  possible-top-hit  else  -1 y +!  then  ;  : possible-bottom-hit  ( -- )                                     hit-racket1? if  change-y  else  score-player2 ready  then  ; : move-ball-up  ( -- )                                            ball-at-top? if  possible-bottom-hit  else  1 y +!  then  ;   : move-ball-y  ( -- )                                             ball-moving-down?                                               if  move-ball-down  else  move-ball-up  then  ;               8 cconstant racket-delay0                                       variable racket1-delay                                          variable racket2-delay                                          -->                                                             ( pong )                                                        : ?move-ball  ( -- )                                              -1 ball-delay +!  ball-delay @ if  unnest  exit  then           ball-delay0 ball-delay !  ;                                   : move-ball  ( -- )                                               ?move-ball                                                      erase-ball move-ball-x move-ball-y show-ball  ;               : frame  ( -- )  white border  top-border bottom-border  ;      : arena-line  ( -- )                                              [ 0 96 pixel-addr nip ] literal columns %10101010 fill          [ 0 95 pixel-addr nip ] literal columns %01010101 fill  ;     : arena  ( -- )                                                   cls  frame arena-line show-rackets print-points show-ball  ;  -->                                                                                                                                                                                             ( pong )                                                        : ?move-racket1  ( -- )                                           -1 racket1-delay +!  racket1-delay @ if  unnest exit  then      racket-delay0 racket1-delay !  ;                              : (move-racket1)  ( 1|-1 -- )  racket1-x +!  show-racket1  ;    : move-racket1-left  ( -- )                                       ?move-racket1                                                   racket1-x @ 0= ?exit                                            -1 (move-racket1)  ;                                          : move-racket1-right  ( -- )                                      ?move-racket1                                                   racket1-x @ racket-size + columns = ?exit                       1 (move-racket1)  ;                                           -->                                                                                                                                                                                             ( pong )                                                        : ?move-racket2  ( -- )                                           -1 racket2-delay +!  racket2-delay @ if  unnest exit  then      racket-delay0 racket2-delay !  ;                              : (move-racket2)  ( 1|-1 -- )  racket2-x +!  show-racket2  ;    : move-racket2-left  ( -- )                                       ?move-racket2                                                   racket2-x @ 0= ?exit                                            -1 (move-racket2)  ;                                          : move-racket2-right  ( -- )                                      ?move-racket2                                                   racket2-x @ racket-size + columns = ?exit                       1 (move-racket2)  ;                                           -->                                                                                                                                                                                             ( pong )                                                        : reset-points  ( -- )  points1 off  points2 off  ;             : init-game  ( -- )                                               init-screen reset-points                                        racket-delay0  dup racket1-delay !  racket2-delay !             ball-delay0 ball-delay ! ready  ;                             : quit-game  ( -- )                                               restore-screen  ." Player 1 score: " points1 ? cr                               ." Player 2 score: " points2 ?  quit  ;         : keypress  ( key -- )                                            left1-key     pressed? ?? move-racket1-left                     right1-key    pressed? ?? move-racket1-right                    left2-key     pressed? ?? move-racket2-left                     right2-key    pressed? ?? move-racket2-right                                break-key? ?? quit-game  ;  -->                                                                                 ( pong )                                                        : show-player-key  ( c ca len -- )                                space rot emit ."  = " type cr  ;                             : show-player-keys  ( c1 c2 -- )                                  s" left" show-player-key  s" right" show-player-key  ;        : show-game-keys  ( -- )                                          ." Player 1:" cr right1-char left1-char show-player-keys        ." Player 2:" cr right2-char left2-char show-player-keys        ." Break (Shift+Space) = quit"  ;                             -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( pong )                                                        : show-credits  ( -- )                                            ." Forth Pong" cr cr                                            ." Original code by:" cr                                        ."   Robert Oestling, 2002" cr                                  ." Ported to IsForth by:" cr                                    ."   Mark Manning, 2012" cr                                     ." Rewritten for Solo Forth by:" cr                             ."   Marcos Cruz" cr                                            ."   (programandala.net), 2015" cr  ;                         : press-any-key  ( -- )                                           ." Press any key to start the game." key drop  ;              : welcome  ( -- )                                                 page show-credits cr show-game-keys cr cr press-any-key  ;    -->                                                                                                                             ( pong )                                                        : pong  ( -- )                                                    init-game welcome page arena                                    begin  move-ball                                                keypress  againsiderator )                                                   only forth definitions  decimal                                 need random  need randomize  need udg:  need inkey              need between  need ocr  need frames@                            need j  need between  need rows  need last-column               need last-row                                                   vocabulary siderator                                            also siderator definitionssiderator )                                                   variable x          variable speed                              variable parsecs    variable record  record off                 999 constant max-speed                                          '5' constant left-key  '8' constant right-key                   8192 constant 'screen \ XXX OLD                                 : pause  ( -- )  begin  inkey  untilsiderator )                                                   15360 constant charset  \ ROM charset                           : char>a  ( c -- a )  8 * charset +  ;                          : udg>a  ( c -- a )  128 - 8 * os-udg @ +  ;                    : char>udg  ( c0 c1 -- )  swap char>a swap udg>a 8 cmove  ;     128 constant star0-udg  '*' star0-udg char>udg                  %00011000                                                       %00001000                                                       %00011000                                                       %00010000                                                       %00011000                                                       %00001000                                                       %00011000                                                       %00010000 129 udg: star1-udg  -->                                                                                                                                                               ( siderator )                                                   130 constant star2-udg                                          char | star2-udg char>udg                                       %00001000                                                       %00000000                                                       %00001000                                                       %00000000                                                       %00001000                                                       %00000000                                                       %00001000                                                       %00000000 131 udg: star3-udg  -->                                                                                                                                                                                                                                                                                                                                                               ( siderator )                                                   %10000001                                                       %10000001                                                       %11000011                                                       %11100111                                                       %11111111                                                       %01100110                                                       %00111100                                                       %00011000 132 udg: craft-udg  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( siderator )                                                   0 constant first-column                                         : pressed?  ( c -- f )  inkey =  ;                              : left  ( col -- col' )                                           left-key pressed? + first-column max  ;                       : right  ( col -- col' )                                          right-key pressed? - last-column min  ;                       : rudder  ( -- )  x @ right left xsiderator )                                                   4 constant #stars                                               : star-coords  ( -- gx gy )  last-column last-row  ;            : .star  ( c -- )                                                 [ last-column 1+ ] literal random last-row at-xy                1 bright emit 0 bright  ;                                     : stars/speed  ( -- n )  speed @ #stars 1- max-speed */ 1+  ;   : scroll  ( -- )  star-coords at-xy cr cr  ;                    : .stars  ( -- )                                                  stars/speed dup [ star0-udg 1- ] literal + swap 0               do  dup .star  loop  drop  ;                                  : star=  ( c -- f )  star0-udg star3-udg between  ;             : star<>  ( c -- f )  star= 0=  ;                               -->                                                                                                                                                                                             ( siderator )                                                   rows 2 / constant craft-y                                       : craft-coords  ( -- y x )  x @ craft-y  ;                      : at-craft  ( -- )  craft-coords at-xy  ;                       : -craft  ( -- )  at-craft space  ;                             : .craft  ( -- )  at-craft craft-udg 5 ink emit 7 inksiderator )                                                   : .datum  ( u -- )  s>d <# # # # #> type space  ;               : delay  ( -- )  max-speed speed @ - 2 / 0  do  loop  ;         : .speed  ( -- )  ." Speed:" speed @ .datum  ;                  : +speed  ( u1 -- u2 )                                            dup 10 / 1 max  parsecs @ 4 mod 0= abs *  + max-speed min  ;  : faster  ( -- )  speed @ +speed speed !  ;                     : .parsecs  ( -- )  ." Parsecs:" parsecs @ .datum  ;            : farther  ( -- )  1 parsecs +!  ;                              : .record  ( -- )  ." Record:" record @ .datum  ;               : .info  ( -- )  home .speed .parsecs .record  ;                -->                                                                                                                                                                                                                                                                                                                             ( siderator )                                                   : blast-delay  ( -- )  32 0  do  loop  ;                        : (blast)  ( -- )                                                 .craft blast-delay at-craft star0-udg emit blast-delay  ;     : blast  ( -- )  256 0  do  (blast)  loop  ;                    : halt  ( -- )                                                    32 0  do  24 0 do                                                 i j ocr star= if  i j at-xy  star0-udg emit  then             loop  loopsiderator )                                                   : safe?  ( -- f )  craft-coords swap ocr star<>  ;              : continue?  ( -- f )  safe? break-key? 0= and  ;               : new-record  ( -- )                                              parsecs @ record @ >  if  parsecs @ record !  then  ;         : game-over  ( -- )                                               blast halt  11 dup at-xy ." GAME OVER"                          new-record .info first-column last-row at-xy                    default-colors  ;                                             -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( siderator )                                                   \ Instructions                                                  : about  ( -- )                                                   cr ." Siderator 2: Jugdement Day"  cr                           cr ." By programandala.net"                                     cr ." Version: 0.1.0+20160325"  ;                             : objective  ( -- )                                               cr ." Your objective is to travel as"                           cr ." much parsecs as possible"                                 cr ." while dodging the stars."                                 cr ." Anyway you're supposed to die"                            cr ." before the 1000th parsec"                                 cr ." because four digits would ruin"                           cr ." the score panel."  ;                                    -->                                                                                                                             ( siderator )                                                   \ Instructions                                                  : keys  ( -- )                                                    cr ." Rudder keys: "                                            left-key emit space right-key emit                              cr ." Autodestruction key: Break"  ;                          : instructions  ( -- )  objective cr keys  ;                    : wait  ( -- )  cr cr ." Press any key to start." pausesiderator )                                                   : init-colors  ( -- )                                             0 paper 7 ink 0 flash 0 bright 0 inverse 0 border  ;          : init-screen  ( -- )                                             init-colors cls about cr instructions wait cls  ;             : 4+-  ( n1 -- n2 )  9 random 4 - +  ;                          : init  ( -- )                                                    frames@ s>d randomize  udg-ocr                                  init-screen  15 4+- x ! parsecs off  speed off  ;             -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( siderator )                                                   : run ( -- )                                                      init                                                            begin   -craft scroll  faster farther .info  continue?          while   rudder .craft .stars  delay                             repeat  game-overtt )                                                         only forth also definitions                                       [undefined] forget-tt ?\ forget-tt                            need random  need j  need >=  need <=  need 2/  need value      need d<>  need d=  need case  need ms  need frames@  need yes?  need begin-stringtable  need positional-case:  need tab         vocabulary tt  also tt definitions  decimal                     bl bl 2constant empty                                           variable wiping                                                 2 constant col0  0 constant row0                                14 constant wide  22 constant deep                              -->                                                                                                                                                                                                                                                                                                                             .( tt )                                                         7 constant edit-char                                            : actual-cursor-keys  ( -- c1 c2 c3 c4 c5 c6 )                    8 9 11 10 bl edit-char  ;                                     : spanish-dvorak-keys  ( -- c1 c2 c3 c4 c5 c6 )                   [char] C [char] H [char] . [char] A bl edit-char  ;           : dvorak-keys  ( -- c1 c2 c3 c4 c5 c6 )                           [char] C [char] R [char] ' [char] A bl edit-char  ;           : qwerty-keys  ( -- c1 c2 c3 c4 c5 c6 )                           [char] O [char] P [char] Q [char] A bl edit-char ;            : cursor-digits-keys  ( -- c1 c2 c3 c4 c5 c6 )                    [char] 5 [char] 8 [char] 7 [char] 6 bl edit-char  ;           : sinclair1-keys  ( -- c1 c2 c3 c4 c5 c6 )                        [char] 1 [char] 2 [char] 3 [char] 4  bl edit-char  ;          : sinclair2-keys  ( -- c1 c2 c3 c4 c5 c6 )                        [char] 6 [char] 7 [char] 8 [char] 9  bl edit-char  ;  -->     .( tt )                                                         6 constant max-keyset                                           variable keyset                                                 positional-case: keyset>keys  ( n -- c1 c2 c3 c4 c5 c6 )          actual-cursor-keys                                              dvorak-keys                                                     spanish-dvorak-keys                                             sinclair1-keys                                                  sinclair2-keys                                                  cursor-digits-keys                                              qwerty-keys  ;                                                -->                                                                                                                                                                                                                                                                                                                             .( tt )                                                         begin-stringtable keyset>name  ( n -- ca len )                    s" Cursor        " s,                                           s" Dvorak        " s,                                           s" Spanish Dvorak" s,                                           s" Sinclair 1    " s,                                           s" Sinclair 2    " s,                                           s" Cursor digits " s,                                           s" QWERTY        " s,                                         end-stringtable                                                 : keyset-name  ( -- ca len )  keyset @ keyset>name  ;           -->                                                                                                                                                                                                                                                                                                                             .( tt )                                                         0 value quit-key  0 value pause-key  0 value drop-key           0 value rot-key   0 value right-key  0 value left-key           : keys!  ( c1 c2 c3 c4 c5 c6 -- )                                 to quit-key to pause-key to drop-key                            to rot-key to right-key to left-key   ;                       : set-keyset   ( n -- )  dup keyset ! keyset>keys keys!  ;      : next-keyset  ( -- n )  keyset @ 1+ dup max-keyset > 0= and  ; : change-keyset  ( -- )  next-keyset set-keyset  ;              0 set-keyset  \ default                                         -->                                                                                                                                                                                                                                                                                                                                                                                             .( tt )                                                         variable score                                                  variable pieces                                                 variable levels                                                 variable delay  \ in ms                                         variable brick-row  variable brick-col                          : 2c@  ( a -- c1 c2 )  dup 1+ c@ swap c@  ;                     : 2c!  ( c1 c2 a -- )  dup >r c! r> 1+ c!  ;                    : 2emit  ( c1 c2 -- )   emit emit  ;                            : position  ( row col -- )                                        2* col0 + swap row0 + at-xy  ;                                : stone  ( c1 c2 -- )                                             wiping @ if  2drop 2 spaces  else  2emit  then  ;             -->                                                                                                                                                                                             .( tt )                                                         wide deep * 2 * constant /pit                                   create 'pit /pit allot                                          : pit  ( col row -- a )  'pit rot wide * rot + 2* +  ;          : empty-pit  ( -- )  'pit /pit blank  ;                         : draw-bottom  ( -- )                                             deep -1 position  [char] + dup stone                            wide 0 do  [char] = dup stone  loop                             [char] + dup stone  ;                                         : draw-frame  ( -- )                                              deep 0 do   i -1   position [char] | dup stone                              i wide position [char] | dup stone                  loop  draw-bottom  ;  -->                                                                                                                                                                                                                                     .( tt )                                                         : bottom-msg  ( addr cnt -- )                                     deep over 2/ wide swap - 2/ position 1 flash type 0 flash  ;  : draw-line  ( line -- )                                          dup 0 position  wide 0 do  dup i pit 2c@ 2emit  loop  drop  ; : draw-pit  ( -- )  deep 0 do  i draw-line  loop  ;             begin-stringtable c>name  ( c -- ca len )                         s" Edit" s, s" Left" s, s" Right" s, s" Down" s, s" Up" s,    end-stringtable                                                 : control-char-name  ( c -- ca len )  7 - c>name  ;             : show-key  ( c -- )                                              2 spaces  dup bl = if  drop ." Space"  else                               dup bl < if    control-char-name type                                    else  emit  then                                       then  tab  ;                                        -->                                                             .( tt )                                                         : show-keys  ( -- )                                               ." Keys: " keyset-name type cr cr                               left-key     show-key ."  Move left" cr                         right-key    show-key ."  Move right" cr                        rot-key      show-key ."  Rotate" cr                            drop-key     show-key ."  Drop" cr                              pause-key    show-key ."  Pause" cr                             quit-key     show-key ."  Quit"  ;                            -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             .( tt )                                                         : (show-help)  ( -- )                                             0 0 at-xy                                                       ." TT (Tetris for Terminals)" cr cr                             ." Original ANS Forth code written" cr                          ." by Dirk Uwe Zoller, 1994." cr                                ." Ported to Solo Forth" cr                                     ." by Marcos Cruz, 2015." cr cr                                 show-keys  ;                                                  : show-help  ( -- )                                               page                                                            begin  (show-help) cr cr                                               ." Press Space to change the keys" cr                           ." or any other key to start."                                  key bl =                                                 while  change-keyset  repeat  ;  -->                          .( tt )                                                         23 constant score-row                                           : at-score  ( col -- )  score-row at-xy  ;                      : score-labels ( -- )                                              0 at-score ." Score:"                                          10 at-score ." Pieces:"                                         21 at-score ." Levels:"  ;                                    : .score  ( a col -- )  at-score @ 3 .r  ;                      : update-score  ( -- )                                            score 6 .score  pieces 17 .score  levels 28 .score  ;         : arena  ( --)                                                    draw-frame draw-pit score-labels update-score  ;              -->                                                                                                                                                                                                                                                             .( tt ) blk @ . key drop                                        .s key drop                                                     : brick:  ( ca1 len1 ca2 len2 ca3 len3 ca4 len4 "name" -- )       create  4 0 do                                                            0 ?do  dup i chars + c@ c,  loop drop                         loop                                                    does>  ( x1 x2 -- a ) ( pfa )  rot 4 * rot + 2* +  ;          s"         " 2constant empty-brick-row .s key drop              empty-brick-row                                                 s"   ##    "                                                    s" ######  "  empty-brick-row  brick: brick1  .s key drop       empty-brick-row 2dup                                            s" <><><><>"  empty-brick-row  brick: brick2  .s key drop       empty-brick-row                                                 s"   {}    "                                                    s"   {}{}{}"  empty-brick-row  brick: brick3  .s key drop -->   .( tt ) blk @ . key drop                                        empty-brick-row                                                 s"     ()  "                                                    s" ()()()  "  empty-brick-row brick: brick4                     empty-brick-row                                                 s"   [][]  "                                                    s"   [][]  "  empty-brick-row brick: brick5                     empty-brick-row                                                 s"   @@@@  "                                                    s" @@@@    "  empty-brick-row brick: brick6                     empty-brick-row                                                 s" %%%%    "                                                    s"   %%%%  "  empty-brick-row brick: brick7                     empty-brick-row 2dup 2dup 2dup brick: brick                     empty-brick-row 2dup 2dup 2dup brick: scratch  -->                                                                              .( tt ) blk @ . key drop                                        create bricks  ' brick1 ,  ' brick2 ,  ' brick3 ,  ' brick4 ,                  ' brick5 ,  ' brick6 ,  ' brick7 ,               create brick-value 1 c, 2 c, 3 c, 3 c, 4 c, 5 c, 5 c,           32 constant /brick                                              : is-brick  ( brick -- )                                          >body [ ' brick >body ] literal /brick cmove  ;               : new-brick  ( -- )                                               1 pieces +!  7 random                                           bricks over cells + @ is-brick                                  brick-value swap chars + c@ score +!  ;                       : rotate-left  ( -- )                                             4 0 do 4 0 do                                                     j i brick 2c@  3 i - j scratch 2c!                            loop loop                                                       ['] scratch is-brick  ;  -->                                  .( tt ) blk @ . key drop                                        : rotate-right  ( -- )                                            4 0 do 4 0 do                                                     j i brick 2c@  i 3 j - scratch 2c!                            loop loop                                                       ['] scratch is-brick  ;                                       : draw-brick  ( row col -- )                                      4 0 do 4 0 do                                                     j i brick 2c@  empty d<>                                        if  over j + over i +  position                                     j i brick 2c@  stone                                        then                                                          loop loop  2drop  ;                                           : show-brick  ( row col -- )  wiping off draw-brick  ;          : hide-brick  ( row col -- )  wiping on  draw-brick  ;          -->                                                             .( tt ) blk @ . key drop                                        : put-brick  ( row col -- )                                       4 0 do 4 0 do                                                       j i brick 2c@  empty d<>                                        if  over j +  over i +  pit                                         j i brick 2c@  rot 2c!                                      then                                                        loop loop  2drop  ;                                           : remove-brick  ( row col -- )                                    4 0 do  4 0 do                                                    j i brick 2c@  empty d<>                                        if  over j + over i + pit empty rot 2c!  then                 loop  loop  2drop  ;                                          -->                                                                                                                                                                                             .( tt ) blk @ . key drop                                        : test-brick  ( row col -- f )                                    4 0 do 4 0 do                                                     j i brick 2c@ empty d<>                                         if  over j +  over i +                                              over dup 0< swap deep >= or                                     over dup 0< swap wide >= or                                     2swap pit 2c@  empty d<>                                        or or if  unloop unloop 2drop false  exit  then             then                                                          loop loop  2drop true  ;                                      -->                                                                                                                                                                                                                                                                                                                             .( tt ) blk @ . key drop                                        : move-brick  ( rows cols -- f )                                  brick-row @ brick-col @ remove-brick                            swap brick-row @ + swap brick-col @ + 2dup test-brick           if    brick-row @ brick-col @ hide-brick                              2dup brick-col ! brick-row !                                    2dup show-brick put-brick  true                           else  2drop brick-row @ brick-col @ put-brick  false            thentt ) blk @ . key drop                                        : rotate-brick  ( f1 -- f2 )                                      brick-row @ brick-col @ remove-brick                            dup if  rotate-right  else  rotate-left  then                   brick-row @ brick-col @ test-brick                              over if  rotate-left  else  rotate-right  then                  if  brick-row @ brick-col @ hide-brick                              if  rotate-right  else  rotate-left  then                       brick-row @ brick-col @ put-brick                               brick-row @ brick-col @ show-brick  true                    else  drop false  then  ;                                     -->                                                                                                                                                                                                                                                                                                                             .( tt ) blk @ . key drop                                        : insert-brick  ( row col -- f )                                  2dup test-brick                                                 if  2dup brick-col ! brick-row !                                    2dup put-brick  draw-brick  true                            else  false  then  ;                                          : drop-brick  ( -- )  begin  1 0 move-brick 0=  until  ;        : move-line  ( from to -- )                                         over 0 pit  over 0 pit  wide 2*  cmove  draw-line               dup 0 pit  wide 2*  blank  draw-line  ;                     : line-full?  ( line-no -- f )                                      true  wide 0                                                    do  over i pit 2c@ empty d=                                         if  drop false  leave  then                                 loop nip  ;                                                 -->                                                             .( tt ) blk @ . key drop                                        : adjust-delay  ( -- )                                            levels @                                                        dup  50 < if  100 over -  else                                  dup 100 < if   62 over 4 / -  else                              dup 500 < if   31 over 16 / -  else  0  then then then          delay !  droptt ) blk @ . key drop                                        : new-level  ( -- )  1 levels +!  10 score +!  adjust-delay  ;  : remove-lines  ( -- )                                            deep deep                                                       begin                                                             swap                                                            begin                                                             1- dup 0< if  2drop exit  then  dup line-full?                while                                                             new-level                                                     repeat                                                          swap 1- 2dup <> if  2dup move-line  then                      again  ;                                                      -->                                                                                                                                                                                             .( tt ) blk @ . key drop                                        : interaction  ( -- f )                                           case  key upper                                                   left-key      of  0 -1 move-brick drop  endof                   right-key     of  0  1 move-brick drop  endof                   rot-key       of  0 rotate-brick drop  endof                    drop-key      of  drop-brick  endof                             pause-key     of  S"  Paused " bottom-msg  key drop                               draw-bottom  endof                            quit-key      of  false exit  endof                           endcase  true  ;                                              : initialize  ( -- )                                              frames@ d>s randomize                                           score off  pieces off  levels off  adjust-delay                 empty-pit page arena  ;                                       -->                                                             .( tt ) blk @ . key drop                                        : play-game  ( -- )                                               begin                                                             new-brick  -1 3 insert-brick                                  while                                                             begin                                                             4 0 do                                                            delay @ ms key?                                                 if  interaction 0= if  unloop exit  then  then                loop                                                            1 0 move-brick 0=                                             until                                                           remove-lines  update-score  adjust-delay                      repeat  ;                                                     -->                                                                                                                             .( tt ) blk @ . key drop                                        also forth definitions                                          : again?  ( -- f )  s"  Again? (Y/N) " bottom-msg yes?  ;       : start-message  ( -- )  ." Type RUN to start tt" cr  ;         : end-message  ( -- )  0 23 at-xy cr start-message  ;           : run  ( -- )                                                     show-help                                                       begin  initialize play-game again? 0=  until                    draw-bottom end-message  ;                                    cr start-message                                                only forth definitions                                                                                                                                                                                                                                                                                                                                                                          ( toe )                                                         9 constant squares                                              1 constant player-x  2 constant player-o                        create board  squares allot                                     : clear  ( -- )  board squares erase  ;  clear                  : >square  ( square -- ca )  board +  ;                         : square@  ( square -- c )  >square c@  ;                       : square!  ( c square -- )  >square c!  ;                       : bar  ( -- )  ." | "  ;                                        : dashes  ( -- )  cr  9 0 do  '-' emit  loop cr  ;              : .player-mark  ( player -- )                                     player-x = if ." x " else ." o " then  ;                      : .box-contents  ( n -- )                                         ?dup if  .player-mark  else  2 spaces  then  ;                : .box  ( square -- )  square@  .box-contents  ;                -->                                                             ( toe )                                                         : display  ( -- )                                                 home                                                            squares 0 do                                                      i if    i 3 mod  0= if  dashes  else  bar  then                   then  i .box                                                loop  cr  ;                                                   : limited  ( square -- square' )  0 max squares min  ;          : play  ( square player -- )  swap 1- limited square! ;         : x  ( square -- )  player-x play  display ;                    : o  ( square -- )  player-o play  display ;                                                                                                                                                                                                                                                                                                                                                    ( hanoi )                                                       only forth definitions                                          need don't  need ms  need mode64  need alloted  need recurse    vocabulary hanoi  also hanoi definitions                        variable slowness  1000 slowness !                              3 constant pegs                                                 create PegSPS  pegs cells allot                                 : PegSP     ( peg -- addr ) cells PegSPS + ;                    : PUSH      ( c peg -- )    PegSP tuck @ c!  1 chars swap +! ;  : POP       ( peg -- c )    PegSP -1 chars over +!  @ c@ ;      create PegStacks  30 chars allot                                : PegStack  ( peg -- addr )   10 * PegStacks + ;                : clear-peg    ( peg -- )  dup PegStack  swap PegSP ! ;         : clear-pegs  ( -- )  pegs 0 do  i clear-peg  loop  ;           -->                                                                                                                             ( hanoi )                                                       : show-disk  ( level diameter peg -- )                            22 * 10 + over -  rot 10 swap - at-xy                           2* [char] * emits ;                                           : show-peg   ( peg -- )                                           dup >r PegStack                                                 BEGIN   r@ PegSP @ over <>                                      WHILE   dup r@ PegStack - over c@  ( addr level diameter )              r@ show-disk  char+                                     REPEAT  drop r> drop ;                                        -->                                                                                                                                                                                                                                                                                                                                                                                             ( hanoi )                                                       : maketab  ( n1..nn n -- XXX ) \ XXX TODO stack effect            create                                                            dup alloted over 1- + swap 0                                    2dup <> if    do  dup >r c! r> 1-  loop                                 else  2drop                                                     then  drop                                            does>  + c@ ;                                                 #3 base !                                                       00 02 01 12 00 10 21 20  #8 maketab TO!                         00 21 12 20 00 02 10 01  #8 maketab FRO!                        decimal                                                         -->                                                                                                                                                                                                                                                             ( hanoi )                                                       : finished  ( -- )  key drop 0 11 at-xy ." Stopped" cr abort  ; : show-pegs  ( -- )                                               page  pegs 0 do  i show-peg  loop  slowness @ ms                key? if  finished  then ;                                     : move-ring  ( ring -- ring )                                     dup to! 3 / pop  over fro! 3 mod push show-pegs ;             : tower ( depth direction -- depth direction )                    swap 1- swap over                                               IF    to!  recurse  to! move-ring fro! recurse  fro!            ELSE  move-ring                                                 THEN  swap 1+ swap ;                                          -->                                                                                                                                                                                                                                                             ( hanoi )                                                       : run  ( depth -- )                                               clear-pegs                                                      dup BEGIN ?dup WHILE 1- dup 0 push REPEAT                       show-pegs 1 tower 2drop                                         0 11 at-xy ;                                                  mode64 page                                                       .( Towers of Hanoi) cr                                          .( Type 'n run' to play where) cr                               .( 'n' is the number of disks.) cr                                                                                                                                                                                                                                                                                                                                                                                                                            ( attr )                                                        need z80-asm need (attr-addr)                                   code attr ( col line -- b )                                       de pop  hl pop  l d ld                                          (attr-addr) call                                                m l ld  0 h ld#                                                 jppushhl                                                        end-codeattr-addr )                                                   need z80-asm need (attr-addr)                                   code attr-addr ( col line -- a )                                  de pop  hl pop  l d ld                                          (attr-addr) call                                                jppushhl                                                        end-codeattr-addr) \                                                 need z80-asm                                                    create (attr-addr)  ( -- a )                                      asm                                                             e a ld  \ line to a 0x00..0x17 (max 00010111)                   rrca rrca rrca  \ rotate bits left                              a e ld  \ store in d as an intermediate value                   E0 and#  \ pick up bits 11100000 (was 00011100)                 d xor  \ combine with column 0x00..0x1F                         a l ld  \ low byte now correct                                  e a ld  \ bring back intermediate result from d                 03 and#  58 xor#                                                a h ld  \ high byte correct                                     ret                                                             end-asm                                                                                                                       ( clear-block )                                                 need z80-asm                                                    code clear-block  ( column row width height -- )                  exx  0 ix ldp#  sp addix                                        #4 ix a ftx  a d ld  rrca rrca rrca  #224 and#  #6 ix orx       a e ld  d a ld  #24 and#  #64 or#  a d ld                       #2 ix c ftx  #0 ix a ftx  a add  a add  a add  a b ld           begin                                                             de push  de hl ldp  de incp  0 m ld#  bc push  c dec            nz if  0 b ld#  ldir  then                                      bc pop  de pop  d inc  d a ld  7 and#                           z if  #32 a ld#  e add  a e ld                                    nc if  d a ld  8 sub#  a d ld  then                           then                                                          step  0 hl ldp#  sp addp  #4 cells de ldp#  de addp  ldsp       exx  next ix ldp#  jpnext  end-code                           ( color-block )                                                 need z80-asm                                                    code color-block  ( column row width height color -- )            exx  0 ix ldp#  sp addix                                        #6 ix a ftx  #22 d ld#  a add  a add  a add  a add              d rl  a add  d rl  #8 ix orx  a e ld                            #2 ix b ftx  #4 ix c ftx                                        begin                                                             de push  de hl ldp  de incp  bc push  #0 b ld#                  0 ix a ftx  a m ld  c dec                                       nz if  ldir  then                                               bc pop  hl pop  #32 de ldp#  de addp  exde                    step                                                            0 hl ldp#  sp addp  #5 cells de ldp#  de addp  ldsp             exx  next ix ldp#  jpnext  end-code                                                                                           ( wipe-block )                                                  need z80-asm                                                    code wipe-block  ( column row width height color -- )             exx  0 ix ldp#  sp addix                                        #6 ix a ftx  a d ld  rrca rrca rrca  #224 and#  #8 ix orx       a e ld  d a ld  #24 and#  #64 or#  a d ld                       #4 ix c ftx  #2 ix a ftx  a add  a add  a add  a b ld           begin                                                             de push  de hl ldp  de incp  0 m ld#  bc push  c dec            nz if  0 b ld#  ldir  then                                      bc pop  de pop  d inc  d a ld  7 and#                           z if  #32 a ld#  e add  a e ld                                    nc if  d a ld  8 sub#  a d ld  then                           then                                                          step  -->                                                                                                                     ( wipe-block )                                                    #6 ix a ftx  #22 d ld#  a add  a add  a add  a add              d rl  a add  d rl  #8 ix orx  a e ld  #2 ix b ftx               begin                                                             de push  de hl ldp  de incp  bc push  #0 b ld#                  0 ix a ftx  a m ld  c dec                                       nz if  ldir  then                                               bc pop  hl pop  #32 de ldp#  de addp  exde                    step                                                            0 hl ldp#  sp addp  #5 cells de ldp#  de addp  ldsp             exx  next ix ldp#                                               jpnext  end-code                                                                                                                                                                                                                                                                                                              ( circle )                                                      need z80-asm                                                    create circle-plot  ( -- a )                                      asm                                                             hl push  bc push  de push                                       ' plot call  \ XXX TODO                                         de pop  bc pop  hl pop  ret                                     end-asm                                                       code circle  ( gx gy radius -- )                                  0 h ld#  l a ld                                                 exx  cpl  a c ld  FF b ld#                                      bc incp  \ bc' is -radius                                       end-code                                                                                                                                                                                                                                                      ( cls-chars0 )                                                  need z80-asm                                                    code cls-chars0  ( -- )                                           bc push                                                         6 b ld#                                                         begin   bc push  57FF hl ldp#                                           begin   20 c ld#  a and                                                 begin   nop  m sla                                                      nop  m rlc                                                      nop  m sla                                                      nop  hl decp  c dec  z until                            3F a ld#  h cp  z until                                 bc pop  step                                            bc pop  jpnext                                                  end-code                                                                                                                      ( cls-chars1 )                                                  need z80-asm                                                    code cls-chars1  ( -- )                                           bc push                                                         08 b ld#                                                        begin                                                             4000 hl ldp#  \ screen bitmap address                           begin                                                             m srl  hl incp                                                  m sla  hl incp                                                  58 a ld#  h cp                                                z until                                                       step                                                            bc pop  jpnext  end-code                                                                                                                                                                      ( horizontal-curtain )                                          need z80-asm                                                    code horizontal-curtain  ( b -- )                                 de pop  bc push                                                 e a ld  5800 de ldp#  5AFF hl ldp#                              0C b ld#                                                        begin   bc push  20 b ld#                                               begin   a m ld  de stap                                                 bc push  02 b ld#                                               begin bc push  FF b ld#  begin  step                                  bc pop  step                                              bc pop  de incp  hl decp  step                          bc pop  step                                            bc pop  jpnext                                                  end-code                                                                                                                      ( vertical-curtain )                                            need z80-asm                                                    code vertical-curtain  ( b -- )                                   de pop  bc push                                                 e a ld  5800 de ldp#  5AFF hl ldp#  10 b ld#                    begin   bc push  18 b ld#  de push  hl push                             begin   a m ld  de stap  bc push  02 b ld#                              begin   bc push  FF b ld#  begin  step                                  bc pop  step                                            20 b ld#                                                        begin  de incp  hl decp  step                                   bc pop  step                                            hl pop  de pop  bc pop  de incp  hl decp  step          bc pop  jpnext  end-code                                                                                                                                                                      ( nonfull-display full-display save-display restore-display )   : nonfull-display  ( -- )  2 23659 c!  ;                        : full-display  ( -- )  0 23659 c!  ;                           : save-display  ( -- ) ( R: -- col row )                          r> xy 2>r >r save-mode nonfull-display  ;                     : restore-display  ( -- ) ( R: col row -- )                       display full-display restore-mode  r> 2r> at-xy >rhires-emit-udg )                                              need z80-asm  need (hires-emit)                                 code hires-emit-udg  ( gx gy b -- )                               hl pop  l a ld                                                  de pop  hl pop  bc push  e b ld  l c ld                         5C7B de ftp  \ system variable UDG                              (hires-emit) call                                               bc pop  next ix ldp#  jpnext                                    end-codehires-emit) \                                                need z80-asm  need (pixel-addr)                                 create (hires-emit)  ( -- )                                       asm                                                             0 h ld#  a l ld  hl addp  hl addp  hl addp  de addp             hl push  ix pop  bc hl ldp  hl push  8 c ld#                    begin                                                             hl pop  h dec  hl push  h inc                                   bc push  hl bc ldp  (pixel-addr) call  bc pop                   a b ld  a xor  b or  0 ix a ftx                                 nz if   exde  0 h ld#  a l ld  8 a ld#  b sub  a b ld                   begin  hl addp  step  exde                                      m a ld  d xor  a m ld                                           hl incp  e a ld  then                                   m xor  a m ld  ix incp  c dec                                 z until  hl pop  ret  end-asm                                 ( rdraw )                                                       need z80-asm                                                    code rdraw  ( gx gy -- )                                          hl pop  de pop  bc push                                         de bc ldp                                                       1 e ld#                                                         b 7 bit  \ negative x?                                          nz if  c a ld  neg  -1 e ld#  a c ld  then  \ negative x        l b ld   \ y                                                    1 d ld#                                                         h 7 bit  \ negative y?                                          nz if  b a ld  neg  -1 d ld#  a b ld  then  \ negative y        24BA call \ alternative entry to the DRAW-LINE ROM routine      bc pop                                                          jpnext end-code                                                                                                               \ (rdraw) \                                                     need z80-asm                                                    create (rdraw)                                                  asm                                                             end-asmadraw ) \ from Abersoft Forth                                 need plot  need os-coordx  need os-coordy                       2variable x1  2variable incx  2variable y1  2variable incy      : adraw  ( gx gy -- )                                             [ os-coordy ] literal c@ ( y0 )                                 dup 0 swap y1 2! - dup abs rot                                  [ os-coordx ] literal c@ ( x0 )                                 dup 0 swap x1 2! - dup abs rot                                  max >r dup 0<  \ negative xdiff?                                if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    incx 2! drop dup 0<  \ negative ydiff?                          if    abs 0 swap r@ ud/mod dnegate                              else  0 swap r@ ud/mod  then                                    -->                                                                                                                           ( adraw )                                                         incy 2! drop r> 1+ 0                                            do  x1 @ y1 @ plot                                                  x1 2@ incx 2@ d+ x1 2!                                          y1 2@ incy 2@ d+ y1 2!  loopocr )                                                         need z80-asm  need ocr-chars                                    code ocr  ( col line -- n )                                       de pop  hl pop  bc push                                         l b ld  e c ld  ocr-charset fthl                                c a ld  rrca  rrca  rrca  E0 and#  b xor  a e ld                c a ld  18 and#  40 xor#  a d ld                                0 de stp |mark 0 unresolved !                                   ocr-chars fta  a b ld                                           begin                                                             bc push  hl push                                                0 de ldp#  \ restore the screen address                         |mark 0 unresolved @ !                                      -->                                                                                                                                                                                             ( ocr )                                                             08 b ld# \ scans                                                begin                                                             de ftap  m xor  \ scan match?                                   here jrnz >relmark 1 unresolved !                               d inc  hl incp  \ update the pointers                         step  \ next scan                                               bc pop  bc pop                                                  ocr-chars fta  b sub  a b ld                                    ocr-first fta  b add  a b ld                                    here jr >relmark 2 unresolved !                                 1 unresolved @ >relresolve                                      hl pop  0008 de ldp#  de addp  bc pop                         step                                                            2 unresolved @ >relresolve  0 h ld#  b l ld                     bc pop  jppushhl  end-code                                    ( ocr-charset ocr-first ocr-chars ascii-ocr udg-ocr )           variable ocr-charset                                            variable ocr-first                                              variable ocr-chars                                              need os-chars  need os-udg                                      : ascii-ocr  ( -- )                                               os-chars @ 256 + ocr-charset !                                  32 ocr-first !                                                  95 ocr-chars !  ;                                             : udg-ocr  ( n -- )                                               os-udg @ ocr-charset !                                          128 ocr-first !                                                 ocr-chars !  ;                                                19 udg-ocr  \ default                                                                                                                                                                           ( pixel-addr )                                                  need (pixel-addr)                                               code pixel-addr  ( gx gy -- n a )                                 E1 c,  D1 c,            \ pop hl / pop de                       C5 c,                   \ push bc                               40 05 + c,              \ ld b,l ; b=y                          48 03 + c,              \ ld c,e ; c=x                          CD c, (pixel-addr) ,       \ call (pixel-addr)                  C1 c,                   \ pop bc                                16 c, 0 c,  58 07 + c,  \ ld d,0 / ld e,a                       C3 c, pushhlde ,        \ jp pushhlde                           end-code                                                                                                                                                                                                                                                                                                                      \ (pixel-addr) \                                                create (pixel-addr)  ( -- a )                                     asm                                                             3E c, BF c,   \ ld a,191 ; max Y coordinate                     90 00 + c,    \ sub b                                           C3 c, 22B0 ,  \ jp 0x22B0 ; and return                          end-asmpixel-addr) \                                                need z80-asm                                                    create (pixel-addr)  ( -- a )                                     asm                                                             BF a ld#  b sub                                                 a b ld  rra  scf  rra  a and  rra                               b xor  F8 and#  b xor  a h ld                                   c a ld                                                          rlca rlca rlca  b xor  C7 and#                                  b xor  rlca  rlca                                               a l ld                                                          c a ld  07 and#                                                 ret                                                             end-asm                                                                                                                                                                                       ( plot )                                                        need (pixel-addr)                                               code plot  ( gx gy -- )                                           D9 c,               \ exx ; save Forth IP                       E1 c,               \ pop hl                                    C1 c,               \ pop bc                                    40 05 + c,          \ ld b,l                                    ED c, 43 c, 5C7D ,  \ ld (0x5C7D),bc ; update COORDS            CD c, (pixel-addr) ,   \ call (pixel-addr)                      CD c, 22EC ,        \ call 0x22EB ; ROM PLOT-SUB + 7            D9 c,               \ exx ; restore Forth IP                    DD c, 21 c, next ,  \ ld ix,next ; restore ix                   jpnext              \ jp (ix)                                   end-code                                                                                                                                                                                      ( set-pixel )                                                   need (pixel-addr)  need z80-asm                                 code set-pixel  ( gx gy -- )                                      hl pop  de pop  bc push                                         l b ld  e c ld  (pixel-addr) call                               a b ld  b inc  1 a ld#                                          begin  rrca  step                                               m or  a m ld  \ combine pixel with byte in the screen           bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( reset-pixel )                                                 need (pixel-addr)  need z80-asm                                 code reset-pixel  ( gx gy -- )                                    hl pop  de pop  bc push                                         l b ld  e c ld  (pixel-addr) call                               a b ld  b inc  1 a ld#                                          begin  rrca  step                                               cpl  m and  a m ld  \ combine pixel with byte in the screen     bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( toggle-pixel )                                                need (pixel-addr)  need z80-asm                                 code toggle-pixel  ( gx gy -- )                                   hl pop  de pop  bc push                                         l b ld  e c ld  (pixel-addr) call                               a b ld  b inc  1 a ld#                                          begin  rrca  step                                               m xor  a m ld  \ combine pixel with byte in the screen          bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( test-pixel )                                                  need (pixel-addr)  need z80-asm                                 code test-pixel  ( gx gy -- f )                                   hl pop  de pop  bc push                                         l b ld  e c ld                                                  (pixel-addr) call                                               a b ld  b inc  m a ld                                           begin  rlca  step \ rotate to bit 0                             bc pop  \ restore the Forth IP                                  1 and#  \ pixel?                                                ' true jpnz                                                     ' false jp                                                      end-code                                                                                                                                                                                                                                                      ( pixels )                                                      need z80-asm                                                    code pixels  ( -- u )                                             exx                                                             4000 hl ldp#  l b ld  l c ld                                    begin  \ byte                                                     08 d ld#                                                        begin  \ bit                                                      m rrc  cy if  bc incp  then  d dec                            z until                                                         hl incp  h a ld  58 cp#                                       z until                                                         bc push                                                         exx                                                             jpnext                                                          end-code                                                      ( slow-pixels )                                                 need bits                                                       : pixels  ( -- u )  16384 6144 bitsfade )                                                        need z80-asm                                                    code fade  ( -- )                                                 bc push                                                         8 b ld#                                                         begin  5AFF hl ldp#  halt  halt                                   begin                                                             m a ld  a d ld  07 and#  nz if  a dec  then                     a e ld  a d ld  38 and#  nz if  8 sub#  then                    e or  d xor  3F and#  d xor                                     a m ld  hl decp  h a ld                                         58 cp#                                                        cy until                                                      step                                                            bc pop  jpnext                                                  end-code                                                      ( inverted )                                                    need z80-asm                                                    code inverted  ( -- )                                             4000 hl ldp#                                                    begin   m a ld  cpl  a m ld                                             hl incp  h a ld  58 cp#                                         jrnz                                                    jpnext                                                          end-codewater )                                                       need z80-asm                                                    code water  ( -- )                                                bc push                                                         20 b ld#                                                        begin    57FF hl ldp#                                                    begin   m rrc  hl decp  h 6 bit  z until               step                                                            bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( scroll-1px-right )                                            need z80-asm                                                    code scroll-1px-right  ( -- )                                     bc push                                                         4000 hl ldp#  \ screen bitmap address                           C0 c ld#  \ pixel rows                                          begin                                                             m srl  hl incp  \ first char column                             1F b ld#  \ remaining columns                                   begin   m rr  hl incp  step                                     c dec                                                         z until                                                         bc pop jpnext                                                   end-code                                                                                                                                                                                      ( scroll-1px-up )                                               need z80-asm                                                    create (scroll-1px-up)  ( -- a )                                  asm                                                             4000 hl ldp#  BF b ld#                                          begin                                                             bc push  hl de ldp  h inc  h a ld  F8 and#  h cp                z if    8 b ld#  b sub  rra  rra  rra  a h ld  0020 bc ldp#             bc addp  h a ld  rla  rla  rla  a h ld                  then    hl push  0020 bc ldp#  ldir  hl pop  bc pop           step                                                            end-asm                                                       code scroll-1px-up  ( -- )                                        bc push  \ Forth IP                                             (scroll-1px-up) call                                            bc pop  jpnext  end-code                                      ( udg! udg: )                                                   need os-udg                                                     : udg!  ( b0..b7 c -- )                                           128 - 8 * os-udg @ + dup 7 + do  i c!  -1 +loop  ;            : udg:  ( b0..b7 c "name" -- )  dup constant  udgcapslock )                                                    need os-flags2                                                  need c!toggle-bits  need c@test-bits                            need c!reset-bits   need c!reset-bits                           %1000 os-flags2 2constant capslock                              : toggle-capslock  ( -- )    capslock c!toggle-bits  ;          : set-capslock     ( -- )    capslock c!set-bits  ;             : unset-capslock   ( -- )    capslock c!reset-bits  ;           : capslock?        ( -- f )  capslock c@test-bits 0<>  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( at-accept clear-accept set-accept )                           2variable accept-xy       \ coordinates of the edited string    variable accept-buffer    \ address of the edited string        variable /accept          \ max length of the edited string     variable >accept          \ offset to the cursor position       : at-accept  ( -- )  accept-xy 2@ at-xy  ;                      : clear-accept  ( -- )                                            at-accept span @ spaces at-accept  span off  ;                : set-accept  ( ca1 len1 -- ca1' )                                clear-accept /accept @ min  ( ca1 len1' )                       dup span ! 2dup system-bank type default-bank                   dup >r                                                          accept-buffer @  ( ca1 len1' ca2 )                              smove accept-buffer @  ( ca2 )                                  r> +  ( ca1' )  ;                                                                                                             ( acceptx )                                                     need at-accept  need set-accept                                 : .acceptx  ( -- )                                                accept-buffer @ >accept @ at-accept type                        1 inverse  >accept @ span @ <                                   if accept-buffer @ >accept @ + c@ emit  else  space  then       0 inverse                                                       accept-buffer @ span @ >accept @ 1+ min /string typeacceptx )                                                     need toggle-capslock                                            : accept-edit  ( -- )  clear-accept init-accept  ;              : accept-left  ( -- )  ;                                        : accept-right  ( -- )  ;                                       : accept-up  ( -- )  ;                                          : accept-down  ( -- )  ;                                        : accept-delete  ( -- )  ;                                      create accept-commands ] noop noop noop noop noop noop          toogle-capslock accept-edit accept-left accept-right            accept-down accept-up accept-delete noop noop noop noop noop    noop noop noop noop noop noop noop noop noop noop noop noop [   : >accept-command  ( c -- a )  cells accept-commands +  ;       : accept-command  ( c -- )  >accept-command perform  ;          -->                                                                                                                             ( acceptx )                                                     : init-acceptx  ( ca len -- )                                     /accept !  accept-buffer !  >accept off  xy accept-xy 2!  ;   : (acceptx) ( ca len -- len' )  2dup init-accept                  over + over ( bot eot cur )                                     begin  key dup 13 <> \ not carriage return?                     while                                                             dup 12 =  \ delete?                                             if    drop  >r over r@ < dup  \ any chars?                            if  8 dup emit  bl emit  emit  then  r> +                 else  \ printable                                                     >r  2dup <>  \ more?                                            if r@ over c!  char+  r@ emit                                   then r> drop                                              then                                                          repeat  drop nip swap -  ;  -->                               ( acceptx )                                                     : acceptx ( ca len -- len' )                                      span off  ?dup 0= if  drop 0  else  (acceptx)  then  ;        : ax  ( -- )  ['] acceptx ['] accept defer!  ;                  : a0  ( -- )  ['] default-accept ['] accept defernuf? )                                                        need aborted?                                                   [defined] 'cr' ?\ 13 constant 'cr' \ code of carriage return    : nuf?  ( -- f )  'cr' abortedaborted? )                                                    : aborted?  ( c -- f )                                            key? dup  if    key 2drop key =                                           else  nip  thenbreak? )                                                      : break?  ( -- f )                                                key? dup if  key 2drop break-key?  theneyboard rows portskk-ports kk, kk@ )                                            /kk 3 <> dup                                                    ?\ : kk,  ( bitmask port -- ) , c,  ;                           ?\ : kk@  ( a -- bitmask port ) dup c@ swap 1+ @ ;              /kk 4 <> dup                                                    ?\ : kk,  ( d -- )  2,  ;                                       ?\ : kk@  ( a -- bitmask port )  2@  ;                          -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( kk-ports )                                                    $01 $F7FE 2constant kk-1  $02 $F7FE 2constant kk-2              $04 $F7FE 2constant kk-3  $08 $F7FE 2constant kk-4              $10 $F7FE 2constant kk-5                                        $01 $FBFE 2constant kk-q  $02 $FBFE 2constant kk-w              $04 $FBFE 2constant kk-e  $08 $FBFE 2constant kk-r              $10 $FBFE 2constant kk-t                                        $01 $FDFE 2constant kk-a  $02 $FDFE 2constant kk-s              $04 $FDFE 2constant kk-d  $08 $FDFE 2constant kk-f              $10 $FDFE 2constant kk-g                                        $01 $FDFE 2constant kk-cs  $02 $FDFE 2constant kk-z             $04 $FDFE 2constant kk-x   $08 $FDFE 2constant kk-c             $10 $FDFE 2constant kk-v                                        -->                                                                                                                                                                                             ( kk-ports )                                                    $01 $EFFE 2constant kk-0  $02 $EFFE 2constant kk-9              $04 $EFFE 2constant kk-8  $08 $EFFE 2constant kk-7              $10 $EFFE 2constant kk-6                                        $01 $DFFE 2constant kk-p  $02 $DFFE 2constant kk-o              $04 $DFFE 2constant kk-i  $08 $DFFE 2constant kk-u              $10 $DFFE 2constant kk-y                                        $01 $BFFE 2constant kk-en  $02 $BFFE 2constant kk-l             $04 $BFFE 2constant kk-k   $08 $BFFE 2constant kk-j             $10 $BFFE 2constant kk-h                                        $01 $7FFE 2constant kk-sp $02 $7FFE 2constant kk-ss             $04 $7FFE 2constant kk-m  $08 $7FFE 2constant kk-n              $10 $7FFE 2constant kk-b                                        -->                                                                                                                                                                                             ( kk-ports )                                                    need kk,                                                        40 constant keys                                                create kk-ports                                                 kk-1  kk,  kk-2  kk,  kk-3 kk,  kk-4 kk,  kk-5 kk,              kk-q  kk,  kk-w  kk,  kk-e kk,  kk-r kk,  kk-t kk,              kk-a  kk,  kk-s  kk,  kk-d kk,  kk-f kk,  kk-g kk,              kk-cs kk,  kk-z  kk,  kk-x kk,  kk-c kk,  kk-v kk,              kk-0  kk,  kk-9  kk,  kk-8 kk,  kk-7 kk,  kk-6 kk,              kk-p  kk,  kk-o  kk,  kk-i kk,  kk-u kk,  kk-y kk,              kk-en kk,  kk-l  kk,  kk-k kk,  kk-j kk,  kk-h kk,              kk-sp kk,  kk-ss kk,  kk-m kk,  kk-n kk,  kk-b kk,                                                                                                                                                                                                                                                                              ( kk-1# )                                                       need enum                                                       0                                                               enum kk-1#  enum kk-2#  enum kk-3# enum kk-4# enum kk-5#        enum kk-q#  enum kk-w#  enum kk-e# enum kk-r# enum kk-t#        enum kk-a#  enum kk-s#  enum kk-d# enum kk-f# enum kk-g#        enum kk-cs# enum kk-z#  enum kk-x# enum kk-c# enum kk-v#        enum kk-0#  enum kk-9#  enum kk-8# enum kk-7# enum kk-6#        enum kk-p#  enum kk-o#  enum kk-i# enum kk-u# enum kk-y#        enum kk-en# enum kk-l#  enum kk-k# enum kk-j# enum kk-h#        enum kk-sp# enum kk-ss# enum kk-m# enum kk-n# enum kk-b#        drop                                                                                                                                                                                                                                                                                                                            ( kk-chars )                                                    create kk-chars                                                 char 1 c,  char 2 c,  char 3 c,  char 4 c,  char 5 c,           char q c,  char w c,  char e c,  char r c,  char t c,           char a c,  char s c,  char d c,  char f c,  char g c,           128    c,  char z c,  char x c,  char c c,  char v c,           char 0 c,  char 9 c,  char 8 c,  char 7 c,  char 6 c,           char p c,  char o c,  char i c,  char u c,  char y c,           129    c,  char l c,  char k c,  char j c,  char h c,           130    c,  131    c,  char m c,  char n c,  char b c,                                                                                                                                                                                                                                                                                                                                                                                                           ( pressed pressed? )                                            need [if]                                                       [needed] pressed? [needed] pressed or [if]                      need @p                                                         : pressed? ( n1 n2 -- f )  @p and 0=  ;                         [then]                                                          [needed] pressed [if]                                           need pressed?  need kk-ports                                    : pressed  ( -- false | n1 n2 true )                              0 \ false by default                                            [ kk-ports keys /kk * bounds swap ] literal literal             do  i kk@ pressed? if  drop i kk@ 1 leave  then  /kk +loop  ; [then]                                                                                                                                                                                                                                                          ( only-one-pressed )                                            need kk-ports                                                   0. 2variable kk-pressed                                         : only-one-pressed  ( -- false | n1 n2 true )                     0. kk-pressed 2! \ none by default                              [ kk-ports keys /kk * bounds swap ] literal literal             do  i kk@ pressed?                                              if  kk-pressed 2@ + if                                          then                                                            /kk +loop                                                       kk-pressed 2@ 2dup + if  1  else  2drop 0  then  ;                                                                                                                                                                                                                                                                                                                                            ( get-inkey )                                                   need z80-asm                                                    code get-inkey  ( -- c | 0 )                                      bc push                                                         028E call \ KEY-SCAN ROM routine                                z if  \ is key press valid?                                       031E call \ KEY-TEST ROM routine                                cy if  \ is key code valid?                                       00 c ld#  \ XXX Spectrum Forth-83 does this                     d dec  a e ld                                                   0333 call \ KEY-DECODE ROM routine                            then                                                          then                                                            FF cp#  z if  a xor  then  \ convert FF to 00                   bc pop  pusha jp  end-code                                                                                                    ( get-key? )                                                    need z80-asm                                                    code get-key?  ( -- f )                                           bc push                                                         028E call  \ ROM KEY_SCAN                                       here jrnz  >relmark 0 unresolved ! \ to return_false            031E call  \ ROM KEY_TEST                                       here jrnc  >relmark 1 unresolved ! \ to return_false            bc pop  ' true jp                                               0 unresolved @ >relresolve                                      1 unresolved @ >relresolve                                      bc pop  ' false jp                                              end-code                                                                                                                                                                                                                                                      ( fast-get-key? )                                               need z80-asm                                                    code fast-get-key?  ( -- f )                                      bc push                                                         028E call  \ ROM KEY_SCAN                                       0000 jpnz  |mark 0 unresolved ! \ to return_false               031E call  \ ROM KEY_TEST                                       0000 jpnc  |mark 1 unresolved ! \ to return_false               bc pop  ' true jp                                               0 unresolved @ >resolve                                         1 unresolved @ >resolve                                         bc pop  ' false jp                                              end-code                                                                                                                                                                                                                                                      ( inkey )                                                       need z80-asm                                                    code inkey  ( -- c | 0 )                                          a xor                                                           01 iy 5 bitx  \ a new key pressed?                              nz if                                                             5C08 hl ldp#  \ LAST-K system variable                          m a ld                                                          01 iy 5 resx                                                  then                                                            pusha jp                                                        end-code                                                                                                                                                                                                                                                                                                                      ( y/n? y/n no? yes? )                                           need value                                                      char Y value "y"  char N value "n"                              : y/n?  ( c -- f )  dup "y" = swap "n" = or  ;                  : y/n  ( -- c )                                                   begin  key upper dup y/n? 0=  while  drop  repeat  ;          : no?  ( -- f )  y/n "n" =  ;                                   : yes?  ( -- f )  y/n "ycreate-anon anon +anon n>anon )                               variable (anon)  ( -- a )                                       : create-anon  ( -- )                                             here (anon) !                                                   [ (anon) body> @ ] literal compile, 0 ,  ;                    : anon  ( Compilation: -- ) ( Run-time: -- a )                    (anon) @                                                        compiling? if  compile,  else  execute  then  ; immediate     : +anon  ( Compilation:  n -- ) ( Run-time: -- )                  cells (anon) @ execute +                                        compiling? if  postpone literal  then ; immediate             : n>anon  ( x1..xn n -- )                                         cells postpone anon swap bounds do  i !  cell +loop  ;                                                                                                                                                                                                        ( arguments results )                                           need cell/                                                      variable >args                                                  create arg-actions ] @ ! +! [                                   variable arg-action  arg-action off                             : arg:  ( +n "name" -- )                                          create  c,                                                      does>  ( -- x ) ( x -- )                                          c@ >args @ swap -                                               arg-action @ arg-actions + perform  arg-action off  ;       $00 arg: l0 $02 arg: l1 $04 arg: l2 $06 arg: l3 $08 arg: l4     $0A arg: l5 $0C arg: l6 $0E arg: l7 $10 arg: l8 $12 arg: l9     -->                                                                                                                                                                                                                                                             ( arguments results )                                           : toarg  ( -- )  cell arg-action !  ;                           : +toarg  ( -- )  [ 2 cells ] literal arg-action !  ;           : arguments  ( i*x +n -- j*x )                                    r> >args @ >r >r                                                cells sp@ + dup >args ! [ 10 cells ] literal - sp@ swap -       cell/ 0 do  0  loop  ; compile-only                           : results  ( +n -- )                                              cells >args @ swap - sp@ -                                      cell/ 0 do  drop  loop                                          r> r> >args ! >r  ; compile-only                                                                                                                                                                                                                                                                                                                                                              ( local )                                                       :noname  \ Compilation: ( -- xt )                                 2r> swap !  ;                                                 : local  \ Compilation: ( xt -- xt )                              r> swap                     \ save top return address           dup @ 2>r                   \ save variable address and value   [ dup >body ] literal >r    \ force exit via `restore-local`    >r  ;                       \ restore top return address        compile-only                                                    drop  \ delete xt                                                                                                                                                                                                                                                                                                                                                                                                                                             ( local )                                                       : (restore-local)  ( -- )  ( R: a x -- )  2r> swap !  ;         : local  \ Compilation: ( xt -- xt )                              r> swap  dup @ 2>r                                              ['] (restore-local) >body >r  >r  ;  compile-onlycalculator )                                                  need alias                                                      wordlist constant calculator-wordlist                           : calculator  ( -- )                                              calculator-wordlist >order  $C5 c, $EF c,  ;                  calculator-wordlist >order                                      get-current  calculator-wordlist set-current                    : end-calc  ( -- )  $38 c,  ;                                   : end-calculator  ( -- )  previous end-calc $C1 c,  ;           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : +  ( -- )  $0F c,  ;                                          : -  ( -- )  $03 c,  ;                                          : *  ( -- )  $04 c,  ;                                          : /  ( -- )  $05 c,  ;                                          : mod  ( -- )  $32 c,  ;                                        : **  ( -- )  $06 c,  ;                                         : sqrt  ( -- )  $28 ccalculator )                                                  : sgn  ( -- )  $29 c,  ;                                        : abs  ( -- )  $2A c,  ;                                        : truncate  ( -- )  $3A c,  ;                                   : re-stack  ( r -- r' )  $3D c,  ;                              : negate  ( -- )  $1B c,  ;                                     : zero  ( -- )  $A0 c,  ;                                       : one  ( -- )  $A1 c,  ;                                        : half  ( -- )  $A2 c,  ;                                       : pi2/  ( -- )  $A3 c,  ;                                       : ten  ( -- )  $A4 c,  ;                                        -->                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : ln  ( -- )  $25 c,  ;                                         : exp  ( -- )  $26 c,  ;                                        : acos  ( -- )  $23 c,  ;                                       : asin  ( -- )  $22 c,  ;                                       : atan  ( -- )  $24 c,  ;                                       : cos  ( -- )  $20 c,  ;                                        : sin  ( -- )  $1F c,  ;                                        : tan  ( -- )  $21 c,  ;                                        -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : drop  ( -- )  $02 c,  ;                                       : dup  ( -- )  $31 c,  ;                                        : swap  ( -- )  $01 c,  ;                                       : >mem  ( n -- )  $C0 [ also forth ] + [ previous ] c,  ;       : mem>  ( n -- )  $E0 [ also forth ] + [ previous ] c,  ;       : over  ( -- )                                                    2 >mem drop 1 >mem 2 mem> 1 mem>  ;                           : 2dup  ( -- )  over over  ;                                    -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : 0=  ( -- )  $30 c,  ;                                         : <>  ( -- )  $0B c,  ;                                         : =  ( -- )  $0E c,  ;                                          : >  ( -- )  $0C c,  ;                                          : <  ( -- )  $0D c,  ;                                          : <=  ( -- )  $09 c,  ;                                         : >=  ( -- )  $0A c,  ;                                         : 0>  ( -- )  $36 c,  ;                                         : 0<  ( -- )  $37 c,  ;                                         -->                                                                                                                                                                                                                                                                                                                                                                                             ( calculator )                                                  : ?branch  ( -- )  $00 c,  ;                                    : branch  ( -- )  $33 c,  ;                                     : >mark  ( -- a )  here 0 c,  ;                                 : from-here  ( a -- n )                                           here [ also forth ] swap - [ previous ] ;                     : >resolve  ( a -- )                                              [ also forth ] dup [ previous ] from-here                       [ also forth ] swap [ previous ] c!  ;                        ' here alias <mark  ( -- a )                                    : <resolve  ( a -- )  from-here c,  ;                           : if  ( -- a )  ?branch >mark  ;                                : else  ( a1 -- a2 )                                              branch >mark [ also forth ] swap [ previous ] >resolve  ;     ' >resolve alias then  ( a -- )                                 set-current  previous                                           ( --fp-rom-- )                                                  need +thru                                                      1 22 +thru                                                      : --fp-romfloat float+ floats )                                         5 constant float                                                : float+  ( n1 -- n2 )  float +  ;                              : floats  ( n1 -- n2 )  floatfp0 fp (fp@ fp@ empty-fs fdepth )                             need float                                                      23651 constant fp0  \ STKBOT system variable                    23653 constant fp   \ STKEND system variable                    : (fp@  ( -- a )  fp @  ;                                       : fp@  ( -- a )  (fp@ float -  ;                                : empty-fs  ( -- )  fp0 @ fp !  ;                               : fdepth  ( -- n )  (fp@ fp0 @ - floatend-calculator-flag )                                         need macro  need f>s  need call-xt                              : f>flag  ( -- f ) ( F: rf -- )  f>s negate  ;                  macro end-calculator-flag  ( -- f ) ( F: 1|0 -- )                 [ calculator-wordlist >order ] end-calculator [ previous ]      ['] f>flag call-xt  jpnext endmf= f<> )                                                      need calculator  need end-calculator-flag                       code f<>  ( -- f ) ( F: r1 r2 -- )                                calculator  <>  end-calculator-flag  end-code                 code f=  ( -- f ) ( F: r1 r2 -- )                                 calculator  =  end-calculator-flag  end-codef0< f0= f0<> f0> )                                            need calculator  need end-calculator-flag                       code f0<  ( -- f ) ( F: r -- )                                    calculator  0<  end-calculator-flag  end-code                 code f0=  ( -- f ) ( F: r -- )                                    calculator  0=  end-calculator-flag  end-code                 code f0<>  ( -- f ) ( F: r -- )                                   calculator  0= 0=  end-calculator-flag  end-code              code f0>  ( -- f ) ( F: r -- )                                    calculator  0>  end-calculator-flag  end-code                                                                                                                                                                                                                                                                                                                                                                                                                 ( f< f<= f> f>= )                                               need calculator  need end-calculator-flag                       code f<  ( -- f ) ( F: r1 r2 -- )                                 calculator  <  end-calculator-flag  end-code                  code f<=  ( -- f ) ( F: r1 r2 -- )                                calculator  <=  end-calculator-flag  end-code                 code f>  ( -- f ) ( F: r1 r2 -- )                                 calculator  >  end-calculator-flag  end-code                  code f>=  ( -- f ) ( F: r1 r2 -- )                                calculator  >=  end-calculator-flag  end-code                                                                                                                                                                                                                                                                                                                                                                                                                 ( fdrop fdup fswap fover )                                      need calculator                                                 code fdrop  ( F: r -- )                                           calculator  drop  end-calculator  jpnext  end-code            code fdup  ( F: r -- r r )                                        calculator  dup  end-calculator  jpnext  end-code             code fswap  ( F: r1 r2 -- r2 r1 )                                 calculator  swap  end-calculator  jpnext  end-code            code fover  ( F: r1 r2 -- r1 r2 r1 )                              calculator  over  end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                            ( frot -frot )                                                  need calculator                                                 code frot  ( F: r1 r2 r3 -- r2 r3 r1 )                            calculator                                                        1 >mem drop swap 1 mem> swap                                  end-calculator  jpnext  end-code                              code -frot  ( F: r1 r2 r3 -- r3 r1 r2 )                           calculator                                                        swap 1 >mem drop swap 1 mem>                                  end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                              ( f+ f- f* f/ fmod )                                            need calculator  need fdup  need f0=                            code f+  ( F: r1 r2 -- r3 )                                       calculator  +  end-calculator  jpnext  end-code               code f-  ( F: r1 r2 -- r3 )                                       calculator  -  end-calculator  jpnext  end-code               code f*  ( F: r1 r2 -- r3 )                                       calculator  *  end-calculator  jpnext  end-code               code f/  ( F: r1 r2 -- r3 )                                       calculator  /  end-calculator  jpnext  end-code               : ?f/  ( F: r1 r2 -- r3 )  fdup f0= #-42 ?throw f/  ;           code fmod  ( F: r1 -- r2 )                                        calculator  mod  end-calculator  jpnext  end-code                                                                                                                                                                                                             ( fmax )                                                        need calculator                                                 code fmax  ( F: r1 r2 -- r1|r2 )                                  calculator                                                        2dup >  ( F: r1 r2 rf -- )                                      if    swap drop  ( F: r1 )                                      else  drop  ( F: r2 )                                           then                                                          end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( fmin )                                                        need calculator                                                 code fmin  ( F: r1 r2 -- r1|r2 )                                  calculator                                                        2dup <  ( F: r1 r2 rf -- )                                      if    drop  ( F: r1 )                                           else  swap drop  ( F: r2 )                                      then                                                          end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( fsgn fabs fnegate )                                           need calculator                                                 code fsgn  ( F: r1 -- -1|0|1 )                                    calculator  sgn  end-calculator  jpnext  end-code             code fabs  ( F: r1 -- r2 )                                        calculator  abs  end-calculator  jpnext  end-code             code fnegate  ( F: r1 -- r2 )                                     calculator  negate  end-calculator  jpnext  end-codefln fexp f** fsqrt )                                          need calculator  need fdup  need f0<                            code fln  ( F: r1 -- r2 )                                         calculator  ln  end-calculator  jpnext  end-code              code fexp  ( F: r1 -- r2 )                                        calculator  exp  end-calculator  jpnext  end-code             code f**  ( F: r1 -- r2 )                                         calculator  **  end-calculator  jpnext  end-code              code fsqrt  ( F: r1 -- r2 )                                       calculator  sqrt  end-calculator  jpnext  end-code            : ?fsqrt  ( F: r1 -- r2 )  fdup f0< #-46 ?throw f/  ;                                                                                                                                                                                                                                                                                                                                           ( f0 f1 fhalf fpi2/ f10 )                                       need calculator                                                 code f0  ( F: -- r )                                              calculator  zero  end-calculator  jpnext  end-code            code f1  ( F: -- r )                                              calculator  one  end-calculator  jpnext  end-code             code fhalf  ( F: -- r )                                           calculator  half  end-calculator  jpnext  end-code            code fpi2/  ( F: -- r )                                           calculator  pi2/  end-calculator  jpnext  end-code            code f10  ( F: -- r )                                             calculator  ten  end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                             ( frestack b>f u>f s>f f>s )                                    need calculator  need fnegate                                   code frestack  ( F: r -- r' )                                     calculator  re-stack  end-calculator  jpnext end-code         code b>f  ( b -- ) ( F: -- r )                                    D9 c, E1 c, 78 05 + c, CD c, 2D28 , D9 c,  jpnext  end-code   code u>f  ( u -- ) ( F: -- r )                                    D9 c, C1 c, CD c, 2D2B , D9 c,  jpnext  end-code              : s>f  ( n -- ) ( F: -- r )                                       dup 0< if  abs u>f fnegate  else  u>f  then  ;                code f>s  ( -- n ) ( F: r -- )                                    D9 c, CD c, 2DA2 , C5 c, D9 c,  jpnext  end-code                                                                                                                                                                                                                                                                              ( f! f@ )                                                       need z80-asm                                                    code f!  ( fa -- ) ( F: r -- )                                    exx  2BF1 call  \ STK_FETCH ROM routine                              hl pop  a m ld  hl incp                                                 e m ld  hl incp  d m ld  hl incp                                c m ld  hl incp  b m ld                            exx  jpnext end-code                                          code f@  ( fa -- ) ( F: -- r )                                    exx  hl pop m a ld  hl incp                                                 m e ld  hl incp  m d ld  hl incp                                m c ld  hl incp  m b ld                                         2AB6 call  \ STK_STORE ROM routine                  exx  jpnext end-code                                                                                                                                                                          ( f, fconstant fvariable )                                      need f!                                                         : f,  ( -- ) ( F: r -- )  here float allot f!  ;                : fconstant  ( "name" -- )  ( F: f -- )  create  f,  does>  ;   : fvariable  ( "name" -- )  create  float allotfacos fasin fatan fcos fsin ftan )                            need calculator                                                 code facos  ( F: r1 -- r2 )                                       calculator  acos  end-calculator  jpnext  end-code            code fasin  ( F: r1 -- r2 )                                       calculator  asin  end-calculator  jpnext  end-code            code fatan  ( F: r1 -- r2 )                                       calculator  atan  end-calculator  jpnext  end-code            code fcos  ( F: r1 -- r2 )                                        calculator  cos  end-calculator  jpnext  end-code             code fsin  ( F: r1 -- r2 )                                        calculator  sin  end-calculator  jpnext  end-code             code ftan  ( F: r1 -- r2 )                                        calculator  tan  end-calculator  jpnext  end-code                                                                                                                                             ( (f. f. )                                                      need fdepth  need fdrop                                         code (f.  ( F: r -- )                                             C5 c,  CD c, 2DE3 ,  C1 c,                                      jpnext  end-code                                              : f.  ( F: r -- )                                                 fdepth >r  (f. space                                            fdepth r> = if  fdrop  thenfs dump-fs )                                                 need (fp@  need fp0  need f@  need f.                           need fdepth  need float  need float+  need .depth               : (.fs  ( -- )  (fp@ fp0 @ ?do  i f@ f.  float +loop  ;         : .fs   ( -- )  fdepth dup .depth 0> if  (.fs  then  ;          : (dump-fs  ( -- )                                                cr ." Bottom"                                                   (fp@ fp0 @ ?do                                                    i dup cr u. float bounds ?do  i c@ 4 .r  loop                 float +loop  cr ." Top" cr  ;                                 : dump-fs  ( -- )  fdepth dup .depth 0> if  (dump-fs  then  ;                                                                                                                                                                                                                                                                                                                                   ( fround floor ftrunc )                                         need calculator  need f0=  need f0<  need fdup  need fnegate    : fround  ( F: r1 -- r2 )  ;                                    : floor  ( F: r1 -- r2 )  ;                                     code ftrunc  ( F: r1 -- r2 )                                      calculator  truncate  end-calculator  jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( falign faligned )                                             need alias                                                      ' noop alias falign     ( -- )        immediate                 ' noop alias faligned   ( a -- fa )   immediatenumber )                                                      : number  ( ca len -- n | d )  number? 0= #-275 ?throwstandard-number-point? extended-number-point? )               need [if]                                                       [needed] classic-number-point? [if]                             : classic-number-point?  ( c -- f )                               dup [char] : = swap [char] , - 4 u< or  ;                     [then]                                                          [needed] extended-number-point? [if]                            : extended-number-point?  ( c -- f )                              dup [char] : = swap [char] + - 5 u< or  ;                     [then]                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( base# b# d# h# )                                              : base# ( -- ) ( "name" -- )                                      create c, immediate                                             does> c@                                                        base c@ >r  base !    \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw  ;   \ restore radix before error control     2 base# b#                                                     10 base# d#                                                     16 base# h#                                                                                                                                                                                                                                                                                                                                                                                     ( x# b# o# d# h# t# )                                           : x# ( -- ) ( "name" -- n | d )                                   does> c@              \ new radix                               base @ >r  base !     \ save and set radix                      parse-name            \ get string                              ['] evaluate catch    \ convert to number, set trap             r> base !  throw  ;   \ restore radix before error control    create b# ( "name" -- n | d )  2 c, x# immediate                create o# ( "name" -- n | d )  2 c, x# immediate                create d# ( "name" -- n | d ) 10 c, x# immediate                create h# ( "name" -- n | d ) 16 c, x# immediate                create t# ( "name" -- n | d ) 36 c, x# immediate                                                                                                                                                                                                                                                                                ( c# )                                                          : c#  ( "name" -- c )                                             parse-name drop c@                                              compiling? if  postpone literal  then  ; immediate                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( ud.r ud. )                                                    : ud.r  ( d n -- )  >r <# #s #> r> over - 0 max spaces type  ;  : ud.  ( d -- )  0 ud.r spacebin. dec. hex. )                                              [defined] base.                                                 ?\ : base.  ( -- )  does> c@ base @ >r base ! u. r> base !  ;   [unneeded] bin.  ?\ create bin.  ( n -- )   2 c, base.          [unneeded] hex.  ?\ create hex.  ( n -- )  16 c, base.          [unneeded] dec.  [defined] dec.  or                               ?\  create dec.  ( n -- )  10 c, basehex. 16hex. 32hex. <hex hex> )                               [defined] base'  ?\ variable base'                              [defined] (d.)                                                  ?\ : (d.)  ( d n -- ca len )  <# 0 do  #  loop  #>  ;           : <hex  ( -- )  base @ base' ! hex ; \ switch to hex            : hex>  ( -- )  base' @ base !     ; \ and back                 : (dhex.)  ( d n -- )  <hex (d.) hex> type space  ;             : 32hex.    ( d -- )  8 (dhex.)  ;                              : 16hex.     ( n -- )  s>d 4 (dhex.)  ;                         : 8hex.    ( b -- )  s>d 2 (dhex.)  ;                                                                                                                                                                                                                                                                                                                                                                                                                           ( binary 8bin. 16bin. 32bin. <bin bin> )                        [defined] base'  ?\ variable base'                              [defined] binary  ?\ : binary  ( -- )  2 base !  ;              [defined] (d.)                                                  ?\ : (d.)  ( d n -- ca len )  <# 0 do  #  loop  #>  ;           : <bin  ( -- )  base @ base' ! binary ; \ switch to binary      : bin>  ( -- )  base' @ base !        ; \ and back              : (dbin.)  ( d n -- )  <bin (d.) bin> type space  ;             : 32bin.    ( d -- )  32 (dbin.)  ;                             : 16bin.     ( n -- )  s>d 16 (dbin.)  ;                        : 8bin.    ( b -- )  s>d 8 (dbin.)  ;                                                                                                                                                                                                                                                                                                                                                           ( under+ )  \ ==operators==                                     code under+  ( n1|u1 x n2|u2 -- n3|u3 x )                         D9 c,           \ exx                                           D1 c,           \ pop de                                        C1 c,           \ pop bc                                        E1 c,           \ pop hl                                        19 c,           \ add hl,de                                     E5 c,           \ push hl                                       C5 c,           \ push bc                                       D9 c,           \ exx                                           jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                              ( +under )                                                      code +under  ( n1|u1 n2|u2 x -- n3|u3 x )                         D9 c,           \ exx                                           C1 c,           \ pop bc                                        D1 c,           \ pop de                                        E1 c,           \ pop hl                                        19 c,           \ add hl,de                                     E5 c,           \ push hl                                       C5 c,           \ push bc                                       D9 c,           \ exx                                           jpnext  end-code                                                                                                                                                                                                                                                                                                                                                                              ( cell/ )                                                       need 2/ need alias                                              ' 2/ alias cellwithin between )                                              [unneeded] within                                               ?\ : within  ( n1|u1 n2|u2 n3|u3 -- f )  over - >r - r> u<  ;   [unneeded] between ?exit                                        : between  ( n1|u1 n2|u2 n3|u3 -- f )  over - -rot - upolarity )                                                    code polarity  ( n -- -1 | 0 | 1 )                                D1 c, 78 02 + c,  B0 03 + c,  CA c, ' false ,                   CB c, 10 03 + c,  ED c, 62 c,                                   78 05 + c,  F6 c, 01 c,  68 07 + c,  jppushhl                   end-codeu<= u>= <= >= 0>= 0<= )                                       [unneeded] u<=  ?\ : u<=  ( u1 u2 -- f )  u> 0=  ;  exit        [unneeded] u>=  ?\ : u>=  ( u1 u2 -- f )  u< 0=  ;  exit        [unneeded] <=   ?\ : <=   ( n1 n2 -- f )  > 0=   ;  exit        [unneeded] >=   ?\ : >=   ( n1 n2 -- f )  < 0=   ;  exit        [unneeded] 0>=  ?\ : 0>=  ( n1 n2 -- f )  0< 0=  ;  exit        [unneeded] 0<=  ?\ : 0<=  ( n1 n2 -- flshift )                                                      need z80-asm                                                    code lshift  ( x1 u -- x2 )                                       exx                                                             bc pop  \ C = loop counter                                      c b ld                                                          hl pop  \ hi 8 bits ignored!                                    b inc  ahead 0 unresolved !                                     begin  hl addp  0 unresolved @ >relresolve  step                hl push                                                         exx                                                             jpnext                                                          end-code                                                                                                                                                                                                                                                      ( lshift )                                                      code lshift  ( x1 u -- x2 )                                       D1 c,           \ pop de                                        E1 c,           \ pop hl                                        1C c,           \ inc e                                         here            \ begin:                                        1D c,           \ dec e                                         CA c, pushhl ,  \ jp z,push_hl                                  29 c,           \ add hl,hl                                     C3 c, ,         \ jp begin                                      end-code                                                                                                                                                                                                                                                                                                                                                                                      ( rshift )                                                      need z80-asm                                                    code rshift  ( x1 u -- x2 )                                       exx                                                             bc pop  \ C = loop counter                                      c b ld                                                          hl pop  \ hi 8 bits ignored!                                    b inc  ahead 0 unresolved !                                     begin  h srl  l rr  0 unresolved @ >relresolve  step            hl push                                                         exx                                                             jpnext                                                          end-code                                                                                                                                                                                                                                                      ( rshift )                                                      code rshift  ( x1 u -- x2 )                                       D1 c,           \ pop de                                        E1 c,           \ pop hl                                        1C c,           \ inc e                                         here            \ begin:                                        1D c,           \ dec e                                         CA c, pushhl ,  \ jp z,push_hl                                  CB c, 3C c,     \ srl h                                         CB c, 1D c,     \ rr l                                          C3 c, ,         \ jp begin                                      end-code                                                                                                                                                                                                                                                                                                                      ( bits )                                                        need z80-asm                                                    code bits  ( ca len -- u )                                        0 hl ldp#  \ init bit count                                     exx  \ save IP and count                                        de pop  hl pop  \ memory zone                                   begin                                                             d a ld  e or  nz if                                               08 b ld#  \ bits per byte                                       begin  m rrc  cy if  exx hl incp exx  then  step                hl incp  de decp  \ next byte                               2swap again then                                                exx jppushhl end-code                                                                                                                                                                                                                                         ( 2/ )                                                          code 2/  ( x1 -- x2 )                                             E1 c,           \ pop hl                                        CB c, 2C c,     \ sra h                                         CB c, 1D c,     \ rr l                                          jppushhl        \ jp pushhl                                     end-code                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( sqrt )                                                        need d2*  need 2/                                               [defined] cell-bits ?\ 16 constant cell-bits                    : (sqrt)  ( radicand -- remainder root )                          0 0                           ( radicand remainder root )       [ cell-bits 2/ ] literal 0 do                                     >r d2* d2* r>               \ shift remainder left 2 bits       2*                          \ shift root left 1 bit             2dup 2* u> if               \ check for next bit of root          >r r@ 2* - 1- r>          \ reduce remainder                    1+                        \ add a bit to root                 then                                                          loop  cr .s rot drop  ;                                       : sqrt  ( radicand -- root )  (sqrt) nip  ;                                                                                                                                                     ( sqrt )                                                        need 2/                                                         : sqrt  ( n1 -- n2 )                                              dup 0< -24 ?throw  \ invalid numeric argument                   dup                                                             if  dup 2/  20 0                                                    do      2dup / + 2/                                             loop    swap drop                                           thensm/rem )                                                      : sm/rem  ( d1 n1 -- n2 n3 )                                      2dup xor >r  \  sign of quotient                                over >r      \  sign of remainder                               abs >r dabs r> um/mod                                           swap r> ?negate                                                 swap r> ?negaterem /- -rem */-rem */- )                                    : /-rem  ( n1 n2 -- n3 n4 )  >r  s>d  r> sm/rem  ;              : /-  (  n1 n2 -- n3 )  /-rem nip  ;                            : -rem  ( n1 n2 -- n3 )  /-rem drop  ;                          : */-rem  (  n1 n2 n3 -- n4 n5 )  >r  m*  r> sm/rem  ;          : */-  ( n1 n2 n3 -- n4 )  */-rem nipfm/mod )                                                      : fm/mod  ( d1 n1 -- n2 n3 )                                      dup >r                \ save divisor                            sm/rem                                                          over 0<> over 0< and  \ quotient<0 and remainder<>0?            if                                                                swap r> +           \ add divisor to remainder                  swap 1-             \ decrement quotient                      else r> drop then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( /_mod /_ _mod */_mod */_ )                                    need fm/mod                                                     : /_mod  ( n1 n2 -- n3 n4 )  >r s>d r> fm/mod  ;                : /_  ( n1 n2 -- n3 )  /_mod nip  ;                             : _mod  ( n1 n2 -- n3 )  /_mod drop  ;                          : */_mod  ( n1 n2 n3 -- n4 n5 )  >r m* r> fm/mod  ;             : */_  ( n1 n2 n3 -- n4 )   */_mod nipany? )                                                        need roll                                                       variable (any?)                                                 : any?  ( x0 x1..xn n -- f )                                      dup 1+ roll (any?) !                                            0 swap 0 do  swap (any?) @ = or  loopu% )                                                        : %  ( n1 n2 -- n3 )  100 swap */  ;                            : u%  ( u1 u2 -- u3 )  >r 100 um* r> um/mod nipud* )                                                         : ud*  ( ud1 u2 -- ud3 )  dup >r um* drop  swap r> um* rotd* )                                                          : d* ( d|ud1 d|ud2 -- d|ud3 )                                     >r swap >r 2dup um* rot r> * + rot rdu/mod )                                                      need tum*  need t+  need t-  need tum/  need d2*  need lshift   : normalize-divisor  ( d1 -- d1' shift )                          0 >r begin  dup 0< while  d2*  r> 1+ >r  repeat  r>  ;        : du/mod  ( ud1 ud2 -- ud3 ud4 )                                  ?dup 0= if                                                        >r  0 r@ um/mod  r> swap >r  um/mod  0 swap r>  exit          then                                                            normalize-divisor dup >r rot rot 2>r                            1 swap lshift tum*                                              dup  r@ = if   -1  else  2dup  r@ um/mod nip  then              2r@  rot dup >r  tum*  t-                                       dup 0< if  r> 1-  2r@  rot >r  0 t+                               dup 0< if  r> 1-  2r@  rot >r  0 t+  then                     then                                                            r> 2r> 2drop  1 r>  rot >r  lshift tum/  r> 0  ;              ( d0= d0< d< du< )                                              [unneeded] d0= ?\ : d0=  ( d -- f )  or 0=  ;  exit             [unneeded] d0< ?\ : d0<  ( d -- f )  nip 0<  ; exit             need [if]                                                       [needed] d< [if]                                                need 2nip                                                       : d<  ( d1 d2 -- f )                                              rot 2dup = if  2drop u< exit  then  2nip >  ;  exit           [then]                                                          [needed] du< [if]                                               : du<  ( ud1 ud2 -- f )                                           rot swap 2dup                                                   u<  if  2drop 2drop [ true ] literal exit  then                 -   if  2drop [ false ] literal exit  then  u<  ;  exit       [then]                                                                                                                          ( dmin dmax )                                                   need [if]                                                       [needed] dmin [if]                                              : dmin  ( d1 d2 -- d1 | d2 )                                      2over 2over d< 0= if  2swap  then  2drop  ;  exit  [then]     [needed] dmax [if]                                              : dmax  ( d1 d2 -- d1 | d2 )                                      2over 2over d< if  2swap  then  2drop  ;  [thend= d<> )                                                      : d<>  ( d1 d2 -- f )  rot <> if  2drop true exit  then  <>  ;  : d=  ( d1 d2 -- f )  dd- )                                                          need z80-asm                                                    code d-  ( d1|ud1 d2|ud2 -- d3|ud3 )                              de pop          \ DE=d2hi                                       exx                                                             de pop          \ DE'=d2lo                                      exx                                                             hl pop          \ HL=d1hi,DE=d2hi                               exx                                                             hl pop          \ HL'=d1lo                                      de subp                                                         hl push         \ 2OS=d1lo-d2lo                                 exx                                                             de sbcp         \ HL=d1hi-d2hi-cy                               jppushhl                                                        end-code                                                      ( d2* d2/ )                                                     need [if]                                                       [needed] d2* [if]  code d2*  ( xd1 -- xd2 )                       D1 c, E1 c,                                                     29 c,  CB c, 13 c,  CB c, 12 c,                                 EB c, C3 c, pushhlde ,                                          end-code  [then]                                              [needed] d2/ [if]  code d2/  ( xd1 -- xd2 )                       E1 c, D1 c,                                                     CB c, 2C c,  CB c, 1C c,  CB c, 1D c,                           CB c, 1A c,  CB c, 1B c,                                        EB c, C3 c, pushhlde ,                                          end-code  [then]                                                                                                                                                                                                                                              ( d2* d2/ )                                                     need [if]  need z80-asm                                         [needed] d2* [if]  code d2*  ( xd1 -- xd2 )                       de pop  hl pop                                                  hl addp  e rl  d rl                                             exde  pushhlde jp           \ smaller but slower                end-code  [then]                                              [needed] d2/ [if]  code d2/  ( xd1 -- xd2 )                       hl pop  de pop                                                  h sra  l rr  d rr  e rr                                         pushhlde jp                 \ smaller but slower                end-code  [then]                                                                                                                                                                                                                                                                                                              ( dxor dor dand )                                               [unneeded] dxor                                                 ?\ : dxor  ( d1 d2 -- d3 )  rot xor -rot xor swap  ;            [unneeded] dor                                                  ?\ : dor  ( d1 d2 -- d3 )  rot or -rot or swap  ;               [unneeded] dand                                                 ?\ : dand  ( d1 d2 -- d3 )  rot and -rot and swapm* )                                                          need d*                                                         : m*  ( n1 n2 -- d )                                              >r s>d r> s>d dm+ )                                                          need z80-asm                                                    code m+  ( d1|ud1 n -- d2|ud2 )                                   exx     \ save Forth IP                                         bc pop  \ n                                                     de pop  \ d1 hi cell                                            hl pop  \ d1 lo cell                                            bc addp  hl push                                                cy if  de inc  then  de push                                    exx      \ restore Forth IP                                     jpnext                                                          end-code                                                      exit                                                            : m+  ( d1|ud1 n -- d2|ud2 )  s>d d+  ;                                                                                                                                                         ( m*/ )                                                         : m*/  ( d1 n1 +n2 -- d2 )                                        >r s>d >r abs -rot s>d r> xor r> swap >r >r dabs                rot tuck um* 2swap um* swap                                     >r 0 d+ r> -rot i um/mod -rot r> um/mod -rot r>                 if     if     1 0 d+                                                   then                                                            dnegate                                                  else   drop                                                     then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( m*/ )                                                         need mt*  need tnegate  need ut/                                : m*/  ( d1 n1 +n2 -- d2 )                                          >r mt* dup 0< if    tnegate r> ut/ dnegate                                    else  r> ut/  thendsqrt )                                                       need q2*  need d2*  need d<  need m+  need d- need 2rot         need 2nip  [defined] cell-bits ?\ 16 constant cell-bits         : (dsqrt)  ( radicand . -- remainder . root . )                   0. 0.             ( radicand . remainder . root . )             cell-bits 0 do    ( radicand . remainder . root . )               cr .s  key drop  \ XXX INFORMER                                 2>r q2* q2* 2r>  d2*                                            2over 2over d2* 2swap                                             cr .s ." d< ?"  \ XXX INFORMER                                  d< if                                                           cr .s ." d<"  \ XXX INFORMER                                    2dup 2>r d2* d- -1 m+ 2r>  1 m+                               then                                                          loop  cr .s 2rot 2drop  ;                                     : dsqrt  ( radicand . -- root . )  (dsqrt) 2nip  ;              ( d10* )                                                        : d10*  ( ud -- ud*10 )  d2* 2dup d2* d2* d+  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( tum* tum/ t+ t- )                                             need d-                                                         : +carry  ( n1 n2 -- n1+n2 carry )  0 tuck d+  ;                : -borrow  ( n1 n2 -- n1-n2 borrow )  0 tuck d-  ;              : tum*  ( d n -- t )  2>r  r@ um*  0 2r>  um* d+  ;             : tum/  ( t n -- d )  dup >r um/mod r> swap >r um/mod nip r>  ; : t+  ( t1 t2 -- t3 )                                             >r rot >r  >r swap >r +carry  0 r> r> +carry d+ r> r> + +  ;  : t-  ( t1 t2 -- t3 )                                             >r rot >r  >r swap >r -borrow                                   s>d r> r> -borrow d+ r> r> - +  ;                                                                                                                                                                                                                                                                                                                                                             ( tnegate )                                                     : tnegate  ( t1 -- t2 )                                           invert >r                                                       invert >r                                                       invert 0 -1 -1 d+ s>d r> 0 d+                                   rut* )                                                         : ut*   ( ud u -- t )                                             swap >r dup >r                                                  um* 0 r> r> um* dmt* )                                                         need ut*  need tnegate                                          : mt*   ( d n -- t )                                              dup 0<                                                          if   abs over 0< if   >r dabs r> ut*  else ut* tnegate then     else over 0< if  >r dabs r> ut* tnegate  else  ut*  then        thenut/ )                                                         : ut/   ( ut n -- d )                                             dup >r um/mod -rot r> um/mod nip swap  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( q2* )                                                         need d2*                                                        : q2*  ( n . . . -- 2n . . . )                                    d2* >r >r                                                       dup 0< if     d2* r> 1+ r>                                             else   d2* r> r>                                                then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( q+ q- q0< q0= qu< qnegate qabs )                              code q+  ( nq1 nq2 -- nq3 )                                     end-code                                                        code q-  ( nq1 nq2 -- nq3 )                                     end-code                                                        : q0<  ( nq -- f )  0< push drop 2drop pop  ;                   : q0=  ( nq -- f )  or or or 0=  ;                              : qu<  ( uq uq -- f )  q- q0<  ;                                : qnegate  ( nq -- nq' )  0 0 0 0 4swap q-  ;                   : qabs  ( nq -- uq )  dup 0< if qnegate then  ;                                                                                                                                                                                                                                                                                                                                                                                                                 ( udm* dm* )                                                    need qnegate                                                    code udm*  ( ud ud - quad )                                     end-code                                                        : dm* ( nd nd - nq )                                              2>r dup 0< dup >r if  dnegate  then                             r> 2r> dup 0< dup >r if  dnegate  then                          rot >r udm* 2r> xor 0< if  qnegate  thena! a@ )  \ ==addressregister==                                variable a                                                      code a!  ( a -- )                                                 E1 c,  22 c, a ,  jpnext                                        end-code                                                      code a@  ( -- a )                                                 2A c, a ,  C3 c, pushhl ,                                       end-codea @a )                                                       need a!                                                         code !a  ( u -- )                                                 D1 c,  2A c, a ,  70 03 + c,  23 c,  70 04 + c,  jpnext         end-code                                                      code @a  ( -- u )                                                 2A c, a ,  5E c,  23 c,  66 c,  68 03 + c,  C3 c, pushhl ,      end-codec!a c@a )                                                     need a!                                                         code c!a  ( c -- )                                                D1 c,                 \ pop de                                  2A c, a ,             \ ld hl,(a)                               70 03 + c,            \ ld (hl),e                               jpnext                \ jp (ix)                                 end-code                                                      code c@a  ( -- c )                                                2A c, a ,             \ ld hl,(a)                               6E c,                 \ ld l,(hl)                               26 c, 00 c,           \ ld h,0                                  C3 c, pushhl ,        \ jp pushhl                               end-code                                                                                                                                                                                      ( !a+ @a+ )                                                     need a!                                                         code !a+  ( u -- )                                                D1 c,                 \ pop de                                  2A c, a ,             \ ld hl,(a)                               70 03 + c,  23 c,     \ ld (hl),e  inc hl                       70 04 + c,  23 c,     \ ld (hl),d  inc hl                       22 c, a ,  jpnext     \ ld (a),hl  jp (ix)                      end-code                                                      code @a+  ( -- u )      \ Fetch cell at `a` with increment.       2A c, a ,             \ ld hl,(a)                               5E c,  23 c,          \ ld e,(hl)  inc hl                       56 c,  23 c,          \ ld d,(hl)  inc hl                       22 c, a ,             \ ld (a),hl                               D5 c,  jpnext         \ push de  jp (ix)                        end-code                                                      ( c!a+ c@a+ )                                                   need a!                                                         code c!a+  ( c -- )                                               D1 c,                 \ pop de                                  2A c, a ,             \ ld hl,(a)                               70 03 + c,  23 c,     \ ld (hl),e  inc hl                       22 c, a ,  jpnext     \ ld (a),hl  jp (ix)                      end-code                                                      code c@a+  ( -- c )                                               2A c, a ,             \ ld hl,(a)                               5E c,  23 c,          \ ld e,(hl)  inc hl                       06 c, 00 c,           \ ld d,0                                  22 c, a ,             \ ld (a),hl                               D5 c,  jpnext         \ push de  jp (ix)                        end-code                                                                                                                      ( heap )                                                        also forth definitions                                          need wid-of                                                     vocabulary heap-voc  wid-of heap-voc constant heap-wordlist     also heap-voc definitions                                       0 1 2 um/mod nip 1- constant maxpos                             256 cells constant heapsize                                     4 cells 1- constant hysteresis                                  3 cells constant headsize                                       : adjustsize ( n -- n)  headsize +  hysteresis or  1+  ;        0 adjustsize constant overhead                                  create sentinel  here cell+ ,  maxpos ,  0 ,  0 ,               create heap  heapsize allot                                     variable nextnode  -->                                                                                                                                                                          ( heap )                                                        : >size ( addr1 -- addr2)  cell+  ;                             : >prev ( addr1 -- addr2)  [ 2 cells ] literal +  ;             : init-heap (  )                                                  heap dup nextnode !                                             dup dup !                                                       dup heapsize  over >size !                                      >prev !  ;                                                    init-heap                                                       : attach ( addr)                                                  >prev @  dup sentinel rot !  sentinel >prev !  ;              : search  ( addr size -- addr|0)                                  >r begin 2@ swap R@ < invert until                              r> drop  >prev @  ;                                           : detach ( addr)  dup >prev @ !  ;                              -->                                                             ( heap )                                                        : findspace ( size -- addr|0)  nextnode @                                  dup      attach                                                 dup rot  search                                                 swap     detach  ;                                   : fits ( size addr -- flag)  >size @ swap -  overhead  <  ;     : togglesize ( addr)  >size dup @  negate swap !  ;             : next! ( addr)  nextnode !  ;                                  : sizes! ( size addr -- addr)                                     2dup + >r  >size 2dup @ swap -                                  R@ >size !   swap negate swap !  r>  ;                        : links! ( addr1 addr2)                                           2dup swap @  2dup  swap !  >prev !                              2dup >prev !   swap !  ;                                      : newnode ( size addr)  tuck sizes!  links!  ;                  -->                                                             ( heap )                                                        : makenode ( size addr)                                           2dup fits if  togglesize drop  else  newnode  then  ;         forth-wordlist set-current                                      : allocate ( u -- addr ior)                                       dup 0< if  -59  \ `allocate` error code                              else  adjustsize                                                dup findspace                                                   dup if  dup next!                                                 tuck makenode                                                   headsize +  0                                                   else  drop -59  \ `allocate` error code                         then                                                          then  ;                                                  heap-wordlist set-current  -->                                                                                                  ( heap )                                                        : mergesizes ( addr1 addr2)                                       >size @ swap >size +!  ;                                      : mergelinks ( addr1 addr2)                                       @ 2dup swap !  >prev !  ;                                     : jiggle (  )                                                     nextnode @ @  >prev @  next!  ;                               : merge ( addr)                                                   dup @ 2dup mergesizes                                                mergelinks  jiggle  ;                                    : ?merge ( addr1 addr2)                                           >size @ 0> if                                                     dup dup @                                                       u< if  dup merge  then                                        then  drop  ;  -->                                                                                                            ( heap )                                                        : ?mergenext ( addr)  dup @ ?merge  ;                           : ?mergeprev ( addr)  >prev @ dup ?merge  ;                     forth-wordlist set-current                                      : free ( addr -- ior)                                             headsize -  dup togglesize  dup ?mergenext  ?mergeprev  0  ;  heap-wordlist set-current                                       variable stash                                                  : savelink ( addr)  @ stash !  ;                                : restorelink ( addr)  stash @  swap !  ;                       : fixprev ( addr)  dup >prev @ !  ;                             : fixnext ( addr)  dup @ >prev !  ;                             : fixlinks ( addr)  dup fixprev  dup fixnext  @ fixnext  ;      -->                                                                                                                                                                                             ( heap )                                                        : fixsize ( addr)                                                 dup >size @ 0>                                                  if  dup @  2dup <                                                   if    over - swap >size !  else  2drop  then                else  drop  then  ;                                           : fixsizes ( addr)  dup fixsize  >prev @ fixsize  ;             : repair ( addr)                                                  dup restorelink                                                 dup fixlinks  dup fixsizes                                      togglesize  ;                                                 : toobig? ( addr size -- flag)                                    swap  >size @  >  ;                                           -->                                                                                                                                                                                             ( heap )                                                        : copynode ( addr1 addr2)                                         over >size @  headsize -                                        rot  headsize + rot rot move  ;                               : enlarge ( addr1 size -- addr2 ior)                              over  ?mergeprev                                                allocate dup >r                                                 if  swap repair  else  tuck copynode  then  r>  ;             : adjust ( addr1 size1 -- addr2 size2)                            adjustsize >r                                                   headsize -                                                      dup savelink                                                    dup togglesize                                                  dup ?mergenext r>  ;                                          -->                                                                                                                             ( heap )                                                        forth-wordlist set-current                                      : resize ( addr1 u -- addr2 ior)                                  dup 0<  if  drop -61  \ `resize` error code                             else  adjust  2dup toobig?                                            if enlarge                                                      else  over makenode headsize +  0  then                   thencreate-heap )                                                 need value  need set-bit  need reset-bit  need bit?             need reserve  need alias                                        0 value heap  ( -- a )                                          8 constant address-unit-bits                                    16 value /chunk \ bytes per chunk                               : groups ( n1 n2 -- n3 )  /mod swap 0<> abs +  ;                : bytes>chunks ( n1 -- n2 )  /chunk groups  ;                   : chunks>bytes ( n1 -- n2 )  address-unit-bits groups  ;        ' heap alias heap-chunks  ( -- a )                              : heap-unused-chunks  ( -- a )  heap-chunks cell+  ;            : heap-map  ( -- a )  heap-unused-chunks cell+  ;               : /heap-map  ( -- n )  heap-chunks @ chunks>bytes  ;            : heap-data  ( -- a ) heap-map /heap-map +  ;  -->                                                                                                                                              ( create-heap )                                                 : (mapbit)  ( n1 -- n2 ca )                                       address-unit-bits /mod heap-map +  ;                          : mapbit ( n1 -- a2 b n2 )  (mapbit) dup @ rot  ;               : used-chunk? ( n -- f )  (mapbit) @ swap bit?  ;               : use-chunk ( n -- )  mapbit set-bit swap !  ;                  : free-chunk ( n -- )  mapbit reset-bit swap !  ;               : allocated>chunks  ( a -- n )  cell- @  ;                      : allocated>index  ( a -- n )  heap-data - /chunk /  ;          : allocated>map  ( a -- n1 n2 )                                   dup allocated>index swap allocated>chunks  ;                  -->                                                                                                                                                                                                                                                                                                                             ( create-heap )                                                 : locate-chunks  ( n1 -- n1 n2 0 | ior )                          0 tuck  ( n2 n1 count )                                         heap-chunks @ 0 do  ( n2 n1 count )                               i used-chunk? if  drop >r i 1+ r> 0  else  1+  then             2dup = if  drop swap 0 unloop exit  then                      loop  2drop drop -59  ;                                       : chunk>address  ( n1 -- a )  /chunk * heap-data +  ;           : (allocate)  ( n1 n2 -- a )                                      dup chunk>address >r                                            swap bounds do  i use-chunk  loop                               r>  ;                                                         -->                                                                                                                                                                                                                                                             ( create-heap )                                                 : create-heap ( n "name" -- )                                     create  bytes>chunks dup ,  0 ,                                         dup chunks>bytes reserve drop                                   /chunk * allot  ;                                     : allocate  ( n -- a ior )                                        bytes>chunks locate-chunks ?dup ?exit  (allocate) 0  ;        : free  ( a -- ior )                                              allocated>map dup >r                                            bounds do  i free-chunk  loop                                   r> heap-unused-chunks +! 0  ;                                 : empty-heap  ( -- )  heap-chunks @ 0 do  i free-chunk  loop  ; : .heap ( -- )                                                    heap-chunks @ 0 do                                                i used-chunk? if  [char] x  else  [char] -  then  emit        loop  ;                                                       ( !s c!s )                                                      : !s  ( x a -- )  system-bank ! default-bank  ;                 : c!s  ( c ca -- )  system-bank c! default-bankcode-bank )                                                   need save-here  need call                                       variable cp  bank-start cp !  \ code pointer                    : code-here   ( -- a )  cp @  ;                                 : code-there  ( a -- )  cp !  ;                                 : code-allot  ( n -- )  cp +!  ;                                variable code-bank#  3 code-bank# !                             : code-bank  ( -- )  code-bank# @ bank  ;                       : code-bank{  ( -- )  save-here code-here there code-bank  ;    : }code-bank  ( -- )  default-bank restore-here  ;              : ?bank  ( -- )  bank-start here u< #-276 ?throw  ;             : code-bank-caller  ( i*x a "name" -- j*x )                       create ?bank ,                                                  does>  ( -- )  ( pfa ) @ code-bank call default-bank  ;       ?bank                                                                                                                           ( exchange )  \  ==memory==                                     [unneeded] exchange                                             ?\ : exchange  ( n1 a -- n2 )  dup @ rot rotcode -!  ( n|u a -- )                                             E1 c,  D1 c,                                                    7E c,  90 03 + c,  70 07 + c,  23 c,                            7E c,  98 02 + c,  70 07 + c,                                   jpnext  end-codec+! c@+ )                                                     need z80-asm                                                    [unneeded] c+! dup                                              ?\  code c+!  ( c ca -- )                                       ?\    hl pop  de pop  e a ld  m a add  a m ld  jpnext  end-code [unneeded] c@+ dup                                              ?\ code c@+  ( ca - ca+1 c )                                    ?\  hl pop  m a ld  hl incp  hl push  pusha jp  end-codeneed z80-asm  need [if]                                         [needed] 1+! [if]                                               code 1+!  ( a -- )                                                hl pop  m e ld  hl incp  m d ld  de incp                        d m ld  hl decp  e m ld  jpnext                               end-code                                                        [then]                                                          [needed] 1-! [if]                                               code 1-!  ( a -- )                                                hl pop  m e ld  hl incp  m d ld  de decp                        d m ld  hl decp  e m ld  jpnext                               end-code                                                        [then]                                                                                                                                                                                          ( c1+! c1-! )                                                   need z80-asm                                                    [unneeded] c1+!                                                 ?\  code c1+!  ( ca -- )  hl pop  m inc  jpnext  end-code       [unneeded] c1-!                                                 ?\  code c1-!  ( ca -- )  hl pop  m dec  jpnext  end-codec@+ c!+ -c@ -c! )                                             need 1+!  need 1-!                                              : c@+  ( ca -- c )  dup @ c@ swap 1+!  ;                        : c!+  ( c ca -- )  tuck @ c! 1+!  ;                            : -c@  ( ca -- c )  dup 1-! @ c@  ;                             : -c!  ( c ca -- )  dup 1-! @ cc@+ c@- c!+ c!- )                                   : @+ ( a inc -- value a+inc )  + dup @ swap  ;                  : !+  ( value a inc -- a+inc )  + tuckbit? set-bit reset-bit )                                      need lshift                                                     : bit>mask  ( n -- b )  1 swap lshift  ;                        : bit? ( b n -- f )  bit>mask and 0<> ;                         : set-bit ( b1 n -- b2 )  bit>mask or ;                         : reset-bit ( b1 n -- b2 )  bit>mask invert andc@test-bits c!toggle-bits )                                   need z80-asm  need [if]                                         [needed] c@test-bits [if]                                       code c@test-bits  ( b1 ca -- b2 )                                 hl pop  de pop  e a ld  m and  pusha jp                         end-code  exit  [then]                                        [needed] c!toggle-bits [if]                                     code c!toggle-bits  ( b ca -- )                                   hl pop  de pop  m a ld  e xor  a m ld  jpnext                   end-code  exit  [then]                                                                                                                                                                                                                                                                                                                                                                                                                                        ( reserve alloted )                                             : reserve  ( n -- a )  here tuck over erase allot  ;            : allotted  ( n -- a )  here swap allot ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ( @p )                                                          code @p  ( a -- b )                                               E1 c,           \ pop hl                                        C5 c,           \ push bc                                       48 05 + c,      \ ld c,l                                        40 04 + c,      \ ld b,h                                        ED c, 68 c,     \ in l,(c)                                      C1 c,           \ pop bc                                        26 c, 00 c,     \ ld h,0x00                                     jppushhl        \ jp pushhl                                     end-code                                                                                                                                                                                                                                                                                                                                                                                      ( !p )                                                          code !p  ( b a -- )                                               E1 c,           \ pop hl                                        D1 c,           \ pop de ; char in e                            C5 c,           \ push bc                                       48 05 + c,      \ ld c,l                                        40 04 + c,      \ ld b,h                                        ED c, 59 c,     \ out (c),e                                     C1 c,           \ pop bc                                        jpnext          \ jp (ix)                                       end-code                                                                                                                                                                                                                                                                                                                                                                                      ( begin-module: begin-module public private end-module )        need get-order  need wordlist                                   get-order get-current                                           wordlist dup set-current  >order                                variable current-wid  variable module-wid                       : (begin-module)  ( -- wid )                                      get-current current-wid !                                       wordlist dup module-wid ! dup >order  ;                       set-current                                                     : public  ( -- )  current-wid @ set-current  ;                  : private  ( -- )  module-wid @ set-current  ;                  : begin-module:  ( "name" -- )                                    (begin-module) constant private  ;                            : begin-module  ( -- )  (begin-module) drop private  ;          : end-module  ( -- )  public previous  ;                        set-order                                                       ( transient[ )                                                  need >>link                                                     variable old-dp                                                 variable old-np                                                 variable old-latest                                             variable old-voc-link                                           : transient[  ( u -- )                                            here        old-dp !                                            np@         old-np !                                            latest      old-latest !                                        voc-link @  old-voc-link !                                      0 swap - there  ;                                             : ]transient  ( -- )  old-dp @ there  old-np @ np !  ;          : -transient  ( -- )                                              old-voc-link @ voc-link !                                       old-latest @ old-np @ >>link !s  ;                            ( module )                                                      need alias  need >>link                                         ' latest alias internal  ( -- nt )                              ' np@ alias external  ( -- xtp )                                : module  ( nt xtp -- )  >>link !sprivatize )                                                   need name<name  need abort"                                     variable private-start  variable private-stop                   : private{  ( -- )                                                latest private-start !  private-stop off  ;                   : }private  ( -- )                                                private-stop @ abort" Extra }private"                           latest private-stop !  ;                                      : privatize  ( -- )                                               private-start @ 0= abort" Missing private{"                     private-stop @ dup 0= abort" Missing }private"                  begin   dup private-start @ u>                                  while   dup hide name<name                                      repeat  drop  private-start off  private-stop off  ;                                                                                                                                          ( jiffy! jiffy@ -jiffy )                                        need !dosvar  need @dosvar                                      : jiffy!  ( a -- )  16 !dosvar  ;                               : jiffy@  ( -- a )  16 @dosvar  ;                               : -jiffy  ( -- )  8335 jiffyparse-line )                                                  : parse-line  ( "ccc<eol>" -- ca len )                            source span @ min c/l min  >in @ span @ min /string             dup >in +! save-stringevaluate )                                                    : execute-parsing  ( ca len xt -- )                               >in @ >r >in off                                                source >r >r ;                                                : evaluate  ( ca len -- )  ['] interpret execute-parsingparse-char )                                                  : parse-char  ( "c"  -- c )  stream drop c@ 1 parsedword )                                                        : word  ( c "<chars>ccc<char>" -- ca )                            dup  stream                 ( c c ca len )                      dup >r   rot skip           ( c ca' len' )                      over >r  rot scan           ( ca" len" )                        dup if  char-  then         \ skip trailing delimiter           r> r> rot -   >in +!        \ update `>in`                      tuck -                      ( ca' len )                         here place  here            ( ca )                              bl over count + c!  ;       \ append trailing blank                                                                                                                                                                                                                                                                                                                                                                                                           ( defined? )                                                    : defined?  ( ca len -- wf )  undefinedsave-input restore-input )                                    : save-input ( -- xn ... x1 n )                                   source-id 0>                                                    if tib #tib @ 2dup c/l 2 + allocate throw dup >r swap cmove        r> to tib  >in @                                                source-id file-position throw                                   5                                                            else blk @ >in @ 2 thensave-input restore-input )                                    : restore-input ( xn ... x1 n -- f )                              source-id 0>                                                    if dup 5 <> if 0 ?do drop loop -1 exit then                        drop source-id reposition-file ?dup                             if >r 2drop drop r> exit then                                   >in ! #tib ! to tib false                                    else dup 2 <> if 0 ?do drop loop -1 exit then                      drop >in ! blk ! false                                       then                                                            ;                                                                                                                                                                                                                                                                                                                                                                                             ( tabulate tab-stop )                                           need column                                                     variable tab-stop  8 tab-stop !                                 : tabulate  ( -- )  column 1+ tab-stop @ tuck mod - spacescr' 'tab' 'bs' crs tab tabs backspace backspaces )            6 constant 'tab'                                                8 constant 'bs'                                                13 constant 'cr'                                                : tab          ( -- )  'tab' emit  ;                            : backspace    ( -- )  'bs'  emit  ;                            : crs           ( n -- )  'cr'  emits  ;                        : tabs          ( n -- )  'tab' emits  ;                        : backspaces    ( n -- )  'bs'  emits  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( column last-column row last-row at-x at-y )                   : column  ( -- col )  xy drop  ;                                : last-column  ( -- row  )  column 1-  ;                        : row  ( -- row )  xy nip  ;                                    : last-row  ( -- row  )  row 1-  ;                              : at-x  ( col -- )  row at-xy  ;                                : at-y  ( row -- )  column swap at-xyprint )                                                       need last-row  need /name                                       variable #printed   \ Printed chars in the current line.        variable #indented   \ Indented chars in the current line.      : printed+  ( u -- )  #printed +!  ;                            : indented+  ( u -- )  #indented +!  ;                          : (.word) ( ca len -- )  dup printed+ type  ;                   : .char  ( c -- )  emit 1 printed+  ;                           : not-at-home?  ( -- f )  xy +  ;                               : no-printed  ( -- )  #printed off #indented off  ;             : print-home  ( -- )  home no-printed  ;                        : print-page  ( -- )  page print-home  ;                        -->                                                                                                                                                                                                                                                             ( print )                                                       : print-start-of-line  ( -- )                                     #printed @ trm+move-cursor-left no-printed  ;                 : at-last-start-of-line?  ( -- wf )                               xy last-row = swap 0= and  ;                                  : not-at-start-of-line?  ( -- wf )  column 0<>  ;               : print-cr?  ( -- wf )                                            not-at-home? not-at-start-of-line? and                          ;                                                             defer (print-cr) ' (print-cr) ' cr defer!                       : print-cr print-cr? ?? (print-cr) no-printed ;                 variable print-width                                            -->                                                                                                                                                                                                                                                             ( print )                                                       : previous-word?  ( -- wf )  #printed @ #indented @ >  ;        : ?space  ( -- ) previous-word? if  bl .char  then  ;           : current-print-width  ( -- u )                                   print-width @ ?dup 0= ?? cols  ;                              : too-long?  ( u -- wf )                                          1+ #printed @ + current-print-width >  ;                      : .word  ( ca len -- )                                            dup too-long? if  print-cr  else  ?space  then  (.word)  ;    -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( print )                                                       : (print-indentation)  ( u -- )                                   dup trm+move-cursor-right dup indented+ printed+  ;           : print-indentation  ( u -- )  ?dup ?? (print-indentation)  ;   : >word  ( ca1 len1 ca2 len2 -- ca2 len2 ca1 len4 )               tuck 2>r -  2r> 2swap  ;                                      : first-word  ( ca1 len1 -- ca2 len2 ca3 len3 )  /name >word  ; : (print)  ( ca1 len1 -- ca2 len2 )  first-word .wordprint )                                                       : print  ( ca len --)                                             begin  dup   while  (print)  repeat  2droprnd random )                                                  2variable rnd-seed  $0111 rnd-seed !                            : rnd  ( -- u )                                                   rnd-seed 2@ $62DC um* rot 0 d+ over rnd-seed 2!  ;            : random  ( n -- 0..n-1 )  rnd um* niprandom-range )                                                need random                                                     : random-range ( n1 n2 -- n3 ) over - 1+ randomfast-rnd fast-random )                                        need z80-asm  need os-seed                                      code fast-rnd  ( -- u )                                           os-seed fthl                                                    hl de ldp                                                       hl addp  de addp  hl addp  de addp  hl addp                     de addp  hl addp  hl addp  hl addp  hl addp  de addp            h inc  hl incp                                                  os-seed sthl                                                    jppushhl   end-code                                           : fast-random  ( n -- 0..n-1 )  fast-rnd um* nip  ;                                                                                                                                                                                                                                                                                                                                             ( crnd crandom )                                                need os-seed                                                    code crnd  ( -- b )                                               os-seed fthl                                                    ED c, 5F c,  a d ld  m e ld                                     de addp  l add  h xor                                           os-seed sthl                                                    pusha jp                                                        end-code                                                      : crandom  ( b -- 0..b-1 )  crnd um* nip  ;                                                                                                                                                                                                                                                                                                                                                                                                                     ( randomize randomize0 )                                        [defined] randomize                                             ?\  need os-seed  : randomize  ( n -- )  os-seed !  ;           [needed] randomize ?exit                                        need os-frames                                                  : randomize0  ( n -- )                                            ?dup 0=  if  os-frames @  then  randomizen>r )  \ ==returnstack==                                      need z80-asm                                                    code n>r  ( x1..xn n -- ) ( R: -- x1..xn n )                      exx                                                             bc pop  0000 bc stp  |mark                                      rp fthl                                                         begin  bc tstp  nz while                                          de pop  hl decp  d m ld  hl decp  e m ld  bc decp             repeat                                                          0000 de ldp# |resolve                                           hl decp  d m ld  hl decp  e m ld                                rp sthl  exx  jpnext                                            end-code                                                      need nr>                                                                                                                                                                                        ( nr> )                                                         need z80-asm                                                    code nr>  ( -- x1..xn n ) ( R: x1..xn n -- )                      exx                                                             rp fthl                                                         m c ld  hl incp  m b ld  hl incp                                0000 bc stp  |mark                                              begin  bc tstp  nz while                                          m e ld  hl incp  m d ld  hl incp  de push  bc decp            repeat                                                          rp sthl  exx                                                    0000 hl ldp# |resolve                                           jppushhl                                                        end-code                                                      need n>r                                                                                                                        ( rdepth r'@ )                                                  [unneeded] rdepth                                               ?\ : rdepth  ( -- n )  rp@ rp0 @ - -2 /  ;                      [unneeded] r'@ dup                                              ?\ : r'@  ( -- x1 ) ( R: x1 x2 -- x1 x2 )                       ?\   r> 2r@ drop swap >r  ;                                     : uallot ( n -- )  udp @ swap udp +!  ;                         : user  ( "name" -- )  create cell uallot , does> @ up @ +  ;   : user  ( "name" -- )  create cell uallot c, does> c@ up @ +  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( mode32 )                                                      need columns  need rows  need set-font  need set-mode-output    : mode32  ( -- )                                                  [ latest name> ] literal current-mode !                         15360 set-font  2548 set-mode-output                            32 to columns  24 to rows                                       ['] mode32-xy ['] xy defer!                                     ['] mode32-at-xy ['] at-xy defer!  ;                          ' mode32 ' default-mode defer!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( mode42 )                                                      need set-mode-output  need <file-as-is  need (mode42            : mode42  ( -- )                                                  [ latest name> ] literal current-mode !                         (mode42 set-mode-output  ;                                    get-drive 1 set-drive                                           s" prnt42.bin" <file-as-is throw                                s" ea5aky.f42" <file-as-is throw                                set-drivebanked-mode42 )                                               need set-banked-mode-output  need <file-as-is                   need (mode42  need code-bank                                    : banked-mode42  ( -- )                                           [ latest name> ] literal current-mode !                         (mode42 set-banked-mode-output  ;                             code-bank{                                                        get-drive 1 set-drive                                           s" prnt42.bin" <file-as-is throw                                s" ea5aky.f42" <file-as-is throw                                set-drive                                                     }code-bank                                                                                                                                                                                                                                                                                                                      ( (mode42 )                                                     need columns  need rows  need set-font                          [defined] (at-xy)                                               ?\ : (at-xy)  ( col row -- )  22 emit swap emit emit  ;         : mode42-xy  ( -- col row )  0 0  ;  \ XXX TODO                 : (mode42  ( -- a )                                               42 to columns  24 to rows                                       ['] mode42-xy ['] xy defer!                                     ['] (at-xy) ['] at-xy defer!                                    [ 64600 256 - ] literal set-font 63900  ;                                                                                                                                                                                                                                                                                                                                                                                                                     ( mode64 )                                                      need mode32  need <file-as-is  need 4x8font                     get-drive 1 set-drive                                           s" 4x8fd.bin" <file-as-is throw                                 set-drive                                                       [defined] (at-xy)                                               ?\ : (at-xy)  ( col row -- )  22 emit swap emit emit  ;         : mode64-xy  ( -- col row )  0 0  ;  \ XXX TODO                 : mode64  ( -- )                                                  [ latest name> ] literal current-mode !                         64 to columns  24 to rows                                       ['] mode64-xy ['] xy defer!                                     ['] (at-xy) ['] at-xy defer!                                    4x8font set-font  60000 set-mode-output  ;                                                                                                                                                    ( mode64 )                                                      need z80-asm                                                    create mode64-at-flag 0 c,                                      create mode64-column 0 c,                                       create mode64-row 0 c,                                          variable mode64-chars                                           code mode64-emit  ( -- )                                          b a ld                                                          here 1+ 0 unresolved !  \ address of at_flag                    0 a ld#  and a                                                  z if  FF a ld#  then                                            end-code                                                      : mode64  ( -- )                                                  mode64-chars @ set-font  mode64-emit set-mode-outupt            ['] (at-xy) ['] at-xy defer!  ;                                                                                               ( 4x8font )                                                     create 4x8font  hex                                             02 c, 02 c, 02 c, 02 c, 00 c, 02 c, 00 c,  \  !                 52 c, 57 c, 02 c, 02 c, 07 c, 02 c, 00 c,  \ "#                 25 c, 71 c, 62 c, 32 c, 74 c, 25 c, 00 c,  \ $%                 22 c, 42 c, 30 c, 50 c, 50 c, 30 c, 00 c,  \ &'                 14 c, 22 c, 41 c, 41 c, 41 c, 22 c, 14 c,  \ ()                 20 c, 70 c, 22 c, 57 c, 02 c, 00 c, 00 c,  \ *+                 00 c, 00 c, 00 c, 07 c, 00 c, 20 c, 20 c,  \ ,-                 01 c, 01 c, 02 c, 02 c, 04 c, 14 c, 00 c,  \ ./                 22 c, 56 c, 52 c, 52 c, 52 c, 27 c, 00 c,  \ 01                 27 c, 51 c, 12 c, 21 c, 45 c, 72 c, 00 c,  \ 23                 57 c, 54 c, 56 c, 71 c, 15 c, 12 c, 00 c,  \ 45                 17 c, 21 c, 61 c, 52 c, 52 c, 22 c, 00 c,  \ 67                 22 c, 55 c, 25 c, 53 c, 52 c, 24 c, 00 c,  \ 89                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 22 c, 00 c, 00 c, 22 c, 02 c,  \ :;                 00 c, 10 c, 27 c, 40 c, 27 c, 10 c, 00 c,  \ <=                 02 c, 45 c, 21 c, 12 c, 20 c, 42 c, 00 c,  \ >?                 23 c, 55 c, 75 c, 77 c, 45 c, 35 c, 00 c,  \ @A                 63 c, 54 c, 64 c, 54 c, 54 c, 63 c, 00 c,  \ BC                 67 c, 54 c, 56 c, 54 c, 54 c, 67 c, 00 c,  \ DE                 73 c, 44 c, 64 c, 45 c, 45 c, 43 c, 00 c,  \ FG                 57 c, 52 c, 72 c, 52 c, 52 c, 57 c, 00 c,  \ HI                 35 c, 15 c, 16 c, 55 c, 55 c, 25 c, 00 c,  \ JK                 45 c, 47 c, 45 c, 45 c, 45 c, 75 c, 00 c,  \ LM                 62 c, 55 c, 55 c, 55 c, 55 c, 52 c, 00 c,  \ NO                 62 c, 55 c, 55 c, 65 c, 45 c, 43 c, 00 c,  \ PQ                 63 c, 54 c, 52 c, 61 c, 55 c, 52 c, 00 c,  \ RS                 75 c, 25 c, 25 c, 25 c, 25 c, 22 c, 00 c,  \ TU                 -->                                                             ( 4x8font )                                                     55 c, 55 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ VW                 55 c, 55 c, 25 c, 22 c, 52 c, 52 c, 00 c,  \ XY                 73 c, 12 c, 22 c, 22 c, 42 c, 72 c, 03 c,  \ Z[                 46 c, 42 c, 22 c, 22 c, 12 c, 12 c, 06 c,  \ \]                 20 c, 50 c, 00 c, 00 c, 00 c, 00 c, 0F c,  \ ^_                 20 c, 10 c, 03 c, 05 c, 05 c, 03 c, 00 c,  \ ?a                 40 c, 40 c, 63 c, 54 c, 54 c, 63 c, 00 c,  \ bc                 10 c, 10 c, 32 c, 55 c, 56 c, 33 c, 00 c,  \ de                 10 c, 20 c, 73 c, 25 c, 25 c, 43 c, 06 c,  \ fg                 42 c, 40 c, 66 c, 52 c, 52 c, 57 c, 00 c,  \ hi                 14 c, 04 c, 35 c, 16 c, 15 c, 55 c, 20 c,  \ jk                 60 c, 20 c, 25 c, 27 c, 25 c, 75 c, 00 c,  \ lm                 00 c, 00 c, 62 c, 55 c, 55 c, 52 c, 00 c,  \ no                 00 c, 00 c, 63 c, 55 c, 55 c, 63 c, 41 c,  \ pq                 -->                                                             ( 4x8font )                                                     00 c, 00 c, 53 c, 66 c, 43 c, 46 c, 00 c,  \ rs                 00 c, 20 c, 75 c, 25 c, 25 c, 12 c, 00 c,  \ tu                 00 c, 00 c, 55 c, 55 c, 27 c, 25 c, 00 c,  \ vw                 00 c, 00 c, 55 c, 25 c, 25 c, 53 c, 06 c,  \ xy                 01 c, 02 c, 72 c, 34 c, 62 c, 72 c, 01 c,  \ z{                 24 c, 22 c, 22 c, 21 c, 22 c, 22 c, 04 c,  \ |}                 56 c, A9 c, 06 c, 04 c, 06 c, 09 c, 06 c,  \ ~?                 decimalcolumns rows )                                                need value                                                      32 value columns  24 value rowsset-banked-mode-output )                                      need set-mode-output                                            0 constant (output-routine)                                     code (banked-mode-output)  ( -- )                                 C5 c,                 \ push bc ; save Forth IP                 CD c, 0 ,             \ call output_routine ; to be patched     here cell- ' (output-routine) >body !                           C1 c,                 \ pop bc ; restore Forth IP               DD c, 21 c, next ,    \ ld ix,next ; restore IX, just in case   jpnext  end-code                                              : set-banked-mode-output  ( a -- )                                (output-routine) !  \ patch `(banked-mode-output)`              ['] (banked-mode-output) set-mode-output  ;                                                                                                                                                                                                                   ( set-mode-output set-font )                                    need os-chars  need os-chans                                    : set-mode-output  ( a -- )                                       os-chans @ 2dup ! 2dup 5 + ! 15 + !  ;                        : set-font  ( a -- )  os-charsfzx-test )                                                    need fzx-emit  need <file                                       create font  2048 allot                                         1 set-drive  font 0 s" lettra.fzx" <file                        font fzx-font !                                                 : zxtype  ( ca len -- )  bounds do  i c@ fzx-emit  loop  ;      cr .( fzx-emit is ready ) cr                                    ' (fzx-emit) hex                                                cr .( Code start:   ) dup u.                                    cr .( Code length:  ) ' fzx-emit swap - u.                      cr                                                                                                                                                                                                                                                                                                                                                                                              ( fzx-mode )                                                    need fzx-emit                                                   : fzx-at-xy  ( gx gy -- )  fzx-y c! fzx-x c!  ;                 : fzx-cr  ( -- )  13 fzx-emit  ;                                : fzx-home  ( -- )  0 191 fzx-at-xy  ;                          : fzx-mode  ( -- )                                                ['] fzx-emit ['] emit defer!                                    ['] fzx-at-xy ['] at-xy defer!                                  ['] fzx-home ['] home defer!                                    ['] fzx-cr ['] cr defer!  ;                                                                                                                                                                                                                                                                                                                                                                                                                                   ( fzx-emit )                                                    create fzx-font 60000 ,  \ font address                         0 constant margin  \ XXX TODO -- make it a variable             create fzx-variables                                              here 0 c, \ fzx-flags                                           here margin c, \ fzx-x (margin)                                 here 191 c,  \ fzx-y                                          constant fzx-y  constant fzx-x  constant fzx-flagsfzx-emit )                                                    need z80-asm  need scroll-1px-up                                create (fzx-emit)  ( -- )                                         asm                                                             fzx-flags hl ldp#  \ initial address of local variables         m dec  \ check fzx-flags value by decrementing it               p' if'  \ not expecting a regular character                       nz if  \ not expecting the column                                 cpl  C0 add#  \ now A = 191 - char                              hl incp                                                       then                                                            hl incp  a m ld  ret                                          then'                                                         -->                                                                                                                                                                                             ( fzx-emit )                                                      16 cp#  z if  02 m ld#  ret  then                               m inc  \ increment fzx-flags to restore previous value (0)      hl incp  \ point to fzx-x XXX why?                              fzx-font bc ftp  bc push  ix pop                                0D cp#  0000 jpz |mark 0 unresolved !                           a dec  2 ix cpxfzx-emit )                                                      cy if  \ jr nc, UNDEF_CHAR                                        1F sub#  \ now A = char - 32                                    cy if  \ jr nc, PRINT_CHAR                                    2swap  \ exchange the two `if`, because they are not nested     then                                                            char ? 20 - a ld#  \ print '?' instead of invalid character       thenfzx-emit )                                                      a inc                                                           a l ld  00 h ld#  hl de ldp  hl addp  de addp                   bc addp                                                           r now HL references offset/kern in char table                 m e ld  hl incp  m a ld  3F and#  a d ld                        m xor  rlca  rlca  a c ld                                     -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      hl push  de addp  hl decp                                       exsp                                                            hl incp                                                         a xor  rld                                                      af push  rld                                                    0000 sta  |mark 1 unresolved !                                  08 cp#  \ check if char width is larger than 8 bits             rld  \ restore char shift/width                               -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      000E de ldp#  nc if  234E de ldp#  then                         0000 de stp  |mark 2 unresolved !                               hl incp  m a ld                                                 r add  a e ldfzx-emit )                                                      fzx-x hl ldp#  m a ld  c sub                                    cy if  a xor  then                                              a m ld  0000 fta  |mark 3 unresolved !                          m add                                                           0000 callc |mark 4 unresolved !  \ newline callcfzx-emit )                                                      fzx-x bc ftp                                                    01 a ld#                                                        00 ix subx  \ now A = 1 - height                                b add  \ now A = fzx-y - height + 1                             nc if  \ end of screen                                            hl pop  hl pop  ret  \ restore the stack and exit             then                                                            af pop  BF add#                                                 22AA 2+ call  exaf                                              here jr >relmark 5 unresolved !  \ jr CHK_LOOP                -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                      begin  \ main loop                                                m d ld  \ now D = 1st byte from char definition grid            hl incp  \ next character definition                            2 unresolved @ >resolve                                         m c ld  hl incp                                                 a xor  exsp  exaf                                               nz if                                                             a b ld  exaf                                                    begin  d srl  c rr  rra  step                                 then                                                        -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        l inc  l inc   m or  a m ld  \ put A on screen                  l dec  c a ld  m or  a m ld  \ put C on screen                  l dec  d a ld  m or  a m ld  \ put D on screen                  h inc  \ move screen address by 1 pixel down                    h a ld  07 and#                                                 z if  l a ld  20 add#  a l ld                                     nc if  h a ld  08 sub#  a h ld  then                          then \ CHK_LOOP:                                                5 unresolved @ >relresolve                                  -->                                                                                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                        exsp  \ now HL = char definition address                        l a ld                                                          e cp  \ check if reached next char definition address         z until  \ loop otherwise (to MAIN_LOOP)                        hl pop  \ discard screen address from stack                     fzx-x hl ldp#                                                   m a ld  \ now A = column                                      \ WIDTH1:                                                         here 1+ dup 1 unresolved @ ! 3 unresolved @ !                   00 add#  \ now A = column + (width - 1)                         scf                                                             01 ix adcx  \ now A = column + width + tracking               -->                                                                                                                                                                                             ( fzx-emit )                                                      cy if                                                             0 unresolved @ >resolve  4 unresolved @ >resolve                margin m ld#  \ move to initial column at left margin           hl incp                                                         m a ld  \ now A = line                                          00 ix subx  \ now A = line - height                           then                                                            a m ld  \ move down a few pixels specified by height            ret                                                             end-asm                                                       -->                                                                                                                                                                                                                                                                                                                             ( fzx-emit )                                                    code fzx-emit  ( c -- )                                           hl pop  bc push                                                 l a ld  ' (fzx-emit) call                                       bc pop  next ix ldp#  jpnext                                    end-codesound-register-port sound-write-port )                        65533 constant sound-register-port                              49149 constant sound-write-port                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( !sound vol shutup noise )                                     need !p  need sound-register-port  need sound-write-port        : !sound  ( b1 b2 -- )                                            sound-register-port !p sound-write-port !p  ;                 : vol  ( n1 n2 -- )  8 + !sound  ;                              : shutup  ( -- )  -1 7 !sound  ;  \ XXX FIXME                   : noise  ( -- )  7 7 !sound  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( music )                                                       need ms  vocabulary music  current @  also music definitions    need roll                                                       : freq                                                            2* 109.375 3 roll  um/mod nip 256 /mod 2 pick                   1+ !sound  swap !sound  ;                                     variable len  variable tempo  variable octave  variable volume  2 len !  200 tempo !  8 octave !  15 volume ! 1 15 vol          : tones  ( -- )  56 7 !sound  ;                                 : note  ( n "name" -- )                                           create  ,                                                       does>   @ octave @ * 16 /  1 freq tones                                 tempo @ len @ * ms shutup  ;                          523 note c  554 note c# 583 note d  622 note d#                 659 note e  698 note f  740 note f# 784 note g                  831 note g# 880 note a  932 note a# 988 note b  -->             ( music )                                                       : l   ( n -- )  len !  ;                                        : o+  ( -- )    octave @ 2 * octave !  ;                        : o-  ( -- )    octave @ 2 / octave !  ;                        : r   ( -- )    tempo @ len @ * ms  ;                           : >>  ( -- )    1 volume @ 1+ vol 1 volume +!  ;                : <<  ( -- )    1 volume @ 1- vol -1 volume +!  ;               current ! previousplay sound: sound, )                                          need !p  need sound-register-port  need sound-write-port        14 constant /sound                                              : play  ( a -- )                                                  /sound 0 do                                                       i sound-register-port !p  dup c@ sound-write-port !p 1+       loop  drop  ;                                                 : sound,  ( b0 ... b13 -- )                                       here /sound allot here 1- do  i c!  -1 +loop  ;               : sound:  ( b0 ... b13 "name" -- )  create  sound,  ;                                                                                                                                                                                                                                                                                                                                                                                                           ( play sound: sound, )                                          need roll                                                       : sound:  ( b0 ... b13 "name" -- )                                create  14 0 do  14 i - roll ,  loop  ;                       : sound,  ( b0 ... b13 -- a )                                     here >r 14 0 do  14 i - roll ,  loop  rplay )                                                        need !p  need c@+                                               need sound-register-port  need sound-write-port                 : play  ( a -- )                                                  14 0 do                                                           i sound-register-port !p  c@+ sound-write-port !p             loop  dropplay )                                                        need z80-asm                                                    need sound-register-port  need sound-write-port                 code play  ( a -- )                                               hl pop  bc push                                                 0E b ld#  00 e ld#                                              begin   bc push                                                         e a ld  sound-register-port bc ldp#  a outbc                    m a ld  sound-write-port bc ldp#  a outbc                       hl incp  e inc  bc pop  \ next                          step                                                            bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                      ( waves shoot helicopter1 train )                               need sound:                                                     0  0  0  0  0  0  7 71  20  20  20  0  38  14                   sound: waves                                                    10  0  177  0  191  0  31 71  20  20  20  92  28  3             sound: shoot                                                    200  15  200  15  200  15  0 7 23  23  23  255  1  12           sound: helicopter1                                              100  120  48  97  12  200  55 15  9  11  55  180  4  8          sound: train                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( bomber whip metalic rain2 lightning1 lighting2 )              need sound:                                                     73 82 62 165 90 138 159 140 102 77 100 162 87 201 sound: bomber 5 18 8 6 19 11 5 11 0 19 3 24 21 1 sound: whip                  149 64 104 236 210 180 0 32 0 194 146 73 81 177 sound: metalic  16 17 25 10 19 9 4 31 245 1 6 30 2 sound: rain2                 1 4 0 16 36 67 8 4 31 245 1 6 30 2 sound: lighting1             0 0 0 0 0 255 7 4 255 25 0 60 60 3 sound: lightingound effects )                                               need sound:  hex                                                00 00 00 00 00 00 1E 40 0F 10 0F 00 07 18 sound: aplausse       1B 00 09 00 00 00 1F C8 10 10 10 00 6B 10 sound: hammer         AB 03 2A 02 0C 01 00 F8 10 10 10 00 71 10 sound: bell1          66 00 4B 00 45 00 00 F8 10 10 10 00 22 10 sound: bell2          FC 06 DE 03 C3 04 00 F8 10 10 10 00 FF 10 sound: bell3          0C 1F 00 00 00 1F 07 E8 0F 10 0F 9A 00 18 sound: airplane       09 00 00 06 0C 00 0B C0 10 0E 10 3A 02 1C sound: helicopter2    03 05 FC 04 0C 05 00 F8 10 10 10 FF FF 0E sound: background     00 00 00 00 00 00 06 C0 10 10 10 00 05 18 sound: rap            00 06 00 00 00 05 11 E8 10 10 10 00 0A 10 sound: drum           09 00 00 00 00 00 00 C0 10 10 10 03 09 10 sound: cymbal         00 00 00 00 00 00 0F C0 0B 10 10 FF 50 0E sound: beach          24 00 12 00 16 00 00 F8 10 10 10 00 10 18 sound: waterdrop2     decimal                                                         ( rain1 waterdrop1 )                                            need sound:                                                     44 24 6 6 7 3 3 5 44 6 3 5 3 3 sound: rain1                     20 83 94 39 0 8 31 71 23 23 22 90 0 0 sound: waterdropbleep )                                                       code bleep  ( duration pitch -- )                                 E1 c,  D1 c,  C5 c,  CD c, 03B5 ,                               C1 c,  DD c, 21 c, next ,                                       jpnext                                                          end-codebeep>bleep )                                                  : beep>bleep  ( frequency duration1 -- duration2 pitch )          over 1000 */ swap                                               4375 100 rotlaser-gun )                                                   need z80-asm                                                    code laser-gun  ( -- )                                            bc push                                                         5 b ld#                                                         0500 hl ldp#                                                    begin   0001 de ldp#                                                    hl push  03B5 call  hl pop  \ ROM beeper                        0010 de ldp#  de subp                                           jrnz                                                    bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                                                                                                                                                      ( white-noise )                                                 need z80-asm                                                    code white-noise  ( u -- )                                        de pop                                                          bc push  \ save the Forth IP                                    de bc ldp  0000 hl ldp#  \ bc=duration, hl=start of ROM         5C48 fta  a sra  a sra  a sra  07 and#  a d ld                  begin   m e ld  hl incp  bc decp  bc push                               08 b ld#  \ bit counter                                         begin   e a ld  10 and#  e rl  d or  FE out  \ beep                     step                                                    bc pop  bc tstp                                                 jrnz                                                    bc pop  jpnext \ restore the Forth IP and go next               end-code                                                                                                                      ( ambulance )                                                   need z80-asm                                                    code ambulance  ( n -- )                                          de pop  bc push  e b ld                                         begin   bc push  0320 hl ldp#  000A de ldp#                             <mark   hl push                                                         03B5 call  \ ROM beeper                                         hl pop  hl decp                                                 hl tstp                                                         jrnz                                                    bc pop                                                          step                                                    bc pop  next ix ldp#  jpnext                                    end-code                                                                                                                                                                                      ( cslit csliteral c" )                                          : cslit  ( -- ca )  r@ dup c@ 1+ r> + >r  ;                     : csliteral  ( ca len -- )                                        compile cslit s,  ; immediate compile-only                    : c"  ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca )                                         [char] " parse postpone csliteral  ; immediate compile-onlycsliteral c" )                                                : csliteral  ( Compilation: ca len -- )                                      ( Run-time: -- ca )                                  2>r postpone ahead here 2r> s, >r postpone then                 r> postpone literal  ; immediate compile-only                 : c"  ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca )                                         [char] " parse postpone csliteral  ; immediate compile-onlyparse-escaped-string )                                        only forth definitions                                          need wid-of  need parse-char                                    vocabulary escaped-voc                                          wid-of escaped-voc constant escaped-wordlist                    also escaped-voc definitions                                    7 1 2constant a  8 1 2constant b  27 1 2constant e              12 1 2constant f  10 1 2constant l  13 1 2constant n            char " 1 2constant q  13 1 2constant r  9 1 2constant t         11 1 2constant v  0 1 2constant z                               char " 1 2constant "  char \ 1 2constant \                      : m  ( -- c1 c2 2 )  10 13 2  ;                                 : (x)  ( "c" -- n )                                               parse-char upper 16 digit? 0= #-260 ?throw  ;                 : x  ( "cc" -- c 1 )  (x) 16 * (x) + 1  ;                       -->                                                             ( parse-escaped-string )                                        only forth definitions  need char>string   need search-wordlist                         need chars>string  need s+              : unescape-char  ( c -- c1..cn n )                                dup char>string escaped-wordlist search-wordlist                if  nip execute  else  [char] \ 2  then  ;                    : parse-escaped-string  ( "ccc<quote>"  -- ca len )               0 0  \ dummy empty string to start with                         begin  parse-char dup [char] " <>  while  \ not finished?         dup [char] \ =  \ possibly escaped char?                        if    drop parse-char unescape-char                             else  1  then  chars>string s+                                repeat  drop  ;                                                                                                                                                                                                                                               ( s\" )                                                         need parse-escaped-string                                       : s\"  ( Interpretation: "ccc<quote>" -- ca len )                      ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca len )                                    parse-escaped-string compiling? if  postpone sliteral  then     ; immediateneed parse-escaped-string                                       : .\"  ( Compilation: "ccc<quote>" -- )                                ( Run-time: -- ca len )                                    compile (.")  parse-escaped-string s,                           ; immediate compile-onlys= )                                                          : s=  ( ca1 len1 ca2 len2 -- f )  comparesconstant )                                                   : sconstant  ( ca len "name" -- )                                 here >r s, r> count 2constantchar>string chars>string )                                    : char>string  ( c -- ca len )  1 allocate-string tuck c! 1  ;  : chars>string  ( c1..cn n -- ca len )                            dup if                                                            dup allocate-string swap 2dup 2>r  ( c1..cn ca n )              bounds do  i c!  loop  2r>                                    else  pad swap  thenplace )                                                      : +place  ( ca1 len1 ca2 )                                        2dup c@ + over c!  dup c@ 1+ + smoves+ )                                                          [defined] lengths                                               ?\ : lengths   2over nip over  ;                                   ( ca1 len1 ca2 len2 -- ca1 len1 ca2 len2 len1 len2 )         : s+  ( ca1 len1 ca2 len2 -- ca3 len3 )                           lengths + >r           ( ca1 len2 ca2 len2 ) ( r: len3 )        r@ allocate-string >r  ( r: len3 ca3 )                          2 pick r@ +            ( ca1 len1 ca2 len2 len1+ca3 )           smove                  ( ca1 len1 )  \ 2nd string to buffer     r@ smove               \  1st string to buffer                  r> r>  ;                                                                                                                                                                                                                                                                                                                                                                                      ( hunt )                                                        : hunt  ( ca1 len1 ca2 len2 -- ca3 len3 )                         search 0= if  chars + 0  thenspaces )                                                     need under+                                                     : #spaces  ( ca len -- +n )                                       0 rot rot  0 do  count bl = under+  loop  drop abschars )                                                      : #chars  ( ca len c -- +n )                                      0 2swap 0 do                                                      ( c count ca ) count over = under+  loop  2drop absname first-name trim last-name )                             : /name  ( ca1 len1 -- ca2 len2 ca3 len3 )                        bl skip 2dup bl scan  ;                                       : first-name  ( ca1 len1 -- ca2 len2 )  /name nip -  ;          : trim ( ca1 len1 -- ca2 len2 )  -leading -trailing  ;          : last-name  ( ca1 len1 -- ca2 len2 )                             trim                                                            begin  2dup bl scan bl skip dup                                 while  2nip  repeat  2drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( prefix? suffix? )                                             need s=  need [if]                                              [needed] prefix? [if]                                           : prefix?  ( ca1 len1 ca2 len2 -- f ) tuck 2>r min 2r> s=  ;    [then]                                                          [needed] suffix? [if]                                           : suffix? ( ca1 len1 ca2 len2 -- wf )                             2swap dup 3 pick - /string s=  ;                              [thenprefix )                                                     need string-prefix?                                             : -prefix  ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )           dup >r 2over 2swap string-prefix?                               if  swap r@ + swap r> -  else  rdrop  thensuffix )                                                     need suffix?                                                    : -suffix ( ca1 len1 ca2 len2 -- ca1 len1 | ca3 len3 )            dup >r 2over 2swap suffix?                                      if  r> -  else  rdrop  thenud>str d>str chop )                                           : ud>str  ( ud -- ca len )  <# #s #>  ;                         : d>str  ( ud -- ca len )  tuck dabs <# #s rot sign #>  ;       : chop  ( ca len -- ca' len' )  1- swap char+ swapsave-counted-string )                                         : save-counted-string  ( ca1 len1 -- ca2 )                        dup 1+ allocate-string dup >r place rstring/ )                                                     code string/  ( ca1 len1 len2 -- ca2 len2 )                       D9 c,  C1 c,  D1 c,  E1 c,                                      19 c,  A7 c,  ED c, 42 c,                                       E5 c,  C5 c,                                                    D9 c,  jpnext                                                   end-code                                                      exit                                                            : string/  ( ca1 len1 len2 -- ca2 len2 )                          >r + r@ - r>  ;                                                                                                                                                                                                                                                                                                                                                                                                                                               ( replaces )                                                    s" /counted-string" environment? 0= [if] 256 [then]             chars constant string-max                                       vocabulary replaces-voc                                         wid-of replaces-voc constant wid-subst                          [defined] vfxforth [if] \ vfx forth                               : makesubst \ c-addr len -- c-addr                                get-current >r wid-subst set-current                            ($create)  \ like create but takes c-addr/len                   r> set-current                                                  here string-max allot 0 over c! \ create buffer space           ;                                                           [then]                                                                                                                                                                                                                                                          ( replaces )                                                    [defined] (wid-create) [if] \ swiftforth                        : makesubst \ c-addr len -- c-addr                                wid-subst (wid-create)                                          last @ >create !                                                here string-max allot 0 over c! \ create buffer space           ;                                                             [thenreplaces )                                                    : findsubst  ( ca len -- xt f | 0 )                               wid-subst search-wordlist  ;                                  : replaces \ text tlen name nlen --                               2dup findsubst if                                                 nip nip execute    \ get buffer address                       else                                                               makesubst                                                    then                                                            place  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( s' )                                                          : s'  ( Compilation: "ccc<char>" -- ) ( Run-time:  -- ca len )    [char] ' parse-string  ; immediateos-chars os-chans os-flags2 os-seed os-frames os-udg )        [unneeded] os-chars    ?\ 23606 constant os-chars               [unneeded] os-chans    ?\ 23631 constant os-chans               [unneeded] os-flags2   ?\ 23658 constant os-flags2              [unneeded] os-seed     ?\ 23670 constant os-seed                [unneeded] os-frames   ?\ 23672 constant os-frames              [unneeded] os-udg      ?\ 23675 constant os-udg                 [unneeded] os-coords      ?\ 23677 constant os-coords           [unneeded] os-coordx      ?\ 23677 constant os-coordx           [unneeded] os-coordy      ?\ 23678 constant os-coordy                                                                                                                                                                                                                                                                                                                                                                                                           ( write-tape-file read-tape-file )                              17 constant /tape-header                                        create tape-header  /tape-header 2 * allot                      10 constant /tape-filename \ filename max length                : tape-filetype  ( -- ca )  tape-header  ;                      : tape-filename  ( -- ca )  tape-header 1+  ;                   : tape-length    ( -- a )   tape-header 11 +  ;                 : tape-start     ( -- a )   tape-header 13 +  ;                 3 tape-filetype c!  \ "code" filetype by default                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( write-tape-file read-tape-file )                              : -tape-filename  ( -- )  tape-filename /tape-filename blank  ; : any-tape-filename  ( -- )  255 tape-filename c!  ;            : set-tape-filename  ( ca len -- )                                -tape-filename  /tape-filename min                              tape-filename swap cmove  ;                                   : ?set-tape-filename  ( ca len -- )                               dup if    set-tape-filename                                         else  2drop any-tape-filename  then  ;                    : set-tape-memory  ( ca len -- )                                  tape-length ! tape-start !  ;                                 -->                                                                                                                                                                                                                                                                                                                             ( write-tape-file read-tape-file )                              code (read-tape-file)  ( -- )                                     C5 c,  DD c, 21 c, tape-header ,  2A c, tape-start ,            3E c, 01 c,  32 c, 5C74 ,  CD c, 075A ,                         C1 c,  DD c, 21 c, next ,                                       jpnext  end-code                                              : read-tape-file  ( ca1 len1 ca2 len2 -- )                        ?set-tape-filename set-tape-memory (read-tape-filewrite-tape-file read-tape-file )                              code (write-tape-file)  ( -- )                                    C5 c,  DD c, 21 c, tape-header ,                                A8 07 + c,  32 c, 5C74 ,                                        21 c, here 0A + ,  E5 c,                                        2A c, tape-start ,  E5 c,                                       C3 c, 0984 ,                                                    C1 c,  DD c, 21 c, next ,                                       jpnext  end-code                                              : write-tape-file  ( ca1 len1 ca2 len2 -- )                       set-tape-filename set-tape-memory (write-tape-file)  ;                                                                                                                                                                                                                                                                                                                                        ( .tape )                                                       : .tape  ( -- )                                                   cr ." Tape header " tape-header u. cr                              ." Filetype    " tape-filetype c@ . cr                          ." Filename    " tape-filename /tape-filename type cr           ." Length      " tape-length @ u. cr                            ." Start       " tape-start @ u. cr                             .s cr                                                           ." Press any key" key drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( ms )  \ ==time==                                              need os-frames                                                  : ms  ( u -- )                                                    20 / os-frames @ +                                              begin  dup os-frames @ u<  until dropms88 )                                                        need z80-asm                                                    code ms88  ( u -- )                                               de pop                                                          begin \ .reMS:                                                  d a ld                                                          e or nz if                                                        de push \ push bc                                               #133 de ldp#                                                    begin  \ .reMS2:                                                  dec decp  d a ld  e or                                        z until \ jr nz,reMS2                                           de pop \ pop bc                                                 de decp  l dec                                               z until \ jr nz,reMS                                             then  jpnext  end-code                                        ( frames@ frames! reset-frames )                                need os-frames                                                  : frames@  ( -- d )                                               os-frames @ [ os-frames 2+ ] literal c@  ;                    : frames!  ( d -- )                                               [ os-frames 2+ ] literal c! os-frames !  ;                    : reset-frames  ( -- )  0. framespause )                                                       need z80-asm  need call-xt  need execute-hl                     code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) call-xt  hl pop  execute-hl                            de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need call-xt                                      defer (wait)  ' noop ' (wait) defer!                            code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) call-xt                                                de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need execute-hl                                   code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         (wait) fthl  execute-hl                                         de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need execute-hl                                   variable (wait)  ' noop (wait) !                                code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) >body fthl  execute-hl                                 de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                      ( pause )                                                       need z80-asm  need execute-hl                                   variable (wait)  ' noop (wait) !                                code pause ( u -- )                                               de pop  bc push                                                 begin                                                             de push                                                         ' (wait) >body fthl execute-hl                                  de pop  halt  de decp  de tstp  \ finished?                   z until                                                         bc pop  jpnext                                                  end-code                                                                                                                                                                                                                                                                                                                      ( just-pause )                                                  need z80-asm                                                    code just-pause ( u -- )                                          de pop  bc push                                                 begin                                                             halt  de decp  de tstp  \ finished?                           z until                                                         bc pop  jpnext                                                  end-codeleapy-year? )                                                 : leapy-year?  ( n -- f )                                         dup 400 mod 0= if  drop true   exit  then                       dup 100 mod 0= if  drop false  exit  then                             4 mod 0= if       false  exit  then                       false  ;                                                      exit                                                            need baden-case                                                 : leapy-year?  ( n -- f )                                         case 400 mod 0= of  true   endof                                case 100 mod 0= of  false  endof                                case   4 mod 0= of  true   endof                                othercase false  ;                                                                                                                                                                                                                                            ( set-date get-date )                                           create (date)  1 c,  1 c,  2016 ,                               : get-date  ( -- day month year )                                 (date) c@                                                       [ (date) 1+ ] literal c@                                        [ (date) 2+ ] literal @  ;                                    : set-date  ( day month year -- )                                 [ (date) 2+ ] literal !                                         [ (date) 1+ ] literal c!                                        (date) !  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                   ( set-time get-time reset-time )                                need frames@  need frames!  need m+  need alias  need ud*       : get-time  ( -- second minute hour )                             frames@ 50 um/mod nip s>d   ( sec . )                                   60 um/mod s>d       ( sec min . )                               60 um/mod           ( sec min hour )  ;               : set-time  ( second minute hour -- )                             3600 um*  rot 60 * m+  rot m+  ( seconds )                      50. ud* frames!  ;                                            ' reset-frames alias reset-time  ( -- )                                                                                                                                                                                                                                                                                                                                                                                                                         ( .time .system-time .date .system-date .time&date time&date )  need get-time  need get-date                                    : .00  ( n -- )  s>d <# # # #> type  ;                          : .0000  ( n -- )  s>d <# # # # # #> type  ;                    : .time  ( second minute hour -- )                                .00 ':' emit .00 ':' emit .00  ;                              : .system-time  ( -- )  get-time .time  ;                       : .date  ( day month year -- )                                    .0000 '-' emit .00 '-' emit .00  ;                            : .system-date  ( -- )  get-date  .date  ;                      : .time&date  ( second minute hour day month year -- )            .date 'T' emit .time  ;                                       : time&date  ( -- second minute hour day month year )             get-time get-date  ;                                                                                                                                                                          ( assert assert= )                                              : assert   ( n -- )    0= if  abort  then  ;                    : assert=  ( a b -- )  = assertassert( )                                                     variable assert-level ( -- a )                                  1 assert-level !                                                : assertn ( n -- )  assert-level @ > if  postpone (  then  ;    : assert0( ( -- )  0 assertn  ; immediate                       : assert1( ( -- )  1 assertn  ; immediate                       : assert2( ( -- )  2 assertn  ; immediate                       : assert3( ( -- )  3 assertn  ; immediate                       : assert( ( -- )  postpone assert1( ; immediate                 : (endassert) ( f -- )  0= #-262 ?throw ;                       : ) ( -- )  postpone (endassert) ; immediate                                                                                                                                                                                                                                                                                                                                                    ( ~~ )                                                          need :noname  need defer  need is                               variable ~~?    ~~? on      \ active?                           variable ~~x    ~~x off     \ x coordinate                      variable ~~y    ~~y off     \ y coordinate                      variable ~~key  ~~key off   \ quit key, or zero if no pause     : ~~show  ( nt line block -- )                                    ~~x @ ~~y @ at-xy ." Block " . ." Line " . .name .s   ;       : ~~control  ( -- )                                               ~~key @ ?dup 0= ?exit  key = if  quit  then  ;                2variable ~~backup-xy                                           defer ~~save  ( -- )  defer ~~restore  ( -- )                   :noname  ( -- )  xy ~~backup-xy 2!        ; is ~~save           :noname  ( -- )     ~~backup-xy 2@ at-xy  ; is ~~restore        -->                                                                                                                             ( ~~ )                                                          : (~~)  ( nt line block -- )                                      ~~? @                                                           if    ~~save ~~show ~~control ~~restore                         else  2drop drop  then  ;                                     : ~~  ( -- )                                                      latest      postpone literal                                    >in @ c/l / postpone literal                                    blk @       postpone literal                                    postpone (~~)  ; immediate compile-only                                                                                                                                                                                                                                                                                                                                                                                                                       ( where )                                                       need [if]                                                       : where  ( -- )                                                   error-pos 2@  ( n1 n2 )                                         dup if                                                            dup scr !                                                       ." Scr # " decimal dup . cr                                     swap c/l /mod c/l * rot block + c/l type cr                     here c@ - spaces [char] ^ emit                                else  2drop  then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                          ( decode )                                                      forth definitions decimal                                       need body>name  need name>body  need case  need [if]            need recurse                                                    variable decode-level  decode-level off \ depth of nesting      variable decode-address  \ in the word being decoded            : indent  ( -- )                                                  cr decode-address @ u. decode-level @ 2* spaces  ;            : indent+  ( -- )  1 decode-level +! indent  ;                  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( decode )                                                      : decode-branch    ( a1 -- a2 )  cell+ dup @ u.  ;              : decode-literal   ( a1 -- a2 )  cell+ dup @ .  ;               : decode-cliteral  ( a1 -- a2 )  cell+ dup c@ . 1-  ;           : decode-sliteral  ( a1 -- a2 )                                   cell+ dup count type  dup c@ + 1-  ;                          : decode-compile   ( a1 -- a2 )  cell+ dup @ >name .namedecode )                                                      : decode-special  ( a1 -- a1 | a2 )                               dup @ case                                                        ['] compile   of  decode-compile    endof                       ['] lit       of  decode-literal    endof                       ['] clit      of  decode-cliteral   endof                       ['] slit      of  decode-sliteral   endof                       ['] branch    of  decode-branch     endof                       ['] 0branch   of  decode-branch     endof                       ['] ?branch   of  decode-branch     endof                       ['] (do)      of  decode-branch     endof                       ['] (?do)     of  decode-branch     endof                       ['] (.")      of  decode-sliteral   endof                   -->                                                                                                                                                                                             ( decode )                                                          [defined] cslit [if]                                              ['] cslit     of  decode-sliteral  endof                      [then]                                                          [defined] -branch [if]                                            ['] -branch   of  decode-branch     endof                     [then]                                                        endcase  ;  -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( decode )                                                      : decode-end?  ( xt -- f )                                        dup  ['] exit =  swap ['] (;code) =  or  ;                    : colon-cfa?  ( cfa -- f )                                        dup c@ $CD <> if  drop false exit  then                         1+ @  docolon =  ;                                            : colon-pfa?  ( pfa -- f )  body> colon-cfadecode )                                                      : (decode)  ( pfa -- )                                            dup colon-pfa? if                                                 dup body> decode-address ! indent                               ." : " dup body>name .name                                      begin   ( pfa+n ) dup decode-address !                                  dup @  ( pfa+n xt ) dup decode-end? 0=                  while  \ high level & not end of colon definition                 >body ( pfa+n pfa' ) dup indent+  body>name .name               key case  [char] q  of  sp0 @ sp! quit  endof                                   bl  of  drop            endof                             swap recurse  \ default                                   endcase  decode-special  cell+  -1 decode-level +!        repeat  indent >name .name                                    else  ." Not a colon definition."  then  drop  ;  -->                                                                         ( decode )                                                      : decode-usage  ( -- )                                            cr ." Keys: space=more, q=quit, other=deeper." cr  ;          : decode  ( "name" -- )                                           decode-usage                                                    defined  ( nt | 0 )  dup 0= -13 ?throw                          name>body  0 decode-level !  (decodeascii-type )                                                  : ascii-char?    ( c -- f )  128 <  ;                           : control-char?  ( c -- f )  bl <  ;                            : ascii-type  ( ca len -- )                                       bounds ?do                                                        i c@ dup dup ascii-char? 0= swap control-char? or               if  drop '.'  then  emit                                      loopdump )                                                        need 16hex.  need ascii-type                                    [defined] bs ?\ : bs  ( -- )  8 emit  ;                         : dump  ( ca len -- )                                             8 2dup mod - + 8 / 1- 0                                         ?do                                                               cr dup 16hex.                                                   8 0 do  i over + @ flip 16hex.  cell +loop                      dup bs 8 ascii-type                                             break-key? ?leave                                             8 + loop  drop  ;                                                                                                                                                                                                                                                                                                                                                                             ( wdump )                                                       need 16hex.                                                     [defined] bs ?\ : bs  ( -- )  8 emit  ;                         : wdump  ( a n -- )                                               0                                                               ?do                                                               i 4 mod 0= if  cr dup 16hex. space  then  \ show address        dup @ 16hex. cell+                                              break-key? ?leave                                             loop  drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( history )                                                     variable /history                                               variable hp0                                                    variable hp                                                     : used-history  ( -- u )  hp0 @ hp @  -  ;                      : unused-history  ( -- n )  /history @ used-history -  ;        : allot-history  ( +n -- )  hp +!  ;                            : len>history  ( len -- +n )  1+ cell+  ;                       : history>link  ( ca -- a )  cell-  ;                           : history<history  ( ca1 -- ca2 )  history>link @s  ;           : history>history  ( ca1 -- ca2 )                                 system-bank count default-bank  + cell+  ;                    : history>string  ( ca1 -- ca2 len2 )                             system-bank count save-string default-bank  ;  -->                                                                                                                                            ( history )                                                     variable browsed-history                                        : oldest-history?  ( -- f )  browsed-history @ hp0 @ =  ;       : browse-older-history  ( -- )                                    oldest-history? ?exit                                           browsed-history @ history<history browsed-history !  ;        : newest-history?  ( -- )                                         browsed-history @ history>history hp @ =                        browsed-history @ hp @ =  or  ;                               : browse-newer-history  ( -- )                                    newest-history? ?exit                                           browsed-history @ history>history browsed-history !  ;        : init-history  ( n -- )                                          dup /history !  $FFFF swap -                                    dup hp0 !  dup hp !  browsed-history !  0 hp0 @ c!s  ;        1024 init-history  -->                                          ( history )                                                     need s=                                                         : history-empty?  ( -- f )  used-history 0=  ;                  : allocate-history  ( len -- ior )                                1+ dup /history @ > if  drop #-274 exit  thenhistory )                                                     : latest-history$  ( -- ca len )                                  hp @ history<history history>string  ;                        : duplicated-history?  ( ca len -- f )  latest-history$ s=  ;   : longer-history?  ( len -- f )                                   len>history unused-history >  ;                               : history,  ( ca len -- )                                         hp @ dup >r  over >r  ( ca len ca1 ) ( R: len ca1 -- )          system-bank place default-bank                                  r> 1+ allot-history  r> hp @ !s  cell allot-history  ;        : (>history)  ( ca len -- )                                       dup 0= if  2drop exit  then                                     2dup duplicated-history? if  2drop exit  then                   dup longer-history? if  dup allocate-history throw  then        history,  hp @ browsed-history !  ;                           -->                                                             ( history )                                                     : browsed-history$  ( -- ca len )                                 browsed-history @ history>string  ;                           : get-history   ( -- ca )  browsed-history$ set-accept  ;       : (history-up)    ( -- ca )                                       get-history browse-older-history  ;                           : (history-down)  ( -- ca )                                       get-history browse-newer-historyhistory )                                                     variable history                                                : history-off  ( -- )                                             ['] 2drop ['] >history defer!                                   ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off  ;                 : history-on  ( -- )                                              ['] (>history) ['] >history defer!                              ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on  ;     -->                                                                                                                                                                                                                                                                                                                                                                                             ( history )                                                     : .history  ( -- )                                                hp0 @ begin  dup hp @ u<  while                                         dup history>string type cr  history>history                   repeat  drop  ;                                         need dump                                                       : hdump  ( ca len -- )  system-bank dump default-bank  ;        : .h  ( -- )  hp0 dup hp @ - hdump  ;                           \ history-onhistory )  \ XXX OLD                                          variable hp                                                     $FFFF constant hp0                                              variable /history  1024 /history !                              : init-hp0  ( -- )  0 hp0 c!s  ;                                : history-bounds  ( -- ca1 ca2 )  hp0 hp @  ;                   : used-history  ( -- u )  history-bounds -  ;                   : unused-history  ( -- n )  /history @ used-historyhistory )  \ XXX OLD                                          variable previously-browsed-history                             variable currently-browsed-history                              : older-history  ( -- )                                           currently-browsed-history @ dup previously-browsed-history !    system-bank count default-bank +                                currently-browsed-history !  ;                                : newer-history  ( -- )                                           currently-browsed-history @                                     previously-browsed-history @ currently-browsed-history !        currently-browsed-history !  ;                                : init-history  ( -- )                                            init-hp0  hp0 dup hp ! currently-browsed-history !  ;         init-history  -->                                                                                                                                                                               ( history )  \ XXX OLD                                          need s=                                                         : allot-history  ( +n -- )  negate hp +!  ;                     : history-empty?  ( -- f )  history-bounds =  ;                 : allocate-history  ( len -- ior )                                1+ dup /history @ > if  drop #-274 exit  then                   0  ; \ XXX TMP                                                : latest-history  ( -- ca len )                                   system-bank  hp @ count  save-string  default-bank  ;         : browsed-history  ( -- ca len )                                  currently-browsed-history @                                     system-bank  count save-string  default-bank  ;               : (history>)  ( -- ca len )                                       browsed-history  dup 0= ?exit                                                    dup 1+ negate allot-history                    history-empty? if  init-hp0  then  ;  -->                     ( history )  \ XXX OLD                                          : duplicated-history?  ( ca len -- f )  latest-history s=  ;    : too-long-for-history?  ( len -- f )  1+ unused-history > ;    : (>history)  ( ca len -- )                                       dup 0= if  2drop exit  then                                     history-empty? if  dup hp0 c!s  then                            2dup duplicated-history? if  2drop exit  then                   dup too-long-for-history?                                       if  dup allocate-history throw  then                            dup 1+ allot-history                                            hp @ dup system-bank place default-bank                                  currently-browsed-history !  ;                       -->                                                                                                                                                                                                                                                             ( history )  \ XXX OLD                                          : get-history   ( -- ca )  browsed-history set-accept  ;        : (history-up)    ( -- ca )  get-history older-history  ;       : (history-down)  ( -- ca )  get-history newer-history  ;       variable history                                                : history-off  ( -- )                                             ['] 0 ['] history-up   defer!                                   ['] 0 ['] history-down defer!  history off  ;                 : history-on  ( -- )                                              ['] (history-up)   ['] history-up   defer!                      ['] (history-down) ['] history-down defer!  history on  ;     : .history  ( -- )                                                hp @  begin  dup hp0 <  while                                           system-bank count 2dup type cr default-bank  +                repeat  drop  ;                                         \ history-on                                                    ( list )                                                        need .line  need nuf?                                           : list  ( n -- )                                                  dup scr !                                                       cr ." Scr # " .                                                 l/scr 0 do                                                        cr i 2 .r space i scr @ .line                                   nuf? ?leave                                                   loop crindex .index )                                                need .line  need nuf?                                           : .index  ( n -- )  cr dup 3 .r space 0 swap .line  ;           : index  ( n1 n2 -- )                                             1+ swap ?do                                                       cr i 3 .r space 0 i .line  nuf? ?leave                        loopindex-like )                                                  need .index  need nuf?                                          [defined] contains                                                ?\ : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;  : index-like  ( n1 n2 "name" -- )                                 parse-name 2swap                                                1+ swap ?do                                                       0 i line>string 2over contains if  i .index  then               nuf? ?leave                                                   loop  2drop  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                ( index-ilike )                                                 need .index                                                     [defined] contains                                                ?\ : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;  : index-ilike  ( n1 n2 "name" -- )                                parse-name save-string 2dup uppers                              2swap 1+ swap ?do                                                 save-string  0 i line>string save-string 2dup uppers            2over contains if  i .index  then                               nuf? ?leave                                                   loop  2drop  ;                                                                                                                                                                                                                                                                                                                                                                                ( .current .context order )                                     need wid>name  need get-order                                   : .wid  ( wid -- )                                                space dup wid>name ?dup if  .name drop exit  then  0 u.r  ;   : .current  ( -- )  get-current .wid  ;                         : .context  ( -- )                                                get-order begin  ?dup  while  swap .wid 1-  repeat  ;         : order  ( -- )                                                   cr ." Search: " .context cr ." Define: " .current  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( .depth )                                                      : .depth  ( n -- )  [char] < emit 0 .r [char] > emit spaces )                                                          need .depth                                                     : .s   ( -- )                                                     depth dup .depth 0> if                                            sp@ sp0 @ cell- do i @ .  [ cell negate ] literal +loop       thenu.s )                                                         need .depth                                                     : u.s   ( -- )                                                    depth dup .depth 0> if                                            sp@ sp0 @ cell- do i @ u.  [ cell negate ] literal +loop      thenwordlists )                                                   : wordlists  ( -- )                                               voc-link                                                        begin  @ ?dup  while  dup .wid wid>link  repeatmore-words? )                                                 : more-words?  ( -- f )  dup 0<>  nuf? 0= andwords )                                                       need trail  need name>link  need tab  need nuf?                 need more-words?                                                : words  ( -- )                                                   trail                                                           begin  more-words?  while                                         dup .name tab  name>link @s                                   repeat dropwordlist-words )                                              need words                                                      : wordlist-words  ( wid -- )  >order  words  previouswords-like )                                                  need trail  need name>link  need tab  need nuf?                 need more-words?                                                [defined] contains                                              ?\ : contains  ( ca1 len1 ca2 len2 -- f )  search nip nip  ;    : words-like  ( "name" -- )                                       parse-name 2dup uppers trail  ( ca len nt )                     begin  more-words?  while                                         dup >r                                                          name>string 2over contains if  r@ .name tab  then               r> name>link @s                                               repeat drop 2drop  ;                                                                                                                                                                                                                                                                                                          ( possibly anew )                                               need marker                                                     : possibly  ( "name" -- )                                         defined ?dup if  name> execute  then  ;                       : anew  ( "name" -- )  >in @  possibly  >in !  markermarker ) \ second approach                                    : marker,  ( -- a )                                               here  voc-link @ dup ,                                          begin                                                             dup cell- @  ( a nt ) swap @                                  dup 0= until  drop                                              np@ ,  ;                                                      : unmarker  ( a -- )                                              ;                                                             : marker  ( "name" -- )                                           marker, create ,  does>  ( -- ) ( pfa )  @ unmarker  ;                                                                                                                                                                                                                                                                                                                                        ( marker )                                                      : MARKER ( "name" -- )                                            here                                                            get-current ,                                                   get-order dup , 0 ?do dup , @ , loop                            create ,                                                        does> @ dup \ only                                              dup @ set-current cell+                                         dup @ >r r@ cells 2* + 1 cells - r@ 0                           ?do dup dup @ swap cell+ @ over ! swap 2 cells - loop           drop r> set-order                                               there                                                           ;                                                                                                                                                                                                                                                             ( marker )  \ first approach                                    : get-every-latest  ( -- nt0..ntn | nt )                          voc-link @ begin                                                  dup cell - @  ( a nt ) swap @                                 dup 0= until  drop  ;                                         : set-every-latest  ( nt0..ntn | nt -- )                          voc-link @ begin                                                  dup cell - @  ( a nt ) swap @                                 dup 0= until  drop  ;                                         : marker@  ( -- x1..xn1 n1 nt1..ntn2 n2 )                         depth >r  here np@ voc-link @                                   depth r> - get-every-latest  ;                                : marker!  ( a -- )                                               dup @ dup voc-link !  cell+ dup @ np!  cell+ @ there  ;       -->                                                                                                                             ( marker )                                                      : n,  ( x1..xn n -- )  0 do  ,  loop  ;                         : marker  ( "name" -- )                                           marker@ create n,  does>  ( -- ) ( pfa )  markermarkerextend size system turnkey )                                  : extend  ( -- )                                                  latest $08 +origin !  \ top most word in `forth` vocabulary     here $1F +origin !   \ `dp` init value                          np@ $26 +origin !   \ `np` init value                           voc-link @ $0C +origin !  ;  \ `voc-link` init value          : size  ( -- u )  here 0 +origin -  ;                           : system  ( -- a len )  extend  0 +origin size 10 +  ;          : turnkey  ( xt -- a len )  boot defer! system  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( wid>link wid>name named-wid wid>vocabulary )                  need alias                                                      ' cell+ alias wid>link  ( wid -- a )                            : (wid>name)  ( wid -- a )  [ 2 cells ] literal +  ;            : wid>name  ( wid -- nt|0 )  (wid>name) @  ;                    : named-wid  ( wid -- )  (wid>name) latest swap !  ;            : wid>vocabulary  ( wid "name" -- )                               create dup , named-wid                                          does>  ( -- )  ( pfa )  @ context !  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( get-order order@ )                                            need recurse                                                    : order@  ( a -- u*wid u )                                        dup @ dup if    >r cell+  recurse  r> swap 1+ exit                        then  nip  ;                                        : get-order  ( -- u*wid u )  context orderwid-of )                                                      : wid-of  ( "name" -- wid )  ' >bodyswap-current trail )                                          [unneeded] trail                                                ?\ : trail  ( -- nt )  context @ @  ;                           [unneeded] swap-current ?\ exit                                 : swap-current  ( wid1 -- wid2 )                                  get-current swap set-currentfind-name-in find )                                           : find-name-in  ( ca len wid -- nt | 0 )  @ find-name-from  ;   : find  ( ca -- ca 0 | xt 1 | xt -1 )                             dup count find-name dup                                         if  nip name>immediate? 1 or negate  then  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  