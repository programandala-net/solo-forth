GAS LISTING solo_forth.for_as.z80s 			page 1


 GNU assembler version 2.22 (z80-unknown-coff)
	 using BFD version (GNU Binutils) 2.22.
 options passed	: -z80 -agls=solo_forth.list.txt -L 
 input file    	: solo_forth.for_as.z80s
 output file   	: solo_forth.o
 target        	: z80-unknown-coff
 time stamp    	: 2015-08-20T21:09:51.000+0200

GAS LISTING solo_forth.for_as.z80s 			page 2


   1               	; Solo Forth
   2               	
   3               	; *******************************************************
   4               	; XXX WARNING
   5               	
   6               	; This file source is for the GNU binutils `as` assembler.
   7               	; Some strange things happen with this code, caused
   8               	; by the assembler.
   9               	; As of now the file used is <solo_forth.for_pasmo.z80s>,
  10               	; but this one is still updated.
  11               	
  12               	; *******************************************************
  13               	
  14               	  .text
  15               	
  16               	; XXX TODO
  17               	version_status:   equ 'A'
  18               	version_branch:   equ 00
  19               	version_release:  equ 20150820 ; 1924
  20               	
  21               	; XXX TMP -- for debugging
  22               	;vr_div: equ version_release/65535
  23               	;vr_mod: equ version_release mod 65535
  24               	;vr_mod2: equ version_release - vr_div
  25               	
  26               	; A Forth system for ZX Spectrum 128K and G+DOS.
  27               	; http://programandala.net/en.program.solo_forth.html
  28               	
  29               	; Copyright (C) 2015 Marcos Cruz (programandala.net)
  30               	
  31               	; Copying and distribution of this file, with or without
  32               	; modification, are permitted in any medium without royalty
  33               	; provided the copyright notice, the aknowledgments file and
  34               	; this notice are preserved.  This file is offered as-is,
  35               	; without any warranty.
  36               	
  37               	; ==============================================================
  38               	; Acknowledgments
  39               	
  40               	; See the file <ACKNOWLEDGMENTS.adoc>.
  41               	
  42               	; ==============================================================
  43               	; History
  44               	
  45               	; See
  46               	; http://programandala.net/en.program.solo_forth.history.html
  47               	
  48               	; ==============================================================
  49               	; System description
  50               	
  51               	; ----------------------------------------------
  52               	; Forth Registers
  53               	
  54               	; Forth Z80  Forth preservation rules
  55               	; ----- ---  ------------------------
  56               	; IP    BC   Interpretive pointer.
  57               	;            Should be preserved across Forth words.
GAS LISTING solo_forth.for_as.z80s 			page 3


  58               	; SP    SP   Data stack pointer.
  59               	;            Should be used only as data stack across Forth words.
  60               	;            May be used within Forth words if restored before exit.
  61               	;       DE   Input only when pushhlde called. ; XXX TODO
  62               	;       HL   Input only when pushhl called. ; XXX TODO
  63               	;       IX   Address of `next`.
  64               	;            May be used within Forth words if restored before exit.
  65               	;       IY   Address of the ERRNR ZX Spectrum system variable.
  66               	;            May be used within Forth words if restored before exit.
  67               	
  68               	; ----------------------------------------------
  69               	; Header structure
  70               	
  71               	; The name and link fields are created in a memory bank:
  72               	
  73               	; cfap: dw cfa             ; Pointer to cfa in main memory.
  74               	; lfa:  dw nfa of the previous word
  75               	; nfa:  db length+flags    ; Bits:      76543210
  76               	                           ; Bit names: .PSLLLLL
  77               	                           ; Legend:
  78               	                           ;   P: Precedence bit.
  79               	                           ;      0 = non-immediate word
  80               	                           ;      1 = immediate word
  81               	                           ;   S: Smudge bit:
  82               	                           ;      0 = definition completed
  83               	                           ;      1 = definition not completed
  84               	                           ;   LLLLL: name length (0..31).
  85               	;       ds length          ; name
  86               	
  87               	; The code and parameter fields are created in the dictionary:
  88               	
  89               	; cfa: dw code_address
  90               	; pfa:    ...              ; data or code
  91               	
  92               	; ==============================================================
  93               	; Glossary
  94               	
  95               	; The description of Forth words is included in this source.
  96               	; The markers `doc{` and `}doc` delimitate the comments that
  97               	; form the glossary.
  98               	
  99               	; ----------------------------------------------
 100               	; Stack notation
 101               	
 102               	; XXX TODO
 103               	; XXX TODO update when true=-1
 104               	
 105               	; a        = address
 106               	; ca       = character-aligned address
 107               	
 108               	; f        = flag (false is 0; true is any other value)
 109               	; tf       = true flag (1)
 110               	; ff       = false flag (0)
 111               	; wf       = well-formed flag (false is 0; true is 1)
 112               	
 113               	; b        = 8-bit byte
 114               	; c        = 7-bit or 8-bit character
GAS LISTING solo_forth.for_as.z80s 			page 4


 115               	; u        = 16-bit unsigned number
 116               	; len      = 16-bit unsigned number, length of memory zone or string
 117               	; ca len   = string
 118               	; n        = 16-bit signed number
 119               	; x        = 16-bit signed or unsigned number
 120               	; d        = 32-bit signed double number
 121               	; ud       = 32-bit unsigned double number
 122               	; xd       = 32-bit signed or unsigned number
 123               	
 124               	; xc       = 8-bit graphic x coordinate (0..255)
 125               	; yc       = 8-bit graphic y coordinate (0..191)
 126               	; line     = 8-bit cursor line (0..23)
 127               	; col      = 8-bit cursor column (0..31)
 128               	
 129               	; cfa      = code field address
 130               	; lfa      = link field address
 131               	; nfa      = name field address
 132               	; pfa      = parameter field address
 133               	; cfap     = code field address pointer
 134               	
 135               	; orig     = address of an unresolved forward branch
 136               	; dest     = address of a backward branch target
 137               	
 138               	; cs-id    = control structure identifier
 139               	
 140               	; op       = Z80 8-bit opcode, generally a jump
 141               	; r        = Z80 8-bit register identifier
 142               	; rp       = Z80 16-bit register pair identifier
 143               	
 144               	; ----------------------------------------------
 145               	; Parsed text notation
 146               	
 147               	; XXX TODO
 148               	
 149               	; <char>          the delimiting character marking the end of the
 150               	;                 string being parsed
 151               	; <chars>         zero or more consecutive occurrences of the
 152               	;                 character char
 153               	; <space>         a delimiting space character
 154               	; <spaces>        zero or more consecutive occurrences of the
 155               	;                 character space
 156               	; <quote>         a delimiting double quote
 157               	; <paren>         a delimiting right parenthesis
 158               	; <eol>           an implied delimiter marking the end of a line
 159               	; ccc             a parsed sequence of arbitrary characters,
 160               	;                 excluding the delimiter character
 161               	; text            same as ccc
 162               	; name            a token delimited by space, equivalent to
 163               	;                 ccc<space> or ccc<eol>
 164               	
 165               	; ----------------------------------------------
 166               	; Word attributes
 167               	
 168               	; XXX TODO -- finish
 169               	
 170               	; The capital letters on the right show definition characteristics:
 171               	
GAS LISTING solo_forth.for_as.z80s 			page 5


 172               	; C      May only be used within a colon definition. A digit indicates number
 173               	;        of memory addresses used, if other than one. A plus sign indicates
 174               	;        a variable number of memory addresses used.
 175               	; E      Intended for execution only.
 176               	; I      Immediate. Has precedence bit set. Will execute even when compiling.
 177               	; U      A user variable.
 178               	
 179               	; ==============================================================
 180               	; Configuration
 181               	
 182               	  ; XXX FIXME Pasmo gives strange errors (symbols not found)
 183               	  ; when some config flags are used in nested `if`. A literal
 184               	  ; flag (0/1) is used instead, with the flag name in a comment;
 185               	  ; it is changed with a text substitution.  Some Vim mappings
 186               	  ; are created to turn them on on an off.
 187               	
 188               	  ; XXX experimental
 189               	size_optimization: equ false
 190               	  ; true = some code pieces are more compact but slower.
 191               	  ; false = normal, faster code.
 192               	
 193               	  ; XXX TODO -- not used yet
 194               	fig_parsing: equ false
 195               	  ; true = the fig-Forth parsing method is used.
 196               	  ; false = parsing is modified after Forth-83 and ANS Forth.
 197               	
 198               	  ; XXX TODO
 199               	latin1_charset_in_bank: equ false
 200               	  ; true = a 224-char Latin 1 charset is stored in the memory bank.
 201               	  ; false = the default charset is used.
 202               	
 203               	ans_forth_block_size: equ false
 204               	  ; true = one 1024-byte block per screen ; XXX TODO
 205               	  ; false = two 512-byte blocks per screen
 206               	
 207               	  ; XXX TODO
 208               	; fig_exit: equ true
 209               	  ; true = fig-Forth `;s` is used
 210               	  ; false = Forth-83 and ANS Forth `exit` is used ; XXX FIXME
 211               	
 212               	  ; XXX TODO try false
 213               	  ; XXX FIXME still there are problems when compiler security is off
 214               	  ; XXX TMP 2015-08-16 Note: using 1 intead  of the label doesn't make a
 215               	  ; difference in the crash bug
 216               	;fig_compiler_security: equ true
 217               	  ; true = fig-Forth `?pairs' is used
 218               	  ; false = no checking during compilation of control
 219               	  ;   structures: smaller and faster code.
 220               	
 221               	  ; XXX TODO
 222               	show_version: equ false
 223               	
 224               	; ==============================================================
 225               	; Symbols
 226               	
 227               	; ----------------------------------------------
 228               	; Forth
GAS LISTING solo_forth.for_as.z80s 			page 6


 229               	
 230               	origin:                           equ 0x5E00
 231               	
 232               	false:                            equ 0
 233               	true:                             equ 1
 234               	.if true==(-1)
 235               	  ; XXX FIXME
 236               	  ; There were problems when true=-1, but it seems they have
 237               	  ; disappeared after switching to the one buffer method.
 238               	  .warning TRUE is -1
 239               	.endif
 240               	
 241               	cell:                             equ 2
 242               	
 243               	cells_per_data_stack:             equ 0x50
 244               	cells_per_return_stack:           equ 0x50
 245               	
 246               	bytes_per_terminal_input_buffer:  equ 0x50
 247               	
 248               	buffers:                          equ 0x01
 249               	
 250               	.if ans_forth_block_size
 251               	
 252               	data_bytes_per_buffer:            equ 0x0400
 253               	blocks_per_screen:                equ 0x01
 254               	
 255               	.else
 256               	
 257               	data_bytes_per_buffer:            equ 0x0200
 258               	blocks_per_screen:                equ 0x02
 259               	
 260               	.endif
 261               	
 262               	total_bytes_per_buffer:           equ 2+data_bytes_per_buffer+3
 263               	
 264               	screens_per_disk:                 equ 0x030C ; 780 KiB per disk in G+DOS
 265               	characters_per_line:              equ 0x40
 266               	lines_per_screen:                 equ 0x10
 267               	max_search_order:                 equ 0x08 ; maximum number of vocabularies in the search order
 268               	bytes_per_user_variables:         equ 0x40
 269               	
 270               	smudge_bit:       equ 5
 271               	smudge_mask:      equ 1 << smudge_bit
 272               	precedence_bit:   equ 6
 273               	precedence_mask:  equ 1 << precedence_bit
 274               	
 275               	max_word_length:            equ 0x1F
 276               	max_word_length_mask:       equ max_word_length
 277               	
 278               	csb_size:                       equ 256 ; size of the circular string buffer
 279               	
 280               	; Memory banks
 281               	
 282               	default_bank: equ 0
 283               	names_bank:   equ 1
 284               	
 285               	names_bank_address: equ 0xC000 ; names pointers
GAS LISTING solo_forth.for_as.z80s 			page 7


 286               	
 287               	; Charset
 288               	
 289               	charset_size:     equ 224*8 ; 224 chars (0x20..0xFF) * 8 bitmap rows
 290               	charset_address:  equ 0xFFFF-charset_size+1
 291               	
 292               	; Control structure check numbers
 293               	
 294               	; XXX TODO -- not used yet
 295               	;begin_structure_check_number:   equ 1
 296               	;if_structure_check_number:      equ 2
 297               	;do_structure_check_number:      equ 3
 298               	;case_structure_check_number:    equ 4
 299               	;of_structure_check_number:      equ 5
 300               	;for_structure_check_number:     equ 6
 301               	
 302               	; Error messages are in the disk, starting from the screen
 303               	; number hold in the `msg-scr` constant.  Error codes 0, 16, 32
 304               	; etc are not used, because they coincide with the first line of
 305               	; screens.
 306               	
 307               	; XXX TODO change the order
 308               	
 309               	error.not_understood:               equ 01
 310               	error.stack_empty:                  equ 02
 311               	error.dictionary_full:              equ 03 ; not used
 312               	error.not_unique:                   equ 04
 313               	error.not_found:                    equ 05
 314               	error.out_of_disk_range:            equ 06
 315               	error.full_stack:                   equ 07
 316               	error.number_08:                    equ 08 ; free
 317               	error.loading_from_screen_0:        equ 09
 318               	error.number_10:                    equ 10 ; free
 319               	error.number_11:                    equ 11 ; free
 320               	error.number_12:                    equ 12 ; free
 321               	error.number_13:                    equ 13 ; free
 322               	error.number_14:                    equ 14 ; free
 323               	error.deferred_word_uninitialized:  equ 15
 324               	error.compilation_only:             equ 17
 325               	error.execution_only:               equ 18
 326               	error.conditionals_not_paired:      equ 19
 327               	error.definition_not_finished:      equ 20
 328               	error.protected_dictionary:         equ 21
 329               	error.loading_only:                 equ 22
 330               	error.off_current_editing_screen:   equ 23
 331               	error.declare_vocabulary:           equ 24
 332               	error.unsupported_tape_operation:   equ 25
 333               	error.unsupported_disk_operation:   equ 26
 334               	error.source_file_needed:           equ 27
 335               	error.not_present_though_required:  equ 28
 336               	error.required_but_not_located:     equ 29
 337               	error.branch_too_long:              equ 30
 338               	error.number_31:                    equ 31 ; free
 339               	error.number_33:                    equ 32 ; free
 340               	
 341               	; ----------------------------------------------
 342               	; ZX Spectrum
GAS LISTING solo_forth.for_as.z80s 			page 8


 343               	
 344               	include "inc/zx_spectrum_char_codes.z80s"
   1               	; ZX Spectrum char codes
   2               	
   3               	; By Marcos Cruz (programandala.net)
   4               	
   5               	; 2015-01-11: Start. Created from sources of two projects. That's why there
   6               	; are synonyms.
   7               	; 2015-01-14: Label fixed.
   8               	
   9               	caps_char:                  equ 0x06 ; toggle caps lock
  10               	print_comma_char:           equ 0x06 ; (when printed)
  11               	edit_char:                  equ 0x07 ; edit
  12               	esc_char:                   equ 0x07 ; escape
  13               	cursor_left_char:           equ 0x08
  14               	backspace_char:             equ 0x08
  15               	bs_char:                    equ 0x08 ; backspace
  16               	left_char:                  equ 0x08 ; cursor left
  17               	cursor_right_char:          equ 0x09
  18               	right_char:                 equ 0x09 ; cursor right
  19               	cursor_down_char:           equ 0x0a
  20               	down_char:                  equ 0x0a ; cursor down
  21               	cursor_up_char:             equ 0x0b
  22               	up_char:                    equ 0x0b ; cursor up
  23               	delete_left_char:           equ 0x0c
  24               	delete_char:                equ 0x0c ; delete (backspace)
  25               	form_feed_char:             equ 0x0c ; used for printing
  26               	carriage_return_char:       equ 0x0d
  27               	cr_char:                    equ 0x0d ; carriage return (enter key)
  28               	extended_mode_char:         equ 0x0e ; Fuse associates it to the host's Tab key
  29               	graphics_char:              equ 0x0f ; toggle graphics mode
  30               	ink_char:                   equ 0x10
  31               	paper_char:                 equ 0x11
  32               	flash_char:                 equ 0x12
  33               	bright_char:                equ 0x13
  34               	inverse_char:               equ 0x14
  35               	over_char:                  equ 0x15
  36               	at_char:                    equ 0x16
  37               	tab_char:                   equ 0x17 ; tab (screen only)
  38               	space_char:                 equ 0x20
  39               	sp_char:                    equ 0x20 ; space
  40               	copy_char:                  equ 0x7f ; copyright sign
  41               	copyright_char:             equ 0x7f ; copyright sign
 345               	
 346               	include "inc/zx_spectrum_rom_routines.z80s"
   1               	; ZX Spectrum ROM routines
   2               	
   3               	; By Marcos Cruz (programandala.net)
   4               	
   5               	; 2014-12-17: Start. Regulary improved afterwards.
   6               	; 2015-05-24: Changes to make the file usable as symbols input
   7               	; file by z80dasm.
   8               	; 2015-08-20: Updated.
   9               	
  10               	rom_alpha:           equ 0x2C8D
  11               	rom_beeper:          equ 0x03B5
  12               	rom_border:          equ 0x2294
GAS LISTING solo_forth.for_as.z80s 			page 9


  13               	rom_border_2297:     equ 0x2297 ; secondary entry to rom_border
  14               	rom_border_229b:     equ 0x229B ; secondary entry to rom_border
  15               	rom_break_key:       equ 0x1F54 ; called in several instances to read the BREAK key; the carry flag
  16               	rom_call_jump:       equ 0x229B ; JP (HL)
  17               	rom_chan_open:       equ 0x1601 ; open a channel (channel in A)
  18               	rom_chan_s:          equ 0x1642 ; set flags for upper screen channel
  19               	rom_cl_all:          equ 0x0DAF ; clearing whole (upper) display area
  20               	rom_cls:             equ 0x0D6B ; CLS
  21               	rom_cls_lower:       equ 0x0D6E 
  22               	rom_draw:            equ 0x24BA ; point of the draw_line routine
  23               	rom_find_int1:       equ 0x1E94
  24               	rom_fp_to_a:         equ 0x2DD5
  25               	rom_fp_to_bc:        equ 0x2DA2
  26               	rom_go_to_bc:        equ 0x1E6A ; 'GO TO' line in BC register
  27               	rom_go_to_hl:        equ 0x1E6C ; 'GO TO' line in HL register XXX not tested
  28               	rom_hl_by_de_to_hl:  equ 0x30A9 ; HL=HL*DE
  29               	rom_key_decode:      equ 0x0333
  30               	rom_keyboard:        equ 0x02BF
  31               	rom_key_scan:        equ 0x028E
  32               	rom_key_test:        equ 0x031E
  33               	rom_main_g:          equ 0x1303 ; runtime error (error in A)
  34               	rom_pixel_add:       equ 0x22AA
  35               	rom_plot_22df:       equ 0x22DF ; secondary entry to PLOT
  36               	rom_plot_sub:        equ 0x22E5 ; the plot subroutine (coords in BC)
  37               	rom_point_sub_22ce:  equ 0x22CE ; secondary entry to POINT-SUB
  38               	rom_pr_string:       equ 0x203C ; print a string (start in de, count in BC)
  39               	rom_print_string:    equ 0x203C
  40               	rom_print_fp:        equ 0x2DE3 ; print a floating point number
  41               	rom_sa_all:          equ 0x075A ; tape save/load
  42               	rom_s_attr_s_2583:   equ 0x2583 ; secondary entry to S-ATTR-S
  43               	rom_s_scrn_s_2538:   equ 0x2538 ; secondary entry to S-SCRN$-S
  44               	rom_stack_bc:        equ 0x2D2B ; stack bc register pair
  45               	rom_stack_fetch:     equ 0x2BF1 ; get last value from calculator stack
  46               	
  47               	; Special entry points:
  48               	
  49               	rom_set_permanent_colors_0x1CAD: equ 0x1CAD
 347               	
 348               	include "inc/zx_spectrum_system_variables.z80s"
   1               	; ZX Spectrum system variables
   2               	
   3               	; By Marcos Cruz (programandala.net)
   4               	
   5               	; 2014-12-17: Converted from the HTML version of the ZX Spectrum manual, with
   6               	; the help of Vim.  Regulary improved afterwards.
   7               	;
   8               	; 2015-01-12: New: first two ZX Spectrum +3 variables.
   9               	; 2015-01-15: New: 'sys_flags3'.
  10               	; 2015-01-16: New: all ZX Spectrum +3 variables.
  11               	; 2015-05-24: Changes to make the file usable as symbols input
  12               	; file by z80dasm.
  13               	
  14               	; --------------------------------------------------------------
  15               	; ZX Spectrum +3
  16               	
  17               	sys_nmiadd:      equ 23728 ; (2)
  18               	
GAS LISTING solo_forth.for_as.z80s 			page 10


  19               	; The system variable at 5CB0h (23728) was documented on previous models of the
  20               	; Spectrum as 'Not used'. It is now used on the +3 as an NMI jump vector. If an
  21               	; NMI occurs, this address is checked. If it contains a 0, then no action is
  22               	; taken. However, for any other (non-zero) value, a jump will be made to the
  23               	; address given by this variable. NMIs must not occur while the disk system is
  24               	; active.
  25               	
  26               	sys_swap:           equ 23296 ; (0x5B00) (R16)
  27               	                              ; Paging subroutine.
  28               	sys_stoo:           equ 23312 ; (0x5B10) (R17)
  29               	                              ; Paging subroutine. Entered with
  30               	                              ; interrupts already disabled and AF, BC
  31               	                              ; on the stack.
  32               	sys_younger:        equ 23329 ; (0x5B21) (R9)
  33               	                              ; Paging subroutine.
  34               	sys_regnuoy:        equ 23338 ; (0x5B2A) (R16)
  35               	                              ; Paging subroutine.
  36               	sys_onerr:          equ 23354 ; (0x5B3A) (R24)
  37               	                              ; Paging subroutine.
  38               	sys_oldhl:          equ 23378 ; (0x5B52) (X2)
  39               	                              ; Temporary register store while
  40               	                              ; switching ROMs.
  41               	sys_oldbc:          equ 23380 ; (0x5B54) (X2)
  42               	                              ; Temporary register store while
  43               	                              ; switching ROMs.
  44               	sys_oldaf:          equ 23382 ; (0x5B56) (X2)
  45               	                              ; Temporary register store while
  46               	                              ; switching ROMs.
  47               	sys_target:         equ 23384 ; (0x5B58) (N2)
  48               	                              ; Subroutine address in ROM 3.
  49               	sys_retaddr:        equ 23386 ; (0x5B5A) (X2)
  50               	                              ; Return address in ROM 1.
  51               	sys_bankm:          equ 23388 ; (0x5B5C) (X1)
  52               	                              ; Copy of last byte output to I/O port
  53               	                              ; 7FFDh (32765). This port is used to
  54               	                              ; control the RAM paging (bits 0...2),
  55               	                              ; the 'horizontal' ROM switch (01 and
  56               	                              ; 23 - bit 4), screen selection (bit
  57               	                              ; 3) and added I/O disabling (bit 5).
  58               	                              ; This byte must be kept up to date with
  59               	                              ; the last value output to the port if
  60               	                              ; interrupts are enabled.
  61               	sys_ramrst:         equ 23389 ; (0x5B5D) (X1)
  62               	                              ; RST 8 instruction. Used by ROM 1 to
  63               	                              ; report old errors to ROM 3.
  64               	sys_ramerr:         equ 23390 ; (0x5B5E) (N1)
  65               	                              ; Error number passed from ROM 1 to ROM
  66               	                              ; 3. Also used by SAVE/LOAD as temporary
  67               	                              ; drive store.
  68               	sys_baud:           equ 23391 ; (0x5B5F) (2)
  69               	                              ; RS232 bit period in T states/26. Set
  70               	                              ; by FORMAT LINE.
  71               	sys_serfl:          equ 23393 ; (0x5B61) (N2)
  72               	                              ; Second-character-received-flag, and
  73               	                              ; data.
  74               	sys_col:            equ 23395 ; (0x5B63) (N1)
  75               	                              ; Current column from 1 to width.
GAS LISTING solo_forth.for_as.z80s 			page 11


  76               	sys_width:          equ 23396 ; (0x5B64) (1)
  77               	                              ; Paper column width. Defaults to 80.
  78               	sys_tvpars:         equ 23397 ; (0x5B65) (1)
  79               	                              ; Number of inline parameters expected
  80               	                              ; by RS232
  81               	
  82               	sys_flags3:         equ 23398 ; (0x5B66) (1)
  83               	                              ; Various flags. Bits 0, 1, 6 and 7
  84               	                              ; unlikely to be useful. Bit 2 is set
  85               	                              ; when tokens are to be expanded on
  86               	                              ; printing. Bit 3 is set if print output
  87               	                              ; is RS232. The default (at reset) is
  88               	                              ; Centronics. Bit 4 is set if a disk
  89               	                              ; interface is present. Bit 5 is set if
  90               	                              ; drive B: is present.
  91               	sys_bank678:        equ 23399 ; (0x5B67) (X1)
  92               	                              ; Copy of last byte output to I/O port
  93               	                              ; 1FFDh (8189). This port is used to
  94               	                              ; control the +3 extended RAM and ROM
  95               	                              ; switching (bits 0..2 - if bit 0 is 0
  96               	                              ; then bit 2 controls the 'vertical' ROM
  97               	                              ; switch 02 and 13), the disk
  98               	                              ; motor (bit 3) and Centronics strobe
  99               	                              ; (bit 4). This byte must be kept up to
 100               	                              ; date with the last value output to the
 101               	                              ; port if interrupts are enabled.
 102               	sys_xloc:           equ 23400 ; (0x5B68) (N1)
 103               	                              ; Holds X location when using the
 104               	                              ; unexpanded COPY command.
 105               	sys_yloc:           equ 23401 ; (0x5B69) (N1)
 106               	                              ; Holds Y location when using the
 107               	                              ; unexpanded COPY command.
 108               	sys_oldsp:          equ 23402 ; (0x5B6A) (X2)
 109               	                              ; Old SP (stack pointer) when TSTACK is
 110               	                              ; in use.
 111               	sys_synret:         equ 23404 ; (0x5B6C) (X2)
 112               	                              ; Return address for ONERR.
 113               	sys_lastv:          equ 23406 ; (0x5B6E) (5)
 114               	                              ; Last value printed by calculator.
 115               	sys_rcline:         equ 23411 ; (0x5B73) (2)
 116               	                              ; Current line being renumbered.
 117               	sys_rcstart:        equ 23413 ; (0x5B75) (2)
 118               	                              ; Starting line number for
 119               	                              ; renumbering. The default value is 10.
 120               	sys_rcstep:         equ 23415 ; (0x5B77) (2)
 121               	                              ; Incremental value for renumbering. The
 122               	                              ; default is 10.
 123               	sys_loddrv:         equ 23417 ; (0x5B79) (1)
 124               	                              ; Holds 'T' if LOAD, VERIFY, MERGE are
 125               	                              ; from tape, otherwise holds 'A', 'B'
 126               	                              ; or 'M'.
 127               	sys_savdrv:         equ 23418 ; (0x5B7A) (1)
 128               	                              ; Holds 'T' if SAVE is to tape,
 129               	                              ; otherwise holds 'A', 'B' or 'M'.
 130               	sys_dumplf:         equ 23419 ; (0x5B7B) (1)
 131               	                              ; Holds the number of 1/216ths user for
 132               	                              ; line feeds in 'COPY EXP'. This is
GAS LISTING solo_forth.for_as.z80s 			page 12


 133               	                              ; normally set to 9. If problems are
 134               	                              ; experienced fitting a dump onto a
 135               	                              ; sheet of A4 paper, POKE this
 136               	                              ; location with 8. This will reduce the
 137               	                              ; size of the dump and improve the
 138               	                              ; aspect ratio slightly. (The quality of
 139               	                              ; the dump will be marginally degraded,
 140               	                              ; however.)
 141               	sys_strip1:         equ 23420 ; (0x5B7C) (N8)
 142               	                              ; Stripe one bitmap.
 143               	sys_strip2:         equ 23428 ; (0x5B84) (N8)
 144               	                              ; Stripe two bitmap. This extends to
 145               	                              ; 5B8Bh (23436).
 146               	sys_tstack:         equ 23551 ; (0x5BFF) (X115)
 147               	                              ; Temporary stack grows down from
 148               	                              ; here. Used when RAM page 7 is switched
 149               	                              ; in at top of memory (while executing
 150               	                              ; the editor or calling +3DOS). it may
 151               	                              ; safely go down to 5B8Ch (and across
 152               	                              ; STRIP1 and STRIP2 if necessary). This
 153               	                              ; guarantees at least 115 bytes of stack
 154               	                              ; when BASIC calls +3DOS.
 155               	
 156               	; --------------------------------------------------------------
 157               	; ZX Spectrum 48K
 158               	
 159               	sys_kstate:      equ 23552 ; (n8) Used in reading the keyboard.
 160               	sys_last_k:      equ 23560 ; (nl) Stores newly pressed key.
 161               	sys_last_key:    equ 23560
 162               	sys_repdel:      equ 23561 ; (1) Time (in 50ths of a second
 163               	                           ; in 60ths of a second in N. America) that a key must
 164               	                           ; be held down before it repeats.
 165               	                           ; This starts off at 35, but you can POKE in other values.
 166               	sys_repper:      equ 23562 ; (1) Delay (in 50ths of a second in 60ths of a second
 167               	                           ; in N. America) between successive repeats
 168               	                           ; of a key held down: initially 5.
 169               	sys_defadd:      equ 23563 ; (n2) Address of arguments of user defined function
 170               	                           ; if one is being evaluated; otherwise 0.
 171               	sys_k_data:      equ 23565 ; (nl) Stores 2nd byte of colour controls
 172               	                           ; entered from keyboard.
 173               	sys_tvdata:      equ 23566 ; (n2) Stores bytes of colour, AT and TAB controls
 174               	                           ; going to television.
 175               	sys_strms:       equ 23568 ; (x38) Addresses of channels attached to streams.
 176               	sys_chars:       equ 23606 ; (2) 256 less than address of character set
 177               	sys_rasp:        equ 23608 ; (1) Length of warning buzz.
 178               	sys_pip:         equ 23609 ; (1) Length of keyboard click.
 179               	
 180               	; sys_err_nr is pointed by IY
 181               	
 182               	sys_err_nr:      equ 23610 ; (1) 1 less than the report code.
 183               	                           ; Starts off at 255 (for 1) so PEEK 23610 gives 255.
 184               	sys_flags:       equ 23611 ; (x1) Various flags to control the BASIC system.
 185               	sys_tv_flag:     equ 23612 ; (x1) Flags associated with the television.
 186               	sys_err_sp:      equ 23613 ; (x2) Address of item on machine stack
 187               	                           ; to be used as error return.
 188               	sys_list_sp:     equ 23615 ; (n2) Address of return address from automatic listing.
 189               	sys_mode:        equ 23617 ; (n1) Specifies K, L, C. E or G cursor.
GAS LISTING solo_forth.for_as.z80s 			page 13


 190               	sys_newppc:      equ 23618 ; (2) Line to be jumped to.
 191               	sys_nsppc:       equ 23620 ; (1) Statement number in line to be jumped to.
 192               	                           ; Poking first NEWPPC and then NSPPC
 193               	                           ; forces a jump to a specified statement in a line.
 194               	sys_ppc:         equ 23621 ; (2) Line number of statement currently being executed.
 195               	sys_subppc:      equ 23623 ; (1) Number within line of statement being executed.
 196               	sys_bordcr:      equ 23624 ; (1) Border colour * 8; also contains the attributes
 197               	                           ; normally used for the lower half of the screen.
 198               	sys_e_ppc:       equ 23625 ; (2) Number of current line (with program cursor).
 199               	sys_vars:        equ 23627 ; (x2) Address of variables.
 200               	sys_dest:        equ 23629 ; (n2) Address of variable in assignment.
 201               	sys_chans:       equ 23631 ; (x2) Address of channel data.
 202               	sys_curchl:      equ 23633 ; (x2) Address of information currently being used
 203               	                           ; for input and output.
 204               	sys_prog:        equ 23635 ; (x2) Address of BASIC program.
 205               	sys_nxtlin:      equ 23637 ; (x2) Address of next line in program.
 206               	sys_datadd:      equ 23639 ; (x2) Address of terminator of last DATA item.
 207               	sys_e_line:      equ 23641 ; (x2) Address of command being typed in.
 208               	sys_k_cur:       equ 23643 ; (2) Address of cursor.
 209               	sys_ch_add:      equ 23645 ; (x2) Address of the next character to be interpreted:
 210               	                           ; the character after the argument of PEEK,
 211               	                           ; or the NEWLINE at the end of a POKE statement.
 212               	sys_x_ptr:       equ 23647 ; (2) Address of the character after the ? marker.
 213               	sys_worksp:      equ 23649 ; (x2) Address of temporary work space.
 214               	sys_stkbot:      equ 23651 ; (x2) Address of bottom of calculator stack.
 215               	sys_stkend:      equ 23653 ; (x2) Address of start of spare space.
 216               	sys_breg:        equ 23655 ; (n1) Calculator's b register.
 217               	sys_mem:         equ 23656 ; (n2) Address of area used for calculator's memory.
 218               	                           ; (Usually MEMBOT, but not always.)
 219               	sys_flags2:      equ 23658 ; (1) More flags.
 220               	sys_df_sz:       equ 23659 ; (x1) The number of lines (including one blank line)
 221               	                           ; in the lower part of the screen.
 222               	sys_s_top:       equ 23660 ; (2) The number of the top program line in automatic listings.
 223               	sys_oldppc:      equ 23662 ; (2) Line number to which CONTINUE jumps.
 224               	sys_ospcc:       equ 23664 ; (1) Number within line of statement
 225               	                           ; to which CONTINUE jumps.
 226               	sys_flagx:       equ 23665 ; (n1) Various flags.
 227               	sys_strlen:      equ 23666 ; (n2) Length of string type destination in assignment.
 228               	sys_t_addr:      equ 23668 ; (n2) Address of next item in syntax table
 229               	                           ; (very unlikely to be useful).
 230               	sys_seed:        equ 23670 ; (2) The seed for RND.
 231               	                           ; This is the variable that is set by RANDOMIZE.
 232               	sys_frames:      equ 23672 ; (3) 3 byte (least significant first), frame counter.
 233               	                           ; Incremented every 20ms.
 234               	sys_udg:         equ 23675 ; (2) Address of 1st user defined graphic.
 235               	sys_coords:      equ 23677 ; (2) coordinates of last point plotted.
 236               	sys_coordx:      equ 23677 ; (1) x-coordinate of last point plotted.
 237               	sys_coordy:      equ 23678 ; (1) y-coordinate of last point plotted.
 238               	sys_p_posn:      equ 23679 ; (1) 33 column number of printer position
 239               	sys_pr_cc:       equ 23680 ; (1) Less significant byte of address
 240               	                           ; of next position for LPRINT to print at
 241               	                           ; (in printer buffer).
 242               	sys_unused0:     equ 23681 ; (1) Not used.
 243               	sys_echo_e:      equ 23682 ; (2) 33 column number and 24 line number
 244               	                           ; (in lower half) of end of input buffer.
 245               	sys_df_cc:       equ 23684 ; (2) Address in display file of PRINT position.
 246               	sys_dfccl:       equ 23686 ; (2) Like DF CC for lower part of screen.
GAS LISTING solo_forth.for_as.z80s 			page 14


 247               	sys_s_posn:      equ 23688 ; (x2) 33 column and 24 line number for PRINT position
 248               	sys_s_posx:      equ 23688 ; (x1) 33 column number for PRINT position
 249               	sys_s_posy:      equ 23689 ; (x1) 24 line number for PRINT position.
 250               	sys_s_posn2:     equ 23689
 251               	sys_sposnl:      equ 23690 ; (x2) Like S POSN for lower part
 252               	sys_scr_ct:      equ 23692 ; (1) Counts scrolls:
 253               	                           ; it is always 1 more than the number of scrolls that
 254               	                           ; will be done before stopping with scroll?  If you keep
 255               	                           ; poking this with a number bigger than 1 (say 255), the
 256               	                           ; screen will scroll on and on without asking you.
 257               	sys_attr_p:      equ 23693 ; (1) Permanent current colours, etc
 258               	                           ; (as set up by colour statements).
 259               	sys_mask_p:      equ 23694 ; (1) Used for transparent colours, etc.
 260               	                           ; Any bit that is 1 shows that the corresponding
 261               	                           ; attribute bit is taken not from ATTR P, but from what
 262               	                           ; is already on the screen.
 263               	sys_attr_t:      equ 23695 ; (n1) Temporary current colours, etc
 264               	                           ; (as set up by colour items).
 265               	sys_mask_t:      equ 23696 ; (n1) Like MASK P, but temporary.
 266               	sys_p_flag:      equ 23697 ; (1) More flags.
 267               	sys_membot:      equ 23698 ; (n30) Calculator's memory area;
 268               	                           ; used to store numbers that cannot
 269               	                           ; conveniently be put on the calculator stack.
 270               	sys_unused1:     equ 23728 ; (1) Not used.
 271               	sys_unused2:     equ 23729 ; (1) Not used.
 272               	sys_ramtop:      equ 23730 ; (2) Address of last byte of BASIC system area.
 273               	sys_p_ramt:      equ 23732 ; (2) Address of last byte of physical RAM.
 274               	
 275               	; Some offsets
 276               	
 277               	sys_df_sz_offset:  equ sys_df_sz-sys_err_nr
 278               	sys_last_k_offset: equ sys_last_k-sys_err_nr
 279               	sys_scr_ct_offset: equ sys_scr_ct-sys_err_nr
 349               	
 350               	sys_screen:                 equ 0x4000
 351               	sys_screen_size:            equ 0x1B00
 352               	sys_screen_bitmap_size:     equ 0x1800
 353               	sys_screen_attributes:      equ 0x5800
 354               	sys_screen_attributes_size: equ 0x0300
 355               	
 356               	bank1_port:   equ 0x7FFD
 357               	border_port:  equ 0xFE
 358               	
 359               	; ==============================================================
 360               	; Data section
 361               	
 362               	  ; The data section holds part of the header definitions: the names
 363               	  ; fields, the link fields and the pointers to code fields.
 364               	  ;
 365               	  ; It is placed at 0xC000. The first execution of Solo Forth will
 366               	  ; copy its contents to a memory bank.
 367               	  ;
 368               	  ; The data section must be at the start of the source; else the
 369               	  ; required fake length byte is not compiled.
 370               	
 371               	  .data
 372               	
GAS LISTING solo_forth.for_as.z80s 			page 15


 373 0000 00        	  db 0 ; fake length byte, needed by the algorithm used in `cfa>nfa`
 374               	
 375               	data_start:
 376               	
 377 0001 6A05 0000 	  .text
 377      4100 7205 
 377      0500 0546 
 377      4F52 5448 
 377      7805 0B00 
 378               	
 379               	; ==============================================================
 380               	; Entry points
 381               	
 382               	  .text
 383               	
 384               	cold_entry:
 385               	  ; Location (of the destination address): `0x01 +origin`
 386 0000 C38E 16   	  jp cold_start
 387               	warm_entry:
 388               	  ; Location (of the destination address): `0x04 +origin`
 389 0003 C326 16   	  jp warm_start
 390               	
 391               	; ==============================================================
 392               	; Parameter area
 393               	
 394               	  ; XXX TODO document the `+origin` index
 395               	
 396               	latest_nfa_in_root_voc.init_value:
 397 0006 1500      	  dw latest_nfa_in_root_voc
 398               	
 399               	latest_nfa_in_forth_voc.init_value:
 400 0008 0E10      	  dw latest_nfa_in_forth_voc
 401               	
 402               	latest_nfa_in_assembler_voc.init_value:
 403 000a A100      	  dw latest_nfa_in_assembler_voc
 404               	
 405               	voc_link.init_value:
 406 000c 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 407               	
 408               	user_variables_pointer:
 409 000e 3200      	  dw user_variables
 410               	
 411               	return_stack_pointer:
 412 0010 0703      	  dw return_stack_bottom
 413               	
 414               	default_color_attribute:
 415 0012 0400      	  dw 4 ; low byte: green paper, black ink; high byte: no mask
 416               	
 417               	  ; XXX TODO
 418               	.if show_version
 419               	version_status_variable:
 420               	  dw version_status
 421               	version_branch_variable:
 422               	  dw version_branch
 423               	version_release_variable:
 424               	  dw version_release mod 0xFFFF
 425               	  dw version_release / 0xFFFF
GAS LISTING solo_forth.for_as.z80s 			page 16


 426               	.endif
 427               	
 428               	  ; User variables default values
 429               	
 430               	  ; The first eight user variables have default values.  They are used
 431               	  ; by `cold` to overwrite the correspondent user variables.  They must
 432               	  ; be in the same order than user variables.
 433               	
 434               	default_user_variables_start:
 435               	
 436               	s0_init_value:
 437 0014 1402      	  dw data_stack_bottom
 438               	r0_init_value:
 439 0016 0703      	  dw return_stack_bottom
 440 0018 0000      	  dw 0x0000 ; XXX OLD -- tib
 441               	width_init_value:
 442 001a 1F00      	  dw max_word_length
 443               	warning_init_value:
 444 001c 0000      	  dw 0x0000
 445 001e 0000      	  dw 0x0000 ; XXX OLD -- fence
 446               	dp_init_value:
 447 0020 C41D      	  dw dictionary_pointer_after_cold
 448               	
 449               	  ; XXX TODO move
 450 0022 0000      	  dw 0x0000 ; XXX free
 451               	
 452               	  ; XXX TODO this four user variables do not need init and this
 453               	  ; space could be saved; they are included here because `#tib`
 454               	  ; must be init; it should be moved to user variable +0x10.
 455               	
 456               	blk_init_value:
 457 0024 0000      	  dw 0x0000
 458               	in_init_value:
 459 0026 0000      	  dw 0x0000
 460               	out_init_value:
 461 0028 0000      	  dw 0x0000
 462               	scr_init_value:
 463 002a 0000      	  dw 0x0000
 464               	
 465               	; XXX OLD
 466               	;number_tib_init_value:
 467               	;  dw bytes_per_terminal_input_buffer
 468               	
 469               	default_user_variables_end:
 470               	
 471               	ip_backup: ; temporary copy of Forth IP
 472 002c 0000      	  dw 0
 473               	
 474               	; XXX FIXME binutils bug?
 475               	; With this `defl`, `np` doesn't change its value (0xC001);
 476               	; without it, it keeps the first value assigned with `defl`
 477               	; in the `_header` macro (0xC00A).
 478               	; np defl names_bank_address+1
 479               	
 480               	np defl data_start
 481               	
 482               	names_pointer:
GAS LISTING solo_forth.for_as.z80s 			page 17


 483               	  ; First free address in the names bank,  restored by `cold`.
 484 002e 0100      	  dw np
 485               	
 486               	names_pointer_init_value:
 487               	  ; Init value of the names pointer, used by `cold`.
 488 0030 0100      	  dw np
 489               	
 490               	; ==============================================================
 491               	; User variables
 492               	
 493               	user_variables:
 494               	
 495               	  ; Note: the first eight user variables are initialized with
 496               	  ; default values by `cold`.  They must be in the same order
 497               	  ; than their default variables.
 498               	
 499               	s0_value: ; +0x00
 500 0032 1402      	  dw data_stack_bottom
 501               	r0_value: ; +0x02
 502 0034 0703      	  dw return_stack_bottom
 503               	  ; +0x04
 504 0036 0000      	  dw 0x0000 ; XXX OLD -- tib
 505               	width_value: ; +0x06
 506 0038 1F00      	  dw max_word_length
 507               	warning_value: ; +0x08
 508 003a 0000      	  dw 0x0000
 509               	  ; +0x0A
 510 003c 0000      	  dw 0x0000 ; XXX OLD -- fence
 511               	dp_value: ; +0x0C
 512 003e C41D      	  dw dictionary_pointer_after_cold
 513               	
 514               	  ; XXX TODO move
 515 0040 0000      	  dw 0x0000 ; +0x0E free
 516               	
 517               	blk_value: ; +0x10
 518 0042 0000      	  dw 0x0000
 519               	in_value: ; +0x12
 520 0044 0000      	  dw 0x0000
 521               	out_value: ; +0x14
 522 0046 0000      	  dw 0x0000
 523               	scr_value: ; +0x16
 524 0048 0000      	  dw 0x0000
 525               	number_tib_value: ; +0x18
 526 004a 0000      	  dw 0x0000
 527               	hld_value: ; +0x1A
 528 004c 0000      	  dw 0x0000
 529               	current_value: ; +0x1C
 530 004e 0000      	  dw 0x0000
 531               	state_value: ; +0x1E
 532 0050 0000      	  dw 0x0000
 533               	base_value: ; +0x20
 534 0052 0A00      	  dw 0x000A
 535               	dpl_value: ; +0x22
 536 0054 0000      	  dw 0x0000
 537               	fld_value: ; +0x24
 538 0056 0000      	  dw 0x0000
 539               	csp_value: ; +0x26
GAS LISTING solo_forth.for_as.z80s 			page 18


 540 0058 0000      	  dw 0x0000
 541               	r_hash_value: ; +0x28 ; XXX OLD -- used by the editor, remove
 542 005a 0000      	  dw 0x0000
 543               	
 544               	context_value: ; +0x2A..+0x38
 545               	
 546 005c 5506      	  dw forth_pfa
 547 005e 4F06      	  dw root_pfa
 548 0060 0000 0000 	  ds (max_search_order-2)*cell
 548      0000 0000 
 548      0000 0000 
 549 006c 0000      	  dw 0x0000 ; end of search order, required by `find` \ XXX TODO improve and remove
 550               	
 551               	  ; Unused
 552 006e 0000      	  dw 0x0000
 553 0070 0000      	  dw 0x0000
 554               	
 555               	.if ($-user_variables) != bytes_per_user_variables
 556               	  .error "The space reserved for user variables is wrong."
 557               	.endif
 558               	
 559               	; ==============================================================
 560               	; Stacks and buffers
 561               	
 562               	; ----------------------------------------------
 563               	; Circular string buffer
 564               	
 565               	csb:
 566               	unused_csb:
 567 0072 0001      	  dw csb_size ; unused space in the buffer
 568               	csb0:
 569 0074 0000 0000 	  ds csb_size
 569      0000 0000 
 569      0000 0000 
 569      0000 0000 
 569      0000 0000 
 570               	csb_total_size: equ $-csb
 571               	
 572               	; ----------------------------------------------
 573               	; Data stack
 574               	
 575               	data_stack_limit: equ $+cell
 576 0174 0000 0000 	  ds cells_per_data_stack*cell
 576      0000 0000 
 576      0000 0000 
 576      0000 0000 
 576      0000 0000 
 577               	data_stack_bottom:
 578               	
 579               	; ----------------------------------------------
 580               	; Terminal input buffer
 581               	
 582               	terminal_input_buffer:
 583 0214 0000 0000 	  ds bytes_per_terminal_input_buffer
 583      0000 0000 
 583      0000 0000 
 583      0000 0000 
GAS LISTING solo_forth.for_as.z80s 			page 19


 583      0000 0000 
 584 0264 0000 00   	  ds 3 ; for the null word
 585               	
 586               	; ----------------------------------------------
 587               	; Return stack
 588               	
 589               	return_stack_limit: equ $+cell
 590 0267 0000 0000 	  ds cells_per_return_stack*cell
 590      0000 0000 
 590      0000 0000 
 590      0000 0000 
 590      0000 0000 
 591               	return_stack_bottom:
 592               	
 593               	; ----------------------------------------------
 594               	; Disk buffer
 595               	
 596               	buffer_block_id_mask: equ 0x7FFF
 597               	
 598               	; A block id is the number of the associated block, with the
 599               	; sign bit indicating, when it's set, that the buffer has been
 600               	; modified.
 601               	
 602               	disk_buffer:
 603               	
 604 0307 FF7F      	dw buffer_block_id_mask     ; Block id used when the  buffer
 605               	                            ; is not associated with a block.
 606 0309 0000 0000 	ds data_bytes_per_buffer    ; Actual content of the block,
 606      0000 0000 
 606      0000 0000 
 606      0000 0000 
 606      0000 0000 
 607               	                            ; a disk sector.
 608 0509 2000 20   	db space_char,0,space_char  ; Null word, required by the parsing words.
 609               	
 610               	; ==============================================================
 611               	; Macros
 612               	
 613               	; ----------------------------------------------
 614               	; Header
 615               	
 616               	immediate: equ precedence_mask ; used as optional parameter
 617               	
 618               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 619               	; current_vocabulary defl forth_pfa \ XXX OLD
 620               	
 621               	_header: .macro _base_label,_name,_immediate=0
 622               	
 623               	  ; In dictionary:
 624               	
 625               	  .text
 626               	
 627               	\_base_label: ; code field address
 628               	
 629               	  ; In memory bank:
 630               	
 631               	  .data
GAS LISTING solo_forth.for_as.z80s 			page 20


 632               	
 633               	\_base_label\()cfap: 
 634               	    dw \_base_label ; code field address pointer
 635               	\_base_label\()lfa: ; link field address
 636               	    dw nfa_of_the_previous_word ; link field
 637               	\_base_label\()nfa: ; name field address
 638               	
 639               	  ; Name field
 640               	  db 0f-$-1+\_immediate
 641               	  db "\_name"
 642               	0:
 643               	
 644               	;np defl $ ; update the names pointer ; XXX does not work
 645               	np defl . ; XXX it works, depending on strange things; the symbol is updated and also appears in th
 646               	
 647               	  ; In dictionary:
 648               	  
 649               	  .text
 650               	
 651               	nfa_of_the_previous_word defl \_base_label\()nfa
 652               	
 653               	  .endm
 654               	
 655               	_header_with_special_name: .macro _base_label,_name0,_name1,_name2,_immediate=0
 656               	
 657               	  ; In dictionary:
 658               	
 659               	  .text
 660               	
 661               	\_base_label: ; code field address
 662               	
 663               	  ; In memory bank:
 664               	
 665               	  .data
 666               	
 667               	\_base_label\()cfap: 
 668               	    dw \_base_label ; code field address pointer
 669               	\_base_label\()lfa: ; link field address
 670               	    dw nfa_of_the_previous_word ; link field
 671               	\_base_label\()nfa: ; name field address
 672               	
 673               	  ; Name field
 674               	  db 0f-$-1+\_immediate
 675               	  db "\_name0",\_name1,"\_name2"
 676               	0:
 677               	
 678               	;np defl $ ; update the names pointer ; XXX does not work
 679               	np defl . ; XXX it works, depending on strange things; the symbol is updated and also appears in th
 680               	
 681               	  ; In dictionary:
 682               	  
 683               	  .text
 684               	
 685               	nfa_of_the_previous_word defl \_base_label\()nfa
 686               	
 687               	  .endm
 688               	
GAS LISTING solo_forth.for_as.z80s 			page 21


 689               	_code_header: .macro _base_label,_name,_immediate=0
 690               	
 691               	  _header \_base_label,"\_name",\_immediate
 692               	  dw \_base_label\()pfa ; code field
 693               	  \_base_label\()pfa: ; parameter field address
 694               	
 695               	  .endm
 696               	
 697               	_code_header_with_special_name: .macro _base_label,_name0,_name1,_name2,_immediate=0
 698               	
 699               	  _header_with_special_name \_base_label,"\_name0",\_name1,"\_name2",\_immediate
 700               	  dw \_base_label\()pfa ; code field
 701               	  \_base_label\()pfa: ; parameter field address
 702               	
 703               	  .endm
 704               	
 705               	_code_alias_header: .macro _base_label,_name,_immediate=0,_alias
 706               	
 707               	  _header \_base_label,"\_name",\_immediate
 708               	  dw \_alias\()pfa ; code field
 709               	
 710               	  .endm
 711               	
 712               	_colon_header: .macro _base_label,_name,_immediate=0
 713               	
 714               	  _header \_base_label,"\_name",\_immediate
 715               	  dw do_colon ; code field
 716               	  \_base_label\()pfa: ; parameter field address
 717               	
 718               	  .endm
 719               	
 720               	_colon_header_with_special_name: .macro _base_label,_name0,_name1,_name2,_immediate=0
 721               	
 722               	  _header_with_special_name \_base_label,"\_name0",\_name1,"\_name2",\_immediate
 723               	  dw do_colon ; code field
 724               	  \_base_label\()pfa: ; parameter field address
 725               	
 726               	  .endm
 727               	
 728               	_user_variable_header: .macro _base_label,_name,_immediate=0
 729               	
 730               	  _header \_base_label,"\_name",\_immediate
 731               	  dw do_user ; code field
 732               	  \_base_label\()pfa: ; parameter field address
 733               	
 734               	  .endm
 735               	
 736               	_does_header: .macro _base_label,_name,_immediate=0,_runtime_routine
 737               	
 738               	  _header \_base_label,"\_name",\_immediate
 739               	
 740               	  dw \_runtime_routine ; code field
 741               	  \_base_label\()pfa: ; parameter field address
 742               	
 743               	  .endm
 744               	
 745               	_constant_header: .macro _base_label,_name,_immediate=0
GAS LISTING solo_forth.for_as.z80s 			page 22


 746               	
 747               	  _header \_base_label,"\_name",\_immediate
 748               	  dw do_constant ; code field
 749               	  \_base_label\()pfa: ; parameter field address
 750               	
 751               	  .endm
 752               	
 753               	_variable_header: .macro _base_label,_name,_immediate=0
 754               	
 755               	  _header \_base_label,"\_name",\_immediate
 756               	  dw do_create ; code field
 757               	  \_base_label\()pfa: ; parameter field address
 758               	
 759               	  .endm
 760               	
 761               	_two_variable_header: .macro _base_label,_name,_immediate=0
 762               	
 763               	  _variable_header \_base_label,"\_name",\_immediate
 764               	
 765               	  .endm
 766               	
 767               	; ----------------------------------------------
 768               	; Literals
 769               	
 770               	_string: .macro _text
 771               	
 772               	  db 0f-$-1 ; length byte
 773               	  db "\_text"
 774               	0:
 775               	
 776               	.endm
 777               	
 778               	_literal: .macro _n
 779               	
 780               	  .if \_n==0
 781               	    dw zero_
 782               	  .elseif \_n==1
 783               	    dw one_
 784               	  .elseif \_n==2
 785               	    dw two_
 786               	  .elseif \_n>=0 && \_n<=255
 787               	    dw c_lit_
 788               	    db \_n
 789               	  .else
 790               	    dw lit_
 791               	    dw \_n
 792               	  .endif
 793               	  .endm
 794               	
 795               	; ----------------------------------------------
 796               	; Jumps
 797               	
 798               	_jp_next: .macro
 799               	
 800               	  jp (ix)
 801               	
 802               	  .endm
GAS LISTING solo_forth.for_as.z80s 			page 23


 803               	
 804               	; Create relative or absolute jumps, depending on the configured optimization
 805               	
 806               	_jump: .macro _address
 807               	  .if size_optimization
 808               	    jr \_address
 809               	  .else
 810               	    jp \_address
 811               	  .endif
 812               	  .endm
 813               	
 814               	_jump_nc: .macro _address
 815               	  .if size_optimization
 816               	    jr nc,\_address
 817               	  .else
 818               	    jp nc,\_address
 819               	  .endif
 820               	  .endm
 821               	
 822               	_jump_z: .macro _address
 823               	  .if size_optimization
 824               	    jr z,\_address
 825               	  .else
 826               	    jp z,\_address
 827               	  .endif
 828               	  .endm
 829               	
 830               	; ----------------------------------------------
 831               	; Bank
 832               	
 833               	_bank: .macro _n
 834               	  _literal \_n
 835               	  dw bank_
 836               	  .endm
 837               	
 838               	_names_bank: .macro
 839               	  _bank names_bank
 840               	  .endm
 841               	
 842               	_default_bank: .macro
 843               	  _bank default_bank
 844               	  .endm
 845               	
 846               	; ----------------------------------------------
 847               	; Error messages
 848               	
 849               	_question_error: .macro _error
 850               	  _literal \_error
 851               	  dw question_error_
 852               	  .endm
 853               	
 854               	_message: .macro _error
 855               	  _literal \_error
 856               	  dw message_
 857               	  .endm
 858               	
 859               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 24


 860               	; Debug
 861               	
 862               	_z80_border: .macro _color
 863               	  push af
 864               	  push bc
 865               	  ld a,\_color
 866               	  out (border_port),a
 867               	  ld bc,0
 868               	_z80_border_pause: defl $
 869               	  dec bc
 870               	  ld a,b
 871               	  or c
 872               	  jr nz,_z80_border_pause
 873               	  pop bc
 874               	  pop af
 875               	  .endm
 876               	
 877               	_z80_border_wait: .macro _color
 878               	  push af
 879               	  ld a,\_color
 880               	  out (border_port),a
 881               	  xor a
 882               	  ld (sys_last_k),a
 883               	_z80_border_wait_pause: defl $
 884               	  ld a,(sys_last_k)
 885               	  and a
 886               	  jr z,_z80_border_wait_pause
 887               	  pop af
 888               	  .endm
 889               	
 890               	_echo: .macro _txt
 891               	  dw cr_,paren_dot_quote_
 892               	  _string "\_txt"
 893               	  .endm
 894               	
 895               	; ==============================================================
 896               	; Misc routines
 897               	
 898               	; [Code from DZX-Forth.]
 899               	
 900               	; ----------------------------------------------
 901               	; Compare de and hl
 902               	
 903               	compare_de_hl_unsigned:
 904               	
 905               	  ; Input:  de, hl
 906               	  ; Output:
 907               	  ;  flag C if hl < de
 908               	  ;  flag Z if hl = de
 909               	
 910 050c 7C        	  ld a,h
 911 050d BA        	  cp d
 912 050e C0        	  ret nz
 913 050f 7D        	  ld a,l
 914 0510 BB        	  cp e
 915 0511 C9        	  ret
 916               	
GAS LISTING solo_forth.for_as.z80s 			page 25


 917               	compare_de_hl_signed:
 918               	
 919               	  ; Input:  de, hl
 920               	  ; Output: flag C if hl < de
 921               	
 922 0512 7C        	  ld a,h
 923 0513 AA        	  xor d
 924 0514 F20C 05   	  jp p,compare_de_hl_unsigned
 925 0517 7C        	  ld a,h
 926 0518 B7        	  or a
 927 0519 F0        	  ret p
 928 051a 37        	  scf
 929 051b C9        	  ret
 930               	
 931               	; ----------------------------------------------
 932               	; Move block
 933               	
 934               	move_block:
 935               	
 936               	  ; Input:
 937               	  ; hl = source
 938               	  ; de = destination
 939               	  ; bc = count
 940               	
 941               	  ; If bc is greater than zero, copy the contents of bc consecutive address
 942               	  ; units at hl to the bc consecutive address units at de. After the move
 943               	  ; completes, the bc consecutive address units at de contain exactly what the
 944               	  ; bc consecutive address units at hl contained before the move.
 945               	
 946 051c CD0C 05   	  call compare_de_hl_unsigned
 947 051f DA28 05   	  jp c,move_block_downwards
 948               	
 949               	; ----------------------------------------------
 950               	; Move block upwards
 951               	
 952               	move_block_upwards:
 953               	
 954               	  ; Input:
 955               	  ; hl = source
 956               	  ; de = destination
 957               	  ; bc = count
 958               	
 959               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 960               	  ; space starting at hl to that starting at de, proceeding
 961               	  ; character-by-character from lower addresses to higher addresses.
 962               	
 963 0522 79        	  ld a,c
 964 0523 B0        	  or b
 965 0524 C8        	  ret z
 966 0525 EDB0      	  ldir
 967 0527 C9        	  ret
 968               	
 969               	; ----------------------------------------------
 970               	; Move block downwards
 971               	
 972               	  ; Input:
 973               	  ; hl = source
GAS LISTING solo_forth.for_as.z80s 			page 26


 974               	  ; de = destination
 975               	  ; bc = count
 976               	
 977               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 978               	  ; space starting at hl to that starting at de, proceeding
 979               	  ; character-by-character from higher addresses to lower addresses.
 980               	
 981               	move_block_downwards:
 982               	
 983 0528 79        	  ld a,c
 984 0529 B0        	  or b
 985 052a C8        	  ret z
 986 052b 09        	  add hl,bc
 987 052c 2B        	  dec hl
 988 052d EB        	  ex de,hl
 989 052e 09        	  add hl,bc
 990 052f 2B        	  dec hl
 991 0530 EB        	  ex de,hl
 992 0531 EDB8      	  lddr
 993 0533 C9        	  ret
 994               	
 995               	; ----------------------------------------------
 996               	; Multiplication primitives
 997               	
 998               	; AHL <- A * DE
 999               	
 1000               	a_multiplied_by_de_to_ahl:
 1001 0534 2100 00   	  ld hl,0
 1002 0537 0E08      	  ld c,8
 1003               	a_multiplied_by_de_to_ahl.1:
 1004 0539 29        	  add hl,hl
 1005 053a 17        	  rla
 1006 053b D241 05   	  jp nc,a_multiplied_by_de_to_ahl.2
 1007 053e 19        	  add hl,de
 1008 053f CE00      	  adc a,0
 1009               	a_multiplied_by_de_to_ahl.2:
 1010 0541 0D        	  dec c
 1011 0542 C239 05   	  jp nz,a_multiplied_by_de_to_ahl.1
 1012 0545 C9        	  ret
 1013               	
 1014               	; Unsigned 16*16 multiply, 32-bit result
 1015               	
 1016               	; HLDE <- HL * DE
 1017               	
 1018               	hl_multiplied_by_de_to_hlde_unsigned:
 1019 0546 C5        	  push bc ; save Forth IP
 1020 0547 44        	  ld b,h
 1021 0548 7D        	  ld a,l
 1022 0549 CD34 05   	  call a_multiplied_by_de_to_ahl
 1023 054c E5        	  push hl
 1024 054d 67        	  ld h,a
 1025 054e 78        	  ld a,b
 1026 054f 44        	  ld b,h
 1027 0550 CD34 05   	  call a_multiplied_by_de_to_ahl
 1028 0553 D1        	  pop de
 1029 0554 4A        	  ld c,d
 1030 0555 09        	  add hl,bc
GAS LISTING solo_forth.for_as.z80s 			page 27


 1031 0556 CE00      	  adc a,0
 1032 0558 55        	  ld d,l
 1033 0559 6C        	  ld l,h
 1034 055a 67        	  ld h,a
 1035 055b C1        	  pop bc ; restore Forth IP
 1036 055c C9        	  ret
 1037               	
 1038               	; ==============================================================
 1039               	; :Inner interpreter
 1040               	
 1041               	push_hlde:
 1042 055d D5        	  push de
 1043               	
 1044               	push_hl:
 1045 055e E5        	  push hl
 1046               	
 1047               	next:
 1048               	  ; Execute the word whose cfa is in the address pointed by the bc register.
 1049               	  ; Forth: W  <-- (IP)
 1050               	  ; Z80:   hl <-- (bc)
 1051 055f 0A        	  ld a,(bc)
 1052 0560 6F        	  ld l,a
 1053 0561 03        	  inc bc ; inc IP
 1054 0562 0A        	  ld a,(bc)
 1055 0563 67        	  ld h,a
 1056 0564 03        	  inc bc ; inc IP
 1057               	  ; bc = address of the next cfa
 1058               	  ; hl = cfa
 1059               	
 1060               	next2:
 1061               	  ; Execute the word whose cfa is in the hl register.
 1062               	  ; Forth: PC <-- (W)
 1063               	  ; Z80:   pc <-- (hl)
 1064 0565 5E        	  ld e,(hl)
 1065 0566 23        	  inc hl
 1066 0567 56        	  ld d,(hl)
 1067 0568 EB        	  ex de,hl
 1068               	  ; hl = (cfa) = address of the code
 1069               	  ; de = cfa+1 = pfa-1
 1070               	
 1071               	next2_end: ; XXX TMP for debugging
 1072 0569 E9        	  jp (hl)
 1073               	
 1074               	; ==============================================================
 1075               	; Dictionary
 1076               	
 1077               	; ----------------------------------------------
 1078               	; Start compiling in the `root` vocabulary
 1079               	
 1080               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1081               	; current_vocabulary defl root_pfa
 1082               	
 1083               	; ----------------------------------------------
 1084               	  ;_code_header root_x_,"\x00",immediate ; XXX OLD not understood by `as`
 1085 056a 6C05      	  _code_header_with_special_name root_x_,"",0,"",immediate
 1086               	
 1087               	; doc{
GAS LISTING solo_forth.for_as.z80s 			page 28


 1088               	
 1089               	; x  ( -- )
 1090               	
 1091               	; This is a pseudonym for an alias of the "null" word that is
 1092               	; defined in the `forth` vocabulary.
 1093               	
 1094               	; }doc
 1095               	
 1096 056c 211B 11   	  ld hl,x_ ; cfa of the actual null word
 1097 056f C365 05   	  jp next2 ; execute it
 1098               	
 1099               	; ----------------------------------------------
 1100 0572 650C      	  _colon_header root_forth_,"FORTH"
 1101               	
 1102 0574 5306      	  dw forth_
 1103 0576 C00A      	  dw semicolon_s_
 1104               	
 1105               	; ----------------------------------------------
 1106 0578 650C      	  _colon_header root_definitions_,"DEFINITIONS"
 1107               	
 1108 057a 8A15      	  dw definitions_
 1109 057c C00A      	  dw semicolon_s_
 1110               	
 1111               	latest_nfa_in_root_voc: equ root_definitions_nfa
 1112               	
 1113               	; ----------------------------------------------
 1114               	; Start compiling in the `assembler` vocabulary
 1115               	
 1116               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1117               	; current_vocabulary defl forth_pfa
 1118               	
 1119               	; ----------------------------------------------
 1120 057e 1A14      	  _variable_header abase_,"ABASE"
 1121               	
 1122               	; doc{
 1123               	;
 1124               	; abase  ( -- a )
 1125               	;
 1126               	; A variable used to save the current value of `base` in
 1127               	; assembler definitions.
 1128               	;
 1129               	; }doc
 1130               	
 1131 0580 0000      	  dw 0
 1132               	
 1133               	; ----------------------------------------------
 1134 0582 650C      	  _colon_header asm_,"ASM"
 1135               	
 1136               	; doc{
 1137               	;
 1138               	; asm  ( -- )
 1139               	;
 1140               	; Enter the assembler mode.
 1141               	;
 1142               	; }doc
 1143               	
 1144               	  ; [Idea taken from Coos Haak's Z80 Forth assembler.]
GAS LISTING solo_forth.for_as.z80s 			page 29


 1145               	
 1146 0584 960C      	  dw noop_ ; to be patched by the assembler
 1147 0586 330D 1A0C 	  dw base_,fetch_,abase_,store_ ; save the current base
 1147      7E05 490C 
 1148 058e B30F      	  dw hex_
 1149 0590 FD05 5906 	  dw also_,assembler_ ; XXX TODO better
 1150 0594 C00A      	  dw semicolon_s_
 1151               	
 1152               	; ----------------------------------------------
 1153 0596 650C      	  _colon_header end_asm_,"END-ASM"
 1154               	
 1155               	; doc{
 1156               	;
 1157               	; end-asm  ( -- )
 1158               	;
 1159               	; Exit the assembler mode.
 1160               	;
 1161               	; }doc
 1162               	
 1163 0598 2306      	  dw previous_ ; restore the search order ; XXX TODO better
 1164 059a 7E05 1A0C 	  dw abase_,fetch_,base_,store_ ; restore `base`
 1164      330D 490C 
 1165 05a2 C00A      	  dw semicolon_s_
 1166               	
 1167               	; ----------------------------------------------
 1168 05a4 650C      	  _colon_header end_code_,"END-CODE"
 1169               	
 1170 05a6 480F 9605 	  dw question_csp_,end_asm_,smudge_
 1170      A00F 
 1171 05ac C00A      	  dw semicolon_s_
 1172               	
 1173               	; ----------------------------------------------
 1174 05ae A00C      	  _constant_header next_,"NEXT"
 1175               	
 1176 05b0 5F05      	  dw next
 1177               	
 1178               	; ----------------------------------------------
 1179               	  ; _constant_header next_,"NEXT2"
 1180               	
 1181               	  ; ; XXX OLD -- added for the second version of `defer`, but
 1182               	  ; ; not needed
 1183               	  
 1184               	  ; dw next2
 1185               	
 1186               	; ----------------------------------------------
 1187 05b2 A00C      	  _constant_header pushhl_,"PUSHHL"
 1188               	
 1189 05b4 5E05      	  dw push_hl
 1190               	
 1191               	; ----------------------------------------------
 1192 05b6 A00C      	  _constant_header pushhlde_,"PUSHHLDE"
 1193               	
 1194 05b8 5D05      	  dw push_hlde
 1195               	
 1196               	; ----------------------------------------------
 1197 05ba A00C      	  _constant_header fetchhl_,"FETCHHL"
 1198               	
GAS LISTING solo_forth.for_as.z80s 			page 30


 1199 05bc 1D0C      	  dw fetch.hl
 1200               	
 1201               	; ----------------------------------------------
 1202 05be 650C      	  _colon_header next_comma_,"NEXT,"
 1203               	
 1204               	; doc{
 1205               	;
 1206               	; next,  ( -- )
 1207               	; 
 1208               	; Compile a Z80 jump to `next`.
 1209               	;
 1210               	; }doc
 1211               	
 1212 05c0 8D06 DDE9 	  dw lit_,0xE9DD ; opcode `jp (ix)`
 1213 05c4 B20D      	  dw comma_
 1214 05c6 C00A      	  dw semicolon_s_
 1215               	
 1216               	; ----------------------------------------------
 1217 05c8 650C      	  _colon_header pushhl_comma_,"PUSHHL,"
 1218               	
 1219               	; doc{
 1220               	;
 1221               	; pushhl,  ( -- )
 1222               	; 
 1223               	; Compile a Z80 jump to `pushhl`.
 1224               	;
 1225               	; }doc
 1226               	
 1227 05ca 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1228 05cd C60D      	  dw c_comma_
 1229 05cf 8D06 5E05 	  dw lit_,push_hl,comma_
 1229      B20D 
 1230 05d5 C00A      	  dw semicolon_s_
 1231               	
 1232               	; ----------------------------------------------
 1233 05d7 650C      	  _colon_header pushhlde_comma_,"PUSHHLDE,"
 1234               	
 1235               	; doc{
 1236               	;
 1237               	; pushhlde,  ( -- )
 1238               	; 
 1239               	; Compile a Z80 jump to `pushhlde`.
 1240               	;
 1241               	; }doc
 1242               	
 1243 05d9 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1244 05dc C60D      	  dw c_comma_
 1245 05de 8D06 5D05 	  dw lit_,push_hlde,comma_
 1245      B20D 
 1246 05e4 C00A      	  dw semicolon_s_
 1247               	
 1248               	; ----------------------------------------------
 1249 05e6 650C      	  _colon_header fetchhl_comma_,"FETCHHL,"
 1250               	
 1251               	; doc{
 1252               	;
 1253               	; fetchhl,  ( -- )
GAS LISTING solo_forth.for_as.z80s 			page 31


 1254               	; 
 1255               	; Compile a Z80 jump to `fetchhl`.
 1256               	;
 1257               	; }doc
 1258               	
 1259 05e8 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1260 05eb C60D      	  dw c_comma_
 1261 05ed 8D06 1D0C 	  dw lit_,fetch.hl,comma_
 1261      B20D 
 1262 05f3 C00A      	  dw semicolon_s_
 1263               	
 1264               	latest_nfa_in_assembler_voc: equ fetchhl_comma_nfa
 1265               	
 1266               	; ----------------------------------------------
 1267               	; Start compiling in the `forth` vocabulary
 1268               	
 1269               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1270               	; current_vocabulary defl forth_pfa
 1271               	
 1272               	
 1273               	; ----------------------------------------------
 1274 05f5 650C      	  _colon_header label_,"LABEL"
 1275               	
 1276 05f7 1214 8205 	  dw create_,asm_
 1277 05fb C00A      	  dw semicolon_s_
 1278               	
 1279               	; ----------------------------------------------
 1280 05fd 650C      	  _colon_header also_,"ALSO"
 1281               	
 1282               	; doc{
 1283               	;
 1284               	; also  ( -- )
 1285               	;
 1286               	; Duplicate the vocabulary at the top of the search order.
 1287               	;
 1288               	; }doc
 1289               	
 1290               	; [Code adapted from F83.]
 1291               	
 1292               	; : also  ( -- )
 1293               	;   context dup cell+ [ #vocs 2- cells ] literal cmove>  ;
 1294               	
 1295 05ff 2A0D E00B 	  dw context_,dup_,cell_plus_
 1295      680D 
 1296 0605 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell
 1297 0609 DA09      	  dw cmove_up_
 1298 060b C00A      	  dw semicolon_s_
 1299               	
 1300               	; ----------------------------------------------
 1301 060d 650C      	  _colon_header minus_order_,"-ORDER"
 1302               	
 1303               	; : -order  ( -- )  context [ #vocs cells ] literal erase  ;
 1304               	
 1305 060f 2A0D 8D06 	  dw context_,lit_,max_search_order*cell,erase_
 1305      1000 5611 
 1306 0617 C00A      	  dw semicolon_s_
 1307               	
GAS LISTING solo_forth.for_as.z80s 			page 32


 1308               	; ----------------------------------------------
 1309 0619 650C      	  _colon_header only_,"ONLY"
 1310               	
 1311               	; doc{
 1312               	;
 1313               	; only  ( -- )
 1314               	;
 1315               	; Erase the search order and forces the `root` vocabulary to
 1316               	; be the first and second.
 1317               	;
 1318               	; }doc
 1319               	
 1320               	; [Code adapted from F83.]
 1321               	
 1322               	; : only  ( -- )  -order root also  ;
 1323               	
 1324 061b 0D06 4D06 	  dw minus_order_,root_,also_
 1324      FD05 
 1325 0621 C00A      	  dw semicolon_s_
 1326               	
 1327               	; ----------------------------------------------
 1328 0623 650C      	  _colon_header previous_,"PREVIOUS"
 1329               	
 1330               	; doc{
 1331               	;
 1332               	; previous  ( -- )
 1333               	;
 1334               	; Remove the most recently referenced vocabulary from the search
 1335               	; order.
 1336               	;
 1337               	; }doc
 1338               	
 1339               	; [Code adapted from F83.]
 1340               	
 1341               	; : previous  ( -- )
 1342               	;   context dup cell+ swap [ #vocs 2- cells dup ] literal cmove
 1343               	;   context literal + off  ;
 1344               	
 1345 0625 2A0D E00B 	  dw context_,dup_,cell_plus_,swap_
 1345      680D D90B 
 1346 062d 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell,cmove_
 1346      E609 
 1347 0633 2A0D 8D06 	  dw context_,lit_,(max_search_order-cell)*cell,plus_,off_
 1347      0C00 810B 
 1347      FD0B 
 1348 063d C00A      	  dw semicolon_s_
 1349               	
 1350               	; ----------------------------------------------
 1351 063f 650C      	  _colon_header seal_,"SEAL"
 1352               	
 1353               	; doc{
 1354               	;
 1355               	; seal  ( -- )
 1356               	;
 1357               	; Change the search order such that only the vocabulary at the
 1358               	; top of the search order will be searched.
 1359               	;
GAS LISTING solo_forth.for_as.z80s 			page 33


 1360               	; }doc
 1361               	
 1362               	; [Code adapted from F83.]
 1363               	
 1364               	; : seal  ( -- )  context @ -order context !  ;
 1365               	
 1366 0641 2A0D 1A0C 	  dw context_,fetch_,minus_order_,context_,store_
 1366      0D06 2A0D 
 1366      490C 
 1367 064b C00A      	  dw semicolon_s_
 1368               	
 1369               	; ----------------------------------------------
 1370               	
 1371 064d 8115      	  _does_header root_,"ROOT",,do_vocabulary
 1372               	
 1373 064f 1500      	  dw latest_nfa_in_root_voc
 1374               	
 1375               	root_vocabulary_link:
 1376 0651 0000      	  dw 0x0000
 1377               	
 1378               	; ----------------------------------------------
 1379               	
 1380 0653 8115      	  _does_header forth_,"FORTH",,do_vocabulary
 1381               	
 1382 0655 0E10      	  dw latest_nfa_in_forth_voc ; nfa of the latest word defined in this vocabulary
 1383               	
 1384               	forth_vocabulary_link:
 1385 0657 5106      	  dw root_vocabulary_link
 1386               	
 1387               	; ----------------------------------------------
 1388 0659 8115      	  _does_header assembler_,"ASSEMBLER",,do_vocabulary
 1389               	
 1390               	; XXX TODO move `assembler` and everthing related
 1391               	; to the library disk?
 1392               	
 1393 065b A100      	  dw latest_nfa_in_assembler_voc
 1394               	assembler_vocabulary_link:
 1395 065d 5706      	  dw forth_vocabulary_link
 1396               	
 1397               	; ----------------------------------------------
 1398 065f 650C      	  _colon_header s_lit_,"SLIT"
 1399               	
 1400               	  ; : slit  ( -- ca len )  r@ count dup 1+ r> + >r  ;
 1401               	
 1402 0661 4F0B 0710 	  dw r_fetch_,count_,dup_,one_plus_
 1402      E00B 570D 
 1403 0669 FF0A 810B 	  dw from_r_,plus_,to_r_
 1403      F00A 
 1404 066f C00A      	  dw semicolon_s_
 1405               	
 1406               	; ----------------------------------------------
 1407 0671 650C      	  _colon_header paren_s_,"(S)"
 1408               	
 1409               	; doc{
 1410               	;
 1411               	; (s) ( compilation: c "text<c>" -- ) ( run-time:  -- ca len )
 1412               	;
GAS LISTING solo_forth.for_as.z80s 			page 34


 1413               	; }doc
 1414               	
 1415 0673 A711      	  dw parse_ ; ( ca len )
 1416 0675 1D0F      	  dw comp_question_
 1417 0677 6007 7F06 	  dw zero_branch_,paren_s.interpreting
 1418               	  ; compiling
 1419 067b B114      	  dw s_literal_
 1420 067d C00A      	  dw semicolon_s_ ; XXX TODO exit_
 1421               	paren_s.interpreting:
 1422 067f EA06      	  dw save_string_
 1423 0681 C00A      	  dw semicolon_s_
 1424               	
 1425               	; ----------------------------------------------
 1426 0683 8506      	  _code_header c_lit_,"CLIT"
 1427               	
 1428 0685 0A        	  ld a,(bc)
 1429 0686 03        	  inc bc
 1430               	  ; XXX TODO include these entry points in the `assembler` vocabulary?
 1431               	push_a:
 1432 0687 6F        	  ld l,a
 1433               	push_l: ; XXX TMP -- not used yet
 1434 0688 2600      	  ld h,0
 1435 068a C35E 05   	  jp push_hl
 1436               	
 1437               	; ----------------------------------------------
 1438 068d 8F06      	  _code_header lit_,"LIT"
 1439               	
 1440               	  ; XXX FIXME -- crash if not compiling
 1441               	  ; XXX TODO -- implement compile-only flag?
 1442               	
 1443 068f 0A        	  ld a,(bc)
 1444 0690 03        	  inc bc
 1445 0691 6F        	  ld l,a
 1446 0692 0A        	  ld a,(bc)
 1447 0693 03        	  inc bc
 1448 0694 67        	  ld h,a
 1449 0695 C35E 05   	  jp push_hl
 1450               	
 1451               	; ----------------------------------------------
 1452 0698 9A06      	  _code_header bank_,"BANK"
 1453               	
 1454               	; doc{
 1455               	;
 1456               	; bank  ( n -- )
 1457               	;
 1458               	; Page memory bank _n_ (0..7) at 0xC000..0xFFFF.
 1459               	;
 1460               	; }doc
 1461               	
 1462 069a D1        	  pop de ; e = bank
 1463 069b CDA0 06   	  call bank.e
 1464 069e DDE9      	  _jp_next
 1465               	
 1466               	bank.default:
 1467               	  ; XXX TODO ?
 1468               	bank.names:
 1469               	  ; XXX TODO ?
GAS LISTING solo_forth.for_as.z80s 			page 35


 1470               	bank.e:
 1471               	  ; ret ; XXX TMP for debugging
 1472 06a0 3A5C 5B   	  ld a,(sys_bankm) ; get the saved status of BANKM
 1473 06a3 E6F8      	  and 0xF8 ; erase bits 0-2
 1474 06a5 B3        	  or e ; modify bits 0-2
 1475 06a6 F3        	  di
 1476 06a7 325C 5B   	  ld (sys_bankm),a ; update BANKM
 1477 06aa D3FD      	  out (bank1_port),a ; page the bank
****  Warning:overflow
 1478 06ac FB        	  ei
 1479 06ad C9        	  ret
 1480               	
 1481               	; ----------------------------------------------
 1482 06ae B006      	  _code_header unused_csb_,"UNUSED-CSB"
 1483               	
 1484               	; doc{
 1485               	;
 1486               	; csb-unused  ( -- len )
 1487               	;
 1488               	; }doc
 1489               	
 1490 06b0 2A72 00   	  ld hl,(unused_csb)
 1491 06b3 C35E 05   	  jp push_hl
 1492               	
 1493               	; ----------------------------------------------
 1494 06b6 A00C      	  _constant_header csb0_,"CSB0"
 1495               	
 1496               	; doc{
 1497               	;
 1498               	; csb0  ( -- a )
 1499               	;
 1500               	; }doc
 1501               	
 1502 06b8 7400      	  dw csb0
 1503               	
 1504               	; ----------------------------------------------
 1505 06ba 650C      	  _colon_header question_csb_,"?CSB"
 1506               	
 1507               	; doc{
 1508               	;
 1509               	; ?csb  ( len -- )
 1510               	;
 1511               	; Make sure there's room for the given characters.
 1512               	;
 1513               	; }doc
 1514               	
 1515 06bc E00B 8D06 	  dw dup_,lit_,unused_csb,fetch_,greater_than_
 1515      7200 1A0C 
 1515      170E 
 1516 06c6 6007 D406 	  dw zero_branch_,question_csb_.enough
 1517               	  ; not enough space; reset the pointer
 1518 06ca 8D06 0001 	  _literal csb_size
 1519 06ce 8D06 7200 	  dw lit_,unused_csb,store_
 1519      490C 
 1520               	
 1521               	question_csb_.enough:
 1522 06d4 9B0B 8D06 	  dw negate_,lit_,unused_csb,plus_store_
GAS LISTING solo_forth.for_as.z80s 			page 36


 1522      7200 F00B 
 1523 06dc C00A      	  dw semicolon_s_
 1524               	
 1525               	; ----------------------------------------------
 1526 06de 650C      	  _colon_header allocate_string_,"ALLOCATE-STRING"
 1527               	
 1528               	; doc{
 1529               	;
 1530               	; string-allocate  ( len -- ca )
 1531               	;
 1532               	; }doc
 1533               	
 1534 06e0 BA06      	  dw question_csb_
 1535 06e2 B606 AE06 	  dw csb0_,unused_csb_,plus_
 1535      810B 
 1536 06e8 C00A      	  dw semicolon_s_
 1537               	
 1538               	; ----------------------------------------------
 1539 06ea 650C      	  _colon_header save_string_,"SAVE-STRING"
 1540               	
 1541               	; doc{
 1542               	;
 1543               	; save-string  ( ca1 len1 -- ca2 len1 )
 1544               	;
 1545               	; }doc
 1546               	
 1547 06ec E00B DE06 	  dw dup_,allocate_string_,swap_
 1547      D90B 
 1548 06f2 E70B 280B 	  dw two_dup_,two_to_r_
 1549 06f6 F209 370B 	  dw move_,two_from_r_
 1550 06fa C00A      	  dw semicolon_s_
 1551               	
 1552               	; ----------------------------------------------
 1553 06fc 650C      	  _colon_header save_counted_string_,"SAVE-COUNTED-STRING"
 1554               	
 1555               	; doc{
 1556               	;
 1557               	; save-counted-string  ( ca1 len1 -- ca2 )
 1558               	;
 1559               	; }doc
 1560               	
 1561               	; dup 1+ string-allocate dup >r $! r>
 1562               	
 1563 06fe E00B 570D 	  dw dup_,one_plus_,allocate_string_
 1563      DE06 
 1564 0704 E00B F00A 	  dw dup_,to_r_,dollar_store_,from_r_
 1564      D912 FF0A 
 1565 070c C00A      	  dw semicolon_s_
 1566               	
 1567               	; ----------------------------------------------
 1568 070e 650C      	  _colon_header empty_csb_,"EMPTY-CSB"
 1569               	
 1570               	; doc{
 1571               	;
 1572               	; empty-csb  ( -- )
 1573               	;
 1574               	; }doc
GAS LISTING solo_forth.for_as.z80s 			page 37


 1575               	
 1576 0710 8D06 7200 	  dw lit_,csb
 1577 0714 8D06 0201 	  _literal csb_total_size
 1578 0718 5611      	  dw erase_
 1579 071a C00A      	  dw semicolon_s_
 1580               	
 1581               	; ----------------------------------------------
 1582 071c 1E07      	  _code_header execute_,"EXECUTE"
 1583               	
 1584               	; doc{
 1585               	;
 1586               	; execute  ( cfa  -- )
 1587               	;
 1588               	; }doc
 1589               	
 1590 071e E1        	  pop hl
 1591 071f C365 05   	  jp next2
 1592               	
 1593               	; ----------------------------------------------
 1594 0722 2407      	  _code_header perform_,"PERFORM"
 1595               	
 1596               	; doc{
 1597               	;
 1598               	; perform  ( a  -- )
 1599               	;
 1600               	; Execute the word whose cfa is stored in _a_.  Do nothing if
 1601               	; the content of _a_ is zero.
 1602               	;
 1603               	; }doc
 1604               	
 1605 0724 E1        	  pop hl
 1606 0725 7E        	  ld a,(hl)
 1607 0726 23        	  inc hl
 1608 0727 66        	  ld h,(hl)
 1609 0728 6F        	  ld l,a
 1610 0729 B4        	  or h
 1611 072a C265 05   	  jp nz,next2
 1612 072d DDE9      	  _jp_next
 1613               	
 1614               	; ----------------------------------------------
 1615 072f 650C      	  _colon_header forward_mark_,">MARK"
 1616               	
 1617               	; doc{
 1618               	;
 1619               	; >mark  ( -- orig )  \ Forth-83, C, "forward-mark"
 1620               	;
 1621               	; Compile space in the dictionary for a branch address which
 1622               	; will later be resolved by `>resolve`.
 1623               	;
 1624               	; Used at the source of a forward branch.  Typically used after
 1625               	; either `branch`, `0branch` or `?branch`.
 1626               	;
 1627               	; }doc
 1628               	
 1629 0731 250F      	  dw question_comp_
 1630 0733 900D C50C 	  dw here_,zero_,comma_
 1630      B20D 
GAS LISTING solo_forth.for_as.z80s 			page 38


 1631 0739 C00A      	  dw semicolon_s_
 1632               	
 1633               	; ----------------------------------------------
 1634 073b 650C      	  _colon_header forward_resolve_,">RESOLVE"
 1635               	
 1636               	; doc{
 1637               	;
 1638               	; >resolve  ( orig -- )  \ Forth-83, C, "forward-resolve"
 1639               	;
 1640               	; Resolve a forward branch by placing the address of the current
 1641               	; dictionary pointer into the space compiled by `>mark`.
 1642               	;
 1643               	; }doc
 1644               	
 1645 073d 250F      	  dw question_comp_
 1646 073f 900D D90B 	  dw here_,swap_,store_
 1646      490C 
 1647 0745 C00A      	  dw semicolon_s_
 1648               	
 1649               	; ----------------------------------------------
 1650 0747 650C      	  _colon_header backward_mark_,"<MARK"
 1651               	
 1652               	; doc{
 1653               	;
 1654               	; <mark  ( -- dest )  \ Forth-83, C, "backward-mark"
 1655               	;
 1656               	; Leave the address of the current dictionary pointer, as the
 1657               	; the destination of a backward branch.  _dest_ is typically
 1658               	; only used by `<resolve` to compile a branch address.
 1659               	;
 1660               	; }doc
 1661               	
 1662 0749 250F      	  dw question_comp_
 1663 074b 900D      	  dw here_
 1664 074d C00A      	  dw semicolon_s_
 1665               	
 1666               	; ----------------------------------------------
 1667 074f 650C      	  _colon_header backward_resolve_,"<RESOLVE"
 1668               	
 1669               	; doc{
 1670               	;
 1671               	; <resolve  ( dest -- )  \ Forth-83, C, "backward-resolve"
 1672               	;
 1673               	; Resolve a backward branch.  Compile a branch address using
 1674               	; _dest_, the address left by `<mark`,  as the destination
 1675               	; address.  Used at the source of a backward branch after either
 1676               	; `branch` or `?branch` or `0branch`.
 1677               	;
 1678               	; }doc
 1679               	
 1680 0751 250F      	  dw question_comp_
 1681 0753 B20D      	  dw comma_
 1682 0755 C00A      	  dw semicolon_s_
 1683               	
 1684               	; ----------------------------------------------
 1685 0757 5907      	  _code_header branch_,"BRANCH"
 1686               	
GAS LISTING solo_forth.for_as.z80s 			page 39


 1687               	; doc{
 1688               	;
 1689               	; branch  ( -- )  \ ANS Forth
 1690               	;
 1691               	; The run-time procedure to branch unconditionally. An in-line
 1692               	; offset is copied to the interpretive pointer IP to branch
 1693               	; forward or backward.
 1694               	;
 1695               	; }doc
 1696               	
 1697 0759 60        	  ld h,b
 1698 075a 69        	  ld l,c ; hl = Forth IP, containing the address to jump to
 1699 075b 4E        	  ld c,(hl)
 1700 075c 23        	  inc hl
 1701 075d 46        	  ld b,(hl) ; bc = New Forth IP
 1702 075e DDE9      	  _jp_next
 1703               	
 1704               	; ----------------------------------------------
 1705 0760 6207      	  _code_header zero_branch_,"0BRANCH"
 1706               	
 1707               	; doc{
 1708               	;
 1709               	; 0branch  ( f -- )  \ fig-Forth
 1710               	;
 1711               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1712               	; is false (zero), the following in-line address is copied to IP
 1713               	; to branch forward or  backward.
 1714               	;
 1715               	; }doc
 1716               	
 1717 0762 E1        	  pop hl
 1718 0763 7D        	  ld a,l
 1719 0764 B4        	  or h
 1720 0765 CA59 07   	  jp z,branch_pfa ; branch if zero
 1721 0768 03        	  inc bc
 1722 0769 03        	  inc bc ; skip the inline branch address
 1723 076a DDE9      	  _jp_next
 1724               	
 1725               	; ----------------------------------------------
 1726 076c 6E07      	  _code_header question_branch_,"?BRANCH"
 1727               	
 1728               	; doc{
 1729               	;
 1730               	; ?branch  ( f -- )
 1731               	;
 1732               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1733               	; is not zero, the following in-line address is copied to IP to
 1734               	; branch forward or backward.
 1735               	;
 1736               	; Note: This is not Forth-83's `?branch`: Forth-83's `?branch`
 1737               	; does the same than fig-Forth's `0branch`: the branch is done
 1738               	; when the flag is zero. Solo Forth includes fig-Forth's
 1739               	; `0branch` and also `?branch`, that branches when the flag is
 1740               	; not zero.
 1741               	;
 1742               	; }doc
 1743               	
GAS LISTING solo_forth.for_as.z80s 			page 40


 1744 076e E1        	  pop hl
 1745 076f 7D        	  ld a,l
 1746 0770 B4        	  or h
 1747 0771 C259 07   	  jp nz,branch_pfa ; branch if not zero
 1748 0774 03        	  inc bc
 1749 0775 03        	  inc bc ; skip the inline branch address
 1750 0776 DDE9      	  _jp_next
 1751               	
 1752               	; ----------------------------------------------
 1753 0778 7A07      	  _code_header paren_loop_,"(LOOP)"
 1754               	
 1755               	  ; XXX NOTE:
 1756               	  ;
 1757               	  ; This code is from Abersoft Fort.  It's the same code used in
 1758               	  ; `(+loop)` in fig-Forth 1.1g.  The author of Abersoft Forth
 1759               	  ; used it to write `(loop)` and wrote `(+loop)` with a simple
 1760               	  ; call to it, what saves code.
 1761               	  ;
 1762               	  ; XXX TODO -- The `(loop)` of DZX-Forth is much faster, but
 1763               	  ; requires and additional parameter on the return stack.
 1764               	
 1765 077a 1101 00   	  ld de,0x0001
 1766               	paren_loop.step_in_de:
 1767 077d 2A10 00   	  ld hl,(return_stack_pointer)
 1768 0780 7E        	  ld a,(hl)
 1769 0781 83        	  add a,e
 1770 0782 77        	  ld (hl),a
 1771 0783 5F        	  ld e,a
 1772 0784 23        	  inc hl
 1773 0785 7E        	  ld a,(hl)
 1774 0786 8A        	  adc a,d
 1775 0787 77        	  ld (hl),a
 1776 0788 23        	  inc hl ; (hl) = limit
 1777 0789 14        	  inc d
 1778 078a 15        	  dec d
 1779 078b 57        	  ld d,a ; de = new index
 1780 078c FA97 07   	  jp m,paren_loop.negative_step
 1781               	
 1782               	  ; increment>0
 1783 078f 7B        	  ld a,e
 1784 0790 96        	  sub (hl)
 1785 0791 7A        	  ld a,d
 1786 0792 23        	  inc hl
 1787 0793 9E        	  sbc a,(hl)
 1788 0794 C39C 07   	  jp paren_loop.end
 1789               	
 1790               	paren_loop.negative_step:
 1791               	  ; increment<0
 1792 0797 7E        	  ld a,(hl) ; limit-index
 1793 0798 93        	  sub e
 1794 0799 23        	  inc hl
 1795 079a 7E        	  ld a,(hl)
 1796 079b 9A        	  sbc a,d ; a<0?
 1797               	
 1798               	paren_loop.end:
 1799 079c FA59 07   	  jp m,branch_pfa ; loop again if a<0
 1800               	  ; done, discard loop parameters
GAS LISTING solo_forth.for_as.z80s 			page 41


 1801 079f 23        	  inc hl
 1802 07a0 2210 00   	  ld (return_stack_pointer),hl
 1803               	  ; skip branch offset
 1804 07a3 03        	  inc bc
 1805 07a4 03        	  inc bc
 1806 07a5 DDE9      	  _jp_next
 1807               	
 1808               	; ----------------------------------------------
 1809 07a7 A907      	  _code_header paren_plus_loop_,"(+LOOP)"
 1810               	
 1811 07a9 D1        	  pop de
 1812 07aa C37D 07   	  jp paren_loop.step_in_de
 1813               	
 1814               	; ----------------------------------------------
 1815               	
 1816               	.if 0
 1817               	
 1818               	  _colon_header paren_question_do_,"(?DO)"
 1819               	
 1820               	  ; XXX TODO -- first draft, just copied from DZX-Forth
 1821               	
 1822               	  ; XXX FIXME -- crash in both cases
 1823               	
 1824               	  dw two_dup_,equals_
 1825               	  dw question_branch_,paren_question.end
 1826               	  dw paren_do_
 1827               	  dw semicolon_s_ ; XXX TODO exit_
 1828               	paren_question.end:
 1829               	  dw two_drop_
 1830               	  dw from_r_,fetch_,to_r_
 1831               	  dw semicolon_s_
 1832               	
 1833               	.endif
 1834               	
 1835               	; ----------------------------------------------
 1836 07ad AF07      	  _code_header paren_do_,"(DO)"
 1837               	
 1838               	  ; [Code from CP/M fig-Forth 1.1g.]
 1839               	
 1840 07af D9        	  exx                           ; 04t 01b
 1841 07b0 D1        	  pop de                        ; 10t 01b
 1842 07b1 C1        	  pop bc                        ; 10t 01b
 1843 07b2 2A10 00   	  ld hl,(return_stack_pointer)  ; 20t 03b
 1844 07b5 2B        	  dec hl                        ; 06t 01b
 1845 07b6 70        	  ld (hl),b                     ; 07t 01b
 1846 07b7 2B        	  dec hl                        ; 06t 01b
 1847 07b8 71        	  ld (hl),c                     ; 07t 01b
 1848 07b9 2B        	  dec hl                        ; 06t 01b
 1849 07ba 72        	  ld (hl),d                     ; 07t 01b
 1850 07bb 2B        	  dec hl                        ; 06t 01b
 1851 07bc 73        	  ld (hl),e                     ; 07t 01b
 1852 07bd 2210 00   	  ld (return_stack_pointer),hl  ; 16t 03b
 1853 07c0 D9        	  exx                           ; 04t 01b
 1854               	                                ;116t 18b TOTAL
 1855 07c1 DDE9      	  _jp_next
 1856               	
 1857               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 42


 1858               	; XXX TODO experimental do-loop structures adapted from Spectrum Forth-83
 1859               	; and F83.
 1860               	
 1861               	; A do-loop pushes three items on the return stack:
 1862               	;
 1863               	; 0) Limit
 1864               	; 1) Reverse branch address (jump to here if loop repeats).
 1865               	; 2) Current index represented as `(index-limit) xor 0x8000`.
 1866               	;    This is at the top.
 1867               	;    The current index is represented this way so it is easier
 1868               	;    to check whether index has crossed the boundary between
 1869               	;    limit-1 and limit, acoording to
 1870               	;    the rules of Forth-83, even with negative increment in +LOOP.
 1871               	
 1872 07c3 C507      	  _code_header paren_do83_,"(DO83)"
 1873               	
 1874 07c5 E1        	  pop hl ; initial value
 1875 07c6 D1        	  pop de ; limit
 1876               	paren_do83.de_hl:
 1877               	  ; de = limit
 1878               	  ; hl = initial value
 1879 07c7 E5        	  push hl ; initial value  ( initial )
 1880 07c8 2A10 00   	  ld hl,(return_stack_pointer)
 1881 07cb 2B        	  dec hl
 1882 07cc 72        	  ld (hl),d
 1883 07cd 2B        	  dec hl
 1884 07ce 73        	  ld (hl),e ; push limit value on return stack ( R: initial )
 1885 07cf 03        	  inc bc
 1886 07d0 03        	  inc bc ; increment the Forth IP, skip branch address
 1887 07d1 2B        	  dec hl
 1888 07d2 70        	  ld (hl),b
 1889 07d3 2B        	  dec hl
 1890 07d4 71        	  ld (hl),c ; push current instruction pointer on return stack
 1891 07d5 E3        	  ex (sp),hl ; initial value now in HL, return stack pointer on stack
 1892 07d6 A7        	  and a ; reset the carry flag
 1893 07d7 ED52      	  sbc hl,de ; B SBCP        \ Subtract limit value.
 1894 07d9 7C        	  ld a,h ; H A LD
 1895 07da EE80      	  xor 0x80 ; 80 XOR#       \ Flip most significant bit.
 1896 07dc 57        	  ld d,a ; A B LD
 1897 07dd 5D        	  ld e,l ; L C LD        \ Move result to DE.
 1898 07de E1        	  pop hl ; H POP        \ Get return stack pointer from stack,
 1899 07df 2B        	  dec hl ; H DEC
 1900 07e0 72        	  ld (hl),d ; B M LD
 1901 07e1 2B        	  dec hl ; H DEC
 1902 07e2 73        	  ld (hl),e ; C M LD        \ Push (initial - limit) XOR 0x8000 onto return stack.
 1903 07e3 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL       \ Save return stack pointer.
 1904 07e6 DDE9      	  _jp_next ; JPIX ;C
 1905               	
 1906 07e8 EA07      	  _code_header paren_question_do83_,"(?DO83)"
 1907               	
 1908 07ea E1        	  pop hl ; initial value
 1909 07eb D1        	  pop de ; limit
 1910 07ec A7        	  and a ; reset the carry flag
 1911 07ed ED52      	  sbc hl,de ; compare
 1912 07ef 2804      	  jr z,question_do.equals
 1913               	  ; not equals
 1914               	  ; XXX TODO move add after sbc and save one jump
GAS LISTING solo_forth.for_as.z80s 			page 43


 1915 07f1 19        	  add hl,de ; reverse the subtraction
 1916 07f2 C3C7 07   	  jp paren_do83.de_hl ; perform regular `do`
 1917               	question_do.equals:
 1918 07f5 C359 07   	  jp branch_pfa ; XXX TODO ?
 1919               	
 1920 07f8 650C      	  _colon_header question_do83_,"?DO83",immediate
 1921               	
 1922 07fa 680F E807 	  dw compile_,paren_question_do83_
 1923 07fe 2F07      	  dw forward_mark_
 1924               	.if 1 ; fig_compiler_security
 1925 0800 8306 03   	  _literal 3
 1926               	.endif
 1927 0803 C00A      	  dw semicolon_s_
 1928               	
 1929 0805 650C      	  _colon_header do83_,"DO83",immediate
 1930               	
 1931 0807 680F C307 	  dw compile_,paren_do83_
 1932 080b 2F07      	  dw forward_mark_
 1933               	.if 1 ; fig_compiler_security
 1934 080d 8306 03   	  _literal 3
 1935               	.endif
 1936 0810 C00A      	  dw semicolon_s_
 1937               	
 1938 0812 650C      	  _colon_header loop83_,"LOOP83",immediate
 1939               	
 1940               	.if 1 ; fig_compiler_security
 1941 0814 8306 03   	  _literal 3
 1942 0817 3D0F      	  dw question_pairs_
 1943               	.endif
 1944 0819 680F 2108 	  dw compile_,paren_loop83_
 1945 081d 3B07      	  dw forward_resolve_
 1946 081f C00A      	  dw semicolon_s_
 1947               	
 1948               	  ; _colon_header plus_loop83_,"+LOOP83",immediate
 1949               	
 1950               	  ; dw c_lit_
 1951               	  ; db 3
 1952               	  ; dw question_pairs_
 1953               	  ; dw compile_,paren_plus_loop83_
 1954               	  ; dw forward_resolve_
 1955               	  ; dw semicolon_s_
 1956               	
 1957 0821 650C      	  _colon_header paren_loop83_,"(LOOP83)"
 1958               	
 1959 0823 2A10 00   	  ld hl,(return_stack_pointer)
 1960 0826 5E        	  ld e,(hl) ; M C LD
 1961 0827 23        	  inc hl    ; H INC
 1962 0828 56        	  ld d,(hl) ; M B LD         \ Read current index value.
 1963 0829 13        	  inc de    ; B INC         \ Increment it.
 1964 082a 7A        	  ld a,d    ; B A LD
 1965 082b EE80      	  xor 0x80  ; 80 XOR#
 1966 082d B3        	  or e      ;  C OR         \ Was it equal to 0x8000 ?
 1967 082e C23A 08   	  jp nz,paren_loop83.loop ; jump if not
 1968               	
 1969               	  ; The real index has reached limit, terminate loop.
 1970               	  ; Increment ret stack pointer by 5 (1 increment already done).
 1971 0831 1105 00   	  ld de,5   ; 5 B LDP#
GAS LISTING solo_forth.for_as.z80s 			page 44


 1972 0834 19        	  add hl,de ; B ADDP
 1973 0835 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL
 1974 0838 DDE9      	  _jp_next
 1975               	
 1976               	paren_loop83.loop:
 1977               	
 1978 083a 72        	  ld (hl),d ;  B M LD
 1979 083b 2B        	  dec hl    ; H DEC
 1980 083c 73        	  ld (hl),e ; C M LD    \ Store updated index.
 1981 083d 23        	  inc hl    ; H INC
 1982 083e 23        	  inc hl    ; H INC
 1983 083f 4E        	  ld c,(hl) ; M E LD
 1984 0840 23        	  inc hl    ; H INC
 1985 0841 4E        	  ld c,(hl) ; M D LD   \ Read loop start address into instruction pointer, repeat loop.
 1986 0842 DDE9      	  _jp_next
 1987               	
 1988               	.if 0 ; XXX TODO adapt
 1989               	
 1990               	; CODE (+LOOP83) ( w --- )
 1991               	;  RPTR LDHL     \ Read return stack pointer into HL.
 1992               	;    M C LD
 1993               	;     H INC
 1994               	;    M B LD      \ Read Current index.
 1995               	;      EXSP      \ HL now contains w, the increment value.
 1996               	;     A AND
 1997               	;    B ADCP      \ Add increment to index.
 1998               	;    v if
 1999               	;                \ If overflow, then boundary between limit-1 and limit is
 2000               	;                \ crossed, terminate loop.
 2001               	;      H POP     \ Get return stack pointer.
 2002               	;   5 B LDP#
 2003               	;     B ADDP
 2004               	;  RPTR STHL     \ Increment ret stack pointer by 5 (1 increment already done)
 2005               	;                \ and store updated ret stack pointer back.
 2006               	;    else
 2007               	;     H B LD
 2008               	;     L C LD     \ Move updated index to BC.
 2009               	;      H POP     \ Get return stack pointer.
 2010               	;     B M LD
 2011               	;      H DEC
 2012               	;     C M LD     \ Store updated index.
 2013               	;      H INC
 2014               	;      H INC
 2015               	;     M E LD
 2016               	;      H INC
 2017               	;     M D LD     \ Read loop start address into instruction pointer, repeat loop.
 2018               	;    then
 2019               	;  JPIX ;C
 2020               	
 2021               	; CODE LEAVE83
 2022               	;  RPTR LDHL     \ Read return stack pointer into HL.
 2023               	;     H INC
 2024               	;     H INC
 2025               	;    M E LD
 2026               	;     H INC
 2027               	;    M D LD      \ Get start address into DE.
 2028               	;     H INC
GAS LISTING solo_forth.for_as.z80s 			page 45


 2029               	;     H INC
 2030               	;     H INC
 2031               	; RPTR STHL      \ Write updated return stack pointer (6 was added).
 2032               	;     D DEC
 2033               	;     D DEC      \ DE (instruction pointer) now points to forward branch address
 2034               	;   'BRANCH @ JP ;C \ continue into BRANCH.
 2035               	
 2036               	; CODE I83  ( --- w)
 2037               	; RPTR LDHL        \ Read return stack pointer into HL.
 2038               	;   \ J jumps here.
 2039               	;   M C LD
 2040               	;    H INC
 2041               	;   M B LD         \ Read current index. (which is (index-limit) xor 0x8000.
 2042               	;    H INC
 2043               	;    H INC
 2044               	;    H INC
 2045               	;   M A LD         \ Read limit and add to index
 2046               	;    C ADD
 2047               	;   A C LD
 2048               	;    H INC
 2049               	;   M A LD
 2050               	;    B ADC
 2051               	;  80 XOR#         \ and flip most significant bit, getting true index value.
 2052               	;   A B LD
 2053               	;   B PUSH         \ Push result.
 2054               	; JPIX ;C
 2055               	
 2056               	; CODE J83 ( --- w)
 2057               	;   RPTR LDHL      \ Read return stack pointer into HL
 2058               	;   6 B LDP#
 2059               	;     B ADDP       \ Add 6 to it, to get to next inner loop parameters.
 2060               	;  'I @ 3 + JR ;C  \ Continue into I.
 2061               	
 2062               	; CODE I'83 ( --- w)
 2063               	;   RPTR LDHL      \ Read return stack pointer into HL
 2064               	;      H INC
 2065               	;      H INC
 2066               	;      H INC
 2067               	;      H INC
 2068               	;     M C LD
 2069               	;      H INC
 2070               	;     M B LD       \ Read limit value.
 2071               	;     B PUSH       \ Push result
 2072               	;     JPIX ;C
 2073               	
 2074               	.endif
 2075               	
 2076               	; ----------------------------------------------
 2077 0844 510B      	  _code_alias_header i_,"I",,r_fetch_
 2078               	
 2079               	; doc{
 2080               	;
 2081               	; i  ( -- x ) ( R: loop-sys -- loop-sys ) \ ANS Forth
 2082               	;
 2083               	; Return a copy of the current (innermost) loop index.
 2084               	;
 2085               	; }doc
GAS LISTING solo_forth.for_as.z80s 			page 46


 2086               	
 2087               	; ----------------------------------------------
 2088 0846 4808      	  _code_header digit_,"DIGIT"
 2089               	
 2090               	; doc{
 2091               	;
 2092               	; digit  ( c n1 --- n2 tf | ff )  \ fig-Forth
 2093               	;
 2094               	; Convert the ascii character _c_ (using base _n1_) to its
 2095               	; binary equivalent n2, accompanied by a true flag. If the
 2096               	; conversion is invalid, leave only a false flag.
 2097               	;
 2098               	; }doc
 2099               	
 2100 0848 E1        	  pop hl  ; l=base
 2101 0849 D1        	  pop de  ; e=character
 2102 084a 7B        	  ld a,e  ; character
 2103 084b D630      	  sub '0' ; >="0"?
 2104 084d DAD3 0C   	  jp c,false_pfa ; <"0" is invalid
 2105 0850 FE0A      	  cp 0x0A ; >"9"?
 2106 0852 FA5C 08   	  jp m,digit.test_value ; no, test value
 2107 0855 D607      	  sub 0x07 ; gap between "9" & "A", now "A"=0x0A
 2108 0857 FE0A      	  cp 0x0A ; >="A"?
 2109 0859 DAD3 0C   	  jp c,false_pfa ; characters between "9" & "A" are invalid
 2110               	digit.test_value:
 2111 085c BD        	  cp l ; <base?
 2112 085d D2D3 0C   	  jp nc,false_pfa ; no, invalid
 2113 0860 5F        	  ld e,a ; converted digit
 2114 0861 D5        	  push de
 2115 0862 C3DB 0C   	  jp true_pfa
 2116               	
 2117               	; ----------------------------------------------
 2118 0865 6708      	  _code_header paren_find_,"(FIND)"
 2119               	
 2120               	; doc{
 2121               	;
 2122               	; (find)  ( ca nfa --- ca 0 | cfa 1 | cfa -1 )
 2123               	;
 2124               	; Find the definition named in the counted string at _ca_,
 2125               	; starting at _nfa_. If the definition is not found, return _ca_
 2126               	; and zero.  If the definition is found, return its _cfa_. If
 2127               	; the definition is immediate, also return one (1); otherwise
 2128               	; also return minus-one (-1).
 2129               	;
 2130               	; }doc
 2131               	
 2132 0867 1E01      	  ld e,names_bank
 2133 0869 CDA0 06   	  call bank.e ; page the memory bank
 2134               	
 2135 086c D1        	  pop de ; nfa
 2136 086d E1        	  pop hl ; string address
 2137 086e C5        	  push bc ; save the Forth IP
 2138 086f 2277 08   	  ld (paren_find.string_address),hl
 2139               	
 2140               	  ; XXX FIXME the string searched for must be in the string
 2141               	  ; buffer, below 0xC000! This is not a problem now, during the
 2142               	  ; development, because the dictionary is small.
GAS LISTING solo_forth.for_as.z80s 			page 47


 2143               	
 2144               	paren_find.begin:
 2145               	  ;_z80_border 2 ; XXX INFORMER
 2146               	  ;_z80_border 7 ; XXX INFORMER
 2147               	  ; Compare the string with a new word.
 2148               	  ; de = nfa
 2149 0872 ED53 A908 	  ld (paren_find.nfa_backup),de ; save the nfa for later
 2150               	paren_find.string_address: equ $+1
 2151 0876 2100 00   	  ld hl,0 ; string address
 2152 0879 1A        	  ld a,(de) ; length byte of the name field
 2153 087a 4F        	  ld c,a    ; save for later
 2154 087b E61F      	  and max_word_length_mask  ; length
 2155 087d BE        	  cp (hl) ; same length?
 2156 087e 2028      	  jr nz,paren_find.not_a_match ; lengths differ
 2157               	
 2158               	  ; Lengths match, compare the characters.
 2159 0880 47        	  ld b,a ; length
 2160               	paren_find.compare_next_char:
 2161 0881 23        	  inc hl ; next character in string
 2162 0882 13        	  inc de ; next character in name field
 2163 0883 1A        	  ld a,(de)
 2164 0884 BE        	  cp (hl) ; match?
 2165 0885 2021      	  jr nz,paren_find.not_a_match ; no match
 2166 0887 10F8      	  djnz paren_find.compare_next_char ; match so far, loop again
 2167               	
 2168               	  ; The string matches.
 2169               	  ; c = name field length byte
 2170 0889 2AA9 08   	  ld hl,(paren_find.nfa_backup)
 2171               	;  ld (0xfffa),hl ; XXX INFORMER ; nfa, ok
 2172 088c 2B        	  dec hl
 2173 088d 2B        	  dec hl ; lfa
 2174 088e 2B        	  dec hl ; high part of the pointer to cfa
 2175 088f 56        	  ld d,(hl)
 2176 0890 2B        	  dec hl ; low part of the pointer to cfa
 2177 0891 5E        	  ld e,(hl) ; de = cfa
 2178               	
 2179               	;  ld (0xfffc),de ; XXX INFORMER ; cfa, ok
 2180               	
 2181 0892 2101 00   	  ld hl,1 ; 1=immediate word
 2182 0895 79        	  ld a,c ; name field length byte
 2183 0896 E640      	  and precedence_mask ; immediate word?
 2184 0898 C29D 08   	  jp nz,paren_find.end
 2185               	  ; non-immediate word
 2186 089b 2B        	  dec hl
 2187 089c 2B        	  dec hl ; -1 = non-immediate word
 2188               	
 2189               	paren_find.end:
 2190               	  ; If match found:
 2191               	  ;   de = cfa
 2192               	  ;   hl = -1 | 1
 2193               	  ; If no match found:
 2194               	  ;   de = ca
 2195               	  ;   hl = 0
 2196 089d D9        	  exx
 2197 089e 1E00      	  ld e,default_bank
 2198 08a0 CDA0 06   	  call bank.e ; page the default memory bank
 2199 08a3 D9        	  exx
GAS LISTING solo_forth.for_as.z80s 			page 48


 2200 08a4 C1        	  pop bc ; restore the Forth IP
 2201               	  ; _z80_border 4 ; XXX INFORMER
 2202 08a5 C35D 05   	  jp push_hlde
 2203               	
 2204               	paren_find.not_a_match:
 2205               	  ; Not a match, try next one.
 2206               	paren_find.nfa_backup: equ $+1
 2207 08a8 2100 00   	  ld hl,0 ; nfa
 2208 08ab 2B        	  dec hl ; high address of lfa
 2209 08ac 56        	  ld d,(hl) ; high part of the next nfa
 2210 08ad 2B        	  dec hl ; low address of lfa
 2211 08ae 5E        	  ld e,(hl) ; low part of the next nfa
 2212 08af 7A        	  ld a,d
 2213 08b0 B3        	  or e ; end of dictionary? (next nfa=0)
 2214 08b1 C272 08   	  jp nz,paren_find.begin ; if not, continue
 2215               	  ; End of dictionary, no match found, return.
 2216 08b4 ED5B 7708 	  ld de,(paren_find.string_address)
 2217 08b8 2100 00   	  ld hl,0
 2218 08bb C39D 08   	  jp paren_find.end
 2219               	
 2220               	; ----------------------------------------------
 2221 08be C008      	  _code_header scan_,"SCAN"
 2222               	
 2223               	; doc{
 2224               	;
 2225               	; scan  ( ca c -- ca len )
 2226               	;
 2227               	; c = ascii delimiting character
 2228               	; ca = text address
 2229               	; len = length of the parsed text
 2230               	;
 2231               	; }doc
 2232               	
 2233 08c0 E1        	  pop hl ; delimiter
 2234 08c1 D1        	  pop de ; address
 2235 08c2 D5        	  push de
 2236 08c3 C5        	  push bc ; save Forth IP
 2237 08c4 4D        	  ld c,l ; delimiter
 2238 08c5 2100 00   	  ld hl,0 ; length
 2239 08c8 2B        	  dec hl
 2240 08c9 1B        	  dec de
 2241               	scan.begin:
 2242 08ca 23        	  inc hl
 2243 08cb 13        	  inc de
 2244 08cc 1A        	  ld a,(de)
 2245 08cd B9        	  cp c ; delimiter?
 2246 08ce 20FA      	  jr nz,scan.begin
 2247               	  ; delimiter found
 2248 08d0 C1        	  pop bc ; restore Forth IP
 2249 08d1 C35E 05   	  jp push_hl
 2250               	
 2251               	; ----------------------------------------------
 2252 08d4 D608      	  _code_header skip_,"SKIP"
 2253               	
 2254               	; doc{
 2255               	;
 2256               	; skip  ( ca1 c -- ca2 )
GAS LISTING solo_forth.for_as.z80s 			page 49


 2257               	;
 2258               	; }doc
 2259               	
 2260 08d6 D1        	  pop de ; e = delimiter
 2261 08d7 E1        	  pop hl ; ca1
 2262               	skip.begin:
 2263 08d8 7E        	  ld a,(hl)
 2264 08d9 BB        	  cp e ; delimiter?
 2265 08da C25E 05   	  jp nz,push_hl
 2266 08dd 23        	  inc hl
 2267 08de C3D8 08   	  jp skip.begin ; again
 2268               	
 2269               	; ----------------------------------------------
 2270 08e1 E308      	  _code_header chan_,"CHAN"
 2271               	
 2272               	; doc{
 2273               	;
 2274               	; chan  ( n -- )  \ Open channel n for output.
 2275               	;
 2276               	; }doc
 2277               	;
 2278               	; [Code from Spectrum Forth-83.]
 2279               	
 2280 08e3 E1        	  pop hl
 2281 08e4 C5        	  push bc
 2282 08e5 7D        	  ld a,l
 2283 08e6 CD01 16   	  call rom_chan_open
 2284 08e9 C1        	  pop bc
 2285 08ea DDE9      	  _jp_next
 2286               	
 2287               	; ----------------------------------------------
 2288 08ec 650C      	  _colon_header emit_,"EMIT"
 2289               	
 2290               	; XXX TODO -- Add multitasker's `pause` when available.
 2291               	; XXX TODO -- defer
 2292               	
 2293 08ee F808      	  dw paren_emit_
 2294 08f0 C90C 240D 	  dw one_,out_,plus_store_
 2294      F00B 
 2295 08f6 C00A      	  dw semicolon_s_
 2296               	
 2297               	; ----------------------------------------------
 2298 08f8 FA08      	  _code_header paren_emit_,"(EMIT)"
 2299               	
 2300               	; doc{
 2301               	;
 2302               	; (emit)  ( b -- )
 2303               	;
 2304               	; Send the character b to the current channel.
 2305               	;
 2306               	; }doc
 2307               	
 2308               	; [Code from Spectrum Forth-83's `TOCH`.]
 2309               	
 2310               	.if latin1_charset_in_bank
 2311               	  ld e,names_bank
 2312               	  call bank.e ; the charset is in the memory bank
GAS LISTING solo_forth.for_as.z80s 			page 50


 2313               	.endif
 2314 08fa E1        	  pop hl
 2315 08fb 7D        	  ld a,l
 2316 08fc FD36 52FF 	  ld (iy+sys_scr_ct_offset),0xFF ; no scroll message
 2317 0900 D7        	  rst 0x10
 2318               	.if latin1_charset_in_bank
 2319               	  ld e,default_bank
 2320               	  call bank.e
 2321               	.endif
 2322 0901 DDE9      	  _jp_next
 2323               	
 2324               	; ----------------------------------------------
 2325 0903 650C      	  _colon_header printer_,"PRINTER"
 2326               	
 2327 0905 8306 03   	  _literal 3
 2328 0908 E108      	  dw chan_
 2329 090a C00A      	  dw semicolon_s_
 2330               	
 2331               	; ----------------------------------------------
 2332 090c 650C      	  _colon_header display_,"DISPLAY"
 2333               	
 2334 090e CD0C      	  dw two_
 2335 0910 E108      	  dw chan_
 2336 0912 C00A      	  dw semicolon_s_
 2337               	
 2338               	; ----------------------------------------------
 2339 0914 1609      	  _code_header key_question_,"KEY?"
 2340               	
 2341               	; doc{
 2342               	;
 2343               	; key?  ( -- f )  \ ANS Forth
 2344               	;
 2345               	; }doc
 2346               	
 2347 0916 3A08 5C   	  ld a,(sys_last_k)
 2348 0919 A7        	  and a
 2349 091a CAD3 0C   	  jp z,false_pfa
 2350 091d C3DB 0C   	  jp true_pfa
 2351               	
 2352               	; ----------------------------------------------
 2353 0920 1A14      	  _variable_header decode_table_,"DECODE-TABLE"
 2354               	
 2355 0922 0000      	  dw 0 ; no chained table ; XXX TODO
 2356               	              ; Symbol Shift + Letter --> new char
 2357 0924 C65B      	  db 0xC6,'[' ; "Y" 198 (0xC6) "AND"  --> 091 (0x5B) "["
 2358 0926 C55D      	  db 0xC5,']' ; "U" 197 (0xC5) "OR"   --> 093 (0x5D) "]"
 2359 0928 E27E      	  db 0xE2,'~' ; "A" 226 (0xE2) "STOP" --> 126 (0x7E) "~"
 2360 092a C37C      	  db 0xC3,'|' ; "S" 195 (0xC3) "NOT"  --> 124 (0x7C) "|"
 2361 092c CD5C      	  db 0xCD,'\' ; "D" 205 (0xCD) "STEP" --> 092 (0x5C) "\"
 2362 092e CC7B      	  db 0xCC,'{' ; "F" 204 (0xCC) "TO"   --> 123 (0x7B) "{"
 2363 0930 CB7D      	  db 0xCB,'}' ; "G" 203 (0xCB) "THEN" --> 125 (0x7D) "}"
 2364 0932 00        	  db 0 ; end of data
 2365               	
 2366               	  ; "I" 172 (0xAC) "AT"   --> 127 (0x7F) "(C)" ; XXX TODO
 2367               	
 2368               	; ----------------------------------------------
 2369 0933 3509      	  _code_header decode_char_,"DECODE-CHAR"
GAS LISTING solo_forth.for_as.z80s 			page 51


 2370               	  
 2371               	; doc{
 2372               	;
 2373               	; decode-char  ( c1 -- c2 )
 2374               	;
 2375               	; }doc
 2376               	
 2377               	  ; XXX TODO
 2378               	
 2379 0935 D1        	  pop de
 2380 0936 2122 09   	  ld hl,decode_table_+2 ; XXX TMP
 2381               	decode_char.begin:
 2382 0939 7E        	  ld a,(hl)
 2383 093a A7        	  and a
 2384 093b 7B        	  ld a,e
 2385               	
 2386               	; ----------------------------------------------
 2387 093c 3E09      	  _code_header paren_key_,"(KEY)"
 2388               	
 2389 093e 3A08 5C   	  ld a,(sys_last_k)
 2390 0941 3248 09   	  ld (previous_key),a
 2391               	paren_key_.begin:
 2392               	  ; call pause ; XXX TODO
 2393               	  ; call rom_keyboard ; XXX TODO not needed if system interrupts are on
 2394 0944 3A08 5C   	  ld a,(sys_last_k)
 2395               	previous_key: equ $+1
 2396 0947 FE00      	  cp 0 ; a different key?
 2397 0949 CA44 09   	  jp z,paren_key_.begin
 2398 094c 2600      	  ld h,0
 2399 094e 6F        	  ld l,a
 2400 094f AF        	  xor a
 2401 0950 3208 5C   	  ld (sys_last_k),a ; delete the last key
 2402 0953 E5        	  push hl
 2403 0954 C333 09   	  jp decode_char_
 2404               	
 2405               	; ----------------------------------------------
 2406 0957 5909      	  _code_header key_,"KEY"
 2407               	
 2408               	; doc{
 2409               	;
 2410               	; key  ( -- c )  \ ANS Forth
 2411               	;
 2412               	; }doc
 2413               	
 2414               	; XXX -- This version works also when the system interrupts are off.
 2415               	; XXX TODO -- Add multitasker's `pause` when available.
 2416               	
 2417 0959 C5        	  push bc
 2418 095a DDE5      	  push ix ; XXX TMP
 2419               	key.begin:
 2420 095c CD8E 02   	  call rom_key_scan
 2421 095f 20FB      	  jr nz,key.begin
 2422 0961 CD1E 03   	  call rom_key_test
 2423 0964 30F6      	  jr nc,key.begin
 2424 0966 15        	  dec d
 2425 0967 5F        	  ld e,a
 2426 0968 CD33 03   	  call rom_key_decode
GAS LISTING solo_forth.for_as.z80s 			page 52


 2427               	key.end:
 2428 096b 2108 5C   	  ld hl,sys_last_k
 2429 096e 3600      	  ld (hl),0
 2430 0970 DDE1      	  pop ix ; XXX TMP
 2431 0972 C1        	  pop bc
 2432 0973 C387 06   	  jp push_a
 2433               	
 2434               	; ----------------------------------------------
 2435 0976 7809      	  _code_header xkey_,"XKEY"
 2436               	
 2437               	; XXX OLD -- this is the original code from Abersoft Forth.
 2438               	; Too complex. A mode-less version will be coded.
 2439               	
 2440               	; doc{
 2441               	;
 2442               	; xkey  ( -- c )
 2443               	;
 2444               	; Leave the ASCII value of the next terminal key struck.
 2445               	;
 2446               	; }doc
 2447               	
 2448               	  ; XXX TODO simplify, no Spectrum modes
 2449               	
 2450 0978 C5        	  push bc
 2451               	
 2452               	  ; XXX OLD
 2453               	  ; inverse video on
 2454               	  ; ld a,inverse_char
 2455               	  ; rst 0x10
 2456               	  ; ld a,0x01
 2457               	  ; rst 0x10
 2458               	
 2459               	xkey.new_key:
 2460 0979 AF        	  xor a
 2461 097a 3208 5C   	  ld (sys_last_k),a
 2462               	
 2463               	  ; Print cursor:
 2464 097d 3E88      	  ld a,0x88 ; cursor
 2465 097f D7        	  rst 0x10
 2466 0980 3E08      	  ld a,backspace_char
 2467 0982 D7        	  rst 0x10
 2468               	
 2469               	xkey.wait_for_key:
 2470 0983 3A08 5C   	  ld a,(sys_last_k)
 2471 0986 A7        	  and a
 2472 0987 28FA      	  jr z,xkey.wait_for_key
 2473               	  ; a = pressed key code
 2474               	
 2475 0989 FE06      	  cp caps_char ; toggle caps lock?
 2476 098b 2009      	  jr nz,xkey.translate
 2477               	  ; toggle caps lock
 2478 098d 216A 5C   	  ld hl,sys_flags2
 2479 0990 3E08      	  ld a,0x08
 2480 0992 AE        	  xor (hl)
 2481 0993 77        	  ld (hl),a
 2482 0994 18E3      	  jr xkey.new_key
 2483               	
GAS LISTING solo_forth.for_as.z80s 			page 53


 2484               	  ; Translate some chars
 2485               	  ; XXX TODO use a configurable list of chars pairs
 2486               	
 2487               	xkey.translate:
 2488               	xkey.left_bracket:
 2489 0996 FEC6      	  cp 0xC6
 2490 0998 2002      	  jr nz,xkey.right_bracket
 2491 099a 3E5B      	  ld a,'['
 2492               	xkey.right_bracket:
 2493 099c FEC5      	  cp 0xC5
 2494 099e 2002      	  jr nz,xkey.tilde
 2495 09a0 3E5D      	  ld a,']'
 2496               	xkey.tilde:
 2497 09a2 FEE2      	  cp 0xE2
 2498 09a4 2002      	  jr nz,xkey.vertical_bar
 2499 09a6 3E7E      	  ld a,'~'
 2500               	xkey.vertical_bar:
 2501 09a8 FEC3      	  cp 0xC3
 2502 09aa 2002      	  jr nz,xkey.backslash
 2503 09ac 3E7C      	  ld a,'|'
 2504               	xkey.backslash:
 2505 09ae FECD      	  cp 0xCD
 2506 09b0 2002      	  jr nz,xkey.left_curly_bracket
 2507 09b2 3E5C      	  ld a,'\'
 2508               	xkey.left_curly_bracket:
 2509 09b4 FECC      	  cp 0xCC
 2510 09b6 2002      	  jr nz,xkey.right_curly_bracket
 2511 09b8 3E7B      	  ld a,'{'
 2512               	xkey.right_curly_bracket:
 2513 09ba FECB      	  cp 0xCB
 2514 09bc 2002      	  jr nz,xkey.end
 2515 09be 3E7D      	  ld a,'}'
 2516               	
 2517               	xkey.end:
 2518 09c0 6F        	  ld l,a
 2519 09c1 2600      	  ld h,0x00
 2520               	
 2521               	  ; XXX OLD
 2522               	  ; inverse video off
 2523               	  ; ld a,inverse_char
 2524               	  ; rst 0x10
 2525               	  ; ld a,0x00
 2526               	  ; rst 0x10
 2527               	
 2528               	  ; delete the cursor
 2529 09c3 3E20      	  ld a,space_char
 2530 09c5 D7        	  rst 0x10
 2531 09c6 3E08      	  ld a,backspace_char
 2532 09c8 D7        	  rst 0x10
 2533               	
 2534 09c9 C1        	  pop bc
 2535 09ca C35E 05   	  jp push_hl
 2536               	
 2537               	; ----------------------------------------------
 2538 09cd 650C      	  _colon_header cr_,"CR"
 2539               	
 2540               	; doc{
GAS LISTING solo_forth.for_as.z80s 			page 54


 2541               	;
 2542               	; cr  ( -- )
 2543               	;
 2544               	; Transmit a carriage return to the selected output device.
 2545               	;
 2546               	; }doc
 2547               	
 2548 09cf 8306 0D   	  _literal carriage_return_char
 2549 09d2 EC08 240D 	  dw emit_,out_,off_
 2549      FD0B 
 2550 09d8 C00A      	  dw semicolon_s_
 2551               	
 2552               	; ----------------------------------------------
 2553 09da DC09      	  _code_header cmove_up_,"CMOVE>"
 2554               	
 2555 09dc D9        	  exx
 2556 09dd C1        	  pop bc
 2557 09de D1        	  pop de
 2558 09df E1        	  pop hl
 2559 09e0 CD28 05   	  call move_block_downwards
 2560 09e3 D9        	  exx
 2561 09e4 DDE9      	  _jp_next
 2562               	
 2563               	; ----------------------------------------------
 2564 09e6 E809      	  _code_header cmove_,"CMOVE"
 2565               	
 2566 09e8 D9        	  exx
 2567 09e9 C1        	  pop bc
 2568 09ea D1        	  pop de
 2569 09eb E1        	  pop hl
 2570 09ec CD22 05   	  call move_block_upwards
 2571 09ef D9        	  exx
 2572 09f0 DDE9      	  _jp_next
 2573               	
 2574               	; ----------------------------------------------
 2575 09f2 F409      	  _code_header move_,"MOVE"
 2576               	
 2577               	; doc{
 2578               	;
 2579               	; move  ( a1 a2 len -- )
 2580               	;
 2581               	; }doc
 2582               	
 2583 09f4 D9        	  exx
 2584 09f5 C1        	  pop bc
 2585 09f6 D1        	  pop de
 2586               	move.do:
 2587 09f7 E1        	  pop hl
 2588 09f8 CD1C 05   	  call move_block
 2589 09fb D9        	  exx
 2590 09fc DDE9      	  _jp_next
 2591               	
 2592               	; ----------------------------------------------
 2593 09fe 000A      	  _code_header smove_,"SMOVE"
 2594               	
 2595               	; doc{
 2596               	;
GAS LISTING solo_forth.for_as.z80s 			page 55


 2597               	; smove  ( a1 len a2 -- )
 2598               	; 
 2599               	; Move the string _a1 len_ to _a2_. _a2_ will contain the first
 2600               	; char of the string.
 2601               	;
 2602               	; }doc
 2603               	
 2604               	; swap move
 2605               	
 2606 0a00 D9        	  exx
 2607 0a01 D1        	  pop de
 2608 0a02 C1        	  pop bc
 2609 0a03 C3F7 09   	  jp move.do
 2610               	
 2611               	; ----------------------------------------------
 2612 0a06 080A      	  _code_header u_m_star_,"UM*"
 2613               	
 2614               	; doc{
 2615               	;
 2616               	; um*  ( u1 u2 -- ud )  \ ANS Forth
 2617               	;
 2618               	; Multiply _u1_ by _u2_, giving the unsigned double-cell product
 2619               	; _ud_.  All values and arithmetic are unsigned.
 2620               	;
 2621               	; }doc
 2622               	
 2623               	  ; [Code from DZX-Forth.]
 2624               	
 2625 0a08 D1        	  pop de
 2626 0a09 E1        	  pop hl
 2627 0a0a CD46 05   	  call hl_multiplied_by_de_to_hlde_unsigned
 2628 0a0d C35D 05   	  jp push_hlde
 2629               	
 2630               	; ----------------------------------------------
 2631 0a10 120A      	  _code_header u_slash_mod_,'U/MOD' ; XXX OLD
 2632               	
 2633               	; doc{
 2634               	;
 2635               	; u/mod ( ud u1 -- u2 u3 )
 2636               	;
 2637               	; Divide _ud_ by _u1_, giving the quotient _u3_ and the
 2638               	; remainder _u2_.  All values and arithmetic are unsigned. An
 2639               	; ambiguous condition exists if u1 is zero or if the quotient
 2640               	; lies outside the range of a single-cell unsigned integer.
 2641               	;
 2642               	; }doc
 2643               	
 2644               	; XXX FIXME -- This word, whose code is taken from Abersoft
 2645               	; forth, has a bug that affects `(line)`, used by `message`, and
 2646               	; other words that use it: `*/mod`, `mod` and `/mod`, with
 2647               	; certain negative values, return different values in Abersoft
 2648               	; Forth and other Forth systems that have been tested (some of
 2649               	; them are fig-Forth).
 2650               	
 2651 0a12 2104 00   	  ld hl,0x0004
 2652 0a15 39        	  add hl,sp
 2653 0a16 5E        	  ld e,(hl)
GAS LISTING solo_forth.for_as.z80s 			page 56


 2654 0a17 71        	  ld (hl),c
 2655 0a18 23        	  inc hl
 2656 0a19 56        	  ld d,(hl)
 2657 0a1a 70        	  ld (hl),b
 2658 0a1b C1        	  pop bc
 2659 0a1c E1        	  pop hl
 2660 0a1d 7D        	  ld a,l
 2661 0a1e 91        	  sub c
 2662 0a1f 7C        	  ld a,h
 2663 0a20 98        	  sbc a,b
 2664 0a21 3808      	  jr c,l60a0h
 2665 0a23 21FF FF   	  ld hl,0xFFFF
 2666 0a26 11FF FF   	  ld de,0xFFFF
 2667 0a29 1820      	  jr l60c0h
 2668               	l60a0h:
 2669 0a2b 3E10      	  ld a,0x10
 2670               	l60a2h:
 2671 0a2d 29        	  add hl,hl
 2672 0a2e 17        	  rla
 2673 0a2f EB        	  ex de,hl
 2674 0a30 29        	  add hl,hl
 2675 0a31 3002      	  jr nc,l60aah
 2676 0a33 13        	  inc de
 2677 0a34 A7        	  and a
 2678               	l60aah:
 2679 0a35 EB        	  ex de,hl
 2680 0a36 1F        	  rra
 2681 0a37 F5        	  push af
 2682 0a38 3005      	  jr nc,l60b4h
 2683 0a3a A5        	  and l
 2684 0a3b ED42      	  sbc hl,bc
 2685 0a3d 1807      	  jr l60bbh
 2686               	l60b4h:
 2687 0a3f A7        	  and a
 2688 0a40 ED42      	  sbc hl,bc
 2689 0a42 3002      	  jr nc,l60bbh
 2690 0a44 09        	  add hl,bc
 2691 0a45 1B        	  dec de
 2692               	l60bbh:
 2693 0a46 13        	  inc de
 2694 0a47 F1        	  pop af
 2695 0a48 3D        	  dec a
 2696 0a49 20E2      	  jr nz,l60a2h
 2697               	l60c0h:
 2698 0a4b C1        	  pop bc
 2699 0a4c E5        	  push hl
 2700 0a4d D5        	  push de
 2701 0a4e DDE9      	  _jp_next
 2702               	
 2703               	.if 0 ; XXX TODO
 2704               	
 2705               	; ----------------------------------------------
 2706               	  _code_header s_m_slash_rem_,"SM/REM"
 2707               	
 2708               	; doc{
 2709               	;
 2710               	; sm/rem  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "s-m-slash-rem"
GAS LISTING solo_forth.for_as.z80s 			page 57


 2711               	;
 2712               	; Symmetric division:
 2713               	;
 2714               	;   d1 = n3*n1+n2, sign(n2)=sign(d1) or 0.
 2715               	;
 2716               	; Divide _d1_ by _n1_, giving the symmetric quotient _n3_ and
 2717               	; the remainder _n2_. Input and output stack arguments are
 2718               	; signed.
 2719               	;
 2720               	; }doc
 2721               	
 2722               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2723               	; if the quotient lies outside the range of a single-cell signed
 2724               	; integer.
 2725               	
 2726               	; [Code from DZX-Forth.]
 2727               	
 2728               	  ld l,c
 2729               	  ld h,b
 2730               	  pop bc
 2731               	  pop de
 2732               	  ex (sp),hl
 2733               	  ex de,hl
 2734               	s_m_slash_rem_.1:
 2735               	  call msm
 2736               	  jp msm.2
 2737               	
 2738               	; ----------------------------------------------
 2739               	  _code_header fm_slash_mod_,"FM/MOD"
 2740               	
 2741               	; doc{
 2742               	;
 2743               	; fm/mod  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "f-m-slash-mod"
 2744               	;
 2745               	; Floored division:
 2746               	;
 2747               	;   d1 = n3*n1+n2, n1>n2>=0 or 0>=n2>n1.
 2748               	;
 2749               	; Divide _d1_ by _n1_, giving the floored quotient _n3_ and
 2750               	; the remainder _n2_. Input and output stack arguments are
 2751               	; signed.
 2752               	;
 2753               	; }doc
 2754               	
 2755               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2756               	; if the quotient lies outside the range of a single-cell signed
 2757               	; integer.
 2758               	
 2759               	; [Code from DZX-Forth.]
 2760               	
 2761               	  ld l,c
 2762               	  ld h,b
 2763               	  pop bc
 2764               	  pop de
 2765               	  ex (sp),hl
 2766               	  ex de,hl
 2767               	fm_slash_mod.1:
GAS LISTING solo_forth.for_as.z80s 			page 58


 2768               	  call msm
 2769               	  ld a,d
 2770               	  or e
 2771               	  jp z,msm.2    ; skip if remainder = 0
 2772               	  dec hl    ; floor
 2773               	  push hl
 2774               	  ex de,hl
 2775               	  add hl,bc
 2776               	  ex de,hl
 2777               	  pop hl
 2778               	  jp msm.2
 2779               	
 2780               	.endif
 2781               	
 2782               	; ----------------------------------------------
 2783 0a50 520A      	  _code_header and_,"AND"
 2784               	
 2785 0a52 D1        	  pop de
 2786 0a53 E1        	  pop hl
 2787 0a54 7B        	  ld a,e
 2788 0a55 A5        	  and l
 2789 0a56 6F        	  ld l,a
 2790 0a57 7A        	  ld a,d
 2791 0a58 A4        	  and h
 2792 0a59 67        	  ld h,a
 2793 0a5a C35E 05   	  jp push_hl
 2794               	
 2795               	; ----------------------------------------------
 2796 0a5d 5F0A      	  _code_header or_,"OR"
 2797               	
 2798 0a5f D1        	  pop de
 2799 0a60 E1        	  pop hl
 2800 0a61 7B        	  ld a,e
 2801 0a62 B5        	  or l
 2802 0a63 6F        	  ld l,a
 2803 0a64 7A        	  ld a,d
 2804 0a65 B4        	  or h
 2805 0a66 67        	  ld h,a
 2806 0a67 C35E 05   	  jp push_hl
 2807               	
 2808               	; ----------------------------------------------
 2809 0a6a 6C0A      	  _code_header xor_,"XOR"
 2810               	
 2811 0a6c D1        	  pop de
 2812 0a6d E1        	  pop hl
 2813 0a6e 7B        	  ld a,e
 2814 0a6f AD        	  xor l
 2815 0a70 6F        	  ld l,a
 2816 0a71 7A        	  ld a,d
 2817 0a72 AC        	  xor h
 2818 0a73 67        	  ld h,a
 2819 0a74 C35E 05   	  jp push_hl
 2820               	
 2821               	; ----------------------------------------------
 2822 0a77 A00C      	  _constant_header np_,"NP"
 2823               	
 2824 0a79 2E00      	  dw names_pointer
GAS LISTING solo_forth.for_as.z80s 			page 59


 2825               	
 2826               	; ----------------------------------------------
 2827 0a7b A00C      	  _constant_header np0_,"NP0"
 2828               	
 2829               	  ; XXX OLD -- not used
 2830               	
 2831 0a7d 00C0      	  dw names_bank_address
 2832               	
 2833               	; ----------------------------------------------
 2834 0a7f 810A      	  _code_header np_fetch_,"NP@"
 2835               	
 2836 0a81 2A2E 00   	  ld hl,(names_pointer)
 2837 0a84 C35E 05   	  jp push_hl
 2838               	
 2839               	; ----------------------------------------------
 2840 0a87 890A      	  _code_header np_store_,"NP!"
 2841               	
 2842 0a89 E1        	  pop hl
 2843 0a8a 222E 00   	  ld (names_pointer),hl
 2844 0a8d DDE9      	  _jp_next
 2845               	
 2846               	; ----------------------------------------------
 2847               	
 2848 0a8f 650C      	  _colon_header comma_np_,",NP"
 2849               	
 2850               	; doc{
 2851               	;
 2852               	; ,np  ( x -- )
 2853               	;
 2854               	; Store _x_ into the next available names memory cell, advancing
 2855               	; the names pointer.
 2856               	;
 2857               	; Note: The names memory is supposed to be paged in.
 2858               	;
 2859               	; }doc
 2860               	
 2861 0a91 7F0A 490C 	  dw np_fetch_,store_,two_,np_,plus_store_
 2861      CD0C 770A 
 2861      F00B 
 2862 0a9b C00A      	  dw semicolon_s_
 2863               	
 2864               	; ----------------------------------------------
 2865 0a9d 9F0A      	  _code_header sp_fetch_,"SP@"
 2866               	
 2867 0a9f 2100 00   	  ld hl,0x0000
 2868 0aa2 39        	  add hl,sp
 2869 0aa3 C35E 05   	  jp push_hl
 2870               	
 2871               	; ----------------------------------------------
 2872 0aa6 A80A      	  _code_header sp_store_,"SP!"
 2873               	
 2874               	; doc{
 2875               	;
 2876               	; sp!  ( a -- )
 2877               	;
 2878               	; Store _a_ into the stack pointer.
 2879               	;
GAS LISTING solo_forth.for_as.z80s 			page 60


 2880               	; }doc
 2881               	
 2882 0aa8 E1        	  pop hl
 2883 0aa9 F9        	  ld sp,hl
 2884 0aaa DDE9      	  _jp_next
 2885               	
 2886               	; ----------------------------------------------
 2887 0aac A00C      	  _constant_header rp_,"RP"
 2888               	
 2889 0aae 1000      	  dw return_stack_pointer
 2890               	
 2891               	; ----------------------------------------------
 2892 0ab0 B20A      	  _code_header rp_fetch_,"RP@"
 2893               	
 2894 0ab2 2A10 00   	  ld hl,(return_stack_pointer)
 2895 0ab5 C35E 05   	  jp push_hl
 2896               	
 2897               	; ----------------------------------------------
 2898 0ab8 BA0A      	  _code_header rp_store_,"RP!"
 2899               	
 2900               	; doc{
 2901               	;
 2902               	; rp!  ( a -- )
 2903               	;
 2904               	; Store _a_ into the return stack pointer.
 2905               	;
 2906               	; }doc
 2907               	
 2908 0aba E1        	  pop hl
 2909 0abb 2210 00   	  ld (return_stack_pointer),hl
 2910 0abe DDE9      	  _jp_next
 2911               	
 2912               	; ----------------------------------------------
 2913               	.if 1 ; fig_exit?
 2914 0ac0 C20A      	  _code_header semicolon_s_,";S"
 2915               	.else
 2916               	  _code_header exit_,"EXIT"
 2917               	semicolon_s_ equ exit_
 2918               	.endif
 2919               	
 2920               	
 2921               	; doc{
 2922               	;
 2923               	; ;s  ( -- )  \ fig-Forth
 2924               	;
 2925               	; Return execution to the calling definition.  Unnest one level.
 2926               	;
 2927               	; It is used to stop interpretation of a screen. It is also the
 2928               	; run-time word compiled at the end of a colon-definition which
 2929               	; returns execution to the calling procedure.
 2930               	;
 2931               	; }doc
 2932               	
 2933               	; XXX TODO combine this `;s` with `exit`?
 2934               	
 2935 0ac2 2A10 00   	  ld hl,(return_stack_pointer)
 2936 0ac5 4E        	  ld c,(hl)
GAS LISTING solo_forth.for_as.z80s 			page 61


 2937 0ac6 23        	  inc hl
 2938 0ac7 46        	  ld b,(hl)
 2939 0ac8 23        	  inc hl
 2940 0ac9 2210 00   	  ld (return_stack_pointer),hl
 2941 0acc DDE9      	  _jp_next
 2942               	
 2943               	; ----------------------------------------------
 2944 0ace D00A      	  _code_header pick_,"PICK"
 2945               	
 2946 0ad0 E1        	  pop hl
 2947 0ad1 29        	  add hl,hl
 2948 0ad2 39        	  add hl,sp
 2949 0ad3 C31D 0C   	  jp fetch.hl
 2950               	
 2951               	; ----------------------------------------------
 2952 0ad6 100B      	  _code_alias_header unloop_,"UNLOOP",,two_r_drop_
 2953               	
 2954               	; doc{
 2955               	;
 2956               	; unloop  ( -- ) ( R: x1 x2 -- )  \ ANS Forth, C
 2957               	;
 2958               	; x1 = loop index
 2959               	; x2 = loop limit
 2960               	;
 2961               	; Discard the loop-control parameters for the current nesting
 2962               	; level. An `unloop` is required for each nesting level before
 2963               	; the definition may be exited with `exit`. An ambiguous
 2964               	; condition exists if the loop-control parameters are
 2965               	; unavailable.
 2966               	;
 2967               	; }doc
 2968               	
 2969               	; ----------------------------------------------
 2970 0ad8 DA0A      	  _code_header exhaust_,"EXHAUST"
 2971               	
 2972               	; doc{
 2973               	;
 2974               	; exhaust  ( -- ) ( R: n1 n2 -- n2 n2 )
 2975               	;
 2976               	; n1 = loop limit
 2977               	; n2 = loop index
 2978               	;
 2979               	; Force termination of a do-loop at the next opportunity by
 2980               	; setting the loop limit equal to the current value of the
 2981               	; index. The index itself remains unchanged, and execution
 2982               	; proceeds normally until `loop` or `+loop` is encountered.
 2983               	;
 2984               	; Note: This is the equivalent of fig-Forth's `leave`.
 2985               	;
 2986               	; }doc
 2987               	
 2988 0ada 2A10 00   	  ld hl,(return_stack_pointer)
 2989 0add 5E        	  ld e,(hl)
 2990 0ade 23        	  inc hl
 2991 0adf 56        	  ld d,(hl)
 2992 0ae0 23        	  inc hl
 2993 0ae1 73        	  ld (hl),e
GAS LISTING solo_forth.for_as.z80s 			page 62


 2994 0ae2 23        	  inc hl
 2995 0ae3 72        	  ld (hl),d
 2996 0ae4 DDE9      	  _jp_next
 2997               	
 2998               	; ----------------------------------------------
 2999 0ae6 E80A      	  _code_header question_exhaust_,"?EXHAUST"
 3000               	
 3001               	; doc{
 3002               	;
 3003               	; ?exhaust  ( f -- ) ( R: n1 n2 -- n1 n2 | n2 n2 )
 3004               	;
 3005               	; n1 = loop limit
 3006               	; n2 = loop index
 3007               	; 
 3008               	; If _f_ is not false, force termination of a do-loop at the
 3009               	; next opportunity by setting the loop limit equal to the
 3010               	; current value of the index. The index itself remains
 3011               	; unchanged, and execution proceeds normally until `loop` or
 3012               	; `+loop` is encountered.
 3013               	;
 3014               	; }doc
 3015               	
 3016 0ae8 E1        	  pop hl
 3017 0ae9 67        	  ld h,a
 3018 0aea B5        	  or l
 3019 0aeb C2DA 0A   	  jp nz,exhaust_pfa
 3020 0aee DDE9      	  _jp_next
 3021               	
 3022               	; ----------------------------------------------
 3023 0af0 F20A      	  _code_header to_r_,">R"
 3024               	
 3025               	; doc{
 3026               	;
 3027               	; >r  ( x -- ) ( R: -- x )
 3028               	;
 3029               	; }doc
 3030               	
 3031 0af2 D1        	  pop de
 3032 0af3 2A10 00   	  ld hl,(return_stack_pointer)
 3033 0af6 2B        	  dec hl
 3034 0af7 72        	  ld (hl),d
 3035 0af8 2B        	  dec hl
 3036 0af9 73        	  ld (hl),e
 3037 0afa 2210 00   	  ld (return_stack_pointer),hl
 3038 0afd DDE9      	  _jp_next
 3039               	
 3040               	; ----------------------------------------------
 3041 0aff 010B      	  _code_header from_r_,"R>"
 3042               	
 3043               	; doc{
 3044               	;
 3045               	; r>  ( -- x ) ( R: x -- )
 3046               	;
 3047               	; }doc
 3048               	
 3049 0b01 2A10 00   	  ld hl,(return_stack_pointer)
 3050 0b04 5E        	  ld e,(hl)
GAS LISTING solo_forth.for_as.z80s 			page 63


 3051 0b05 23        	  inc hl
 3052 0b06 56        	  ld d,(hl)
 3053 0b07 23        	  inc hl
 3054 0b08 2210 00   	  ld (return_stack_pointer),hl
 3055 0b0b D5        	  push de
 3056 0b0c DDE9      	  _jp_next
 3057               	
 3058               	; ----------------------------------------------
 3059 0b0e 100B      	  _code_header two_r_drop_,"2RDROP"
 3060               	
 3061               	; doc{
 3062               	;
 3063               	; 2rdrop  ( R: x1 x2 -- )
 3064               	;
 3065               	; }doc
 3066               	
 3067 0b10 2A10 00   	  ld hl,(return_stack_pointer)
 3068 0b13 1104 00   	  ld de,cell*2
 3069 0b16 19        	  add hl,de
 3070 0b17 2210 00   	  ld (return_stack_pointer),hl
 3071 0b1a DDE9      	  _jp_next
 3072               	
 3073               	; ----------------------------------------------
 3074 0b1c 1E0B      	  _code_header r_drop_,"RDROP"
 3075               	
 3076               	; doc{
 3077               	;
 3078               	; rdrop  ( R: x -- )
 3079               	;
 3080               	; }doc
 3081               	
 3082 0b1e 2A10 00   	  ld hl,(return_stack_pointer)
 3083 0b21 23        	  inc hl
 3084 0b22 23        	  inc hl
 3085 0b23 2210 00   	  ld (return_stack_pointer),hl
 3086 0b26 DDE9      	  _jp_next
 3087               	
 3088               	; ----------------------------------------------
 3089 0b28 2A0B      	  _code_header two_to_r_,"2>R"
 3090               	
 3091               	; doc{
 3092               	;
 3093               	; 2>r  ( -- x1 x2 ) ( R: x1 x2 -- )
 3094               	;
 3095               	; }doc
 3096               	
 3097 0b2a 2A10 00   	  ld hl,(return_stack_pointer)
 3098 0b2d 11FC FF   	  ld de,-cell*2
 3099 0b30 19        	  add hl,de
 3100 0b31 2210 00   	  ld (return_stack_pointer),hl
 3101 0b34 C33E 0C   	  jp two_store.into_hl_pointer
 3102               	
 3103               	; ----------------------------------------------
 3104 0b37 390B      	  _code_header two_from_r_,"2R>"
 3105               	
 3106               	; 2r>  ( -- x1 x2 ) ( R: x1 x2 -- )
 3107               	
GAS LISTING solo_forth.for_as.z80s 			page 64


 3108 0b39 2A10 00   	  ld hl,(return_stack_pointer)
 3109 0b3c E5        	  push hl
 3110 0b3d 1104 00   	  ld de,cell*2
 3111 0b40 19        	  add hl,de
 3112 0b41 2210 00   	  ld (return_stack_pointer),hl
 3113 0b44 C32E 0C   	  jp two_fetch_pfa
 3114               	
 3115               	; ----------------------------------------------
 3116 0b47 490B      	  _code_header two_r_fetch_,"2R@"
 3117               	
 3118 0b49 2A10 00   	  ld hl,(return_stack_pointer)
 3119 0b4c C32F 0C   	  jp two_fetch.hl
 3120               	
 3121               	; ----------------------------------------------
 3122 0b4f 510B      	  _code_header r_fetch_,"R@"
 3123               	
 3124 0b51 2A10 00   	  ld hl,(return_stack_pointer)
 3125 0b54 C31D 0C   	  jp fetch.hl
 3126               	
 3127               	; ----------------------------------------------
 3128 0b57 590B      	  _code_header zero_equals_,"0="
 3129               	
 3130 0b59 E1        	  pop hl
 3131 0b5a 7D        	  ld a,l
 3132 0b5b B4        	  or h
 3133 0b5c CADB 0C   	  jp z,true_pfa
 3134 0b5f C3D3 0C   	  jp false_pfa
 3135               	
 3136               	; ----------------------------------------------
 3137 0b62 640B      	  _code_header zero_not_equals_,"0<>"
 3138               	
 3139 0b64 E1        	  pop hl
 3140 0b65 7D        	  ld a,l
 3141 0b66 B4        	  or h
 3142 0b67 CAD3 0C   	  jp z,false_pfa
 3143 0b6a C3DB 0C   	  jp true_pfa
 3144               	
 3145               	; ----------------------------------------------
 3146 0b6d 6F0B      	  _code_header zero_less_than_,"0<"
 3147               	
 3148 0b6f E1        	  pop hl
 3149               	zero_less_.hl: ; XXX entry not used yet
 3150               	  .if size_optimization
 3151               	    add hl,hl ; 11t, 1 byte
 3152               	  .else
 3153               	    ; [Idea from Ace Forth.]
 3154 0b70 CB14      	    rl h ; 8t, 2 bytes
 3155               	  .endif
 3156               	true_if_cy:
 3157 0b72 DADB 0C   	  jp c,true_pfa
 3158 0b75 C3D3 0C   	  jp false_pfa
 3159               	
 3160               	; ----------------------------------------------
 3161 0b78 7A0B      	  _code_header zero_greater_than_,"0>"
 3162               	
 3163               	  ; [Code from DZX-Forth.]
 3164               	
GAS LISTING solo_forth.for_as.z80s 			page 65


 3165 0b7a D1        	  pop de
 3166 0b7b 2100 00   	  ld hl,0
 3167 0b7e C3FA 0D   	  jp is_de_less_than_hl
 3168               	
 3169               	; ----------------------------------------------
 3170 0b81 830B      	  _code_header plus_,"+"
 3171               	
 3172 0b83 D1        	  pop de
 3173 0b84 E1        	  pop hl
 3174 0b85 19        	  add hl,de
 3175 0b86 C35E 05   	  jp push_hl
 3176               	
 3177               	; ----------------------------------------------
 3178 0b89 8B0B      	  _code_header d_plus_,"D+"
 3179               	
 3180               	; XXX TODO move to the library.
 3181               	
 3182               	; [Code from fig-Forth 1.1g.]
 3183               	   
 3184               	              ;                           t  B
 3185               	              ;                           -- --
 3186 0b8b D9        	  exx         ; save ip                   04 01
 3187 0b8c C1        	  pop bc      ; (bc)<--d2h                10 01
 3188 0b8d E1        	  pop hl      ; (hl)<--d2l                10 01
 3189 0b8e F1        	  pop af      ; (af)<--d1h                10 01
 3190 0b8f D1        	  pop de      ; (de)<--d1l                10 01
 3191 0b90 F5        	  push  af    ; (s1)<--d1h                11 01
 3192 0b91 19        	  add hl,de   ; (hl)<--d2l+d1l=d3l        11 01
 3193 0b92 EB        	  ex  de,hl   ; (de)<--d3l                04 01
 3194 0b93 E1        	  pop hl      ; (hl)<--d1h                10 01
 3195 0b94 ED4A      	  adc hl,bc   ; (hl)<--d1h+d2h+carry=d3h  15 02
 3196 0b96 D5        	  push  de    ; (s2)<--d3l                11 01
 3197 0b97 E5        	  push  hl    ; (s1)<--d3h                11 01
 3198 0b98 D9        	  exx         ; restore ip                04 01
 3199 0b99 DDE9      	  _jp_next    ;                           08 02
 3200               	              ;                          --- --
 3201               	              ;                          134 15 TOTALS
 3202               	
 3203               	; ----------------------------------------------
 3204 0b9b 9D0B      	  _code_header negate_,"NEGATE"
 3205               	
 3206 0b9d D1        	  pop de
 3207 0b9e 2100 00   	  ld hl,0x0000
 3208 0ba1 A7        	  and a
 3209 0ba2 ED52      	  sbc hl,de
 3210 0ba4 C35E 05   	  jp push_hl
 3211               	
 3212               	; ----------------------------------------------
 3213 0ba7 A90B      	  _code_header dnegate_,"DNEGATE"
 3214               	
 3215               	  ; XXX TODO move to the disk
 3216               	
 3217 0ba9 E1        	  pop hl
 3218 0baa D1        	  pop de
 3219 0bab 97        	  sub a
 3220 0bac 93        	  sub e
 3221 0bad 5F        	  ld e,a
GAS LISTING solo_forth.for_as.z80s 			page 66


 3222 0bae 3E00      	  ld a,0x00
 3223 0bb0 9A        	  sbc a,d
 3224 0bb1 57        	  ld d,a
 3225 0bb2 3E00      	  ld a,0x00
 3226 0bb4 9D        	  sbc a,l
 3227 0bb5 6F        	  ld l,a
 3228 0bb6 3E00      	  ld a,0x00
 3229 0bb8 9C        	  sbc a,h
 3230 0bb9 67        	  ld h,a
 3231 0bba C35D 05   	  jp push_hlde
 3232               	
 3233               	; ----------------------------------------------
 3234 0bbd BF0B      	  _code_header nip_,"NIP"
 3235               	
 3236 0bbf E1        	  pop hl
 3237 0bc0 D1        	  pop de
 3238 0bc1 C35E 05   	  jp push_hl
 3239               	
 3240               	; ----------------------------------------------
 3241 0bc4 C60B      	  _code_header tuck_,"TUCK"
 3242               	
 3243 0bc6 E1        	  pop hl
 3244 0bc7 D1        	  pop de
 3245 0bc8 E5        	  push hl
 3246 0bc9 C35D 05   	  jp push_hlde
 3247               	
 3248               	; ----------------------------------------------
 3249 0bcc CE0B      	  _code_header over_,"OVER"
 3250               	
 3251 0bce D1        	  pop de
 3252 0bcf E1        	  pop hl
 3253 0bd0 E5        	  push hl
 3254 0bd1 C35D 05   	  jp push_hlde
 3255               	
 3256               	; ----------------------------------------------
 3257 0bd4 D60B      	  _code_header drop_,"DROP"
 3258               	
 3259 0bd6 E1        	  pop hl
 3260 0bd7 DDE9      	  _jp_next
 3261               	
 3262               	; ----------------------------------------------
 3263 0bd9 DB0B      	  _code_header swap_,"SWAP"
 3264               	
 3265 0bdb E1        	  pop hl
 3266 0bdc E3        	  ex (sp),hl
 3267 0bdd C35E 05   	  jp push_hl
 3268               	
 3269               	; ----------------------------------------------
 3270 0be0 E20B      	  _code_header dup_,"DUP"
 3271               	
 3272 0be2 E1        	  pop hl
 3273 0be3 E5        	  push hl
 3274 0be4 C35E 05   	  jp push_hl
 3275               	
 3276               	; ----------------------------------------------
 3277 0be7 E90B      	  _code_header two_dup_,"2DUP"
 3278               	
GAS LISTING solo_forth.for_as.z80s 			page 67


 3279 0be9 E1        	  pop hl
 3280 0bea D1        	  pop de
 3281 0beb D5        	  push de
 3282 0bec E5        	  push hl
 3283 0bed C35D 05   	  jp push_hlde
 3284               	
 3285               	; ----------------------------------------------
 3286 0bf0 F20B      	  _code_header plus_store_,"+!"
 3287               	
 3288 0bf2 E1        	  pop hl ; variable address
 3289 0bf3 D1        	  pop de ; number
 3290 0bf4 7E        	  ld a,(hl)
 3291 0bf5 83        	  add a,e
 3292 0bf6 77        	  ld (hl),a
 3293 0bf7 23        	  inc hl
 3294 0bf8 7E        	  ld a,(hl)
 3295 0bf9 8A        	  adc a,d
 3296 0bfa 77        	  ld (hl),a
 3297 0bfb DDE9      	  _jp_next
 3298               	
 3299               	; ----------------------------------------------
 3300 0bfd FF0B      	  _code_header off_,"OFF"
 3301               	
 3302 0bff E1        	  pop hl
 3303 0c00 3600      	  ld (hl),0
 3304 0c02 23        	  inc hl
 3305 0c03 3600      	  ld (hl),0
 3306 0c05 DDE9      	  _jp_next
 3307               	
 3308               	; ----------------------------------------------
 3309 0c07 090C      	  _code_header on_,"ON"
 3310               	
 3311 0c09 E1        	  pop hl
 3312               	.if true==1
 3313 0c0a 3601      	  ld (hl),1
 3314 0c0c 23        	  inc hl
 3315 0c0d 3600      	  ld (hl),0
 3316               	.else
 3317               	  ld (hl),0xFF
 3318               	  inc hl
 3319               	  ld (hl),0xFF
 3320               	.endif
 3321 0c0f DDE9      	  _jp_next
 3322               	
 3323               	; ----------------------------------------------
 3324 0c11 130C      	  _code_header toggle_,"TOGGLE"
 3325               	
 3326               	; doc{
 3327               	;
 3328               	; toggle  ( a b -- )  \ fig-Forth
 3329               	;
 3330               	; Complement the contents of _a_ by the bit pattern _b_.
 3331               	;
 3332               	; }doc
 3333               	
 3334 0c13 D1        	  pop de ; e = bit pattern
 3335 0c14 E1        	  pop hl ; address
GAS LISTING solo_forth.for_as.z80s 			page 68


 3336 0c15 7E        	  ld a,(hl)
 3337 0c16 AB        	  xor e
 3338 0c17 77        	  ld (hl),a
 3339 0c18 DDE9      	  _jp_next
 3340               	
 3341               	; ----------------------------------------------
 3342 0c1a 1C0C      	  _code_header fetch_,"@"
 3343               	
 3344 0c1c E1        	  pop hl
 3345               	fetch.hl:
 3346 0c1d 5E        	  ld e,(hl)
 3347 0c1e 23        	  inc hl
 3348 0c1f 56        	  ld d,(hl)
 3349 0c20 D5        	  push de
 3350 0c21 DDE9      	  _jp_next
 3351               	
 3352               	; ----------------------------------------------
 3353 0c23 250C      	  _code_header c_fetch_,"C@"
 3354               	
 3355 0c25 E1        	  pop hl
 3356 0c26 6E        	  ld l,(hl)
 3357 0c27 2600      	  ld h,0x00
 3358 0c29 C35E 05   	  jp push_hl
 3359               	
 3360               	; ----------------------------------------------
 3361 0c2c 2E0C      	  _code_header two_fetch_,"2@"
 3362               	
 3363 0c2e E1        	  pop hl ; address
 3364               	two_fetch.hl:
 3365 0c2f 5E        	  ld e,(hl)     ; 07t  1
 3366 0c30 23        	  inc hl        ; 06t  1
 3367 0c31 56        	  ld d,(hl)     ; 07t  1 ; de = low part
 3368 0c32 23        	  inc hl        ; 06t  1
 3369 0c33 7E        	  ld a,(hl)     ; 07t  1
 3370 0c34 23        	  inc hl        ; 06t  1
 3371 0c35 66        	  ld h,(hl)     ; 07t  1
 3372 0c36 6F        	  ld l,a        ; 04t  1 ; hl = high part
 3373 0c37 EB        	  ex de,hl      ; 04t  1
 3374 0c38 C35D 05   	  jp push_hlde ; 10t  3
 3375               	                ; 11t  0 push de
 3376               	                ; 11t  0 push hl
 3377               	                ; 86t 12 TOTAL
 3378               	
 3379               	; ----------------------------------------------
 3380 0c3b 3D0C      	  _code_header two_store_,"2!"
 3381               	
 3382 0c3d E1        	  pop hl
 3383               	two_store.into_hl_pointer:
 3384 0c3e D1        	  pop de
 3385 0c3f 73        	  ld (hl),e
 3386 0c40 23        	  inc hl
 3387 0c41 72        	  ld (hl),d
 3388 0c42 23        	  inc hl
 3389               	  .if size_optimization
 3390               	    jp store.into_hl_pointer
 3391               	  .else
 3392 0c43 D1        	    pop de
GAS LISTING solo_forth.for_as.z80s 			page 69


 3393 0c44 73        	    ld (hl),e
 3394 0c45 23        	    inc hl
 3395 0c46 72        	    ld (hl),d
 3396 0c47 DDE9      	    _jp_next
 3397               	  .endif
 3398               	
 3399               	; ----------------------------------------------
 3400 0c49 4B0C      	  _code_header store_,"!"
 3401               	
 3402 0c4b E1        	  pop hl
 3403               	store.into_hl_pointer:
 3404 0c4c D1        	  pop de
 3405               	store.de_into_hl_pointer:
 3406 0c4d 73        	  ld (hl),e
 3407 0c4e 23        	  inc hl
 3408 0c4f 72        	  ld (hl),d
 3409 0c50 DDE9      	  _jp_next
 3410               	
 3411               	; ----------------------------------------------
 3412 0c52 540C      	  _code_header c_store_,"C!"
 3413               	
 3414 0c54 E1        	  pop hl
 3415 0c55 D1        	  pop de
 3416 0c56 73        	  ld (hl),e
 3417 0c57 DDE9      	  _jp_next
 3418               	
 3419               	; ----------------------------------------------
 3420 0c59 650C      	  _colon_header colon_,":",immediate
 3421               	
 3422 0c5b 320F      	  dw question_exec_
 3423 0c5d 030F      	  dw store_csp_
 3424 0c5f C513 980F 	  dw header_,right_bracket_
 3425 0c63 C90F      	  dw paren_semicolon_code_
 3426               	do_colon:
 3427 0c65 2A10 00   	  ld hl,(return_stack_pointer)
 3428 0c68 2B        	  dec hl
 3429 0c69 70        	  ld (hl),b
 3430 0c6a 2B        	  dec hl
 3431 0c6b 71        	  ld (hl),c
 3432 0c6c 2210 00   	  ld (return_stack_pointer),hl ; save the updated IP
 3433 0c6f 13        	  inc de ; de=pfa
 3434 0c70 4B        	  ld c,e
 3435 0c71 42        	  ld b,d ; bc=pfa
 3436               	do_colon.end: ; XXX TMP for debugging
 3437 0c72 DDE9      	  _jp_next
 3438               	
 3439               	; ----------------------------------------------
 3440 0c74 650C      	  _colon_header noname_,":NONAME",immediate
 3441               	
 3442               	  ; [Code from the Afera library.]
 3443               	
 3444               	  ; XXX TODO move to the disk? problem: do_colon
 3445               	
 3446 0c76 320F      	  dw question_exec_
 3447 0c78 A00F      	  dw smudge_  ; deactivate the effect of the next `smudge` in `;`
 3448 0c7a 900D      	  dw here_ ; cfa
 3449 0c7c 030F      	  dw store_csp_
GAS LISTING solo_forth.for_as.z80s 			page 70


 3450 0c7e 8D06 650C 	  dw lit_,do_colon,comma_ ; create the code field
 3450      B20D 
 3451 0c84 980F      	  dw right_bracket_
 3452 0c86 C00A      	  dw semicolon_s_
 3453               	
 3454               	; ----------------------------------------------
 3455 0c88 650C      	  _colon_header semicolon_,";",immediate
 3456               	
 3457 0c8a 480F      	  dw question_csp_
 3458 0c8c 680F C00A 	  dw compile_,semicolon_s_
 3459 0c90 A00F      	  dw smudge_
 3460 0c92 900F      	  dw left_bracket_
 3461 0c94 C00A      	  dw semicolon_s_
 3462               	
 3463               	; ----------------------------------------------
 3464               	  _header noop_,"NOOP"
 3465               	
 3466               	; doc{
 3467               	;
 3468               	; noop  ( -- )
 3469               	;
 3470               	; }doc
 3471               	
 3472 0c96 5F05      	  dw next ; code field
 3473               	
 3474               	; ----------------------------------------------
 3475 0c98 650C      	  _colon_header constant_,"CONSTANT"
 3476               	
 3477 0c9a 1214 B20D 	  dw create_,comma_
 3478 0c9e C90F      	  dw paren_semicolon_code_
 3479               	do_constant:
 3480 0ca0 13        	  inc de    ; de=pfa
 3481 0ca1 EB        	  ex de,hl  ; hl=pfa
 3482 0ca2 C31D 0C   	  jp fetch.hl
 3483               	
 3484               	; ----------------------------------------------
 3485 0ca5 650C      	  _colon_header variable_,"VARIABLE"
 3486               	
 3487               	; doc{
 3488               	;
 3489               	; variable ( "name" -- )  \ ANS Forth
 3490               	;
 3491               	; Parse _name_.  Create a definition for _name_ with the
 3492               	; execution semantics defined below. Reserve one cell of data
 3493               	; space.
 3494               	;
 3495               	;    _name_ is referred to as a variable.
 3496               	;
 3497               	;          name Execution: ( -- a )
 3498               	;
 3499               	;    _a_ is the address of the reserved cell. A program is
 3500               	;    responsible for initializing the contents of the reserved
 3501               	;    cell.
 3502               	;
 3503               	; }doc
 3504               	
 3505 0ca7 1214 820D 	  dw create_,cell_,allot_
GAS LISTING solo_forth.for_as.z80s 			page 71


 3505      980D 
 3506 0cad C00A      	  dw semicolon_s_
 3507               	
 3508               	; ----------------------------------------------
 3509 0caf 650C      	  _colon_header user_,"USER"
 3510               	
 3511               	  ; XXX TODO -- Use only one byte for storage,
 3512               	  ; but defining `cconstant` only for this does not seem a good idea.
 3513               	
 3514 0cb1 980C      	  dw constant_
 3515 0cb3 C90F      	  dw paren_semicolon_code_
 3516               	do_user:
 3517               	;  _z80_border_wait 5 ; XXX INFORMER
 3518 0cb5 13        	  inc de      ; de=pfa
 3519 0cb6 EB        	  ex de,hl
 3520 0cb7 5E        	  ld e,(hl)
 3521 0cb8 1600      	  ld d,0x00   ; de = index of the user variable
 3522 0cba 2A0E 00   	  ld hl,(user_variables_pointer)
 3523 0cbd 19        	  add hl,de   ; hl= address of the user variable
 3524               	;  _z80_border_wait 6 ; XXX INFORMER
 3525 0cbe C35E 05   	  jp push_hl
 3526               	
 3527               	; ----------------------------------------------
 3528 0cc1 A00C      	  _constant_header msg_scr_,"MSG-SCR"
 3529               	
 3530               	; doc{
 3531               	;
 3532               	; msg-scr  ( -- n )
 3533               	;
 3534               	; Constant: Screen where the error messages start.
 3535               	;
 3536               	; }doc
 3537               	
 3538               	; Idea taken from lina ciforth.
 3539               	
 3540 0cc3 0400      	  dw 0x0004
 3541               	
 3542               	; ----------------------------------------------
 3543 0cc5 A00C      	  _constant_header zero_,"0"
 3544               	
 3545 0cc7 0000      	  dw 0x0000
 3546               	
 3547               	; ----------------------------------------------
 3548 0cc9 A00C      	  _constant_header one_,"1"
 3549               	
 3550 0ccb 0100      	  dw 0x0001
 3551               	
 3552               	; ----------------------------------------------
 3553 0ccd A00C      	  _constant_header two_,"2"
 3554               	
 3555 0ccf 0200      	  dw 0x0002
 3556               	
 3557               	; ----------------------------------------------
 3558 0cd1 D30C      	  _code_header false_,"FALSE"
 3559               	
 3560               	; doc{
 3561               	;
GAS LISTING solo_forth.for_as.z80s 			page 72


 3562               	; false  ( -- f )
 3563               	;
 3564               	; }doc
 3565               	
 3566 0cd3 2100 00   	  ld hl,false
 3567 0cd6 C35E 05   	  jp push_hl
 3568               	
 3569               	; ----------------------------------------------
 3570 0cd9 DB0C      	  _code_header true_,"TRUE"
 3571               	
 3572               	; doc{
 3573               	;
 3574               	; true  ( -- t )
 3575               	;
 3576               	; }doc
 3577               	
 3578 0cdb 2101 00   	  ld hl,true
 3579 0cde C35E 05   	  jp push_hl
 3580               	
 3581               	; ----------------------------------------------
 3582 0ce1 A00C      	  _constant_header b_l_,"BL"
 3583               	
 3584               	; doc{
 3585               	;
 3586               	; bl  ( -- n )
 3587               	;
 3588               	; }doc
 3589               	
 3590 0ce3 2000      	  dw space_char
 3591               	
 3592               	; ----------------------------------------------
 3593 0ce5 A00C      	  _constant_header c_slash_l_,"C/L"
 3594               	
 3595 0ce7 4000      	  dw characters_per_line
 3596               	
 3597               	; ----------------------------------------------
 3598 0ce9 A00C      	  _constant_header l_slash_scr_,"L/SCR"
 3599               	
 3600 0ceb 1000      	  dw lines_per_screen
 3601               	
 3602               	; ----------------------------------------------
 3603 0ced A00C      	  _constant_header disk_buffer_,"DISK-BUFFER"
 3604               	
 3605 0cef 0703      	  dw disk_buffer
 3606               	
 3607               	; ----------------------------------------------
 3608 0cf1 A00C      	  _constant_header b_slash_buf_,"B/BUF"
 3609               	
 3610 0cf3 0002      	  dw data_bytes_per_buffer
 3611               	
 3612               	; ----------------------------------------------
 3613 0cf5 A00C      	  _constant_header b_slash_scr_,"B/SCR"
 3614               	
 3615 0cf7 0200      	  dw blocks_per_screen
 3616               	
 3617               	; ----------------------------------------------
 3618 0cf9 A00C      	  _constant_header scr_slash_disk_,"SCR/DISK"
GAS LISTING solo_forth.for_as.z80s 			page 73


 3619               	
 3620 0cfb 0C03      	  dw screens_per_disk
 3621               	
 3622               	; ----------------------------------------------
 3623 0cfd A00C      	  _constant_header hash_vocs_,"#VOCS"
 3624               	
 3625 0cff 0800      	  dw max_search_order
 3626               	
 3627               	; ----------------------------------------------
 3628 0d01 650C      	  _colon_header plus_origin_,"+ORIGIN"
 3629               	
 3630               	; doc{
 3631               	;
 3632               	; +origin  ( n -- a )  \ fig-Forth
 3633               	;
 3634               	; Leave the memory address relative by _n_ to the origin
 3635               	; parameter area.  _n_ is the minimum address unit, either byte
 3636               	; or word.  This definition is used to access or modify the
 3637               	; boot-up parameters at the origin area.
 3638               	;
 3639               	; }doc
 3640               	
 3641 0d03 8D06 005E 	  dw lit_,origin,plus_
 3641      810B 
 3642 0d09 C00A      	  dw semicolon_s_
 3643               	
 3644               	; ----------------------------------------------
 3645 0d0b B50C      	  _user_variable_header sp0_,"SP0"
 3646               	
 3647 0d0d 00        	  db 0x00
 3648               	
 3649               	; ----------------------------------------------
 3650 0d0e B50C      	  _user_variable_header rp0_,"RP0"
 3651               	
 3652 0d10 02        	  db 0x02
 3653               	
 3654               	; ----------------------------------------------
 3655 0d11 B50C      	  _user_variable_header width_,"WIDTH"
 3656               	
 3657               	  ; XXX TODO normal variable
 3658               	
 3659 0d13 06        	  db 0x06
 3660               	
 3661               	; ----------------------------------------------
 3662 0d14 B50C      	  _user_variable_header warning_,"WARNING"
 3663               	
 3664 0d16 08        	  db 0x08
 3665               	
 3666               	; ----------------------------------------------
 3667 0d17 B50C      	  _user_variable_header dp_,"DP"
 3668               	
 3669               	  ; XXX TODO why this is a user variable?
 3670               	  ; XXX TODO normal variable
 3671               	
 3672 0d19 0C        	  db 0x0C
 3673               	
 3674               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 74


 3675 0d1a 1A14      	  _variable_header voc_link_,"VOC-LINK"
 3676               	
 3677 0d1c 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 3678               	
 3679               	; ----------------------------------------------
 3680 0d1e B50C      	  _user_variable_header blk_,"BLK"
 3681               	
 3682               	  ; XXX TODO normal variable
 3683               	
 3684 0d20 10        	  db 0x10
 3685               	
 3686               	; ----------------------------------------------
 3687 0d21 B50C      	  _user_variable_header to_in_,">IN"
 3688               	
 3689               	  ; XXX TODO normal variable
 3690               	
 3691 0d23 12        	  db 0x12
 3692               	
 3693               	; ----------------------------------------------
 3694 0d24 B50C      	  _user_variable_header out_,"OUT"
 3695               	
 3696               	  ; XXX TODO In Forth 83 it's a user variable too, but it's called `#out`.
 3697               	  ; XXX TODO rename to `#emitted`
 3698 0d26 14        	  db 0x14
 3699               	
 3700               	; ----------------------------------------------
 3701 0d27 B50C      	  _user_variable_header scr_,'SCR' ; XXX OLD -- used by `list`
 3702               	
 3703 0d29 16        	  db 0x16
 3704               	
 3705               	; ----------------------------------------------
 3706 0d2a B50C      	  _user_variable_header context_,"CONTEXT"
 3707               	
 3708 0d2c 2A        	  db 0x2A
 3709               	
 3710               	; ----------------------------------------------
 3711 0d2d B50C      	  _user_variable_header current_,"CURRENT"
 3712               	
 3713 0d2f 1C        	  db 0x1C
 3714               	
 3715               	; ----------------------------------------------
 3716 0d30 B50C      	  _user_variable_header state_,"STATE"
 3717               	
 3718 0d32 1E        	  db 0x1E
 3719               	
 3720               	; ----------------------------------------------
 3721 0d33 B50C      	  _user_variable_header base_,"BASE"
 3722               	
 3723 0d35 20        	  db 0x20
 3724               	
 3725               	; ----------------------------------------------
 3726 0d36 B50C      	  _user_variable_header dpl_,"DPL"
 3727               	
 3728 0d38 22        	  db 0x22
 3729               	
 3730               	; ----------------------------------------------
 3731 0d39 B50C      	  _user_variable_header fld_,"FLD"
GAS LISTING solo_forth.for_as.z80s 			page 75


 3732               	
 3733 0d3b 24        	  db 0x24
 3734               	
 3735               	; ----------------------------------------------
 3736 0d3c B50C      	  _user_variable_header csp_,"CSP"
 3737               	
 3738 0d3e 26        	  db 0x26
 3739               	
 3740               	; ----------------------------------------------
 3741 0d3f B50C      	  _user_variable_header r_hash_,"R#"
 3742               	
 3743               	  ; XXX OLD
 3744 0d41 28        	  db 0x28
 3745               	
 3746               	; ----------------------------------------------
 3747 0d42 B50C      	  _user_variable_header hld_,"HLD"
 3748               	
 3749 0d44 1A        	  db 0x1A
 3750               	
 3751               	; ----------------------------------------------
 3752 0d45 A00C      	  _constant_header tib_,"TIB"
 3753               	
 3754               	; doc{
 3755               	;
 3756               	; tib  ( -- ca )  \ ANS-Forth
 3757               	;
 3758               	; Address of the terminal input buffer.
 3759               	;
 3760               	; }doc
 3761               	
 3762 0d47 1402      	  dw terminal_input_buffer
 3763               	
 3764               	; ----------------------------------------------
 3765 0d49 1A14      	  _variable_header number_tib_,"#TIB"
 3766               	
 3767 0d4b 5000      	  dw bytes_per_terminal_input_buffer
 3768               	
 3769               	; ----------------------------------------------
 3770 0d4d 650C      	  _colon_header recurse_,"RECURSE",immediate
 3771               	
 3772               	; doc{
 3773               	;
 3774               	; recurse  ( -- )  \ ANS Forth
 3775               	;
 3776               	; }doc
 3777               	
 3778 0d4f 460E E30E 	  dw latest_,nfa_to_cfa_,compile_comma_
 3778      BE0D 
 3779 0d55 C00A      	  dw semicolon_s_
 3780               	
 3781               	; ----------------------------------------------
 3782 0d57 590D      	  _code_header one_plus_,"1+"
 3783               	
 3784 0d59 E1        	  pop hl
 3785 0d5a 23        	  inc hl
 3786 0d5b C35E 05   	  jp push_hl
 3787               	
GAS LISTING solo_forth.for_as.z80s 			page 76


 3788               	; ----------------------------------------------
 3789 0d5e 600D      	  _code_header two_plus_,"2+"
 3790               	
 3791 0d60 E1        	  pop hl
 3792 0d61 23        	  inc hl
 3793 0d62 23        	  inc hl
 3794 0d63 C35E 05   	  jp push_hl
 3795               	
 3796               	; ----------------------------------------------
 3797 0d66 730D      	  _code_alias_header cell_minus_,"CELL-",,two_minus_
 3798               	
 3799               	; ----------------------------------------------
 3800 0d68 600D      	  _code_alias_header cell_plus_,"CELL+",,two_plus_
 3801               	
 3802               	; ----------------------------------------------
 3803 0d6a 6C0D      	  _code_header one_minus_,"1-"
 3804               	
 3805 0d6c E1        	  pop hl
 3806 0d6d 2B        	  dec hl
 3807 0d6e C35E 05   	  jp push_hl
 3808               	
 3809               	; ----------------------------------------------
 3810 0d71 730D      	  _code_header two_minus_,"2-"
 3811               	
 3812 0d73 E1        	  pop hl
 3813 0d74 2B        	  dec hl
 3814 0d75 2B        	  dec hl
 3815 0d76 C35E 05   	  jp push_hl
 3816               	
 3817               	; ----------------------------------------------
 3818 0d79 7B0D      	  _code_header two_star_,"2*"
 3819               	
 3820               	; doc{
 3821               	;
 3822               	; 2*  ( x1 -- x2 )  \ ANS Forth
 3823               	;
 3824               	; _x2_ is the result of shifting _x1_ one bit toward the
 3825               	; most-significant bit, filling the vacated least-significant
 3826               	; bit with zero.
 3827               	;
 3828               	; This is the same as `1 lshift`.
 3829               	;
 3830               	; }doc
 3831               	
 3832               	  ; [Code from DZX-Forth. Documentation partly based on lina
 3833               	  ; ciforth.]
 3834               	
 3835 0d7b E1        	  pop hl
 3836 0d7c 29        	  add hl,hl
 3837 0d7d C35E 05   	  jp push_hl
 3838               	
 3839               	; ----------------------------------------------
 3840 0d80 7B0D      	  _code_alias_header cells_,"CELLS",,two_star_
 3841               	
 3842               	; ----------------------------------------------
 3843 0d82 A00C      	  _constant_header cell_,"CELL"
 3844               	
GAS LISTING solo_forth.for_as.z80s 			page 77


 3845 0d84 0200      	  dw 0x0002
 3846               	
 3847               	; ----------------------------------------------
 3848 0d86 880D      	  _code_header two_slash_,"2/"
 3849               	
 3850               	; doc{
 3851               	;
 3852               	; 2/  ( x1 -- x2 )  \ ANS Forth
 3853               	;
 3854               	; _x2_ is the result of shifting _x1_ one bit toward the
 3855               	; least-significant bit, leaving the most-significant bit
 3856               	; unchanged.
 3857               	;
 3858               	; This is the same as `s>d 2 fm/mod swap drop`. It is not the same
 3859               	; as `2 /`, nor is it the same as `1 rshift`.
 3860               	;
 3861               	; }doc
 3862               	
 3863               	  ; [Code from Spectrum Forth-83. Documentation partly based on lina
 3864               	  ; ciforth.]
 3865               	
 3866 0d88 E1        	  pop hl
 3867 0d89 CB2C      	  sra h
 3868 0d8b CB1D      	  rr l
 3869 0d8d C35E 05   	  jp push_hl
 3870               	
 3871               	; ----------------------------------------------
 3872 0d90 650C      	  _colon_header here_,"HERE"
 3873               	
 3874 0d92 170D 1A0C 	  dw dp_,fetch_
 3875 0d96 C00A      	  dw semicolon_s_
 3876               	
 3877               	; ----------------------------------------------
 3878 0d98 650C      	  _colon_header allot_,"ALLOT"
 3879               	
 3880 0d9a 170D F00B 	  dw dp_,plus_store_
 3881 0d9e C00A      	  dw semicolon_s_
 3882               	
 3883               	; ----------------------------------------------
 3884 0da0 650C      	  _colon_header s_comma_,"s,"
 3885               	
 3886               	; doc{
 3887               	; s,  ( ca len -- )
 3888               	; }doc
 3889               	
 3890 0da2 E00B C60D 	  dw dup_,c_comma_,tuck_,here_,swap_,cmove_,allot_
 3890      C40B 900D 
 3890      D90B E609 
 3890      980D 
 3891 0db0 C00A      	  dw semicolon_s_
 3892               	
 3893               	; ----------------------------------------------
 3894 0db2 650C      	  _colon_header comma_,","
 3895               	
 3896 0db4 900D 490C 	  dw here_,store_,two_,allot_
 3896      CD0C 980D 
 3897 0dbc C00A      	  dw semicolon_s_
GAS LISTING solo_forth.for_as.z80s 			page 78


 3898               	
 3899               	; ----------------------------------------------
 3900 0dbe 650C      	  _colon_header compile_comma_,"COMPILE,"
 3901               	
 3902               	; doc{
 3903               	;
 3904               	; compile,  ( cfa -- )
 3905               	;
 3906               	; }doc
 3907               	
 3908 0dc0 250F B20D 	  dw question_comp_,comma_
 3909 0dc4 C00A      	  dw semicolon_s_
 3910               	
 3911               	; ----------------------------------------------
 3912 0dc6 650C      	  _colon_header c_comma_,"C,"
 3913               	
 3914 0dc8 900D 520C 	  dw here_,c_store_,one_,allot_
 3914      C90C 980D 
 3915 0dd0 C00A      	  dw semicolon_s_
 3916               	
 3917               	; ----------------------------------------------
 3918 0dd2 D40D      	  _code_header minus_,"-"
 3919               	
 3920 0dd4 D1        	  pop de
 3921 0dd5 E1        	  pop hl
 3922 0dd6 A7        	  and a
 3923 0dd7 ED52      	  sbc hl,de
 3924 0dd9 C35E 05   	  jp push_hl
 3925               	
 3926               	; ----------------------------------------------
 3927 0ddc DE0D      	  _code_header not_equals_,"<>"
 3928               	
 3929 0dde D1        	  pop de
 3930 0ddf E1        	  pop hl
 3931 0de0 CD0C 05   	  call compare_de_hl_unsigned
 3932               	false_if_z: ; XXX entry not used yet
 3933 0de3 CAD3 0C   	  jp z,false_pfa
 3934 0de6 C3DB 0C   	  jp true_pfa
 3935               	
 3936               	; ----------------------------------------------
 3937 0de9 EB0D      	  _code_header equals_,"="
 3938               	
 3939 0deb D1        	  pop de
 3940 0dec E1        	  pop hl
 3941 0ded CD0C 05   	  call compare_de_hl_unsigned
 3942               	true_if_z: ; XXX entry not used yet
 3943 0df0 CADB 0C   	  jp z,true_pfa
 3944 0df3 C3D3 0C   	  jp false_pfa
 3945               	
 3946               	; ----------------------------------------------
 3947 0df6 F80D      	  _code_header less_than_,"<"
 3948               	
 3949 0df8 D1        	  pop de
 3950 0df9 E1        	  pop hl
 3951               	is_de_less_than_hl:
 3952 0dfa CD12 05   	  call compare_de_hl_signed
 3953               	  .if size_optimization
GAS LISTING solo_forth.for_as.z80s 			page 79


 3954               	    jp true_if_cy
 3955               	  .else
 3956 0dfd DADB 0C   	    jp c,true_pfa
 3957 0e00 C3D3 0C   	    jp false_pfa
 3958               	  .endif
 3959               	
 3960               	; ----------------------------------------------
 3961 0e03 050E      	  _code_header u_greater_than_,"U>"
 3962               	
 3963 0e05 E1        	  pop hl
 3964               	u_greater_than.hl:
 3965 0e06 D1        	  pop de
 3966 0e07 C30E 0E   	  jp u_less_than.de_hl
 3967               	
 3968               	; ----------------------------------------------
 3969 0e0a 0C0E      	  _code_header u_less_than_,"U<"
 3970               	
 3971 0e0c D1        	  pop de
 3972 0e0d E1        	  pop hl
 3973               	u_less_than.de_hl:
 3974 0e0e CD0C 05   	  call compare_de_hl_unsigned
 3975               	  .if size_optimization
 3976               	    jp true_if_cy
 3977               	  .else
 3978 0e11 DADB 0C   	    jp c,true_pfa
 3979 0e14 C3D3 0C   	    jp false_pfa
 3980               	  .endif
 3981               	
 3982               	; ----------------------------------------------
 3983 0e17 190E      	  _code_header greater_than_,">"
 3984               	
 3985 0e19 E1        	  pop hl
 3986 0e1a D1        	  pop de
 3987 0e1b C3FA 0D   	  jp is_de_less_than_hl
 3988               	
 3989               	; ----------------------------------------------
 3990 0e1e 200E      	  _code_header rot_,"ROT"
 3991               	
 3992 0e20 D1        	  pop de
 3993 0e21 E1        	  pop hl
 3994 0e22 E3        	  ex (sp),hl
 3995 0e23 C35D 05   	  jp push_hlde
 3996               	
 3997               	; ----------------------------------------------
 3998 0e26 650C      	  _colon_header space_,"SPACE"
 3999               	
 4000 0e28 E10C EC08 	  dw b_l_,emit_
 4001 0e2c C00A      	  dw semicolon_s_
 4002               	
 4003               	; ----------------------------------------------
 4004 0e2e 650C      	  _colon_header question_dup_,"?DUP"
 4005               	
 4006 0e30 E00B      	  dw dup_
 4007 0e32 6007 380E 	  dw zero_branch_,question_dup.end
 4008 0e36 E00B      	  dw dup_
 4009               	question_dup.end:
 4010 0e38 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.for_as.z80s 			page 80


 4011               	
 4012               	; ----------------------------------------------
 4013 0e3a 600D      	  _code_alias_header lfa_to_nfa_,"LFA>NFA",,two_plus_
 4014               	
 4015               	; ----------------------------------------------
 4016 0e3c 650C      	  _colon_header trail_,"TRAIL"
 4017               	
 4018               	; doc{
 4019               	;
 4020               	; trail ( -- nfa )
 4021               	;
 4022               	; Leave the name field address of the topmost word in the
 4023               	; `context` vocabulary.
 4024               	;
 4025               	; }doc
 4026               	
 4027 0e3e 2A0D 1A0C 	  dw context_,fetch_,fetch_
 4027      1A0C 
 4028 0e44 C00A      	  dw semicolon_s_
 4029               	
 4030               	; ----------------------------------------------
 4031 0e46 650C      	  _colon_header latest_,"LATEST"
 4032               	
 4033               	; doc{
 4034               	;
 4035               	; latest ( -- nfa )  \ ANS Forth
 4036               	;
 4037               	; Leave the name field address of the topmost word in the
 4038               	; `current` vocabulary.
 4039               	;
 4040               	; }doc
 4041               	
 4042 0e48 2D0D 1A0C 	  dw current_,fetch_,fetch_
 4042      1A0C 
 4043 0e4e C00A      	  dw semicolon_s_
 4044               	
 4045               	; ----------------------------------------------
 4046 0e50 650C      	  _colon_header pfa_to_lfa_,"PFA>LFA"
 4047               	
 4048 0e52 560E 620E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4049               	
 4050               	; ----------------------------------------------
 4051 0e56 730D      	  _code_alias_header pfa_to_cfa_,"PFA>CFA",,two_minus_
 4052               	
 4053               	; ----------------------------------------------
 4054 0e58 600D      	  _code_alias_header cfa_to_pfa_,"CFA>PFA",,two_plus_
 4055               	
 4056               	; ----------------------------------------------
 4057 0e5a 650C      	  _colon_header pfa_to_nfa_,"PFA>NFA"
 4058               	
 4059 0e5c 560E 620E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4060 0e60 C00A      	  dw semicolon_s_
 4061               	
 4062               	; ----------------------------------------------
 4063               	
 4064               	; doc{
 4065               	;
GAS LISTING solo_forth.for_as.z80s 			page 81


 4066               	; cfa>nfa  ( cfa -- nfa )
 4067               	;
 4068               	; Warning: No check is done where cfa belongs to a definition
 4069               	; created with `:noname`.
 4070               	;
 4071               	; }doc
 4072               	
 4073               	; XXX FIXME -- make it return 0 if cfa has no name associated
 4074               	
 4075 0e62 640E      	  _code_header cfa_to_nfa_,"CFA>NFA"
 4076               	
 4077 0e64 1E01      	  ld e,names_bank
 4078 0e66 CDA0 06   	  call bank.e ; page the memory bank
 4079 0e69 D1        	  pop de ; cfa
 4080 0e6a C5        	  push bc ; save Forth IP
 4081 0e6b 0600      	  ld b,0
 4082 0e6d 21FC BF   	  ld hl, names_bank_address-4
 4083               	
 4084               	cfa_to_nfa.begin_0:
 4085               	  ; hl = address of the cfa pointer
 4086 0e70 23        	  inc hl
 4087               	cfa_to_nfa.begin_1:
 4088 0e71 23        	  inc hl
 4089 0e72 23        	  inc hl
 4090 0e73 23        	  inc hl
 4091 0e74 7E        	  ld a,(hl) ; name field byte length
 4092 0e75 E61F      	  and max_word_length_mask ; name length
 4093 0e77 4F        	  ld c,a ; name length
 4094 0e78 0C        	  inc c  ; plus the length byte
 4095 0e79 09        	  add hl,bc ; point to the cfa pointer
 4096               	
 4097 0e7a 7E        	  ld a,(hl) ; low byte of cfa
 4098 0e7b BB        	  cp e ; equal?
 4099 0e7c 20F2      	  jr nz,cfa_to_nfa.begin_0 ; not equal
 4100 0e7e 23        	  inc hl
 4101 0e7f 7E        	  ld a,(hl) ; high byte of cfa
 4102 0e80 BA        	  cp d ; equal?
 4103 0e81 20EE      	  jr nz,cfa_to_nfa.begin_1 ; not equal
 4104               	  ; cfa found
 4105 0e83 0E03      	  ld c,3
 4106 0e85 09        	  add hl,bc ; nfa
 4107               	
 4108 0e86 1E00      	  ld e,default_bank
 4109 0e88 CDA0 06   	  call bank.e ; page the default memory bank
 4110               	
 4111 0e8b C1        	  pop bc ; restore Forth IP
 4112 0e8c C35E 05   	  jp push_hl
 4113               	
 4114               	; ----------------------------------------------
 4115               	
 4116 0e8f 600D      	  _code_alias_header cfap_to_lfa_,"CFAP>LFA",,two_plus_
 4117               	
 4118               	; ----------------------------------------------
 4119               	
 4120 0e91 730D      	  _code_alias_header nfa_to_lfa_,"NFA>LFA",,two_minus_
 4121               	
 4122               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 82


 4123 0e93 650C      	  _colon_header c_store_bank_,"C!BANK"
 4124               	
 4125               	; doc{
 4126               	;
 4127               	; c!bank  ( b a n -- )
 4128               	;
 4129               	; Store _b_ into address _a_ of bank _n_.
 4130               	;
 4131               	; }doc
 4132               	
 4133               	  ; XXX 11 bytes
 4134 0e95 9806 520C 	  dw bank_,c_store_
 4135 0e99 C50C 9806 	  _default_bank
 4136 0e9d C00A      	  dw semicolon_s_
 4137               	
 4138               	  ; XXX TODO
 4139               	  ; pop de
 4140               	  ; c_store_bank.e:
 4141               	  ; call bank.e
 4142               	  ; pop hl
 4143               	  ; ld l,(hl)
 4144               	  ; ld h,0
 4145               	  ; ld e,default_bank
 4146               	  ; call bank.e
 4147               	  ; jp pushhl
 4148               	
 4149               	; ----------------------------------------------
 4150 0e9f 650C      	  _colon_header store_bank_,"!BANK"
 4151               	
 4152               	; doc{
 4153               	;
 4154               	; !bank  ( x a n -- )
 4155               	;
 4156               	; Store _x_ into address _a_ of bank _n_.
 4157               	;
 4158               	; }doc
 4159               	
 4160               	  ; XXX 11 bytes
 4161 0ea1 9806 490C 	  dw bank_,store_
 4162 0ea5 C50C 9806 	  _default_bank
 4163 0ea9 C00A      	  dw semicolon_s_
 4164               	
 4165               	; ----------------------------------------------
 4166 0eab 650C      	  _colon_header c_fetch_bank_,"C@BANK"
 4167               	
 4168               	; doc{
 4169               	;
 4170               	; c@bank  ( a n -- b )
 4171               	;
 4172               	; Fetch the 8-bit content of address _a_ of the bank _n_.
 4173               	;
 4174               	; }doc
 4175               	
 4176               	  ; XXX 11 bytes
 4177 0ead 9806 230C 	  dw bank_,c_fetch_
 4178 0eb1 C50C 9806 	  _default_bank
 4179 0eb5 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.for_as.z80s 			page 83


 4180               	
 4181               	  ; XXX 15 bytes
 4182               	  ; pop de
 4183               	  ; c_fetch_bank.e:
 4184               	  ; call bank.e
 4185               	  ; pop hl
 4186               	  ; ld l,(hl)
 4187               	  ; ld h,0
 4188               	  ; ld e,default_bank
 4189               	  ; call bank.e
 4190               	  ; jp pushhl
 4191               	
 4192               	; ----------------------------------------------
 4193 0eb7 650C      	  _colon_header fetch_bank_,"@BANK"
 4194               	
 4195               	; doc{
 4196               	;
 4197               	; @bank  ( a n -- x )
 4198               	;
 4199               	; Fetch the 16-bit content of address _a_ of bank _n_.
 4200               	;
 4201               	; }doc
 4202               	
 4203               	  ; XXX 11 bytes
 4204 0eb9 9806 1A0C 	  dw bank_,fetch_
 4205 0ebd C50C 9806 	  _default_bank
 4206 0ec1 C00A      	  dw semicolon_s_
 4207               	
 4208               	  ; XXX 17 bytes
 4209               	  ; pop de
 4210               	  ; fetch_bank.e
 4211               	  ; call bank.e
 4212               	  ; pop hl
 4213               	  ; ld a,(hl)
 4214               	  ; inc hl
 4215               	  ; ld h,(hl)
 4216               	  ; ld l,a
 4217               	  ; ld e,default_bank
 4218               	  ; call bank.e
 4219               	  ; jp pushhl
 4220               	
 4221               	; ----------------------------------------------
 4222 0ec3 650C      	  _colon_header c_fetch_n_,"C@N"
 4223               	
 4224               	; doc{
 4225               	;
 4226               	; c@n  ( a -- x )
 4227               	;
 4228               	; Fetch from the _a_ address of the names bank.
 4229               	;
 4230               	; }doc
 4231               	
 4232               	  ; XXX 7 bytes:
 4233 0ec5 C90C      	  _literal names_bank
 4234 0ec7 AB0E      	  dw c_fetch_bank_
 4235 0ec9 C00A      	  dw semicolon_s_
 4236               	
GAS LISTING solo_forth.for_as.z80s 			page 84


 4237               	  ; XXX 5 bytes
 4238               	  ; ld e,names_bank
 4239               	  ; jp c_fetch_bank.e
 4240               	
 4241               	; ----------------------------------------------
 4242 0ecb 650C      	  _colon_header fetch_n_,"@N"
 4243               	
 4244               	; doc{
 4245               	;
 4246               	; @n  ( a -- x )
 4247               	;
 4248               	; Fetch from the _a_ address of the names bank.
 4249               	;
 4250               	; }doc
 4251               	
 4252               	  ; XXX 7 bytes:
 4253 0ecd C90C      	  _literal names_bank
 4254 0ecf B70E      	  dw fetch_bank_
 4255 0ed1 C00A      	  dw semicolon_s_
 4256               	
 4257               	  ; XXX 5 bytes
 4258               	  ; ld e,names_bank
 4259               	  ; jp fetch_bank.e
 4260               	
 4261               	; ----------------------------------------------
 4262 0ed3 650C      	  _colon_header c_store_n_,"C!N"
 4263               	
 4264               	; doc{
 4265               	;
 4266               	; c!n  ( c a -- )
 4267               	;
 4268               	; Store _c_ into the _a_ address of the names bank.
 4269               	;
 4270               	; }doc
 4271               	
 4272               	  ; XXX 7 bytes:
 4273 0ed5 C90C      	  _literal names_bank
 4274 0ed7 930E      	  dw c_store_bank_
 4275 0ed9 C00A      	  dw semicolon_s_
 4276               	
 4277               	; ----------------------------------------------
 4278 0edb 650C      	  _colon_header store_n_,"!N"
 4279               	
 4280               	; doc{
 4281               	;
 4282               	; !n  ( x a -- )
 4283               	;
 4284               	; Store _x_ into the _a_ address of the names bank.
 4285               	;
 4286               	; }doc
 4287               	
 4288               	  ; XXX 7 bytes:
 4289 0edd C90C      	  _literal names_bank
 4290 0edf 9F0E      	  dw store_bank_
 4291 0ee1 C00A      	  dw semicolon_s_
 4292               	
 4293               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 85


 4294 0ee3 650C      	  _colon_header nfa_to_cfa_,"NFA>CFA"
 4295               	
 4296 0ee5 8306 04   	  _literal 4
 4297 0ee8 D20D CB0E 	  dw minus_,fetch_n_
 4298 0eec C00A      	  dw semicolon_s_
 4299               	
 4300               	; ----------------------------------------------
 4301               	; doc{
 4302               	;
 4303               	; nfa>string  ( nfa -- ca len )
 4304               	;
 4305               	; }doc
 4306               	
 4307 0eee 650C      	  _colon_header nfa_to_string_,"NFA>STRING"
 4308               	
 4309 0ef0 C90C 9806 	  _names_bank
 4310 0ef4 0710      	  dw count_
 4311 0ef6 8306 1F   	  _literal max_word_length_mask
 4312 0ef9 500A      	  dw and_
 4313 0efb EA06      	  dw save_string_
 4314 0efd C50C 9806 	  _default_bank
 4315 0f01 C00A      	  dw semicolon_s_
 4316               	
 4317               	; ----------------------------------------------
 4318 0f03 650C      	  _colon_header store_csp_,"!CSP"
 4319               	
 4320 0f05 9D0A 3C0D 	  dw sp_fetch_,csp_,store_
 4320      490C 
 4321 0f0b C00A      	  dw semicolon_s_
 4322               	
 4323               	; ----------------------------------------------
 4324 0f0d 650C      	  _colon_header question_error_,"?ERROR"
 4325               	
 4326 0f0f D90B      	  dw swap_
 4327 0f11 6007 190F 	  dw zero_branch_,question_error.no_error
 4328 0f15 8013      	  dw error_
 4329 0f17 C00A      	  dw semicolon_s_
 4330               	
 4331               	question_error.no_error:
 4332 0f19 D40B      	  dw drop_
 4333 0f1b C00A      	  dw semicolon_s_
 4334               	
 4335               	; ----------------------------------------------
 4336 0f1d 650C      	  _colon_header comp_question_,"COMP?"
 4337               	
 4338 0f1f 300D 1A0C 	  dw state_,fetch_
 4339 0f23 C00A      	  dw semicolon_s_
 4340               	
 4341               	; ----------------------------------------------
 4342 0f25 650C      	  _colon_header question_comp_,"?COMP"
 4343               	
 4344 0f27 1D0F 570B 	  dw comp_question_,zero_equals_
 4345 0f2b 8306 110D 	  _question_error error.compilation_only
 4345      0F
 4346 0f30 C00A      	  dw semicolon_s_
 4347               	
 4348               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 86


 4349 0f32 650C      	  _colon_header question_exec_,"?EXEC"
 4350               	
 4351 0f34 1D0F      	  dw comp_question_
 4352 0f36 8306 120D 	  _question_error error.execution_only
 4352      0F
 4353 0f3b C00A      	  dw semicolon_s_
 4354               	
 4355               	; ----------------------------------------------
 4356               	.if 1
 4357               	  ; XXX TODO -- remove when the security is removed
 4358 0f3d 650C      	  _colon_header question_pairs_,"?PAIRS"
 4359               	
 4360 0f3f DC0D      	  dw not_equals_
 4361 0f41 8306 130D 	  _question_error error.conditionals_not_paired
 4361      0F
 4362 0f46 C00A      	  dw semicolon_s_
 4363               	.endif
 4364               	
 4365               	; ----------------------------------------------
 4366 0f48 650C      	  _colon_header question_csp_,"?CSP"
 4367               	
 4368 0f4a 9D0A 3C0D 	  dw sp_fetch_,csp_,fetch_,not_equals_
 4368      1A0C DC0D 
 4369 0f52 8306 140D 	  _question_error error.definition_not_finished
 4369      0F
 4370 0f57 C00A      	  dw semicolon_s_
 4371               	
 4372               	; ----------------------------------------------
 4373 0f59 650C      	  _colon_header question_loading_,"?LOADING"
 4374               	
 4375 0f5b 1E0D 1A0C 	  dw blk_,fetch_,zero_equals_
 4375      570B 
 4376 0f61 8306 160D 	  _question_error error.loading_only
 4376      0F
 4377 0f66 C00A      	  dw semicolon_s_
 4378               	
 4379               	; ----------------------------------------------
 4380 0f68 650C      	  _colon_header compile_,"COMPILE"
 4381               	
 4382 0f6a 250F      	  dw question_comp_
 4383 0f6c FF0A E00B 	  dw from_r_,dup_,two_plus_,to_r_,fetch_,compile_comma_
 4383      5E0D F00A 
 4383      1A0C BE0D 
 4384 0f78 C00A      	  dw semicolon_s_
 4385               	
 4386               	; ----------------------------------------------
 4387 0f7a 650C      	  _colon_header postpone_,"POSTPONE",immediate
 4388               	
 4389               	; doc{
 4390               	;
 4391               	; postpone ( "name" -- )  \ ANS Forth, C I
 4392               	;
 4393               	; Skip leading space delimiters. Parse name delimited by a
 4394               	; space. Find name. Append the compilation semantics of _name_ to
 4395               	; the current definition.
 4396               	;
 4397               	; }doc
GAS LISTING solo_forth.for_as.z80s 			page 87


 4398               	
 4399 0f7c 6F19      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 4400 0f7e E00B 7F19 	  dw dup_,question_defined_ ; error if not found
 4401 0f82 6D0B      	  dw zero_less_than_ ; non-immediate word?
 4402 0f84 6007 8C0F 	  dw zero_branch_,postpone.end
 4403               	  ; Non-immediate word.
 4404 0f88 680F 680F 	  dw compile_,compile_ ; compile `compile`
 4405               	postpone.end:
 4406 0f8c BE0D      	  dw compile_comma_
 4407 0f8e C00A      	  dw semicolon_s_
 4408               	
 4409               	; ----------------------------------------------
 4410 0f90 650C      	  _colon_header left_bracket_,"[",immediate
 4411               	
 4412 0f92 300D FD0B 	  dw state_,off_
 4413 0f96 C00A      	  dw semicolon_s_
 4414               	
 4415               	; ----------------------------------------------
 4416 0f98 650C      	  _colon_header right_bracket_,"]"
 4417               	
 4418 0f9a 300D 070C 	  dw state_,on_
 4419 0f9e C00A      	  dw semicolon_s_
 4420               	
 4421               	; ----------------------------------------------
 4422 0fa0 650C      	  _colon_header smudge_,"SMUDGE"
 4423               	
 4424               	
 4425               	; doc{
 4426               	;
 4427               	; smudge  ( -- )
 4428               	;
 4429               	; Toggle the "smudge bit" in a definitions' name field. This
 4430               	; prevents an uncompleted definition from being found during
 4431               	; dictionary searches, until compiling is completed without
 4432               	; error.
 4433               	;
 4434               	; }doc
 4435               	
 4436 0fa2 460E      	  dw latest_
 4437 0fa4 8306 20   	  _literal smudge_mask
 4438               	  ; XXX TODO factor `toggle-names'?
 4439 0fa7 C90C 9806 	  _names_bank
 4440 0fab 110C      	  dw toggle_
 4441 0fad C50C 9806 	  _default_bank
 4442 0fb1 C00A      	  dw semicolon_s_
 4443               	
 4444               	; ----------------------------------------------
 4445 0fb3 650C      	  _colon_header hex_,"HEX"
 4446               	
 4447 0fb5 8306 10   	  _literal 0x10
 4448 0fb8 330D 490C 	  dw base_,store_
 4449 0fbc C00A      	  dw semicolon_s_
 4450               	
 4451               	; ----------------------------------------------
 4452 0fbe 650C      	  _colon_header decimal_,"DECIMAL"
 4453               	
 4454 0fc0 8306 0A   	  _literal 0x0A
GAS LISTING solo_forth.for_as.z80s 			page 88


 4455 0fc3 330D 490C 	  dw base_,store_
 4456 0fc7 C00A      	  dw semicolon_s_
 4457               	
 4458               	; ----------------------------------------------
 4459 0fc9 650C      	  _colon_header paren_semicolon_code_,"(;CODE)"
 4460               	
 4461               	; doc{
 4462               	;
 4463               	; (;code)  ( -- )
 4464               	;
 4465               	; The run-time procedure compiled by `;code`. Rewrite the code
 4466               	; field of the most recently defined word to point to the
 4467               	; following machine code sequence.
 4468               	;
 4469               	; }doc
 4470               	
 4471               	; : (;code)       --
 4472               	;   r>        \ Pop the address of the next instruction off the return stack,
 4473               	;             \ which is the starting address of the run-time code routine.
 4474               	;   latest    \ Get the name field address of the word under construction.
 4475               	;   nfa>cfa ! \ Find its code field address and store in it the address of
 4476               	;             \ the code routine to be executed at run-time.
 4477               	;   ;
 4478               	
 4479 0fcb FF0A 460E 	  dw from_r_,latest_,nfa_to_cfa_,store_
 4479      E30E 490C 
 4480 0fd3 C00A      	  dw semicolon_s_
 4481               	
 4482               	; ----------------------------------------------
 4483 0fd5 650C      	  _colon_header semicolon_code_,";CODE",immediate
 4484               	
 4485               	; XXX TODO -- documentation
 4486               	; doc{
 4487               	;
 4488               	; ;code  ( -- )
 4489               	;
 4490               	; Stop compilation and terminate a new defining word by
 4491               	; compiling the run-time routine `(;code)`.  Assemble the
 4492               	; assembly mnemonics following.
 4493               	;
 4494               	; }doc
 4495               	
 4496 0fd7 480F      	  dw question_csp_
 4497 0fd9 680F C90F 	  dw compile_,paren_semicolon_code_
 4498 0fdd 8205      	  dw asm_
 4499 0fdf 900F A00F 	  dw left_bracket_,smudge_
 4500 0fe3 C00A      	  dw semicolon_s_
 4501               	
 4502               	; ----------------------------------------------
 4503 0fe5 650C      	  _colon_header does_,"DOES>",immediate
 4504               	
 4505 0fe7 680F C90F 	  dw compile_,paren_semicolon_code_
 4506 0feb 8306 CD   	  _literal 0xCD ; Z80 opcode for "call"
 4507 0fee C60D      	  dw c_comma_ ; compile it
 4508 0ff0 8D06 F80F 	  dw lit_,do_does,comma_ ; compile the routine address
 4508      B20D 
 4509 0ff6 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.for_as.z80s 			page 89


 4510               	
 4511               	do_does:
 4512               	  ; Save the IP in the return stack.
 4513 0ff8 2A10 00   	  ld hl,(return_stack_pointer)
 4514 0ffb 2B        	  dec hl
 4515 0ffc 70        	  ld (hl),b
 4516 0ffd 2B        	  dec hl
 4517 0ffe 71        	  ld (hl),c
 4518 0fff 2210 00   	  ld (return_stack_pointer),hl
 4519               	  ; Pop the address of the run-time routine
 4520               	  ; (put there bye `call do_does`) in IP.
 4521 1002 C1        	  pop bc ; new Forth IP
 4522               	  ; Push the pfa.
 4523 1003 13        	  inc de  ; de=pfa
 4524 1004 D5        	  push de
 4525               	  ; Execute the run-time routine.
 4526 1005 DDE9      	  _jp_next
 4527               	
 4528               	; ----------------------------------------------
 4529 1007 0910      	  _code_header count_,"COUNT"
 4530               	
 4531               	  ; Code from DZX-Forth.
 4532               	
 4533 1009 D1        	  pop de
 4534 100a 1A        	  ld a,(de)
 4535 100b 13        	  inc de
 4536 100c D5        	  push de
 4537 100d C387 06   	  jp push_a
 4538               	
 4539               	; ----------------------------------------------
 4540 1010 650C      	  _colon_header bounds_,"BOUNDS"
 4541               	
 4542 1012 CC0B 810B 	  dw over_,plus_,swap_
 4542      D90B 
 4543 1018 C00A      	  dw semicolon_s_
 4544               	
 4545               	; ----------------------------------------------
 4546 101a 650C      	  _colon_header type_,"TYPE"
 4547               	
 4548               	  ; XXX TODO Rewrite in Z80, after the ROM routine.
 4549               	
 4550 101c 2E0E      	  dw question_dup_
 4551 101e 6007 3210 	  dw zero_branch_,type.empty_string
 4552               	
 4553 1022 1010      	  dw bounds_
 4554 1024 AD07      	  dw paren_do_
 4555               	type.do:
 4556 1026 4408 230C 	  dw i_,c_fetch_,emit_
 4556      EC08 
 4557 102c 7807 2610 	  dw paren_loop_,type.do ; loop
 4558 1030 C00A      	  dw semicolon_s_
 4559               	
 4560               	type.empty_string:
 4561 1032 D40B      	  dw drop_
 4562               	type.end:
 4563 1034 C00A      	  dw semicolon_s_
 4564               	
GAS LISTING solo_forth.for_as.z80s 			page 90


 4565               	; ----------------------------------------------
 4566               	
 4567 1036 3810      	  _code_header minus_trailing_,"-TRAILING"
 4568               	
 4569 1038 D1        	  pop de
 4570 1039 E1        	  pop hl
 4571 103a E5        	  push hl
 4572 103b 19        	  add hl,de
 4573 103c EB        	  ex de,hl
 4574               	  ; de = address after the string
 4575               	  ; hl = length of the string
 4576               	minus_trailing.begin:
 4577 103d 7D        	  ld a,l
 4578 103e B4        	  or h ; exhausted?
 4579 103f CA5E 05   	  jp z,push_hl
 4580 1042 1B        	  dec de ; next char
 4581 1043 1A        	  ld a,(de)
 4582 1044 FE20      	  cp ' ' ; space?
 4583 1046 C25E 05   	  jp nz,push_hl
 4584 1049 2B        	  dec hl ; new length
 4585 104a C33D 10   	  jp minus_trailing.begin ; repeat
 4586               	
 4587               	; ----------------------------------------------
 4588               	  ;_colon_header paren_dot_quote_,"(.\")" ; XXX OLD not understood by `as`
 4589               	  ;_colon_header paren_dot_quote_,"(.\x22)" ; XXX OLD not understood by `as`
 4590               	  ;_colon_header paren_dot_quote_,'(.")' ; XXX OLD not understood by `as`
 4591 104d 650C      	  _colon_header_with_special_name paren_dot_quote_,"(.",'"',")"
 4592               	
 4593 104f 4F0B 0710 	  dw r_fetch_,count_ ; ( ca len )
 4594 1053 E00B 570D 	  dw dup_,one_plus_,from_r_,plus_,to_r_ ; skip the string after return
 4594      FF0A 810B 
 4594      F00A 
 4595 105d 1A10      	  dw type_
 4596 105f C00A      	  dw semicolon_s_
 4597               	
 4598               	; ----------------------------------------------
 4599               	  ;_colon_header dot_quote_,".\x22",immediate ; XXX OLD not understood by `as`
 4600 1061 650C      	  _colon_header_with_special_name dot_quote_,".",'"',"",immediate ; ".""
 4601               	
 4602 1063 8306 22   	  _literal '"'
 4603 1066 A711      	  dw parse_ ; ( ca len )
 4604 1068 1D0F      	  dw comp_question_
 4605 106a 6007 7610 	  dw zero_branch_,dot_quote.interpreting
 4606               	  ; Compiling.
 4607 106e 680F 4D10 	  dw compile_,paren_dot_quote_,s_comma_
 4607      A00D 
 4608 1074 321D      	  dw exit_
 4609               	dot_quote.interpreting:
 4610 1076 1A10      	  dw type_
 4611 1078 C00A      	  dw semicolon_s_
 4612               	
 4613               	; ----------------------------------------------
 4614 107a 1A14      	  _variable_header span_,"SPAN"
 4615               	
 4616               	; doc{
 4617               	;
 4618               	; span  ( -- a )  \ Forth-83
GAS LISTING solo_forth.for_as.z80s 			page 91


 4619               	;
 4620               	; The address of a variable containing the count of characters
 4621               	; actually received and stored by the last execution of
 4622               	; `expect`.
 4623               	;
 4624               	; }doc
 4625               	
 4626 107c 0000      	  dw 0
 4627               	
 4628               	; ----------------------------------------------
 4629 107e 650C      	  _colon_header accept_,"ACCEPT"
 4630               	
 4631               	; doc{
 4632               	;
 4633               	; accept  ( ca1 len1 -- len2 )  \ ANS Forth
 4634               	;
 4635               	; }doc
 4636               	
 4637               	  ; XXX TODO -- not finished
 4638               	
 4639               	  ; dw span_,off_
 4640               	  ; dw question_dup_
 4641               	  ; dw zero_branch_,accept.end
 4642               	
 4643               	  ; dw swap_ ; ( len ca )
 4644               	; accept.begin: ; ( len ca )
 4645               	  ; dw key_,dup_ ; ( len ca c c )
 4646               	
 4647               	  ; dw c_lit_
 4648               	  ; db delete_char
 4649               	  ; dw equals_ ; delete key?
 4650               	  ; dw zero_branch_,accept.maybe_carriage_return
 4651               	  ; ; Delete key ( len ca c )
 4652               	  ; dw drop_
 4653               	  ; dw dup_,i_,equals_ ; cursor at the start position?
 4654               	  ; dw dup_ ; ( len ca f f )
 4655               	  ; ; XXX TODO adapt this when true=-1
 4656               	  ; dw from_r_,two_minus_,plus_,to_r_ ; update the index
 4657               	  ; dw question_branch_,accept.loop ; nothing to delete
 4658               	  ; ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4659               	  ; dw c_lit_
 4660               	  ; db backspace_char
 4661               	  ; dw branch_,accept.emit
 4662               	
 4663               	; accept.maybe_carriage_return: ; ( len ca c )
 4664               	  ; dw dup_
 4665               	  ; dw c_lit_
 4666               	  ; db carriage_return_char
 4667               	  ; dw equals_ ; carriage return?
 4668               	  ; dw zero_branch_,accept.ordinary_key
 4669               	  ; ; Carriage return ( len ca c )
 4670               	  ; dw exhaust_
 4671               	  ; dw drop_,b_l_
 4672               	  ; dw branch_,accept.emit
 4673               	
 4674               	; accept.ordinary_key: ; ( len ca c )
 4675               	  ; dw dup_
GAS LISTING solo_forth.for_as.z80s 			page 92


 4676               	; accept.store: ; ( len ca c c | len ca c 0 )
 4677               	  ; dw i_,c_store_
 4678               	; accept.emit: ; ( len ca c )
 4679               	  ; dw emit_
 4680               	
 4681               	  ; ; ( len ca )
 4682               	  ; dw i_,over_,minus_,span_,store_ ; update `span`
 4683               	  ; dw paren_loop_,accept.do
 4684               	; accept.end:
 4685               	  ; dw drop_
 4686               	  ; dw span_,fetch_
 4687 1080 C00A      	  dw semicolon_s_
 4688               	
 4689               	; ----------------------------------------------
 4690 1082 650C      	  _colon_header expect_,"EXPECT"
 4691               	
 4692               	; doc{
 4693               	;
 4694               	; expect  ( ca len -- )  \ Forth-83
 4695               	;
 4696               	; Transfer characters from the terminal to address _ca_, until a
 4697               	; "return" or _len_ characters have been received.
 4698               	;
 4699               	; The transfer begins at addr proceeding towards higher
 4700               	; addresses one byte per character until either a "return" is
 4701               	; received or until _len_ characters have been transferred.
 4702               	
 4703               	; No more than _len_ characters will be stored.  The "return" is
 4704               	; not stored into memory.  No characters are received or
 4705               	; transferred if _len_ is zero.  All characters actually
 4706               	; received and stored into memory will be displayed, with the
 4707               	; "return" displaying as a space.
 4708               	
 4709               	; ; }doc
 4710               	
 4711 1084 7A10 FD0B 	  dw span_,off_
 4712 1088 2E0E      	  dw question_dup_
 4713 108a 6007 F910 	  dw zero_branch_,expect.end
 4714               	
 4715 108e 1010 C40B 	  dw bounds_,tuck_ ; ( ca ca+len ca )
 4716 1092 AD07      	  dw paren_do_
 4717               	expect.do: ; ( ca )
 4718 1094 7609 E00B 	  dw xkey_,dup_ ; ( ca c c )
 4719               	
 4720 1098 8306 0C   	  _literal delete_char
 4721 109b E90D      	  dw equals_ ; delete key?
 4722 109d 6007 BE10 	  dw zero_branch_,expect.maybe_carriage_return
 4723               	  ; Delete key ( ca c )
 4724 10a1 D40B      	  dw drop_
 4725 10a3 E00B 4408 	  dw dup_,i_,equals_ ; cursor at the start position?
 4725      E90D 
 4726               	.if true==(-1)
 4727               	  ; XXX TODO simplify
 4728               	  dw abs_
 4729               	.endif
 4730 10a9 E00B      	  dw dup_ ; ( ca f f )
 4731 10ab FF0A 710D 	  dw from_r_,two_minus_,plus_,to_r_ ; update the index
GAS LISTING solo_forth.for_as.z80s 			page 93


 4731      810B F00A 
 4732 10b3 6C07 EB10 	  dw question_branch_,expect.loop ; nothing to delete
 4733               	  ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4734 10b7 8306 08   	  _literal backspace_char
 4735 10ba 5707 E910 	  dw branch_,expect.emit
 4736               	
 4737               	expect.maybe_carriage_return: ; ( ca c )
 4738 10be E00B      	  dw dup_
 4739 10c0 8306 0D   	  _literal carriage_return_char
 4740 10c3 E90D      	  dw equals_ ; carriage return?
 4741 10c5 6007 D310 	  dw zero_branch_,expect.control_char
 4742               	  ; Carriage return ( ca c )
 4743 10c9 D80A      	  dw exhaust_
 4744 10cb D40B E10C 	  dw drop_,b_l_
 4745 10cf 5707 E910 	  dw branch_,expect.emit
 4746               	
 4747               	expect.control_char: ; ( ca c )
 4748 10d3 E00B E10C 	  dw dup_,b_l_,less_than_ ; control char?
 4748      F60D 
 4749 10d9 6007 E310 	  dw zero_branch_,expect.ordinary_key
 4750               	  ; Control char ( ca c )
 4751 10dd D40B      	  dw drop_
 4752 10df 5707 9410 	  dw branch_,expect.do
 4753               	
 4754               	expect.ordinary_key: ; ( ca c )
 4755 10e3 E00B      	  dw dup_
 4756               	expect.store: ; ( ca c c | ca c 0 )
 4757 10e5 4408 520C 	  dw i_,c_store_
 4758               	expect.emit: ; ( ca c )
 4759 10e9 EC08      	  dw emit_
 4760               	
 4761               	expect.loop: ; ( ca )
 4762 10eb 4408 CC0B 	  dw i_,over_,minus_,span_,store_ ; update `span`
 4762      D20D 7A10 
 4762      490C 
 4763 10f5 7807 9410 	  dw paren_loop_,expect.do
 4764               	expect.end:
 4765 10f9 D40B      	  dw drop_
 4766 10fb C00A      	  dw semicolon_s_
 4767               	
 4768               	; ----------------------------------------------
 4769 10fd 650C      	  _colon_header query_,"QUERY"
 4770               	
 4771               	; doc{
 4772               	;
 4773               	; query  ( -- )  \ fig-Forth
 4774               	;
 4775               	; XXX TODO description
 4776               	;
 4777               	; Make the user input device the input source. Receive input
 4778               	; into the terminal input buffer, replacing any previous
 4779               	; contents. Make the result, whose address is returned by `tib`,
 4780               	; the input buffer. `>in` to zero.
 4781               	;
 4782               	; Input 80 characters of text (or until a "return") from the
 4783               	; operators terminal. Text is positioned at the address
 4784               	; contained in TIB with IN set to zero.
GAS LISTING solo_forth.for_as.z80s 			page 94


 4785               	;
 4786               	; Transfer characters from the terminal to address contained in
 4787               	; returned by `tib`, until a "return" or the count contained in
 4788               	; the `#tib` variable have been received. One or more nulls are
 4789               	; added at the end of the text.
 4790               	;
 4791               	; }doc
 4792               	
 4793 10ff 450D E00B 	  dw tib_,dup_
 4794 1103 490D 1A0C 	  dw number_tib_,fetch_
 4795 1107 E70B 5D11 	  dw two_dup_,blank_ ; clean the input buffer
 4796 110b 8210      	  dw expect_
 4797 110d 7A10 1A0C 	  dw span_,fetch_,plus_,stream_end_
 4797      810B F217 
 4798 1115 210D FD0B 	  dw to_in_,off_
 4799 1119 C00A      	  dw semicolon_s_
 4800               	
 4801               	; ----------------------------------------------
 4802 111b 650C      	  _colon_header_with_special_name x_,,0,,immediate
 4803               	
 4804               	; doc{
 4805               	
 4806               	; x  ( -- )
 4807               	
 4808               	; This is pseudonym for the "null" or dictionary entry for a
 4809               	; name of one character of ascii null. It is the execution
 4810               	; procedure to terminate interpretation of a line of text from
 4811               	; the terminal or within a disk buffer, as both buffers always
 4812               	; have a null word at the end.
 4813               	;
 4814               	; In the fig-Forth model a null character is used to detect the
 4815               	; end of the buffers.  Therefore the scanning words must treat
 4816               	; the null character as a special unconditional delimiter, and
 4817               	; do other tricks in order to simulate the null character found
 4818               	; is a parsed null word.
 4819               	;
 4820               	; In Solo Forth the scanning words does not treat the null char
 4821               	; apart; instead, an actual null word (a null character
 4822               	; surrounded by spaces) is put after the buffers (disk buffers
 4823               	; and `tib`). Therefore the null word is parsed normally as any
 4824               	; other word. No need to treat the null character as a special
 4825               	; delimiter. This new method is compatible with the original
 4826               	; fig-Forth parsing words.
 4827               	
 4828               	; }doc
 4829               	
 4830 111d 1E0D 1A0C 	  dw blk_,fetch_ ; input stream from disk?
 4831 1121 6007 3D11 	  dw zero_branch_,x.exit ; if not, branch
 4832               	  ; From disk.
 4833 1125 C90C 1E0D 	  dw one_,blk_,plus_store_ ; next disk buffer
 4833      F00B 
 4834 112b 210D FD0B 	  dw to_in_,off_ ; clear `in`, preparing parsing of input text
 4835               	
 4836               	  ; XXX WARNING -- The following check of the last block is
 4837               	  ; specific for 2 blocks per screen; the generic slower check
 4838               	  ; would be `blk @ b/scr 1- and`.
 4839               	
GAS LISTING solo_forth.for_as.z80s 			page 95


 4840 112f 1E0D 1A0C 	  dw blk_,fetch_,one_,and_ ; was it the last block of the screen?
 4840      C90C 500A 
 4841 1137 6C07 3F11 	  dw question_branch_,x.end ; if not, branch
 4842               	  ; Last block of the screen.
 4843 113b 320F      	  dw question_exec_ ; error if not executing
 4844               	x.exit:
 4845               	
 4846               	  ; The top item on the return stack is thrown away.  The interpreter
 4847               	  ; will not continue to execute the `?stack` instruction that follows
 4848               	  ; `execute` in `interpret`, but will return to the next higher level
 4849               	  ; of nesting and execute the next word after `interpret` in the Forth
 4850               	  ; loop.  This is when the familiar "ok" message is displayed on the
 4851               	  ; terminal, prompting the operator for the next line of commands.
 4852               	
 4853 113d 1C0B      	  dw r_drop_
 4854               	;  dw lit_,7,border_ ; XXX INFORMER
 4855               	
 4856               	x.end:
 4857 113f C00A      	  dw semicolon_s_
 4858               	
 4859               	; ----------------------------------------------
 4860 1141 4311      	  _code_header fill_,"FILL"
 4861               	
 4862 1143 D1        	  pop de ; e = char
 4863               	fill.e:
 4864 1144 69        	  ld l,c
 4865 1145 60        	  ld h,b ; the Forth IP
 4866 1146 C1        	  pop bc ; count
 4867 1147 E3        	  ex (sp),hl ; save the Forth IP
 4868               	fill.do:
 4869 1148 78        	  ld a,b
 4870 1149 B1        	  or c
 4871 114a CA53 11   	  _jump_z fill.end
 4872 114d 73        	  ld (hl),e
 4873 114e 23        	  inc hl
 4874 114f 0B        	  dec bc
 4875 1150 C348 11   	  jp fill.do
 4876               	fill.end:
 4877 1153 C1        	  pop bc ; restore the Forth IP
 4878 1154 DDE9      	  _jp_next
 4879               	
 4880               	; ----------------------------------------------
 4881 1156 5811      	  _code_header erase_,"ERASE"
 4882               	
 4883 1158 1E00      	  ld e,0
 4884 115a C344 11   	  jp fill.e
 4885               	
 4886               	; ----------------------------------------------
 4887 115d 5F11      	  _code_header blank_,"BLANK"
 4888               	
 4889 115f 1E20      	  ld e,space_char
 4890 1161 C344 11   	  jp fill.e
 4891               	
 4892               	; ----------------------------------------------
 4893 1164 650C      	  _colon_header hold_,"HOLD"
 4894               	
 4895 1166 8D06 FFFF 	  dw lit_,-1,hld_,plus_store_ ; decrement `hld`
GAS LISTING solo_forth.for_as.z80s 			page 96


 4895      420D F00B 
 4896 116e 420D 1A0C 	  dw hld_,fetch_,c_store_ ; store character into `pad`
 4896      520C 
 4897 1174 C00A      	  dw semicolon_s_
 4898               	
 4899               	; ----------------------------------------------
 4900 1176 650C      	  _colon_header pad_,"PAD"
 4901               	
 4902 1178 900D      	  dw here_
 4903 117a 8306 44   	  _literal 0x44
 4904 117d 810B      	  dw plus_
 4905 117f C00A      	  dw semicolon_s_
 4906               	
 4907               	; ----------------------------------------------
 4908 1181 650C      	  _colon_header stream_,"STREAM"
 4909               	
 4910               	; doc{
 4911               	;
 4912               	; stream  ( -- ca )
 4913               	;
 4914               	; ca = current parsing position in the stream source
 4915               	;
 4916               	; }doc
 4917               	
 4918 1183 1E0D 1A0C 	  dw blk_,fetch_,question_dup_ ; from disk?
 4918      2E0E 
 4919 1189 6007 9311 	  dw zero_branch_,stream.terminal
 4920 118d 5E18      	  dw block_ ; from disk
 4921 118f 5707 9511 	  dw branch_,stream.end
 4922               	stream.terminal:
 4923 1193 450D      	  dw tib_ ; from terminal
 4924               	stream.end:
 4925 1195 210D 1A0C 	  dw to_in_,fetch_,plus_
 4925      810B 
 4926 119b C00A      	  dw semicolon_s_
 4927               	
 4928               	; ----------------------------------------------
 4929 119d 650C      	  _colon_header parsed_,"PARSED"
 4930               	
 4931               	; doc{
 4932               	;
 4933               	; parsed  ( len -- )
 4934               	;
 4935               	; Add the given _len_ plus 1 to `>in`.
 4936               	;
 4937               	; }word
 4938               	
 4939 119f 570D 210D 	  dw one_plus_,to_in_,plus_store_
 4939      F00B 
 4940 11a5 C00A      	  dw semicolon_s_
 4941               	
 4942               	; ----------------------------------------------
 4943 11a7 650C      	  _colon_header parse_,"PARSE"
 4944               	
 4945               	; doc{
 4946               	;
 4947               	; parse  ( c "text<c>" -- ca len )  \ ANS Forth
GAS LISTING solo_forth.for_as.z80s 			page 97


 4948               	;
 4949               	; Parse _text_ delimited by the delimiter char _c_.
 4950               	;
 4951               	; ca = address of the parsed string, within the input buffer
 4952               	; len = length of the parsed string
 4953               	;
 4954               	; If the parse area was empty, the resulting string has a zero length.
 4955               	;
 4956               	; }doc
 4957               	
 4958 11a9 8111 D90B 	  dw stream_,swap_,scan_,dup_,parsed_
 4958      BE08 E00B 
 4958      9D11 
 4959 11b3 C00A      	  dw semicolon_s_
 4960               	
 4961               	; ----------------------------------------------
 4962 11b5 650C      	  _colon_header parse_name_,"PARSE-NAME"
 4963               	
 4964               	; doc{
 4965               	;
 4966               	; parse-name  ( "name"  -- ca len )
 4967               	;
 4968               	; }word
 4969               	
 4970 11b7 8111 E00B 	  dw stream_,dup_,to_r_ ; ( ca1 )
 4970      F00A 
 4971 11bd E10C D408 	  dw b_l_,skip_ ; ( ca2 )
 4972 11c1 E00B FF0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
 4972      D20D 210D 
 4972      F00B 
 4973               	  ; XXX TODO factor of `parse`?:
 4974 11cb E10C BE08 	  dw b_l_,scan_ ; ( ca len )
 4975 11cf E00B 9D11 	  dw dup_,parsed_
 4976 11d3 C00A      	  dw semicolon_s_
 4977               	
 4978               	; ----------------------------------------------
 4979 11d5 650C      	  _colon_header word_,"WORD"
 4980               	
 4981               	; doc{
 4982               	;
 4983               	; word  ( c "<c...>text<c>" -- ca )  \ ANS Forth
 4984               	;
 4985               	; c = delimiter char
 4986               	;
 4987               	; Skip leading _c_ delimiters from the input stream.  Parse the
 4988               	; next text characters from the input stream, until a delimiter
 4989               	; _c_ is found, storing the packed character string beginning at
 4990               	; _ca_, as a counted string (the character count in the first
 4991               	; byte), and with one blank at the end.
 4992               	;
 4993               	; }doc
 4994               	
 4995 11d7 8111      	  dw stream_ ; ( c a1 )
 4996 11d9 E00B F00A 	  dw dup_,to_r_
 4997 11dd CC0B D408 	  dw over_,skip_ ; ( c a2 )
 4998               	.if  0
 4999               	  dw hex_
GAS LISTING solo_forth.for_as.z80s 			page 98


 5000               	  _echo 'In word after skip:' ; XXX INFORMER
 5001               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5002               	  dw key_,drop_ ; XXX INFORMER
 5003               	.endif
 5004 11e1 E00B FF0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
 5004      D20D 210D 
 5004      F00B 
 5005               	  ; XXX TODO factor of `parse`:
 5006 11eb D90B BE08 	  dw swap_,scan_ ; ( a2 len )
 5007               	.if  0
 5008               	  dw hex_
 5009               	  _echo 'In word after scan:' ; XXX INFORMER
 5010               	  dw cr_,two_dup_,type_ ; XXX INFORMER
 5011               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5012               	  dw key_,drop_ ; XXX INFORMER
 5013               	.endif
 5014 11ef E00B 570D 	  dw dup_,one_plus_,to_in_,plus_store_
 5014      210D F00B 
 5015               	
 5016 11f7 900D      	  dw here_
 5017 11f9 8306 21   	  _literal max_word_length+2
 5018 11fc 5D11      	  dw blank_
 5019               	
 5020 11fe E00B 900D 	  dw dup_,here_,c_store_ ; count byte
 5020      520C 
 5021 1204 900D 570D 	  dw here_,one_plus_ ; destination
 5022 1208 D90B      	  dw swap_ ; count
 5023 120a E609      	  dw cmove_ ; move the word
 5024 120c 900D      	  dw here_
 5025               	
 5026               	  .if 0 ; XXX OLD
 5027               	    ;dw space_ ; XXX INFORMER
 5028               	    ;dw depth_,dot_ ; XXX INFORMER
 5029               	    ;_echo 'blk ' ; XXX INFORMER
 5030               	    ;dw blk_,fetch_,dot_ ; XXX INFORMER
 5031               	    ;_echo 'in ' ; XXX INFORMER
 5032               	    ;dw in_,fetch_,dot_ ; XXX INFORMER
 5033               	    ; dw here_,count_,one_,ink_,type_,zero_,ink_,space_ ; XXX INFORMER
 5034               	    ;dw key_,drop_ ; XXX INFORMER
 5035               	  .endif
 5036               	
 5037 120e C00A      	  dw semicolon_s_
 5038               	; ----------------------------------------------
 5039 1210 650C      	  _colon_header paren_number_,"(NUMBER)"
 5040               	
 5041               	; doc{
 5042               	;
 5043               	; (number)  ( d1 ca1 -- d2 ca2 )  \ fig-Forth
 5044               	;
 5045               	; Convert the ASCII text beginning at _ca1+l_ with regard to
 5046               	; `base`. The new value is accumulated into double number _d1_,
 5047               	; being left as _d2_.  _ca2_ is the address of the first
 5048               	; unconvertable digit. Used by `number`.
 5049               	;
 5050               	; }doc
 5051               	
 5052               	paren_number.begin: ; begin
GAS LISTING solo_forth.for_as.z80s 			page 99


 5053 1212 570D      	  dw one_plus_ ; address of the next digit
 5054 1214 E00B F00A 	  dw dup_,to_r_ ; save the address
 5055 1218 230C      	  dw c_fetch_ ; get the digit
 5056               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5057               	  ;dw dup_,dup_,cr_,dot_,emit_; XXX INFORMER
 5058 121a 330D 1A0C 	  dw base_,fetch_,digit_ ; convert the digit
 5058      4608 
 5059 1220 6007 4E12 	  dw zero_branch_,paren_number.end ; while
 5060 1224 D90B      	  dw swap_ ; get the high order part of d1 to the top.
 5061 1226 330D 1A0C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5061      060A 
 5062 122c D40B      	  dw drop_ ; drop the high order part of the product
 5063 122e 1E0E      	  dw rot_ ; move the low order part of d1 to top of stack
 5064 1230 330D 1A0C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5064      060A 
 5065 1236 890B      	  dw d_plus_ ; accumulate result into d1
 5066 1238 360D 1A0C 	  dw dpl_,fetch_,one_plus_ ; is DPL other than -1?
 5066      570D 
 5067 123e 6007 4812 	  dw zero_branch_,paren_number.decimal_point_done
 5068               	  ; DPL is not -1, a decimal point was encountered
 5069 1242 C90C 360D 	  dw one_,dpl_,plus_store_ ; increment DPL, one more digit to right of decimal point
 5069      F00B 
 5070               	paren_number.decimal_point_done:
 5071 1248 FF0A      	  dw from_r_ ; pop addr1+1 back to convert the next digit
 5072 124a 5707 1212 	  dw branch_,paren_number.begin ; repeat
 5073               	paren_number.end:
 5074 124e FF0A      	  dw from_r_ ; address of the first non-convertable digit, a2.
 5075 1250 C00A      	  dw semicolon_s_
 5076               	
 5077               	; ----------------------------------------------
 5078 1252 650C      	  _colon_header number_,"NUMBER"
 5079               	
 5080               	; doc{
 5081               	;
 5082               	; number  ( ca  -- d )  \ fig-Forth
 5083               	;
 5084               	; Convert a counted character string left at _ca_, to a signed
 5085               	; .double number, using the current numeric base. If a decimal
 5086               	; point is encountered in the text, its position will be given
 5087               	; in `dpl`, but no other effect occurs. If numeric conversion is
 5088               	; not possible, an error message will be given.
 5089               	;
 5090               	; }doc
 5091               	
 5092               	  ;dw cr_,dup_,count_,swap_,dot_,dot_ ; XXX INFORMER
 5093               	  ;dw dup_,count_,type_ ; XXX INFORMER
 5094 1254 C50C C50C 	  dw zero_,zero_,rot_ ; two zeros, initial value of the double number
 5094      1E0E 
 5095 125a E00B 570D 	  dw dup_,one_plus_,c_fetch_ ; get the first digit
 5095      230C 
 5096 1260 8306 2D   	  _literal '-'
 5097 1263 E90D      	  dw equals_ ; is it a minus sign?
 5098 1265 E00B F00A 	  dw dup_,to_r_ ; save the flag
 5099               	.if true==(-1)
 5100               	  dw abs_
 5101               	.endif
 5102 1269 810B      	  dw plus_
GAS LISTING solo_forth.for_as.z80s 			page 100


 5103               	  ; If the first digit is "-", the flag is 1,
 5104               	  ; and addr+1 points to the second digit.
 5105               	  ; If the first digit is not "-", the flag is
 5106               	  ; 0.  addr+0 remains the same, pointing to
 5107               	  ; the first digit.
 5108 126b 8D06 FFFF 	  dw lit_,-1 ; initial value of `dpl`
 5109               	number.begin:
 5110 126f 360D 490C 	  dw dpl_,store_
 5111 1273 1012      	  dw paren_number_ ; convert one digit after another until an invalid char occurs
 5112 1275 E00B 230C 	  dw dup_,c_fetch_ ; get the invalid digit
 5113               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5114               	  ;dw cr_,dup_,emit_; XXX INFORMER
 5115 1279 E10C E90D 	  dw b_l_,equals_ ; is it a blank?
 5116 127d 6C07 9412 	  dw question_branch_,number.a_blank
 5117               	  ; The invalid digit is not a blank.
 5118 1281 E00B 230C 	  dw dup_,c_fetch_ ; get the invalid digit again
 5119 1285 8306 2E   	  _literal '.'
 5120 1288 DC0D      	  dw not_equals_ ; not a decimal point?
 5121 128a C90C 0D0F 	  _question_error error.not_understood ; error if not
 5122               	  ; Decimal point found, set `dpl` to zero next time.
 5123 128e C50C      	  dw zero_
 5124 1290 5707 6F12 	  dw branch_,number.begin ; repeat
 5125               	number.a_blank:
 5126 1294 D40B      	  dw drop_ ; discard address
 5127 1296 FF0A      	  dw from_r_ ; pop the flag of "-" sign back
 5128 1298 6007 9E12 	  dw zero_branch_,number.end
 5129               	  ; The first digit is a "-" sign.
 5130 129c A70B      	  dw dnegate_
 5131               	number.end:
 5132 129e C00A      	  dw semicolon_s_
 5133               	
 5134               	; ----------------------------------------------
 5135 12a0 A212      	  _code_header upper_,"UPPER"
 5136               	
 5137               	; doc{
 5138               	;
 5139               	; upper  ( c -- c' )
 5140               	;
 5141               	; }doc
 5142               	
 5143 12a2 E1        	  pop hl
 5144 12a3 7D        	  ld a,l
 5145 12a4 CDAB 12   	  call upper.a
 5146 12a7 6F        	  ld l,a
 5147 12a8 C35E 05   	  jp push_hl
 5148               	
 5149               	upper.a:
 5150               	  ; Convert the ASCII char in the 'a' register to uppercase.
 5151 12ab FE61      	  cp 'a'
 5152 12ad D8        	  ret c
 5153 12ae FE7B      	  cp 'z'+1
 5154 12b0 D0        	  ret nc
 5155 12b1 EE20      	  xor 0x20 ; toggle bit 5
 5156 12b3 C9        	  ret
 5157               	
 5158               	; ----------------------------------------------
 5159 12b4 B612      	  _code_header uppers_,"UPPERS"
GAS LISTING solo_forth.for_as.z80s 			page 101


 5160               	
 5161               	; doc{
 5162               	;
 5163               	; uppers  ( ca len -- )
 5164               	;
 5165               	; }doc
 5166               	
 5167 12b6 D1        	  pop de
 5168 12b7 E1        	  pop hl
 5169               	uppers.do:
 5170 12b8 7A        	  ld a,d
 5171 12b9 B3        	  or e
 5172 12ba CA5F 05   	  jp z,next
 5173 12bd 7E        	  ld a,(hl)
 5174 12be CDAB 12   	  call upper.a
 5175 12c1 77        	  ld (hl),a
 5176 12c2 23        	  inc hl
 5177 12c3 1B        	  dec de
 5178 12c4 C3B8 12   	  jp uppers.do
 5179               	
 5180               	; ----------------------------------------------
 5181 12c7 650C      	  _colon_header defined_question_,"DEFINED?"
 5182               	
 5183               	; defined?  ( ca len -- wf )
 5184               	
 5185 12c9 3C13 BD0B 	  dw found_,nip_,zero_not_equals_
 5185      620B 
 5186 12cf C00A      	  dw semicolon_s_
 5187               	
 5188               	; ----------------------------------------------
 5189 12d1 650C      	  _colon_header undefined_question_,"UNDEFINED?"
 5190               	
 5191               	; doc{
 5192               	;
 5193               	; undefined?  ( ca len -- wf )
 5194               	;
 5195               	; }doc
 5196               	
 5197 12d3 C712 570B 	  dw defined_question_,zero_equals_
 5198 12d7 C00A      	  dw semicolon_s_
 5199               	
 5200               	; ----------------------------------------------
 5201 12d9 DB12      	  _code_header dollar_store_,"$!"
 5202               	
 5203               	  ; [Code from DZX-Forth's `packed`.]
 5204               	
 5205               	; doc{
 5206               	;
 5207               	; $!  ( ca1 len1 ca2 -- )
 5208               	;
 5209               	; Store the string _ca1 len1_ as a counted string at _ca2_.  The
 5210               	; source and destination strings are permitted to overlap.
 5211               	;
 5212               	; An ambiguous condition exists if _len1_ is greater than 255 or
 5213               	; the buffer at _ca2_ is less than _len1_+1 characters.
 5214               	;
 5215               	; }doc
GAS LISTING solo_forth.for_as.z80s 			page 102


 5216               	
 5217               	  ; XXX TODO rename? `s!`, `packed`, `pack`, `uncount`...
 5218               	
 5219 12db D9        	  exx
 5220 12dc D1        	  pop de      ; de=ca2
 5221 12dd C1        	  pop bc      ; c=len1
 5222 12de E1        	  pop hl      ; hl=ca1
 5223 12df C5        	  push bc     ; len1
 5224 12e0 D5        	  push de     ; ca2
 5225 12e1 13        	  inc  de
 5226 12e2 CD1C 05   	  call move_block
 5227 12e5 E1        	  pop hl      ; ca2
 5228 12e6 D1        	  pop de      ; e=len1
 5229 12e7 73        	  ld (hl),e
 5230 12e8 D9        	  exx
 5231 12e9 DDE9      	  _jp_next
 5232               	
 5233               	; ----------------------------------------------
 5234 12eb 650C      	  _colon_header find_,"FIND"
 5235               	
 5236               	; doc{
 5237               	;
 5238               	; find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5239               	;
 5240               	; Find the definition named in the counted string at _ca_. If
 5241               	; the definition is not found after searching all the
 5242               	; vocabularies in the search order, return _ca_ and zero.  If
 5243               	; the definition is found, return its _cfa_. If the definition
 5244               	; is immediate, also return one (1); otherwise also return
 5245               	; minus-one (-1).
 5246               	;
 5247               	; }doc
 5248               	
 5249               	  ; : find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5250               	  ;   #vocs 0 do
 5251               	  ;     context i cells + @  ?dup
 5252               	  ;     if  @ (find) ?dup if  unloop exit  then  then
 5253               	  ;   loop  false  ;
 5254               	
 5255 12ed FD0C C50C 	  dw hash_vocs_,zero_,paren_do_
 5255      AD07 
 5256               	find.do:
 5257 12f3 2A0D 4408 	  dw context_,i_,cells_,plus_,fetch_
 5257      800D 810B 
 5257      1A0C 
 5258 12fd 2E0E      	  dw question_dup_ ; a vocabulary in the search order?
 5259 12ff 6007 1113 	  dw zero_branch_,find.loop ; if not, next
 5260               	  ; valid vocabulary in the search order
 5261 1303 1A0C 6508 	  dw fetch_,paren_find_,question_dup_ ; word found in the vocabulary?
 5261      2E0E 
 5262 1309 6007 1113 	  dw zero_branch_,find.loop ; if not, try the next vocabulary
 5263 130d D60A 321D 	  dw unloop_,exit_
 5264               	find.loop:
 5265 1311 7807 F312 	  dw paren_loop_,find.do,false_
 5265      D10C 
 5266 1317 C00A      	  dw semicolon_s_
 5267               	
GAS LISTING solo_forth.for_as.z80s 			page 103


 5268               	; ----------------------------------------------
 5269 1319 1A14      	  _variable_header find_dollar_,"FIND$"
 5270               	
 5271               	  ; XXX TODO use an unused address above `pad` instead?
 5272               	  ; XXX TODO rename to `word$`?
 5273               	  ; XXX TODO use also in `word`?
 5274               	
 5275 131b 0000 0000 	  ds max_word_length+2
 5275      0000 0000 
 5275      0000 0000 
 5275      0000 0000 
 5275      0000 0000 
 5276               	
 5277               	; ----------------------------------------------
 5278 133c 650C      	  _colon_header found_,"FOUND"
 5279               	
 5280               	; doc{
 5281               	;
 5282               	; found  ( ca len --- ca 0 | cfa 1 | cfa -1 )
 5283               	;
 5284               	; }doc
 5285               	
 5286               	  ; XXX TODO factor
 5287               	
 5288 133e 1913      	  dw find_dollar_
 5289 1340 8306 21   	  _literal max_word_length+2
 5290 1343 5611      	  dw erase_ ; make sure there will be a null at the end
 5291 1345 1913 D912 	  dw find_dollar_,dollar_store_
 5292 1349 1913 0710 	  dw find_dollar_,count_,uppers_
 5292      B412 
 5293 134f 1913 EB12 	  dw find_dollar_,find_
 5294 1353 C00A      	  dw semicolon_s_
 5295               	
 5296               	; ----------------------------------------------
 5297 1355 650C      	  _colon_header paren_abort_,"(ABORT)"
 5298               	
 5299 1357 0E16      	  dw abort_
 5300 1359 C00A      	  dw semicolon_s_
 5301               	
 5302               	; ----------------------------------------------
 5303 135b 1A14      	  _variable_header error_number_,"ERROR#"
 5304               	
 5305 135d 0000      	  dw 0
 5306               	
 5307               	; ----------------------------------------------
 5308 135f 1A14      	  _two_variable_header error_pos_,"ERROR-POS"
 5309               	
 5310 1361 0000 0000 	  dw 0,0
 5311               	
 5312               	; ----------------------------------------------
 5313 1365 650C      	  _colon_header error_to_line_,"ERROR>LINE"
 5314               	
 5315               	; doc{
 5316               	;
 5317               	; error>line  ( n1 -- n2 )
 5318               	;
 5319               	; Convert an error number to its correspondent line offset. This
GAS LISTING solo_forth.for_as.z80s 			page 104


 5320               	; is used in order to skip the first line of screens and use
 5321               	; them as screen headers as usual.
 5322               	;
 5323               	; }doc
 5324               	
 5325 1367 E00B 570D 	  dw dup_,one_plus_,one_,paren_do_
 5325      C90C AD07 
 5326               	error_to_number.do:
 5327 136f 4408      	  dw i_
 5328 1371 8306 10   	  _literal 16
 5329 1374 6117 570B 	  dw mod_,zero_equals_
 5330               	.if true==(-1)
 5331               	  dw abs_
 5332               	.endif
 5333 1378 810B      	  dw plus_
 5334 137a 7807 6F13 	  dw paren_loop_,error_to_number.do
 5335 137e C00A      	  dw semicolon_s_
 5336               	
 5337               	; ----------------------------------------------
 5338 1380 650C      	  _colon_header error_,"ERROR"
 5339               	
 5340 1382 E00B 5B13 	  dw dup_,error_number_,store_ ; save the error number
 5340      490C 
 5341 1388 140D 1A0C 	  dw warning_,fetch_,zero_less_than_ ; custom error routine?
 5341      6D0B 
 5342 138e 6C07 5713 	  dw question_branch_,paren_abort_pfa ; if so, branch to it
 5343               	
 5344               	error.message:
 5345 1392 900D 0710 	  dw here_,count_,type_ ; last parsed word ; XXX TODO adapt to `parse-word`
 5345      1A10 
 5346 1398 4D10      	  dw paren_dot_quote_
 5347 139a 023F 20   	  db 2,"? "
 5348 139d B717      	  dw message_
 5349 139f 0B0D 1A0C 	  dw sp0_,fetch_,sp_store_
 5349      A60A 
 5350 13a5 1E0D 1A0C 	  dw blk_,fetch_,question_dup_
 5350      2E0E 
 5351 13ab 6007 B913 	  dw zero_branch_,error.end
 5352 13af 210D 1A0C 	  dw to_in_,fetch_
 5353 13b3 D90B      	  dw swap_
 5354 13b5 5F13 3B0C 	  dw error_pos_,two_store_
 5355               	error.end:
 5356 13b9 A115      	  dw quit_
 5357               	
 5358               	; ----------------------------------------------
 5359 13bb 650C      	  _colon_header id_dot_,"ID."
 5360               	
 5361 13bd EE0E 1A10 	  dw nfa_to_string_,type_,space_
 5361      260E 
 5362 13c3 C00A      	  dw semicolon_s_
 5363               	
 5364               	; ----------------------------------------------
 5365 13c5 650C      	  _colon_header header_,"HEADER"
 5366               	
 5367               	; header  ( "name" -- )
 5368               	
 5369               	  ; XXX TODO -- make sure `current` is searched? else duplicated
GAS LISTING solo_forth.for_as.z80s 			page 105


 5370               	  ; definitions would not be remarked.
 5371               	  ;
 5372               	  ; the only secure method is:
 5373               	  ;
 5374               	  ;   get-order n>r also current @ context ! defined nr> set-order
 5375               	  ;
 5376               	  ; but that would make the compilation slower.
 5377               	  ; i think it can be left to the programmer.
 5378               	
 5379 13c7 6F19      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5380 13c9 D016 4517 	  dw abs_,star_,question_dup_ ; ( 0 | cfa cfa )
 5380      2E0E 
 5381 13cf 6007 DC13 	  dw zero_branch_,header.continue
 5382               	  ; The word is not unique.
 5383 13d3 620E      	  dw cfa_to_nfa_
 5384               	
 5385 13d5 BB13      	  dw id_dot_
 5386 13d7 8306 04B7 	  _message error.not_unique
 5386      17
 5387               	header.continue:
 5388               	
 5389               	    ; XXX TODO adapt to `parse-word`; now it works because
 5390               	    ; `defined` still uses `word`, that leaves the string at
 5391               	    ; `here`.
 5392               	
 5393 13dc 900D 0710 	  dw here_,count_
 5394               	  ; XXX TODO error if name is too long? (see lina)
 5395 13e0 110D 1A0C 	  dw width_,fetch_,min_
 5395      F416 
 5396 13e6 EA06 C40B 	  dw save_string_,tuck_ ; ( len ca len )
 5397 13ea C90C 9806 	  _names_bank
 5398 13ee 900D 8F0A 	  dw here_,comma_np_ ; store a pointer to the cfa
 5399 13f2 460E 8F0A 	  dw latest_,comma_np_ ; link field
 5400               	  ; Now `np` contains the address of the nfa.
 5401 13f6 7F0A D912 	  dw np_fetch_,dollar_store_ ; store the name
 5402 13fa 7F0A 2D0D 	  dw np_fetch_,current_,fetch_,store_ ; update contents of `latest` in the current vocabulary
 5402      1A0C 490C 
 5403 1402 A00F      	  dw smudge_ ; set the smudge bit and page the default bank
 5404 1404 570D 770A 	  dw one_plus_,np_,plus_store_ ; update the names pointer with the length+1
 5404      F00B 
 5405 140a 900D 5E0D 	  dw here_,two_plus_,comma_ ; compile the pfa into code field
 5405      B20D 
 5406 1410 C00A      	  dw semicolon_s_
 5407               	
 5408               	; ----------------------------------------------
 5409 1412 650C      	  _colon_header create_,"CREATE"
 5410               	
 5411 1414 C513 A00F 	  dw header_,smudge_
 5412 1418 C90F      	  dw paren_semicolon_code_
 5413               	do_create:
 5414 141a 13        	  inc de  ; de=pfa
 5415 141b D5        	  push de
 5416 141c DDE9      	  _jp_next
 5417               	
 5418               	; ----------------------------------------------
 5419 141e 650C      	  _colon_header code_,"CODE"
 5420               	
GAS LISTING solo_forth.for_as.z80s 			page 106


 5421 1420 C513      	  dw header_
 5422 1422 030F      	  dw store_csp_
 5423 1424 FD05 5906 	  dw also_,assembler_,asm_
 5423      8205 
 5424 142a C00A      	  dw semicolon_s_
 5425               	
 5426               	; ----------------------------------------------
 5427 142c 2E14      	  _code_header compare_,"COMPARE"
 5428               	
 5429               	  ; ANS Forth
 5430               	  ; Adapted from DZX-Forth
 5431               	
 5432               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5433               	  ; because there will be no option to change it.
 5434               	  ; Use shorter internal code instead.
 5435               	  ; When case insensitive comparation is needed,
 5436               	  ; `uppers` can be used.
 5437               	
 5438 142e D1        	  pop de      ; de = len2
 5439 142f E1        	  pop hl      ; hl = ca2
 5440 1430 E3        	  ex (sp),hl  ; hl = len1 ; ( ca1 ca2 )
 5441 1431 7A        	  ld a,d
 5442 1432 BC        	  cp h
 5443 1433 2002      	  jr nz,compare.lengths
 5444 1435 7B        	  ld a,e
 5445 1436 BD        	  cp l
 5446               	compare.lengths:
 5447               	  ; cy = string2 is longer than string1?
 5448 1437 3801      	  jr c,compare.ready
 5449 1439 EB        	  ex de,hl
 5450               	compare.ready:
 5451               	  ; de = length of the short string
 5452               	  ; hl = length of the long string
 5453 143a 69        	  ld l,c
 5454 143b 60        	  ld h,b ; hl = Forth IP
 5455 143c C1        	  pop bc ; bc = ca2
 5456 143d E3        	  ex (sp),hl ; hl = ca1 ; save Forth IP
 5457 143e F5        	  push af ; save carry flag
 5458               	compare.compare_strings: equ $+1 ; XXX not used
 5459 143f CD57 14   	  call compare_strings_case_sensitive
 5460 1442 2003      	  jr nz,compare.no_match
 5461               	
 5462               	compare.match:
 5463               	  ; The smaller string matches.
 5464 1444 F1        	  pop af ; restore flags
 5465 1445 1801      	  jr compare.end
 5466               	
 5467               	compare.no_match:
 5468               	  ; The smaller string does not match.
 5469 1447 C1        	  pop bc ; useless carry flag
 5470               	
 5471               	compare.end:
 5472 1448 C1        	  pop bc ; restore Forth IP
 5473 1449 2101 00   	  ld hl,1
 5474 144c DA5E 05   	  jp c,push_hl
 5475 144f 2B        	  dec hl ; 0
 5476 1450 CA5E 05   	  jp z,push_hl ; string1 equals string2
GAS LISTING solo_forth.for_as.z80s 			page 107


 5477 1453 2B        	  dec hl ; -1
 5478 1454 C35E 05   	  jp push_hl
 5479               	
 5480               	compare_strings_case_sensitive:
 5481               	  ; Used by 'compare' and 'search'.
 5482               	  ; Input:
 5483               	  ;   HL = a1
 5484               	  ;   BC = a2
 5485               	  ;   DE = len
 5486               	  ; Output:
 5487               	  ;   Z = match?
 5488               	  ; [Code from DZX-Forth.]
 5489 1457 7B        	  ld a,e
 5490 1458 B2        	  or d
 5491 1459 C8        	  ret z
 5492 145a 0A        	  ld a,(bc)
 5493 145b BE        	  cp (hl)
 5494 145c C0        	  ret nz
 5495 145d 23        	  inc hl
 5496 145e 03        	  inc bc
 5497 145f 1B        	  dec de
 5498 1460 C357 14   	  jp compare_strings_case_sensitive
 5499               	
 5500               	; ----------------------------------------------
 5501 1463 6514      	  _code_header search_,"SEARCH"
 5502               	
 5503               	  ; search  ( ca1 len1 ca2 len2 -- ca3 len3 -1 | ca1 len1 0 )
 5504               	
 5505               	  ; ANS Forth
 5506               	
 5507               	  ; Adapted from DZX-Forth.
 5508               	  ;
 5509               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5510               	  ; because there will be no option to change it.
 5511               	  ; Use shorter internal code instead.
 5512               	  ; When case insensitive comparation is needed,
 5513               	  ; `uppers` can be used.
 5514               	
 5515 1465 D9        	  exx ; save Forth IP
 5516 1466 E1        	  pop hl
 5517 1467 2287 14   	  ld (search.string_2_len),hl
 5518 146a 7D        	  ld a,l
 5519 146b B4        	  or h ; len2 is zero?
 5520 146c C1        	  pop bc ; ca2
 5521 146d E1        	  pop hl ; len1
 5522 146e 22A0 14   	  ld (search.string_1_len),hl
 5523 1471 EB        	  ex de,hl ; de = len1
 5524 1472 E1        	  pop hl ; ca1
 5525 1473 22A4 14   	  ld (search.string_1_addr),hl
 5526 1476 CA93 14   	  jp z,search.match ; if len2 is zero, match
 5527 1479 2B        	  dec hl
 5528 147a 13        	  inc de
 5529               	search.1:
 5530 147b 23        	  inc hl ; address of current char of string 1
 5531 147c 1B        	  dec de ; remaining length of string 1
 5532 147d 7B        	  ld a,e
 5533 147e B2        	  or d ; end of string 1?
GAS LISTING solo_forth.for_as.z80s 			page 108


 5534 147f CA9C 14   	  jp z,search.no_match
 5535               	; XXX OLD -- already commented out in DX-Forth:
 5536               	; ld a,(bc)
 5537               	; cp  (hl)
 5538               	; jp nz,search.1
 5539 1482 D5        	  push de
 5540 1483 C5        	  push bc
 5541 1484 E5        	  push hl
 5542 1485 EB        	  ex de,hl
 5543               	search.string_2_len equ $+1
 5544 1486 2100 00   	  ld hl,0  ; length of the second string
 5545 1489 EB        	  ex de,hl
 5546 148a CD57 14   	  call compare_strings_case_sensitive
 5547 148d E1        	  pop hl
 5548 148e C1        	  pop bc
 5549 148f D1        	  pop de
 5550 1490 C27B 14   	  jp nz,search.1
 5551               	
 5552               	search.match:
 5553 1493 0101 00   	  ld bc,true
 5554               	search.end:
 5555 1496 E5        	  push hl
 5556 1497 D5        	  push de
 5557 1498 C5        	  push bc
 5558 1499 D9        	  exx ; restore Forth IP
 5559 149a DDE9      	  _jp_next
 5560               	
 5561               	search.no_match:
 5562 149c 0100 00   	  ld bc,false
 5563               	search.string_1_len equ $+1
 5564 149f 2100 00   	  ld hl,0  ; length of the first string
 5565 14a2 EB        	  ex de,hl
 5566               	search.string_1_addr equ $+1
 5567 14a3 2100 00   	  ld hl,0  ; address of the first string
 5568 14a6 C396 14   	  jp search.end
 5569               	
 5570               	; ----------------------------------------------
 5571 14a9 650C      	  _colon_header bracket_compile_,"[COMPILE]",immediate
 5572               	
 5573 14ab 9A19 BE0D 	  dw tick_,compile_comma_
 5574 14af C00A      	  dw semicolon_s_
 5575               	
 5576               	; ----------------------------------------------
 5577 14b1 650C      	  _colon_header s_literal_,"SLITERAL",immediate
 5578               	
 5579               	  ; : sliteral  ( ca len -- )  compile slit s,  ; immediate
 5580               	
 5581 14b3 680F 5F06 	  dw compile_,s_lit_,s_comma_
 5581      A00D 
 5582 14b9 C00A      	  dw semicolon_s_
 5583               	
 5584               	; ----------------------------------------------
 5585 14bb 650C      	  _colon_header c_literal_,"CLITERAL",immediate
 5586               	
 5587               	; doc{
 5588               	;
 5589               	; cliteral  ( b -- )  \ I
GAS LISTING solo_forth.for_as.z80s 			page 109


 5590               	;
 5591               	; If compiling, then compile the stack value _b_ as a 8-bit literal.
 5592               	; `cliteral` does the same than `literal` but saves one byte of
 5593               	; dictionary space.
 5594               	;
 5595               	; }doc
 5596               	
 5597               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5598               	
 5599               	  .if 1 ; XXX OLD
 5600 14bd 1D0F      	    dw comp_question_
 5601 14bf 6007 C914 	    dw zero_branch_,c_literal.end
 5602 14c3 680F 8306 	    dw compile_,c_lit_,c_comma_
 5602      C60D 
 5603               	c_literal.end:
 5604               	  .else ; XXX NEW
 5605               	    dw question_comp_
 5606               	    dw compile_,c_lit_,comma_
 5607               	  .endif
 5608 14c9 C00A      	  dw semicolon_s_
 5609               	
 5610               	; ----------------------------------------------
 5611 14cb 650C      	  _colon_header literal_,"LITERAL",immediate
 5612               	
 5613               	; doc{
 5614               	;
 5615               	; literal  ( n -- )  \ fig-Forth, I
 5616               	;
 5617               	; If compiling, then compile the stack value _n_ as a 16-bit literal.
 5618               	;
 5619               	; }doc
 5620               	
 5621               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5622               	
 5623               	  .if 1 ; XXX OLD
 5624 14cd 1D0F      	    dw comp_question_
 5625 14cf 6007 D914 	    dw zero_branch_,literal.end
 5626 14d3 680F 8D06 	    dw compile_,lit_,comma_
 5626      B20D 
 5627               	literal.end:
 5628               	  .else ; XXX NEW
 5629               	    dw question_comp_
 5630               	    dw compile_,lit_,comma_
 5631               	  .endif
 5632 14d9 C00A      	  dw semicolon_s_
 5633               	
 5634               	; ----------------------------------------------
 5635 14db 650C      	  _colon_header two_literal_,"2LITERAL",immediate
 5636               	
 5637               	; doc{
 5638               	;
 5639               	; 2literal  ( d -- )  \ I
 5640               	;
 5641               	; If compiling, then compile the stack value _d_ as a 32-bit literal.
 5642               	;
 5643               	; }doc
 5644               	
GAS LISTING solo_forth.for_as.z80s 			page 110


 5645               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5646               	
 5647               	  .if 1 ; XXX OLD
 5648 14dd 1D0F      	    dw comp_question_
 5649 14df 6007 E914 	    dw zero_branch_,two_literal.end
 5650 14e3 D90B CB14 	    dw swap_,literal_,literal_
 5650      CB14 
 5651               	two_literal.end:
 5652               	  .else ; XXX NEW
 5653               	    ; XXX TODO -- dlit
 5654               	    dw question_comp_
 5655               	    dw swap_,literal_,literal_
 5656               	  .endif
 5657 14e9 C00A      	  dw semicolon_s_
 5658               	
 5659               	; ----------------------------------------------
 5660 14eb 650C      	  _colon_header depth_,"DEPTH"
 5661               	
 5662 14ed 9D0A 0B0D 	  dw sp_fetch_,sp0_,fetch_,minus_,lit_,-2,slash_
 5662      1A0C D20D 
 5662      8D06 FEFF 
 5662      5917 
 5663 14fb C00A      	  dw semicolon_s_
 5664               	
 5665               	; ----------------------------------------------
 5666 14fd 650C      	  _colon_header question_stack_,"?STACK"
 5667               	
 5668               	; doc{
 5669               	;
 5670               	; ?stack  ( -- )  \ fig-Forth
 5671               	;
 5672               	; Issue an error message if the stack is out of bounds.
 5673               	;
 5674               	; }doc
 5675               	
 5676 14ff 9D0A      	  dw sp_fetch_
 5677 1501 0B0D 1A0C 	  dw sp0_,fetch_
 5678 1505 D90B F60D 	  dw swap_,less_than_
 5679 1509 CD0C 0D0F 	  _question_error error.stack_empty
 5680 150d 9D0A      	  dw sp_fetch_
 5681 150f 8D06 7601 	  dw lit_,data_stack_limit
 5682 1513 F60D      	  dw less_than_
 5683 1515 8306 070D 	  _question_error error.full_stack
 5683      0F
 5684 151a C00A      	  dw semicolon_s_
 5685               	
 5686               	; ----------------------------------------------
 5687 151c 650C      	  _colon_header interpret_,"INTERPRET"
 5688               	
 5689               	; doc{
 5690               	;
 5691               	; interpret  ( -- )
 5692               	;
 5693               	; The outer text interpreter which sequentially executes or
 5694               	; compiles text from the input stream (terminal or disk)
 5695               	; depending on `state`. if the word name cannot be found after a
 5696               	; search of the `context` search order it is converted to a
GAS LISTING solo_forth.for_as.z80s 			page 111


 5697               	; number according to the current `base`.  That also failing, an
 5698               	; error message echoing the name with a "?" will be given.
 5699               	;
 5700               	; }doc
 5701               	
 5702               	interpret.begin:
 5703               	
 5704               	  ; XXX TODO -- finish
 5705               	
 5706               	  ; XXX TODO -- In order to change the behaviour of `literal`,
 5707               	  ; `2literal` and `cliteral` (make them give an error in
 5708               	  ; interpretation mode), `interpret` must be modified.
 5709               	
 5710 151e FD14      	  dw question_stack_
 5711               	  ; dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5712 1520 6F19      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5713               	  ; dw cr_,dot_s_ ; XXX INFORMER
 5714               	  ; _echo 'In interpret after defined ' ; XXX INFORMER
 5715               	  ; dw hex_,dot_s_,decimal_,key_,drop_ ; XXX INFORMER
 5716 1522 2E0E      	  dw question_dup_ ; found?
 5717               	  ; dw lit_,4,border_,dot_s_,key_,drop_ ; XXX INFORMER
 5718 1524 6007 3E15 	  dw zero_branch_,interpret.word_not_found
 5719               	
 5720               	  ; Found ( cfa 1 | cfa -1 )
 5721               	  ; Immediate word:     ( cfa  1 )
 5722               	  ; Non-immediate word: ( cfa -1 )
 5723 1528 1D0F      	  dw comp_question_
 5724               	  ; ( cfa 1 state | cfa -1 state )
 5725               	.if true==1
 5726               	  ; Compiling an immediate word:     ( cfa  1 1 )
 5727               	  ; Compiling a non-immediate word:  ( cfa -1 1 )
 5728               	  ; Executing an immediate word:     ( cfa  1 0 )
 5729               	  ; Executing a non-immediate word:  ( cfa -1 0 )
 5730 152a 9B0B      	  dw negate_
 5731               	.endif
 5732               	  ; Compiling an immediate word:     ( cfa  1 -1 )
 5733               	  ; Compiling a non-immediate word:  ( cfa -1 -1 )
 5734               	  ; Executing an immediate word:     ( cfa  1  0 )
 5735               	  ; Executing a non-immediate word:  ( cfa -1  0 )
 5736 152c E90D      	  dw equals_ ; compiling a non-immediate word?
 5737 152e 6007 3815 	  dw zero_branch_,interpret.execute
 5738               	
 5739               	  ; Compiling a non-immediate word  ( cfa )
 5740 1532 BE0D      	  dw compile_comma_
 5741 1534 5707 1E15 	  dw branch_,interpret.begin
 5742               	
 5743               	interpret.execute:
 5744               	  ; Executing or immediate ( cfa )
 5745               	  ;_echo 'about to execute cfa ' ; XXX INFORMER
 5746               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5747               	;  dw dup_,u_dot_,key_,drop_ ; XXX INFORMER
 5748 1538 1C07      	  dw execute_
 5749               	  ;dw zero_,border_ ; XXX INFORMER
 5750 153a 5707 1E15 	  dw branch_,interpret.begin
 5751               	
 5752               	interpret.word_not_found:
 5753               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
GAS LISTING solo_forth.for_as.z80s 			page 112


 5754               	  ; try to convert the text to a number
 5755               	  ; ( ca )
 5756               	  ;_echo 'about to convert to number ' ; XXX INFORMER
 5757               	  ;dw lit_,5,border_,key_,drop_ ; XXX INFORMER
 5758 153e 5212      	  dw number_
 5759               	  ;dw zero_,border_ ; XXX INFORMER
 5760 1540 360D 1A0C 	  dw dpl_,fetch_,one_plus_ ; is there a decimal point?
 5760      570D 
 5761 1546 6007 5015 	  dw zero_branch_,interpret.16bit_number
 5762               	  ; decimal point detected, so it's a double, 32-bit, number
 5763               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5764 154a DB14      	  dw two_literal_
 5765 154c 5707 1E15 	  dw branch_,interpret.begin
 5766               	
 5767               	interpret.16bit_number:
 5768               	  ;dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5769               	  ; no decimal point, so it's a 16-bit number
 5770 1550 D40B      	  dw drop_ ; discard high order part of the double number
 5771               	  ; XXX TODO use `c_literal` for 8-bit values.
 5772 1552 CB14      	  dw literal_
 5773 1554 5707 1E15 	  dw branch_,interpret.begin
 5774               	
 5775               	; ----------------------------------------------
 5776 1558 650C      	  _colon_header immediate_,"IMMEDIATE"
 5777               	
 5778 155a 460E      	  dw latest_
 5779 155c 8306 40   	  _literal precedence_mask
 5780               	  ; XXX TODO factor `toggle-names'?
 5781 155f C90C 9806 	  _names_bank
 5782 1563 110C      	  dw toggle_
 5783 1565 C50C 9806 	  _default_bank
 5784 1569 C00A      	  dw semicolon_s_
 5785               	
 5786               	; ----------------------------------------------
 5787 156b 650C      	  _colon_header vocabulary_,"VOCABULARY"
 5788               	
 5789               	; doc{
 5790               	;
 5791               	; vocabulary  ( "name" -- )
 5792               	;
 5793               	; Create a vocabulary with the parsed "name" as its name. The
 5794               	; run-time efect of `name` is to replace `context`, the top
 5795               	; vocabulary in the search order.
 5796               	;
 5797               	; }doc
 5798               	
 5799 156d 1214      	  dw create_
 5800 156f C50C B20D 	  dw zero_,comma_ ; space for the nfa of the latest word defined in the vocabulary
 5801 1573 900D      	  dw here_ ; address of vocabulary link
 5802 1575 1A0D 1A0C 	  dw voc_link_,fetch_,comma_ ; compile the current content of `voc-link`
 5802      B20D 
 5803 157b 1A0D 490C 	  dw voc_link_,store_ ; update `voc-link` with the link in this vocabulary
 5804               	
 5805 157f C90F      	  dw paren_semicolon_code_
 5806               	
 5807               	do_vocabulary:
 5808 1581 CDF8 0F   	  call do_does
GAS LISTING solo_forth.for_as.z80s 			page 113


 5809               	
 5810               	  ; The next words are to be executed when the vocabulary is invoked.
 5811 1584 2A0D 490C 	  dw context_,store_
 5812 1588 C00A      	  dw semicolon_s_
 5813               	
 5814               	; ----------------------------------------------
 5815 158a 650C      	  _colon_header definitions_,"DEFINITIONS"
 5816               	
 5817 158c 2A0D 1A0C 	  dw context_,fetch_
 5818 1590 2D0D 490C 	  dw current_,store_
 5819 1594 C00A      	  dw semicolon_s_
 5820               	
 5821               	; ----------------------------------------------
 5822 1596 650C      	  _colon_header paren_,"(",immediate
 5823               	
 5824 1598 8306 29   	  _literal ')'
 5825               	  ; XXX TODO use `skip`?
 5826 159b A711 AE1B 	  dw parse_,two_drop_
 5827 159f C00A      	  dw semicolon_s_
 5828               	
 5829               	; ----------------------------------------------
 5830 15a1 650C      	  _colon_header quit_,"QUIT"
 5831               	
 5832               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5833 15a3 1E0D FD0B 	  dw blk_,off_
 5834 15a7 900F      	  dw left_bracket_
 5835               	quit.do:
 5836               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5837 15a9 0E0D 1A0C 	  dw rp0_,fetch_,rp_store_
 5837      B80A 
 5838               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5839 15af CD09      	  dw cr_
 5840               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5841 15b1 FD10      	  dw query_
 5842               	  ; XXX FIXME never reached before the crash
 5843               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5844 15b3 1C15      	  dw interpret_
 5845 15b5 1D0F      	  dw comp_question_
 5846 15b7 6C07 A915 	  dw question_branch_,quit.do
 5847 15bb 4D10      	  dw paren_dot_quote_
 5848 15bd 026F 6B   	  db 2,"ok" ; XXX TODO use _string
 5849 15c0 5707 A915 	  dw branch_,quit.do
 5850               	
 5851               	.if show_version
 5852               	
 5853               	; ----------------------------------------------
 5854               	  _constant_header version_release_,"VERSION-RELEASE"
 5855               	
 5856               	  ; XXX TMP for debugging
 5857               	
 5858               	  dw version_release_variable
 5859               	
 5860               	; ----------------------------------------------
 5861               	  _colon_header dot_version_,".VERSION"
 5862               	
 5863               	  ; XXX TMP
 5864               	
GAS LISTING solo_forth.for_as.z80s 			page 114


 5865               	  dw lit_,version_status_variable,fetch_,emit_
 5866               	  _literal '-'
 5867               	  dw emit_
 5868               	  dw lit_,version_branch_variable,fetch_
 5869               	  dw s_to_d_,less_hash_,hash_,hash_,hash_greater_,type_
 5870               	  _literal '-'
 5871               	  dw emit_
 5872               	  dw lit_,version_release_variable,two_fetch_
 5873               	  ; XXX TODO use `du.` when available (it's in the library disk)
 5874               	  dw less_hash_,hash_s_,hash_greater_,type_
 5875               	  dw semicolon_s_
 5876               	
 5877               	.endif
 5878               	
 5879               	; ----------------------------------------------
 5880 15c4 650C      	  _colon_header greeting_,"GREETING"
 5881               	
 5882               	; doc{
 5883               	;
 5884               	; greeting  ( -- )
 5885               	;
 5886               	; }doc
 5887               	
 5888               	.if show_version
 5889               	  ; XXX TODO
 5890               	  dw paren_dot_quote_
 5891               	;  _string "Solo Forth\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5892               	  _string "Solo Forth\rVersion "
 5893               	  ; XXX TMP show the version and the free dictionary memory:
 5894               	  dw dot_version_,cr_
 5895               	;  _string "\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5896               	.else
 5897 15c6 4D10      	  dw paren_dot_quote_
 5898 15c8 32        	  db greeting.string_0_end-$-1
 5899 15c9 536F 6C6F 	  db "Solo Forth",carriage_return_char
 5899      2046 6F72 
 5899      7468 0D
 5900 15d4 7F20 3230 	  db copyright_char," 2015 Marcos Cruz",carriage_return_char
 5900      3135 204D 
 5900      6172 636F 
 5900      7320 4372 
 5900      757A 0D
 5901 15e7 2870 726F 	  db "(programandala.net)",carriage_return_char
 5901      6772 616D 
 5901      616E 6461 
 5901      6C61 2E6E 
 5901      6574 290D 
 5902               	greeting.string_0_end:
 5903               	  ; XXX TMP show the free memory, during development only
 5904 15fb C91B 151B 	  dw unused_,u_dot_
 5905 15ff 4D10      	  dw paren_dot_quote_
 5906 1601 0A62 7974 	  _string "bytes free"
 5906      6573 2066 
 5906      7265 65
 5907               	.endif
 5908 160c C00A      	  dw semicolon_s_
 5909               	
GAS LISTING solo_forth.for_as.z80s 			page 115


 5910               	; ----------------------------------------------
 5911 160e 650C      	  _colon_header abort_,"ABORT"
 5912               	
 5913               	
 5914 1610 0B0D 1A0C 	  dw sp0_,fetch_,sp_store_
 5914      A60A 
 5915               	boot:
 5916 1616 960C      	  dw noop_ ; patched by `turnkey` ; XXX OLD
 5917 1618 A115      	  dw quit_
 5918               	
 5919               	; ----------------------------------------------
 5920 161a A00C      	  _constant_header boot_,"BOOT"
 5921               	
 5922 161c 1616      	  dw boot
 5923               	
 5924               	; ----------------------------------------------
 5925 161e 650C      	  _colon_header warm_,"WARM"
 5926               	
 5927               	  ; dw sp0_,fetch_,sp_store_
 5928               	  ; dw noop_ ; patched by `turnkey` ; XXX OLD
 5929               	  ; dw quit_
 5930 1620 9D1B 0E16 	  dw page_,abort_
 5931 1624 C00A      	  dw semicolon_s_
 5932               	
 5933               	warm_start:
 5934               	
 5935               	;  XXX TODO this works too
 5936               	;  ld hl,abort_
 5937               	;  ld ix,next ; restore IX
 5938               	;  jp next2
 5939               	
 5940 1626 CD96 16   	  call common_start
 5941 1629 1E16      	  dw warm_ ; XXX FIXME -- this works
 5942               	;  dw abort_ ; XXX FIXME -- this crashes the system, why?
 5943               	
 5944               	; ----------------------------------------------
 5945 162b 650C      	  _colon_header cold_,"COLD"
 5946               	
 5947               	  ; Init the names pointer.
 5948 162d 8D06 3000 	  dw lit_,names_pointer_init_value,fetch_
 5948      1A0C 
 5949 1633 8D06 2E00 	  dw lit_,names_pointer,store_
 5949      490C 
 5950               	
 5951               	  ; Init the disk buffers.
 5952 1639 0018      	  dw empty_buffers_
 5953               	
 5954               	  ; Init the circular string buffer.
 5955 163b 0E07      	  dw empty_csb_
 5956               	
 5957               	  ; Init the user variables.
 5958 163d 8D06 1400 	  dw lit_,default_user_variables_start ; from
 5959 1641 8D06 0E00 	  dw lit_,user_variables_pointer,fetch_ ; to
 5959      1A0C 
 5960 1647 8306 18   	  _literal default_user_variables_end-default_user_variables_start ; length
 5961 164a E609      	  dw cmove_
 5962               	
GAS LISTING solo_forth.for_as.z80s 			page 116


 5963               	  ; Restore the vocabularies to the default state.
 5964 164c 8D06 0600 	  dw lit_,latest_nfa_in_root_voc.init_value,fetch_
 5964      1A0C 
 5965 1652 8D06 4F06 	  dw lit_,root_pfa,store_
 5965      490C 
 5966 1658 8D06 0800 	  dw lit_,latest_nfa_in_forth_voc.init_value,fetch_
 5966      1A0C 
 5967 165e 8D06 5506 	  dw lit_,forth_pfa,store_
 5967      490C 
 5968 1664 8D06 0A00 	  dw lit_,latest_nfa_in_assembler_voc.init_value,fetch_
 5968      1A0C 
 5969 166a 8D06 5B06 	  dw lit_,assembler_pfa,store_
 5969      490C 
 5970 1670 8D06 0C00 	  dw lit_,voc_link.init_value,fetch_
 5970      1A0C 
 5971 1676 8D06 1C0D 	  dw lit_,voc_link_pfa,store_
 5971      490C 
 5972               	
 5973 167c 1906 5306 	  dw only_,forth_,definitions_  ; search order
 5973      8A15 
 5974 1682 BE0F      	  dw decimal_
 5975               	
 5976 1684 0C09 591B 	  dw display_,colors0_,page_,greeting_
 5976      9D1B C415 
 5977               	
 5978 168c 0E16      	  dw abort_
 5979               	
 5980               	cold_start:
 5981               	only_first_cold: ; XXX TMP -- temporary label
 5982 168e CDC4 1D   	  call move_name_fields_to_memory_bank ; (only the first time)
 5983               	.if latin1_charset_in_bank
 5984               	  ld hl,charset_address-0x0100
 5985               	  ld (sys_chars),hl
 5986               	.endif
 5987 1691 CD96 16   	  call common_start
 5988 1694 2B16      	  dw cold_
 5989               	
 5990               	common_start:
 5991               	
 5992               	  ; Common operations done by warm_start and cold_start.
 5993               	
 5994 1696 C1        	  pop bc ; get the return address, that holds the cfa of `cold` or `warm`
 5995 1697 ED73 AA1B 	  ld (system_stack_pointer),sp ; save the system stack pointer
 5996 169b ED7B 1400 	  ld sp,(s0_init_value)
 5997 169f AF        	  xor a
 5998 16a0 FD77 31   	  ld (iy+sys_df_sz_offset),a ; no lines at the bottom part of the screen
 5999 16a3 DD21 5F05 	  ld ix,next ; restore IX
 6000 16a7 DDE9      	  _jp_next ; jump to the cfa pointed by the BC register
 6001               	
 6002               	; ----------------------------------------------
 6003 16a9 AB16      	  _code_header s_to_d_,"S>D"
 6004               	
 6005               	; doc{
 6006               	;
 6007               	; s->d  ( n -- d )
 6008               	;
 6009               	; Sign extend a single number _n_ to form a double number _d_.
GAS LISTING solo_forth.for_as.z80s 			page 117


 6010               	;
 6011               	; }doc
 6012               	
 6013               	; dup 0<
 6014               	
 6015 16ab 2100 00   	  ld hl,0
 6016 16ae D1        	  pop de
 6017 16af 7A        	  ld a,d
 6018 16b0 B7        	  or a
 6019 16b1 F25D 05   	  jp p,push_hlde ; jump if positive
 6020 16b4 2B        	  dec hl
 6021 16b5 C35D 05   	  jp push_hlde
 6022               	
 6023               	; ----------------------------------------------
 6024 16b8 650C      	  _colon_header plus_minus_,"+-"
 6025               	
 6026               	; doc{
 6027               	;
 6028               	; +-  ( n1 n2 -- n3 )  \ fig-Forth
 6029               	;
 6030               	; Apply the sign of n2 to n1, which is left as n3.
 6031               	;
 6032               	; }doc
 6033               	
 6034 16ba 6D0B      	  dw zero_less_than_
 6035 16bc 6007 C216 	  dw zero_branch_,plus_minus.end
 6036 16c0 9B0B      	  dw negate_
 6037               	plus_minus.end:
 6038 16c2 C00A      	  dw semicolon_s_
 6039               	
 6040               	; ----------------------------------------------
 6041 16c4 650C      	  _colon_header d_plus_minus_,"D+-"
 6042               	
 6043               	; doc{
 6044               	;
 6045               	; d+-  ( d1 n -- d2 )  \ fig-Forth
 6046               	;
 6047               	; Apply the sign of _n_ to the double number _d1_, leaving it as
 6048               	; _d2_.
 6049               	;
 6050               	; }doc
 6051               	
 6052 16c6 6D0B      	  dw zero_less_than_
 6053 16c8 6007 CE16 	  dw zero_branch_,d_plus_minus.end
 6054 16cc A70B      	  dw dnegate_
 6055               	d_plus_minus.end:
 6056 16ce C00A      	  dw semicolon_s_
 6057               	
 6058               	; ----------------------------------------------
 6059 16d0 650C      	  _colon_header abs_,"ABS"
 6060               	
 6061               	; doc{
 6062               	;
 6063               	; abs  ( n -- u )
 6064               	;
 6065               	; Leave the absolute value _u_ of a number _n_.
 6066               	;
GAS LISTING solo_forth.for_as.z80s 			page 118


 6067               	; }doc
 6068               	
 6069 16d2 E00B B816 	  dw dup_,plus_minus_
 6070 16d6 C00A      	  dw semicolon_s_
 6071               	
 6072               	; ----------------------------------------------
 6073 16d8 650C      	  _colon_header dabs_,"DABS"
 6074               	
 6075               	; doc{
 6076               	;
 6077               	; dabs  ( d -- ud )
 6078               	;
 6079               	; Leave the absolute value _ud_ of a double number _d_.
 6080               	;
 6081               	; }doc
 6082               	
 6083 16da E00B C416 	  dw dup_,d_plus_minus_
 6084 16de C00A      	  dw semicolon_s_
 6085               	
 6086               	; ----------------------------------------------
 6087 16e0 E216      	  _code_header umax_,"UMAX"
 6088               	
 6089               	; doc{
 6090               	;
 6091               	; umax  ( u1 u2 -- u1 | u2 )
 6092               	;
 6093               	; }doc
 6094               	
 6095               	  ; [Code from DZX-Forth.]
 6096               	
 6097 16e2 D1        	  pop de
 6098 16e3 E1        	  pop hl
 6099 16e4 CD0C 05   	  call compare_de_hl_unsigned
 6100 16e7 C305 17   	  jp max.1
 6101               	
 6102               	; ----------------------------------------------
 6103 16ea EC16      	  _code_header umin_,"UMIN"
 6104               	
 6105               	; doc{
 6106               	;
 6107               	; umin  ( u1 u2 -- u1 | u2 )
 6108               	;
 6109               	; }doc
 6110               	
 6111               	  ; [Code from DZX-Forth.]
 6112               	
 6113 16ec D1        	  pop de
 6114 16ed E1        	  pop hl
 6115 16ee CD0C 05   	  call compare_de_hl_unsigned
 6116 16f1 C306 17   	  jp max.2
 6117               	
 6118               	; ----------------------------------------------
 6119 16f4 F616      	  _code_header min_,"MIN"
 6120               	
 6121               	  ; [Code from DZX-Forth.]
 6122               	
 6123 16f6 D1        	  pop de
GAS LISTING solo_forth.for_as.z80s 			page 119


 6124 16f7 E1        	  pop hl
 6125 16f8 CD12 05   	  call compare_de_hl_signed
 6126 16fb C306 17   	  jp max.2
 6127               	
 6128               	; ----------------------------------------------
 6129 16fe 0017      	  _code_header max_,"MAX"
 6130               	
 6131               	  ; [Code from DZX-Forth.]
 6132               	
 6133 1700 D1        	  pop de
 6134               	max.de:
 6135 1701 E1        	  pop hl
 6136 1702 CD12 05   	  call compare_de_hl_signed
 6137               	max.1:
 6138 1705 3F        	  ccf
 6139               	max.2:
 6140 1706 DA5E 05   	  jp c,push_hl
 6141 1709 EB        	  ex de,hl
 6142 170a C35E 05   	  jp push_hl
 6143               	
 6144               	; ----------------------------------------------
 6145 170d 650C      	  _colon_header m_star_,"M*"
 6146               	
 6147               	; doc{
 6148               	;
 6149               	; m*  ( n1 n2 -- d )  \ fig-Forth
 6150               	;
 6151               	; A mixed magnitude math operation which leaves the double
 6152               	; number signed product of two signed number.
 6153               	;
 6154               	; }doc
 6155               	
 6156 170f E70B      	  dw two_dup_
 6157 1711 6A0A F00A 	  dw xor_,to_r_
 6158 1715 D016      	  dw abs_
 6159 1717 D90B D016 	  dw swap_,abs_,u_m_star_
 6159      060A 
 6160 171d FF0A C416 	  dw from_r_,d_plus_minus_
 6161 1721 C00A      	  dw semicolon_s_
 6162               	
 6163               	; ----------------------------------------------
 6164 1723 650C      	  _colon_header m_slash_,"M/"
 6165               	
 6166               	; doc{
 6167               	;
 6168               	; m/  ( d n1 -- n2 n3 )  \ fig-Forth
 6169               	;
 6170               	; A mixed magnitude math operator which leaves the signed
 6171               	; remainder _n2_ and signed quotient _n3_ from a double number
 6172               	; dividend and divisor _n1_.  The  remainder takes its sign from
 6173               	; the dividend.
 6174               	;
 6175               	; }doc
 6176               	
 6177 1725 CC0B      	  dw over_
 6178 1727 F00A      	  dw to_r_
 6179 1729 F00A      	  dw to_r_
GAS LISTING solo_forth.for_as.z80s 			page 120


 6180 172b D816      	  dw dabs_
 6181 172d 4F0B      	  dw r_fetch_
 6182 172f D016      	  dw abs_
 6183 1731 100A      	  dw u_slash_mod_
 6184 1733 FF0A      	  dw from_r_
 6185 1735 4F0B      	  dw r_fetch_
 6186 1737 6A0A      	  dw xor_
 6187 1739 B816      	  dw plus_minus_
 6188 173b D90B      	  dw swap_
 6189 173d FF0A      	  dw from_r_
 6190 173f B816      	  dw plus_minus_
 6191 1741 D90B      	  dw swap_
 6192 1743 C00A      	  dw semicolon_s_
 6193               	
 6194               	; ----------------------------------------------
 6195 1745 650C      	  _colon_header star_,"*"
 6196               	
 6197 1747 0D17 D40B 	  dw m_star_,drop_
 6198 174b C00A      	  dw semicolon_s_
 6199               	
 6200               	; ----------------------------------------------
 6201 174d 650C      	  _colon_header slash_mod_,"/MOD"
 6202               	
 6203               	; doc{
 6204               	;
 6205               	; /mod  ( n1 n2 -- rem quot )  \ fig-Forth
 6206               	;
 6207               	; Leave the remainder and signed quotient of _n1_/_n2_. The
 6208               	; remainder has the sign of the dividend.
 6209               	;
 6210               	; }doc
 6211               	
 6212 174f F00A A916 	  dw to_r_,s_to_d_
 6213 1753 FF0A 2317 	  dw from_r_,m_slash_
 6214 1757 C00A      	  dw semicolon_s_
 6215               	
 6216               	; ----------------------------------------------
 6217 1759 650C      	  _colon_header slash_,"/"
 6218               	
 6219 175b 4D17 BD0B 	  dw slash_mod_,nip_
 6220 175f C00A      	  dw semicolon_s_
 6221               	
 6222               	; ----------------------------------------------
 6223 1761 650C      	  _colon_header mod_,"MOD"
 6224               	
 6225 1763 4D17 D40B 	  dw slash_mod_,drop_
 6226 1767 C00A      	  dw semicolon_s_
 6227               	
 6228               	; ----------------------------------------------
 6229 1769 650C      	  _colon_header star_slash_mod_,"*/MOD"
 6230               	
 6231 176b F00A 0D17 	  dw to_r_,m_star_
 6232 176f FF0A 2317 	  dw from_r_,m_slash_
 6233 1773 C00A      	  dw semicolon_s_
 6234               	
 6235               	; ----------------------------------------------
 6236 1775 650C      	  _colon_header star_slash_,"*/"
GAS LISTING solo_forth.for_as.z80s 			page 121


 6237               	
 6238 1777 6917 BD0B 	  dw star_slash_mod_,nip_
 6239 177b C00A      	  dw semicolon_s_
 6240               	
 6241               	; ----------------------------------------------
 6242 177d 650C      	  _colon_header m_slash_mod_,"M/MOD"
 6243               	
 6244 177f F00A C50C 	  dw to_r_,zero_,r_fetch_
 6244      4F0B 
 6245 1785 100A      	  dw u_slash_mod_
 6246 1787 FF0A D90B 	  dw from_r_,swap_
 6247 178b F00A 100A 	  dw to_r_,u_slash_mod_,from_r_
 6247      FF0A 
 6248 1791 C00A      	  dw semicolon_s_
 6249               	
 6250               	; ----------------------------------------------
 6251 1793 650C      	  _colon_header paren_line_,"(LINE)"
 6252               	
 6253 1795 F00A      	  dw to_r_
 6254 1797 E50C F10C 	  dw c_slash_l_,b_slash_buf_,star_slash_mod_
 6254      6917 
 6255 179d FF0A F50C 	  dw from_r_,b_slash_scr_,star_,plus_
 6255      4517 810B 
 6256 17a5 5E18 810B 	  dw block_,plus_,c_slash_l_
 6256      E50C 
 6257 17ab C00A      	  dw semicolon_s_
 6258               	
 6259               	; ----------------------------------------------
 6260 17ad 650C      	  _colon_header dot_line_,".LINE"
 6261               	
 6262 17af 9317 3610 	  dw paren_line_,minus_trailing_,type_
 6262      1A10 
 6263 17b5 C00A      	  dw semicolon_s_
 6264               	
 6265               	; ----------------------------------------------
 6266 17b7 650C      	  _colon_header message_,"MESSAGE"
 6267               	
 6268               	; doc{
 6269               	;
 6270               	; message  ( n -- )
 6271               	;
 6272               	; }doc
 6273               	
 6274 17b9 140D 1A0C 	  dw warning_,fetch_
 6275 17bd 6007 CB17 	  dw zero_branch_,message.number_only
 6276 17c1 6513 C10C 	  dw error_to_line_,msg_scr_,dot_line_,space_
 6276      AD17 260E 
 6277 17c9 C00A      	  dw semicolon_s_
 6278               	
 6279               	message.number_only:
 6280 17cb 4D10      	  dw paren_dot_quote_
 6281 17cd 064D 5347 	  _string "MSG # "
 6281      2023 20
 6282               	  ; XXX TODO force decimal base
 6283 17d4 051B      	  dw dot_
 6284 17d6 C00A      	  dw semicolon_s_
 6285               	
GAS LISTING solo_forth.for_as.z80s 			page 122


 6286               	
 6287               	; ----------------------------------------------
 6288 17d8 650C      	  _colon_header update_,"UPDATE"
 6289               	
 6290               	; doc{
 6291               	;
 6292               	; update  ( -- )  \ ANS-Forth
 6293               	;
 6294               	; Mark the most recently referenced block (pointed to by `prev`) as
 6295               	; altered. The block will subsequently be transferred automatically to
 6296               	; disk should its buffer be required for storage of a different block.
 6297               	;
 6298               	; }doc
 6299               	
 6300               	  ; XXX TODO move to the disk?
 6301               	
 6302 17da ED0C 1A0C 	  dw disk_buffer_,fetch_
 6303 17de 8D06 0080 	  dw lit_,0x8000,or_
 6303      5D0A 
 6304 17e4 ED0C 490C 	  dw disk_buffer_,store_
 6305 17e8 C00A      	  dw semicolon_s_
 6306               	
 6307               	; ----------------------------------------------
 6308 17ea 650C      	  _colon_header updated_question_,"UPDATED?"
 6309               	
 6310               	; doc{
 6311               	;
 6312               	; updated?  ( -- f )
 6313               	;
 6314               	; Is the current disk buffer marked as modified?
 6315               	;
 6316               	; }doc
 6317               	
 6318 17ec 1418 6D0B 	  dw buffer_id_,zero_less_than_
 6319 17f0 C00A      	  dw semicolon_s_
 6320               	
 6321               	; ----------------------------------------------
 6322 17f2 650C      	  _colon_header stream_end_,"STREAM-END"
 6323               	
 6324               	; doc{
 6325               	;
 6326               	; stream-end  ( ca -- )
 6327               	;
 6328               	; Store the null word (a null character) at the given address,
 6329               	; surrounded by spaces. This marks the end of a input stream.
 6330               	;
 6331               	; }doc
 6332               	
 6333 17f4 5F06      	  dw s_lit_
 6334 17f6 0320 0020 	  db 3,space_char,0,space_char ; string
 6335 17fa 1E0E FE09 	  dw rot_,smove_
 6336 17fe C00A      	  dw semicolon_s_
 6337               	
 6338               	; ----------------------------------------------
 6339 1800 650C      	  _colon_header empty_buffers_,"EMPTY-BUFFERS"
 6340               	
 6341               	; doc{
GAS LISTING solo_forth.for_as.z80s 			page 123


 6342               	;
 6343               	; empty-buffers  ( -- )
 6344               	; 
 6345               	; Unassign all block buffers. Do not transfer the contents of
 6346               	; any updated block to mass storage.
 6347               	;
 6348               	; }doc
 6349               	
 6350 1802 8D06 FF7F 	  dw lit_,buffer_block_id_mask,disk_buffer_,store_
 6350      ED0C 490C 
 6351 180a C00A      	  dw semicolon_s_
 6352               	
 6353               	; ----------------------------------------------
 6354 180c 650C      	  _colon_header buffer_data_,"BUFFER-DATA"
 6355               	
 6356               	; doc{
 6357               	;
 6358               	; buffer-data  ( -- a )
 6359               	; 
 6360               	; First data address of the disk buffer.
 6361               	;
 6362               	; }doc
 6363               	
 6364 180e ED0C 680D 	  dw disk_buffer_,cell_plus_
 6365 1812 C00A      	  dw semicolon_s_
 6366               	
 6367               	; ----------------------------------------------
 6368 1814 650C      	  _colon_header buffer_id_,"BUFFER-ID"
 6369               	
 6370               	; doc{
 6371               	;
 6372               	; buffer-id  ( -- x )
 6373               	; 
 6374               	; Id of the disk buffer.
 6375               	;
 6376               	; }doc
 6377               	
 6378 1816 ED0C 1A0C 	  dw disk_buffer_,fetch_
 6379 181a C00A      	  dw semicolon_s_
 6380               	
 6381               	; ----------------------------------------------
 6382 181c 650C      	  _colon_header block_number_,"BLOCK-NUMBER"
 6383               	
 6384               	; doc{
 6385               	;
 6386               	; block-number  ( x -- n )
 6387               	; 
 6388               	; Convert the disk buffer id _x_ to its associated block _n_,
 6389               	; by removing the update bit.
 6390               	;
 6391               	; }doc
 6392               	
 6393 181e 8D06 FF7F 	  _literal buffer_block_id_mask
 6394 1822 500A      	  dw and_
 6395 1824 C00A      	  dw semicolon_s_
 6396               	
 6397               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 124


 6398 1826 650C      	  _colon_header buffer_block_,"BUFFER-BLOCK"
 6399               	
 6400               	; doc{
 6401               	;
 6402               	; buffer-block  ( -- n )
 6403               	;
 6404               	; Block number associated with the disk buffer.
 6405               	;
 6406               	; }doc
 6407               	
 6408 1828 1418 1C18 	  dw buffer_id_,block_number_
 6409 182c C00A      	  dw semicolon_s_
 6410               	
 6411               	; ----------------------------------------------
 6412 182e 650C      	  _colon_header paren_buffer_,"(BUFFER)"
 6413               	
 6414               	; doc{
 6415               	;
 6416               	; (buffer)  ( n -- )
 6417               	;
 6418               	; If the contents of the disk buffer has been marked as updated,
 6419               	; write its block to the disk. Assign the block number _n_ to
 6420               	; the disk buffer.
 6421               	
 6422               	; ----
 6423               	; : (buffer)  ( n -- )
 6424               	;   updated?  if    block-number write-buffer
 6425               	;             else  drop
 6426               	;             then  disk-buffer !  ;
 6427               	; ----
 6428               	 
 6429               	; }doc
 6430               	
 6431 1830 EA17      	  dw updated_question_
 6432 1832 6007 3E18 	  dw zero_branch_,free_buffer.not_updated
 6433 1836 1C18 CF18 	  dw block_number_,write_buffer_
 6434 183a 5707 4018 	  dw branch_,free_buffer.end
 6435               	free_buffer.not_updated:
 6436 183e D40B      	  dw drop_
 6437               	free_buffer.end:
 6438 1840 ED0C 490C 	  dw disk_buffer_,store_
 6439 1844 C00A      	  dw semicolon_s_
 6440               	
 6441               	; ----------------------------------------------
 6442 1846 650C      	  _colon_header buffer_,"BUFFER"
 6443               	
 6444               	; doc{
 6445               	;
 6446               	; buffer  ( n -- a )
 6447               	;
 6448               	; Assign the block buffer to block _n_.   If the contents of the
 6449               	; buffer were marked as updated, it is written to the disk.  The
 6450               	; block _n_ is not read from the disk.  The address _a_ left on
 6451               	; stack is the first cell in the buffer for data storage.
 6452               	
 6453               	; ----
 6454               	; : buffer  ( n -- a )
GAS LISTING solo_forth.for_as.z80s 			page 125


 6455               	;   dup buffer-block =  if    drop
 6456               	;                       else  (buffer)
 6457               	;                       then  buffer-data  ;
 6458               	; ----
 6459               	
 6460               	; }doc
 6461               	
 6462 1848 E00B 2618 	  dw dup_,buffer_block_,equals_
 6462      E90D 
 6463 184e 6007 5818 	  dw zero_branch_,buffer.not_equals
 6464               	  ; The requested block is the one already in the buffer.
 6465 1852 D40B      	  dw drop_
 6466 1854 5707 5A18 	  dw branch_,buffer.end
 6467               	buffer.not_equals:
 6468 1858 2E18      	  dw paren_buffer_
 6469               	buffer.end:  
 6470 185a 0C18      	  dw buffer_data_ ; first cell of data in the buffer
 6471 185c C00A      	  dw semicolon_s_
 6472               	
 6473               	; ----------------------------------------------
 6474 185e 650C      	  _colon_header block_,"BLOCK"
 6475               	
 6476               	; doc{
 6477               	;
 6478               	; block  ( n -- a )
 6479               	
 6480               	; If the block _n_ is already in memory, leave the address _a_
 6481               	; of the first cell in the disk buffer for data storage.
 6482               	; 
 6483               	; If the block _n_ is not already in memory, transfer it from
 6484               	; disk to the buffer.  If the block occupying that buffer has
 6485               	; been marked as updated, rewrite it to disk before block _n_ is
 6486               	; read into the buffer.  Finally leave the address _a_ of the
 6487               	; first cell in the disk buffer for data storage.
 6488               	
 6489               	; ----
 6490               	; : block ( n --- a )
 6491               	;   dup buffer-block =
 6492               	;   if    drop
 6493               	;   else  save-buffers  dup read-buffer  disk-buffer !
 6494               	;   then  buffer-data  ;
 6495               	; ----
 6496               	
 6497               	; }doc
 6498               	
 6499 1860 E00B 2618 	  dw dup_,buffer_block_,equals_
 6499      E90D 
 6500 1866 6007 7018 	  dw zero_branch_,block.not_equals
 6501 186a D40B      	  dw drop_
 6502 186c 5707 7A18 	  dw branch_,block.end
 6503               	block.not_equals:
 6504 1870 F818 E00B 	  dw save_buffers_,dup_,read_buffer_
 6504      BC18 
 6505 1876 ED0C 490C 	  dw disk_buffer_,store_
 6506               	block.end:
 6507 187a 0C18      	  dw buffer_data_
 6508 187c C00A      	  dw semicolon_s_
GAS LISTING solo_forth.for_as.z80s 			page 126


 6509               	
 6510               	; ----------------------------------------------
 6511 187e 8018      	  _code_header flip_,"FLIP"
 6512               	
 6513               	; doc{
 6514               	;
 6515               	; flip  ( n1 -- n2 )
 6516               	;
 6517               	;   Exchange the low and high bytes within n1.
 6518               	;
 6519               	; }doc
 6520               	
 6521               	; [Name taken from eForth. It's called `><` or `cswap` in other
 6522               	; Forth systems.]
 6523               	
 6524 1880 E1        	  pop hl
 6525 1881 7C        	  ld a,h
 6526 1882 65        	  ld h,l
 6527 1883 6F        	  ld l,a
 6528 1884 C35E 05   	  jp push_hl
 6529               	
 6530               	; ----------------------------------------------
 6531 1887 650C      	  _colon_header block_to_sector_,"BLOCK>SECTOR"
 6532               	
 6533               	; doc{
 6534               	
 6535               	; block>sector  ( n1 -- n2 )
 6536               	
 6537               	; Convert the disk block _n1_ to the disk sector _n2_, in the
 6538               	; format required by G+DOS: The high byte of _n2_ is the track
 6539               	; (0..79 for side 0; 128..207 for side 1); the low byte of _n2_
 6540               	; is the sector (1..10).
 6541               	
 6542               	; ----
 6543               	; : block>sector  ( n1 -- n2 )
 6544               	;   \ n2 (high byte) = track 0..79 for side 0, 128..207 for side 1
 6545               	;   \    (low byte)  = sector 1..10
 6546               	;   \ track0 = 0..79
 6547               	;   \ track = 0..207
 6548               	;   \ side = 0..1
 6549               	;   dup 10 mod 1+    ( n1 sector )
 6550               	;   swap dup 20 /    ( sector n1 track0 )
 6551               	;   swap 10 / 1 and  ( sector track0 side )
 6552               	;   128              ( sector track 128 )
 6553               	;   \ * +          ( sector track ) \ XXX OLD for true=1
 6554               	;   negate and or    ( sector track )  \ XXX NEW a bit faster, for true=-1
 6555               	;   flip or  ;
 6556               	; ----
 6557               	;
 6558               	; }doc
 6559               	
 6560 1889 E00B      	  dw dup_
 6561 188b 8306 0A   	  _literal 10
 6562 188e 6117 570D 	  dw mod_,one_plus_,swap_,dup_
 6562      D90B E00B 
 6563 1896 8306 14   	  _literal 20
 6564 1899 5917 D90B 	  dw slash_,swap_
GAS LISTING solo_forth.for_as.z80s 			page 127


 6565 189d 8306 0A   	  _literal 10
 6566 18a0 5917 C90C 	  dw slash_,one_,and_
 6566      500A 
 6567               	
 6568               	.if true==1 ; XXX OLD
 6569               	  ; XXX TODO optimize with `7 lshift`?
 6570 18a6 8306 80   	  _literal 128
 6571 18a9 4517 810B 	  dw star_,plus_
 6572               	.else
 6573               	  dw negate_
 6574               	  _literal 128
 6575               	  dw and_,or_
 6576               	.endif
 6577               	  
 6578 18ad 7E18 5D0A 	  dw flip_,or_
 6579 18b1 C00A      	  dw semicolon_s_
 6580               	
 6581               	; ----------------------------------------------
 6582 18b3 650C      	  _colon_header read_block_,"READ-BLOCK"
 6583               	
 6584               	; doc{
 6585               	;
 6586               	; read-block  ( a n -- )
 6587               	;
 6588               	; Read disk block _n_ to buffer _a_.
 6589               	;
 6590               	; }doc
 6591               	
 6592 18b5 8306 44   	  _literal 0x44 ; G+DOS command to read a disk sector
 6593 18b8 D918      	  dw transfer_block_
 6594 18ba C00A      	  dw semicolon_s_
 6595               	
 6596               	; ----------------------------------------------
 6597 18bc 650C      	  _colon_header read_buffer_,"READ-BUFFER"
 6598               	
 6599               	; doc{
 6600               	;
 6601               	; read-buffer  ( n -- )
 6602               	;
 6603               	; Read disk block _n_ to the disk buffer.
 6604               	;
 6605               	; }doc
 6606               	
 6607 18be 0C18 D90B 	  dw buffer_data_,swap_,read_block_
 6607      B318 
 6608 18c4 C00A      	  dw semicolon_s_
 6609               	
 6610               	; ----------------------------------------------
 6611 18c6 650C      	  _colon_header write_block_,"WRITE-BLOCK"
 6612               	
 6613               	; doc{
 6614               	;
 6615               	; write-block  ( a n -- )
 6616               	;
 6617               	; Write buffer _a_ to disk block _n_.
 6618               	;
 6619               	; }doc
GAS LISTING solo_forth.for_as.z80s 			page 128


 6620               	
 6621 18c8 8306 45   	  _literal 0x45 ; G+DOS command to write a disk sector
 6622 18cb D918      	  dw transfer_block_
 6623 18cd C00A      	  dw semicolon_s_
 6624               	
 6625               	; ----------------------------------------------
 6626 18cf 650C      	  _colon_header write_buffer_,"WRITE-BUFFER"
 6627               	
 6628               	; doc{
 6629               	;
 6630               	; write-buffer  ( n -- )
 6631               	;
 6632               	; Write the disk buffer to disk block _n_.
 6633               	;
 6634               	; }doc
 6635               	
 6636 18d1 0C18 D90B 	  dw buffer_data_,swap_,write_block_
 6636      C618 
 6637 18d7 C00A      	  dw semicolon_s_
 6638               	
 6639               	; ----------------------------------------------
 6640 18d9 650C      	  _colon_header transfer_block_,"TRANSFER-BLOCK"
 6641               	
 6642               	; doc{
 6643               	;
 6644               	; transfer-block  ( a n b -- )
 6645               	;
 6646               	; The disk read-write linkage.
 6647               	;
 6648               	; a = source or destination block buffer
 6649               	; n = sequential number of the referenced disk block
 6650               	; b = G+DOS command to read or write a sector
 6651               	;
 6652               	; }doc
 6653               	
 6654 18db 8D06 F018 	  dw lit_,read_write_sector_command,c_store_
 6654      520C 
 6655 18e1 8718      	  dw block_to_sector_
 6656 18e3 E718      	  dw paren_transfer_block_
 6657 18e5 C00A      	  dw semicolon_s_
 6658               	
 6659               	paren_transfer_block_:
 6660               	  ; Headerless word with the low level code of `R/W`.
 6661 18e7 E918      	  dw paren_transfer_block_pfa ; code field
 6662               	  
 6663               	  ; ( a sector -- )
 6664               	  ; sector (high byte) = track 0..79, +128 if side 1
 6665               	  ;        (low byte)   = sector 1..10
 6666               	paren_transfer_block_pfa:
 6667 18e9 D1        	  pop de ; d = track 0..79, +128 if side 1
 6668               	         ; e = sector 1..10
 6669 18ea DDE1      	  pop ix ; address
 6670 18ec C5        	  push bc ; save the Forth IP
 6671 18ed 3E02      	  ld a,2 ; drive ; XXX TMP
 6672 18ef CF        	  rst 8 ; G+DOS hook
 6673               	read_write_sector_command:
 6674               	  ; G+DOS command already patched:
GAS LISTING solo_forth.for_as.z80s 			page 129


 6675 18f0 44        	  db 0x44 ; 0x44 = read ; 0x45 = write
 6676 18f1 C1        	  pop bc ; restore the Forth IP
 6677 18f2 DD21 5F05 	  ld ix,next
 6678 18f6 DDE9      	  _jp_next
 6679               	
 6680               	; ----------------------------------------------
 6681 18f8 650C      	  _colon_header save_buffers_,"SAVE-BUFFERS"
 6682               	
 6683               	; doc{
 6684               	;
 6685               	; save-buffers  ( -- )  \ ANS Forth
 6686               	;
 6687               	; If the disk buffer has been modified, transfer its contents to
 6688               	; disk and mark it as unmodified.
 6689               	;
 6690               	; ----
 6691               	; : save-buffers ( -- )
 6692               	;   updated? 0= ?exit \ exit if not updated
 6693               	;   buffer-block dup write-buffer  disk-buffer !  ;
 6694               	; ----
 6695               	;
 6696               	; }doc
 6697               	
 6698 18fa EA17 570B 	  dw updated_question_,zero_equals_ ; not updated?
 6699 18fe 381D      	  dw question_exit_ ; exit if not updated
 6700               	  ; Updated
 6701 1900 2618 E00B 	  dw buffer_block_,dup_,write_buffer_
 6701      CF18 
 6702 1906 ED0C 490C 	  dw disk_buffer_,store_
 6703 190a C00A      	  dw semicolon_s_
 6704               	
 6705               	; ----------------------------------------------
 6706 190c 650C      	  _colon_header flush_,"FLUSH"
 6707               	
 6708               	  ; XXX TODO -- move to the disk?
 6709               	
 6710 190e F818 0018 	  dw save_buffers_,empty_buffers_
 6711 1912 C00A      	  dw semicolon_s_
 6712               	
 6713               	; ----------------------------------------------
 6714 1914 650C      	  _colon_header paren_load_,"(LOAD)"
 6715               	
 6716               	; doc{
 6717               	;
 6718               	; (load)  ( i*x u -- j*x )
 6719               	;
 6720               	; Store _u_ in `blk` (thus making block _u_ the input source and
 6721               	; setting the input buffer to encompass its contents), set `>in`
 6722               	; to zero, and interpret.  Other stack effects are due to the
 6723               	; words loaded.
 6724               	;
 6725               	; An error is issued if _u_ is zero.
 6726               	;
 6727               	; ----
 6728               	; : (load)  ( i*x u -- j*x )
 6729               	;   dup 0= 9 ?error
 6730               	;   b/scr * blk !  >in off  interpret  ;
GAS LISTING solo_forth.for_as.z80s 			page 130


 6731               	; ----
 6732               	;
 6733               	; }doc
 6734               	
 6735 1916 E00B 570B 	  dw dup_,zero_equals_
 6736 191a 8306 090D 	  _question_error error.loading_from_screen_0
 6736      0F
 6737 191f F50C 4517 	  dw b_slash_scr_,star_,blk_,store_
 6737      1E0D 490C 
 6738 1927 210D FD0B 	  dw to_in_,off_,interpret_
 6738      1C15 
 6739 192d C00A      	  dw semicolon_s_
 6740               	
 6741               	; ----------------------------------------------
 6742 192f 650C      	  _colon_header continued_,"CONTINUED"
 6743               	
 6744               	; doc{
 6745               	;
 6746               	; continued  ( i*x u -- j*x )  \ Forth-79 (uncontrolled word
 6747               	; definition from the Reference Word Set)
 6748               	;
 6749               	; Store _u_ in `blk` (thus making block _u_ the input source and
 6750               	; setting the input buffer to encompass its contents), set `>in`
 6751               	; to zero, and interpret.  Other stack effects are due to the
 6752               	; words loaded.
 6753               	;
 6754               	; ----
 6755               	; : continued  ( -- )
 6756               	;   ?loading (load)  ;
 6757               	; ----
 6758               	;
 6759               	; }doc
 6760               	
 6761 1931 590F 1419 	  dw question_loading_,paren_load_
 6762 1935 C00A      	  dw semicolon_s_
 6763               	
 6764               	; ----------------------------------------------
 6765 1937 650C      	  _colon_header load_,"LOAD"
 6766               	
 6767               	; doc{
 6768               	;
 6769               	; load  ( u -- )
 6770               	;
 6771               	; Save the current input-source specification. Store _u_ in
 6772               	; `blk` (thus making block _u_ the input source and setting the
 6773               	; input buffer to encompass its contents), set `>in` to zero,
 6774               	; and interpret. When the parse area is exhausted, restore the
 6775               	; prior input source specification. Other stack effects are due
 6776               	; to the words loaded.
 6777               	;
 6778               	; An error is issued if _u_ is zero.
 6779               	;
 6780               	; ----
 6781               	; : load  ( n -- )
 6782               	;   blk @ >r  >in @ >r
 6783               	;   (load)
 6784               	;   r> >in !  r> blk !  ;
GAS LISTING solo_forth.for_as.z80s 			page 131


 6785               	; ----
 6786               	;
 6787               	; }doc
 6788               	
 6789 1939 1E0D 1A0C 	  dw blk_,fetch_,to_r_
 6789      F00A 
 6790 193f 210D 1A0C 	  dw to_in_,fetch_,to_r_
 6790      F00A 
 6791 1945 1419      	  dw paren_load_
 6792 1947 FF0A 210D 	  dw from_r_,to_in_,store_
 6792      490C 
 6793 194d FF0A 1E0D 	  dw from_r_,blk_,store_
 6793      490C 
 6794 1953 C00A      	  dw semicolon_s_
 6795               	
 6796               	; ----------------------------------------------
 6797 1955 650C      	  _colon_header next_screen_,"-->",immediate
 6798               	
 6799               	; doc{
 6800               	;
 6801               	; -->  ( -- )  \ "next-screen"
 6802               	;
 6803               	; Continue interpretation with the next disk screen.
 6804               	;
 6805               	; ----
 6806               	; : -->  ( -- )
 6807               	;   ?loading  >in off
 6808               	;   b/scr blk @ over mod - blk +!  ; immediate
 6809               	; ----
 6810               	;
 6811               	; }doc
 6812               	
 6813 1957 590F      	  dw question_loading_
 6814 1959 210D FD0B 	  dw to_in_,off_
 6815 195d F50C 1E0D 	  dw b_slash_scr_,blk_,fetch_,over_,mod_,minus_
 6815      1A0C CC0B 
 6815      6117 D20D 
 6816 1969 1E0D F00B 	  dw blk_,plus_store_
 6817 196d C00A      	  dw semicolon_s_
 6818               	
 6819               	; ----------------------------------------------
 6820 196f 650C      	  _colon_header defined_,"DEFINED"
 6821               	
 6822               	; doc{
 6823               	;
 6824               	; defined  ( "name" -- ca 0 | cfa 1 | cfa -1 )
 6825               	;
 6826               	; }doc
 6827               	
 6828               	  ; XXX TODO -- adapt to the new parsing method
 6829               	
 6830               	.if 1 ; XXX OLD
 6831               	
 6832 1971 E10C D511 	  dw b_l_,word_ ; ( ca2 )
 6833               	
 6834               	.else ; XXX NEW
 6835               	
GAS LISTING solo_forth.for_as.z80s 			page 132


 6836               	  dw parse_name_  ; ( ca1 len1 )
 6837               	  ;dw cr_,dot_s_,lit_,1,border_,key_,drop_ ; XXX INFORMER
 6838               	  dw save_counted_string_ ; ( ca2 )
 6839               	  ;dw cr_,dot_s_,lit_,2,border_,key_,drop_ ; XXX INFORMER
 6840               	
 6841               	.endif
 6842               	
 6843 1975 E00B 0710 	  dw dup_,count_,uppers_  ; uppercase ( ca2 )
 6843      B412 
 6844               	  ;dw cr_,dot_s_,lit_,3,border_,key_,drop_ ; XXX INFORMER
 6845 197b EB12      	  dw find_
 6846               	  ;dw cr_,dot_s_,lit_,4,border_,key_,drop_ ; XXX INFORMER
 6847               	
 6848 197d C00A      	  dw semicolon_s_
 6849               	
 6850               	; ----------------------------------------------
 6851 197f 650C      	  _colon_header question_defined_,"?DEFINED"
 6852               	
 6853               	; doc{
 6854               	;
 6855               	; ?defined  ( f -- )
 6856               	;
 6857               	; }doc
 6858               	
 6859               	  ; [Code from DZX-Forth.]
 6860               	
 6861 1981 570B      	  dw zero_equals_
 6862 1983 8306 050D 	  _question_error error.not_found
 6862      0F
 6863 1988 C00A      	  dw semicolon_s_
 6864               	
 6865               	; ----------------------------------------------
 6866 198a 650C      	  _colon_header bracket_defined_,"[DEFINED]",immediate
 6867               	
 6868               	; doc{
 6869               	;
 6870               	; [defined]  ( "name" -- wf )
 6871               	;
 6872               	; }doc
 6873               	
 6874 198c 6F19 BD0B 	  dw defined_,nip_
 6875 1990 C00A      	  dw semicolon_s_
 6876               	
 6877               	; ----------------------------------------------
 6878 1992 650C      	  _colon_header bracket_undefined_,"[UNDEFINED]",immediate
 6879               	
 6880               	; doc{
 6881               	;
 6882               	; [undefined]  ( "name" -- wf )
 6883               	;
 6884               	; }doc
 6885               	
 6886 1994 8A19 570B 	  dw bracket_defined_,zero_equals_
 6887 1998 C00A      	  dw semicolon_s_
 6888               	
 6889               	; ----------------------------------------------
 6890 199a 650C      	  _colon_header tick_,"'"
GAS LISTING solo_forth.for_as.z80s 			page 133


 6891               	
 6892               	; doc{
 6893               	;
 6894               	; '  ( "name" -- cfa )
 6895               	;
 6896               	; }doc
 6897               	
 6898 199c 6F19 7F19 	  dw defined_,question_defined_
 6899 19a0 C00A      	  dw semicolon_s_
 6900               	
 6901               	; ----------------------------------------------
 6902 19a2 650C      	  _colon_header bracket_tick_,"[']",immediate
 6903               	
 6904               	; doc{
 6905               	;
 6906               	; [']  ( "name" -- cfa )
 6907               	;
 6908               	; }doc
 6909               	
 6910 19a4 9A19 CB14 	  dw tick_,literal_
 6911 19a8 C00A      	  dw semicolon_s_
 6912               	
 6913               	; ----------------------------------------------
 6914 19aa 650C      	  _colon_header begin_,"BEGIN",immediate
 6915               	
 6916               	; doc{
 6917               	;
 6918               	; begin  ( compilation: -- a n )
 6919               	;
 6920               	; At compile time `begin` leaves the dictionary address on
 6921               	; stack with an error checking number _n_.  It does not compile
 6922               	; anything to the dictionary.
 6923               	;
 6924               	; }doc
 6925               	
 6926 19ac 250F      	  dw question_comp_ ; error if not compiling
 6927 19ae 4707      	  dw backward_mark_ ; address to compute the backward branch
 6928               	.if 1 ; fig_compiler_security
 6929 19b0 C90C      	  dw one_ ; error checking number
 6930               	.endif
 6931 19b2 C00A      	  dw semicolon_s_
 6932               	
 6933               	; ----------------------------------------------
 6934 19b4 650C      	  _colon_header then_,"THEN",immediate
 6935               	
 6936 19b6 250F      	  dw question_comp_ ; error if not compiling
 6937               	.if 1 ; fig_compiler_security
 6938 19b8 CD0C 3D0F 	  dw two_,question_pairs_ ; check for nesting error
 6939               	.endif
 6940 19bc 3B07      	  dw forward_resolve_
 6941 19be C00A      	  dw semicolon_s_
 6942               	
 6943               	; ----------------------------------------------
 6944               	  ; _colon_header question_do_,"?DO",immediate
 6945               	
 6946               	  ; XXX TODO
 6947               	
GAS LISTING solo_forth.for_as.z80s 			page 134


 6948               	  ; dw compile_,paren_question_do_
 6949               	  ; dw branch_,do.common
 6950               	
 6951               	; ----------------------------------------------
 6952 19c0 650C      	  _colon_header do_,"DO",immediate
 6953               	
 6954 19c2 680F AD07 	  dw compile_,paren_do_
 6955               	do.common:
 6956 19c6 4707      	  dw backward_mark_
 6957               	.if 1 ; fig_compiler_security
 6958 19c8 8306 03   	  _literal 3 ; error checking number
 6959               	.endif
 6960 19cb C00A      	  dw semicolon_s_
 6961               	
 6962               	; ----------------------------------------------
 6963 19cd 650C      	  _colon_header loop_,"LOOP",immediate
 6964               	
 6965               	.if 1 ; fig_compiler_security
 6966 19cf 8306 03   	  _literal 3 ; error checking number
 6967 19d2 3D0F      	  dw question_pairs_
 6968               	.endif
 6969 19d4 680F 7807 	  dw compile_,paren_loop_
 6970 19d8 4F07      	  dw backward_resolve_
 6971 19da C00A      	  dw semicolon_s_
 6972               	
 6973               	; ----------------------------------------------
 6974 19dc 650C      	  _colon_header plus_loop_,"+LOOP",immediate
 6975               	
 6976               	.if 1 ; fig_compiler_security
 6977 19de 8306 03   	  _literal 3 ; error checking number
 6978 19e1 3D0F      	  dw question_pairs_
 6979               	.endif
 6980 19e3 680F A707 	  dw compile_,paren_plus_loop_
 6981 19e7 4F07      	  dw backward_resolve_
 6982 19e9 C00A      	  dw semicolon_s_
 6983               	
 6984               	; ----------------------------------------------
 6985 19eb 650C      	  _colon_header until_,"UNTIL",immediate
 6986               	
 6987               	.if 1 ; fig_compiler_security
 6988 19ed C90C 3D0F 	  dw one_,question_pairs_
 6989               	.endif
 6990 19f1 680F 6007 	  dw compile_,zero_branch_
 6991 19f5 4F07      	  dw backward_resolve_
 6992 19f7 C00A      	  dw semicolon_s_
 6993               	
 6994               	; ----------------------------------------------
 6995 19f9 650C      	  _colon_header again_,"AGAIN",immediate
 6996               	
 6997               	; doc{
 6998               	;
 6999               	; again  ( compilation: a n -- )
 7000               	;
 7001               	; End of an infinite loop.  Compile an unconditional jump
 7002               	; instruction to branch backward to _a_.
 7003               	;
 7004               	; }doc
GAS LISTING solo_forth.for_as.z80s 			page 135


 7005               	
 7006               	.if 1 ; fig_compiler_security
 7007 19fb C90C 3D0F 	  dw one_,question_pairs_ ; check n for error
 7008               	.endif
 7009 19ff 680F 5707 	  dw compile_,branch_
 7010 1a03 4F07      	  dw backward_resolve_
 7011 1a05 C00A      	  dw semicolon_s_
 7012               	
 7013               	; ----------------------------------------------
 7014 1a07 650C      	  _colon_header repeat_,"REPEAT",immediate
 7015               	
 7016               	; doc{
 7017               	;
 7018               	; repeat  ( compilation: a1 n1 a2 n2 -- )
 7019               	;
 7020               	; a1 = address of `begin` to branch to
 7021               	; n1 = `begin` check number
 7022               	; a2 = address of the branch of `while` to resolve
 7023               	; n2 = `while` check number
 7024               	;
 7025               	; Compile `branch` to jump back to `begin`.  Resolve also  the
 7026               	; branching offset required by `while`.
 7027               	;
 7028               	; }doc
 7029               	
 7030 1a09 280B      	  dw two_to_r_
 7031 1a0b F919      	  dw again_ ; unconditional branch back to `begin`
 7032 1a0d 370B      	  dw two_from_r_
 7033               	  ; dw two_minus_ ; restore 2 to be checked by `then` ; XXX OLD -- unnecessary
 7034               	  ; XXX TODO why unncessary?
 7035 1a0f B419      	  dw then_ ; resolve the forward branching needed by `while`
 7036 1a11 C00A      	  dw semicolon_s_
 7037               	
 7038               	; ----------------------------------------------
 7039 1a13 650C      	  _colon_header if_,"IF",immediate
 7040               	
 7041 1a15 680F 6007 	  dw compile_,zero_branch_
 7042               	if.do:
 7043 1a19 2F07      	  dw forward_mark_
 7044               	.if 1 ; fig_compiler_security
 7045 1a1b CD0C      	  dw two_ ; error checking number
 7046               	.endif
 7047 1a1d C00A      	  dw semicolon_s_
 7048               	
 7049               	; ----------------------------------------------
 7050 1a1f 650C      	  _colon_header unless_,"UNLESS",immediate
 7051               	
 7052               	  ; Equivalent to `0= if`, but faster.
 7053               	
 7054 1a21 680F 6C07 	  dw compile_,question_branch_
 7055 1a25 5707 191A 	  dw branch_,if.do
 7056               	
 7057               	  ; XXX TODO move to the disk:
 7058               	
 7059               	; : unless  ( f -- )  postpone ?branch >mark 2  ; immediate
 7060               	; \ Alternative: when compiler security is removed:
 7061               	; : unless  ( f -- )  postpone ?branch >mark  ; immediate
GAS LISTING solo_forth.for_as.z80s 			page 136


 7062               	
 7063               	; ----------------------------------------------
 7064 1a29 650C      	  _colon_header ahead_,"AHEAD",immediate
 7065               	
 7066 1a2b 680F 5707 	  dw compile_,branch_
 7067 1a2f 2F07      	  dw forward_mark_
 7068               	
 7069               	; ----------------------------------------------
 7070 1a31 650C      	  _colon_header else_,"ELSE",immediate
 7071               	
 7072               	  ; XXX FIXME Pasmo bug?
 7073               	  ; The system crashes when conditional compilation
 7074               	  ; is used here, in any combination. Very strange.
 7075               	
 7076               	.if 1 ; fig_compiler_security
 7077               	
 7078 1a33 CD0C      	  dw two_ ; error checking number
 7079 1a35 3D0F      	  dw question_pairs_
 7080 1a37 680F 5707 	  dw compile_,branch_
 7081 1a3b 2F07      	  dw forward_mark_
 7082 1a3d D90B      	  dw swap_
 7083 1a3f CD0C      	  dw two_ ; error checking number
 7084 1a41 B419      	  dw then_
 7085 1a43 CD0C      	  dw two_ ; error checking number
 7086 1a45 C00A      	  dw semicolon_s_
 7087               	
 7088               	.else
 7089               	
 7090               	  dw compile_,branch_
 7091               	  dw forward_mark_
 7092               	  dw then_
 7093               	  dw semicolon_s_
 7094               	
 7095               	.endif
 7096               	
 7097               	; ----------------------------------------------
 7098 1a47 650C      	  _colon_header while_,"WHILE",immediate
 7099               	
 7100 1a49 131A      	  dw if_
 7101               	  ; dw two_plus_ ; leave 4 to be checked by `repeat` ; XXX OLD -- unnecessary
 7102               	  ; XXX TODO 2015-08-13: why unnecessary? why fig-Forth does not use `swap`?
 7103 1a4b C00A      	  dw semicolon_s_
 7104               	
 7105               	; ----------------------------------------------
 7106 1a4d 650C      	  _colon_header spaces_,"SPACES"
 7107               	
 7108 1a4f E10C 551A 	  dw b_l_,emits_
 7109 1a53 C00A      	  dw semicolon_s_
 7110               	
 7111               	; ----------------------------------------------
 7112 1a55 650C      	  _colon_header emits_,"EMITS"
 7113               	
 7114               	  ; emits  ( u c -- )
 7115               	
 7116               	  ; XXX TODO use `?do` or `for` when available
 7117 1a57 D90B C50C 	  dw swap_,zero_,max_,question_dup_
 7117      FE16 2E0E 
GAS LISTING solo_forth.for_as.z80s 			page 137


 7118 1a5f 6007 6F1A 	  dw zero_branch_,emits_.end
 7119 1a63 C50C      	  dw zero_
 7120 1a65 AD07      	  dw paren_do_
 7121               	emits_.do:
 7122 1a67 E00B EC08 	  dw dup_,emit_
 7123 1a6b 7807 671A 	  dw paren_loop_,emits_.do
 7124               	emits_.end:
 7125 1a6f D40B      	  dw drop_
 7126 1a71 C00A      	  dw semicolon_s_
 7127               	
 7128               	; ----------------------------------------------
 7129 1a73 650C      	  _colon_header less_hash_,"<#"
 7130               	
 7131 1a75 7611      	  dw pad_
 7132 1a77 420D      	  dw hld_
 7133 1a79 490C      	  dw store_
 7134 1a7b C00A      	  dw semicolon_s_
 7135               	
 7136               	; ----------------------------------------------
 7137 1a7d 650C      	  _colon_header hash_greater_,"#>"
 7138               	
 7139 1a7f D40B      	  dw drop_
 7140 1a81 D40B      	  dw drop_
 7141 1a83 420D 1A0C 	  dw hld_,fetch_
 7142 1a87 7611      	  dw pad_
 7143 1a89 CC0B      	  dw over_
 7144 1a8b D20D      	  dw minus_
 7145 1a8d C00A      	  dw semicolon_s_
 7146               	
 7147               	; ----------------------------------------------
 7148 1a8f 650C      	  _colon_header sign_,"SIGN"
 7149               	
 7150               	; doc{
 7151               	
 7152               	; sign  ( n  d  ---  d ) \ fig-Forth
 7153               	
 7154               	; Stores an ascii "-" sign just before a converted numeric
 7155               	; output string in the text output buffer when _n_ is negative.
 7156               	; _n_ is discarded but double number _d_ is maintained. Must be
 7157               	; used between `<#` and `#>`.
 7158               	
 7159               	; }doc
 7160               	
 7161               	  ; XXX TODO convert to ANS Forth
 7162               	
 7163 1a91 1E0E 6D0B 	  dw rot_,zero_less_than_
 7164 1a95 6007 9E1A 	  dw zero_branch_,sign.end
 7165 1a99 8306 2D   	  _literal '-'
 7166 1a9c 6411      	  dw hold_
 7167               	sign.end:
 7168 1a9e C00A      	  dw semicolon_s_
 7169               	
 7170               	; ----------------------------------------------
 7171 1aa0 650C      	  _colon_header hash_,"#"
 7172               	
 7173               	; doc{
 7174               	;
GAS LISTING solo_forth.for_as.z80s 			page 138


 7175               	; #  ( d1 -- d2 )
 7176               	;
 7177               	; Divide _d1_ by current base.  The remainder is converted to
 7178               	; an ASCII character and appended to the output text string.
 7179               	; The quotient _d2_ is left on stack.
 7180               	;
 7181               	; }doc
 7182               	
 7183               	
 7184 1aa2 330D 1A0C 	  dw base_,fetch_
 7185 1aa6 7D17      	  dw m_slash_mod_ ;  ( remainder dquotient )
 7186 1aa8 1E0E      	  dw rot_ ; ( dquotient remainder )
 7187 1aaa 8306 09   	  _literal 0x09
 7188 1aad CC0B F60D 	  dw over_,less_than_ ; remainder<9?
 7189 1ab1 6007 BA1A 	  dw zero_branch_,hash.digit
 7190               	  ; remainder<9
 7191 1ab5 8306 07   	  _literal 0x07
 7192 1ab8 810B      	  dw plus_ ; make it an alphabet
 7193               	hash.digit:
 7194               	  ; Form the ASCII representation of a digit:
 7195               	  ; "0" to "9" and "A" to "F" (or above).
 7196 1aba 8306 30   	  _literal '0'
 7197 1abd 810B      	  dw plus_
 7198 1abf 6411      	  dw hold_ ; put the digit into `pad` in a reversed order.
 7199 1ac1 C00A      	  dw semicolon_s_
 7200               	
 7201               	; ----------------------------------------------
 7202 1ac3 650C      	  _colon_header hash_s_,"#S"
 7203               	
 7204               	; doc{
 7205               	;
 7206               	; #S  ( d1 -- d2 )
 7207               	;
 7208               	; }doc
 7209               	
 7210               	hash_s.begin:
 7211 1ac5 A01A E70B 	  dw hash_,two_dup_,or_
 7211      5D0A 
 7212 1acb 6C07 C51A 	  dw question_branch_,hash_s.begin
 7213 1acf C00A      	  dw semicolon_s_
 7214               	
 7215               	; ----------------------------------------------
 7216 1ad1 650C      	  _colon_header d_dot_r_,"D.R"
 7217               	
 7218               	; doc{
 7219               	;
 7220               	; d.r  ( d n -- )
 7221               	;
 7222               	; Print a signed double number _d_ right justified in a field of
 7223               	; _n_ characters.
 7224               	;
 7225               	; }doc
 7226               	
 7227 1ad3 F00A      	  dw to_r_ ; save n
 7228               	  ; Save the high order part of d under d,
 7229               	  ; to be used by `sign` to add a "-" sign to a negative number:
 7230 1ad5 D90B CC0B 	  dw swap_,over_
GAS LISTING solo_forth.for_as.z80s 			page 139


 7231 1ad9 D816      	  dw dabs_ ; convert d to its absolute value
 7232               	  ; Convert the absolute value to ASCII text with proper sign:
 7233 1adb 731A      	  dw less_hash_
 7234 1add C31A      	  dw hash_s_
 7235 1adf 8F1A      	  dw sign_
 7236 1ae1 7D1A      	  dw hash_greater_
 7237 1ae3 FF0A      	  dw from_r_ ; retrieve n
 7238 1ae5 CC0B D20D 	  dw over_,minus_,spaces_ ; fill the output field with preceding blanks
 7238      4D1A 
 7239 1aeb 1A10      	  dw type_ ; type out the number
 7240 1aed C00A      	  dw semicolon_s_
 7241               	
 7242               	; ----------------------------------------------
 7243 1aef 650C      	  _colon_header dot_r_,".R"
 7244               	
 7245 1af1 F00A A916 	  dw to_r_,s_to_d_,from_r_,d_dot_r_
 7245      FF0A D11A 
 7246 1af9 C00A      	  dw semicolon_s_
 7247               	
 7248               	; ----------------------------------------------
 7249 1afb 650C      	  _colon_header d_dot_,"D."
 7250               	
 7251               	; doc{
 7252               	;
 7253               	; d.  ( d -- )
 7254               	;
 7255               	; Print signed double integer _d_ according to current base,
 7256               	; followed by only one blank.
 7257               	;
 7258               	; }doc
 7259               	
 7260 1afd C50C D11A 	  dw zero_,d_dot_r_,space_
 7260      260E 
 7261 1b03 C00A      	  dw semicolon_s_
 7262               	
 7263               	; ----------------------------------------------
 7264 1b05 650C      	  _colon_header dot_,"."
 7265               	
 7266               	; doc{
 7267               	;
 7268               	; .  ( n -- )
 7269               	;
 7270               	; Print signed integer _n_ according to current base, followed
 7271               	; by only one blank.
 7272               	;
 7273               	; }doc
 7274               	
 7275 1b07 A916 FB1A 	  dw s_to_d_,d_dot_
 7276 1b0b C00A      	  dw semicolon_s_
 7277               	
 7278               	; ----------------------------------------------
 7279 1b0d 650C      	  _colon_header question_,"?"
 7280               	
 7281 1b0f 1A0C 051B 	  dw fetch_,dot_
 7282 1b13 C00A      	  dw semicolon_s_
 7283               	
 7284               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 140


 7285 1b15 650C      	  _colon_header u_dot_,"U."
 7286               	
 7287 1b17 C50C FB1A 	  dw zero_,d_dot_
 7288 1b1b C00A      	  dw semicolon_s_
 7289               	
 7290               	; ----------------------------------------------
 7291               	
 7292               	.if 1
 7293               	
 7294 1b1d 650C      	  _colon_header dot_s_,".S"
 7295               	
 7296               	  ; XXX TMP -- only during the development, then remove
 7297               	  ; It is already on the disk.
 7298               	
 7299 1b1f EB14 E00B 	  dw depth_,dup_,s_to_d_,less_hash_
 7299      A916 731A 
 7300 1b27 8306 3E   	  _literal '>'
 7301 1b2a 6411 C31A 	  dw hold_,hash_s_
 7302 1b2e 8306 3C   	  _literal '<'
 7303 1b31 6411 7D1A 	  dw hold_,hash_greater_,type_,space_
 7303      1A10 260E 
 7304 1b39 6007 571B 	  dw zero_branch_,dot_s.end
 7305               	
 7306 1b3d 9D0A 710D 	  dw sp_fetch_,two_minus_,sp0_,fetch_,two_minus_
 7306      0B0D 1A0C 
 7306      710D 
 7307 1b47 AD07      	  dw paren_do_
 7308               	dot_s.do:
 7309 1b49 4408 1A0C 	  dw i_,fetch_,u_dot_ ; XXX TMP `u.`
 7309      151B 
 7310 1b4f 8D06 FEFF 	  dw lit_,-2
 7311 1b53 A707 491B 	  dw paren_plus_loop_,dot_s.do
 7312               	dot_s.end:
 7313 1b57 C00A      	  dw semicolon_s_
 7314               	
 7315               	.endif
 7316               	
 7317               	; ----------------------------------------------
 7318 1b59 5B1B      	  _code_header colors0_,"COLORS0"
 7319               	
 7320               	; doc{
 7321               	;
 7322               	; colors0  ( -- )
 7323               	; 
 7324               	; Set the screen colors to the default values.
 7325               	;
 7326               	; }doc
 7327               	
 7328               	  ; Set the colors and their masks.
 7329               	
 7330 1b5b 2A12 00   	  ld hl,(default_color_attribute)
 7331               	  ; l = 128*flash + 64*bright + 8*paper + ink
 7332               	  ; h = mask
 7333 1b5e 228D 5C   	  ld (sys_attr_p),hl ; permanent
 7334 1b61 228F 5C   	  ld (sys_attr_t),hl ; temporary
 7335               	
 7336               	  ; Set the system variable that holds the attributes of the
GAS LISTING solo_forth.for_as.z80s 			page 141


 7337               	  ; lower part of the screen.  It is needed only because G+DOS
 7338               	  ; by default changes the border color during disk operations,
 7339               	  ; and at the end restores it with the value of this system
 7340               	  ; variable.
 7341               	
 7342 1b64 7D        	  ld a,l
 7343 1b65 3248 5C   	  ld (sys_bordcr),a ; lower screen colors
 7344               	
 7345               	  ; Set the border color to the paper color.
 7346               	
 7347               	  ; a = 128*flash + 64*bright + 8*paper + ink
 7348 1b68 A7        	  and a ; cy=0
 7349 1b69 1F        	  rra
 7350 1b6a 1F        	  rra
 7351 1b6b 1F        	  rra ; a = paper
 7352 1b6c D3FE      	  out (border_port),a ; set the border color
 7353               	
 7354 1b6e DDE9      	  _jp_next
 7355               	
 7356               	; ----------------------------------------------
 7357 1b70 721B      	  _code_header home_,"HOME"
 7358               	
 7359               	; doc{
 7360               	;
 7361               	; home  ( -- )
 7362               	;
 7363               	; Reset the cursor position to the upper left corner (column 0,
 7364               	; row 0).
 7365               	;
 7366               	; }doc
 7367               	
 7368 1b72 2121 18   	  ld hl,0x1821 ; 0x18 = 24 - row
 7369               	               ; 0x21 = 33 - column
 7370 1b75 2288 5C   	  ld (sys_s_posn),hl
 7371 1b78 DDE9      	  _jp_next
 7372               	
 7373               	; ----------------------------------------------
 7374 1b7a 7C1B      	  _code_header cls_,"CLS"
 7375               	
 7376               	
 7377               	; doc{
 7378               	;
 7379               	; cls  ( -- )
 7380               	;
 7381               	; Clear the screen with the current colors and reset the cursor
 7382               	; position to the upper left corner (column 0, row 0).
 7383               	;
 7384               	; }doc
 7385               	
 7386               	; Note: The ROM routines that clear the screen are slow and do
 7387               	; many unnecessary BASIC-related things. This code simply clears
 7388               	; the screen.
 7389               	
 7390               	  ; XXX TODO compare size with Forth
 7391               	
 7392 1b7c D9        	  exx ; save the Forth IP
 7393               	  ; Erase the bitmap.
GAS LISTING solo_forth.for_as.z80s 			page 142


 7394 1b7d 2100 40   	  ld hl,sys_screen
 7395 1b80 1101 40   	  ld de,sys_screen+1
 7396 1b83 0100 18   	  ld bc,sys_screen_bitmap_size
 7397 1b86 3600      	  ld (hl),0
 7398 1b88 EDB0      	  ldir
 7399               	  ; Color with the permanent attributes.
 7400 1b8a 2100 58   	  ld hl,sys_screen_attributes
 7401 1b8d 1101 58   	  ld de,sys_screen_attributes+1
 7402 1b90 0100 03   	  ld bc,sys_screen_attributes_size
 7403 1b93 3A8D 5C   	  ld a,(sys_attr_p)
 7404 1b96 77        	  ld (hl),a
 7405 1b97 EDB0      	  ldir
 7406 1b99 D9        	  exx ; restore the Forth IP
 7407 1b9a C372 1B   	  jp home_pfa ; continue at `home`
 7408               	
 7409               	; ----------------------------------------------
 7410 1b9d 650C      	  _colon_header page_,"PAGE"
 7411               	
 7412               	; doc{
 7413               	;
 7414               	; page  ( -- )  \ ANS Forth
 7415               	;
 7416               	; Move to another page for output.  On a terminal, `page` clears
 7417               	; the screen and resets the cursor position to the upper left
 7418               	; corner. On a printer, `page` performs a form feed.
 7419               	;
 7420               	; }doc
 7421               	
 7422               	  ; XXX TODO printer support
 7423               	
 7424 1b9f 7A1B      	  dw cls_
 7425 1ba1 C00A      	  dw semicolon_s_
 7426               	
 7427               	; ----------------------------------------------
 7428 1ba3 A51B      	  _code_header bye_,"BYE"
 7429               	
 7430 1ba5 FD36 3102 	  ld (iy+sys_df_sz_offset),0x02 ; restore lines of the lower screen
 7431               	system_stack_pointer: equ $+1
 7432 1ba9 3100 00   	  ld sp,0 ; restore the system stack
 7433               	.if latin1_charset_in_bank
 7434               	  ; Restore the default charset:
 7435               	  ld hl,15360
 7436               	  ld (sys_chars),hl
 7437               	.endif
 7438               	  ; Exit to BASIC:
 7439 1bac CF        	  rst 0x08
 7440 1bad 08        	  db 0x08 ; "STOP" BASIC error
 7441               	
 7442               	; ----------------------------------------------
 7443 1bae B01B      	  _code_header two_drop_,"2DROP"
 7444               	
 7445 1bb0 E1        	  pop hl
 7446 1bb1 E1        	  pop hl
 7447 1bb2 DDE9      	  _jp_next
 7448               	
 7449               	; ----------------------------------------------
 7450 1bb4 B61B      	  _code_header two_swap_,"2SWAP"
GAS LISTING solo_forth.for_as.z80s 			page 143


 7451               	
 7452               	  ; [Code from DZX-Forth.]
 7453               	
 7454 1bb6 E1        	  pop hl
 7455 1bb7 D1        	  pop de
 7456 1bb8 E3        	  ex (sp),hl
 7457 1bb9 E5        	  push hl
 7458 1bba 2105 00   	  ld hl,5
 7459 1bbd 39        	  add hl,sp
 7460 1bbe 7E        	  ld a,(hl)
 7461 1bbf 72        	  ld (hl),d
 7462 1bc0 57        	  ld d,a
 7463 1bc1 2B        	  dec hl
 7464 1bc2 7E        	  ld a,(hl)
 7465 1bc3 73        	  ld (hl),e
 7466 1bc4 5F        	  ld e,a
 7467 1bc5 E1        	  pop hl
 7468 1bc6 C35D 05   	  jp push_hlde
 7469               	
 7470               	; ----------------------------------------------
 7471 1bc9 650C      	  _colon_header unused_,"UNUSED"
 7472               	
 7473               	  ; XXX TMP
 7474 1bcb C50C 900D 	  dw zero_,here_,minus_
 7474      D20D 
 7475 1bd1 C00A      	  dw semicolon_s_
 7476               	
 7477               	; ----------------------------------------------
 7478 1bd3 650C      	  _colon_header where_,"WHERE"
 7479               	
 7480               	  ; XXX TODO -- remove; already copied to the disk
 7481               	
 7482 1bd5 5F13 2C0C 	  dw error_pos_,two_fetch_ ; XXX NEW
 7483 1bd9 E00B      	  dw dup_
 7484 1bdb 6C07 E31B 	  dw question_branch_,where.do_it
 7485 1bdf AE1B      	  dw two_drop_
 7486 1be1 C00A      	  dw semicolon_s_
 7487               	
 7488               	where.do_it:
 7489 1be3 E00B F50C 	  dw dup_,b_slash_scr_,slash_
 7489      5917 
 7490 1be9 4D10      	  dw paren_dot_quote_
 7491 1beb 0653 6372 	  _string "Scr # "
 7491      2023 20
 7492 1bf2 BE0F 051B 	  dw decimal_,dot_
 7493 1bf6 D90B E50C 	  dw swap_,c_slash_l_,slash_mod_,c_slash_l_,star_
 7493      4D17 E50C 
 7493      4517 
 7494 1c00 1E0E 5E18 	  dw rot_,block_,plus_
 7494      810B 
 7495 1c06 E50C CD09 	  dw c_slash_l_,cr_,type_,cr_
 7495      1A10 CD09 
 7496 1c0e 900D 230C 	  dw here_,c_fetch_,minus_,spaces_
 7496      D20D 4D1A 
 7497 1c16 8306 5E   	  _literal '^'
 7498 1c19 EC08      	  dw emit_
 7499 1c1b C00A      	  dw semicolon_s_
GAS LISTING solo_forth.for_as.z80s 			page 144


 7500               	
 7501               	; ----------------------------------------------
 7502 1c1d 650C      	  _colon_header at_xy,"AT-XY"
 7503               	
 7504               	; doc{
 7505               	
 7506               	; at-xy ( col line -- )  \ ANS Forth
 7507               	
 7508               	; Warning: The system will crash if the coordinates are out of screen.
 7509               	; For the sake of speed, no check is done.  A wrapper secure word can
 7510               	; be written if needed.
 7511               	
 7512               	; }doc
 7513               	
 7514               	; [Code adapted from Spectrum Forth-83.]
 7515               	
 7516 1c1f E00B      	  dw dup_
 7517 1c21 8306 17   	  _literal 23
 7518 1c24 DC0D      	  dw not_equals_ ; not the last line?
 7519 1c26 6007 361C 	  dw zero_branch_,at_pfa.last_line
 7520               	  ; not the last line
 7521 1c2a 8D06 1600 	  dw lit_,22,paren_emit_,paren_emit_,paren_emit_
 7521      F808 F808 
 7521      F808 
 7522 1c34 C00A      	  dw semicolon_s_ ; XXX TODO exit_
 7523               	
 7524               	at_pfa.last_line:
 7525 1c36 6A0D E00B 	  dw one_minus_,dup_,paren_emit_,paren_emit_,zero_,paren_emit_
 7525      F808 F808 
 7525      C50C F808 
 7526 1c42 CD09      	  dw cr_
 7527 1c44 E00B      	  dw dup_
 7528 1c46 8D06 845C 	  dw lit_,sys_df_cc ; address in display file of print position
 7529 1c4a F00B      	  dw plus_store_
 7530 1c4c 8306 21   	  _literal 33
 7531 1c4f D90B      	  dw swap_
 7532 1c51 D20D      	  dw minus_
 7533 1c53 8D06 885C 	  dw lit_,sys_s_posn ; 33 minus column number for print position
 7534 1c57 520C      	  dw c_store_
 7535 1c59 C00A      	  dw semicolon_s_
 7536               	
 7537               	; ----------------------------------------------
 7538 1c5b 5D1C      	  _code_header border_,"BORDER"
 7539               	
 7540 1c5d E1        	  pop hl
 7541 1c5e 7D        	  ld a,l
 7542 1c5f D3FE      	  out (border_port),a
 7543               	
 7544               	  ; The system variable that holds the attributes of the lower
 7545               	  ; part of the screen, unnecessary in Solo Forth, must be
 7546               	  ; updated.  The reason is G+DOS, after disk operations that
 7547               	  ; make the border change, restores the border color with the
 7548               	  ; value of this system variable.  We use the border color as
 7549               	  ; paper and set a a contrast ink (black or white), to make
 7550               	  ; sure the lower part of the screen is usable after returning
 7551               	  ; to BASIC.
 7552               	
GAS LISTING solo_forth.for_as.z80s 			page 145


 7553               	  ; XXX TODO move the contrast ink calculation to `bye` or
 7554               	  ; simply remove it:
 7555               	
 7556 1c61 FE04      	  cp 4 ; cy = dark color (0..3)?
 7557 1c63 3E07      	  ld a,7 ; white ink
 7558 1c65 3801      	  jr c,border.end
 7559 1c67 AF        	  xor a ; black ink
 7560               	
 7561               	border.end:
 7562               	  ; Note: slower than shifting the register, but saves three bytes.
 7563 1c68 29        	  add hl,hl
 7564 1c69 29        	  add hl,hl
 7565 1c6a 29        	  add hl,hl ; l = paper (bits 3..5)
 7566 1c6b B5        	  or l ; combine with ink
 7567 1c6c 3248 5C   	  ld (sys_bordcr),a
 7568 1c6f DDE9      	  _jp_next
 7569               	
 7570               	; ----------------------------------------------
 7571 1c71 731C      	  _code_header overwrite_,"OVERWRITE"
 7572               	
 7573 1c73 3E15      	  ld a,over_char
 7574 1c75 C398 1C   	  jp color
 7575               	
 7576               	; ----------------------------------------------
 7577 1c78 7A1C      	  _code_header flash_,"FLASH"
 7578               	
 7579 1c7a 3E12      	  ld a,flash_char
 7580 1c7c C398 1C   	  jp color
 7581               	
 7582               	; ----------------------------------------------
 7583 1c7f 811C      	  _code_header inverse_,"INVERSE"
 7584               	
 7585 1c81 3E14      	  ld a,inverse_char
 7586 1c83 C398 1C   	  jp color
 7587               	
 7588               	; ----------------------------------------------
 7589 1c86 881C      	  _code_header bright_,"BRIGHT"
 7590               	
 7591 1c88 3E13      	  ld a,bright_char
 7592 1c8a C398 1C   	  jp color
 7593               	
 7594               	; ----------------------------------------------
 7595 1c8d 8F1C      	  _code_header paper_,"PAPER"
 7596               	
 7597 1c8f 3E11      	  ld a,paper_char
 7598 1c91 C398 1C   	  jp color
 7599               	
 7600               	; ----------------------------------------------
 7601 1c94 961C      	  _code_header ink_,"INK"
 7602               	
 7603 1c96 3E10      	  ld a,ink_char
 7604               	
 7605               	color:
 7606               	  ; Set a color attribute (ink, paper, bright, flash, inverse or
 7607               	  ; overwrite).
 7608               	  ; Input:
 7609               	  ;   a = attribute control char
GAS LISTING solo_forth.for_as.z80s 			page 146


 7610               	  ;   (tos) = color attribute value
 7611 1c98 D7        	  rst 0x10
 7612 1c99 E1        	  pop hl
 7613 1c9a 7D        	  ld a,l
 7614 1c9b D7        	  rst 0x10
 7615 1c9c CDAD 1C   	  call rom_set_permanent_colors_0x1CAD
 7616 1c9f DDE9      	  _jp_next
 7617               	
 7618               	; ----------------------------------------------
 7619 1ca1 A31C      	  _code_header emitted_,"EMITTED"
 7620               	
 7621               	  ; [Code adapted and modified from the ZX Spectrum ROM routine
 7622               	  ; S-SCRN$-S at 0x2535.]
 7623               	
 7624               	; doc{
 7625               	;
 7626               	; emitted  ( col row -- n | 0 )
 7627               	;
 7628               	; Return the ordinal number _n_ (first is 1) of the character
 7629               	; printed at the given screen coordinates, or 0 if no character
 7630               	; can be recognized on that position of the screen.
 7631               	;
 7632               	; This word must be configured by `emitted-charset` and
 7633               	; `#emitted-chars`, that set the address of the first character
 7634               	; and the number of characters to compare with. By default the
 7635               	; printable ASCII chars of the ROM charset are used.
 7636               	;
 7637               	; The result _n_ is the ordinal number (first is 1) of the
 7638               	; recognized char in the specified charset. Example: with the
 7639               	; default configuration, a recognized space char would return 1;
 7640               	; a "!" char, 2; a "A", 34...
 7641               	;
 7642               	; This word is meant to be used with user defined graphics.
 7643               	;
 7644               	; }doc
 7645               	
 7646               	  ; XXX TODO improve the result
 7647               	  ;
 7648               	  ; XXX TODO move to the disk
 7649               	  ;
 7650               	  ; XXX TODO rename?: `ocr`, `recognized`, `on-xy`, `xy-char`?
 7651               	  ; The reasen is name clash with the fig-Forth `out` counter,
 7652               	  ; that was going to be called `emitted` or `#emitted`.
 7653               	
 7654 1ca3 D1        	  pop de ; row
 7655 1ca4 E1        	  pop hl ; col
 7656 1ca5 C5        	  push bc ; save the Forth IP
 7657 1ca6 45        	  ld b,l ; column
 7658 1ca7 4B        	  ld c,e ; row
 7659 1ca8 2AF4 1C   	  ld hl,(emitted_charset_pfa) ; address of first printable char in the charset
 7660 1cab 79        	  ld a,c  ; row
 7661 1cac 0F        	  rrca
 7662 1cad 0F        	  rrca
 7663 1cae 0F        	  rrca ; multiply by 0x20
 7664 1caf E6E0      	  and  %11100000
 7665 1cb1 A8        	  xor  b ; combine with column (0x00..0x1F)
 7666 1cb2 5F        	  ld  e,a ; low byte of top row = 0x20 * (line mod 8) + column
GAS LISTING solo_forth.for_as.z80s 			page 147


 7667 1cb3 79        	  ld  a,c  ; row is copied to a again
 7668 1cb4 E618      	  and  0x18
 7669 1cb6 EE40      	  xor  0x40
 7670 1cb8 57        	  ld  d,a ; high byte of top row = 64 + 8*int (line/8)
 7671               	  ; de = screen address
 7672 1cb9 3AF8 1C   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7673 1cbc 47        	  ld b,a
 7674               	
 7675               	emitted.do:
 7676 1cbd C5        	  push  bc  ; save the characters count
 7677 1cbe D5        	  push  de  ; save the screen pointer
 7678 1cbf E5        	  push  hl  ; save the character set pointer (bitmap start)
 7679 1cc0 1A        	  ld  a,(de)  ; get first scan of screen character
 7680 1cc1 AE        	  xor  (hl)  ; match with scan from character set
 7681 1cc2 CACA 1C   	  jp z,emitted.match  ; jump if direct match found
 7682               	  ; if inverse, a=0xFF
 7683 1cc5 3C        	  inc  a  ; inverse? (if inverse, a=0)
 7684 1cc6 C2E2 1C   	  jp  nz,emitted.next_char  ; jump if inverse match not found
 7685               	  ; inverse match
 7686 1cc9 3D        	  dec  a  ; restore 0xFF
 7687               	emitted.match:
 7688 1cca 4F        	  ld  c,a  ; inverse mask (0x00 or 0xFF)
 7689 1ccb 0607      	  ld  b,0x07  ; count 7 more character rows
 7690               	emitted.scans:
 7691 1ccd 14        	  inc  d  ; next screen scan (add 0x100)
 7692 1cce 23        	  inc  hl  ; next bitmap address
 7693 1ccf 1A        	  ld  a,(de)  ; screen scan
 7694 1cd0 AE        	  xor  (hl)  ; will give 0x00 or 0xFF (inverse)
 7695 1cd1 A9        	  xor  c  ; inverse mask to include the inverse status
 7696 1cd2 C2E2 1C   	  jp  nz,emitted.next_char  ; jump if no match
 7697 1cd5 10F6      	  djnz  emitted.scans  ; jump back till all scans done
 7698               	
 7699               	  ; character match
 7700 1cd7 C1        	  pop  bc  ; discard character set pointer
 7701 1cd8 C1        	  pop  bc  ; discard screen pointer
 7702 1cd9 C1        	  pop  bc  ; final count
 7703 1cda 3AF8 1C   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7704 1cdd 90        	  sub  b ; ordinal number of the matched character (1 is the first)
 7705 1cde 6F        	  ld l,a
 7706 1cdf C3EC 1C   	  jp emitted.end
 7707               	
 7708               	emitted.next_char:
 7709 1ce2 E1        	  pop  hl  ; restore character set pointer
 7710 1ce3 1108 00   	  ld  de,0x0008  ; move it on 8 bytes
 7711 1ce6 19        	  add  hl,de  ; to the next character in the set
 7712 1ce7 D1        	  pop  de  ; restore the screen pointer
 7713 1ce8 C1        	  pop  bc  ; restore the counter
 7714 1ce9 10D2      	  djnz  emitted.do  ; loop back for the 96 characters
 7715               	  ; no match
 7716 1ceb 68        	  ld l,b ; zero
 7717               	
 7718               	emitted.end:
 7719 1cec C1        	  pop bc ; restore the Forth IP
 7720 1ced 2600      	  ld h,0
 7721 1cef C35E 05   	  jp push_hl
 7722               	
 7723               	; ----------------------------------------------
GAS LISTING solo_forth.for_as.z80s 			page 148


 7724 1cf2 1A14      	  _variable_header emitted_charset_,"EMITTED-CHARSET"
 7725               	
 7726               	; doc{
 7727               	;
 7728               	; emitted-charset  ( -- a )
 7729               	;
 7730               	; Variable that holds the address of the first printable char in
 7731               	; the charset used by `emitted`. By default it contains 0x3D00, the
 7732               	; address of the space char in the ROM charset.
 7733               	;
 7734               	; }doc
 7735               	
 7736 1cf4 003D      	  dw 0x3D00 ; address of the space in the ROM charset
 7737               	
 7738               	; ----------------------------------------------
 7739 1cf6 1A14      	  _variable_header hash_emitted_chars_,"#EMITTED-CHARS"
 7740               	
 7741               	; doc{
 7742               	;
 7743               	; #emitted-charset  ( -- a )
 7744               	;
 7745               	; Variable that holds the number of printable chars in the
 7746               	; charset used by `emitted`. By default it contais 0x5F, the
 7747               	; number of printable ASCII chars in the ROM charset.
 7748               	;
 7749               	; }doc
 7750               	
 7751 1cf8 5F00      	  dw 0x5F ; printable ASCII chars in the ROM charset
 7752               	
 7753               	; ----------------------------------------------
 7754 1cfa FC1C      	  _code_header j_,"J"
 7755               	
 7756               	; doc{
 7757               	;
 7758               	; j  ( -- x ) ( R: loop-sys1 loop-sys2 -- loop-sys1 loop-sys2 ) \ ANS Forth
 7759               	;
 7760               	; Return a copy of the next-outer loop index.
 7761               	;
 7762               	; }doc
 7763               	
 7764 1cfc 2A10 00   	  ld hl,(return_stack_pointer)
 7765 1cff 1104 00   	  ld de,cell*2
 7766 1d02 19        	  add hl,de
 7767 1d03 C31D 0C   	  jp fetch.hl
 7768               	
 7769               	; ----------------------------------------------
 7770 1d06 650C      	  _colon_header two_constant_,"2CONSTANT"
 7771               	
 7772 1d08 111D      	  dw two_variable_
 7773 1d0a C90F      	  dw paren_semicolon_code_
 7774               	do_two_constant:
 7775 1d0c 13        	  inc de    ; de=pfa
 7776 1d0d EB        	  ex de,hl  ; hl=pfa
 7777 1d0e C32F 0C   	  jp two_fetch.hl
 7778               	
 7779               	; ----------------------------------------------
 7780 1d11 650C      	  _colon_header two_variable_,"2VARIABLE"
GAS LISTING solo_forth.for_as.z80s 			page 149


 7781               	
 7782               	; doc{
 7783               	;
 7784               	; 2variable ( "name" -- )  \ ANS Forth
 7785               	;
 7786               	; Parse _name_.  Create a definition for _name_ with the
 7787               	; execution semantics defined below. Reserve two consecutive
 7788               	; cells of data space.
 7789               	;
 7790               	;    _name_ is referred to as a two-variable.
 7791               	;
 7792               	;          name Execution: ( -- a )
 7793               	;
 7794               	;    _a_ is the address of the first (lowes address) cell of two
 7795               	;    consecutive cells. A program is responsible for
 7796               	;    initializing the contents.
 7797               	;
 7798               	; }doc
 7799               	
 7800 1d13 1214      	  dw create_
 7801 1d15 8D06 0400 	  dw lit_,cell*2,allot_
 7801      980D 
 7802 1d1b C00A      	  dw semicolon_s_
 7803               	
 7804               	; ----------------------------------------------
 7805 1d1d 650C      	  _colon_header u_dot_r_,"U.R"
 7806               	
 7807 1d1f F00A C50C 	  dw to_r_,zero_,from_r_,d_dot_r_
 7807      FF0A D11A 
 7808 1d27 C00A      	  dw semicolon_s_
 7809               	
 7810               	; ----------------------------------------------
 7811 1d29 2B1D      	  _code_header two_over_,"2OVER"
 7812               	
 7813               	; doc{
 7814               	;
 7815               	; 2over  ( d1 d2 -- d1 d2 d1 )
 7816               	;
 7817               	; }doc
 7818               	
 7819 1d2b 2104 00   	  ld hl,4
 7820 1d2e 39        	  add hl,sp
 7821 1d2f C32F 0C   	  jp two_fetch.hl
 7822               	
 7823               	.if 1 ; fig_exit?
 7824               	
 7825               	; ----------------------------------------------
 7826 1d32 650C      	  _colon_header exit_,"EXIT"
 7827               	
 7828               	; doc{
 7829               	;
 7830               	; exit  ( -- ) ( R: a -- )  \ ANS Forth
 7831               	;
 7832               	; Return control to the calling definition, specified by the
 7833               	; address on the return stack.
 7834               	;
 7835               	; Before executing `exit` within a do-loop, a program shall
GAS LISTING solo_forth.for_as.z80s 			page 150


 7836               	; discard the loop-control parameters by executing `unloop`.
 7837               	;
 7838               	; }doc
 7839               	
 7840               	; XXX TODO combine this `exit` with `;s`?
 7841               	
 7842 1d34 1C0B      	  dw r_drop_
 7843 1d36 C00A      	  dw semicolon_s_
 7844               	
 7845               	; ----------------------------------------------
 7846 1d38 650C      	  _colon_header question_exit_,"?EXIT"
 7847               	
 7848               	; doc{
 7849               	;
 7850               	; ?exit  ( f -- ) ( R: a | -- a | )
 7851               	;
 7852               	; If _f_ is non-zero, return control to the calling definition,
 7853               	; specified by the address on the return stack.
 7854               	;
 7855               	; `?exit` is not intended to be used within a do-loop. Use `if
 7856               	; unloop exit then` instead.
 7857               	;
 7858               	; }doc
 7859               	
 7860 1d3a 6C07 341D 	  dw question_branch_,exit_pfa
 7861 1d3e C00A      	  dw semicolon_s_
 7862               	
 7863               	.else
 7864               	
 7865               	; ----------------------------------------------
 7866               	  _code_header question_exit_,"?EXIT"
 7867               	
 7868               	; doc{
 7869               	;
 7870               	; ?exit  ( f -- ) ( R: a | -- a | )
 7871               	;
 7872               	; If _f_ is non-zero, return control to the calling definition,
 7873               	; specified by the address on the return stack.
 7874               	;
 7875               	; `?exit` is not intended to be used within a do-loop. Use `if
 7876               	; unloop exit then` instead.
 7877               	;
 7878               	; }doc
 7879               	
 7880               	  pop hl
 7881               	  ld h,a
 7882               	  or l
 7883               	  jp nz,exit_pfa
 7884               	  _jp_next
 7885               	
 7886               	.endif
 7887               	
 7888               	; ----------------------------------------------
 7889 1d40 650C      	  _colon_header char_,"CHAR"
 7890               	
 7891 1d42 B511 D40B 	  dw parse_name_,drop_,c_fetch_
 7891      230C 
GAS LISTING solo_forth.for_as.z80s 			page 151


 7892 1d48 C00A      	  dw semicolon_s_
 7893               	
 7894               	; ----------------------------------------------
 7895 1d4a 650C      	  _colon_header bracket_char_,"[CHAR]",immediate
 7896               	
 7897 1d4c 401D CB14 	  dw char_,literal_
 7898 1d50 C00A      	  dw semicolon_s_
 7899               	
 7900               	; ----------------------------------------------
 7901               	  ;_colon_header s_quote_,"S\"",immediate ; XXX OLD not understood by `as`
 7902               	  ;_colon_header s_quote_,"S\x22",immediate ; XXX OLD not understood by `as`
 7903 1d52 650C      	  _colon_header_with_special_name s_quote_,"S",'"',"",immediate ; XXX OLD not understood by `as`
 7904               	
 7905               	  ; : s"  ( compilation: "text<">" -- ) ( run-time:  -- ca len )
 7906               	  ;  [char] " (s)  ; immediate
 7907               	
 7908 1d54 8306 22   	  _literal '"'
 7909 1d57 7106      	  dw paren_s_
 7910 1d59 C00A      	  dw semicolon_s_
 7911               	
 7912               	; ----------------------------------------------
 7913 1d5b 650C      	  _colon_header question_next_screen_,"?-->",immediate
 7914               	
 7915 1d5d 6007 631D 	  dw zero_branch_,question_next_screen.end
 7916 1d61 5519      	  dw next_screen_
 7917               	question_next_screen.end:
 7918 1d63 C00A      	  dw semicolon_s_
 7919               	
 7920               	  ; XXX TODO a good place to use `??` instead of a branch:
 7921               	;  dw question_question_,next_screen_
 7922               	;  dw semicolon_s_
 7923               	
 7924               	; ----------------------------------------------
 7925 1d65 650C      	  _colon_header dot_context_,".CONTEXT"
 7926               	
 7927               	; XXX TMP for debuggging; already in the disk
 7928               	
 7929               	; : .context  ( -- )  context #vocs 0 do
 7930               	;                       dup @ ?dup if  pfa>nfa id.  then  cell+
 7931               	;                     loop drop  ;
 7932               	
 7933 1d67 2A0D FD0C 	  dw context_,hash_vocs_,zero_,paren_do_
 7933      C50C AD07 
 7934               	dot_context.do:
 7935 1d6f E00B 1A0C 	  dw dup_,fetch_,question_dup_
 7935      2E0E 
 7936 1d75 6007 7D1D 	  dw zero_branch_,dot_context.end
 7937 1d79 5A0E BB13 	  dw pfa_to_nfa_,id_dot_
 7938               	dot_context.end:
 7939 1d7d 680D      	  dw cell_plus_
 7940 1d7f 7807 6F1D 	  dw paren_loop_,dot_context.do
 7941 1d83 D40B      	  dw drop_
 7942 1d85 C00A      	  dw semicolon_s_
 7943               	
 7944               	; ----------------------------------------------
 7945               	  ; _colon_header question_backslash_,"?\\",immediate ; XXX OLD for Pasmo
 7946               	  ;_colon_header question_backslash_,"?\",immediate ; XXX OLD not accepted by `as`!
GAS LISTING solo_forth.for_as.z80s 			page 152


 7947 1d87 650C      	  _colon_header_with_special_name question_backslash_,"?",'\',"",immediate ; XXX OLD not accepted b
 7948               	
 7949               	; doc{
 7950               	;
 7951               	; ?\  ( f "ccc<eol> -- )
 7952               	;
 7953               	; If _f_ is not false, parse and discard the rest of the parse
 7954               	; area. This word is used for conditional compilation.
 7955               	;
 7956               	; }doc
 7957               	
 7958 1d89 6007 8F1D 	  dw zero_branch_,question_backslash.end
 7959 1d8d 911D      	  dw backslash_
 7960               	question_backslash.end:
 7961 1d8f C00A      	  dw semicolon_s_
 7962               	
 7963               	; ----------------------------------------------
 7964               	  ;_colon_header backslash_,"\\",immediate ; XXX OLD for Pasmo
 7965               	  ;_colon_header backslash_,"\",immediate ; XXX not accepted by `as`!
 7966 1d91 650C      	  _colon_header_with_special_name backslash_,"",'\',"",immediate
 7967               	
 7968               	; doc{
 7969               	;
 7970               	; \  ( -- )
 7971               	; 
 7972               	; Discard the rest of the parse area.
 7973               	;
 7974               	; }doc
 7975               	
 7976 1d93 1E0D 1A0C 	  dw blk_,fetch_
 7977 1d97 6C07 A51D 	  dw question_branch_,backslash.loading
 7978               	  ; Interpreting
 7979 1d9b 7A10 1A0C 	  dw span_,fetch_,to_in_,store_
 7979      210D 490C 
 7980 1da3 C00A      	  dw semicolon_s_
 7981               	
 7982               	backslash.loading:
 7983               	  ; Loading
 7984 1da5 210D 1A0C 	  dw to_in_,fetch_,c_slash_l_,mod_
 7984      E50C 6117 
 7985 1dad E50C D90B 	  dw c_slash_l_,swap_,minus_
 7985      D20D 
 7986 1db3 210D F00B 	  dw to_in_,plus_store_
 7987 1db7 C00A      	  dw semicolon_s_
 7988               	
 7989               	; ----------------------------------------------
 7990 1db9 650C      	  _colon_header dot_paren_,".(",immediate
 7991               	
 7992               	; doc{
 7993               	;
 7994               	; .(  ( 'text<paren>' -- )  \ immediate
 7995               	;
 7996               	; }doc
 7997               	
 7998 1dbb 8306 29   	  _literal ')'
 7999 1dbe A711 1A10 	  dw parse_,type_
 8000 1dc2 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.for_as.z80s 			page 153


 8001               	
 8002               	; ; ----------------------------------------------
 8003               	;   _colon_header xxx_,"x",immediate
 8004               	
 8005               	; ; XXX TMP -- word created only for debugging
 8006               	
 8007               	;   dw semicolon_s_
 8008               	
 8009               	  .data
 8010               	latest_nfa_in_forth_voc: equ dot_paren_nfa
 8011               	;latest_nfa_in_forth_voc: equ xxx_nfa ;XXX TMP
 8012               	  .text
 8013               	
 8014               	dictionary_pointer_after_cold:
 8015               	
 8016               	; ==============================================================
 8017               	; Name and link fields
 8018               	
 8019               	move_name_fields_to_memory_bank:
 8020               	
 8021               	  ; Move the name fields, assembled in ordinary memory, to the
 8022               	  ; names bank. This routine is needed only once, therefore its
 8023               	  ; call is patched with `noop` at the end; the routine itself
 8024               	  ; will be overwritten by the Forth dictionary.
 8025               	
 8026               	  ; The whole screen is used as intermediate buffer for copying
 8027               	  ; the data.
 8028               	
 8029 1dc4 2100 C0   	  ld hl,names_bank_address ; origin
 8030 1dc7 1100 40   	  ld de,sys_screen ; destination
 8031 1dca 0100 1B   	  ld bc,sys_screen_size ; count
 8032 1dcd EDB0      	  ldir ; copy the data to the screen
 8033               	  ;_z80_border_wait 1 ; XXX INFORMER
 8034 1dcf 1E01      	  ld e,names_bank
 8035 1dd1 CDA0 06   	  call bank.e
 8036 1dd4 2100 40   	  ld hl,sys_screen ; origin
 8037 1dd7 1100 C0   	  ld de,names_bank_address ; destination
 8038 1dda 0100 1B   	  ld bc,sys_screen_size ; count
 8039 1ddd EDB0      	  ldir ; copy the name fields to the bank
 8040               	  ;_z80_border_wait 2 ; XXX INFORMER
 8041               	.if latin1_charset_in_bank
 8042               	  ld hl,sys_screen+sys_screen_size-charset_size ; origin
 8043               	  ld de,charset_address ; destination
 8044               	  ld bc,charset_size ; count
 8045               	  ldir ; copy the charset to the bank
 8046               	.endif
 8047 1ddf 1E00      	  ld e,default_bank
 8048 1de1 CDA0 06   	  call bank.e
 8049               	
 8050               	  ; Erase the default bank (not necessary) ; XXX OLD
 8051               	  ; ld hl,names_bank_address ; the first byte is 0
 8052               	  ; ld de,names_bank_address+1
 8053               	  ; ld bc,sys_screen
 8054               	  ; ldir
 8055               	
 8056               	  ; Remove the call to this routine:
 8057 1de4 218E 16   	  ld hl,only_first_cold ; address of the call to this routine
GAS LISTING solo_forth.for_as.z80s 			page 154


 8058 1de7 3600      	  ld (hl),0 ; nop
 8059 1de9 23        	  inc hl
 8060 1dea 3600      	  ld (hl),0 ; nop
 8061 1dec 23        	  inc hl
 8062 1ded 3600      	  ld (hl),0 ; nop
 8063               	  ;_z80_border_wait 3 ; XXX INFORMER
 8064 1def C9        	  ret
 8065               	
 8066               	; ==============================================================
 8067               	; Character set
 8068               	
 8069               	; XXX OLD
 8070               	
 8071               	.if latin1_charset_in_bank
 8072               	
 8073               	  .org names_bank_address+sys_screen_size-charset_size
 8074               	
 8075               	  incbin solo_forth.charset.bin
 8076               	
 8077               	.endif
 8078               	
 8079               	; ==============================================================
 8080               	; End
 8081               	
 8082               	.end
GAS LISTING solo_forth.for_as.z80s 			page 155


DEFINED SYMBOLS
                            *ABS*:00000000 fake
                            *ABS*:00000000 false
solo_forth.for_as.z80s:375    .data:00000001 data_start
solo_forth.for_as.z80s:384    .text:00000000 cold_entry
solo_forth.for_as.z80s:5980   .text:0000168e cold_start
solo_forth.for_as.z80s:387    .text:00000003 warm_entry
solo_forth.for_as.z80s:5933   .text:00001626 warm_start
solo_forth.for_as.z80s:396    .text:00000006 latest_nfa_in_root_voc.init_value
solo_forth.for_as.z80s:377    .data:00000015 latest_nfa_in_root_voc
solo_forth.for_as.z80s:399    .text:00000008 latest_nfa_in_forth_voc.init_value
solo_forth.for_as.z80s:7889   .data:0000100e latest_nfa_in_forth_voc
solo_forth.for_as.z80s:402    .text:0000000a latest_nfa_in_assembler_voc.init_value
solo_forth.for_as.z80s:377    .data:000000a1 latest_nfa_in_assembler_voc
solo_forth.for_as.z80s:405    .text:0000000c voc_link.init_value
solo_forth.for_as.z80s:1394   .text:0000065d assembler_vocabulary_link
solo_forth.for_as.z80s:408    .text:0000000e user_variables_pointer
solo_forth.for_as.z80s:493    .text:00000032 user_variables
solo_forth.for_as.z80s:411    .text:00000010 return_stack_pointer
solo_forth.for_as.z80s:591    .text:00000307 return_stack_bottom
solo_forth.for_as.z80s:414    .text:00000012 default_color_attribute
solo_forth.for_as.z80s:434    .text:00000014 default_user_variables_start
solo_forth.for_as.z80s:436    .text:00000014 s0_init_value
solo_forth.for_as.z80s:577    .text:00000214 data_stack_bottom
solo_forth.for_as.z80s:438    .text:00000016 r0_init_value
solo_forth.for_as.z80s:441    .text:0000001a width_init_value
solo_forth.for_as.z80s:443    .text:0000001c warning_init_value
solo_forth.for_as.z80s:446    .text:00000020 dp_init_value
solo_forth.for_as.z80s:8014   .text:00001dc4 dictionary_pointer_after_cold
solo_forth.for_as.z80s:456    .text:00000024 blk_init_value
solo_forth.for_as.z80s:458    .text:00000026 in_init_value
solo_forth.for_as.z80s:460    .text:00000028 out_init_value
solo_forth.for_as.z80s:462    .text:0000002a scr_init_value
solo_forth.for_as.z80s:469    .text:0000002c default_user_variables_end
solo_forth.for_as.z80s:471    .text:0000002c ip_backup
solo_forth.for_as.z80s:482    .text:0000002e names_pointer
solo_forth.for_as.z80s:486    .text:00000030 names_pointer_init_value
solo_forth.for_as.z80s:499    .text:00000032 s0_value
solo_forth.for_as.z80s:501    .text:00000034 r0_value
solo_forth.for_as.z80s:505    .text:00000038 width_value
solo_forth.for_as.z80s:507    .text:0000003a warning_value
solo_forth.for_as.z80s:511    .text:0000003e dp_value
solo_forth.for_as.z80s:517    .text:00000042 blk_value
solo_forth.for_as.z80s:519    .text:00000044 in_value
solo_forth.for_as.z80s:521    .text:00000046 out_value
solo_forth.for_as.z80s:523    .text:00000048 scr_value
solo_forth.for_as.z80s:525    .text:0000004a number_tib_value
solo_forth.for_as.z80s:527    .text:0000004c hld_value
solo_forth.for_as.z80s:529    .text:0000004e current_value
solo_forth.for_as.z80s:531    .text:00000050 state_value
solo_forth.for_as.z80s:533    .text:00000052 base_value
solo_forth.for_as.z80s:535    .text:00000054 dpl_value
solo_forth.for_as.z80s:537    .text:00000056 fld_value
solo_forth.for_as.z80s:539    .text:00000058 csp_value
solo_forth.for_as.z80s:541    .text:0000005a r_hash_value
solo_forth.for_as.z80s:544    .text:0000005c context_value
solo_forth.for_as.z80s:1380   .text:00000655 forth_pfa
GAS LISTING solo_forth.for_as.z80s 			page 156


solo_forth.for_as.z80s:1371   .text:0000064f root_pfa
solo_forth.for_as.z80s:565    .text:00000072 csb
solo_forth.for_as.z80s:566    .text:00000072 unused_csb
solo_forth.for_as.z80s:568    .text:00000074 csb0
solo_forth.for_as.z80s:582    .text:00000214 terminal_input_buffer
solo_forth.for_as.z80s:602    .text:00000307 disk_buffer
                            *ABS*:00000000 _header
                            *ABS*:00000000 _header_with_special_name
                            *ABS*:00000000 _code_header
                            *ABS*:00000000 _code_header_with_special_name
                            *ABS*:00000000 _code_alias_header
                            *ABS*:00000000 _colon_header
                            *ABS*:00000000 _colon_header_with_special_name
                            *ABS*:00000000 _user_variable_header
                            *ABS*:00000000 _does_header
                            *ABS*:00000000 _constant_header
                            *ABS*:00000000 _variable_header
                            *ABS*:00000000 _two_variable_header
                            *ABS*:00000000 _string
                            *ABS*:00000000 _literal
                            *ABS*:00000000 _jp_next
                            *ABS*:00000000 _jump
                            *ABS*:00000000 _jump_nc
                            *ABS*:00000000 _jump_z
                            *ABS*:00000000 _bank
                            *ABS*:00000000 _names_bank
                            *ABS*:00000000 _default_bank
                            *ABS*:00000000 _question_error
                            *ABS*:00000000 _message
                            *ABS*:00000000 _z80_border
                            *ABS*:00000000 _z80_border_wait
                            *ABS*:00000000 _echo
solo_forth.for_as.z80s:903    .text:0000050c compare_de_hl_unsigned
solo_forth.for_as.z80s:917    .text:00000512 compare_de_hl_signed
solo_forth.for_as.z80s:934    .text:0000051c move_block
solo_forth.for_as.z80s:981    .text:00000528 move_block_downwards
solo_forth.for_as.z80s:952    .text:00000522 move_block_upwards
solo_forth.for_as.z80s:1000   .text:00000534 a_multiplied_by_de_to_ahl
solo_forth.for_as.z80s:1003   .text:00000539 a_multiplied_by_de_to_ahl.1
solo_forth.for_as.z80s:1009   .text:00000541 a_multiplied_by_de_to_ahl.2
solo_forth.for_as.z80s:1018   .text:00000546 hl_multiplied_by_de_to_hlde_unsigned
solo_forth.for_as.z80s:1041   .text:0000055d push_hlde
solo_forth.for_as.z80s:1044   .text:0000055e push_hl
solo_forth.for_as.z80s:1047   .text:0000055f next
solo_forth.for_as.z80s:1060   .text:00000565 next2
solo_forth.for_as.z80s:1071   .text:00000569 next2_end
solo_forth.for_as.z80s:1085   .text:0000056a root_x_
solo_forth.for_as.z80s:377    .data:00000001 root_x_cfap
solo_forth.for_as.z80s:377    .data:00000003 root_x_lfa
solo_forth.for_as.z80s:377    .data:00000005 root_x_nfa
solo_forth.for_as.z80s:1085   .text:0000056c root_x_pfa
solo_forth.for_as.z80s:4802   .text:0000111b x_
solo_forth.for_as.z80s:1100   .text:00000572 root_forth_
solo_forth.for_as.z80s:377    .data:00000007 root_forth_cfap
solo_forth.for_as.z80s:377    .data:00000009 root_forth_lfa
solo_forth.for_as.z80s:377    .data:0000000b root_forth_nfa
solo_forth.for_as.z80s:3426   .text:00000c65 do_colon
GAS LISTING solo_forth.for_as.z80s 			page 157


solo_forth.for_as.z80s:1100   .text:00000574 root_forth_pfa
solo_forth.for_as.z80s:1380   .text:00000653 forth_
solo_forth.for_as.z80s:2914   .text:00000ac0 semicolon_s_
solo_forth.for_as.z80s:1106   .text:00000578 root_definitions_
solo_forth.for_as.z80s:377    .data:00000011 root_definitions_cfap
solo_forth.for_as.z80s:377    .data:00000013 root_definitions_lfa
solo_forth.for_as.z80s:377    .data:00000015 root_definitions_nfa
solo_forth.for_as.z80s:1106   .text:0000057a root_definitions_pfa
solo_forth.for_as.z80s:5815   .text:0000158a definitions_
solo_forth.for_as.z80s:1120   .text:0000057e abase_
solo_forth.for_as.z80s:377    .data:00000021 abase_cfap
solo_forth.for_as.z80s:377    .data:00000023 abase_lfa
solo_forth.for_as.z80s:377    .data:00000025 abase_nfa
solo_forth.for_as.z80s:5413   .text:0000141a do_create
solo_forth.for_as.z80s:1120   .text:00000580 abase_pfa
solo_forth.for_as.z80s:1134   .text:00000582 asm_
solo_forth.for_as.z80s:377    .data:0000002b asm_cfap
solo_forth.for_as.z80s:377    .data:0000002d asm_lfa
solo_forth.for_as.z80s:377    .data:0000002f asm_nfa
solo_forth.for_as.z80s:1134   .text:00000584 asm_pfa
solo_forth.for_as.z80s:3464   .text:00000c96 noop_
solo_forth.for_as.z80s:3721   .text:00000d33 base_
solo_forth.for_as.z80s:3342   .text:00000c1a fetch_
solo_forth.for_as.z80s:3400   .text:00000c49 store_
solo_forth.for_as.z80s:4445   .text:00000fb3 hex_
solo_forth.for_as.z80s:1280   .text:000005fd also_
solo_forth.for_as.z80s:1388   .text:00000659 assembler_
solo_forth.for_as.z80s:1153   .text:00000596 end_asm_
solo_forth.for_as.z80s:377    .data:00000033 end_asm_cfap
solo_forth.for_as.z80s:377    .data:00000035 end_asm_lfa
solo_forth.for_as.z80s:377    .data:00000037 end_asm_nfa
solo_forth.for_as.z80s:1153   .text:00000598 end_asm_pfa
solo_forth.for_as.z80s:1328   .text:00000623 previous_
solo_forth.for_as.z80s:1168   .text:000005a4 end_code_
solo_forth.for_as.z80s:377    .data:0000003f end_code_cfap
solo_forth.for_as.z80s:377    .data:00000041 end_code_lfa
solo_forth.for_as.z80s:377    .data:00000043 end_code_nfa
solo_forth.for_as.z80s:1168   .text:000005a6 end_code_pfa
solo_forth.for_as.z80s:4366   .text:00000f48 question_csp_
solo_forth.for_as.z80s:4422   .text:00000fa0 smudge_
solo_forth.for_as.z80s:1174   .text:000005ae next_
solo_forth.for_as.z80s:377    .data:0000004c next_cfap
solo_forth.for_as.z80s:377    .data:0000004e next_lfa
solo_forth.for_as.z80s:377    .data:00000050 next_nfa
solo_forth.for_as.z80s:3479   .text:00000ca0 do_constant
solo_forth.for_as.z80s:1174   .text:000005b0 next_pfa
solo_forth.for_as.z80s:1187   .text:000005b2 pushhl_
solo_forth.for_as.z80s:377    .data:00000055 pushhl_cfap
solo_forth.for_as.z80s:377    .data:00000057 pushhl_lfa
solo_forth.for_as.z80s:377    .data:00000059 pushhl_nfa
solo_forth.for_as.z80s:1187   .text:000005b4 pushhl_pfa
solo_forth.for_as.z80s:1192   .text:000005b6 pushhlde_
solo_forth.for_as.z80s:377    .data:00000060 pushhlde_cfap
solo_forth.for_as.z80s:377    .data:00000062 pushhlde_lfa
solo_forth.for_as.z80s:377    .data:00000064 pushhlde_nfa
solo_forth.for_as.z80s:1192   .text:000005b8 pushhlde_pfa
solo_forth.for_as.z80s:1197   .text:000005ba fetchhl_
GAS LISTING solo_forth.for_as.z80s 			page 158


solo_forth.for_as.z80s:377    .data:0000006d fetchhl_cfap
solo_forth.for_as.z80s:377    .data:0000006f fetchhl_lfa
solo_forth.for_as.z80s:377    .data:00000071 fetchhl_nfa
solo_forth.for_as.z80s:1197   .text:000005bc fetchhl_pfa
solo_forth.for_as.z80s:3345   .text:00000c1d fetch.hl
solo_forth.for_as.z80s:1202   .text:000005be next_comma_
solo_forth.for_as.z80s:377    .data:00000079 next_comma_cfap
solo_forth.for_as.z80s:377    .data:0000007b next_comma_lfa
solo_forth.for_as.z80s:377    .data:0000007d next_comma_nfa
solo_forth.for_as.z80s:1202   .text:000005c0 next_comma_pfa
solo_forth.for_as.z80s:1438   .text:0000068d lit_
solo_forth.for_as.z80s:3894   .text:00000db2 comma_
solo_forth.for_as.z80s:1217   .text:000005c8 pushhl_comma_
solo_forth.for_as.z80s:377    .data:00000083 pushhl_comma_cfap
solo_forth.for_as.z80s:377    .data:00000085 pushhl_comma_lfa
solo_forth.for_as.z80s:377    .data:00000087 pushhl_comma_nfa
solo_forth.for_as.z80s:1217   .text:000005ca pushhl_comma_pfa
solo_forth.for_as.z80s:1426   .text:00000683 c_lit_
solo_forth.for_as.z80s:3912   .text:00000dc6 c_comma_
solo_forth.for_as.z80s:1233   .text:000005d7 pushhlde_comma_
solo_forth.for_as.z80s:377    .data:0000008f pushhlde_comma_cfap
solo_forth.for_as.z80s:377    .data:00000091 pushhlde_comma_lfa
solo_forth.for_as.z80s:377    .data:00000093 pushhlde_comma_nfa
solo_forth.for_as.z80s:1233   .text:000005d9 pushhlde_comma_pfa
solo_forth.for_as.z80s:1249   .text:000005e6 fetchhl_comma_
solo_forth.for_as.z80s:377    .data:0000009d fetchhl_comma_cfap
solo_forth.for_as.z80s:377    .data:0000009f fetchhl_comma_lfa
solo_forth.for_as.z80s:377    .data:000000a1 fetchhl_comma_nfa
solo_forth.for_as.z80s:1249   .text:000005e8 fetchhl_comma_pfa
solo_forth.for_as.z80s:1274   .text:000005f5 label_
solo_forth.for_as.z80s:377    .data:000000aa label_cfap
solo_forth.for_as.z80s:377    .data:000000ac label_lfa
solo_forth.for_as.z80s:377    .data:000000ae label_nfa
solo_forth.for_as.z80s:1274   .text:000005f7 label_pfa
solo_forth.for_as.z80s:5409   .text:00001412 create_
solo_forth.for_as.z80s:377    .data:000000b4 also_cfap
solo_forth.for_as.z80s:377    .data:000000b6 also_lfa
solo_forth.for_as.z80s:377    .data:000000b8 also_nfa
solo_forth.for_as.z80s:1280   .text:000005ff also_pfa
solo_forth.for_as.z80s:3706   .text:00000d2a context_
solo_forth.for_as.z80s:3270   .text:00000be0 dup_
solo_forth.for_as.z80s:3800   .text:00000d68 cell_plus_
solo_forth.for_as.z80s:2553   .text:000009da cmove_up_
solo_forth.for_as.z80s:1301   .text:0000060d minus_order_
solo_forth.for_as.z80s:377    .data:000000bd minus_order_cfap
solo_forth.for_as.z80s:377    .data:000000bf minus_order_lfa
solo_forth.for_as.z80s:377    .data:000000c1 minus_order_nfa
solo_forth.for_as.z80s:1301   .text:0000060f minus_order_pfa
solo_forth.for_as.z80s:4881   .text:00001156 erase_
solo_forth.for_as.z80s:1309   .text:00000619 only_
solo_forth.for_as.z80s:377    .data:000000c8 only_cfap
solo_forth.for_as.z80s:377    .data:000000ca only_lfa
solo_forth.for_as.z80s:377    .data:000000cc only_nfa
solo_forth.for_as.z80s:1309   .text:0000061b only_pfa
solo_forth.for_as.z80s:1371   .text:0000064d root_
solo_forth.for_as.z80s:377    .data:000000d1 previous_cfap
solo_forth.for_as.z80s:377    .data:000000d3 previous_lfa
GAS LISTING solo_forth.for_as.z80s 			page 159


solo_forth.for_as.z80s:377    .data:000000d5 previous_nfa
solo_forth.for_as.z80s:1328   .text:00000625 previous_pfa
solo_forth.for_as.z80s:3263   .text:00000bd9 swap_
solo_forth.for_as.z80s:2564   .text:000009e6 cmove_
solo_forth.for_as.z80s:3170   .text:00000b81 plus_
solo_forth.for_as.z80s:3300   .text:00000bfd off_
solo_forth.for_as.z80s:1351   .text:0000063f seal_
solo_forth.for_as.z80s:377    .data:000000de seal_cfap
solo_forth.for_as.z80s:377    .data:000000e0 seal_lfa
solo_forth.for_as.z80s:377    .data:000000e2 seal_nfa
solo_forth.for_as.z80s:1351   .text:00000641 seal_pfa
solo_forth.for_as.z80s:377    .data:000000e7 root_cfap
solo_forth.for_as.z80s:377    .data:000000e9 root_lfa
solo_forth.for_as.z80s:377    .data:000000eb root_nfa
solo_forth.for_as.z80s:5807   .text:00001581 do_vocabulary
solo_forth.for_as.z80s:1375   .text:00000651 root_vocabulary_link
solo_forth.for_as.z80s:377    .data:000000f0 forth_cfap
solo_forth.for_as.z80s:377    .data:000000f2 forth_lfa
solo_forth.for_as.z80s:377    .data:000000f4 forth_nfa
solo_forth.for_as.z80s:1384   .text:00000657 forth_vocabulary_link
solo_forth.for_as.z80s:377    .data:000000fa assembler_cfap
solo_forth.for_as.z80s:377    .data:000000fc assembler_lfa
solo_forth.for_as.z80s:377    .data:000000fe assembler_nfa
solo_forth.for_as.z80s:1388   .text:0000065b assembler_pfa
solo_forth.for_as.z80s:1398   .text:0000065f s_lit_
solo_forth.for_as.z80s:377    .data:00000108 s_lit_cfap
solo_forth.for_as.z80s:377    .data:0000010a s_lit_lfa
solo_forth.for_as.z80s:377    .data:0000010c s_lit_nfa
solo_forth.for_as.z80s:1398   .text:00000661 s_lit_pfa
solo_forth.for_as.z80s:3122   .text:00000b4f r_fetch_
solo_forth.for_as.z80s:4529   .text:00001007 count_
solo_forth.for_as.z80s:3782   .text:00000d57 one_plus_
solo_forth.for_as.z80s:3041   .text:00000aff from_r_
solo_forth.for_as.z80s:3023   .text:00000af0 to_r_
solo_forth.for_as.z80s:1407   .text:00000671 paren_s_
solo_forth.for_as.z80s:377    .data:00000111 paren_s_cfap
solo_forth.for_as.z80s:377    .data:00000113 paren_s_lfa
solo_forth.for_as.z80s:377    .data:00000115 paren_s_nfa
solo_forth.for_as.z80s:1407   .text:00000673 paren_s_pfa
solo_forth.for_as.z80s:4943   .text:000011a7 parse_
solo_forth.for_as.z80s:4336   .text:00000f1d comp_question_
solo_forth.for_as.z80s:1705   .text:00000760 zero_branch_
solo_forth.for_as.z80s:1421   .text:0000067f paren_s.interpreting
solo_forth.for_as.z80s:5577   .text:000014b1 s_literal_
solo_forth.for_as.z80s:1539   .text:000006ea save_string_
solo_forth.for_as.z80s:377    .data:00000119 c_lit_cfap
solo_forth.for_as.z80s:377    .data:0000011b c_lit_lfa
solo_forth.for_as.z80s:377    .data:0000011d c_lit_nfa
solo_forth.for_as.z80s:1426   .text:00000685 c_lit_pfa
solo_forth.for_as.z80s:1431   .text:00000687 push_a
solo_forth.for_as.z80s:1433   .text:00000688 push_l
solo_forth.for_as.z80s:377    .data:00000122 lit_cfap
solo_forth.for_as.z80s:377    .data:00000124 lit_lfa
solo_forth.for_as.z80s:377    .data:00000126 lit_nfa
solo_forth.for_as.z80s:1438   .text:0000068f lit_pfa
solo_forth.for_as.z80s:1452   .text:00000698 bank_
solo_forth.for_as.z80s:377    .data:0000012a bank_cfap
GAS LISTING solo_forth.for_as.z80s 			page 160


solo_forth.for_as.z80s:377    .data:0000012c bank_lfa
solo_forth.for_as.z80s:377    .data:0000012e bank_nfa
solo_forth.for_as.z80s:1452   .text:0000069a bank_pfa
solo_forth.for_as.z80s:1470   .text:000006a0 bank.e
solo_forth.for_as.z80s:1466   .text:000006a0 bank.default
solo_forth.for_as.z80s:1468   .text:000006a0 bank.names
solo_forth.for_as.z80s:1482   .text:000006ae unused_csb_
solo_forth.for_as.z80s:377    .data:00000133 unused_csb_cfap
solo_forth.for_as.z80s:377    .data:00000135 unused_csb_lfa
solo_forth.for_as.z80s:377    .data:00000137 unused_csb_nfa
solo_forth.for_as.z80s:1482   .text:000006b0 unused_csb_pfa
solo_forth.for_as.z80s:1494   .text:000006b6 csb0_
solo_forth.for_as.z80s:377    .data:00000142 csb0_cfap
solo_forth.for_as.z80s:377    .data:00000144 csb0_lfa
solo_forth.for_as.z80s:377    .data:00000146 csb0_nfa
solo_forth.for_as.z80s:1494   .text:000006b8 csb0_pfa
solo_forth.for_as.z80s:1505   .text:000006ba question_csb_
solo_forth.for_as.z80s:377    .data:0000014b question_csb_cfap
solo_forth.for_as.z80s:377    .data:0000014d question_csb_lfa
solo_forth.for_as.z80s:377    .data:0000014f question_csb_nfa
solo_forth.for_as.z80s:1505   .text:000006bc question_csb_pfa
solo_forth.for_as.z80s:3983   .text:00000e17 greater_than_
solo_forth.for_as.z80s:1521   .text:000006d4 question_csb_.enough
solo_forth.for_as.z80s:3204   .text:00000b9b negate_
solo_forth.for_as.z80s:3286   .text:00000bf0 plus_store_
solo_forth.for_as.z80s:1526   .text:000006de allocate_string_
solo_forth.for_as.z80s:377    .data:00000154 allocate_string_cfap
solo_forth.for_as.z80s:377    .data:00000156 allocate_string_lfa
solo_forth.for_as.z80s:377    .data:00000158 allocate_string_nfa
solo_forth.for_as.z80s:1526   .text:000006e0 allocate_string_pfa
solo_forth.for_as.z80s:377    .data:00000168 save_string_cfap
solo_forth.for_as.z80s:377    .data:0000016a save_string_lfa
solo_forth.for_as.z80s:377    .data:0000016c save_string_nfa
solo_forth.for_as.z80s:1539   .text:000006ec save_string_pfa
solo_forth.for_as.z80s:3277   .text:00000be7 two_dup_
solo_forth.for_as.z80s:3089   .text:00000b28 two_to_r_
solo_forth.for_as.z80s:2575   .text:000009f2 move_
solo_forth.for_as.z80s:3104   .text:00000b37 two_from_r_
solo_forth.for_as.z80s:1553   .text:000006fc save_counted_string_
solo_forth.for_as.z80s:377    .data:00000178 save_counted_string_cfap
solo_forth.for_as.z80s:377    .data:0000017a save_counted_string_lfa
solo_forth.for_as.z80s:377    .data:0000017c save_counted_string_nfa
solo_forth.for_as.z80s:1553   .text:000006fe save_counted_string_pfa
solo_forth.for_as.z80s:5201   .text:000012d9 dollar_store_
solo_forth.for_as.z80s:1568   .text:0000070e empty_csb_
solo_forth.for_as.z80s:377    .data:00000190 empty_csb_cfap
solo_forth.for_as.z80s:377    .data:00000192 empty_csb_lfa
solo_forth.for_as.z80s:377    .data:00000194 empty_csb_nfa
solo_forth.for_as.z80s:1568   .text:00000710 empty_csb_pfa
solo_forth.for_as.z80s:1582   .text:0000071c execute_
solo_forth.for_as.z80s:377    .data:0000019e execute_cfap
solo_forth.for_as.z80s:377    .data:000001a0 execute_lfa
solo_forth.for_as.z80s:377    .data:000001a2 execute_nfa
solo_forth.for_as.z80s:1582   .text:0000071e execute_pfa
solo_forth.for_as.z80s:1594   .text:00000722 perform_
solo_forth.for_as.z80s:377    .data:000001aa perform_cfap
solo_forth.for_as.z80s:377    .data:000001ac perform_lfa
GAS LISTING solo_forth.for_as.z80s 			page 161


solo_forth.for_as.z80s:377    .data:000001ae perform_nfa
solo_forth.for_as.z80s:1594   .text:00000724 perform_pfa
solo_forth.for_as.z80s:1615   .text:0000072f forward_mark_
solo_forth.for_as.z80s:377    .data:000001b6 forward_mark_cfap
solo_forth.for_as.z80s:377    .data:000001b8 forward_mark_lfa
solo_forth.for_as.z80s:377    .data:000001ba forward_mark_nfa
solo_forth.for_as.z80s:1615   .text:00000731 forward_mark_pfa
solo_forth.for_as.z80s:4342   .text:00000f25 question_comp_
solo_forth.for_as.z80s:3872   .text:00000d90 here_
solo_forth.for_as.z80s:3543   .text:00000cc5 zero_
solo_forth.for_as.z80s:1634   .text:0000073b forward_resolve_
solo_forth.for_as.z80s:377    .data:000001c0 forward_resolve_cfap
solo_forth.for_as.z80s:377    .data:000001c2 forward_resolve_lfa
solo_forth.for_as.z80s:377    .data:000001c4 forward_resolve_nfa
solo_forth.for_as.z80s:1634   .text:0000073d forward_resolve_pfa
solo_forth.for_as.z80s:1650   .text:00000747 backward_mark_
solo_forth.for_as.z80s:377    .data:000001cd backward_mark_cfap
solo_forth.for_as.z80s:377    .data:000001cf backward_mark_lfa
solo_forth.for_as.z80s:377    .data:000001d1 backward_mark_nfa
solo_forth.for_as.z80s:1650   .text:00000749 backward_mark_pfa
solo_forth.for_as.z80s:1667   .text:0000074f backward_resolve_
solo_forth.for_as.z80s:377    .data:000001d7 backward_resolve_cfap
solo_forth.for_as.z80s:377    .data:000001d9 backward_resolve_lfa
solo_forth.for_as.z80s:377    .data:000001db backward_resolve_nfa
solo_forth.for_as.z80s:1667   .text:00000751 backward_resolve_pfa
solo_forth.for_as.z80s:1685   .text:00000757 branch_
solo_forth.for_as.z80s:377    .data:000001e4 branch_cfap
solo_forth.for_as.z80s:377    .data:000001e6 branch_lfa
solo_forth.for_as.z80s:377    .data:000001e8 branch_nfa
solo_forth.for_as.z80s:1685   .text:00000759 branch_pfa
solo_forth.for_as.z80s:377    .data:000001ef zero_branch_cfap
solo_forth.for_as.z80s:377    .data:000001f1 zero_branch_lfa
solo_forth.for_as.z80s:377    .data:000001f3 zero_branch_nfa
solo_forth.for_as.z80s:1705   .text:00000762 zero_branch_pfa
solo_forth.for_as.z80s:1726   .text:0000076c question_branch_
solo_forth.for_as.z80s:377    .data:000001fb question_branch_cfap
solo_forth.for_as.z80s:377    .data:000001fd question_branch_lfa
solo_forth.for_as.z80s:377    .data:000001ff question_branch_nfa
solo_forth.for_as.z80s:1726   .text:0000076e question_branch_pfa
solo_forth.for_as.z80s:1753   .text:00000778 paren_loop_
solo_forth.for_as.z80s:377    .data:00000207 paren_loop_cfap
solo_forth.for_as.z80s:377    .data:00000209 paren_loop_lfa
solo_forth.for_as.z80s:377    .data:0000020b paren_loop_nfa
solo_forth.for_as.z80s:1753   .text:0000077a paren_loop_pfa
solo_forth.for_as.z80s:1766   .text:0000077d paren_loop.step_in_de
solo_forth.for_as.z80s:1790   .text:00000797 paren_loop.negative_step
solo_forth.for_as.z80s:1798   .text:0000079c paren_loop.end
solo_forth.for_as.z80s:1809   .text:000007a7 paren_plus_loop_
solo_forth.for_as.z80s:377    .data:00000212 paren_plus_loop_cfap
solo_forth.for_as.z80s:377    .data:00000214 paren_plus_loop_lfa
solo_forth.for_as.z80s:377    .data:00000216 paren_plus_loop_nfa
solo_forth.for_as.z80s:1809   .text:000007a9 paren_plus_loop_pfa
solo_forth.for_as.z80s:1836   .text:000007ad paren_do_
solo_forth.for_as.z80s:377    .data:0000021e paren_do_cfap
solo_forth.for_as.z80s:377    .data:00000220 paren_do_lfa
solo_forth.for_as.z80s:377    .data:00000222 paren_do_nfa
solo_forth.for_as.z80s:1836   .text:000007af paren_do_pfa
GAS LISTING solo_forth.for_as.z80s 			page 162


solo_forth.for_as.z80s:1872   .text:000007c3 paren_do83_
solo_forth.for_as.z80s:377    .data:00000227 paren_do83_cfap
solo_forth.for_as.z80s:377    .data:00000229 paren_do83_lfa
solo_forth.for_as.z80s:377    .data:0000022b paren_do83_nfa
solo_forth.for_as.z80s:1872   .text:000007c5 paren_do83_pfa
solo_forth.for_as.z80s:1876   .text:000007c7 paren_do83.de_hl
solo_forth.for_as.z80s:1906   .text:000007e8 paren_question_do83_
solo_forth.for_as.z80s:377    .data:00000232 paren_question_do83_cfap
solo_forth.for_as.z80s:377    .data:00000234 paren_question_do83_lfa
solo_forth.for_as.z80s:377    .data:00000236 paren_question_do83_nfa
solo_forth.for_as.z80s:1906   .text:000007ea paren_question_do83_pfa
solo_forth.for_as.z80s:1917   .text:000007f5 question_do.equals
solo_forth.for_as.z80s:1920   .text:000007f8 question_do83_
solo_forth.for_as.z80s:377    .data:0000023e question_do83_cfap
solo_forth.for_as.z80s:377    .data:00000240 question_do83_lfa
solo_forth.for_as.z80s:377    .data:00000242 question_do83_nfa
solo_forth.for_as.z80s:1920   .text:000007fa question_do83_pfa
solo_forth.for_as.z80s:4380   .text:00000f68 compile_
solo_forth.for_as.z80s:1929   .text:00000805 do83_
solo_forth.for_as.z80s:377    .data:00000248 do83_cfap
solo_forth.for_as.z80s:377    .data:0000024a do83_lfa
solo_forth.for_as.z80s:377    .data:0000024c do83_nfa
solo_forth.for_as.z80s:1929   .text:00000807 do83_pfa
solo_forth.for_as.z80s:1938   .text:00000812 loop83_
solo_forth.for_as.z80s:377    .data:00000251 loop83_cfap
solo_forth.for_as.z80s:377    .data:00000253 loop83_lfa
solo_forth.for_as.z80s:377    .data:00000255 loop83_nfa
solo_forth.for_as.z80s:1938   .text:00000814 loop83_pfa
solo_forth.for_as.z80s:4358   .text:00000f3d question_pairs_
solo_forth.for_as.z80s:1957   .text:00000821 paren_loop83_
solo_forth.for_as.z80s:377    .data:0000025c paren_loop83_cfap
solo_forth.for_as.z80s:377    .data:0000025e paren_loop83_lfa
solo_forth.for_as.z80s:377    .data:00000260 paren_loop83_nfa
solo_forth.for_as.z80s:1957   .text:00000823 paren_loop83_pfa
solo_forth.for_as.z80s:1976   .text:0000083a paren_loop83.loop
solo_forth.for_as.z80s:2077   .text:00000844 i_
solo_forth.for_as.z80s:377    .data:00000269 i_cfap
solo_forth.for_as.z80s:377    .data:0000026b i_lfa
solo_forth.for_as.z80s:377    .data:0000026d i_nfa
solo_forth.for_as.z80s:3122   .text:00000b51 r_fetch_pfa
solo_forth.for_as.z80s:2088   .text:00000846 digit_
solo_forth.for_as.z80s:377    .data:0000026f digit_cfap
solo_forth.for_as.z80s:377    .data:00000271 digit_lfa
solo_forth.for_as.z80s:377    .data:00000273 digit_nfa
solo_forth.for_as.z80s:2088   .text:00000848 digit_pfa
solo_forth.for_as.z80s:3558   .text:00000cd3 false_pfa
solo_forth.for_as.z80s:2110   .text:0000085c digit.test_value
solo_forth.for_as.z80s:3570   .text:00000cdb true_pfa
solo_forth.for_as.z80s:2118   .text:00000865 paren_find_
solo_forth.for_as.z80s:377    .data:00000279 paren_find_cfap
solo_forth.for_as.z80s:377    .data:0000027b paren_find_lfa
solo_forth.for_as.z80s:377    .data:0000027d paren_find_nfa
solo_forth.for_as.z80s:2118   .text:00000867 paren_find_pfa
solo_forth.for_as.z80s:2150   .text:00000877 paren_find.string_address
solo_forth.for_as.z80s:2144   .text:00000872 paren_find.begin
solo_forth.for_as.z80s:2206   .text:000008a9 paren_find.nfa_backup
solo_forth.for_as.z80s:2204   .text:000008a8 paren_find.not_a_match
GAS LISTING solo_forth.for_as.z80s 			page 163


solo_forth.for_as.z80s:2160   .text:00000881 paren_find.compare_next_char
solo_forth.for_as.z80s:2189   .text:0000089d paren_find.end
solo_forth.for_as.z80s:2221   .text:000008be scan_
solo_forth.for_as.z80s:377    .data:00000284 scan_cfap
solo_forth.for_as.z80s:377    .data:00000286 scan_lfa
solo_forth.for_as.z80s:377    .data:00000288 scan_nfa
solo_forth.for_as.z80s:2221   .text:000008c0 scan_pfa
solo_forth.for_as.z80s:2241   .text:000008ca scan.begin
solo_forth.for_as.z80s:2252   .text:000008d4 skip_
solo_forth.for_as.z80s:377    .data:0000028d skip_cfap
solo_forth.for_as.z80s:377    .data:0000028f skip_lfa
solo_forth.for_as.z80s:377    .data:00000291 skip_nfa
solo_forth.for_as.z80s:2252   .text:000008d6 skip_pfa
solo_forth.for_as.z80s:2262   .text:000008d8 skip.begin
solo_forth.for_as.z80s:2270   .text:000008e1 chan_
solo_forth.for_as.z80s:377    .data:00000296 chan_cfap
solo_forth.for_as.z80s:377    .data:00000298 chan_lfa
solo_forth.for_as.z80s:377    .data:0000029a chan_nfa
solo_forth.for_as.z80s:2270   .text:000008e3 chan_pfa
solo_forth.for_as.z80s:2288   .text:000008ec emit_
solo_forth.for_as.z80s:377    .data:0000029f emit_cfap
solo_forth.for_as.z80s:377    .data:000002a1 emit_lfa
solo_forth.for_as.z80s:377    .data:000002a3 emit_nfa
solo_forth.for_as.z80s:2288   .text:000008ee emit_pfa
solo_forth.for_as.z80s:2298   .text:000008f8 paren_emit_
solo_forth.for_as.z80s:3548   .text:00000cc9 one_
solo_forth.for_as.z80s:3694   .text:00000d24 out_
solo_forth.for_as.z80s:377    .data:000002a8 paren_emit_cfap
solo_forth.for_as.z80s:377    .data:000002aa paren_emit_lfa
solo_forth.for_as.z80s:377    .data:000002ac paren_emit_nfa
solo_forth.for_as.z80s:2298   .text:000008fa paren_emit_pfa
solo_forth.for_as.z80s:2325   .text:00000903 printer_
solo_forth.for_as.z80s:377    .data:000002b3 printer_cfap
solo_forth.for_as.z80s:377    .data:000002b5 printer_lfa
solo_forth.for_as.z80s:377    .data:000002b7 printer_nfa
solo_forth.for_as.z80s:2325   .text:00000905 printer_pfa
solo_forth.for_as.z80s:2332   .text:0000090c display_
solo_forth.for_as.z80s:377    .data:000002bf display_cfap
solo_forth.for_as.z80s:377    .data:000002c1 display_lfa
solo_forth.for_as.z80s:377    .data:000002c3 display_nfa
solo_forth.for_as.z80s:2332   .text:0000090e display_pfa
solo_forth.for_as.z80s:3553   .text:00000ccd two_
solo_forth.for_as.z80s:2339   .text:00000914 key_question_
solo_forth.for_as.z80s:377    .data:000002cb key_question_cfap
solo_forth.for_as.z80s:377    .data:000002cd key_question_lfa
solo_forth.for_as.z80s:377    .data:000002cf key_question_nfa
solo_forth.for_as.z80s:2339   .text:00000916 key_question_pfa
solo_forth.for_as.z80s:2353   .text:00000920 decode_table_
solo_forth.for_as.z80s:377    .data:000002d4 decode_table_cfap
solo_forth.for_as.z80s:377    .data:000002d6 decode_table_lfa
solo_forth.for_as.z80s:377    .data:000002d8 decode_table_nfa
solo_forth.for_as.z80s:2353   .text:00000922 decode_table_pfa
solo_forth.for_as.z80s:2369   .text:00000933 decode_char_
solo_forth.for_as.z80s:377    .data:000002e5 decode_char_cfap
solo_forth.for_as.z80s:377    .data:000002e7 decode_char_lfa
solo_forth.for_as.z80s:377    .data:000002e9 decode_char_nfa
solo_forth.for_as.z80s:2369   .text:00000935 decode_char_pfa
GAS LISTING solo_forth.for_as.z80s 			page 164


solo_forth.for_as.z80s:2381   .text:00000939 decode_char.begin
solo_forth.for_as.z80s:2387   .text:0000093c paren_key_
solo_forth.for_as.z80s:377    .data:000002f5 paren_key_cfap
solo_forth.for_as.z80s:377    .data:000002f7 paren_key_lfa
solo_forth.for_as.z80s:377    .data:000002f9 paren_key_nfa
solo_forth.for_as.z80s:2387   .text:0000093e paren_key_pfa
solo_forth.for_as.z80s:2395   .text:00000948 previous_key
solo_forth.for_as.z80s:2391   .text:00000944 paren_key_.begin
solo_forth.for_as.z80s:2406   .text:00000957 key_
solo_forth.for_as.z80s:377    .data:000002ff key_cfap
solo_forth.for_as.z80s:377    .data:00000301 key_lfa
solo_forth.for_as.z80s:377    .data:00000303 key_nfa
solo_forth.for_as.z80s:2406   .text:00000959 key_pfa
solo_forth.for_as.z80s:2419   .text:0000095c key.begin
solo_forth.for_as.z80s:2427   .text:0000096b key.end
solo_forth.for_as.z80s:2435   .text:00000976 xkey_
solo_forth.for_as.z80s:377    .data:00000307 xkey_cfap
solo_forth.for_as.z80s:377    .data:00000309 xkey_lfa
solo_forth.for_as.z80s:377    .data:0000030b xkey_nfa
solo_forth.for_as.z80s:2435   .text:00000978 xkey_pfa
solo_forth.for_as.z80s:2459   .text:00000979 xkey.new_key
solo_forth.for_as.z80s:2469   .text:00000983 xkey.wait_for_key
solo_forth.for_as.z80s:2487   .text:00000996 xkey.translate
solo_forth.for_as.z80s:2488   .text:00000996 xkey.left_bracket
solo_forth.for_as.z80s:2492   .text:0000099c xkey.right_bracket
solo_forth.for_as.z80s:2496   .text:000009a2 xkey.tilde
solo_forth.for_as.z80s:2500   .text:000009a8 xkey.vertical_bar
solo_forth.for_as.z80s:2504   .text:000009ae xkey.backslash
solo_forth.for_as.z80s:2508   .text:000009b4 xkey.left_curly_bracket
solo_forth.for_as.z80s:2512   .text:000009ba xkey.right_curly_bracket
solo_forth.for_as.z80s:2517   .text:000009c0 xkey.end
solo_forth.for_as.z80s:2538   .text:000009cd cr_
solo_forth.for_as.z80s:377    .data:00000310 cr_cfap
solo_forth.for_as.z80s:377    .data:00000312 cr_lfa
solo_forth.for_as.z80s:377    .data:00000314 cr_nfa
solo_forth.for_as.z80s:2538   .text:000009cf cr_pfa
solo_forth.for_as.z80s:377    .data:00000317 cmove_up_cfap
solo_forth.for_as.z80s:377    .data:00000319 cmove_up_lfa
solo_forth.for_as.z80s:377    .data:0000031b cmove_up_nfa
solo_forth.for_as.z80s:2553   .text:000009dc cmove_up_pfa
solo_forth.for_as.z80s:377    .data:00000322 cmove_cfap
solo_forth.for_as.z80s:377    .data:00000324 cmove_lfa
solo_forth.for_as.z80s:377    .data:00000326 cmove_nfa
solo_forth.for_as.z80s:2564   .text:000009e8 cmove_pfa
solo_forth.for_as.z80s:377    .data:0000032c move_cfap
solo_forth.for_as.z80s:377    .data:0000032e move_lfa
solo_forth.for_as.z80s:377    .data:00000330 move_nfa
solo_forth.for_as.z80s:2575   .text:000009f4 move_pfa
solo_forth.for_as.z80s:2586   .text:000009f7 move.do
solo_forth.for_as.z80s:2593   .text:000009fe smove_
solo_forth.for_as.z80s:377    .data:00000335 smove_cfap
solo_forth.for_as.z80s:377    .data:00000337 smove_lfa
solo_forth.for_as.z80s:377    .data:00000339 smove_nfa
solo_forth.for_as.z80s:2593   .text:00000a00 smove_pfa
solo_forth.for_as.z80s:2612   .text:00000a06 u_m_star_
solo_forth.for_as.z80s:377    .data:0000033f u_m_star_cfap
solo_forth.for_as.z80s:377    .data:00000341 u_m_star_lfa
GAS LISTING solo_forth.for_as.z80s 			page 165


solo_forth.for_as.z80s:377    .data:00000343 u_m_star_nfa
solo_forth.for_as.z80s:2612   .text:00000a08 u_m_star_pfa
solo_forth.for_as.z80s:2631   .text:00000a10 u_slash_mod_
solo_forth.for_as.z80s:377    .data:00000347 u_slash_mod_cfap
solo_forth.for_as.z80s:377    .data:00000349 u_slash_mod_lfa
solo_forth.for_as.z80s:377    .data:0000034b u_slash_mod_nfa
solo_forth.for_as.z80s:2631   .text:00000a12 u_slash_mod_pfa
solo_forth.for_as.z80s:2668   .text:00000a2b l60a0h
solo_forth.for_as.z80s:2697   .text:00000a4b l60c0h
solo_forth.for_as.z80s:2670   .text:00000a2d l60a2h
solo_forth.for_as.z80s:2678   .text:00000a35 l60aah
solo_forth.for_as.z80s:2686   .text:00000a3f l60b4h
solo_forth.for_as.z80s:2692   .text:00000a46 l60bbh
solo_forth.for_as.z80s:2783   .text:00000a50 and_
solo_forth.for_as.z80s:377    .data:00000353 and_cfap
solo_forth.for_as.z80s:377    .data:00000355 and_lfa
solo_forth.for_as.z80s:377    .data:00000357 and_nfa
solo_forth.for_as.z80s:2783   .text:00000a52 and_pfa
solo_forth.for_as.z80s:2796   .text:00000a5d or_
solo_forth.for_as.z80s:377    .data:0000035b or_cfap
solo_forth.for_as.z80s:377    .data:0000035d or_lfa
solo_forth.for_as.z80s:377    .data:0000035f or_nfa
solo_forth.for_as.z80s:2796   .text:00000a5f or_pfa
solo_forth.for_as.z80s:2809   .text:00000a6a xor_
solo_forth.for_as.z80s:377    .data:00000362 xor_cfap
solo_forth.for_as.z80s:377    .data:00000364 xor_lfa
solo_forth.for_as.z80s:377    .data:00000366 xor_nfa
solo_forth.for_as.z80s:2809   .text:00000a6c xor_pfa
solo_forth.for_as.z80s:2822   .text:00000a77 np_
solo_forth.for_as.z80s:377    .data:0000036a np_cfap
solo_forth.for_as.z80s:377    .data:0000036c np_lfa
solo_forth.for_as.z80s:377    .data:0000036e np_nfa
solo_forth.for_as.z80s:2822   .text:00000a79 np_pfa
solo_forth.for_as.z80s:2827   .text:00000a7b np0_
solo_forth.for_as.z80s:377    .data:00000371 np0_cfap
solo_forth.for_as.z80s:377    .data:00000373 np0_lfa
solo_forth.for_as.z80s:377    .data:00000375 np0_nfa
solo_forth.for_as.z80s:2827   .text:00000a7d np0_pfa
solo_forth.for_as.z80s:2834   .text:00000a7f np_fetch_
solo_forth.for_as.z80s:377    .data:00000379 np_fetch_cfap
solo_forth.for_as.z80s:377    .data:0000037b np_fetch_lfa
solo_forth.for_as.z80s:377    .data:0000037d np_fetch_nfa
solo_forth.for_as.z80s:2834   .text:00000a81 np_fetch_pfa
solo_forth.for_as.z80s:2840   .text:00000a87 np_store_
solo_forth.for_as.z80s:377    .data:00000381 np_store_cfap
solo_forth.for_as.z80s:377    .data:00000383 np_store_lfa
solo_forth.for_as.z80s:377    .data:00000385 np_store_nfa
solo_forth.for_as.z80s:2840   .text:00000a89 np_store_pfa
solo_forth.for_as.z80s:2848   .text:00000a8f comma_np_
solo_forth.for_as.z80s:377    .data:00000389 comma_np_cfap
solo_forth.for_as.z80s:377    .data:0000038b comma_np_lfa
solo_forth.for_as.z80s:377    .data:0000038d comma_np_nfa
solo_forth.for_as.z80s:2848   .text:00000a91 comma_np_pfa
solo_forth.for_as.z80s:2865   .text:00000a9d sp_fetch_
solo_forth.for_as.z80s:377    .data:00000391 sp_fetch_cfap
solo_forth.for_as.z80s:377    .data:00000393 sp_fetch_lfa
solo_forth.for_as.z80s:377    .data:00000395 sp_fetch_nfa
GAS LISTING solo_forth.for_as.z80s 			page 166


solo_forth.for_as.z80s:2865   .text:00000a9f sp_fetch_pfa
solo_forth.for_as.z80s:2872   .text:00000aa6 sp_store_
solo_forth.for_as.z80s:377    .data:00000399 sp_store_cfap
solo_forth.for_as.z80s:377    .data:0000039b sp_store_lfa
solo_forth.for_as.z80s:377    .data:0000039d sp_store_nfa
solo_forth.for_as.z80s:2872   .text:00000aa8 sp_store_pfa
solo_forth.for_as.z80s:2887   .text:00000aac rp_
solo_forth.for_as.z80s:377    .data:000003a1 rp_cfap
solo_forth.for_as.z80s:377    .data:000003a3 rp_lfa
solo_forth.for_as.z80s:377    .data:000003a5 rp_nfa
solo_forth.for_as.z80s:2887   .text:00000aae rp_pfa
solo_forth.for_as.z80s:2892   .text:00000ab0 rp_fetch_
solo_forth.for_as.z80s:377    .data:000003a8 rp_fetch_cfap
solo_forth.for_as.z80s:377    .data:000003aa rp_fetch_lfa
solo_forth.for_as.z80s:377    .data:000003ac rp_fetch_nfa
solo_forth.for_as.z80s:2892   .text:00000ab2 rp_fetch_pfa
solo_forth.for_as.z80s:2898   .text:00000ab8 rp_store_
solo_forth.for_as.z80s:377    .data:000003b0 rp_store_cfap
solo_forth.for_as.z80s:377    .data:000003b2 rp_store_lfa
solo_forth.for_as.z80s:377    .data:000003b4 rp_store_nfa
solo_forth.for_as.z80s:2898   .text:00000aba rp_store_pfa
solo_forth.for_as.z80s:377    .data:000003b8 semicolon_s_cfap
solo_forth.for_as.z80s:377    .data:000003ba semicolon_s_lfa
solo_forth.for_as.z80s:377    .data:000003bc semicolon_s_nfa
solo_forth.for_as.z80s:2914   .text:00000ac2 semicolon_s_pfa
solo_forth.for_as.z80s:2944   .text:00000ace pick_
solo_forth.for_as.z80s:377    .data:000003bf pick_cfap
solo_forth.for_as.z80s:377    .data:000003c1 pick_lfa
solo_forth.for_as.z80s:377    .data:000003c3 pick_nfa
solo_forth.for_as.z80s:2944   .text:00000ad0 pick_pfa
solo_forth.for_as.z80s:2952   .text:00000ad6 unloop_
solo_forth.for_as.z80s:377    .data:000003c8 unloop_cfap
solo_forth.for_as.z80s:377    .data:000003ca unloop_lfa
solo_forth.for_as.z80s:377    .data:000003cc unloop_nfa
solo_forth.for_as.z80s:3059   .text:00000b10 two_r_drop_pfa
solo_forth.for_as.z80s:2970   .text:00000ad8 exhaust_
solo_forth.for_as.z80s:377    .data:000003d3 exhaust_cfap
solo_forth.for_as.z80s:377    .data:000003d5 exhaust_lfa
solo_forth.for_as.z80s:377    .data:000003d7 exhaust_nfa
solo_forth.for_as.z80s:2970   .text:00000ada exhaust_pfa
solo_forth.for_as.z80s:2999   .text:00000ae6 question_exhaust_
solo_forth.for_as.z80s:377    .data:000003df question_exhaust_cfap
solo_forth.for_as.z80s:377    .data:000003e1 question_exhaust_lfa
solo_forth.for_as.z80s:377    .data:000003e3 question_exhaust_nfa
solo_forth.for_as.z80s:2999   .text:00000ae8 question_exhaust_pfa
solo_forth.for_as.z80s:377    .data:000003ec to_r_cfap
solo_forth.for_as.z80s:377    .data:000003ee to_r_lfa
solo_forth.for_as.z80s:377    .data:000003f0 to_r_nfa
solo_forth.for_as.z80s:3023   .text:00000af2 to_r_pfa
solo_forth.for_as.z80s:377    .data:000003f3 from_r_cfap
solo_forth.for_as.z80s:377    .data:000003f5 from_r_lfa
solo_forth.for_as.z80s:377    .data:000003f7 from_r_nfa
solo_forth.for_as.z80s:3041   .text:00000b01 from_r_pfa
solo_forth.for_as.z80s:3059   .text:00000b0e two_r_drop_
solo_forth.for_as.z80s:377    .data:000003fa two_r_drop_cfap
solo_forth.for_as.z80s:377    .data:000003fc two_r_drop_lfa
solo_forth.for_as.z80s:377    .data:000003fe two_r_drop_nfa
GAS LISTING solo_forth.for_as.z80s 			page 167


solo_forth.for_as.z80s:3074   .text:00000b1c r_drop_
solo_forth.for_as.z80s:377    .data:00000405 r_drop_cfap
solo_forth.for_as.z80s:377    .data:00000407 r_drop_lfa
solo_forth.for_as.z80s:377    .data:00000409 r_drop_nfa
solo_forth.for_as.z80s:3074   .text:00000b1e r_drop_pfa
solo_forth.for_as.z80s:377    .data:0000040f two_to_r_cfap
solo_forth.for_as.z80s:377    .data:00000411 two_to_r_lfa
solo_forth.for_as.z80s:377    .data:00000413 two_to_r_nfa
solo_forth.for_as.z80s:3089   .text:00000b2a two_to_r_pfa
solo_forth.for_as.z80s:3383   .text:00000c3e two_store.into_hl_pointer
solo_forth.for_as.z80s:377    .data:00000417 two_from_r_cfap
solo_forth.for_as.z80s:377    .data:00000419 two_from_r_lfa
solo_forth.for_as.z80s:377    .data:0000041b two_from_r_nfa
solo_forth.for_as.z80s:3104   .text:00000b39 two_from_r_pfa
solo_forth.for_as.z80s:3361   .text:00000c2e two_fetch_pfa
solo_forth.for_as.z80s:3116   .text:00000b47 two_r_fetch_
solo_forth.for_as.z80s:377    .data:0000041f two_r_fetch_cfap
solo_forth.for_as.z80s:377    .data:00000421 two_r_fetch_lfa
solo_forth.for_as.z80s:377    .data:00000423 two_r_fetch_nfa
solo_forth.for_as.z80s:3116   .text:00000b49 two_r_fetch_pfa
solo_forth.for_as.z80s:3364   .text:00000c2f two_fetch.hl
solo_forth.for_as.z80s:377    .data:00000427 r_fetch_cfap
solo_forth.for_as.z80s:377    .data:00000429 r_fetch_lfa
solo_forth.for_as.z80s:377    .data:0000042b r_fetch_nfa
solo_forth.for_as.z80s:3128   .text:00000b57 zero_equals_
solo_forth.for_as.z80s:377    .data:0000042e zero_equals_cfap
solo_forth.for_as.z80s:377    .data:00000430 zero_equals_lfa
solo_forth.for_as.z80s:377    .data:00000432 zero_equals_nfa
solo_forth.for_as.z80s:3128   .text:00000b59 zero_equals_pfa
solo_forth.for_as.z80s:3137   .text:00000b62 zero_not_equals_
solo_forth.for_as.z80s:377    .data:00000435 zero_not_equals_cfap
solo_forth.for_as.z80s:377    .data:00000437 zero_not_equals_lfa
solo_forth.for_as.z80s:377    .data:00000439 zero_not_equals_nfa
solo_forth.for_as.z80s:3137   .text:00000b64 zero_not_equals_pfa
solo_forth.for_as.z80s:3146   .text:00000b6d zero_less_than_
solo_forth.for_as.z80s:377    .data:0000043d zero_less_than_cfap
solo_forth.for_as.z80s:377    .data:0000043f zero_less_than_lfa
solo_forth.for_as.z80s:377    .data:00000441 zero_less_than_nfa
solo_forth.for_as.z80s:3146   .text:00000b6f zero_less_than_pfa
solo_forth.for_as.z80s:3149   .text:00000b70 zero_less_.hl
solo_forth.for_as.z80s:3156   .text:00000b72 true_if_cy
solo_forth.for_as.z80s:3161   .text:00000b78 zero_greater_than_
solo_forth.for_as.z80s:377    .data:00000444 zero_greater_than_cfap
solo_forth.for_as.z80s:377    .data:00000446 zero_greater_than_lfa
solo_forth.for_as.z80s:377    .data:00000448 zero_greater_than_nfa
solo_forth.for_as.z80s:3161   .text:00000b7a zero_greater_than_pfa
solo_forth.for_as.z80s:3951   .text:00000dfa is_de_less_than_hl
solo_forth.for_as.z80s:377    .data:0000044b plus_cfap
solo_forth.for_as.z80s:377    .data:0000044d plus_lfa
solo_forth.for_as.z80s:377    .data:0000044f plus_nfa
solo_forth.for_as.z80s:3170   .text:00000b83 plus_pfa
solo_forth.for_as.z80s:3178   .text:00000b89 d_plus_
solo_forth.for_as.z80s:377    .data:00000451 d_plus_cfap
solo_forth.for_as.z80s:377    .data:00000453 d_plus_lfa
solo_forth.for_as.z80s:377    .data:00000455 d_plus_nfa
solo_forth.for_as.z80s:3178   .text:00000b8b d_plus_pfa
solo_forth.for_as.z80s:377    .data:00000458 negate_cfap
GAS LISTING solo_forth.for_as.z80s 			page 168


solo_forth.for_as.z80s:377    .data:0000045a negate_lfa
solo_forth.for_as.z80s:377    .data:0000045c negate_nfa
solo_forth.for_as.z80s:3204   .text:00000b9d negate_pfa
solo_forth.for_as.z80s:3213   .text:00000ba7 dnegate_
solo_forth.for_as.z80s:377    .data:00000463 dnegate_cfap
solo_forth.for_as.z80s:377    .data:00000465 dnegate_lfa
solo_forth.for_as.z80s:377    .data:00000467 dnegate_nfa
solo_forth.for_as.z80s:3213   .text:00000ba9 dnegate_pfa
solo_forth.for_as.z80s:3234   .text:00000bbd nip_
solo_forth.for_as.z80s:377    .data:0000046f nip_cfap
solo_forth.for_as.z80s:377    .data:00000471 nip_lfa
solo_forth.for_as.z80s:377    .data:00000473 nip_nfa
solo_forth.for_as.z80s:3234   .text:00000bbf nip_pfa
solo_forth.for_as.z80s:3241   .text:00000bc4 tuck_
solo_forth.for_as.z80s:377    .data:00000477 tuck_cfap
solo_forth.for_as.z80s:377    .data:00000479 tuck_lfa
solo_forth.for_as.z80s:377    .data:0000047b tuck_nfa
solo_forth.for_as.z80s:3241   .text:00000bc6 tuck_pfa
solo_forth.for_as.z80s:3249   .text:00000bcc over_
solo_forth.for_as.z80s:377    .data:00000480 over_cfap
solo_forth.for_as.z80s:377    .data:00000482 over_lfa
solo_forth.for_as.z80s:377    .data:00000484 over_nfa
solo_forth.for_as.z80s:3249   .text:00000bce over_pfa
solo_forth.for_as.z80s:3257   .text:00000bd4 drop_
solo_forth.for_as.z80s:377    .data:00000489 drop_cfap
solo_forth.for_as.z80s:377    .data:0000048b drop_lfa
solo_forth.for_as.z80s:377    .data:0000048d drop_nfa
solo_forth.for_as.z80s:3257   .text:00000bd6 drop_pfa
solo_forth.for_as.z80s:377    .data:00000492 swap_cfap
solo_forth.for_as.z80s:377    .data:00000494 swap_lfa
solo_forth.for_as.z80s:377    .data:00000496 swap_nfa
solo_forth.for_as.z80s:3263   .text:00000bdb swap_pfa
solo_forth.for_as.z80s:377    .data:0000049b dup_cfap
solo_forth.for_as.z80s:377    .data:0000049d dup_lfa
solo_forth.for_as.z80s:377    .data:0000049f dup_nfa
solo_forth.for_as.z80s:3270   .text:00000be2 dup_pfa
solo_forth.for_as.z80s:377    .data:000004a3 two_dup_cfap
solo_forth.for_as.z80s:377    .data:000004a5 two_dup_lfa
solo_forth.for_as.z80s:377    .data:000004a7 two_dup_nfa
solo_forth.for_as.z80s:3277   .text:00000be9 two_dup_pfa
solo_forth.for_as.z80s:377    .data:000004ac plus_store_cfap
solo_forth.for_as.z80s:377    .data:000004ae plus_store_lfa
solo_forth.for_as.z80s:377    .data:000004b0 plus_store_nfa
solo_forth.for_as.z80s:3286   .text:00000bf2 plus_store_pfa
solo_forth.for_as.z80s:377    .data:000004b3 off_cfap
solo_forth.for_as.z80s:377    .data:000004b5 off_lfa
solo_forth.for_as.z80s:377    .data:000004b7 off_nfa
solo_forth.for_as.z80s:3300   .text:00000bff off_pfa
solo_forth.for_as.z80s:3309   .text:00000c07 on_
solo_forth.for_as.z80s:377    .data:000004bb on_cfap
solo_forth.for_as.z80s:377    .data:000004bd on_lfa
solo_forth.for_as.z80s:377    .data:000004bf on_nfa
solo_forth.for_as.z80s:3309   .text:00000c09 on_pfa
solo_forth.for_as.z80s:3324   .text:00000c11 toggle_
solo_forth.for_as.z80s:377    .data:000004c2 toggle_cfap
solo_forth.for_as.z80s:377    .data:000004c4 toggle_lfa
solo_forth.for_as.z80s:377    .data:000004c6 toggle_nfa
GAS LISTING solo_forth.for_as.z80s 			page 169


solo_forth.for_as.z80s:3324   .text:00000c13 toggle_pfa
solo_forth.for_as.z80s:377    .data:000004cd fetch_cfap
solo_forth.for_as.z80s:377    .data:000004cf fetch_lfa
solo_forth.for_as.z80s:377    .data:000004d1 fetch_nfa
solo_forth.for_as.z80s:3342   .text:00000c1c fetch_pfa
solo_forth.for_as.z80s:3353   .text:00000c23 c_fetch_
solo_forth.for_as.z80s:377    .data:000004d3 c_fetch_cfap
solo_forth.for_as.z80s:377    .data:000004d5 c_fetch_lfa
solo_forth.for_as.z80s:377    .data:000004d7 c_fetch_nfa
solo_forth.for_as.z80s:3353   .text:00000c25 c_fetch_pfa
solo_forth.for_as.z80s:3361   .text:00000c2c two_fetch_
solo_forth.for_as.z80s:377    .data:000004da two_fetch_cfap
solo_forth.for_as.z80s:377    .data:000004dc two_fetch_lfa
solo_forth.for_as.z80s:377    .data:000004de two_fetch_nfa
solo_forth.for_as.z80s:3380   .text:00000c3b two_store_
solo_forth.for_as.z80s:377    .data:000004e1 two_store_cfap
solo_forth.for_as.z80s:377    .data:000004e3 two_store_lfa
solo_forth.for_as.z80s:377    .data:000004e5 two_store_nfa
solo_forth.for_as.z80s:3380   .text:00000c3d two_store_pfa
solo_forth.for_as.z80s:377    .data:000004e8 store_cfap
solo_forth.for_as.z80s:377    .data:000004ea store_lfa
solo_forth.for_as.z80s:377    .data:000004ec store_nfa
solo_forth.for_as.z80s:3400   .text:00000c4b store_pfa
solo_forth.for_as.z80s:3403   .text:00000c4c store.into_hl_pointer
solo_forth.for_as.z80s:3405   .text:00000c4d store.de_into_hl_pointer
solo_forth.for_as.z80s:3412   .text:00000c52 c_store_
solo_forth.for_as.z80s:377    .data:000004ee c_store_cfap
solo_forth.for_as.z80s:377    .data:000004f0 c_store_lfa
solo_forth.for_as.z80s:377    .data:000004f2 c_store_nfa
solo_forth.for_as.z80s:3412   .text:00000c54 c_store_pfa
solo_forth.for_as.z80s:3420   .text:00000c59 colon_
solo_forth.for_as.z80s:377    .data:000004f5 colon_cfap
solo_forth.for_as.z80s:377    .data:000004f7 colon_lfa
solo_forth.for_as.z80s:377    .data:000004f9 colon_nfa
solo_forth.for_as.z80s:3420   .text:00000c5b colon_pfa
solo_forth.for_as.z80s:4349   .text:00000f32 question_exec_
solo_forth.for_as.z80s:4318   .text:00000f03 store_csp_
solo_forth.for_as.z80s:5365   .text:000013c5 header_
solo_forth.for_as.z80s:4416   .text:00000f98 right_bracket_
solo_forth.for_as.z80s:4459   .text:00000fc9 paren_semicolon_code_
solo_forth.for_as.z80s:3436   .text:00000c72 do_colon.end
solo_forth.for_as.z80s:3440   .text:00000c74 noname_
solo_forth.for_as.z80s:377    .data:000004fb noname_cfap
solo_forth.for_as.z80s:377    .data:000004fd noname_lfa
solo_forth.for_as.z80s:377    .data:000004ff noname_nfa
solo_forth.for_as.z80s:3440   .text:00000c76 noname_pfa
solo_forth.for_as.z80s:3455   .text:00000c88 semicolon_
solo_forth.for_as.z80s:377    .data:00000507 semicolon_cfap
solo_forth.for_as.z80s:377    .data:00000509 semicolon_lfa
solo_forth.for_as.z80s:377    .data:0000050b semicolon_nfa
solo_forth.for_as.z80s:3455   .text:00000c8a semicolon_pfa
solo_forth.for_as.z80s:4410   .text:00000f90 left_bracket_
solo_forth.for_as.z80s:377    .data:0000050d noop_cfap
solo_forth.for_as.z80s:377    .data:0000050f noop_lfa
solo_forth.for_as.z80s:377    .data:00000511 noop_nfa
solo_forth.for_as.z80s:3475   .text:00000c98 constant_
solo_forth.for_as.z80s:377    .data:00000516 constant_cfap
GAS LISTING solo_forth.for_as.z80s 			page 170


solo_forth.for_as.z80s:377    .data:00000518 constant_lfa
solo_forth.for_as.z80s:377    .data:0000051a constant_nfa
solo_forth.for_as.z80s:3475   .text:00000c9a constant_pfa
solo_forth.for_as.z80s:3485   .text:00000ca5 variable_
solo_forth.for_as.z80s:377    .data:00000523 variable_cfap
solo_forth.for_as.z80s:377    .data:00000525 variable_lfa
solo_forth.for_as.z80s:377    .data:00000527 variable_nfa
solo_forth.for_as.z80s:3485   .text:00000ca7 variable_pfa
solo_forth.for_as.z80s:3843   .text:00000d82 cell_
solo_forth.for_as.z80s:3878   .text:00000d98 allot_
solo_forth.for_as.z80s:3509   .text:00000caf user_
solo_forth.for_as.z80s:377    .data:00000530 user_cfap
solo_forth.for_as.z80s:377    .data:00000532 user_lfa
solo_forth.for_as.z80s:377    .data:00000534 user_nfa
solo_forth.for_as.z80s:3509   .text:00000cb1 user_pfa
solo_forth.for_as.z80s:3516   .text:00000cb5 do_user
solo_forth.for_as.z80s:3528   .text:00000cc1 msg_scr_
solo_forth.for_as.z80s:377    .data:00000539 msg_scr_cfap
solo_forth.for_as.z80s:377    .data:0000053b msg_scr_lfa
solo_forth.for_as.z80s:377    .data:0000053d msg_scr_nfa
solo_forth.for_as.z80s:3528   .text:00000cc3 msg_scr_pfa
solo_forth.for_as.z80s:377    .data:00000545 zero_cfap
solo_forth.for_as.z80s:377    .data:00000547 zero_lfa
solo_forth.for_as.z80s:377    .data:00000549 zero_nfa
solo_forth.for_as.z80s:3543   .text:00000cc7 zero_pfa
solo_forth.for_as.z80s:377    .data:0000054b one_cfap
solo_forth.for_as.z80s:377    .data:0000054d one_lfa
solo_forth.for_as.z80s:377    .data:0000054f one_nfa
solo_forth.for_as.z80s:3548   .text:00000ccb one_pfa
solo_forth.for_as.z80s:377    .data:00000551 two_cfap
solo_forth.for_as.z80s:377    .data:00000553 two_lfa
solo_forth.for_as.z80s:377    .data:00000555 two_nfa
solo_forth.for_as.z80s:3553   .text:00000ccf two_pfa
solo_forth.for_as.z80s:3558   .text:00000cd1 false_
solo_forth.for_as.z80s:377    .data:00000557 false_cfap
solo_forth.for_as.z80s:377    .data:00000559 false_lfa
solo_forth.for_as.z80s:377    .data:0000055b false_nfa
solo_forth.for_as.z80s:3570   .text:00000cd9 true_
solo_forth.for_as.z80s:377    .data:00000561 true_cfap
solo_forth.for_as.z80s:377    .data:00000563 true_lfa
solo_forth.for_as.z80s:377    .data:00000565 true_nfa
solo_forth.for_as.z80s:3582   .text:00000ce1 b_l_
solo_forth.for_as.z80s:377    .data:0000056a b_l_cfap
solo_forth.for_as.z80s:377    .data:0000056c b_l_lfa
solo_forth.for_as.z80s:377    .data:0000056e b_l_nfa
solo_forth.for_as.z80s:3582   .text:00000ce3 b_l_pfa
solo_forth.for_as.z80s:3593   .text:00000ce5 c_slash_l_
solo_forth.for_as.z80s:377    .data:00000571 c_slash_l_cfap
solo_forth.for_as.z80s:377    .data:00000573 c_slash_l_lfa
solo_forth.for_as.z80s:377    .data:00000575 c_slash_l_nfa
solo_forth.for_as.z80s:3593   .text:00000ce7 c_slash_l_pfa
solo_forth.for_as.z80s:3598   .text:00000ce9 l_slash_scr_
solo_forth.for_as.z80s:377    .data:00000579 l_slash_scr_cfap
solo_forth.for_as.z80s:377    .data:0000057b l_slash_scr_lfa
solo_forth.for_as.z80s:377    .data:0000057d l_slash_scr_nfa
solo_forth.for_as.z80s:3598   .text:00000ceb l_slash_scr_pfa
solo_forth.for_as.z80s:3603   .text:00000ced disk_buffer_
GAS LISTING solo_forth.for_as.z80s 			page 171


solo_forth.for_as.z80s:377    .data:00000583 disk_buffer_cfap
solo_forth.for_as.z80s:377    .data:00000585 disk_buffer_lfa
solo_forth.for_as.z80s:377    .data:00000587 disk_buffer_nfa
solo_forth.for_as.z80s:3603   .text:00000cef disk_buffer_pfa
solo_forth.for_as.z80s:3608   .text:00000cf1 b_slash_buf_
solo_forth.for_as.z80s:377    .data:00000593 b_slash_buf_cfap
solo_forth.for_as.z80s:377    .data:00000595 b_slash_buf_lfa
solo_forth.for_as.z80s:377    .data:00000597 b_slash_buf_nfa
solo_forth.for_as.z80s:3608   .text:00000cf3 b_slash_buf_pfa
solo_forth.for_as.z80s:3613   .text:00000cf5 b_slash_scr_
solo_forth.for_as.z80s:377    .data:0000059d b_slash_scr_cfap
solo_forth.for_as.z80s:377    .data:0000059f b_slash_scr_lfa
solo_forth.for_as.z80s:377    .data:000005a1 b_slash_scr_nfa
solo_forth.for_as.z80s:3613   .text:00000cf7 b_slash_scr_pfa
solo_forth.for_as.z80s:3618   .text:00000cf9 scr_slash_disk_
solo_forth.for_as.z80s:377    .data:000005a7 scr_slash_disk_cfap
solo_forth.for_as.z80s:377    .data:000005a9 scr_slash_disk_lfa
solo_forth.for_as.z80s:377    .data:000005ab scr_slash_disk_nfa
solo_forth.for_as.z80s:3618   .text:00000cfb scr_slash_disk_pfa
solo_forth.for_as.z80s:3623   .text:00000cfd hash_vocs_
solo_forth.for_as.z80s:377    .data:000005b4 hash_vocs_cfap
solo_forth.for_as.z80s:377    .data:000005b6 hash_vocs_lfa
solo_forth.for_as.z80s:377    .data:000005b8 hash_vocs_nfa
solo_forth.for_as.z80s:3623   .text:00000cff hash_vocs_pfa
solo_forth.for_as.z80s:3628   .text:00000d01 plus_origin_
solo_forth.for_as.z80s:377    .data:000005be plus_origin_cfap
solo_forth.for_as.z80s:377    .data:000005c0 plus_origin_lfa
solo_forth.for_as.z80s:377    .data:000005c2 plus_origin_nfa
solo_forth.for_as.z80s:3628   .text:00000d03 plus_origin_pfa
solo_forth.for_as.z80s:3645   .text:00000d0b sp0_
solo_forth.for_as.z80s:377    .data:000005ca sp0_cfap
solo_forth.for_as.z80s:377    .data:000005cc sp0_lfa
solo_forth.for_as.z80s:377    .data:000005ce sp0_nfa
solo_forth.for_as.z80s:3645   .text:00000d0d sp0_pfa
solo_forth.for_as.z80s:3650   .text:00000d0e rp0_
solo_forth.for_as.z80s:377    .data:000005d2 rp0_cfap
solo_forth.for_as.z80s:377    .data:000005d4 rp0_lfa
solo_forth.for_as.z80s:377    .data:000005d6 rp0_nfa
solo_forth.for_as.z80s:3650   .text:00000d10 rp0_pfa
solo_forth.for_as.z80s:3655   .text:00000d11 width_
solo_forth.for_as.z80s:377    .data:000005da width_cfap
solo_forth.for_as.z80s:377    .data:000005dc width_lfa
solo_forth.for_as.z80s:377    .data:000005de width_nfa
solo_forth.for_as.z80s:3655   .text:00000d13 width_pfa
solo_forth.for_as.z80s:3662   .text:00000d14 warning_
solo_forth.for_as.z80s:377    .data:000005e4 warning_cfap
solo_forth.for_as.z80s:377    .data:000005e6 warning_lfa
solo_forth.for_as.z80s:377    .data:000005e8 warning_nfa
solo_forth.for_as.z80s:3662   .text:00000d16 warning_pfa
solo_forth.for_as.z80s:3667   .text:00000d17 dp_
solo_forth.for_as.z80s:377    .data:000005f0 dp_cfap
solo_forth.for_as.z80s:377    .data:000005f2 dp_lfa
solo_forth.for_as.z80s:377    .data:000005f4 dp_nfa
solo_forth.for_as.z80s:3667   .text:00000d19 dp_pfa
solo_forth.for_as.z80s:3675   .text:00000d1a voc_link_
solo_forth.for_as.z80s:377    .data:000005f7 voc_link_cfap
solo_forth.for_as.z80s:377    .data:000005f9 voc_link_lfa
GAS LISTING solo_forth.for_as.z80s 			page 172


solo_forth.for_as.z80s:377    .data:000005fb voc_link_nfa
solo_forth.for_as.z80s:3675   .text:00000d1c voc_link_pfa
solo_forth.for_as.z80s:3680   .text:00000d1e blk_
solo_forth.for_as.z80s:377    .data:00000604 blk_cfap
solo_forth.for_as.z80s:377    .data:00000606 blk_lfa
solo_forth.for_as.z80s:377    .data:00000608 blk_nfa
solo_forth.for_as.z80s:3680   .text:00000d20 blk_pfa
solo_forth.for_as.z80s:3687   .text:00000d21 to_in_
solo_forth.for_as.z80s:377    .data:0000060c to_in_cfap
solo_forth.for_as.z80s:377    .data:0000060e to_in_lfa
solo_forth.for_as.z80s:377    .data:00000610 to_in_nfa
solo_forth.for_as.z80s:3687   .text:00000d23 to_in_pfa
solo_forth.for_as.z80s:377    .data:00000614 out_cfap
solo_forth.for_as.z80s:377    .data:00000616 out_lfa
solo_forth.for_as.z80s:377    .data:00000618 out_nfa
solo_forth.for_as.z80s:3694   .text:00000d26 out_pfa
solo_forth.for_as.z80s:3701   .text:00000d27 scr_
solo_forth.for_as.z80s:377    .data:0000061c scr_cfap
solo_forth.for_as.z80s:377    .data:0000061e scr_lfa
solo_forth.for_as.z80s:377    .data:00000620 scr_nfa
solo_forth.for_as.z80s:3701   .text:00000d29 scr_pfa
solo_forth.for_as.z80s:377    .data:00000626 context_cfap
solo_forth.for_as.z80s:377    .data:00000628 context_lfa
solo_forth.for_as.z80s:377    .data:0000062a context_nfa
solo_forth.for_as.z80s:3706   .text:00000d2c context_pfa
solo_forth.for_as.z80s:3711   .text:00000d2d current_
solo_forth.for_as.z80s:377    .data:00000632 current_cfap
solo_forth.for_as.z80s:377    .data:00000634 current_lfa
solo_forth.for_as.z80s:377    .data:00000636 current_nfa
solo_forth.for_as.z80s:3711   .text:00000d2f current_pfa
solo_forth.for_as.z80s:3716   .text:00000d30 state_
solo_forth.for_as.z80s:377    .data:0000063e state_cfap
solo_forth.for_as.z80s:377    .data:00000640 state_lfa
solo_forth.for_as.z80s:377    .data:00000642 state_nfa
solo_forth.for_as.z80s:3716   .text:00000d32 state_pfa
solo_forth.for_as.z80s:377    .data:00000648 base_cfap
solo_forth.for_as.z80s:377    .data:0000064a base_lfa
solo_forth.for_as.z80s:377    .data:0000064c base_nfa
solo_forth.for_as.z80s:3721   .text:00000d35 base_pfa
solo_forth.for_as.z80s:3726   .text:00000d36 dpl_
solo_forth.for_as.z80s:377    .data:00000651 dpl_cfap
solo_forth.for_as.z80s:377    .data:00000653 dpl_lfa
solo_forth.for_as.z80s:377    .data:00000655 dpl_nfa
solo_forth.for_as.z80s:3726   .text:00000d38 dpl_pfa
solo_forth.for_as.z80s:3731   .text:00000d39 fld_
solo_forth.for_as.z80s:377    .data:00000659 fld_cfap
solo_forth.for_as.z80s:377    .data:0000065b fld_lfa
solo_forth.for_as.z80s:377    .data:0000065d fld_nfa
solo_forth.for_as.z80s:3731   .text:00000d3b fld_pfa
solo_forth.for_as.z80s:3736   .text:00000d3c csp_
solo_forth.for_as.z80s:377    .data:00000661 csp_cfap
solo_forth.for_as.z80s:377    .data:00000663 csp_lfa
solo_forth.for_as.z80s:377    .data:00000665 csp_nfa
solo_forth.for_as.z80s:3736   .text:00000d3e csp_pfa
solo_forth.for_as.z80s:3741   .text:00000d3f r_hash_
solo_forth.for_as.z80s:377    .data:00000669 r_hash_cfap
solo_forth.for_as.z80s:377    .data:0000066b r_hash_lfa
GAS LISTING solo_forth.for_as.z80s 			page 173


solo_forth.for_as.z80s:377    .data:0000066d r_hash_nfa
solo_forth.for_as.z80s:3741   .text:00000d41 r_hash_pfa
solo_forth.for_as.z80s:3747   .text:00000d42 hld_
solo_forth.for_as.z80s:377    .data:00000670 hld_cfap
solo_forth.for_as.z80s:377    .data:00000672 hld_lfa
solo_forth.for_as.z80s:377    .data:00000674 hld_nfa
solo_forth.for_as.z80s:3747   .text:00000d44 hld_pfa
solo_forth.for_as.z80s:3752   .text:00000d45 tib_
solo_forth.for_as.z80s:377    .data:00000678 tib_cfap
solo_forth.for_as.z80s:377    .data:0000067a tib_lfa
solo_forth.for_as.z80s:377    .data:0000067c tib_nfa
solo_forth.for_as.z80s:3752   .text:00000d47 tib_pfa
solo_forth.for_as.z80s:3765   .text:00000d49 number_tib_
solo_forth.for_as.z80s:377    .data:00000680 number_tib_cfap
solo_forth.for_as.z80s:377    .data:00000682 number_tib_lfa
solo_forth.for_as.z80s:377    .data:00000684 number_tib_nfa
solo_forth.for_as.z80s:3765   .text:00000d4b number_tib_pfa
solo_forth.for_as.z80s:3770   .text:00000d4d recurse_
solo_forth.for_as.z80s:377    .data:00000689 recurse_cfap
solo_forth.for_as.z80s:377    .data:0000068b recurse_lfa
solo_forth.for_as.z80s:377    .data:0000068d recurse_nfa
solo_forth.for_as.z80s:3770   .text:00000d4f recurse_pfa
solo_forth.for_as.z80s:4031   .text:00000e46 latest_
solo_forth.for_as.z80s:4294   .text:00000ee3 nfa_to_cfa_
solo_forth.for_as.z80s:3900   .text:00000dbe compile_comma_
solo_forth.for_as.z80s:377    .data:00000695 one_plus_cfap
solo_forth.for_as.z80s:377    .data:00000697 one_plus_lfa
solo_forth.for_as.z80s:377    .data:00000699 one_plus_nfa
solo_forth.for_as.z80s:3782   .text:00000d59 one_plus_pfa
solo_forth.for_as.z80s:3789   .text:00000d5e two_plus_
solo_forth.for_as.z80s:377    .data:0000069c two_plus_cfap
solo_forth.for_as.z80s:377    .data:0000069e two_plus_lfa
solo_forth.for_as.z80s:377    .data:000006a0 two_plus_nfa
solo_forth.for_as.z80s:3789   .text:00000d60 two_plus_pfa
solo_forth.for_as.z80s:3797   .text:00000d66 cell_minus_
solo_forth.for_as.z80s:377    .data:000006a3 cell_minus_cfap
solo_forth.for_as.z80s:377    .data:000006a5 cell_minus_lfa
solo_forth.for_as.z80s:377    .data:000006a7 cell_minus_nfa
solo_forth.for_as.z80s:3810   .text:00000d73 two_minus_pfa
solo_forth.for_as.z80s:377    .data:000006ad cell_plus_cfap
solo_forth.for_as.z80s:377    .data:000006af cell_plus_lfa
solo_forth.for_as.z80s:377    .data:000006b1 cell_plus_nfa
solo_forth.for_as.z80s:3803   .text:00000d6a one_minus_
solo_forth.for_as.z80s:377    .data:000006b7 one_minus_cfap
solo_forth.for_as.z80s:377    .data:000006b9 one_minus_lfa
solo_forth.for_as.z80s:377    .data:000006bb one_minus_nfa
solo_forth.for_as.z80s:3803   .text:00000d6c one_minus_pfa
solo_forth.for_as.z80s:3810   .text:00000d71 two_minus_
solo_forth.for_as.z80s:377    .data:000006be two_minus_cfap
solo_forth.for_as.z80s:377    .data:000006c0 two_minus_lfa
solo_forth.for_as.z80s:377    .data:000006c2 two_minus_nfa
solo_forth.for_as.z80s:3818   .text:00000d79 two_star_
solo_forth.for_as.z80s:377    .data:000006c5 two_star_cfap
solo_forth.for_as.z80s:377    .data:000006c7 two_star_lfa
solo_forth.for_as.z80s:377    .data:000006c9 two_star_nfa
solo_forth.for_as.z80s:3818   .text:00000d7b two_star_pfa
solo_forth.for_as.z80s:3840   .text:00000d80 cells_
GAS LISTING solo_forth.for_as.z80s 			page 174


solo_forth.for_as.z80s:377    .data:000006cc cells_cfap
solo_forth.for_as.z80s:377    .data:000006ce cells_lfa
solo_forth.for_as.z80s:377    .data:000006d0 cells_nfa
solo_forth.for_as.z80s:377    .data:000006d6 cell_cfap
solo_forth.for_as.z80s:377    .data:000006d8 cell_lfa
solo_forth.for_as.z80s:377    .data:000006da cell_nfa
solo_forth.for_as.z80s:3843   .text:00000d84 cell_pfa
solo_forth.for_as.z80s:3848   .text:00000d86 two_slash_
solo_forth.for_as.z80s:377    .data:000006df two_slash_cfap
solo_forth.for_as.z80s:377    .data:000006e1 two_slash_lfa
solo_forth.for_as.z80s:377    .data:000006e3 two_slash_nfa
solo_forth.for_as.z80s:3848   .text:00000d88 two_slash_pfa
solo_forth.for_as.z80s:377    .data:000006e6 here_cfap
solo_forth.for_as.z80s:377    .data:000006e8 here_lfa
solo_forth.for_as.z80s:377    .data:000006ea here_nfa
solo_forth.for_as.z80s:3872   .text:00000d92 here_pfa
solo_forth.for_as.z80s:377    .data:000006ef allot_cfap
solo_forth.for_as.z80s:377    .data:000006f1 allot_lfa
solo_forth.for_as.z80s:377    .data:000006f3 allot_nfa
solo_forth.for_as.z80s:3878   .text:00000d9a allot_pfa
solo_forth.for_as.z80s:3884   .text:00000da0 s_comma_
solo_forth.for_as.z80s:377    .data:000006f9 s_comma_cfap
solo_forth.for_as.z80s:377    .data:000006fb s_comma_lfa
solo_forth.for_as.z80s:377    .data:000006fd s_comma_nfa
solo_forth.for_as.z80s:3884   .text:00000da2 s_comma_pfa
solo_forth.for_as.z80s:377    .data:00000700 comma_cfap
solo_forth.for_as.z80s:377    .data:00000702 comma_lfa
solo_forth.for_as.z80s:377    .data:00000704 comma_nfa
solo_forth.for_as.z80s:3894   .text:00000db4 comma_pfa
solo_forth.for_as.z80s:377    .data:00000706 compile_comma_cfap
solo_forth.for_as.z80s:377    .data:00000708 compile_comma_lfa
solo_forth.for_as.z80s:377    .data:0000070a compile_comma_nfa
solo_forth.for_as.z80s:3900   .text:00000dc0 compile_comma_pfa
solo_forth.for_as.z80s:377    .data:00000713 c_comma_cfap
solo_forth.for_as.z80s:377    .data:00000715 c_comma_lfa
solo_forth.for_as.z80s:377    .data:00000717 c_comma_nfa
solo_forth.for_as.z80s:3912   .text:00000dc8 c_comma_pfa
solo_forth.for_as.z80s:3918   .text:00000dd2 minus_
solo_forth.for_as.z80s:377    .data:0000071a minus_cfap
solo_forth.for_as.z80s:377    .data:0000071c minus_lfa
solo_forth.for_as.z80s:377    .data:0000071e minus_nfa
solo_forth.for_as.z80s:3918   .text:00000dd4 minus_pfa
solo_forth.for_as.z80s:3927   .text:00000ddc not_equals_
solo_forth.for_as.z80s:377    .data:00000720 not_equals_cfap
solo_forth.for_as.z80s:377    .data:00000722 not_equals_lfa
solo_forth.for_as.z80s:377    .data:00000724 not_equals_nfa
solo_forth.for_as.z80s:3927   .text:00000dde not_equals_pfa
solo_forth.for_as.z80s:3932   .text:00000de3 false_if_z
solo_forth.for_as.z80s:3937   .text:00000de9 equals_
solo_forth.for_as.z80s:377    .data:00000727 equals_cfap
solo_forth.for_as.z80s:377    .data:00000729 equals_lfa
solo_forth.for_as.z80s:377    .data:0000072b equals_nfa
solo_forth.for_as.z80s:3937   .text:00000deb equals_pfa
solo_forth.for_as.z80s:3942   .text:00000df0 true_if_z
solo_forth.for_as.z80s:3947   .text:00000df6 less_than_
solo_forth.for_as.z80s:377    .data:0000072d less_than_cfap
solo_forth.for_as.z80s:377    .data:0000072f less_than_lfa
GAS LISTING solo_forth.for_as.z80s 			page 175


solo_forth.for_as.z80s:377    .data:00000731 less_than_nfa
solo_forth.for_as.z80s:3947   .text:00000df8 less_than_pfa
solo_forth.for_as.z80s:3961   .text:00000e03 u_greater_than_
solo_forth.for_as.z80s:377    .data:00000733 u_greater_than_cfap
solo_forth.for_as.z80s:377    .data:00000735 u_greater_than_lfa
solo_forth.for_as.z80s:377    .data:00000737 u_greater_than_nfa
solo_forth.for_as.z80s:3961   .text:00000e05 u_greater_than_pfa
solo_forth.for_as.z80s:3964   .text:00000e06 u_greater_than.hl
solo_forth.for_as.z80s:3973   .text:00000e0e u_less_than.de_hl
solo_forth.for_as.z80s:3969   .text:00000e0a u_less_than_
solo_forth.for_as.z80s:377    .data:0000073a u_less_than_cfap
solo_forth.for_as.z80s:377    .data:0000073c u_less_than_lfa
solo_forth.for_as.z80s:377    .data:0000073e u_less_than_nfa
solo_forth.for_as.z80s:3969   .text:00000e0c u_less_than_pfa
solo_forth.for_as.z80s:377    .data:00000741 greater_than_cfap
solo_forth.for_as.z80s:377    .data:00000743 greater_than_lfa
solo_forth.for_as.z80s:377    .data:00000745 greater_than_nfa
solo_forth.for_as.z80s:3983   .text:00000e19 greater_than_pfa
solo_forth.for_as.z80s:3990   .text:00000e1e rot_
solo_forth.for_as.z80s:377    .data:00000747 rot_cfap
solo_forth.for_as.z80s:377    .data:00000749 rot_lfa
solo_forth.for_as.z80s:377    .data:0000074b rot_nfa
solo_forth.for_as.z80s:3990   .text:00000e20 rot_pfa
solo_forth.for_as.z80s:3998   .text:00000e26 space_
solo_forth.for_as.z80s:377    .data:0000074f space_cfap
solo_forth.for_as.z80s:377    .data:00000751 space_lfa
solo_forth.for_as.z80s:377    .data:00000753 space_nfa
solo_forth.for_as.z80s:3998   .text:00000e28 space_pfa
solo_forth.for_as.z80s:4004   .text:00000e2e question_dup_
solo_forth.for_as.z80s:377    .data:00000759 question_dup_cfap
solo_forth.for_as.z80s:377    .data:0000075b question_dup_lfa
solo_forth.for_as.z80s:377    .data:0000075d question_dup_nfa
solo_forth.for_as.z80s:4004   .text:00000e30 question_dup_pfa
solo_forth.for_as.z80s:4009   .text:00000e38 question_dup.end
solo_forth.for_as.z80s:4013   .text:00000e3a lfa_to_nfa_
solo_forth.for_as.z80s:377    .data:00000762 lfa_to_nfa_cfap
solo_forth.for_as.z80s:377    .data:00000764 lfa_to_nfa_lfa
solo_forth.for_as.z80s:377    .data:00000766 lfa_to_nfa_nfa
solo_forth.for_as.z80s:4016   .text:00000e3c trail_
solo_forth.for_as.z80s:377    .data:0000076e trail_cfap
solo_forth.for_as.z80s:377    .data:00000770 trail_lfa
solo_forth.for_as.z80s:377    .data:00000772 trail_nfa
solo_forth.for_as.z80s:4016   .text:00000e3e trail_pfa
solo_forth.for_as.z80s:377    .data:00000778 latest_cfap
solo_forth.for_as.z80s:377    .data:0000077a latest_lfa
solo_forth.for_as.z80s:377    .data:0000077c latest_nfa
solo_forth.for_as.z80s:4031   .text:00000e48 latest_pfa
solo_forth.for_as.z80s:4046   .text:00000e50 pfa_to_lfa_
solo_forth.for_as.z80s:377    .data:00000783 pfa_to_lfa_cfap
solo_forth.for_as.z80s:377    .data:00000785 pfa_to_lfa_lfa
solo_forth.for_as.z80s:377    .data:00000787 pfa_to_lfa_nfa
solo_forth.for_as.z80s:4046   .text:00000e52 pfa_to_lfa_pfa
solo_forth.for_as.z80s:4051   .text:00000e56 pfa_to_cfa_
solo_forth.for_as.z80s:4075   .text:00000e62 cfa_to_nfa_
solo_forth.for_as.z80s:377    .data:0000078f pfa_to_cfa_cfap
solo_forth.for_as.z80s:377    .data:00000791 pfa_to_cfa_lfa
solo_forth.for_as.z80s:377    .data:00000793 pfa_to_cfa_nfa
GAS LISTING solo_forth.for_as.z80s 			page 176


solo_forth.for_as.z80s:4054   .text:00000e58 cfa_to_pfa_
solo_forth.for_as.z80s:377    .data:0000079b cfa_to_pfa_cfap
solo_forth.for_as.z80s:377    .data:0000079d cfa_to_pfa_lfa
solo_forth.for_as.z80s:377    .data:0000079f cfa_to_pfa_nfa
solo_forth.for_as.z80s:4057   .text:00000e5a pfa_to_nfa_
solo_forth.for_as.z80s:377    .data:000007a7 pfa_to_nfa_cfap
solo_forth.for_as.z80s:377    .data:000007a9 pfa_to_nfa_lfa
solo_forth.for_as.z80s:377    .data:000007ab pfa_to_nfa_nfa
solo_forth.for_as.z80s:4057   .text:00000e5c pfa_to_nfa_pfa
solo_forth.for_as.z80s:377    .data:000007b3 cfa_to_nfa_cfap
solo_forth.for_as.z80s:377    .data:000007b5 cfa_to_nfa_lfa
solo_forth.for_as.z80s:377    .data:000007b7 cfa_to_nfa_nfa
solo_forth.for_as.z80s:4075   .text:00000e64 cfa_to_nfa_pfa
solo_forth.for_as.z80s:4084   .text:00000e70 cfa_to_nfa.begin_0
solo_forth.for_as.z80s:4087   .text:00000e71 cfa_to_nfa.begin_1
solo_forth.for_as.z80s:4116   .text:00000e8f cfap_to_lfa_
solo_forth.for_as.z80s:377    .data:000007bf cfap_to_lfa_cfap
solo_forth.for_as.z80s:377    .data:000007c1 cfap_to_lfa_lfa
solo_forth.for_as.z80s:377    .data:000007c3 cfap_to_lfa_nfa
solo_forth.for_as.z80s:4120   .text:00000e91 nfa_to_lfa_
solo_forth.for_as.z80s:377    .data:000007cc nfa_to_lfa_cfap
solo_forth.for_as.z80s:377    .data:000007ce nfa_to_lfa_lfa
solo_forth.for_as.z80s:377    .data:000007d0 nfa_to_lfa_nfa
solo_forth.for_as.z80s:4123   .text:00000e93 c_store_bank_
solo_forth.for_as.z80s:377    .data:000007d8 c_store_bank_cfap
solo_forth.for_as.z80s:377    .data:000007da c_store_bank_lfa
solo_forth.for_as.z80s:377    .data:000007dc c_store_bank_nfa
solo_forth.for_as.z80s:4123   .text:00000e95 c_store_bank_pfa
solo_forth.for_as.z80s:4150   .text:00000e9f store_bank_
solo_forth.for_as.z80s:377    .data:000007e3 store_bank_cfap
solo_forth.for_as.z80s:377    .data:000007e5 store_bank_lfa
solo_forth.for_as.z80s:377    .data:000007e7 store_bank_nfa
solo_forth.for_as.z80s:4150   .text:00000ea1 store_bank_pfa
solo_forth.for_as.z80s:4166   .text:00000eab c_fetch_bank_
solo_forth.for_as.z80s:377    .data:000007ed c_fetch_bank_cfap
solo_forth.for_as.z80s:377    .data:000007ef c_fetch_bank_lfa
solo_forth.for_as.z80s:377    .data:000007f1 c_fetch_bank_nfa
solo_forth.for_as.z80s:4166   .text:00000ead c_fetch_bank_pfa
solo_forth.for_as.z80s:4193   .text:00000eb7 fetch_bank_
solo_forth.for_as.z80s:377    .data:000007f8 fetch_bank_cfap
solo_forth.for_as.z80s:377    .data:000007fa fetch_bank_lfa
solo_forth.for_as.z80s:377    .data:000007fc fetch_bank_nfa
solo_forth.for_as.z80s:4193   .text:00000eb9 fetch_bank_pfa
solo_forth.for_as.z80s:4222   .text:00000ec3 c_fetch_n_
solo_forth.for_as.z80s:377    .data:00000802 c_fetch_n_cfap
solo_forth.for_as.z80s:377    .data:00000804 c_fetch_n_lfa
solo_forth.for_as.z80s:377    .data:00000806 c_fetch_n_nfa
solo_forth.for_as.z80s:4222   .text:00000ec5 c_fetch_n_pfa
solo_forth.for_as.z80s:4242   .text:00000ecb fetch_n_
solo_forth.for_as.z80s:377    .data:0000080a fetch_n_cfap
solo_forth.for_as.z80s:377    .data:0000080c fetch_n_lfa
solo_forth.for_as.z80s:377    .data:0000080e fetch_n_nfa
solo_forth.for_as.z80s:4242   .text:00000ecd fetch_n_pfa
solo_forth.for_as.z80s:4262   .text:00000ed3 c_store_n_
solo_forth.for_as.z80s:377    .data:00000811 c_store_n_cfap
solo_forth.for_as.z80s:377    .data:00000813 c_store_n_lfa
solo_forth.for_as.z80s:377    .data:00000815 c_store_n_nfa
GAS LISTING solo_forth.for_as.z80s 			page 177


solo_forth.for_as.z80s:4262   .text:00000ed5 c_store_n_pfa
solo_forth.for_as.z80s:4278   .text:00000edb store_n_
solo_forth.for_as.z80s:377    .data:00000819 store_n_cfap
solo_forth.for_as.z80s:377    .data:0000081b store_n_lfa
solo_forth.for_as.z80s:377    .data:0000081d store_n_nfa
solo_forth.for_as.z80s:4278   .text:00000edd store_n_pfa
solo_forth.for_as.z80s:377    .data:00000820 nfa_to_cfa_cfap
solo_forth.for_as.z80s:377    .data:00000822 nfa_to_cfa_lfa
solo_forth.for_as.z80s:377    .data:00000824 nfa_to_cfa_nfa
solo_forth.for_as.z80s:4294   .text:00000ee5 nfa_to_cfa_pfa
solo_forth.for_as.z80s:4307   .text:00000eee nfa_to_string_
solo_forth.for_as.z80s:377    .data:0000082c nfa_to_string_cfap
solo_forth.for_as.z80s:377    .data:0000082e nfa_to_string_lfa
solo_forth.for_as.z80s:377    .data:00000830 nfa_to_string_nfa
solo_forth.for_as.z80s:4307   .text:00000ef0 nfa_to_string_pfa
solo_forth.for_as.z80s:377    .data:0000083b store_csp_cfap
solo_forth.for_as.z80s:377    .data:0000083d store_csp_lfa
solo_forth.for_as.z80s:377    .data:0000083f store_csp_nfa
solo_forth.for_as.z80s:4318   .text:00000f05 store_csp_pfa
solo_forth.for_as.z80s:4324   .text:00000f0d question_error_
solo_forth.for_as.z80s:377    .data:00000844 question_error_cfap
solo_forth.for_as.z80s:377    .data:00000846 question_error_lfa
solo_forth.for_as.z80s:377    .data:00000848 question_error_nfa
solo_forth.for_as.z80s:4324   .text:00000f0f question_error_pfa
solo_forth.for_as.z80s:4331   .text:00000f19 question_error.no_error
solo_forth.for_as.z80s:5338   .text:00001380 error_
solo_forth.for_as.z80s:377    .data:0000084f comp_question_cfap
solo_forth.for_as.z80s:377    .data:00000851 comp_question_lfa
solo_forth.for_as.z80s:377    .data:00000853 comp_question_nfa
solo_forth.for_as.z80s:4336   .text:00000f1f comp_question_pfa
solo_forth.for_as.z80s:377    .data:00000859 question_comp_cfap
solo_forth.for_as.z80s:377    .data:0000085b question_comp_lfa
solo_forth.for_as.z80s:377    .data:0000085d question_comp_nfa
solo_forth.for_as.z80s:4342   .text:00000f27 question_comp_pfa
solo_forth.for_as.z80s:377    .data:00000863 question_exec_cfap
solo_forth.for_as.z80s:377    .data:00000865 question_exec_lfa
solo_forth.for_as.z80s:377    .data:00000867 question_exec_nfa
solo_forth.for_as.z80s:4349   .text:00000f34 question_exec_pfa
solo_forth.for_as.z80s:377    .data:0000086d question_pairs_cfap
solo_forth.for_as.z80s:377    .data:0000086f question_pairs_lfa
solo_forth.for_as.z80s:377    .data:00000871 question_pairs_nfa
solo_forth.for_as.z80s:4358   .text:00000f3f question_pairs_pfa
solo_forth.for_as.z80s:377    .data:00000878 question_csp_cfap
solo_forth.for_as.z80s:377    .data:0000087a question_csp_lfa
solo_forth.for_as.z80s:377    .data:0000087c question_csp_nfa
solo_forth.for_as.z80s:4366   .text:00000f4a question_csp_pfa
solo_forth.for_as.z80s:4373   .text:00000f59 question_loading_
solo_forth.for_as.z80s:377    .data:00000881 question_loading_cfap
solo_forth.for_as.z80s:377    .data:00000883 question_loading_lfa
solo_forth.for_as.z80s:377    .data:00000885 question_loading_nfa
solo_forth.for_as.z80s:4373   .text:00000f5b question_loading_pfa
solo_forth.for_as.z80s:377    .data:0000088e compile_cfap
solo_forth.for_as.z80s:377    .data:00000890 compile_lfa
solo_forth.for_as.z80s:377    .data:00000892 compile_nfa
solo_forth.for_as.z80s:4380   .text:00000f6a compile_pfa
solo_forth.for_as.z80s:4387   .text:00000f7a postpone_
solo_forth.for_as.z80s:377    .data:0000089a postpone_cfap
GAS LISTING solo_forth.for_as.z80s 			page 178


solo_forth.for_as.z80s:377    .data:0000089c postpone_lfa
solo_forth.for_as.z80s:377    .data:0000089e postpone_nfa
solo_forth.for_as.z80s:4387   .text:00000f7c postpone_pfa
solo_forth.for_as.z80s:6820   .text:0000196f defined_
solo_forth.for_as.z80s:6851   .text:0000197f question_defined_
solo_forth.for_as.z80s:4405   .text:00000f8c postpone.end
solo_forth.for_as.z80s:377    .data:000008a7 left_bracket_cfap
solo_forth.for_as.z80s:377    .data:000008a9 left_bracket_lfa
solo_forth.for_as.z80s:377    .data:000008ab left_bracket_nfa
solo_forth.for_as.z80s:4410   .text:00000f92 left_bracket_pfa
solo_forth.for_as.z80s:377    .data:000008ad right_bracket_cfap
solo_forth.for_as.z80s:377    .data:000008af right_bracket_lfa
solo_forth.for_as.z80s:377    .data:000008b1 right_bracket_nfa
solo_forth.for_as.z80s:4416   .text:00000f9a right_bracket_pfa
solo_forth.for_as.z80s:377    .data:000008b3 smudge_cfap
solo_forth.for_as.z80s:377    .data:000008b5 smudge_lfa
solo_forth.for_as.z80s:377    .data:000008b7 smudge_nfa
solo_forth.for_as.z80s:4422   .text:00000fa2 smudge_pfa
solo_forth.for_as.z80s:377    .data:000008be hex_cfap
solo_forth.for_as.z80s:377    .data:000008c0 hex_lfa
solo_forth.for_as.z80s:377    .data:000008c2 hex_nfa
solo_forth.for_as.z80s:4445   .text:00000fb5 hex_pfa
solo_forth.for_as.z80s:4452   .text:00000fbe decimal_
solo_forth.for_as.z80s:377    .data:000008c6 decimal_cfap
solo_forth.for_as.z80s:377    .data:000008c8 decimal_lfa
solo_forth.for_as.z80s:377    .data:000008ca decimal_nfa
solo_forth.for_as.z80s:4452   .text:00000fc0 decimal_pfa
solo_forth.for_as.z80s:377    .data:000008d2 paren_semicolon_code_cfap
solo_forth.for_as.z80s:377    .data:000008d4 paren_semicolon_code_lfa
solo_forth.for_as.z80s:377    .data:000008d6 paren_semicolon_code_nfa
solo_forth.for_as.z80s:4459   .text:00000fcb paren_semicolon_code_pfa
solo_forth.for_as.z80s:4483   .text:00000fd5 semicolon_code_
solo_forth.for_as.z80s:377    .data:000008de semicolon_code_cfap
solo_forth.for_as.z80s:377    .data:000008e0 semicolon_code_lfa
solo_forth.for_as.z80s:377    .data:000008e2 semicolon_code_nfa
solo_forth.for_as.z80s:4483   .text:00000fd7 semicolon_code_pfa
solo_forth.for_as.z80s:4503   .text:00000fe5 does_
solo_forth.for_as.z80s:377    .data:000008e8 does_cfap
solo_forth.for_as.z80s:377    .data:000008ea does_lfa
solo_forth.for_as.z80s:377    .data:000008ec does_nfa
solo_forth.for_as.z80s:4503   .text:00000fe7 does_pfa
solo_forth.for_as.z80s:4511   .text:00000ff8 do_does
solo_forth.for_as.z80s:377    .data:000008f2 count_cfap
solo_forth.for_as.z80s:377    .data:000008f4 count_lfa
solo_forth.for_as.z80s:377    .data:000008f6 count_nfa
solo_forth.for_as.z80s:4529   .text:00001009 count_pfa
solo_forth.for_as.z80s:4540   .text:00001010 bounds_
solo_forth.for_as.z80s:377    .data:000008fc bounds_cfap
solo_forth.for_as.z80s:377    .data:000008fe bounds_lfa
solo_forth.for_as.z80s:377    .data:00000900 bounds_nfa
solo_forth.for_as.z80s:4540   .text:00001012 bounds_pfa
solo_forth.for_as.z80s:4546   .text:0000101a type_
solo_forth.for_as.z80s:377    .data:00000907 type_cfap
solo_forth.for_as.z80s:377    .data:00000909 type_lfa
solo_forth.for_as.z80s:377    .data:0000090b type_nfa
solo_forth.for_as.z80s:4546   .text:0000101c type_pfa
solo_forth.for_as.z80s:4560   .text:00001032 type.empty_string
GAS LISTING solo_forth.for_as.z80s 			page 179


solo_forth.for_as.z80s:4555   .text:00001026 type.do
solo_forth.for_as.z80s:4562   .text:00001034 type.end
solo_forth.for_as.z80s:4567   .text:00001036 minus_trailing_
solo_forth.for_as.z80s:377    .data:00000910 minus_trailing_cfap
solo_forth.for_as.z80s:377    .data:00000912 minus_trailing_lfa
solo_forth.for_as.z80s:377    .data:00000914 minus_trailing_nfa
solo_forth.for_as.z80s:4567   .text:00001038 minus_trailing_pfa
solo_forth.for_as.z80s:4576   .text:0000103d minus_trailing.begin
solo_forth.for_as.z80s:4591   .text:0000104d paren_dot_quote_
solo_forth.for_as.z80s:377    .data:0000091e paren_dot_quote_cfap
solo_forth.for_as.z80s:377    .data:00000920 paren_dot_quote_lfa
solo_forth.for_as.z80s:377    .data:00000922 paren_dot_quote_nfa
solo_forth.for_as.z80s:4591   .text:0000104f paren_dot_quote_pfa
solo_forth.for_as.z80s:4600   .text:00001061 dot_quote_
solo_forth.for_as.z80s:377    .data:00000927 dot_quote_cfap
solo_forth.for_as.z80s:377    .data:00000929 dot_quote_lfa
solo_forth.for_as.z80s:377    .data:0000092b dot_quote_nfa
solo_forth.for_as.z80s:4600   .text:00001063 dot_quote_pfa
solo_forth.for_as.z80s:4609   .text:00001076 dot_quote.interpreting
solo_forth.for_as.z80s:7826   .text:00001d32 exit_
solo_forth.for_as.z80s:4614   .text:0000107a span_
solo_forth.for_as.z80s:377    .data:0000092e span_cfap
solo_forth.for_as.z80s:377    .data:00000930 span_lfa
solo_forth.for_as.z80s:377    .data:00000932 span_nfa
solo_forth.for_as.z80s:4614   .text:0000107c span_pfa
solo_forth.for_as.z80s:4629   .text:0000107e accept_
solo_forth.for_as.z80s:377    .data:00000937 accept_cfap
solo_forth.for_as.z80s:377    .data:00000939 accept_lfa
solo_forth.for_as.z80s:377    .data:0000093b accept_nfa
solo_forth.for_as.z80s:4629   .text:00001080 accept_pfa
solo_forth.for_as.z80s:4690   .text:00001082 expect_
solo_forth.for_as.z80s:377    .data:00000942 expect_cfap
solo_forth.for_as.z80s:377    .data:00000944 expect_lfa
solo_forth.for_as.z80s:377    .data:00000946 expect_nfa
solo_forth.for_as.z80s:4690   .text:00001084 expect_pfa
solo_forth.for_as.z80s:4764   .text:000010f9 expect.end
solo_forth.for_as.z80s:4717   .text:00001094 expect.do
solo_forth.for_as.z80s:4737   .text:000010be expect.maybe_carriage_return
solo_forth.for_as.z80s:4761   .text:000010eb expect.loop
solo_forth.for_as.z80s:4758   .text:000010e9 expect.emit
solo_forth.for_as.z80s:4747   .text:000010d3 expect.control_char
solo_forth.for_as.z80s:4754   .text:000010e3 expect.ordinary_key
solo_forth.for_as.z80s:4756   .text:000010e5 expect.store
solo_forth.for_as.z80s:4769   .text:000010fd query_
solo_forth.for_as.z80s:377    .data:0000094d query_cfap
solo_forth.for_as.z80s:377    .data:0000094f query_lfa
solo_forth.for_as.z80s:377    .data:00000951 query_nfa
solo_forth.for_as.z80s:4769   .text:000010ff query_pfa
solo_forth.for_as.z80s:4887   .text:0000115d blank_
solo_forth.for_as.z80s:6322   .text:000017f2 stream_end_
solo_forth.for_as.z80s:377    .data:00000957 x_cfap
solo_forth.for_as.z80s:377    .data:00000959 x_lfa
solo_forth.for_as.z80s:377    .data:0000095b x_nfa
solo_forth.for_as.z80s:4802   .text:0000111d x_pfa
solo_forth.for_as.z80s:4844   .text:0000113d x.exit
solo_forth.for_as.z80s:4856   .text:0000113f x.end
solo_forth.for_as.z80s:4860   .text:00001141 fill_
GAS LISTING solo_forth.for_as.z80s 			page 180


solo_forth.for_as.z80s:377    .data:0000095d fill_cfap
solo_forth.for_as.z80s:377    .data:0000095f fill_lfa
solo_forth.for_as.z80s:377    .data:00000961 fill_nfa
solo_forth.for_as.z80s:4860   .text:00001143 fill_pfa
solo_forth.for_as.z80s:4863   .text:00001144 fill.e
solo_forth.for_as.z80s:4868   .text:00001148 fill.do
solo_forth.for_as.z80s:4876   .text:00001153 fill.end
solo_forth.for_as.z80s:377    .data:00000966 erase_cfap
solo_forth.for_as.z80s:377    .data:00000968 erase_lfa
solo_forth.for_as.z80s:377    .data:0000096a erase_nfa
solo_forth.for_as.z80s:4881   .text:00001158 erase_pfa
solo_forth.for_as.z80s:377    .data:00000970 blank_cfap
solo_forth.for_as.z80s:377    .data:00000972 blank_lfa
solo_forth.for_as.z80s:377    .data:00000974 blank_nfa
solo_forth.for_as.z80s:4887   .text:0000115f blank_pfa
solo_forth.for_as.z80s:4893   .text:00001164 hold_
solo_forth.for_as.z80s:377    .data:0000097a hold_cfap
solo_forth.for_as.z80s:377    .data:0000097c hold_lfa
solo_forth.for_as.z80s:377    .data:0000097e hold_nfa
solo_forth.for_as.z80s:4893   .text:00001166 hold_pfa
solo_forth.for_as.z80s:4900   .text:00001176 pad_
solo_forth.for_as.z80s:377    .data:00000983 pad_cfap
solo_forth.for_as.z80s:377    .data:00000985 pad_lfa
solo_forth.for_as.z80s:377    .data:00000987 pad_nfa
solo_forth.for_as.z80s:4900   .text:00001178 pad_pfa
solo_forth.for_as.z80s:4908   .text:00001181 stream_
solo_forth.for_as.z80s:377    .data:0000098b stream_cfap
solo_forth.for_as.z80s:377    .data:0000098d stream_lfa
solo_forth.for_as.z80s:377    .data:0000098f stream_nfa
solo_forth.for_as.z80s:4908   .text:00001183 stream_pfa
solo_forth.for_as.z80s:4922   .text:00001193 stream.terminal
solo_forth.for_as.z80s:6474   .text:0000185e block_
solo_forth.for_as.z80s:4924   .text:00001195 stream.end
solo_forth.for_as.z80s:4929   .text:0000119d parsed_
solo_forth.for_as.z80s:377    .data:00000996 parsed_cfap
solo_forth.for_as.z80s:377    .data:00000998 parsed_lfa
solo_forth.for_as.z80s:377    .data:0000099a parsed_nfa
solo_forth.for_as.z80s:4929   .text:0000119f parsed_pfa
solo_forth.for_as.z80s:377    .data:000009a1 parse_cfap
solo_forth.for_as.z80s:377    .data:000009a3 parse_lfa
solo_forth.for_as.z80s:377    .data:000009a5 parse_nfa
solo_forth.for_as.z80s:4943   .text:000011a9 parse_pfa
solo_forth.for_as.z80s:4962   .text:000011b5 parse_name_
solo_forth.for_as.z80s:377    .data:000009ab parse_name_cfap
solo_forth.for_as.z80s:377    .data:000009ad parse_name_lfa
solo_forth.for_as.z80s:377    .data:000009af parse_name_nfa
solo_forth.for_as.z80s:4962   .text:000011b7 parse_name_pfa
solo_forth.for_as.z80s:4979   .text:000011d5 word_
solo_forth.for_as.z80s:377    .data:000009ba word_cfap
solo_forth.for_as.z80s:377    .data:000009bc word_lfa
solo_forth.for_as.z80s:377    .data:000009be word_nfa
solo_forth.for_as.z80s:4979   .text:000011d7 word_pfa
solo_forth.for_as.z80s:5039   .text:00001210 paren_number_
solo_forth.for_as.z80s:377    .data:000009c3 paren_number_cfap
solo_forth.for_as.z80s:377    .data:000009c5 paren_number_lfa
solo_forth.for_as.z80s:377    .data:000009c7 paren_number_nfa
solo_forth.for_as.z80s:5039   .text:00001212 paren_number_pfa
GAS LISTING solo_forth.for_as.z80s 			page 181


solo_forth.for_as.z80s:5052   .text:00001212 paren_number.begin
solo_forth.for_as.z80s:5073   .text:0000124e paren_number.end
solo_forth.for_as.z80s:5070   .text:00001248 paren_number.decimal_point_done
solo_forth.for_as.z80s:5078   .text:00001252 number_
solo_forth.for_as.z80s:377    .data:000009d0 number_cfap
solo_forth.for_as.z80s:377    .data:000009d2 number_lfa
solo_forth.for_as.z80s:377    .data:000009d4 number_nfa
solo_forth.for_as.z80s:5078   .text:00001254 number_pfa
solo_forth.for_as.z80s:5109   .text:0000126f number.begin
solo_forth.for_as.z80s:5125   .text:00001294 number.a_blank
solo_forth.for_as.z80s:5131   .text:0000129e number.end
solo_forth.for_as.z80s:5135   .text:000012a0 upper_
solo_forth.for_as.z80s:377    .data:000009db upper_cfap
solo_forth.for_as.z80s:377    .data:000009dd upper_lfa
solo_forth.for_as.z80s:377    .data:000009df upper_nfa
solo_forth.for_as.z80s:5135   .text:000012a2 upper_pfa
solo_forth.for_as.z80s:5149   .text:000012ab upper.a
solo_forth.for_as.z80s:5159   .text:000012b4 uppers_
solo_forth.for_as.z80s:377    .data:000009e5 uppers_cfap
solo_forth.for_as.z80s:377    .data:000009e7 uppers_lfa
solo_forth.for_as.z80s:377    .data:000009e9 uppers_nfa
solo_forth.for_as.z80s:5159   .text:000012b6 uppers_pfa
solo_forth.for_as.z80s:5169   .text:000012b8 uppers.do
solo_forth.for_as.z80s:5181   .text:000012c7 defined_question_
solo_forth.for_as.z80s:377    .data:000009f0 defined_question_cfap
solo_forth.for_as.z80s:377    .data:000009f2 defined_question_lfa
solo_forth.for_as.z80s:377    .data:000009f4 defined_question_nfa
solo_forth.for_as.z80s:5181   .text:000012c9 defined_question_pfa
solo_forth.for_as.z80s:5278   .text:0000133c found_
solo_forth.for_as.z80s:5189   .text:000012d1 undefined_question_
solo_forth.for_as.z80s:377    .data:000009fd undefined_question_cfap
solo_forth.for_as.z80s:377    .data:000009ff undefined_question_lfa
solo_forth.for_as.z80s:377    .data:00000a01 undefined_question_nfa
solo_forth.for_as.z80s:5189   .text:000012d3 undefined_question_pfa
solo_forth.for_as.z80s:377    .data:00000a0c dollar_store_cfap
solo_forth.for_as.z80s:377    .data:00000a0e dollar_store_lfa
solo_forth.for_as.z80s:377    .data:00000a10 dollar_store_nfa
solo_forth.for_as.z80s:5201   .text:000012db dollar_store_pfa
solo_forth.for_as.z80s:5234   .text:000012eb find_
solo_forth.for_as.z80s:377    .data:00000a13 find_cfap
solo_forth.for_as.z80s:377    .data:00000a15 find_lfa
solo_forth.for_as.z80s:377    .data:00000a17 find_nfa
solo_forth.for_as.z80s:5234   .text:000012ed find_pfa
solo_forth.for_as.z80s:5256   .text:000012f3 find.do
solo_forth.for_as.z80s:5264   .text:00001311 find.loop
solo_forth.for_as.z80s:5269   .text:00001319 find_dollar_
solo_forth.for_as.z80s:377    .data:00000a1c find_dollar_cfap
solo_forth.for_as.z80s:377    .data:00000a1e find_dollar_lfa
solo_forth.for_as.z80s:377    .data:00000a20 find_dollar_nfa
solo_forth.for_as.z80s:5269   .text:0000131b find_dollar_pfa
solo_forth.for_as.z80s:377    .data:00000a26 found_cfap
solo_forth.for_as.z80s:377    .data:00000a28 found_lfa
solo_forth.for_as.z80s:377    .data:00000a2a found_nfa
solo_forth.for_as.z80s:5278   .text:0000133e found_pfa
solo_forth.for_as.z80s:5297   .text:00001355 paren_abort_
solo_forth.for_as.z80s:377    .data:00000a30 paren_abort_cfap
solo_forth.for_as.z80s:377    .data:00000a32 paren_abort_lfa
GAS LISTING solo_forth.for_as.z80s 			page 182


solo_forth.for_as.z80s:377    .data:00000a34 paren_abort_nfa
solo_forth.for_as.z80s:5297   .text:00001357 paren_abort_pfa
solo_forth.for_as.z80s:5911   .text:0000160e abort_
solo_forth.for_as.z80s:5303   .text:0000135b error_number_
solo_forth.for_as.z80s:377    .data:00000a3c error_number_cfap
solo_forth.for_as.z80s:377    .data:00000a3e error_number_lfa
solo_forth.for_as.z80s:377    .data:00000a40 error_number_nfa
solo_forth.for_as.z80s:5303   .text:0000135d error_number_pfa
solo_forth.for_as.z80s:5308   .text:0000135f error_pos_
solo_forth.for_as.z80s:377    .data:00000a47 error_pos_cfap
solo_forth.for_as.z80s:377    .data:00000a49 error_pos_lfa
solo_forth.for_as.z80s:377    .data:00000a4b error_pos_nfa
solo_forth.for_as.z80s:5308   .text:00001361 error_pos_pfa
solo_forth.for_as.z80s:5313   .text:00001365 error_to_line_
solo_forth.for_as.z80s:377    .data:00000a55 error_to_line_cfap
solo_forth.for_as.z80s:377    .data:00000a57 error_to_line_lfa
solo_forth.for_as.z80s:377    .data:00000a59 error_to_line_nfa
solo_forth.for_as.z80s:5313   .text:00001367 error_to_line_pfa
solo_forth.for_as.z80s:5326   .text:0000136f error_to_number.do
solo_forth.for_as.z80s:6223   .text:00001761 mod_
solo_forth.for_as.z80s:377    .data:00000a64 error_cfap
solo_forth.for_as.z80s:377    .data:00000a66 error_lfa
solo_forth.for_as.z80s:377    .data:00000a68 error_nfa
solo_forth.for_as.z80s:5338   .text:00001382 error_pfa
solo_forth.for_as.z80s:5344   .text:00001392 error.message
solo_forth.for_as.z80s:6266   .text:000017b7 message_
solo_forth.for_as.z80s:5355   .text:000013b9 error.end
solo_forth.for_as.z80s:5830   .text:000015a1 quit_
solo_forth.for_as.z80s:5359   .text:000013bb id_dot_
solo_forth.for_as.z80s:377    .data:00000a6e id_dot_cfap
solo_forth.for_as.z80s:377    .data:00000a70 id_dot_lfa
solo_forth.for_as.z80s:377    .data:00000a72 id_dot_nfa
solo_forth.for_as.z80s:5359   .text:000013bd id_dot_pfa
solo_forth.for_as.z80s:377    .data:00000a76 header_cfap
solo_forth.for_as.z80s:377    .data:00000a78 header_lfa
solo_forth.for_as.z80s:377    .data:00000a7a header_nfa
solo_forth.for_as.z80s:5365   .text:000013c7 header_pfa
solo_forth.for_as.z80s:6059   .text:000016d0 abs_
solo_forth.for_as.z80s:6195   .text:00001745 star_
solo_forth.for_as.z80s:5387   .text:000013dc header.continue
solo_forth.for_as.z80s:6119   .text:000016f4 min_
solo_forth.for_as.z80s:377    .data:00000a81 create_cfap
solo_forth.for_as.z80s:377    .data:00000a83 create_lfa
solo_forth.for_as.z80s:377    .data:00000a85 create_nfa
solo_forth.for_as.z80s:5409   .text:00001414 create_pfa
solo_forth.for_as.z80s:5419   .text:0000141e code_
solo_forth.for_as.z80s:377    .data:00000a8c code_cfap
solo_forth.for_as.z80s:377    .data:00000a8e code_lfa
solo_forth.for_as.z80s:377    .data:00000a90 code_nfa
solo_forth.for_as.z80s:5419   .text:00001420 code_pfa
solo_forth.for_as.z80s:5427   .text:0000142c compare_
solo_forth.for_as.z80s:377    .data:00000a95 compare_cfap
solo_forth.for_as.z80s:377    .data:00000a97 compare_lfa
solo_forth.for_as.z80s:377    .data:00000a99 compare_nfa
solo_forth.for_as.z80s:5427   .text:0000142e compare_pfa
solo_forth.for_as.z80s:5446   .text:00001437 compare.lengths
solo_forth.for_as.z80s:5450   .text:0000143a compare.ready
GAS LISTING solo_forth.for_as.z80s 			page 183


solo_forth.for_as.z80s:5480   .text:00001457 compare_strings_case_sensitive
solo_forth.for_as.z80s:5467   .text:00001447 compare.no_match
solo_forth.for_as.z80s:5462   .text:00001444 compare.match
solo_forth.for_as.z80s:5471   .text:00001448 compare.end
solo_forth.for_as.z80s:5501   .text:00001463 search_
solo_forth.for_as.z80s:377    .data:00000aa1 search_cfap
solo_forth.for_as.z80s:377    .data:00000aa3 search_lfa
solo_forth.for_as.z80s:377    .data:00000aa5 search_nfa
solo_forth.for_as.z80s:5501   .text:00001465 search_pfa
solo_forth.for_as.z80s:5543   .text:00001487 search.string_2_len
solo_forth.for_as.z80s:5563   .text:000014a0 search.string_1_len
solo_forth.for_as.z80s:5566   .text:000014a4 search.string_1_addr
solo_forth.for_as.z80s:5552   .text:00001493 search.match
solo_forth.for_as.z80s:5529   .text:0000147b search.1
solo_forth.for_as.z80s:5561   .text:0000149c search.no_match
solo_forth.for_as.z80s:5554   .text:00001496 search.end
solo_forth.for_as.z80s:5571   .text:000014a9 bracket_compile_
solo_forth.for_as.z80s:377    .data:00000aac bracket_compile_cfap
solo_forth.for_as.z80s:377    .data:00000aae bracket_compile_lfa
solo_forth.for_as.z80s:377    .data:00000ab0 bracket_compile_nfa
solo_forth.for_as.z80s:5571   .text:000014ab bracket_compile_pfa
solo_forth.for_as.z80s:6890   .text:0000199a tick_
solo_forth.for_as.z80s:377    .data:00000aba s_literal_cfap
solo_forth.for_as.z80s:377    .data:00000abc s_literal_lfa
solo_forth.for_as.z80s:377    .data:00000abe s_literal_nfa
solo_forth.for_as.z80s:5577   .text:000014b3 s_literal_pfa
solo_forth.for_as.z80s:5585   .text:000014bb c_literal_
solo_forth.for_as.z80s:377    .data:00000ac7 c_literal_cfap
solo_forth.for_as.z80s:377    .data:00000ac9 c_literal_lfa
solo_forth.for_as.z80s:377    .data:00000acb c_literal_nfa
solo_forth.for_as.z80s:5585   .text:000014bd c_literal_pfa
solo_forth.for_as.z80s:5603   .text:000014c9 c_literal.end
solo_forth.for_as.z80s:5611   .text:000014cb literal_
solo_forth.for_as.z80s:377    .data:00000ad4 literal_cfap
solo_forth.for_as.z80s:377    .data:00000ad6 literal_lfa
solo_forth.for_as.z80s:377    .data:00000ad8 literal_nfa
solo_forth.for_as.z80s:5611   .text:000014cd literal_pfa
solo_forth.for_as.z80s:5627   .text:000014d9 literal.end
solo_forth.for_as.z80s:5635   .text:000014db two_literal_
solo_forth.for_as.z80s:377    .data:00000ae0 two_literal_cfap
solo_forth.for_as.z80s:377    .data:00000ae2 two_literal_lfa
solo_forth.for_as.z80s:377    .data:00000ae4 two_literal_nfa
solo_forth.for_as.z80s:5635   .text:000014dd two_literal_pfa
solo_forth.for_as.z80s:5651   .text:000014e9 two_literal.end
solo_forth.for_as.z80s:5660   .text:000014eb depth_
solo_forth.for_as.z80s:377    .data:00000aed depth_cfap
solo_forth.for_as.z80s:377    .data:00000aef depth_lfa
solo_forth.for_as.z80s:377    .data:00000af1 depth_nfa
solo_forth.for_as.z80s:5660   .text:000014ed depth_pfa
solo_forth.for_as.z80s:6217   .text:00001759 slash_
solo_forth.for_as.z80s:5666   .text:000014fd question_stack_
solo_forth.for_as.z80s:377    .data:00000af7 question_stack_cfap
solo_forth.for_as.z80s:377    .data:00000af9 question_stack_lfa
solo_forth.for_as.z80s:377    .data:00000afb question_stack_nfa
solo_forth.for_as.z80s:5666   .text:000014ff question_stack_pfa
solo_forth.for_as.z80s:5687   .text:0000151c interpret_
solo_forth.for_as.z80s:377    .data:00000b02 interpret_cfap
GAS LISTING solo_forth.for_as.z80s 			page 184


solo_forth.for_as.z80s:377    .data:00000b04 interpret_lfa
solo_forth.for_as.z80s:377    .data:00000b06 interpret_nfa
solo_forth.for_as.z80s:5687   .text:0000151e interpret_pfa
solo_forth.for_as.z80s:5702   .text:0000151e interpret.begin
solo_forth.for_as.z80s:5752   .text:0000153e interpret.word_not_found
solo_forth.for_as.z80s:5743   .text:00001538 interpret.execute
solo_forth.for_as.z80s:5767   .text:00001550 interpret.16bit_number
solo_forth.for_as.z80s:5776   .text:00001558 immediate_
solo_forth.for_as.z80s:377    .data:00000b10 immediate_cfap
solo_forth.for_as.z80s:377    .data:00000b12 immediate_lfa
solo_forth.for_as.z80s:377    .data:00000b14 immediate_nfa
solo_forth.for_as.z80s:5776   .text:0000155a immediate_pfa
solo_forth.for_as.z80s:5787   .text:0000156b vocabulary_
solo_forth.for_as.z80s:377    .data:00000b1e vocabulary_cfap
solo_forth.for_as.z80s:377    .data:00000b20 vocabulary_lfa
solo_forth.for_as.z80s:377    .data:00000b22 vocabulary_nfa
solo_forth.for_as.z80s:5787   .text:0000156d vocabulary_pfa
solo_forth.for_as.z80s:377    .data:00000b2d definitions_cfap
solo_forth.for_as.z80s:377    .data:00000b2f definitions_lfa
solo_forth.for_as.z80s:377    .data:00000b31 definitions_nfa
solo_forth.for_as.z80s:5815   .text:0000158c definitions_pfa
solo_forth.for_as.z80s:5822   .text:00001596 paren_
solo_forth.for_as.z80s:377    .data:00000b3d paren_cfap
solo_forth.for_as.z80s:377    .data:00000b3f paren_lfa
solo_forth.for_as.z80s:377    .data:00000b41 paren_nfa
solo_forth.for_as.z80s:5822   .text:00001598 paren_pfa
solo_forth.for_as.z80s:7443   .text:00001bae two_drop_
solo_forth.for_as.z80s:377    .data:00000b43 quit_cfap
solo_forth.for_as.z80s:377    .data:00000b45 quit_lfa
solo_forth.for_as.z80s:377    .data:00000b47 quit_nfa
solo_forth.for_as.z80s:5830   .text:000015a3 quit_pfa
solo_forth.for_as.z80s:5835   .text:000015a9 quit.do
solo_forth.for_as.z80s:5880   .text:000015c4 greeting_
solo_forth.for_as.z80s:377    .data:00000b4c greeting_cfap
solo_forth.for_as.z80s:377    .data:00000b4e greeting_lfa
solo_forth.for_as.z80s:377    .data:00000b50 greeting_nfa
solo_forth.for_as.z80s:5880   .text:000015c6 greeting_pfa
solo_forth.for_as.z80s:5902   .text:000015fb greeting.string_0_end
solo_forth.for_as.z80s:7471   .text:00001bc9 unused_
solo_forth.for_as.z80s:7285   .text:00001b15 u_dot_
solo_forth.for_as.z80s:377    .data:00000b59 abort_cfap
solo_forth.for_as.z80s:377    .data:00000b5b abort_lfa
solo_forth.for_as.z80s:377    .data:00000b5d abort_nfa
solo_forth.for_as.z80s:5911   .text:00001610 abort_pfa
solo_forth.for_as.z80s:5915   .text:00001616 boot
solo_forth.for_as.z80s:5920   .text:0000161a boot_
solo_forth.for_as.z80s:377    .data:00000b63 boot_cfap
solo_forth.for_as.z80s:377    .data:00000b65 boot_lfa
solo_forth.for_as.z80s:377    .data:00000b67 boot_nfa
solo_forth.for_as.z80s:5920   .text:0000161c boot_pfa
solo_forth.for_as.z80s:5925   .text:0000161e warm_
solo_forth.for_as.z80s:377    .data:00000b6c warm_cfap
solo_forth.for_as.z80s:377    .data:00000b6e warm_lfa
solo_forth.for_as.z80s:377    .data:00000b70 warm_nfa
solo_forth.for_as.z80s:5925   .text:00001620 warm_pfa
solo_forth.for_as.z80s:7410   .text:00001b9d page_
solo_forth.for_as.z80s:5990   .text:00001696 common_start
GAS LISTING solo_forth.for_as.z80s 			page 185


solo_forth.for_as.z80s:5945   .text:0000162b cold_
solo_forth.for_as.z80s:377    .data:00000b75 cold_cfap
solo_forth.for_as.z80s:377    .data:00000b77 cold_lfa
solo_forth.for_as.z80s:377    .data:00000b79 cold_nfa
solo_forth.for_as.z80s:5945   .text:0000162d cold_pfa
solo_forth.for_as.z80s:6339   .text:00001800 empty_buffers_
solo_forth.for_as.z80s:7318   .text:00001b59 colors0_
solo_forth.for_as.z80s:5981   .text:0000168e only_first_cold
solo_forth.for_as.z80s:8019   .text:00001dc4 move_name_fields_to_memory_bank
solo_forth.for_as.z80s:7431   .text:00001baa system_stack_pointer
solo_forth.for_as.z80s:6003   .text:000016a9 s_to_d_
solo_forth.for_as.z80s:377    .data:00000b7e s_to_d_cfap
solo_forth.for_as.z80s:377    .data:00000b80 s_to_d_lfa
solo_forth.for_as.z80s:377    .data:00000b82 s_to_d_nfa
solo_forth.for_as.z80s:6003   .text:000016ab s_to_d_pfa
solo_forth.for_as.z80s:6024   .text:000016b8 plus_minus_
solo_forth.for_as.z80s:377    .data:00000b86 plus_minus_cfap
solo_forth.for_as.z80s:377    .data:00000b88 plus_minus_lfa
solo_forth.for_as.z80s:377    .data:00000b8a plus_minus_nfa
solo_forth.for_as.z80s:6024   .text:000016ba plus_minus_pfa
solo_forth.for_as.z80s:6037   .text:000016c2 plus_minus.end
solo_forth.for_as.z80s:6041   .text:000016c4 d_plus_minus_
solo_forth.for_as.z80s:377    .data:00000b8d d_plus_minus_cfap
solo_forth.for_as.z80s:377    .data:00000b8f d_plus_minus_lfa
solo_forth.for_as.z80s:377    .data:00000b91 d_plus_minus_nfa
solo_forth.for_as.z80s:6041   .text:000016c6 d_plus_minus_pfa
solo_forth.for_as.z80s:6055   .text:000016ce d_plus_minus.end
solo_forth.for_as.z80s:377    .data:00000b95 abs_cfap
solo_forth.for_as.z80s:377    .data:00000b97 abs_lfa
solo_forth.for_as.z80s:377    .data:00000b99 abs_nfa
solo_forth.for_as.z80s:6059   .text:000016d2 abs_pfa
solo_forth.for_as.z80s:6073   .text:000016d8 dabs_
solo_forth.for_as.z80s:377    .data:00000b9d dabs_cfap
solo_forth.for_as.z80s:377    .data:00000b9f dabs_lfa
solo_forth.for_as.z80s:377    .data:00000ba1 dabs_nfa
solo_forth.for_as.z80s:6073   .text:000016da dabs_pfa
solo_forth.for_as.z80s:6087   .text:000016e0 umax_
solo_forth.for_as.z80s:377    .data:00000ba6 umax_cfap
solo_forth.for_as.z80s:377    .data:00000ba8 umax_lfa
solo_forth.for_as.z80s:377    .data:00000baa umax_nfa
solo_forth.for_as.z80s:6087   .text:000016e2 umax_pfa
solo_forth.for_as.z80s:6137   .text:00001705 max.1
solo_forth.for_as.z80s:6103   .text:000016ea umin_
solo_forth.for_as.z80s:377    .data:00000baf umin_cfap
solo_forth.for_as.z80s:377    .data:00000bb1 umin_lfa
solo_forth.for_as.z80s:377    .data:00000bb3 umin_nfa
solo_forth.for_as.z80s:6103   .text:000016ec umin_pfa
solo_forth.for_as.z80s:6139   .text:00001706 max.2
solo_forth.for_as.z80s:377    .data:00000bb8 min_cfap
solo_forth.for_as.z80s:377    .data:00000bba min_lfa
solo_forth.for_as.z80s:377    .data:00000bbc min_nfa
solo_forth.for_as.z80s:6119   .text:000016f6 min_pfa
solo_forth.for_as.z80s:6129   .text:000016fe max_
solo_forth.for_as.z80s:377    .data:00000bc0 max_cfap
solo_forth.for_as.z80s:377    .data:00000bc2 max_lfa
solo_forth.for_as.z80s:377    .data:00000bc4 max_nfa
solo_forth.for_as.z80s:6129   .text:00001700 max_pfa
GAS LISTING solo_forth.for_as.z80s 			page 186


solo_forth.for_as.z80s:6134   .text:00001701 max.de
solo_forth.for_as.z80s:6145   .text:0000170d m_star_
solo_forth.for_as.z80s:377    .data:00000bc8 m_star_cfap
solo_forth.for_as.z80s:377    .data:00000bca m_star_lfa
solo_forth.for_as.z80s:377    .data:00000bcc m_star_nfa
solo_forth.for_as.z80s:6145   .text:0000170f m_star_pfa
solo_forth.for_as.z80s:6164   .text:00001723 m_slash_
solo_forth.for_as.z80s:377    .data:00000bcf m_slash_cfap
solo_forth.for_as.z80s:377    .data:00000bd1 m_slash_lfa
solo_forth.for_as.z80s:377    .data:00000bd3 m_slash_nfa
solo_forth.for_as.z80s:6164   .text:00001725 m_slash_pfa
solo_forth.for_as.z80s:377    .data:00000bd6 star_cfap
solo_forth.for_as.z80s:377    .data:00000bd8 star_lfa
solo_forth.for_as.z80s:377    .data:00000bda star_nfa
solo_forth.for_as.z80s:6195   .text:00001747 star_pfa
solo_forth.for_as.z80s:6201   .text:0000174d slash_mod_
solo_forth.for_as.z80s:377    .data:00000bdc slash_mod_cfap
solo_forth.for_as.z80s:377    .data:00000bde slash_mod_lfa
solo_forth.for_as.z80s:377    .data:00000be0 slash_mod_nfa
solo_forth.for_as.z80s:6201   .text:0000174f slash_mod_pfa
solo_forth.for_as.z80s:377    .data:00000be5 slash_cfap
solo_forth.for_as.z80s:377    .data:00000be7 slash_lfa
solo_forth.for_as.z80s:377    .data:00000be9 slash_nfa
solo_forth.for_as.z80s:6217   .text:0000175b slash_pfa
solo_forth.for_as.z80s:377    .data:00000beb mod_cfap
solo_forth.for_as.z80s:377    .data:00000bed mod_lfa
solo_forth.for_as.z80s:377    .data:00000bef mod_nfa
solo_forth.for_as.z80s:6223   .text:00001763 mod_pfa
solo_forth.for_as.z80s:6229   .text:00001769 star_slash_mod_
solo_forth.for_as.z80s:377    .data:00000bf3 star_slash_mod_cfap
solo_forth.for_as.z80s:377    .data:00000bf5 star_slash_mod_lfa
solo_forth.for_as.z80s:377    .data:00000bf7 star_slash_mod_nfa
solo_forth.for_as.z80s:6229   .text:0000176b star_slash_mod_pfa
solo_forth.for_as.z80s:6236   .text:00001775 star_slash_
solo_forth.for_as.z80s:377    .data:00000bfd star_slash_cfap
solo_forth.for_as.z80s:377    .data:00000bff star_slash_lfa
solo_forth.for_as.z80s:377    .data:00000c01 star_slash_nfa
solo_forth.for_as.z80s:6236   .text:00001777 star_slash_pfa
solo_forth.for_as.z80s:6242   .text:0000177d m_slash_mod_
solo_forth.for_as.z80s:377    .data:00000c04 m_slash_mod_cfap
solo_forth.for_as.z80s:377    .data:00000c06 m_slash_mod_lfa
solo_forth.for_as.z80s:377    .data:00000c08 m_slash_mod_nfa
solo_forth.for_as.z80s:6242   .text:0000177f m_slash_mod_pfa
solo_forth.for_as.z80s:6251   .text:00001793 paren_line_
solo_forth.for_as.z80s:377    .data:00000c0e paren_line_cfap
solo_forth.for_as.z80s:377    .data:00000c10 paren_line_lfa
solo_forth.for_as.z80s:377    .data:00000c12 paren_line_nfa
solo_forth.for_as.z80s:6251   .text:00001795 paren_line_pfa
solo_forth.for_as.z80s:6260   .text:000017ad dot_line_
solo_forth.for_as.z80s:377    .data:00000c19 dot_line_cfap
solo_forth.for_as.z80s:377    .data:00000c1b dot_line_lfa
solo_forth.for_as.z80s:377    .data:00000c1d dot_line_nfa
solo_forth.for_as.z80s:6260   .text:000017af dot_line_pfa
solo_forth.for_as.z80s:377    .data:00000c23 message_cfap
solo_forth.for_as.z80s:377    .data:00000c25 message_lfa
solo_forth.for_as.z80s:377    .data:00000c27 message_nfa
solo_forth.for_as.z80s:6266   .text:000017b9 message_pfa
GAS LISTING solo_forth.for_as.z80s 			page 187


solo_forth.for_as.z80s:6279   .text:000017cb message.number_only
solo_forth.for_as.z80s:7264   .text:00001b05 dot_
solo_forth.for_as.z80s:6288   .text:000017d8 update_
solo_forth.for_as.z80s:377    .data:00000c2f update_cfap
solo_forth.for_as.z80s:377    .data:00000c31 update_lfa
solo_forth.for_as.z80s:377    .data:00000c33 update_nfa
solo_forth.for_as.z80s:6288   .text:000017da update_pfa
solo_forth.for_as.z80s:6308   .text:000017ea updated_question_
solo_forth.for_as.z80s:377    .data:00000c3a updated_question_cfap
solo_forth.for_as.z80s:377    .data:00000c3c updated_question_lfa
solo_forth.for_as.z80s:377    .data:00000c3e updated_question_nfa
solo_forth.for_as.z80s:6308   .text:000017ec updated_question_pfa
solo_forth.for_as.z80s:6368   .text:00001814 buffer_id_
solo_forth.for_as.z80s:377    .data:00000c47 stream_end_cfap
solo_forth.for_as.z80s:377    .data:00000c49 stream_end_lfa
solo_forth.for_as.z80s:377    .data:00000c4b stream_end_nfa
solo_forth.for_as.z80s:6322   .text:000017f4 stream_end_pfa
solo_forth.for_as.z80s:377    .data:00000c56 empty_buffers_cfap
solo_forth.for_as.z80s:377    .data:00000c58 empty_buffers_lfa
solo_forth.for_as.z80s:377    .data:00000c5a empty_buffers_nfa
solo_forth.for_as.z80s:6339   .text:00001802 empty_buffers_pfa
solo_forth.for_as.z80s:6354   .text:0000180c buffer_data_
solo_forth.for_as.z80s:377    .data:00000c68 buffer_data_cfap
solo_forth.for_as.z80s:377    .data:00000c6a buffer_data_lfa
solo_forth.for_as.z80s:377    .data:00000c6c buffer_data_nfa
solo_forth.for_as.z80s:6354   .text:0000180e buffer_data_pfa
solo_forth.for_as.z80s:377    .data:00000c78 buffer_id_cfap
solo_forth.for_as.z80s:377    .data:00000c7a buffer_id_lfa
solo_forth.for_as.z80s:377    .data:00000c7c buffer_id_nfa
solo_forth.for_as.z80s:6368   .text:00001816 buffer_id_pfa
solo_forth.for_as.z80s:6382   .text:0000181c block_number_
solo_forth.for_as.z80s:377    .data:00000c86 block_number_cfap
solo_forth.for_as.z80s:377    .data:00000c88 block_number_lfa
solo_forth.for_as.z80s:377    .data:00000c8a block_number_nfa
solo_forth.for_as.z80s:6382   .text:0000181e block_number_pfa
solo_forth.for_as.z80s:6398   .text:00001826 buffer_block_
solo_forth.for_as.z80s:377    .data:00000c97 buffer_block_cfap
solo_forth.for_as.z80s:377    .data:00000c99 buffer_block_lfa
solo_forth.for_as.z80s:377    .data:00000c9b buffer_block_nfa
solo_forth.for_as.z80s:6398   .text:00001828 buffer_block_pfa
solo_forth.for_as.z80s:6412   .text:0000182e paren_buffer_
solo_forth.for_as.z80s:377    .data:00000ca8 paren_buffer_cfap
solo_forth.for_as.z80s:377    .data:00000caa paren_buffer_lfa
solo_forth.for_as.z80s:377    .data:00000cac paren_buffer_nfa
solo_forth.for_as.z80s:6412   .text:00001830 paren_buffer_pfa
solo_forth.for_as.z80s:6435   .text:0000183e free_buffer.not_updated
solo_forth.for_as.z80s:6626   .text:000018cf write_buffer_
solo_forth.for_as.z80s:6437   .text:00001840 free_buffer.end
solo_forth.for_as.z80s:6442   .text:00001846 buffer_
solo_forth.for_as.z80s:377    .data:00000cb5 buffer_cfap
solo_forth.for_as.z80s:377    .data:00000cb7 buffer_lfa
solo_forth.for_as.z80s:377    .data:00000cb9 buffer_nfa
solo_forth.for_as.z80s:6442   .text:00001848 buffer_pfa
solo_forth.for_as.z80s:6467   .text:00001858 buffer.not_equals
solo_forth.for_as.z80s:6469   .text:0000185a buffer.end
solo_forth.for_as.z80s:377    .data:00000cc0 block_cfap
solo_forth.for_as.z80s:377    .data:00000cc2 block_lfa
GAS LISTING solo_forth.for_as.z80s 			page 188


solo_forth.for_as.z80s:377    .data:00000cc4 block_nfa
solo_forth.for_as.z80s:6474   .text:00001860 block_pfa
solo_forth.for_as.z80s:6503   .text:00001870 block.not_equals
solo_forth.for_as.z80s:6506   .text:0000187a block.end
solo_forth.for_as.z80s:6681   .text:000018f8 save_buffers_
solo_forth.for_as.z80s:6597   .text:000018bc read_buffer_
solo_forth.for_as.z80s:6511   .text:0000187e flip_
solo_forth.for_as.z80s:377    .data:00000cca flip_cfap
solo_forth.for_as.z80s:377    .data:00000ccc flip_lfa
solo_forth.for_as.z80s:377    .data:00000cce flip_nfa
solo_forth.for_as.z80s:6511   .text:00001880 flip_pfa
solo_forth.for_as.z80s:6531   .text:00001887 block_to_sector_
solo_forth.for_as.z80s:377    .data:00000cd3 block_to_sector_cfap
solo_forth.for_as.z80s:377    .data:00000cd5 block_to_sector_lfa
solo_forth.for_as.z80s:377    .data:00000cd7 block_to_sector_nfa
solo_forth.for_as.z80s:6531   .text:00001889 block_to_sector_pfa
solo_forth.for_as.z80s:6582   .text:000018b3 read_block_
solo_forth.for_as.z80s:377    .data:00000ce4 read_block_cfap
solo_forth.for_as.z80s:377    .data:00000ce6 read_block_lfa
solo_forth.for_as.z80s:377    .data:00000ce8 read_block_nfa
solo_forth.for_as.z80s:6582   .text:000018b5 read_block_pfa
solo_forth.for_as.z80s:6640   .text:000018d9 transfer_block_
solo_forth.for_as.z80s:377    .data:00000cf3 read_buffer_cfap
solo_forth.for_as.z80s:377    .data:00000cf5 read_buffer_lfa
solo_forth.for_as.z80s:377    .data:00000cf7 read_buffer_nfa
solo_forth.for_as.z80s:6597   .text:000018be read_buffer_pfa
solo_forth.for_as.z80s:6611   .text:000018c6 write_block_
solo_forth.for_as.z80s:6597   .data:00000d03 write_block_cfap
solo_forth.for_as.z80s:6597   .data:00000d05 write_block_lfa
solo_forth.for_as.z80s:6597   .data:00000d07 write_block_nfa
solo_forth.for_as.z80s:6611   .text:000018c8 write_block_pfa
solo_forth.for_as.z80s:6597   .data:00000d13 write_buffer_cfap
solo_forth.for_as.z80s:6597   .data:00000d15 write_buffer_lfa
solo_forth.for_as.z80s:6597   .data:00000d17 write_buffer_nfa
solo_forth.for_as.z80s:6626   .text:000018d1 write_buffer_pfa
solo_forth.for_as.z80s:6597   .data:00000d24 transfer_block_cfap
solo_forth.for_as.z80s:6597   .data:00000d26 transfer_block_lfa
solo_forth.for_as.z80s:6597   .data:00000d28 transfer_block_nfa
solo_forth.for_as.z80s:6640   .text:000018db transfer_block_pfa
solo_forth.for_as.z80s:6673   .text:000018f0 read_write_sector_command
solo_forth.for_as.z80s:6659   .text:000018e7 paren_transfer_block_
solo_forth.for_as.z80s:6666   .text:000018e9 paren_transfer_block_pfa
solo_forth.for_as.z80s:6597   .data:00000d37 save_buffers_cfap
solo_forth.for_as.z80s:6597   .data:00000d39 save_buffers_lfa
solo_forth.for_as.z80s:6597   .data:00000d3b save_buffers_nfa
solo_forth.for_as.z80s:6681   .text:000018fa save_buffers_pfa
solo_forth.for_as.z80s:7846   .text:00001d38 question_exit_
solo_forth.for_as.z80s:6706   .text:0000190c flush_
solo_forth.for_as.z80s:6597   .data:00000d48 flush_cfap
solo_forth.for_as.z80s:6597   .data:00000d4a flush_lfa
solo_forth.for_as.z80s:6597   .data:00000d4c flush_nfa
solo_forth.for_as.z80s:6706   .text:0000190e flush_pfa
solo_forth.for_as.z80s:6714   .text:00001914 paren_load_
solo_forth.for_as.z80s:6597   .data:00000d52 paren_load_cfap
solo_forth.for_as.z80s:6597   .data:00000d54 paren_load_lfa
solo_forth.for_as.z80s:6714   .data:00000d56 paren_load_nfa
solo_forth.for_as.z80s:6714   .text:00001916 paren_load_pfa
GAS LISTING solo_forth.for_as.z80s 			page 189


solo_forth.for_as.z80s:6742   .text:0000192f continued_
solo_forth.for_as.z80s:6714   .data:00000d5d continued_cfap
solo_forth.for_as.z80s:6714   .data:00000d5f continued_lfa
solo_forth.for_as.z80s:6714   .data:00000d61 continued_nfa
solo_forth.for_as.z80s:6742   .text:00001931 continued_pfa
solo_forth.for_as.z80s:6765   .text:00001937 load_
solo_forth.for_as.z80s:6714   .data:00000d6b load_cfap
solo_forth.for_as.z80s:6714   .data:00000d6d load_lfa
solo_forth.for_as.z80s:6714   .data:00000d6f load_nfa
solo_forth.for_as.z80s:6765   .text:00001939 load_pfa
solo_forth.for_as.z80s:6797   .text:00001955 next_screen_
solo_forth.for_as.z80s:6714   .data:00000d74 next_screen_cfap
solo_forth.for_as.z80s:6714   .data:00000d76 next_screen_lfa
solo_forth.for_as.z80s:6714   .data:00000d78 next_screen_nfa
solo_forth.for_as.z80s:6797   .text:00001957 next_screen_pfa
solo_forth.for_as.z80s:6714   .data:00000d7c defined_cfap
solo_forth.for_as.z80s:6714   .data:00000d7e defined_lfa
solo_forth.for_as.z80s:6714   .data:00000d80 defined_nfa
solo_forth.for_as.z80s:6820   .text:00001971 defined_pfa
solo_forth.for_as.z80s:6714   .data:00000d88 question_defined_cfap
solo_forth.for_as.z80s:6714   .data:00000d8a question_defined_lfa
solo_forth.for_as.z80s:6714   .data:00000d8c question_defined_nfa
solo_forth.for_as.z80s:6851   .text:00001981 question_defined_pfa
solo_forth.for_as.z80s:6866   .text:0000198a bracket_defined_
solo_forth.for_as.z80s:6714   .data:00000d95 bracket_defined_cfap
solo_forth.for_as.z80s:6714   .data:00000d97 bracket_defined_lfa
solo_forth.for_as.z80s:6714   .data:00000d99 bracket_defined_nfa
solo_forth.for_as.z80s:6866   .text:0000198c bracket_defined_pfa
solo_forth.for_as.z80s:6878   .text:00001992 bracket_undefined_
solo_forth.for_as.z80s:6714   .data:00000da3 bracket_undefined_cfap
solo_forth.for_as.z80s:6714   .data:00000da5 bracket_undefined_lfa
solo_forth.for_as.z80s:6714   .data:00000da7 bracket_undefined_nfa
solo_forth.for_as.z80s:6878   .text:00001994 bracket_undefined_pfa
solo_forth.for_as.z80s:6878   .data:00000db3 tick_cfap
solo_forth.for_as.z80s:6878   .data:00000db5 tick_lfa
solo_forth.for_as.z80s:6878   .data:00000db7 tick_nfa
solo_forth.for_as.z80s:6890   .text:0000199c tick_pfa
solo_forth.for_as.z80s:6902   .text:000019a2 bracket_tick_
solo_forth.for_as.z80s:6878   .data:00000db9 bracket_tick_cfap
solo_forth.for_as.z80s:6878   .data:00000dbb bracket_tick_lfa
solo_forth.for_as.z80s:6878   .data:00000dbd bracket_tick_nfa
solo_forth.for_as.z80s:6902   .text:000019a4 bracket_tick_pfa
solo_forth.for_as.z80s:6914   .text:000019aa begin_
solo_forth.for_as.z80s:6878   .data:00000dc1 begin_cfap
solo_forth.for_as.z80s:6878   .data:00000dc3 begin_lfa
solo_forth.for_as.z80s:6878   .data:00000dc5 begin_nfa
solo_forth.for_as.z80s:6914   .text:000019ac begin_pfa
solo_forth.for_as.z80s:6934   .text:000019b4 then_
solo_forth.for_as.z80s:6878   .data:00000dcb then_cfap
solo_forth.for_as.z80s:6878   .data:00000dcd then_lfa
solo_forth.for_as.z80s:6878   .data:00000dcf then_nfa
solo_forth.for_as.z80s:6934   .text:000019b6 then_pfa
solo_forth.for_as.z80s:6952   .text:000019c0 do_
solo_forth.for_as.z80s:6878   .data:00000dd4 do_cfap
solo_forth.for_as.z80s:6878   .data:00000dd6 do_lfa
solo_forth.for_as.z80s:6878   .data:00000dd8 do_nfa
solo_forth.for_as.z80s:6952   .text:000019c2 do_pfa
GAS LISTING solo_forth.for_as.z80s 			page 190


solo_forth.for_as.z80s:6955   .text:000019c6 do.common
solo_forth.for_as.z80s:6963   .text:000019cd loop_
solo_forth.for_as.z80s:6878   .data:00000ddb loop_cfap
solo_forth.for_as.z80s:6878   .data:00000ddd loop_lfa
solo_forth.for_as.z80s:6878   .data:00000ddf loop_nfa
solo_forth.for_as.z80s:6963   .text:000019cf loop_pfa
solo_forth.for_as.z80s:6974   .text:000019dc plus_loop_
solo_forth.for_as.z80s:6878   .data:00000de4 plus_loop_cfap
solo_forth.for_as.z80s:6878   .data:00000de6 plus_loop_lfa
solo_forth.for_as.z80s:6878   .data:00000de8 plus_loop_nfa
solo_forth.for_as.z80s:6974   .text:000019de plus_loop_pfa
solo_forth.for_as.z80s:6985   .text:000019eb until_
solo_forth.for_as.z80s:6878   .data:00000dee until_cfap
solo_forth.for_as.z80s:6878   .data:00000df0 until_lfa
solo_forth.for_as.z80s:6878   .data:00000df2 until_nfa
solo_forth.for_as.z80s:6985   .text:000019ed until_pfa
solo_forth.for_as.z80s:6995   .text:000019f9 again_
solo_forth.for_as.z80s:6878   .data:00000df8 again_cfap
solo_forth.for_as.z80s:6878   .data:00000dfa again_lfa
solo_forth.for_as.z80s:6878   .data:00000dfc again_nfa
solo_forth.for_as.z80s:6995   .text:000019fb again_pfa
solo_forth.for_as.z80s:7014   .text:00001a07 repeat_
solo_forth.for_as.z80s:6878   .data:00000e02 repeat_cfap
solo_forth.for_as.z80s:6878   .data:00000e04 repeat_lfa
solo_forth.for_as.z80s:7014   .data:00000e06 repeat_nfa
solo_forth.for_as.z80s:7014   .text:00001a09 repeat_pfa
solo_forth.for_as.z80s:7039   .text:00001a13 if_
solo_forth.for_as.z80s:7014   .data:00000e0d if_cfap
solo_forth.for_as.z80s:7014   .data:00000e0f if_lfa
solo_forth.for_as.z80s:7014   .data:00000e11 if_nfa
solo_forth.for_as.z80s:7039   .text:00001a15 if_pfa
solo_forth.for_as.z80s:7042   .text:00001a19 if.do
solo_forth.for_as.z80s:7050   .text:00001a1f unless_
solo_forth.for_as.z80s:7014   .data:00000e14 unless_cfap
solo_forth.for_as.z80s:7014   .data:00000e16 unless_lfa
solo_forth.for_as.z80s:7014   .data:00000e18 unless_nfa
solo_forth.for_as.z80s:7050   .text:00001a21 unless_pfa
solo_forth.for_as.z80s:7064   .text:00001a29 ahead_
solo_forth.for_as.z80s:7014   .data:00000e1f ahead_cfap
solo_forth.for_as.z80s:7014   .data:00000e21 ahead_lfa
solo_forth.for_as.z80s:7014   .data:00000e23 ahead_nfa
solo_forth.for_as.z80s:7064   .text:00001a2b ahead_pfa
solo_forth.for_as.z80s:7070   .text:00001a31 else_
solo_forth.for_as.z80s:7014   .data:00000e29 else_cfap
solo_forth.for_as.z80s:7014   .data:00000e2b else_lfa
solo_forth.for_as.z80s:7014   .data:00000e2d else_nfa
solo_forth.for_as.z80s:7070   .text:00001a33 else_pfa
solo_forth.for_as.z80s:7098   .text:00001a47 while_
solo_forth.for_as.z80s:7014   .data:00000e32 while_cfap
solo_forth.for_as.z80s:7014   .data:00000e34 while_lfa
solo_forth.for_as.z80s:7014   .data:00000e36 while_nfa
solo_forth.for_as.z80s:7098   .text:00001a49 while_pfa
solo_forth.for_as.z80s:7106   .text:00001a4d spaces_
solo_forth.for_as.z80s:7014   .data:00000e3c spaces_cfap
solo_forth.for_as.z80s:7014   .data:00000e3e spaces_lfa
solo_forth.for_as.z80s:7014   .data:00000e40 spaces_nfa
solo_forth.for_as.z80s:7106   .text:00001a4f spaces_pfa
GAS LISTING solo_forth.for_as.z80s 			page 191


solo_forth.for_as.z80s:7112   .text:00001a55 emits_
solo_forth.for_as.z80s:7014   .data:00000e47 emits_cfap
solo_forth.for_as.z80s:7014   .data:00000e49 emits_lfa
solo_forth.for_as.z80s:7014   .data:00000e4b emits_nfa
solo_forth.for_as.z80s:7112   .text:00001a57 emits_pfa
solo_forth.for_as.z80s:7124   .text:00001a6f emits_.end
solo_forth.for_as.z80s:7121   .text:00001a67 emits_.do
solo_forth.for_as.z80s:7129   .text:00001a73 less_hash_
solo_forth.for_as.z80s:7014   .data:00000e51 less_hash_cfap
solo_forth.for_as.z80s:7014   .data:00000e53 less_hash_lfa
solo_forth.for_as.z80s:7014   .data:00000e55 less_hash_nfa
solo_forth.for_as.z80s:7129   .text:00001a75 less_hash_pfa
solo_forth.for_as.z80s:7137   .text:00001a7d hash_greater_
solo_forth.for_as.z80s:7014   .data:00000e58 hash_greater_cfap
solo_forth.for_as.z80s:7014   .data:00000e5a hash_greater_lfa
solo_forth.for_as.z80s:7014   .data:00000e5c hash_greater_nfa
solo_forth.for_as.z80s:7137   .text:00001a7f hash_greater_pfa
solo_forth.for_as.z80s:7148   .text:00001a8f sign_
solo_forth.for_as.z80s:7014   .data:00000e5f sign_cfap
solo_forth.for_as.z80s:7148   .data:00000e61 sign_lfa
solo_forth.for_as.z80s:7148   .data:00000e63 sign_nfa
solo_forth.for_as.z80s:7148   .text:00001a91 sign_pfa
solo_forth.for_as.z80s:7167   .text:00001a9e sign.end
solo_forth.for_as.z80s:7171   .text:00001aa0 hash_
solo_forth.for_as.z80s:7148   .data:00000e68 hash_cfap
solo_forth.for_as.z80s:7148   .data:00000e6a hash_lfa
solo_forth.for_as.z80s:7148   .data:00000e6c hash_nfa
solo_forth.for_as.z80s:7171   .text:00001aa2 hash_pfa
solo_forth.for_as.z80s:7193   .text:00001aba hash.digit
solo_forth.for_as.z80s:7202   .text:00001ac3 hash_s_
solo_forth.for_as.z80s:7148   .data:00000e6e hash_s_cfap
solo_forth.for_as.z80s:7148   .data:00000e70 hash_s_lfa
solo_forth.for_as.z80s:7148   .data:00000e72 hash_s_nfa
solo_forth.for_as.z80s:7202   .text:00001ac5 hash_s_pfa
solo_forth.for_as.z80s:7210   .text:00001ac5 hash_s.begin
solo_forth.for_as.z80s:7216   .text:00001ad1 d_dot_r_
solo_forth.for_as.z80s:7148   .data:00000e75 d_dot_r_cfap
solo_forth.for_as.z80s:7148   .data:00000e77 d_dot_r_lfa
solo_forth.for_as.z80s:7148   .data:00000e79 d_dot_r_nfa
solo_forth.for_as.z80s:7216   .text:00001ad3 d_dot_r_pfa
solo_forth.for_as.z80s:7243   .text:00001aef dot_r_
solo_forth.for_as.z80s:7148   .data:00000e7d dot_r_cfap
solo_forth.for_as.z80s:7148   .data:00000e7f dot_r_lfa
solo_forth.for_as.z80s:7148   .data:00000e81 dot_r_nfa
solo_forth.for_as.z80s:7243   .text:00001af1 dot_r_pfa
solo_forth.for_as.z80s:7249   .text:00001afb d_dot_
solo_forth.for_as.z80s:7148   .data:00000e84 d_dot_cfap
solo_forth.for_as.z80s:7148   .data:00000e86 d_dot_lfa
solo_forth.for_as.z80s:7148   .data:00000e88 d_dot_nfa
solo_forth.for_as.z80s:7249   .text:00001afd d_dot_pfa
solo_forth.for_as.z80s:7148   .data:00000e8b dot_cfap
solo_forth.for_as.z80s:7148   .data:00000e8d dot_lfa
solo_forth.for_as.z80s:7148   .data:00000e8f dot_nfa
solo_forth.for_as.z80s:7264   .text:00001b07 dot_pfa
solo_forth.for_as.z80s:7279   .text:00001b0d question_
solo_forth.for_as.z80s:7148   .data:00000e91 question_cfap
solo_forth.for_as.z80s:7148   .data:00000e93 question_lfa
GAS LISTING solo_forth.for_as.z80s 			page 192


solo_forth.for_as.z80s:7148   .data:00000e95 question_nfa
solo_forth.for_as.z80s:7279   .text:00001b0f question_pfa
solo_forth.for_as.z80s:7148   .data:00000e97 u_dot_cfap
solo_forth.for_as.z80s:7148   .data:00000e99 u_dot_lfa
solo_forth.for_as.z80s:7148   .data:00000e9b u_dot_nfa
solo_forth.for_as.z80s:7285   .text:00001b17 u_dot_pfa
solo_forth.for_as.z80s:7294   .text:00001b1d dot_s_
solo_forth.for_as.z80s:7148   .data:00000e9e dot_s_cfap
solo_forth.for_as.z80s:7148   .data:00000ea0 dot_s_lfa
solo_forth.for_as.z80s:7148   .data:00000ea2 dot_s_nfa
solo_forth.for_as.z80s:7294   .text:00001b1f dot_s_pfa
solo_forth.for_as.z80s:7312   .text:00001b57 dot_s.end
solo_forth.for_as.z80s:7308   .text:00001b49 dot_s.do
solo_forth.for_as.z80s:7148   .data:00000ea5 colors0_cfap
solo_forth.for_as.z80s:7148   .data:00000ea7 colors0_lfa
solo_forth.for_as.z80s:7148   .data:00000ea9 colors0_nfa
solo_forth.for_as.z80s:7318   .text:00001b5b colors0_pfa
solo_forth.for_as.z80s:7357   .text:00001b70 home_
solo_forth.for_as.z80s:7148   .data:00000eb1 home_cfap
solo_forth.for_as.z80s:7148   .data:00000eb3 home_lfa
solo_forth.for_as.z80s:7148   .data:00000eb5 home_nfa
solo_forth.for_as.z80s:7357   .text:00001b72 home_pfa
solo_forth.for_as.z80s:7374   .text:00001b7a cls_
solo_forth.for_as.z80s:7148   .data:00000eba cls_cfap
solo_forth.for_as.z80s:7374   .data:00000ebc cls_lfa
solo_forth.for_as.z80s:7374   .data:00000ebe cls_nfa
solo_forth.for_as.z80s:7374   .text:00001b7c cls_pfa
solo_forth.for_as.z80s:7374   .data:00000ec2 page_cfap
solo_forth.for_as.z80s:7374   .data:00000ec4 page_lfa
solo_forth.for_as.z80s:7374   .data:00000ec6 page_nfa
solo_forth.for_as.z80s:7410   .text:00001b9f page_pfa
solo_forth.for_as.z80s:7428   .text:00001ba3 bye_
solo_forth.for_as.z80s:7374   .data:00000ecb bye_cfap
solo_forth.for_as.z80s:7374   .data:00000ecd bye_lfa
solo_forth.for_as.z80s:7374   .data:00000ecf bye_nfa
solo_forth.for_as.z80s:7428   .text:00001ba5 bye_pfa
solo_forth.for_as.z80s:7374   .data:00000ed3 two_drop_cfap
solo_forth.for_as.z80s:7374   .data:00000ed5 two_drop_lfa
solo_forth.for_as.z80s:7374   .data:00000ed7 two_drop_nfa
solo_forth.for_as.z80s:7443   .text:00001bb0 two_drop_pfa
solo_forth.for_as.z80s:7450   .text:00001bb4 two_swap_
solo_forth.for_as.z80s:7374   .data:00000edd two_swap_cfap
solo_forth.for_as.z80s:7374   .data:00000edf two_swap_lfa
solo_forth.for_as.z80s:7374   .data:00000ee1 two_swap_nfa
solo_forth.for_as.z80s:7450   .text:00001bb6 two_swap_pfa
solo_forth.for_as.z80s:7374   .data:00000ee7 unused_cfap
solo_forth.for_as.z80s:7374   .data:00000ee9 unused_lfa
solo_forth.for_as.z80s:7374   .data:00000eeb unused_nfa
solo_forth.for_as.z80s:7471   .text:00001bcb unused_pfa
solo_forth.for_as.z80s:7478   .text:00001bd3 where_
solo_forth.for_as.z80s:7374   .data:00000ef2 where_cfap
solo_forth.for_as.z80s:7374   .data:00000ef4 where_lfa
solo_forth.for_as.z80s:7374   .data:00000ef6 where_nfa
solo_forth.for_as.z80s:7478   .text:00001bd5 where_pfa
solo_forth.for_as.z80s:7488   .text:00001be3 where.do_it
solo_forth.for_as.z80s:7502   .text:00001c1d at_xy
solo_forth.for_as.z80s:7374   .data:00000efc at_xycfap
GAS LISTING solo_forth.for_as.z80s 			page 193


solo_forth.for_as.z80s:7374   .data:00000efe at_xylfa
solo_forth.for_as.z80s:7374   .data:00000f00 at_xynfa
solo_forth.for_as.z80s:7502   .text:00001c1f at_xypfa
solo_forth.for_as.z80s:7524   .text:00001c36 at_pfa.last_line
solo_forth.for_as.z80s:7538   .text:00001c5b border_
solo_forth.for_as.z80s:7374   .data:00000f06 border_cfap
solo_forth.for_as.z80s:7374   .data:00000f08 border_lfa
solo_forth.for_as.z80s:7374   .data:00000f0a border_nfa
solo_forth.for_as.z80s:7538   .text:00001c5d border_pfa
solo_forth.for_as.z80s:7561   .text:00001c68 border.end
solo_forth.for_as.z80s:7571   .text:00001c71 overwrite_
solo_forth.for_as.z80s:7374   .data:00000f11 overwrite_cfap
solo_forth.for_as.z80s:7374   .data:00000f13 overwrite_lfa
solo_forth.for_as.z80s:7374   .data:00000f15 overwrite_nfa
solo_forth.for_as.z80s:7571   .text:00001c73 overwrite_pfa
solo_forth.for_as.z80s:7605   .text:00001c98 color
solo_forth.for_as.z80s:7577   .text:00001c78 flash_
solo_forth.for_as.z80s:7571   .data:00000f1f flash_cfap
solo_forth.for_as.z80s:7571   .data:00000f21 flash_lfa
solo_forth.for_as.z80s:7571   .data:00000f23 flash_nfa
solo_forth.for_as.z80s:7577   .text:00001c7a flash_pfa
solo_forth.for_as.z80s:7583   .text:00001c7f inverse_
solo_forth.for_as.z80s:7571   .data:00000f29 inverse_cfap
solo_forth.for_as.z80s:7571   .data:00000f2b inverse_lfa
solo_forth.for_as.z80s:7571   .data:00000f2d inverse_nfa
solo_forth.for_as.z80s:7583   .text:00001c81 inverse_pfa
solo_forth.for_as.z80s:7589   .text:00001c86 bright_
solo_forth.for_as.z80s:7571   .data:00000f35 bright_cfap
solo_forth.for_as.z80s:7571   .data:00000f37 bright_lfa
solo_forth.for_as.z80s:7571   .data:00000f39 bright_nfa
solo_forth.for_as.z80s:7589   .text:00001c88 bright_pfa
solo_forth.for_as.z80s:7595   .text:00001c8d paper_
solo_forth.for_as.z80s:7571   .data:00000f40 paper_cfap
solo_forth.for_as.z80s:7571   .data:00000f42 paper_lfa
solo_forth.for_as.z80s:7571   .data:00000f44 paper_nfa
solo_forth.for_as.z80s:7595   .text:00001c8f paper_pfa
solo_forth.for_as.z80s:7601   .text:00001c94 ink_
solo_forth.for_as.z80s:7571   .data:00000f4a ink_cfap
solo_forth.for_as.z80s:7571   .data:00000f4c ink_lfa
solo_forth.for_as.z80s:7571   .data:00000f4e ink_nfa
solo_forth.for_as.z80s:7601   .text:00001c96 ink_pfa
solo_forth.for_as.z80s:7619   .text:00001ca1 emitted_
solo_forth.for_as.z80s:7571   .data:00000f52 emitted_cfap
solo_forth.for_as.z80s:7571   .data:00000f54 emitted_lfa
solo_forth.for_as.z80s:7571   .data:00000f56 emitted_nfa
solo_forth.for_as.z80s:7619   .text:00001ca3 emitted_pfa
solo_forth.for_as.z80s:7724   .text:00001cf4 emitted_charset_pfa
solo_forth.for_as.z80s:7739   .text:00001cf8 hash_emitted_chars_pfa
solo_forth.for_as.z80s:7675   .text:00001cbd emitted.do
solo_forth.for_as.z80s:7687   .text:00001cca emitted.match
solo_forth.for_as.z80s:7708   .text:00001ce2 emitted.next_char
solo_forth.for_as.z80s:7690   .text:00001ccd emitted.scans
solo_forth.for_as.z80s:7718   .text:00001cec emitted.end
solo_forth.for_as.z80s:7724   .text:00001cf2 emitted_charset_
solo_forth.for_as.z80s:7571   .data:00000f5e emitted_charset_cfap
solo_forth.for_as.z80s:7571   .data:00000f60 emitted_charset_lfa
solo_forth.for_as.z80s:7571   .data:00000f62 emitted_charset_nfa
GAS LISTING solo_forth.for_as.z80s 			page 194


solo_forth.for_as.z80s:7739   .text:00001cf6 hash_emitted_chars_
solo_forth.for_as.z80s:7571   .data:00000f72 hash_emitted_chars_cfap
solo_forth.for_as.z80s:7739   .data:00000f74 hash_emitted_chars_lfa
solo_forth.for_as.z80s:7739   .data:00000f76 hash_emitted_chars_nfa
solo_forth.for_as.z80s:7754   .text:00001cfa j_
solo_forth.for_as.z80s:7739   .data:00000f85 j_cfap
solo_forth.for_as.z80s:7739   .data:00000f87 j_lfa
solo_forth.for_as.z80s:7739   .data:00000f89 j_nfa
solo_forth.for_as.z80s:7754   .text:00001cfc j_pfa
solo_forth.for_as.z80s:7770   .text:00001d06 two_constant_
solo_forth.for_as.z80s:7739   .data:00000f8b two_constant_cfap
solo_forth.for_as.z80s:7739   .data:00000f8d two_constant_lfa
solo_forth.for_as.z80s:7739   .data:00000f8f two_constant_nfa
solo_forth.for_as.z80s:7770   .text:00001d08 two_constant_pfa
solo_forth.for_as.z80s:7780   .text:00001d11 two_variable_
solo_forth.for_as.z80s:7774   .text:00001d0c do_two_constant
solo_forth.for_as.z80s:7739   .data:00000f99 two_variable_cfap
solo_forth.for_as.z80s:7739   .data:00000f9b two_variable_lfa
solo_forth.for_as.z80s:7739   .data:00000f9d two_variable_nfa
solo_forth.for_as.z80s:7780   .text:00001d13 two_variable_pfa
solo_forth.for_as.z80s:7805   .text:00001d1d u_dot_r_
solo_forth.for_as.z80s:7739   .data:00000fa7 u_dot_r_cfap
solo_forth.for_as.z80s:7739   .data:00000fa9 u_dot_r_lfa
solo_forth.for_as.z80s:7739   .data:00000fab u_dot_r_nfa
solo_forth.for_as.z80s:7805   .text:00001d1f u_dot_r_pfa
solo_forth.for_as.z80s:7811   .text:00001d29 two_over_
solo_forth.for_as.z80s:7739   .data:00000faf two_over_cfap
solo_forth.for_as.z80s:7739   .data:00000fb1 two_over_lfa
solo_forth.for_as.z80s:7739   .data:00000fb3 two_over_nfa
solo_forth.for_as.z80s:7811   .text:00001d2b two_over_pfa
solo_forth.for_as.z80s:7739   .data:00000fb9 exit_cfap
solo_forth.for_as.z80s:7739   .data:00000fbb exit_lfa
solo_forth.for_as.z80s:7739   .data:00000fbd exit_nfa
solo_forth.for_as.z80s:7826   .text:00001d34 exit_pfa
solo_forth.for_as.z80s:7739   .data:00000fc2 question_exit_cfap
solo_forth.for_as.z80s:7739   .data:00000fc4 question_exit_lfa
solo_forth.for_as.z80s:7739   .data:00000fc6 question_exit_nfa
solo_forth.for_as.z80s:7846   .text:00001d3a question_exit_pfa
solo_forth.for_as.z80s:7889   .text:00001d40 char_
solo_forth.for_as.z80s:7739   .data:00000fcc char_cfap
solo_forth.for_as.z80s:7739   .data:00000fce char_lfa
solo_forth.for_as.z80s:7889   .data:00000fd0 char_nfa
solo_forth.for_as.z80s:7889   .text:00001d42 char_pfa
solo_forth.for_as.z80s:7895   .text:00001d4a bracket_char_
solo_forth.for_as.z80s:7889   .data:00000fd5 bracket_char_cfap
solo_forth.for_as.z80s:7889   .data:00000fd7 bracket_char_lfa
solo_forth.for_as.z80s:7889   .data:00000fd9 bracket_char_nfa
solo_forth.for_as.z80s:7895   .text:00001d4c bracket_char_pfa
solo_forth.for_as.z80s:7903   .text:00001d52 s_quote_
solo_forth.for_as.z80s:7889   .data:00000fe0 s_quote_cfap
solo_forth.for_as.z80s:7889   .data:00000fe2 s_quote_lfa
solo_forth.for_as.z80s:7889   .data:00000fe4 s_quote_nfa
solo_forth.for_as.z80s:7903   .text:00001d54 s_quote_pfa
solo_forth.for_as.z80s:7913   .text:00001d5b question_next_screen_
solo_forth.for_as.z80s:7889   .data:00000fe7 question_next_screen_cfap
solo_forth.for_as.z80s:7889   .data:00000fe9 question_next_screen_lfa
solo_forth.for_as.z80s:7889   .data:00000feb question_next_screen_nfa
GAS LISTING solo_forth.for_as.z80s 			page 195


solo_forth.for_as.z80s:7913   .text:00001d5d question_next_screen_pfa
solo_forth.for_as.z80s:7917   .text:00001d63 question_next_screen.end
solo_forth.for_as.z80s:7925   .text:00001d65 dot_context_
solo_forth.for_as.z80s:7889   .data:00000ff0 dot_context_cfap
solo_forth.for_as.z80s:7889   .data:00000ff2 dot_context_lfa
solo_forth.for_as.z80s:7889   .data:00000ff4 dot_context_nfa
solo_forth.for_as.z80s:7925   .text:00001d67 dot_context_pfa
solo_forth.for_as.z80s:7934   .text:00001d6f dot_context.do
solo_forth.for_as.z80s:7938   .text:00001d7d dot_context.end
solo_forth.for_as.z80s:7947   .text:00001d87 question_backslash_
solo_forth.for_as.z80s:7889   .data:00000ffd question_backslash_cfap
solo_forth.for_as.z80s:7889   .data:00000fff question_backslash_lfa
solo_forth.for_as.z80s:7889   .data:00001001 question_backslash_nfa
solo_forth.for_as.z80s:7947   .text:00001d89 question_backslash_pfa
solo_forth.for_as.z80s:7960   .text:00001d8f question_backslash.end
solo_forth.for_as.z80s:7966   .text:00001d91 backslash_
solo_forth.for_as.z80s:7889   .data:00001004 backslash_cfap
solo_forth.for_as.z80s:7889   .data:00001006 backslash_lfa
solo_forth.for_as.z80s:7889   .data:00001008 backslash_nfa
solo_forth.for_as.z80s:7966   .text:00001d93 backslash_pfa
solo_forth.for_as.z80s:7982   .text:00001da5 backslash.loading
solo_forth.for_as.z80s:7990   .text:00001db9 dot_paren_
solo_forth.for_as.z80s:7889   .data:0000100a dot_paren_cfap
solo_forth.for_as.z80s:7889   .data:0000100c dot_paren_lfa
solo_forth.for_as.z80s:7889   .data:0000100e dot_paren_nfa
solo_forth.for_as.z80s:7990   .text:00001dbb dot_paren_pfa

NO UNDEFINED SYMBOLS
