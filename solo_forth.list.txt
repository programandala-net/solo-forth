GAS LISTING solo_forth.z80s 			page 1


 GNU assembler version 2.22 (z80-unknown-coff)
	 using BFD version (GNU Binutils) 2.22.
 options passed	: -z80 -aglhs=solo_forth.list.txt 
 input file    	: solo_forth.z80s
 output file   	: solo_forth.o
 target        	: z80-unknown-coff
 time stamp    	: 2015-08-18T00:27:50.000+0200

GAS LISTING solo_forth.z80s 			page 2


   1               	; Solo Forth
   2               	
   3               	; *******************************************************
   4               	; XXX WARNING
   5               	
   6               	; This source has being converted from Pasmo to GNU binutils.
   7               	; It can be assembled, but does not work fine yet.
   8               	
   9               	; *******************************************************
  10               	
  11               	; XXX TODO
  12               	version_status:   equ 'A'
  13               	version_branch:   equ 00
  14               	version_release:  equ 2015081721
  15               	
  16               	; XXX TMP -- for debugging
  17               	;vr_div: equ version_release/65535
  18               	;vr_mod: equ version_release mod 65535
  19               	;vr_mod2: equ version_release - vr_div
  20               	
  21               	; A Forth system for ZX Spectrum 128K and G+DOS.
  22               	; http://programandala.net/en.program.solo_forth.html
  23               	
  24               	; Copyright (C) 2015 Marcos Cruz (programandala.net)
  25               	
  26               	; Copying and distribution of this file, with or without
  27               	; modification, are permitted in any medium without royalty
  28               	; provided the copyright notice, the aknowledgments file and
  29               	; this notice are preserved.  This file is offered as-is,
  30               	; without any warranty.
  31               	
  32               	; ==============================================================
  33               	; Acknowledgments
  34               	
  35               	; See the file <ACKNOWLEDGMENTS.adoc>.
  36               	
  37               	; ==============================================================
  38               	; History
  39               	
  40               	; See
  41               	; http://programandala.net/en.program.solo_forth.history.html
  42               	
  43               	; ==============================================================
  44               	; System description
  45               	
  46               	; ----------------------------------------------
  47               	; Forth Registers
  48               	
  49               	; Forth Z80  Forth preservation rules
  50               	; ----- ---  ------------------------
  51               	; IP    BC   Interpretive pointer.
  52               	;            Should be preserved across Forth words.
  53               	; SP    SP   Data stack pointer.
  54               	;            Should be used only as data stack across Forth words.
  55               	;            May be used within Forth words if restored before exit.
  56               	;       DE   Input only when pushhlde called. ; XXX TODO
  57               	;       HL   Input only when pushhl called. ; XXX TODO
GAS LISTING solo_forth.z80s 			page 3


  58               	;       IX   Address of `next`.
  59               	;            May be used within Forth words if restored before exit.
  60               	;       IY   Address of the ERRNR ZX Spectrum system variable.
  61               	;            May be used within Forth words if restored before exit.
  62               	
  63               	; ----------------------------------------------
  64               	; Header structure
  65               	
  66               	; The name and link fields are created in a memory bank:
  67               	
  68               	; cfap: dw cfa             ; Pointer to cfa in main memory.
  69               	; lfa:  dw nfa of the previous word
  70               	; nfa:  db length+flags    ; Bits:      76543210
  71               	                           ; Bit names: .PSLLLLL
  72               	                           ; Legend:
  73               	                           ;   P: Precedence bit.
  74               	                           ;      0 = non-immediate word
  75               	                           ;      1 = immediate word
  76               	                           ;   S: Smudge bit:
  77               	                           ;      0 = definition completed
  78               	                           ;      1 = definition not completed
  79               	                           ;   LLLLL: name length (0..31).
  80               	;       ds length          ; name
  81               	
  82               	; The code and parameter fields are created in the dictionary:
  83               	
  84               	; cfa: dw code_address
  85               	; pfa:    ...              ; data or code
  86               	
  87               	; ==============================================================
  88               	; Glossary
  89               	
  90               	; The description of Forth words is included in this source.
  91               	; The markers `doc{` and `}doc` delimitate the comments that
  92               	; form the glossary.
  93               	
  94               	; ----------------------------------------------
  95               	; Stack notation
  96               	
  97               	; XXX TODO
  98               	; XXX TODO update when true=-1
  99               	
 100               	; a        = address
 101               	; ca       = character-aligned address
 102               	
 103               	; f        = flag (false is 0; true is any other value)
 104               	; tf       = true flag (1)
 105               	; ff       = false flag (0)
 106               	; wf       = well-formed flag (false is 0; true is 1)
 107               	
 108               	; b        = 8-bit byte
 109               	; c        = 7-bit or 8-bit character
 110               	; u        = 16-bit unsigned number
 111               	; len      = 16-bit unsigned number, length of memory zone or string
 112               	; ca len   = string
 113               	; n        = 16-bit signed number
 114               	; x        = 16-bit signed or unsigned number
GAS LISTING solo_forth.z80s 			page 4


 115               	; d        = 32-bit signed double number
 116               	; ud       = 32-bit unsigned double number
 117               	; xd       = 32-bit signed or unsigned number
 118               	
 119               	; xc       = 8-bit graphic x coordinate (0..255)
 120               	; yc       = 8-bit graphic y coordinate (0..191)
 121               	; line     = 8-bit cursor line (0..23)
 122               	; col      = 8-bit cursor column (0..31)
 123               	
 124               	; cfa      = code field address
 125               	; lfa      = link field address
 126               	; nfa      = name field address
 127               	; pfa      = parameter field address
 128               	; cfap     = code field address pointer
 129               	
 130               	; orig     = address of an unresolved forward branch
 131               	; dest     = address of a backward branch target
 132               	
 133               	; cs-id    = control structure identifier
 134               	
 135               	; op       = Z80 8-bit opcode, generally a jump
 136               	; r        = Z80 8-bit register identifier
 137               	; rp       = Z80 16-bit register pair identifier
 138               	
 139               	; ----------------------------------------------
 140               	; Parsed text notation
 141               	
 142               	; XXX TODO
 143               	
 144               	; <char>          the delimiting character marking the end of the
 145               	;                 string being parsed
 146               	; <chars>         zero or more consecutive occurrences of the
 147               	;                 character char
 148               	; <space>         a delimiting space character
 149               	; <spaces>        zero or more consecutive occurrences of the
 150               	;                 character space
 151               	; <quote>         a delimiting double quote
 152               	; <paren>         a delimiting right parenthesis
 153               	; <eol>           an implied delimiter marking the end of a line
 154               	; ccc             a parsed sequence of arbitrary characters,
 155               	;                 excluding the delimiter character
 156               	; text            same as ccc
 157               	; name            a token delimited by space, equivalent to
 158               	;                 ccc<space> or ccc<eol>
 159               	
 160               	; ----------------------------------------------
 161               	; Word attributes
 162               	
 163               	; XXX TODO -- finish
 164               	
 165               	; The capital letters on the right show definition characteristics:
 166               	
 167               	; C      May only be used within a colon definition. A digit indicates number
 168               	;        of memory addresses used, if other than one. A plus sign indicates
 169               	;        a variable number of memory addresses used.
 170               	; E      Intended for execution only.
 171               	; I      Immediate. Has precedence bit set. Will execute even when compiling.
GAS LISTING solo_forth.z80s 			page 5


 172               	; U      A user variable.
 173               	
 174               	
 175               	; ==============================================================
 176               	; Sections
 177               	
 178               	  .text
 179               	
 180               	  ; XXX FIXME the binary file contains the data section right after
 181               	  ; the text section, not at 0xC000
 182               	
 183               	  .data
 184               	
 185               	  ; .offset 0xC000 ; XXX no change
 186               	
 187               	  ; XXX this creates >50 K file:
 188               	
 189               	  ; org names_bank_address
 190               	
 191               	  ; XXX when first `.data` is at the end of the file, `org 0` causes
 192               	  ; error "attempt to move org backwards", because macros already
 193               	  ; compiled into the section:
 194               	
 195               	  ; org 0
 196               	
 197               	;start_of_bank: ; XXX TMP for debugging
 198               	;  .ascii "start-of-bank" ; XXX TMP for debugging
 199 0000 00        	  db 0 ; fake length byte, needed by the algorithm used in `cfa>nfa`
 200               	
 201 0001 6A05 0000 	  .text
 201      445C 7830 
 201      3072 0505 
 201      0004 464F 
 201      5254 4878 
 202               	
 203               	  ; .offset 0x5E00 ; XXX no change
 204               	
 205               	; ==============================================================
 206               	; Configuration
 207               	
 208               	  ; XXX FIXME Pasmo gives strange errors (symbols not found)
 209               	  ; when some config flags are used in nested `if`. A literal
 210               	  ; flag (0/1) is used instead, with the flag name in a comment;
 211               	  ; it is changed with a text substitution.  Some Vim mappings
 212               	  ; are created to turn them on on an off.
 213               	
 214               	  ; XXX experimental
 215               	size_optimization: equ false
 216               	  ; true = some code pieces are more compact but slower.
 217               	  ; false = normal, faster code.
 218               	
 219               	  ; XXX TODO -- not used yet
 220               	fig_parsing: equ false
 221               	  ; true = the fig-Forth parsing method is used.
 222               	  ; false = parsing is modified after Forth-83 and ANS Forth.
 223               	
 224               	  ; XXX TODO
GAS LISTING solo_forth.z80s 			page 6


 225               	latin1_charset_in_bank: equ false
 226               	  ; true = a 224-char Latin 1 charset is stored in the memory bank.
 227               	  ; false = the default charset is used.
 228               	
 229               	ans_forth_block_size: equ false
 230               	  ; true = one 1024-byte block per screen ; XXX TODO
 231               	  ; false = two 512-byte blocks per screen
 232               	
 233               	  ; XXX TODO
 234               	; fig_exit: equ true
 235               	  ; true = fig-Forth `;s` is used
 236               	  ; false = Forth-83 and ANS Forth `exit` is used ; XXX FIXME
 237               	
 238               	  ; XXX TODO try false
 239               	  ; XXX FIXME still there are problems when compiler security is off
 240               	  ; XXX TMP 2015-08-16 Note: using 1 intead  of the label doesn't make a
 241               	  ; difference in the crash bug
 242               	;fig_compiler_security: equ true
 243               	  ; true = fig-Forth `?pairs' is used
 244               	  ; false = no checking during compilation of control
 245               	  ;   structures: smaller and faster code.
 246               	
 247               	  ; XXX TODO
 248               	show_version: equ false
 249               	
 250               	; ==============================================================
 251               	; Symbols
 252               	
 253               	; ----------------------------------------------
 254               	; Forth
 255               	
 256               	origin:                           equ 0x5E00
 257               	
 258               	false:                            equ 0
 259               	true:                             equ 1
 260               	.if true=(-1)
 261               	  ; XXX FIXME
 262               	  ; There were problems when true=-1, but it seems they have
 263               	  ; disappeared after switching to the one buffer method.
 264               	  .warning TRUE is -1
 265               	.endif
 266               	
 267               	cell:                             equ 2
 268               	
 269               	cells_per_data_stack:             equ 0x50
 270               	cells_per_return_stack:           equ 0x50
 271               	
 272               	bytes_per_terminal_input_buffer:  equ 0x50
 273               	
 274               	buffers:                          equ 0x01
 275               	
 276               	.if ans_forth_block_size
 277               	
 278               	data_bytes_per_buffer:          equ 0x0400
 279               	blocks_per_screen:              equ 0x01
 280               	
 281               	.else
GAS LISTING solo_forth.z80s 			page 7


 282               	
 283               	data_bytes_per_buffer:          equ 0x0200
 284               	blocks_per_screen:              equ 0x02
 285               	
 286               	.endif
 287               	
 288               	total_bytes_per_buffer:           equ 2+data_bytes_per_buffer+3
 289               	
 290               	screens_per_disk:                 equ 0x030C ; 780 KiB per disk in G+DOS
 291               	characters_per_line:              equ 0x40
 292               	lines_per_screen:                 equ 0x10
 293               	max_search_order:                 equ 0x08 ; maximum number of vocabularies in the search order
 294               	bytes_per_user_variables:         equ 0x40
 295               	
 296               	precedence_bit:       equ 6
 297               	precedence_bit_mask:  equ 1 << precedence_bit
 298               	smudge_bit:           equ 5
 299               	smudge_bit_mask:      equ 1 << smudge_bit
 300               	
 301               	max_word_length:                equ 0x1F
 302               	max_word_length_bit_mask:       equ max_word_length
 303               	
 304               	csb_size:                       equ 256 ; size of the circular string buffer
 305               	
 306               	; Memory banks
 307               	
 308               	default_bank: equ 0
 309               	names_bank:   equ 1
 310               	
 311               	names_bank_address: equ 0xC000 ; names pointers
 312               	
 313               	; Charset
 314               	
 315               	charset_size:     equ 224*8 ; 224 chars (0x20..0xFF) * 8 bitmap rows
 316               	charset_address:  equ 0xFFFF-charset_size+1
 317               	
 318               	; Control structure check numbers
 319               	
 320               	; XXX TODO -- not used yet
 321               	;begin_structure_check_number:   equ 1
 322               	;if_structure_check_number:      equ 2
 323               	;do_structure_check_number:      equ 3
 324               	;case_structure_check_number:    equ 4
 325               	;of_structure_check_number:      equ 5
 326               	;for_structure_check_number:     equ 6
 327               	
 328               	; Error messages are in the disk, starting from the screen
 329               	; number hold in the `msg-scr` constant.  Error codes 0, 16, 32
 330               	; etc are not used, because they coincide with the first line of
 331               	; screens.
 332               	
 333               	; XXX TODO change the order
 334               	
 335               	error.not_understood:               equ 01
 336               	error.stack_empty:                  equ 02
 337               	error.dictionary_full:              equ 03 ; not used
 338               	error.not_unique:                   equ 04
GAS LISTING solo_forth.z80s 			page 8


 339               	error.not_found:                    equ 05
 340               	error.out_of_disk_range:            equ 06
 341               	error.full_stack:                   equ 07
 342               	error.number_08:                    equ 08 ; free
 343               	error.loading_from_screen_0:        equ 09
 344               	error.number_10:                    equ 10 ; free
 345               	error.number_11:                    equ 11 ; free
 346               	error.number_12:                    equ 12 ; free
 347               	error.number_13:                    equ 13 ; free
 348               	error.number_14:                    equ 14 ; free
 349               	error.deferred_word_uninitialized:  equ 15
 350               	error.compilation_only:             equ 17
 351               	error.execution_only:               equ 18
 352               	error.conditionals_not_paired:      equ 19
 353               	error.definition_not_finished:      equ 20
 354               	error.protected_dictionary:         equ 21
 355               	error.loading_only:                 equ 22
 356               	error.off_current_editing_screen:   equ 23
 357               	error.declare_vocabulary:           equ 24
 358               	error.unsupported_tape_operation:   equ 25
 359               	error.unsupported_disk_operation:   equ 26
 360               	error.source_file_needed:           equ 27
 361               	error.not_present_though_required:  equ 28
 362               	error.required_but_not_located:     equ 29
 363               	error.branch_too_long:              equ 30
 364               	error.number_31:                    equ 31 ; free
 365               	error.number_33:                    equ 32 ; free
 366               	
 367               	; ----------------------------------------------
 368               	; Character codes
 369               	
 370               	caps_char:                  equ 0x06 ; toggle caps lock
 371               	edit_char:                  equ 0x07 ; edit
 372               	backspace_char:             equ 0x08
 373               	delete_char:                equ 0x0c ; delete (backspace)
 374               	form_feed_char:             equ 0x0c ; used for printing
 375               	carriage_return_char:       equ 0x0d
 376               	extended_mode_char:         equ 0x0e ; Fuse associates it to the host's Tab key
 377               	graphics_char:              equ 0x0f ; toggle graphics mode
 378               	ink_char:                   equ 0x10
 379               	paper_char:                 equ 0x11
 380               	flash_char:                 equ 0x12
 381               	bright_char:                equ 0x13
 382               	inverse_char:               equ 0x14
 383               	over_char:                  equ 0x15
 384               	at_char:                    equ 0x16
 385               	tab_char:                   equ 0x17 ; tab (screen only)
 386               	space_char:                 equ 0x20
 387               	
 388               	; ----------------------------------------------
 389               	; ROM  routines
 390               	
 391               	rom_chan_open:                   equ 0x1601
 392               	; rom_cl_all:                      equ 0x0DAF ; XXX OLD
 393               	rom_key_decode:                  equ 0x0333
 394               	rom_key_scan:                    equ 0x028E
 395               	rom_key_test:                    equ 0x031E
GAS LISTING solo_forth.z80s 			page 9


 396               	rom_set_permanent_colors_0x1CAD: equ 0x1CAD
 397               	
 398               	; ----------------------------------------------
 399               	; System variables
 400               	
 401               	  ; XXX FIXME Pasmo's bug?: `sys_errnr` is used as the base offset.  When it's
 402               	  ; not defined first, the compilation halts with error "offset out of
 403               	  ; range", though they are fine in the symbols file.
 404               	
 405               	sys_errnr:         equ 0x5C3A ; used as IY index by the OS
 406               	
 407               	sys_attr_p:        equ 0x5C8D
 408               	sys_attr_t:        equ 0x5C8F
 409               	sys_bankm:         equ 0x5B5C
 410               	sys_bordcr:        equ 0x5C48
 411               	sys_chars:         equ 0x5C36
 412               	sys_df_cc:         equ 0x5C84
 413               	sys_df_sz:         equ 0x5C6B
 414               	sys_df_sz_offset:  equ sys_df_sz-sys_errnr
 415               	sys_flags2:        equ 0x5C6A
 416               	sys_last_k:        equ 0x5C08
 417               	sys_last_k_offset: equ sys_last_k-sys_errnr
 418               	sys_mode:          equ 0x5C41
 419               	sys_s_posn:        equ 0x5C88
 420               	sys_scr_ct:        equ 0x5C8C
 421               	sys_scr_ct_offset: equ sys_scr_ct-sys_errnr
 422               	sys_udg:           equ 0x5C7B
 423               	
 424               	; ----------------------------------------------
 425               	; System constants
 426               	
 427               	sys_screen:                 equ 0x4000
 428               	sys_screen_size:            equ 0x1B00
 429               	sys_screen_bitmap_size:     equ 0x1800
 430               	sys_screen_attributes:      equ 0x5800
 431               	sys_screen_attributes_size: equ 0x0300
 432               	
 433               	; ----------------------------------------------
 434               	; Ports
 435               	
 436               	bank1_port:   equ 0x7FFD
 437               	border_port:  equ 0xFE
 438               	
 439               	; ==============================================================
 440               	; Entry points
 441               	
 442               	  .text
 443               	
 444               	cold_entry:
 445               	  ; Location (of the destination address): `0x01 +origin`
 446 0000 C39A 16   	  jp cold_start
 447               	warm_entry:
 448               	  ; Location (of the destination address): `0x04 +origin`
 449 0003 C330 16   	  jp warm_start
 450               	
 451               	; ==============================================================
 452               	; Parameter area
GAS LISTING solo_forth.z80s 			page 10


 453               	
 454               	  ; XXX TODO document the `+origin` index
 455               	
 456               	latest_nfa_in_root_voc.init_value:
 457 0006 1800      	  dw latest_nfa_in_root_voc
 458               	
 459               	latest_nfa_in_forth_voc.init_value:
 460 0008 0F10      	  dw latest_nfa_in_forth_voc
 461               	
 462               	latest_nfa_in_assembler_voc.init_value:
 463 000a A400      	  dw latest_nfa_in_assembler_voc
 464               	
 465               	voc_link.init_value:
 466 000c 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 467               	
 468               	user_variables_pointer:
 469 000e 3200      	  dw user_variables
 470               	
 471               	return_stack_pointer:
 472 0010 0703      	  dw return_stack_bottom
 473               	
 474               	default_color_attribute:
 475 0012 0400      	  dw 4 ; low byte: green paper, black ink; high byte: no mask
 476               	
 477               	  ; XXX TODO
 478               	.if show_version
 479               	version_status_variable:
 480               	  dw version_status
 481               	version_branch_variable:
 482               	  dw version_branch
 483               	version_release_variable:
 484               	  dw version_release mod 0xFFFF
 485               	  dw version_release / 0xFFFF
 486               	.endif
 487               	
 488               	  ; User variables default values
 489               	
 490               	  ; The first eight user variables have default values.  They are used
 491               	  ; by `cold` to overwrite the correspondent user variables.  They must
 492               	  ; be in the same order than user variables.
 493               	
 494               	default_user_variables_start:
 495               	
 496               	s0_init_value:
 497 0014 1402      	  dw data_stack_bottom
 498               	r0_init_value:
 499 0016 0703      	  dw return_stack_bottom
 500 0018 0000      	  dw 0x0000 ; XXX OLD -- tib
 501               	width_init_value:
 502 001a 1F00      	  dw max_word_length
 503               	warning_init_value:
 504 001c 0000      	  dw 0x0000
 505 001e 0000      	  dw 0x0000 ; XXX OLD -- fence
 506               	dp_init_value:
 507 0020 9C1D      	  dw dictionary_pointer_after_cold
 508               	
 509               	  ; XXX TODO move
GAS LISTING solo_forth.z80s 			page 11


 510 0022 0000      	  dw 0x0000 ; XXX free
 511               	
 512               	  ; XXX TODO this four user variables do not need init and this
 513               	  ; space could be saved; they are included here because `#tib`
 514               	  ; must be init; it should be moved to user variable +0x10.
 515               	
 516               	blk_init_value:
 517 0024 0000      	  dw 0x0000
 518               	in_init_value:
 519 0026 0000      	  dw 0x0000
 520               	out_init_value:
 521 0028 0000      	  dw 0x0000
 522               	scr_init_value:
 523 002a 0000      	  dw 0x0000
 524               	
 525               	; XXX OLD
 526               	;number_tib_init_value:
 527               	;  dw bytes_per_terminal_input_buffer
 528               	
 529               	default_user_variables_end:
 530               	
 531               	ip_backup: ; temporary copy of Forth IP
 532 002c 0000      	  dw 0
 533               	
 534               	np defl names_bank_address+1
 535               	
 536               	names_pointer:
 537               	  ; First free address in the names bank,  restored by `cold`.
 538 002e 01C0      	  dw np
 539               	
 540               	names_pointer_init_value:
 541               	  ; Init value of the names pointer, used by `cold`.
 542 0030 01C0      	  dw np
 543               	
 544               	; ==============================================================
 545               	; User variables
 546               	
 547               	user_variables:
 548               	
 549               	  ; Note: the first eight user variables are initialized with
 550               	  ; default values by `cold`.  They must be in the same order
 551               	  ; than their default variables.
 552               	
 553               	s0_value: ; +0x00
 554 0032 1402      	  dw data_stack_bottom
 555               	r0_value: ; +0x02
 556 0034 0703      	  dw return_stack_bottom
 557               	  ; +0x04
 558 0036 0000      	  dw 0x0000 ; XXX OLD -- tib
 559               	width_value: ; +0x06
 560 0038 1F00      	  dw max_word_length
 561               	warning_value: ; +0x08
 562 003a 0000      	  dw 0x0000
 563               	  ; +0x0A
 564 003c 0000      	  dw 0x0000 ; XXX OLD -- fence
 565               	dp_value: ; +0x0C
 566 003e 9C1D      	  dw dictionary_pointer_after_cold
GAS LISTING solo_forth.z80s 			page 12


 567               	
 568               	  ; XXX TODO move
 569 0040 0000      	  dw 0x0000 ; +0x0E free
 570               	
 571               	blk_value: ; +0x10
 572 0042 0000      	  dw 0x0000
 573               	in_value: ; +0x12
 574 0044 0000      	  dw 0x0000
 575               	out_value: ; +0x14
 576 0046 0000      	  dw 0x0000
 577               	scr_value: ; +0x16
 578 0048 0000      	  dw 0x0000
 579               	number_tib_value: ; +0x18
 580 004a 0000      	  dw 0x0000
 581               	hld_value: ; +0x1A
 582 004c 0000      	  dw 0x0000
 583               	current_value: ; +0x1C
 584 004e 0000      	  dw 0x0000
 585               	state_value: ; +0x1E
 586 0050 0000      	  dw 0x0000
 587               	base_value: ; +0x20
 588 0052 0A00      	  dw 0x000A
 589               	dpl_value: ; +0x22
 590 0054 0000      	  dw 0x0000
 591               	fld_value: ; +0x24
 592 0056 0000      	  dw 0x0000
 593               	csp_value: ; +0x26
 594 0058 0000      	  dw 0x0000
 595               	r_hash_value: ; +0x28 ; XXX OLD -- used by the editor, remove
 596 005a 0000      	  dw 0x0000
 597               	
 598               	context_value: ; +0x2A..+0x38
 599               	
 600 005c 5506      	  dw forth_pfa
 601 005e 4F06      	  dw root_pfa
 602 0060 0000 0000 	  ds (max_search_order-2)*cell
 602      0000 0000 
 602      0000 0000 
 603 006c 0000      	  dw 0x0000 ; end of search order, required by `find` \ XXX TODO improve and remove
 604               	
 605               	  ; Unused
 606 006e 0000      	  dw 0x0000
 607 0070 0000      	  dw 0x0000
 608               	
 609               	.if ($-user_variables) != bytes_per_user_variables
 610               	  .error "The space reserved for user variables is wrong."
 611               	.endif
 612               	
 613               	; ==============================================================
 614               	; Stacks and buffers
 615               	
 616               	; ----------------------------------------------
 617               	; Circular string buffer
 618               	
 619               	csb:
 620               	unused_csb:
 621 0072 0001      	  dw csb_size ; unused space in the buffer
GAS LISTING solo_forth.z80s 			page 13


 622               	csb0:
 623 0074 0000 0000 	  ds csb_size
 623      0000 0000 
 623      0000 0000 
 623      0000 0000 
 623      0000 0000 
 624               	csb_total_size: equ $-csb
 625               	
 626               	; ----------------------------------------------
 627               	; Data stack
 628               	
 629               	data_stack_limit: equ $+cell
 630 0174 0000 0000 	  ds cells_per_data_stack*cell
 630      0000 0000 
 630      0000 0000 
 630      0000 0000 
 630      0000 0000 
 631               	data_stack_bottom:
 632               	
 633               	; ----------------------------------------------
 634               	; Terminal input buffer
 635               	
 636               	terminal_input_buffer:
 637 0214 0000 0000 	  ds bytes_per_terminal_input_buffer
 637      0000 0000 
 637      0000 0000 
 637      0000 0000 
 637      0000 0000 
 638 0264 0000 00   	  ds 3 ; for the null word
 639               	
 640               	; ----------------------------------------------
 641               	; Return stack
 642               	
 643               	return_stack_limit: equ $+cell
 644 0267 0000 0000 	  ds cells_per_return_stack*cell
 644      0000 0000 
 644      0000 0000 
 644      0000 0000 
 644      0000 0000 
 645               	return_stack_bottom:
 646               	
 647               	; ----------------------------------------------
 648               	; Disk buffer
 649               	
 650               	buffer_block_id_mask: equ 0x7FFF
 651               	
 652               	; A block id is the number of the associated block, with the
 653               	; sign bit indicating, when it's set, that the buffer has been
 654               	; modified.
 655               	
 656               	disk_buffer:
 657               	
 658 0307 FF7F      	dw buffer_block_id_mask     ; Block id used when the  buffer
 659               	                            ; is not associated with a block.
 660 0309 0000 0000 	ds data_bytes_per_buffer    ; Actual content of the block,
 660      0000 0000 
 660      0000 0000 
GAS LISTING solo_forth.z80s 			page 14


 660      0000 0000 
 660      0000 0000 
 661               	                            ; a disk sector.
 662 0509 2000 20   	db space_char,0,space_char  ; Null word, required by the parsing words.
 663               	
 664               	; ==============================================================
 665               	; Macros
 666               	
 667               	; ----------------------------------------------
 668               	; Header
 669               	
 670               	immediate: equ precedence_bit_mask ; used as optional parameter
 671               	
 672               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 673               	; current_vocabulary defl forth_pfa \ XXX OLD
 674               	
 675               	_header: macro _base_label,_name,_is_immediate=0
 676               	
 677               	  ; In dictionary:
 678               	
 679               	  .text
 680               	
 681               	\_base_label: ; code field address
 682               	
 683               	  ; In memory bank:
 684               	
 685               	  .data
 686               	
 687               	\_base_label\()cfap: 
 688               	    dw \_base_label ; code field address pointer
 689               	\_base_label\()lfa: ; link field address
 690               	    dw nfa_of_the_previous_word ; link field
 691               	\_base_label\()nfa: ; name field address
 692               	
 693               	  ; Length byte with optional precedence bit:
 694               	  db _address_after_name-_name_address+\_is_immediate
 695               	
 696               	_name_address defl $
 697               	  db "\_name" ; name field
 698               	_address_after_name defl $
 699               	np defl $ ; new value of the names pointer
 700               	
 701               	  ; Update the names pointer:
 702               	  ; XXX OLD
 703               	  ; XXX TODO
 704               	;  .org names_pointer
 705               	;  dw np ; overwrite names_pointer
 706               	;  dw np ; overwrite names_pointer_init_value
 707               	
 708               	  ; In dictionary:
 709               	  
 710               	  .text
 711               	
 712               	nfa_of_the_previous_word defl \_base_label\()nfa
 713               	
 714               	  endm
 715               	
GAS LISTING solo_forth.z80s 			page 15


 716               	_code_header: macro _base_label,_name,_is_immediate=0
 717               	
 718               	  _header \_base_label,"\_name",\_is_immediate
 719               	  dw \_base_label\()pfa ; code field
 720               	  \_base_label\()pfa: ; parameter field address
 721               	
 722               	  endm
 723               	
 724               	_code_alias_header: macro _base_label,_name,_is_immediate=0,_alias
 725               	
 726               	  _header \_base_label,"\_name",\_is_immediate
 727               	  dw \_alias\()pfa ; code field
 728               	
 729               	  endm
 730               	
 731               	_colon_header: macro _base_label,_name,_is_immediate=0
 732               	
 733               	  _header \_base_label,"\_name",\_is_immediate
 734               	  dw do_colon ; code field
 735               	  \_base_label\()pfa: ; parameter field address
 736               	
 737               	  endm
 738               	
 739               	_user_variable_header: macro _base_label,_name,_is_immediate=0
 740               	
 741               	  _header \_base_label,"\_name",\_is_immediate
 742               	  dw do_user ; code field
 743               	  \_base_label\()pfa: ; parameter field address
 744               	
 745               	  endm
 746               	
 747               	_does_header: macro _base_label,_name,_is_immediate=0,_runtime_routine
 748               	
 749               	  _header \_base_label,"\_name",\_is_immediate
 750               	
 751               	  dw \_runtime_routine ; code field
 752               	  \_base_label\()pfa: ; parameter field address
 753               	
 754               	  endm
 755               	
 756               	_constant_header: macro _base_label,_name,_is_immediate=0
 757               	
 758               	  _header \_base_label,"\_name",\_is_immediate
 759               	  dw do_constant ; code field
 760               	  \_base_label\()pfa: ; parameter field address
 761               	
 762               	  endm
 763               	
 764               	_variable_header: macro _base_label,_name,_is_immediate=0
 765               	
 766               	  _header \_base_label,"\_name",\_is_immediate
 767               	  dw do_create ; code field
 768               	  \_base_label\()pfa: ; parameter field address
 769               	
 770               	  endm
 771               	
 772               	_two_variable_header: macro _base_label,_name,_is_immediate=0
GAS LISTING solo_forth.z80s 			page 16


 773               	
 774               	  _variable_header \_base_label,"\_name",\_is_immediate
 775               	
 776               	  endm
 777               	
 778               	; ----------------------------------------------
 779               	; Literals
 780               	
 781               	_string: macro _text
 782               	
 783               	  ; _string_first ; address of the first char of the name
 784               	  ; _string_next  ; address after the last char of the name
 785               	  db _string_next-_string_first ; length byte
 786               	_string_first defl $
 787               	  db "\_text"
 788               	_string_next defl $
 789               	
 790               	endm
 791               	
 792               	_literal: macro _n
 793               	
 794               	  ; Note: parenthesis are needed to prevent a strange problem of
 795               	  ; Pasmo with signs.
 796               	
 797               	  .if \_n==0
 798               	    dw zero_
 799               	  .elseif \_n==1
 800               	    dw one_
 801               	  .elseif \_n==2
 802               	    dw two_
 803               	  .elseif \_n>=0 && \_n<=255
 804               	    dw c_lit_
 805               	    db \_n
 806               	  .else
 807               	    dw lit_
 808               	    dw \_n
 809               	  .endif
 810               	  endm
 811               	
 812               	; ----------------------------------------------
 813               	; Jumps
 814               	
 815               	_jp_next: macro
 816               	
 817               	  jp (ix)
 818               	
 819               	  endm
 820               	
 821               	; Create relative or absolute jumps, depending on the configured optimization
 822               	
 823               	_jump: macro _address
 824               	  .if size_optimization
 825               	    jr \_address
 826               	  .else
 827               	    jp \_address
 828               	  .endif
 829               	  endm
GAS LISTING solo_forth.z80s 			page 17


 830               	
 831               	_jump_nc: macro _address
 832               	  .if size_optimization
 833               	    jr nc,\_address
 834               	  .else
 835               	    jp nc,\_address
 836               	  .endif
 837               	  endm
 838               	
 839               	_jump_z: macro _address
 840               	  .if size_optimization
 841               	    jr z,\_address
 842               	  .else
 843               	    jp z,\_address
 844               	  .endif
 845               	  endm
 846               	
 847               	; ----------------------------------------------
 848               	; Bank
 849               	
 850               	_bank: macro _n
 851               	  _literal \_n
 852               	  dw bank_
 853               	  endm
 854               	
 855               	_names_bank: macro
 856               	  _bank names_bank
 857               	  endm
 858               	
 859               	_default_bank: macro
 860               	  _bank default_bank
 861               	  endm
 862               	
 863               	; ----------------------------------------------
 864               	; Error messages
 865               	
 866               	_question_error: macro _error
 867               	  _literal \_error
 868               	  dw question_error_
 869               	  endm
 870               	
 871               	_message: macro _error
 872               	  _literal \_error
 873               	  dw message_
 874               	  endm
 875               	
 876               	; ----------------------------------------------
 877               	; Debug
 878               	
 879               	_z80_border: macro _color
 880               	  push af
 881               	  push bc
 882               	  ld a,\_color
 883               	  out (border_port),a
 884               	  ld bc,0
 885               	_z80_border_pause: defl $
 886               	  dec bc
GAS LISTING solo_forth.z80s 			page 18


 887               	  ld a,b
 888               	  or c
 889               	  jr nz,_z80_border_pause
 890               	  pop bc
 891               	  pop af
 892               	  endm
 893               	
 894               	_z80_border_wait: macro _color
 895               	  push af
 896               	  ld a,\_color
 897               	  out (border_port),a
 898               	  xor a
 899               	  ld (sys_last_k),a
 900               	_z80_border_wait_pause: defl $
 901               	  ld a,(sys_last_k)
 902               	  and a
 903               	  jr z,_z80_border_wait_pause
 904               	  pop af
 905               	  endm
 906               	
 907               	_echo: macro _txt
 908               	  dw cr_,paren_dot_quote_
 909               	  _string "\_txt"
 910               	  endm
 911               	
 912               	; ==============================================================
 913               	; Misc routines
 914               	
 915               	; [Code from DZX-Forth.]
 916               	
 917               	; ----------------------------------------------
 918               	; Compare de and hl
 919               	
 920               	compare_de_hl_unsigned:
 921               	
 922               	  ; Input:  de, hl
 923               	  ; Output:
 924               	  ;  flag C if hl < de
 925               	  ;  flag Z if hl = de
 926               	
 927 050c 7C        	  ld a,h
 928 050d BA        	  cp d
 929 050e C0        	  ret nz
 930 050f 7D        	  ld a,l
 931 0510 BB        	  cp e
 932 0511 C9        	  ret
 933               	
 934               	compare_de_hl_signed:
 935               	
 936               	  ; Input:  de, hl
 937               	  ; Output: flag C if hl < de
 938               	
 939 0512 7C        	  ld a,h
 940 0513 AA        	  xor d
 941 0514 F20C 05   	  jp p,compare_de_hl_unsigned
 942 0517 7C        	  ld a,h
 943 0518 B7        	  or a
GAS LISTING solo_forth.z80s 			page 19


 944 0519 F0        	  ret p
 945 051a 37        	  scf
 946 051b C9        	  ret
 947               	
 948               	; ----------------------------------------------
 949               	; Move block
 950               	
 951               	move_block:
 952               	
 953               	  ; Input:
 954               	  ; hl = source
 955               	  ; de = destination
 956               	  ; bc = count
 957               	
 958               	  ; If bc is greater than zero, copy the contents of bc consecutive address
 959               	  ; units at hl to the bc consecutive address units at de. After the move
 960               	  ; completes, the bc consecutive address units at de contain exactly what the
 961               	  ; bc consecutive address units at hl contained before the move.
 962               	
 963 051c CD0C 05   	  call compare_de_hl_unsigned
 964 051f DA28 05   	  jp c,move_block_downwards
 965               	
 966               	; ----------------------------------------------
 967               	; Move block upwards
 968               	
 969               	move_block_upwards:
 970               	
 971               	  ; Input:
 972               	  ; hl = source
 973               	  ; de = destination
 974               	  ; bc = count
 975               	
 976               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 977               	  ; space starting at hl to that starting at de, proceeding
 978               	  ; character-by-character from lower addresses to higher addresses.
 979               	
 980 0522 79        	  ld a,c
 981 0523 B0        	  or b
 982 0524 C8        	  ret z
 983 0525 EDB0      	  ldir
 984 0527 C9        	  ret
 985               	
 986               	; ----------------------------------------------
 987               	; Move block downwards
 988               	
 989               	  ; Input:
 990               	  ; hl = source
 991               	  ; de = destination
 992               	  ; bc = count
 993               	
 994               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 995               	  ; space starting at hl to that starting at de, proceeding
 996               	  ; character-by-character from higher addresses to lower addresses.
 997               	
 998               	move_block_downwards:
 999               	
 1000 0528 79        	  ld a,c
GAS LISTING solo_forth.z80s 			page 20


 1001 0529 B0        	  or b
 1002 052a C8        	  ret z
 1003 052b 09        	  add hl,bc
 1004 052c 2B        	  dec hl
 1005 052d EB        	  ex de,hl
 1006 052e 09        	  add hl,bc
 1007 052f 2B        	  dec hl
 1008 0530 EB        	  ex de,hl
 1009 0531 EDB8      	  lddr
 1010 0533 C9        	  ret
 1011               	
 1012               	; ----------------------------------------------
 1013               	; Multiplication primitives
 1014               	
 1015               	; AHL <- A * DE
 1016               	
 1017               	a_multiplied_by_de_to_ahl:
 1018 0534 2100 00   	  ld hl,0
 1019 0537 0E08      	  ld c,8
 1020               	a_multiplied_by_de_to_ahl.1:
 1021 0539 29        	  add hl,hl
 1022 053a 17        	  rla
 1023 053b D241 05   	  jp nc,a_multiplied_by_de_to_ahl.2
 1024 053e 19        	  add hl,de
 1025 053f CE00      	  adc a,0
 1026               	a_multiplied_by_de_to_ahl.2:
 1027 0541 0D        	  dec c
 1028 0542 C239 05   	  jp nz,a_multiplied_by_de_to_ahl.1
 1029 0545 C9        	  ret
 1030               	
 1031               	; Unsigned 16*16 multiply, 32-bit result
 1032               	
 1033               	; HLDE <- HL * DE
 1034               	
 1035               	hl_multiplied_by_de_to_hlde_unsigned:
 1036 0546 C5        	  push bc ; save Forth IP
 1037 0547 44        	  ld b,h
 1038 0548 7D        	  ld a,l
 1039 0549 CD34 05   	  call a_multiplied_by_de_to_ahl
 1040 054c E5        	  push hl
 1041 054d 67        	  ld h,a
 1042 054e 78        	  ld a,b
 1043 054f 44        	  ld b,h
 1044 0550 CD34 05   	  call a_multiplied_by_de_to_ahl
 1045 0553 D1        	  pop de
 1046 0554 4A        	  ld c,d
 1047 0555 09        	  add hl,bc
 1048 0556 CE00      	  adc a,0
 1049 0558 55        	  ld d,l
 1050 0559 6C        	  ld l,h
 1051 055a 67        	  ld h,a
 1052 055b C1        	  pop bc ; restore Forth IP
 1053 055c C9        	  ret
 1054               	
 1055               	; ==============================================================
 1056               	; :Inner interpreter
 1057               	
GAS LISTING solo_forth.z80s 			page 21


 1058               	push_hlde:
 1059 055d D5        	  push de
 1060               	
 1061               	push_hl:
 1062 055e E5        	  push hl
 1063               	
 1064               	next:
 1065               	  ; Execute the word whose cfa is in the address pointed by the bc register.
 1066               	  ; Forth: W  <-- (IP)
 1067               	  ; Z80:   hl <-- (bc)
 1068 055f 0A        	  ld a,(bc)
 1069 0560 6F        	  ld l,a
 1070 0561 03        	  inc bc ; inc IP
 1071 0562 0A        	  ld a,(bc)
 1072 0563 67        	  ld h,a
 1073 0564 03        	  inc bc ; inc IP
 1074               	  ; bc = address of the next cfa
 1075               	  ; hl = cfa
 1076               	
 1077               	next2:
 1078               	  ; Execute the word whose cfa is in the hl register.
 1079               	  ; Forth: PC <-- (W)
 1080               	  ; Z80:   pc <-- (hl)
 1081 0565 5E        	  ld e,(hl)
 1082 0566 23        	  inc hl
 1083 0567 56        	  ld d,(hl)
 1084 0568 EB        	  ex de,hl
 1085               	  ; hl = (cfa) = address of the code
 1086               	  ; de = cfa+1 = pfa-1
 1087               	
 1088               	next2_end: ; XXX TMP for debugging
 1089 0569 E9        	  jp (hl)
 1090               	
 1091               	; ==============================================================
 1092               	; Dictionary
 1093               	
 1094               	; ----------------------------------------------
 1095               	; Start compiling in the `root` vocabulary
 1096               	
 1097               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1098               	; current_vocabulary defl root_pfa
 1099               	
 1100               	; ----------------------------------------------
 1101 056a 6C05      	  _code_header root_x_,"\x00",immediate
 1102               	
 1103               	; doc{
 1104               	
 1105               	; x  ( -- )
 1106               	
 1107               	; This is a pseudonym for an alias of the "null" word that is
 1108               	; defined in the `forth` vocabulary.
 1109               	
 1110               	; }doc
 1111               	
 1112 056c 211B 11   	  ld hl,x_ ; cfa of the actual null word
 1113 056f C365 05   	  jp next2 ; execute it
 1114               	
GAS LISTING solo_forth.z80s 			page 22


 1115               	; ----------------------------------------------
 1116 0572 650C      	  _colon_header root_forth_,"FORTH"
 1117               	
 1118 0574 5306      	  dw forth_
 1119 0576 C00A      	  dw semicolon_s_
 1120               	
 1121               	; ----------------------------------------------
 1122 0578 650C      	  _colon_header root_definitions_,"DEFINITIONS"
 1123               	
 1124 057a 8C15      	  dw definitions_
 1125 057c C00A      	  dw semicolon_s_
 1126               	
 1127               	latest_nfa_in_root_voc: equ root_definitions_nfa
 1128               	
 1129               	; ----------------------------------------------
 1130               	; Start compiling in the `assembler` vocabulary
 1131               	
 1132               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1133               	; current_vocabulary defl forth_pfa
 1134               	
 1135               	; ----------------------------------------------
 1136 057e 1C14      	  _variable_header abase_,"ABASE"
 1137               	
 1138               	; doc{
 1139               	;
 1140               	; abase  ( -- a )
 1141               	;
 1142               	; A variable used to save the current value of `base` in
 1143               	; assembler definitions.
 1144               	;
 1145               	; }doc
 1146               	
 1147 0580 0000      	  dw 0
 1148               	
 1149               	; ----------------------------------------------
 1150 0582 650C      	  _colon_header asm_,"ASM"
 1151               	
 1152               	; doc{
 1153               	;
 1154               	; asm  ( -- )
 1155               	;
 1156               	; Enter the assembler mode.
 1157               	;
 1158               	; }doc
 1159               	
 1160               	  ; [Idea taken from Coos Haak's Z80 Forth assembler.]
 1161               	
 1162 0584 960C      	  dw noop_ ; to be patched by the assembler
 1163 0586 330D 1A0C 	  dw base_,fetch_,abase_,store_ ; save the current base
 1163      7E05 490C 
 1164 058e B30F      	  dw hex_
 1165 0590 FD05 5906 	  dw also_,assembler_ ; XXX TODO better
 1166 0594 C00A      	  dw semicolon_s_
 1167               	
 1168               	; ----------------------------------------------
 1169 0596 650C      	  _colon_header end_asm_,"END-ASM"
 1170               	
GAS LISTING solo_forth.z80s 			page 23


 1171               	; doc{
 1172               	;
 1173               	; end-asm  ( -- )
 1174               	;
 1175               	; Exit the assembler mode.
 1176               	;
 1177               	; }doc
 1178               	
 1179 0598 2306      	  dw previous_ ; restore the search order ; XXX TODO better
 1180 059a 7E05 1A0C 	  dw abase_,fetch_,base_,store_ ; restore `base`
 1180      330D 490C 
 1181 05a2 C00A      	  dw semicolon_s_
 1182               	
 1183               	; ----------------------------------------------
 1184 05a4 650C      	  _colon_header end_code_,"END-CODE"
 1185               	
 1186 05a6 480F 9605 	  dw question_csp_,end_asm_,smudge_
 1186      A00F 
 1187 05ac C00A      	  dw semicolon_s_
 1188               	
 1189               	; ----------------------------------------------
 1190 05ae A00C      	  _constant_header next_,"NEXT"
 1191               	
 1192 05b0 5F05      	  dw next
 1193               	
 1194               	; ----------------------------------------------
 1195               	  ; _constant_header next_,"NEXT2"
 1196               	
 1197               	  ; ; XXX OLD -- added for the second version of `defer`, but
 1198               	  ; ; not needed
 1199               	  
 1200               	  ; dw next2
 1201               	
 1202               	; ----------------------------------------------
 1203 05b2 A00C      	  _constant_header pushhl_,"PUSHHL"
 1204               	
 1205 05b4 5E05      	  dw push_hl
 1206               	
 1207               	; ----------------------------------------------
 1208 05b6 A00C      	  _constant_header pushhlde_,"PUSHHLDE"
 1209               	
 1210 05b8 5D05      	  dw push_hlde
 1211               	
 1212               	; ----------------------------------------------
 1213 05ba A00C      	  _constant_header fetchhl_,"FETCHHL"
 1214               	
 1215 05bc 1D0C      	  dw fetch.hl
 1216               	
 1217               	; ----------------------------------------------
 1218 05be 650C      	  _colon_header next_comma_,"NEXT,"
 1219               	
 1220               	; doc{
 1221               	;
 1222               	; next,  ( -- )
 1223               	; 
 1224               	; Compile a Z80 jump to `next`.
 1225               	;
GAS LISTING solo_forth.z80s 			page 24


 1226               	; }doc
 1227               	
 1228 05c0 8D06 DDE9 	  dw lit_,0xE9DD ; opcode `jp (ix)`
 1229 05c4 B20D      	  dw comma_
 1230 05c6 C00A      	  dw semicolon_s_
 1231               	
 1232               	; ----------------------------------------------
 1233 05c8 650C      	  _colon_header pushhl_comma_,"PUSHHL,"
 1234               	
 1235               	; doc{
 1236               	;
 1237               	; pushhl,  ( -- )
 1238               	; 
 1239               	; Compile a Z80 jump to `pushhl`.
 1240               	;
 1241               	; }doc
 1242               	
 1243 05ca 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1244 05cd C60D      	  dw c_comma_
 1245 05cf 8D06 5E05 	  dw lit_,push_hl,comma_
 1245      B20D 
 1246 05d5 C00A      	  dw semicolon_s_
 1247               	
 1248               	; ----------------------------------------------
 1249 05d7 650C      	  _colon_header pushhlde_comma_,"PUSHHLDE,"
 1250               	
 1251               	; doc{
 1252               	;
 1253               	; pushhlde,  ( -- )
 1254               	; 
 1255               	; Compile a Z80 jump to `pushhlde`.
 1256               	;
 1257               	; }doc
 1258               	
 1259 05d9 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1260 05dc C60D      	  dw c_comma_
 1261 05de 8D06 5D05 	  dw lit_,push_hlde,comma_
 1261      B20D 
 1262 05e4 C00A      	  dw semicolon_s_
 1263               	
 1264               	; ----------------------------------------------
 1265 05e6 650C      	  _colon_header fetchhl_comma_,"FETCHHL,"
 1266               	
 1267               	; doc{
 1268               	;
 1269               	; fetchhl,  ( -- )
 1270               	; 
 1271               	; Compile a Z80 jump to `fetchhl`.
 1272               	;
 1273               	; }doc
 1274               	
 1275 05e8 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1276 05eb C60D      	  dw c_comma_
 1277 05ed 8D06 1D0C 	  dw lit_,fetch.hl,comma_
 1277      B20D 
 1278 05f3 C00A      	  dw semicolon_s_
 1279               	
GAS LISTING solo_forth.z80s 			page 25


 1280               	latest_nfa_in_assembler_voc: equ fetchhl_comma_nfa
 1281               	
 1282               	; ----------------------------------------------
 1283               	; Start compiling in the `forth` vocabulary
 1284               	
 1285               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1286               	; current_vocabulary defl forth_pfa
 1287               	
 1288               	
 1289               	; ----------------------------------------------
 1290 05f5 650C      	  _colon_header label_,"LABEL"
 1291               	
 1292 05f7 1414 8205 	  dw create_,asm_
 1293 05fb C00A      	  dw semicolon_s_
 1294               	
 1295               	; ----------------------------------------------
 1296 05fd 650C      	  _colon_header also_,"ALSO"
 1297               	
 1298               	; doc{
 1299               	;
 1300               	; also  ( -- )
 1301               	;
 1302               	; Duplicate the vocabulary at the top of the search order.
 1303               	;
 1304               	; }doc
 1305               	
 1306               	; [Code adapted from F83.]
 1307               	
 1308               	; : also  ( -- )
 1309               	;   context dup cell+ [ #vocs 2- cells ] literal cmove>  ;
 1310               	
 1311 05ff 2A0D E00B 	  dw context_,dup_,cell_plus_
 1311      680D 
 1312 0605 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell
 1313 0609 DA09      	  dw cmove_up_
 1314 060b C00A      	  dw semicolon_s_
 1315               	
 1316               	; ----------------------------------------------
 1317 060d 650C      	  _colon_header minus_order_,"-ORDER"
 1318               	
 1319               	; : -order  ( -- )  context [ #vocs cells ] literal erase  ;
 1320               	
 1321 060f 2A0D 8D06 	  dw context_,lit_,max_search_order*cell,erase_
 1321      1000 5611 
 1322 0617 C00A      	  dw semicolon_s_
 1323               	
 1324               	; ----------------------------------------------
 1325 0619 650C      	  _colon_header only_,"ONLY"
 1326               	
 1327               	; doc{
 1328               	;
 1329               	; only  ( -- )
 1330               	;
 1331               	; Erase the search order and forces the `root` vocabulary to
 1332               	; be the first and second.
 1333               	;
 1334               	; }doc
GAS LISTING solo_forth.z80s 			page 26


 1335               	
 1336               	; [Code adapted from F83.]
 1337               	
 1338               	; : only  ( -- )  -order root also  ;
 1339               	
 1340 061b 0D06      	  dw minus_order_
 1341 061d 4D06      	  dw root_
 1342 061f FD05      	  dw also_
 1343 0621 C00A      	  dw semicolon_s_
 1344               	
 1345               	; ----------------------------------------------
 1346 0623 650C      	  _colon_header previous_,"PREVIOUS"
 1347               	
 1348               	; doc{
 1349               	;
 1350               	; previous  ( -- )
 1351               	;
 1352               	; Remove the most recently referenced vocabulary from the search
 1353               	; order.
 1354               	;
 1355               	; }doc
 1356               	
 1357               	; [Code adapted from F83.]
 1358               	
 1359               	; : previous  ( -- )
 1360               	;   context dup cell+ swap [ #vocs 2- cells dup ] literal cmove
 1361               	;   context literal + off  ;
 1362               	
 1363 0625 2A0D E00B 	  dw context_,dup_,cell_plus_,swap_
 1363      680D D90B 
 1364 062d 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell,cmove_
 1364      E609 
 1365 0633 2A0D 8D06 	  dw context_,lit_,(max_search_order-cell)*cell,plus_,off_
 1365      0C00 810B 
 1365      FD0B 
 1366 063d C00A      	  dw semicolon_s_
 1367               	
 1368               	; ----------------------------------------------
 1369 063f 650C      	  _colon_header seal_,"SEAL"
 1370               	
 1371               	; doc{
 1372               	;
 1373               	; seal  ( -- )
 1374               	;
 1375               	; Change the search order such that only the vocabulary at the
 1376               	; top of the search order will be searched.
 1377               	;
 1378               	; }doc
 1379               	
 1380               	; [Code adapted from F83.]
 1381               	
 1382               	; : seal  ( -- )  context @ -order context !  ;
 1383               	
 1384 0641 2A0D 1A0C 	  dw context_,fetch_,minus_order_,context_,store_
 1384      0D06 2A0D 
 1384      490C 
 1385 064b C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 27


 1386               	
 1387               	; ----------------------------------------------
 1388               	
 1389 064d 8315      	  _does_header root_,"ROOT",,do_vocabulary
 1390               	
 1391 064f 1800      	  dw latest_nfa_in_root_voc
 1392               	
 1393               	root_vocabulary_link:
 1394 0651 0000      	  dw 0x0000
 1395               	
 1396               	; ----------------------------------------------
 1397               	
 1398 0653 8315      	  _does_header forth_,"FORTH",,do_vocabulary
 1399               	
 1400 0655 0F10      	  dw latest_nfa_in_forth_voc ; nfa of the latest word defined in this vocabulary
 1401               	
 1402               	forth_vocabulary_link:
 1403 0657 5106      	  dw root_vocabulary_link
 1404               	
 1405               	; ----------------------------------------------
 1406 0659 8315      	  _does_header assembler_,"ASSEMBLER",,do_vocabulary
 1407               	
 1408               	; XXX TODO move `assembler` and everthing related
 1409               	; to the library disk?
 1410               	
 1411 065b A400      	  dw latest_nfa_in_assembler_voc
 1412               	assembler_vocabulary_link:
 1413 065d 5706      	  dw forth_vocabulary_link
 1414               	
 1415               	; ----------------------------------------------
 1416 065f 650C      	  _colon_header s_lit_,"SLIT"
 1417               	
 1418               	  ; : slit  ( -- ca len )  r@ count dup 1+ r> + >r  ;
 1419               	
 1420 0661 4F0B 0710 	  dw r_fetch_,count_,dup_,one_plus_
 1420      E00B 570D 
 1421 0669 FF0A 810B 	  dw from_r_,plus_,to_r_
 1421      F00A 
 1422 066f C00A      	  dw semicolon_s_
 1423               	
 1424               	; ----------------------------------------------
 1425 0671 650C      	  _colon_header paren_s_,"(S)"
 1426               	
 1427               	; doc{
 1428               	;
 1429               	; (s) ( compilation: c "text<c>" -- ) ( run-time:  -- ca len )
 1430               	;
 1431               	; }doc
 1432               	
 1433 0673 A711      	  dw parse_ ; ( ca len )
 1434 0675 1D0F      	  dw comp_question_
 1435 0677 6007 7F06 	  dw zero_branch_,paren_s.interpreting
 1436               	  ; compiling
 1437 067b B314      	  dw s_literal_
 1438 067d C00A      	  dw semicolon_s_ ; XXX TODO exit_
 1439               	paren_s.interpreting:
 1440 067f EA06      	  dw save_string_
GAS LISTING solo_forth.z80s 			page 28


 1441 0681 C00A      	  dw semicolon_s_
 1442               	
 1443               	; ----------------------------------------------
 1444 0683 8506      	  _code_header c_lit_,"CLIT"
 1445               	
 1446 0685 0A        	  ld a,(bc)
 1447 0686 03        	  inc bc
 1448               	  ; XXX TODO include these entry points in the `assembler` vocabulary?
 1449               	push_a:
 1450 0687 6F        	  ld l,a
 1451               	push_l: ; XXX TMP -- not used yet
 1452 0688 2600      	  ld h,0
 1453 068a C35E 05   	  jp push_hl
 1454               	
 1455               	; ----------------------------------------------
 1456 068d 8F06      	  _code_header lit_,"LIT"
 1457               	
 1458               	  ; XXX FIXME -- crash if not compiling
 1459               	  ; XXX TODO -- implement compile-only flag?
 1460               	
 1461 068f 0A        	  ld a,(bc)
 1462 0690 03        	  inc bc
 1463 0691 6F        	  ld l,a
 1464 0692 0A        	  ld a,(bc)
 1465 0693 03        	  inc bc
 1466 0694 67        	  ld h,a
 1467 0695 C35E 05   	  jp push_hl
 1468               	
 1469               	; ----------------------------------------------
 1470 0698 9A06      	  _code_header bank_,"BANK"
 1471               	
 1472               	; doc{
 1473               	;
 1474               	; bank  ( n -- )
 1475               	;
 1476               	; Page memory bank _n_ (0..7) at 0xC000..0xFFFF.
 1477               	;
 1478               	; }doc
 1479               	
 1480 069a D1        	  pop de ; e = bank
 1481 069b CDA0 06   	  call bank.e
 1482 069e DDE9      	  _jp_next
 1483               	
 1484               	bank.default:
 1485               	  ; XXX TODO ?
 1486               	bank.names:
 1487               	  ; XXX TODO ?
 1488               	bank.e:
 1489               	  ; ret ; XXX TMP for debugging
 1490 06a0 3A5C 5B   	  ld a,(sys_bankm) ; get the saved status of BANKM
 1491 06a3 E6F8      	  and 0xF8 ; erase bits 0-2
 1492 06a5 B3        	  or e ; modify bits 0-2
 1493 06a6 F3        	  di
 1494 06a7 325C 5B   	  ld (sys_bankm),a ; update BANKM
 1495 06aa D3FD      	  out (bank1_port),a ; page the bank
****  Warning:overflow
 1496 06ac FB        	  ei
GAS LISTING solo_forth.z80s 			page 29


 1497 06ad C9        	  ret
 1498               	
 1499               	; ----------------------------------------------
 1500 06ae B006      	  _code_header unused_csb_,"UNUSED-CSB"
 1501               	
 1502               	; doc{
 1503               	;
 1504               	; csb-unused  ( -- len )
 1505               	;
 1506               	; }doc
 1507               	
 1508 06b0 2A72 00   	  ld hl,(unused_csb)
 1509 06b3 C35E 05   	  jp push_hl
 1510               	
 1511               	; ----------------------------------------------
 1512 06b6 A00C      	  _constant_header csb0_,"CSB0"
 1513               	
 1514               	; doc{
 1515               	;
 1516               	; csb0  ( -- a )
 1517               	;
 1518               	; }doc
 1519               	
 1520 06b8 7400      	  dw csb0
 1521               	
 1522               	; ----------------------------------------------
 1523 06ba 650C      	  _colon_header question_csb_,"?CSB"
 1524               	
 1525               	; doc{
 1526               	;
 1527               	; ?csb  ( len -- )
 1528               	;
 1529               	; Make sure there's room for the given characters.
 1530               	;
 1531               	; }doc
 1532               	
 1533 06bc E00B 8D06 	  dw dup_,lit_,unused_csb,fetch_,greater_than_
 1533      7200 1A0C 
 1533      170E 
 1534 06c6 6007 D406 	  dw zero_branch_,question_csb_.enough
 1535               	  ; not enough space; reset the pointer
 1536 06ca 8D06 0001 	  _literal csb_size
 1537 06ce 8D06 7200 	  dw lit_,unused_csb,store_
 1537      490C 
 1538               	
 1539               	question_csb_.enough:
 1540 06d4 9B0B 8D06 	  dw negate_,lit_,unused_csb,plus_store_
 1540      7200 F00B 
 1541 06dc C00A      	  dw semicolon_s_
 1542               	
 1543               	; ----------------------------------------------
 1544 06de 650C      	  _colon_header allocate_string_,"ALLOCATE-STRING"
 1545               	
 1546               	; doc{
 1547               	;
 1548               	; string-allocate  ( len -- ca )
 1549               	;
GAS LISTING solo_forth.z80s 			page 30


 1550               	; }doc
 1551               	
 1552 06e0 BA06      	  dw question_csb_
 1553 06e2 B606 AE06 	  dw csb0_,unused_csb_,plus_
 1553      810B 
 1554 06e8 C00A      	  dw semicolon_s_
 1555               	
 1556               	; ----------------------------------------------
 1557 06ea 650C      	  _colon_header save_string_,"SAVE-STRING"
 1558               	
 1559               	; doc{
 1560               	;
 1561               	; save-string  ( ca1 len1 -- ca2 len1 )
 1562               	;
 1563               	; }doc
 1564               	
 1565 06ec E00B DE06 	  dw dup_,allocate_string_,swap_
 1565      D90B 
 1566 06f2 E70B 280B 	  dw two_dup_,two_to_r_
 1567 06f6 F209 370B 	  dw move_,two_from_r_
 1568 06fa C00A      	  dw semicolon_s_
 1569               	
 1570               	; ----------------------------------------------
 1571 06fc 650C      	  _colon_header save_counted_string_,"SAVE-COUNTED-STRING"
 1572               	
 1573               	; doc{
 1574               	;
 1575               	; save-counted-string  ( ca1 len1 -- ca2 )
 1576               	;
 1577               	; }doc
 1578               	
 1579               	; dup 1+ string-allocate dup >r $! r>
 1580               	
 1581 06fe E00B 570D 	  dw dup_,one_plus_,allocate_string_
 1581      DE06 
 1582 0704 E00B F00A 	  dw dup_,to_r_,dollar_store_,from_r_
 1582      D912 FF0A 
 1583 070c C00A      	  dw semicolon_s_
 1584               	
 1585               	; ----------------------------------------------
 1586 070e 650C      	  _colon_header empty_csb_,"EMPTY-CSB"
 1587               	
 1588               	; doc{
 1589               	;
 1590               	; empty-csb  ( -- )
 1591               	;
 1592               	; }doc
 1593               	
 1594 0710 8D06 7200 	  dw lit_,csb
 1595 0714 8D06 0201 	  _literal csb_total_size
 1596 0718 5611      	  dw erase_
 1597 071a C00A      	  dw semicolon_s_
 1598               	
 1599               	; ----------------------------------------------
 1600 071c 1E07      	  _code_header execute_,"EXECUTE"
 1601               	
 1602               	; doc{
GAS LISTING solo_forth.z80s 			page 31


 1603               	;
 1604               	; execute  ( cfa  -- )
 1605               	;
 1606               	; }doc
 1607               	
 1608 071e E1        	  pop hl
 1609 071f C365 05   	  jp next2
 1610               	
 1611               	; ----------------------------------------------
 1612 0722 2407      	  _code_header perform_,"PERFORM"
 1613               	
 1614               	; doc{
 1615               	;
 1616               	; perform  ( a  -- )
 1617               	;
 1618               	; Execute the word whose cfa is stored in _a_.  Do nothing if
 1619               	; the content of _a_ is zero.
 1620               	;
 1621               	; }doc
 1622               	
 1623 0724 E1        	  pop hl
 1624 0725 7E        	  ld a,(hl)
 1625 0726 23        	  inc hl
 1626 0727 66        	  ld h,(hl)
 1627 0728 6F        	  ld l,a
 1628 0729 B4        	  or h
 1629 072a C265 05   	  jp nz,next2
 1630 072d DDE9      	  _jp_next
 1631               	
 1632               	; ----------------------------------------------
 1633 072f 650C      	  _colon_header forward_mark_,">MARK"
 1634               	
 1635               	; doc{
 1636               	;
 1637               	; >mark  ( -- orig )  \ Forth-83, C, "forward-mark"
 1638               	;
 1639               	; Compile space in the dictionary for a branch address which
 1640               	; will later be resolved by `>resolve`.
 1641               	;
 1642               	; Used at the source of a forward branch.  Typically used after
 1643               	; either `branch`, `0branch` or `?branch`.
 1644               	;
 1645               	; }doc
 1646               	
 1647 0731 250F      	  dw question_comp_
 1648 0733 900D C50C 	  dw here_,zero_,comma_
 1648      B20D 
 1649 0739 C00A      	  dw semicolon_s_
 1650               	
 1651               	; ----------------------------------------------
 1652 073b 650C      	  _colon_header forward_resolve_,">RESOLVE"
 1653               	
 1654               	; doc{
 1655               	;
 1656               	; >resolve  ( orig -- )  \ Forth-83, C, "forward-resolve"
 1657               	;
 1658               	; Resolve a forward branch by placing the address of the current
GAS LISTING solo_forth.z80s 			page 32


 1659               	; dictionary pointer into the space compiled by `>mark`.
 1660               	;
 1661               	; }doc
 1662               	
 1663 073d 250F      	  dw question_comp_
 1664 073f 900D D90B 	  dw here_,swap_,store_
 1664      490C 
 1665 0745 C00A      	  dw semicolon_s_
 1666               	
 1667               	; ----------------------------------------------
 1668 0747 650C      	  _colon_header backward_mark_,"<MARK"
 1669               	
 1670               	; doc{
 1671               	;
 1672               	; <mark  ( -- dest )  \ Forth-83, C, "backward-mark"
 1673               	;
 1674               	; Leave the address of the current dictionary pointer, as the
 1675               	; the destination of a backward branch.  _dest_ is typically
 1676               	; only used by `<resolve` to compile a branch address.
 1677               	;
 1678               	; }doc
 1679               	
 1680 0749 250F      	  dw question_comp_
 1681 074b 900D      	  dw here_
 1682 074d C00A      	  dw semicolon_s_
 1683               	
 1684               	; ----------------------------------------------
 1685 074f 650C      	  _colon_header backward_resolve_,"<RESOLVE"
 1686               	
 1687               	; doc{
 1688               	;
 1689               	; <resolve  ( dest -- )  \ Forth-83, C, "backward-resolve"
 1690               	;
 1691               	; Resolve a backward branch.  Compile a branch address using
 1692               	; _dest_, the address left by `<mark`,  as the destination
 1693               	; address.  Used at the source of a backward branch after either
 1694               	; `branch` or `?branch` or `0branch`.
 1695               	;
 1696               	; }doc
 1697               	
 1698 0751 250F      	  dw question_comp_
 1699 0753 B20D      	  dw comma_
 1700 0755 C00A      	  dw semicolon_s_
 1701               	
 1702               	; ----------------------------------------------
 1703 0757 5907      	  _code_header branch_,"BRANCH"
 1704               	
 1705               	; doc{
 1706               	;
 1707               	; branch  ( -- )  \ ANS Forth
 1708               	;
 1709               	; The run-time procedure to branch unconditionally. An in-line
 1710               	; offset is copied to the interpretive pointer IP to branch
 1711               	; forward or backward.
 1712               	;
 1713               	; }doc
 1714               	
GAS LISTING solo_forth.z80s 			page 33


 1715 0759 60        	  ld h,b
 1716 075a 69        	  ld l,c ; hl = Forth IP, containing the address to jump to
 1717 075b 4E        	  ld c,(hl)
 1718 075c 23        	  inc hl
 1719 075d 46        	  ld b,(hl) ; bc = New Forth IP
 1720 075e DDE9      	  _jp_next
 1721               	
 1722               	; ----------------------------------------------
 1723 0760 6207      	  _code_header zero_branch_,"0BRANCH"
 1724               	
 1725               	; doc{
 1726               	;
 1727               	; 0branch  ( f -- )  \ fig-Forth
 1728               	;
 1729               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1730               	; is false (zero), the following in-line address is copied to IP
 1731               	; to branch forward or  backward.
 1732               	;
 1733               	; }doc
 1734               	
 1735 0762 E1        	  pop hl
 1736 0763 7D        	  ld a,l
 1737 0764 B4        	  or h
 1738 0765 CA59 07   	  jp z,branch_pfa ; branch if zero
 1739 0768 03        	  inc bc
 1740 0769 03        	  inc bc ; skip the inline branch address
 1741 076a DDE9      	  _jp_next
 1742               	
 1743               	; ----------------------------------------------
 1744 076c 6E07      	  _code_header question_branch_,"?BRANCH"
 1745               	
 1746               	; doc{
 1747               	;
 1748               	; ?branch  ( f -- )
 1749               	;
 1750               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1751               	; is not zero, the following in-line address is copied to IP to
 1752               	; branch forward or backward.
 1753               	;
 1754               	; Note: This is not Forth-83's `?branch`: Forth-83's `?branch`
 1755               	; does the same than fig-Forth's `0branch`: the branch is done
 1756               	; when the flag is zero. Solo Forth includes fig-Forth's
 1757               	; `0branch` and also `?branch`, that branches when the flag is
 1758               	; not zero.
 1759               	;
 1760               	; }doc
 1761               	
 1762 076e E1        	  pop hl
 1763 076f 7D        	  ld a,l
 1764 0770 B4        	  or h
 1765 0771 C259 07   	  jp nz,branch_pfa ; branch if not zero
 1766 0774 03        	  inc bc
 1767 0775 03        	  inc bc ; skip the inline branch address
 1768 0776 DDE9      	  _jp_next
 1769               	
 1770               	; ----------------------------------------------
 1771 0778 7A07      	  _code_header paren_loop_,"(LOOP)"
GAS LISTING solo_forth.z80s 			page 34


 1772               	
 1773               	  ; XXX NOTE:
 1774               	  ;
 1775               	  ; This code is from Abersoft Fort.  It's the same code used in
 1776               	  ; `(+loop)` in fig-Forth 1.1g.  The author of Abersoft Forth
 1777               	  ; used it to write `(loop)` and wrote `(+loop)` with a simple
 1778               	  ; call to it, what saves code.
 1779               	  ;
 1780               	  ; XXX TODO -- The `(loop)` of DZX-Forth is much faster, but
 1781               	  ; requires and additional parameter on the return stack.
 1782               	
 1783 077a 1101 00   	  ld de,0x0001
 1784               	paren_loop.step_in_de:
 1785 077d 2A10 00   	  ld hl,(return_stack_pointer)
 1786 0780 7E        	  ld a,(hl)
 1787 0781 83        	  add a,e
 1788 0782 77        	  ld (hl),a
 1789 0783 5F        	  ld e,a
 1790 0784 23        	  inc hl
 1791 0785 7E        	  ld a,(hl)
 1792 0786 8A        	  adc a,d
 1793 0787 77        	  ld (hl),a
 1794 0788 23        	  inc hl ; (hl) = limit
 1795 0789 14        	  inc d
 1796 078a 15        	  dec d
 1797 078b 57        	  ld d,a ; de = new index
 1798 078c FA97 07   	  jp m,paren_loop.negative_step
 1799               	
 1800               	  ; increment>0
 1801 078f 7B        	  ld a,e
 1802 0790 96        	  sub (hl)
 1803 0791 7A        	  ld a,d
 1804 0792 23        	  inc hl
 1805 0793 9E        	  sbc a,(hl)
 1806 0794 C39C 07   	  jp paren_loop.end
 1807               	
 1808               	paren_loop.negative_step:
 1809               	  ; increment<0
 1810 0797 7E        	  ld a,(hl) ; limit-index
 1811 0798 93        	  sub e
 1812 0799 23        	  inc hl
 1813 079a 7E        	  ld a,(hl)
 1814 079b 9A        	  sbc a,d ; a<0?
 1815               	
 1816               	paren_loop.end:
 1817 079c FA59 07   	  jp m,branch_pfa ; loop again if a<0
 1818               	  ; done, discard loop parameters
 1819 079f 23        	  inc hl
 1820 07a0 2210 00   	  ld (return_stack_pointer),hl
 1821               	  ; skip branch offset
 1822 07a3 03        	  inc bc
 1823 07a4 03        	  inc bc
 1824 07a5 DDE9      	  _jp_next
 1825               	
 1826               	; ----------------------------------------------
 1827 07a7 A907      	  _code_header paren_plus_loop_,"(+LOOP)"
 1828               	
GAS LISTING solo_forth.z80s 			page 35


 1829 07a9 D1        	  pop de
 1830 07aa C37D 07   	  jp paren_loop.step_in_de
 1831               	
 1832               	; ----------------------------------------------
 1833               	
 1834               	.if 0
 1835               	
 1836               	  _colon_header paren_question_do_,"(?DO)"
 1837               	
 1838               	  ; XXX TODO -- first draft, just copied from DZX-Forth
 1839               	
 1840               	  ; XXX FIXME -- crash in both cases
 1841               	
 1842               	  dw two_dup_,equals_
 1843               	  dw question_branch_,paren_question.end
 1844               	  dw paren_do_
 1845               	  dw semicolon_s_ ; XXX TODO exit_
 1846               	paren_question.end:
 1847               	  dw two_drop_
 1848               	  dw from_r_,fetch_,to_r_
 1849               	  dw semicolon_s_
 1850               	
 1851               	.endif
 1852               	
 1853               	; ----------------------------------------------
 1854 07ad AF07      	  _code_header paren_do_,"(DO)"
 1855               	
 1856               	  ; [Code from CP/M fig-Forth 1.1g.]
 1857               	
 1858 07af D9        	  exx                           ; 04t 01b
 1859 07b0 D1        	  pop de                        ; 10t 01b
 1860 07b1 C1        	  pop bc                        ; 10t 01b
 1861 07b2 2A10 00   	  ld hl,(return_stack_pointer)  ; 20t 03b
 1862 07b5 2B        	  dec hl                        ; 06t 01b
 1863 07b6 70        	  ld (hl),b                     ; 07t 01b
 1864 07b7 2B        	  dec hl                        ; 06t 01b
 1865 07b8 71        	  ld (hl),c                     ; 07t 01b
 1866 07b9 2B        	  dec hl                        ; 06t 01b
 1867 07ba 72        	  ld (hl),d                     ; 07t 01b
 1868 07bb 2B        	  dec hl                        ; 06t 01b
 1869 07bc 73        	  ld (hl),e                     ; 07t 01b
 1870 07bd 2210 00   	  ld (return_stack_pointer),hl  ; 16t 03b
 1871 07c0 D9        	  exx                           ; 04t 01b
 1872               	                                ;116t 18b TOTAL
 1873 07c1 DDE9      	  _jp_next
 1874               	
 1875               	; ----------------------------------------------
 1876               	; XXX TODO experimental do-loop structures adapted from Spectrum Forth-83
 1877               	; and F83.
 1878               	
 1879               	; A do-loop pushes three items on the return stack:
 1880               	;
 1881               	; 0) Limit
 1882               	; 1) Reverse branch address (jump to here if loop repeats).
 1883               	; 2) Current index represented as `(index-limit) xor 0x8000`.
 1884               	;    This is at the top.
 1885               	;    The current index is represented this way so it is easier
GAS LISTING solo_forth.z80s 			page 36


 1886               	;    to check whether index has crossed the boundary between
 1887               	;    limit-1 and limit, acoording to
 1888               	;    the rules of Forth-83, even with negative increment in +LOOP.
 1889               	
 1890 07c3 C507      	  _code_header paren_do83_,"(DO83)"
 1891               	
 1892 07c5 E1        	  pop hl ; initial value
 1893 07c6 D1        	  pop de ; limit
 1894               	paren_do83.de_hl:
 1895               	  ; de = limit
 1896               	  ; hl = initial value
 1897 07c7 E5        	  push hl ; initial value  ( initial )
 1898 07c8 2A10 00   	  ld hl,(return_stack_pointer)
 1899 07cb 2B        	  dec hl
 1900 07cc 72        	  ld (hl),d
 1901 07cd 2B        	  dec hl
 1902 07ce 73        	  ld (hl),e ; push limit value on return stack ( R: initial )
 1903 07cf 03        	  inc bc
 1904 07d0 03        	  inc bc ; increment the Forth IP, skip branch address
 1905 07d1 2B        	  dec hl
 1906 07d2 70        	  ld (hl),b
 1907 07d3 2B        	  dec hl
 1908 07d4 71        	  ld (hl),c ; push current instruction pointer on return stack
 1909 07d5 E3        	  ex (sp),hl ; initial value now in HL, return stack pointer on stack
 1910 07d6 A7        	  and a ; reset the carry flag
 1911 07d7 ED52      	  sbc hl,de ; B SBCP        \ Subtract limit value.
 1912 07d9 7C        	  ld a,h ; H A LD
 1913 07da EE80      	  xor 0x80 ; 80 XOR#       \ Flip most significant bit.
 1914 07dc 57        	  ld d,a ; A B LD
 1915 07dd 5D        	  ld e,l ; L C LD        \ Move result to DE.
 1916 07de E1        	  pop hl ; H POP        \ Get return stack pointer from stack,
 1917 07df 2B        	  dec hl ; H DEC
 1918 07e0 72        	  ld (hl),d ; B M LD
 1919 07e1 2B        	  dec hl ; H DEC
 1920 07e2 73        	  ld (hl),e ; C M LD        \ Push (initial - limit) XOR 0x8000 onto return stack.
 1921 07e3 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL       \ Save return stack pointer.
 1922 07e6 DDE9      	  _jp_next ; JPIX ;C
 1923               	
 1924 07e8 EA07      	  _code_header paren_question_do83_,"(?DO83)"
 1925               	
 1926 07ea E1        	  pop hl ; initial value
 1927 07eb D1        	  pop de ; limit
 1928 07ec A7        	  and a ; reset the carry flag
 1929 07ed ED52      	  sbc hl,de ; compare
 1930 07ef 2804      	  jr z,question_do.equals
 1931               	  ; not equals
 1932               	  ; XXX TODO move add after sbc and save one jump
 1933 07f1 19        	  add hl,de ; reverse the subtraction
 1934 07f2 C3C7 07   	  jp paren_do83.de_hl ; perform regular `do`
 1935               	question_do.equals:
 1936 07f5 C359 07   	  jp branch_pfa ; XXX TODO ?
 1937               	
 1938 07f8 650C      	  _colon_header question_do83_,"?DO83",immediate
 1939               	
 1940 07fa 680F E807 	  dw compile_,paren_question_do83_
 1941 07fe 2F07      	  dw forward_mark_
 1942               	.if 1 ; fig_compiler_security
GAS LISTING solo_forth.z80s 			page 37


 1943 0800 8306 03   	  _literal 3
 1944               	.endif
 1945 0803 C00A      	  dw semicolon_s_
 1946               	
 1947 0805 650C      	  _colon_header do83_,"DO83",immediate
 1948               	
 1949 0807 680F C307 	  dw compile_,paren_do83_
 1950 080b 2F07      	  dw forward_mark_
 1951               	.if 1 ; fig_compiler_security
 1952 080d 8306 03   	  _literal 3
 1953               	.endif
 1954 0810 C00A      	  dw semicolon_s_
 1955               	
 1956 0812 650C      	  _colon_header loop83_,"LOOP83",immediate
 1957               	
 1958               	.if 1 ; fig_compiler_security
 1959 0814 8306 03   	  _literal 3
 1960 0817 3D0F      	  dw question_pairs_
 1961               	.endif
 1962 0819 680F 2108 	  dw compile_,paren_loop83_
 1963 081d 3B07      	  dw forward_resolve_
 1964 081f C00A      	  dw semicolon_s_
 1965               	
 1966               	  ; _colon_header plus_loop83_,"+LOOP83",immediate
 1967               	
 1968               	  ; dw c_lit_
 1969               	  ; db 3
 1970               	  ; dw question_pairs_
 1971               	  ; dw compile_,paren_plus_loop83_
 1972               	  ; dw forward_resolve_
 1973               	  ; dw semicolon_s_
 1974               	
 1975 0821 650C      	  _colon_header paren_loop83_,"(LOOP83)"
 1976               	
 1977 0823 2A10 00   	  ld hl,(return_stack_pointer)
 1978 0826 5E        	  ld e,(hl) ; M C LD
 1979 0827 23        	  inc hl    ; H INC
 1980 0828 56        	  ld d,(hl) ; M B LD         \ Read current index value.
 1981 0829 13        	  inc de    ; B INC         \ Increment it.
 1982 082a 7A        	  ld a,d    ; B A LD
 1983 082b EE80      	  xor 0x80  ; 80 XOR#
 1984 082d B3        	  or e      ;  C OR         \ Was it equal to 0x8000 ?
 1985 082e C23A 08   	  jp nz,paren_loop83.loop ; jump if not
 1986               	
 1987               	  ; The real index has reached limit, terminate loop.
 1988               	  ; Increment ret stack pointer by 5 (1 increment already done).
 1989 0831 1105 00   	  ld de,5   ; 5 B LDP#
 1990 0834 19        	  add hl,de ; B ADDP
 1991 0835 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL
 1992 0838 DDE9      	  _jp_next
 1993               	
 1994               	paren_loop83.loop:
 1995               	
 1996 083a 72        	  ld (hl),d ;  B M LD
 1997 083b 2B        	  dec hl    ; H DEC
 1998 083c 73        	  ld (hl),e ; C M LD    \ Store updated index.
 1999 083d 23        	  inc hl    ; H INC
GAS LISTING solo_forth.z80s 			page 38


 2000 083e 23        	  inc hl    ; H INC
 2001 083f 4E        	  ld c,(hl) ; M E LD
 2002 0840 23        	  inc hl    ; H INC
 2003 0841 4E        	  ld c,(hl) ; M D LD   \ Read loop start address into instruction pointer, repeat loop.
 2004 0842 DDE9      	  _jp_next
 2005               	
 2006               	.if 0 ; XXX TODO adapt
 2007               	
 2008               	; CODE (+LOOP83) ( w --- )
 2009               	;  RPTR LDHL     \ Read return stack pointer into HL.
 2010               	;    M C LD
 2011               	;     H INC
 2012               	;    M B LD      \ Read Current index.
 2013               	;      EXSP      \ HL now contains w, the increment value.
 2014               	;     A AND
 2015               	;    B ADCP      \ Add increment to index.
 2016               	;    v if
 2017               	;                \ If overflow, then boundary between limit-1 and limit is
 2018               	;                \ crossed, terminate loop.
 2019               	;      H POP     \ Get return stack pointer.
 2020               	;   5 B LDP#
 2021               	;     B ADDP
 2022               	;  RPTR STHL     \ Increment ret stack pointer by 5 (1 increment already done)
 2023               	;                \ and store updated ret stack pointer back.
 2024               	;    else
 2025               	;     H B LD
 2026               	;     L C LD     \ Move updated index to BC.
 2027               	;      H POP     \ Get return stack pointer.
 2028               	;     B M LD
 2029               	;      H DEC
 2030               	;     C M LD     \ Store updated index.
 2031               	;      H INC
 2032               	;      H INC
 2033               	;     M E LD
 2034               	;      H INC
 2035               	;     M D LD     \ Read loop start address into instruction pointer, repeat loop.
 2036               	;    then
 2037               	;  JPIX ;C
 2038               	
 2039               	; CODE LEAVE83
 2040               	;  RPTR LDHL     \ Read return stack pointer into HL.
 2041               	;     H INC
 2042               	;     H INC
 2043               	;    M E LD
 2044               	;     H INC
 2045               	;    M D LD      \ Get start address into DE.
 2046               	;     H INC
 2047               	;     H INC
 2048               	;     H INC
 2049               	; RPTR STHL      \ Write updated return stack pointer (6 was added).
 2050               	;     D DEC
 2051               	;     D DEC      \ DE (instruction pointer) now points to forward branch address
 2052               	;   'BRANCH @ JP ;C \ continue into BRANCH.
 2053               	
 2054               	; CODE I83  ( --- w)
 2055               	; RPTR LDHL        \ Read return stack pointer into HL.
 2056               	;   \ J jumps here.
GAS LISTING solo_forth.z80s 			page 39


 2057               	;   M C LD
 2058               	;    H INC
 2059               	;   M B LD         \ Read current index. (which is (index-limit) xor 0x8000.
 2060               	;    H INC
 2061               	;    H INC
 2062               	;    H INC
 2063               	;   M A LD         \ Read limit and add to index
 2064               	;    C ADD
 2065               	;   A C LD
 2066               	;    H INC
 2067               	;   M A LD
 2068               	;    B ADC
 2069               	;  80 XOR#         \ and flip most significant bit, getting true index value.
 2070               	;   A B LD
 2071               	;   B PUSH         \ Push result.
 2072               	; JPIX ;C
 2073               	
 2074               	; CODE J83 ( --- w)
 2075               	;   RPTR LDHL      \ Read return stack pointer into HL
 2076               	;   6 B LDP#
 2077               	;     B ADDP       \ Add 6 to it, to get to next inner loop parameters.
 2078               	;  'I @ 3 + JR ;C  \ Continue into I.
 2079               	
 2080               	; CODE I'83 ( --- w)
 2081               	;   RPTR LDHL      \ Read return stack pointer into HL
 2082               	;      H INC
 2083               	;      H INC
 2084               	;      H INC
 2085               	;      H INC
 2086               	;     M C LD
 2087               	;      H INC
 2088               	;     M B LD       \ Read limit value.
 2089               	;     B PUSH       \ Push result
 2090               	;     JPIX ;C
 2091               	
 2092               	.endif
 2093               	
 2094               	; ----------------------------------------------
 2095 0844 510B      	  _code_alias_header i_,"I",,r_fetch_
 2096               	
 2097               	; doc{
 2098               	;
 2099               	; i  ( -- x ) ( R: loop-sys -- loop-sys ) \ ANS Forth
 2100               	;
 2101               	; Return a copy of the current (innermost) loop index.
 2102               	;
 2103               	; }doc
 2104               	
 2105               	; ----------------------------------------------
 2106 0846 4808      	  _code_header digit_,"DIGIT"
 2107               	
 2108               	; doc{
 2109               	;
 2110               	; digit  ( c n1 --- n2 tf | ff )  \ fig-Forth
 2111               	;
 2112               	; Convert the ascii character _c_ (using base _n1_) to its
 2113               	; binary equivalent n2, accompanied by a true flag. If the
GAS LISTING solo_forth.z80s 			page 40


 2114               	; conversion is invalid, leave only a false flag.
 2115               	;
 2116               	; }doc
 2117               	
 2118 0848 E1        	  pop hl  ; l=base
 2119 0849 D1        	  pop de  ; e=character
 2120 084a 7B        	  ld a,e  ; character
 2121 084b D630      	  sub '0' ; >="0"
 2122 084d DAD3 0C   	  jp c,false_pfa ; <"0" is invalid
 2123 0850 FE0A      	  cp 0x0A ; >"9"?
 2124 0852 FA5C 08   	  jp m,digit.test_value ; no, test value
 2125 0855 D607      	  sub 0x07 ; gap between "9" & "A", now "A"=0x0A
 2126 0857 FE0A      	  cp 0x0A ; >="A"?
 2127 0859 DAD3 0C   	  jp c,false_pfa ; characters between "9" & "A" are invalid
 2128               	digit.test_value:
 2129 085c BD        	  cp l ; <base?
 2130 085d D2D3 0C   	  jp nc,false_pfa ; no, invalid
 2131 0860 5F        	  ld e,a ; converted digit
 2132 0861 D5        	  push de
 2133 0862 C3DB 0C   	  jp true_pfa
 2134               	
 2135               	; ----------------------------------------------
 2136 0865 6708      	  _code_header paren_find_,"(FIND)"
 2137               	
 2138               	; doc{
 2139               	;
 2140               	; (find)  ( ca nfa --- ca 0 | cfa 1 | cfa -1 )
 2141               	;
 2142               	; Find the definition named in the counted string at _ca_,
 2143               	; starting at _nfa_. If the definition is not found, return _ca_
 2144               	; and zero.  If the definition is found, return its _cfa_. If
 2145               	; the definition is immediate, also return one (1); otherwise
 2146               	; also return minus-one (-1).
 2147               	;
 2148               	; }doc
 2149               	
 2150 0867 1E01      	  ld e,names_bank
 2151 0869 CDA0 06   	  call bank.e ; page the memory bank
 2152               	
 2153 086c D1        	  pop de ; nfa
 2154 086d E1        	  pop hl ; string address
 2155 086e C5        	  push bc ; save the Forth IP
 2156 086f 2277 08   	  ld (paren_find.string_address),hl
 2157               	
 2158               	  ; XXX FIXME the string searched for must be in the string
 2159               	  ; buffer, below 0xC000! This is not a problem now, during the
 2160               	  ; development, because the dictionary is small.
 2161               	
 2162               	paren_find.begin:
 2163               	  ;_z80_border 2 ; XXX INFORMER
 2164               	  ;_z80_border 7 ; XXX INFORMER
 2165               	  ; Compare the string with a new word.
 2166               	  ; de = nfa
 2167 0872 ED53 A908 	  ld (paren_find.nfa_backup),de ; save the nfa for later
 2168               	paren_find.string_address: equ $+1
 2169 0876 2100 00   	  ld hl,0 ; string address
 2170 0879 1A        	  ld a,(de) ; length byte of the name field
GAS LISTING solo_forth.z80s 			page 41


 2171 087a 4F        	  ld c,a    ; save for later
 2172 087b E61F      	  and max_word_length_bit_mask  ; length
 2173 087d BE        	  cp (hl) ; same length?
 2174 087e 2028      	  jr nz,paren_find.not_a_match ; lengths differ
 2175               	
 2176               	  ; Lengths match, compare the characters.
 2177 0880 47        	  ld b,a ; length
 2178               	paren_find.compare_next_char:
 2179 0881 23        	  inc hl ; next character in string
 2180 0882 13        	  inc de ; next character in name field
 2181 0883 1A        	  ld a,(de)
 2182 0884 BE        	  cp (hl) ; match?
 2183 0885 2021      	  jr nz,paren_find.not_a_match ; no match
 2184 0887 10F8      	  djnz paren_find.compare_next_char ; match so far, loop again
 2185               	
 2186               	  ; The string matches.
 2187               	  ; c = name field length byte
 2188 0889 2AA9 08   	  ld hl,(paren_find.nfa_backup)
 2189               	;  ld (0xfffa),hl ; XXX INFORMER ; nfa, ok
 2190 088c 2B        	  dec hl
 2191 088d 2B        	  dec hl ; lfa
 2192 088e 2B        	  dec hl ; high part of the pointer to cfa
 2193 088f 56        	  ld d,(hl)
 2194 0890 2B        	  dec hl ; low part of the pointer to cfa
 2195 0891 5E        	  ld e,(hl) ; de = cfa
 2196               	
 2197               	;  ld (0xfffc),de ; XXX INFORMER ; cfa, ok
 2198               	
 2199 0892 2101 00   	  ld hl,1 ; 1=immediate word
 2200 0895 79        	  ld a,c ; name field length byte
 2201 0896 E640      	  and precedence_bit_mask ; immediate word?
 2202 0898 C29D 08   	  jp nz, paren_find.end
 2203               	  ; non-immediate word
 2204 089b 2B        	  dec hl
 2205 089c 2B        	  dec hl ; -1 = non-immediate word
 2206               	
 2207               	paren_find.end:
 2208               	  ; If match found:
 2209               	  ;   de = cfa
 2210               	  ;   hl = -1 | 1
 2211               	  ; If no match found:
 2212               	  ;   de = ca
 2213               	  ;   hl = 0
 2214 089d D9        	  exx
 2215 089e 1E00      	  ld e,default_bank
 2216 08a0 CDA0 06   	  call bank.e ; page the default memory bank
 2217 08a3 D9        	  exx
 2218 08a4 C1        	  pop bc ; restore the Forth IP
 2219               	  ; _z80_border 4 ; XXX INFORMER
 2220 08a5 C35D 05   	  jp push_hlde
 2221               	
 2222               	paren_find.not_a_match:
 2223               	  ; Not a match, try next one.
 2224               	paren_find.nfa_backup: equ $+1
 2225 08a8 2100 00   	  ld hl,0 ; nfa
 2226 08ab 2B        	  dec hl ; high address of lfa
 2227 08ac 56        	  ld d,(hl) ; high part of the next nfa
GAS LISTING solo_forth.z80s 			page 42


 2228 08ad 2B        	  dec hl ; low address of lfa
 2229 08ae 5E        	  ld e,(hl) ; low part of the next nfa
 2230 08af 7A        	  ld a,d
 2231 08b0 B3        	  or e ; end of dictionary? (next nfa=0)
 2232 08b1 C272 08   	  jp nz,paren_find.begin ; if not, continue
 2233               	  ; End of dictionary, no match found, return.
 2234 08b4 ED5B 7708 	  ld de,(paren_find.string_address)
 2235 08b8 2100 00   	  ld hl,0
 2236 08bb C39D 08   	  jp paren_find.end
 2237               	
 2238               	; ----------------------------------------------
 2239 08be C008      	  _code_header scan_,"SCAN"
 2240               	
 2241               	; doc{
 2242               	;
 2243               	; scan  ( ca c -- ca len )
 2244               	;
 2245               	; c = ascii delimiting character
 2246               	; ca = text address
 2247               	; len = length of the parsed text
 2248               	;
 2249               	; }doc
 2250               	
 2251 08c0 E1        	  pop hl ; delimiter
 2252 08c1 D1        	  pop de ; address
 2253 08c2 D5        	  push de
 2254 08c3 C5        	  push bc ; save Forth IP
 2255 08c4 4D        	  ld c,l ; delimiter
 2256 08c5 2100 00   	  ld hl,0 ; length
 2257 08c8 2B        	  dec hl
 2258 08c9 1B        	  dec de
 2259               	scan.begin:
 2260 08ca 23        	  inc hl
 2261 08cb 13        	  inc de
 2262 08cc 1A        	  ld a,(de)
 2263 08cd B9        	  cp c ; delimiter?
 2264 08ce 20FA      	  jr nz,scan.begin
 2265               	  ; delimiter found
 2266 08d0 C1        	  pop bc ; restore Forth IP
 2267 08d1 C35E 05   	  jp push_hl
 2268               	
 2269               	; ----------------------------------------------
 2270 08d4 D608      	  _code_header skip_,"SKIP"
 2271               	
 2272               	; doc{
 2273               	;
 2274               	; skip  ( ca1 c -- ca2 )
 2275               	;
 2276               	; }doc
 2277               	
 2278 08d6 D1        	  pop de ; e = delimiter
 2279 08d7 E1        	  pop hl ; ca1
 2280               	skip.begin:
 2281 08d8 7E        	  ld a,(hl)
 2282 08d9 BB        	  cp e ; delimiter?
 2283 08da C25E 05   	  jp nz,push_hl
 2284 08dd 23        	  inc hl
GAS LISTING solo_forth.z80s 			page 43


 2285 08de C3D8 08   	  jp skip.begin ; again
 2286               	
 2287               	; ----------------------------------------------
 2288 08e1 E308      	  _code_header chan_,"CHAN"
 2289               	
 2290               	; doc{
 2291               	;
 2292               	; chan  ( n -- )  \ Open channel n for output.
 2293               	;
 2294               	; }doc
 2295               	;
 2296               	; [Code from Spectrum Forth-83.]
 2297               	
 2298 08e3 E1        	  pop hl
 2299 08e4 C5        	  push bc
 2300 08e5 7D        	  ld a,l
 2301 08e6 CD01 16   	  call rom_chan_open
 2302 08e9 C1        	  pop bc
 2303 08ea DDE9      	  _jp_next
 2304               	
 2305               	; ----------------------------------------------
 2306 08ec 650C      	  _colon_header emit_,"EMIT"
 2307               	
 2308               	; XXX TODO -- Add multitasker's `pause` when available.
 2309               	; XXX TODO -- defer
 2310               	
 2311 08ee F808      	  dw paren_emit_
 2312 08f0 C90C 240D 	  dw one_,out_,plus_store_
 2312      F00B 
 2313 08f6 C00A      	  dw semicolon_s_
 2314               	
 2315               	; ----------------------------------------------
 2316 08f8 FA08      	  _code_header paren_emit_,"(EMIT)"
 2317               	
 2318               	; doc{
 2319               	;
 2320               	; (emit)  ( b -- )
 2321               	;
 2322               	; Send the character b to the current channel.
 2323               	;
 2324               	; }doc
 2325               	
 2326               	; [Code from Spectrum Forth-83's `TOCH`.]
 2327               	
 2328               	.if latin1_charset_in_bank
 2329               	  ld e,names_bank
 2330               	  call bank.e ; the charset is in the memory bank
 2331               	.endif
 2332 08fa E1        	  pop hl
 2333 08fb 7D        	  ld a,l
 2334 08fc FD36 52FF 	  ld (iy+sys_scr_ct_offset),0xFF ; no scroll message
 2335 0900 D7        	  rst 0x10
 2336               	.if latin1_charset_in_bank
 2337               	  ld e,default_bank
 2338               	  call bank.e
 2339               	.endif
 2340 0901 DDE9      	  _jp_next
GAS LISTING solo_forth.z80s 			page 44


 2341               	
 2342               	; ----------------------------------------------
 2343 0903 650C      	  _colon_header printer_,"PRINTER"
 2344               	
 2345 0905 8306 03   	  _literal 3
 2346 0908 E108      	  dw chan_
 2347 090a C00A      	  dw semicolon_s_
 2348               	
 2349               	; ----------------------------------------------
 2350 090c 650C      	  _colon_header display_,"DISPLAY"
 2351               	
 2352 090e CD0C      	  dw two_
 2353 0910 E108      	  dw chan_
 2354 0912 C00A      	  dw semicolon_s_
 2355               	
 2356               	; ----------------------------------------------
 2357 0914 1609      	  _code_header key_question_,"KEY?"
 2358               	
 2359               	; doc{
 2360               	;
 2361               	; key?  ( -- f )  \ ANS Forth
 2362               	;
 2363               	; }doc
 2364               	
 2365 0916 3A08 5C   	  ld a,(sys_last_k)
 2366 0919 A7        	  and a
 2367 091a CAD3 0C   	  jp z,false_pfa
 2368 091d C3DB 0C   	  jp true_pfa
 2369               	
 2370               	; ----------------------------------------------
 2371 0920 1C14      	  _variable_header decode_table_,"DECODE-TABLE"
 2372               	
 2373 0922 0000      	  dw 0 ; no chained table ; XXX TODO
 2374               	              ; Symbol Shift + Letter --> new char
 2375 0924 C65B      	  db 0xC6,'[' ; "Y" 198 (0xC6) "AND"  --> 091 (0x5B) "["
 2376 0926 C55D      	  db 0xC5,']' ; "U" 197 (0xC5) "OR"   --> 093 (0x5D) "]"
 2377 0928 E27E      	  db 0xE2,'~' ; "A" 226 (0xE2) "STOP" --> 126 (0x7E) "~"
 2378 092a C37C      	  db 0xC3,'|' ; "S" 195 (0xC3) "NOT"  --> 124 (0x7C) "|"
 2379 092c CD5C      	  db 0xCD,'\' ; "D" 205 (0xCD) "STEP" --> 092 (0x5C) "\"
 2380 092e CC7B      	  db 0xCC,'{' ; "F" 204 (0xCC) "TO"   --> 123 (0x7B) "{"
 2381 0930 CB7D      	  db 0xCB,'}' ; "G" 203 (0xCB) "THEN" --> 125 (0x7D) "}"
 2382 0932 00        	  db 0 ; end of data
 2383               	
 2384               	  ; "I" 172 (0xAC) "AT"   --> 127 (0x7F) "(C)" ; XXX TODO
 2385               	
 2386               	; ----------------------------------------------
 2387 0933 3509      	  _code_header decode_char_,"DECODE-CHAR"
 2388               	  
 2389               	; doc{
 2390               	;
 2391               	; decode-char  ( c1 -- c2 )
 2392               	;
 2393               	; }doc
 2394               	
 2395               	  ; XXX TODO
 2396               	
 2397 0935 D1        	  pop de
GAS LISTING solo_forth.z80s 			page 45


 2398 0936 2122 09   	  ld hl,decode_table_+2 ; XXX TMP
 2399               	decode_char.begin:
 2400 0939 7E        	  ld a,(hl)
 2401 093a A7        	  and a
 2402 093b 7B        	  ld a,e
 2403               	
 2404               	; ----------------------------------------------
 2405 093c 3E09      	  _code_header paren_key_,"(KEY)"
 2406               	
 2407 093e 3A08 5C   	  ld a,(sys_last_k)
 2408 0941 3248 09   	  ld (previous_key),a
 2409               	paren_key_.begin:
 2410               	  ; call pause ; XXX TODO
 2411               	  ; call rom_keyboard ; XXX TODO not needed if system interrupts are on
 2412 0944 3A08 5C   	  ld a,(sys_last_k)
 2413               	previous_key: equ $+1
 2414 0947 FE00      	  cp 0 ; a different key?
 2415 0949 CA44 09   	  jp z,paren_key_.begin
 2416 094c 2600      	  ld h,0
 2417 094e 6F        	  ld l,a
 2418 094f AF        	  xor a
 2419 0950 3208 5C   	  ld (sys_last_k),a ; delete the last key
 2420 0953 E5        	  push hl
 2421 0954 C333 09   	  jp decode_char_
 2422               	
 2423               	; ----------------------------------------------
 2424 0957 5909      	  _code_header key_,"KEY"
 2425               	
 2426               	; doc{
 2427               	;
 2428               	; key  ( -- c )  \ ANS Forth
 2429               	;
 2430               	; }doc
 2431               	
 2432               	; XXX -- This version works also when the system interrupts are off.
 2433               	; XXX TODO -- Add multitasker's `pause` when available.
 2434               	
 2435 0959 C5        	  push bc
 2436 095a DDE5      	  push ix ; XXX TMP
 2437               	key.begin:
 2438 095c CD8E 02   	  call rom_key_scan
 2439 095f 20FB      	  jr nz,key.begin
 2440 0961 CD1E 03   	  call rom_key_test
 2441 0964 30F6      	  jr nc,key.begin
 2442 0966 15        	  dec d
 2443 0967 5F        	  ld e,a
 2444 0968 CD33 03   	  call rom_key_decode
 2445               	key.end:
 2446 096b 2108 5C   	  ld hl,sys_last_k
 2447 096e 3600      	  ld (hl),0
 2448 0970 DDE1      	  pop ix ; XXX TMP
 2449 0972 C1        	  pop bc
 2450 0973 C387 06   	  jp push_a
 2451               	
 2452               	; ----------------------------------------------
 2453 0976 7809      	  _code_header xkey_,"XKEY"
 2454               	
GAS LISTING solo_forth.z80s 			page 46


 2455               	; XXX OLD -- this is the original code from Abersoft Forth.
 2456               	; Too complex. A mode-less version will be coded.
 2457               	
 2458               	; doc{
 2459               	;
 2460               	; xkey  ( -- c )
 2461               	;
 2462               	; Leave the ASCII value of the next terminal key struck.
 2463               	;
 2464               	; }doc
 2465               	
 2466               	  ; XXX TODO simplify, no Spectrum modes
 2467               	
 2468 0978 C5        	  push bc
 2469               	
 2470               	  ; XXX OLD
 2471               	  ; inverse video on
 2472               	  ; ld a,inverse_char
 2473               	  ; rst 0x10
 2474               	  ; ld a,0x01
 2475               	  ; rst 0x10
 2476               	
 2477               	xkey.new_key:
 2478 0979 AF        	  xor a
 2479 097a 3208 5C   	  ld (sys_last_k),a
 2480               	
 2481               	  ; Print cursor:
 2482 097d 3E88      	  ld a,0x88 ; cursor
 2483 097f D7        	  rst 0x10
 2484 0980 3E08      	  ld a,backspace_char
 2485 0982 D7        	  rst 0x10
 2486               	
 2487               	xkey.wait_for_key:
 2488 0983 3A08 5C   	  ld a,(sys_last_k)
 2489 0986 A7        	  and a
 2490 0987 28FA      	  jr z,xkey.wait_for_key
 2491               	  ; a = pressed key code
 2492               	
 2493 0989 FE06      	  cp caps_char ; toggle caps lock?
 2494 098b 2009      	  jr nz,xkey.translate
 2495               	  ; toggle caps lock
 2496 098d 216A 5C   	  ld hl,sys_flags2
 2497 0990 3E08      	  ld a,0x08
 2498 0992 AE        	  xor (hl)
 2499 0993 77        	  ld (hl),a
 2500 0994 18E3      	  jr xkey.new_key
 2501               	
 2502               	  ; Translate some chars
 2503               	  ; XXX TODO use a configurable list of chars pairs
 2504               	
 2505               	xkey.translate:
 2506               	xkey.left_bracket:
 2507 0996 FEC6      	  cp 0xC6
 2508 0998 2002      	  jr nz,xkey.right_bracket
 2509 099a 3E5B      	  ld a,'['
 2510               	xkey.right_bracket:
 2511 099c FEC5      	  cp 0xC5
GAS LISTING solo_forth.z80s 			page 47


 2512 099e 2002      	  jr nz,xkey.tilde
 2513 09a0 3E5D      	  ld a,']'
 2514               	xkey.tilde:
 2515 09a2 FEE2      	  cp 0xE2
 2516 09a4 2002      	  jr nz,xkey.vertical_bar
 2517 09a6 3E7E      	  ld a,'~'
 2518               	xkey.vertical_bar:
 2519 09a8 FEC3      	  cp 0xC3
 2520 09aa 2002      	  jr nz,xkey.backslash
 2521 09ac 3E7C      	  ld a,'|'
 2522               	xkey.backslash:
 2523 09ae FECD      	  cp 0xCD
 2524 09b0 2002      	  jr nz,xkey.left_curly_bracket
 2525 09b2 3E5C      	  ld a,'\'
 2526               	xkey.left_curly_bracket:
 2527 09b4 FECC      	  cp 0xCC
 2528 09b6 2002      	  jr nz,xkey.right_curly_bracket
 2529 09b8 3E7B      	  ld a,'{'
 2530               	xkey.right_curly_bracket:
 2531 09ba FECB      	  cp 0xCB
 2532 09bc 2002      	  jr nz,xkey.end
 2533 09be 3E7D      	  ld a,'}'
 2534               	
 2535               	xkey.end:
 2536 09c0 6F        	  ld l,a
 2537 09c1 2600      	  ld h,0x00
 2538               	
 2539               	  ; XXX OLD
 2540               	  ; inverse video off
 2541               	  ; ld a,inverse_char
 2542               	  ; rst 0x10
 2543               	  ; ld a,0x00
 2544               	  ; rst 0x10
 2545               	
 2546               	  ; delete the cursor
 2547 09c3 3E20      	  ld a,space_char
 2548 09c5 D7        	  rst 0x10
 2549 09c6 3E08      	  ld a,backspace_char
 2550 09c8 D7        	  rst 0x10
 2551               	
 2552 09c9 C1        	  pop bc
 2553 09ca C35E 05   	  jp push_hl
 2554               	
 2555               	; ----------------------------------------------
 2556 09cd 650C      	  _colon_header cr_,"CR"
 2557               	
 2558               	; doc{
 2559               	;
 2560               	; cr  ( -- )
 2561               	;
 2562               	; Transmit a carriage return to the selected output device.
 2563               	;
 2564               	; }doc
 2565               	
 2566 09cf 8306 0D   	  _literal carriage_return_char
 2567 09d2 EC08 240D 	  dw emit_,out_,off_
 2567      FD0B 
GAS LISTING solo_forth.z80s 			page 48


 2568 09d8 C00A      	  dw semicolon_s_
 2569               	
 2570               	; ----------------------------------------------
 2571 09da DC09      	  _code_header cmove_up_,"CMOVE>"
 2572               	
 2573 09dc D9        	  exx
 2574 09dd C1        	  pop bc
 2575 09de D1        	  pop de
 2576 09df E1        	  pop hl
 2577 09e0 CD28 05   	  call move_block_downwards
 2578 09e3 D9        	  exx
 2579 09e4 DDE9      	  _jp_next
 2580               	
 2581               	; ----------------------------------------------
 2582 09e6 E809      	  _code_header cmove_,"CMOVE"
 2583               	
 2584 09e8 D9        	  exx
 2585 09e9 C1        	  pop bc
 2586 09ea D1        	  pop de
 2587 09eb E1        	  pop hl
 2588 09ec CD22 05   	  call move_block_upwards
 2589 09ef D9        	  exx
 2590 09f0 DDE9      	  _jp_next
 2591               	
 2592               	; ----------------------------------------------
 2593 09f2 F409      	  _code_header move_,"MOVE"
 2594               	
 2595               	; doc{
 2596               	;
 2597               	; move  ( a1 a2 len -- )
 2598               	;
 2599               	; }doc
 2600               	
 2601 09f4 D9        	  exx
 2602 09f5 C1        	  pop bc
 2603 09f6 D1        	  pop de
 2604               	move.do:
 2605 09f7 E1        	  pop hl
 2606 09f8 CD1C 05   	  call move_block
 2607 09fb D9        	  exx
 2608 09fc DDE9      	  _jp_next
 2609               	
 2610               	; ----------------------------------------------
 2611 09fe 000A      	  _code_header smove_,"SMOVE"
 2612               	
 2613               	; doc{
 2614               	;
 2615               	; smove  ( a1 len a2 -- )
 2616               	; 
 2617               	; Move the string _a1 len_ to _a2_. _a2_ will contain the first
 2618               	; char of the string.
 2619               	;
 2620               	; }doc
 2621               	
 2622               	; swap move
 2623               	
 2624 0a00 D9        	  exx
GAS LISTING solo_forth.z80s 			page 49


 2625 0a01 D1        	  pop de
 2626 0a02 C1        	  pop bc
 2627 0a03 C3F7 09   	  jp move.do
 2628               	
 2629               	; ----------------------------------------------
 2630 0a06 080A      	  _code_header u_m_star_,"UM*"
 2631               	
 2632               	; doc{
 2633               	;
 2634               	; um*  ( u1 u2 -- ud )  \ ANS Forth
 2635               	;
 2636               	; Multiply _u1_ by _u2_, giving the unsigned double-cell product
 2637               	; _ud_.  All values and arithmetic are unsigned.
 2638               	;
 2639               	; }doc
 2640               	
 2641               	  ; [Code from DZX-Forth.]
 2642               	
 2643 0a08 D1        	  pop de
 2644 0a09 E1        	  pop hl
 2645 0a0a CD46 05   	  call hl_multiplied_by_de_to_hlde_unsigned
 2646 0a0d C35D 05   	  jp push_hlde
 2647               	
 2648               	; ----------------------------------------------
 2649 0a10 120A      	  _code_header u_slash_mod_,'U/MOD' ; XXX OLD
 2650               	
 2651               	; doc{
 2652               	;
 2653               	; u/mod ( ud u1 -- u2 u3 )
 2654               	;
 2655               	; Divide _ud_ by _u1_, giving the quotient _u3_ and the
 2656               	; remainder _u2_.  All values and arithmetic are unsigned. An
 2657               	; ambiguous condition exists if u1 is zero or if the quotient
 2658               	; lies outside the range of a single-cell unsigned integer.
 2659               	;
 2660               	; }doc
 2661               	
 2662               	; XXX FIXME -- This word, whose code is taken from Abersoft
 2663               	; forth, has a bug that affects `(line)`, used by `message`, and
 2664               	; other words that use it: `*/mod`, `mod` and `/mod`, with
 2665               	; certain negative values, return different values in Abersoft
 2666               	; Forth and other Forth systems that have been tested (some of
 2667               	; them are fig-Forth).
 2668               	
 2669 0a12 2104 00   	  ld hl,0x0004
 2670 0a15 39        	  add hl,sp
 2671 0a16 5E        	  ld e,(hl)
 2672 0a17 71        	  ld (hl),c
 2673 0a18 23        	  inc hl
 2674 0a19 56        	  ld d,(hl)
 2675 0a1a 70        	  ld (hl),b
 2676 0a1b C1        	  pop bc
 2677 0a1c E1        	  pop hl
 2678 0a1d 7D        	  ld a,l
 2679 0a1e 91        	  sub c
 2680 0a1f 7C        	  ld a,h
 2681 0a20 98        	  sbc a,b
GAS LISTING solo_forth.z80s 			page 50


 2682 0a21 3808      	  jr c,l60a0h
 2683 0a23 21FF FF   	  ld hl,0xFFFF
 2684 0a26 11FF FF   	  ld de,0xFFFF
 2685 0a29 1820      	  jr l60c0h
 2686               	l60a0h:
 2687 0a2b 3E10      	  ld a,0x10
 2688               	l60a2h:
 2689 0a2d 29        	  add hl,hl
 2690 0a2e 17        	  rla
 2691 0a2f EB        	  ex de,hl
 2692 0a30 29        	  add hl,hl
 2693 0a31 3002      	  jr nc,l60aah
 2694 0a33 13        	  inc de
 2695 0a34 A7        	  and a
 2696               	l60aah:
 2697 0a35 EB        	  ex de,hl
 2698 0a36 1F        	  rra
 2699 0a37 F5        	  push af
 2700 0a38 3005      	  jr nc,l60b4h
 2701 0a3a A5        	  and l
 2702 0a3b ED42      	  sbc hl,bc
 2703 0a3d 1807      	  jr l60bbh
 2704               	l60b4h:
 2705 0a3f A7        	  and a
 2706 0a40 ED42      	  sbc hl,bc
 2707 0a42 3002      	  jr nc,l60bbh
 2708 0a44 09        	  add hl,bc
 2709 0a45 1B        	  dec de
 2710               	l60bbh:
 2711 0a46 13        	  inc de
 2712 0a47 F1        	  pop af
 2713 0a48 3D        	  dec a
 2714 0a49 20E2      	  jr nz,l60a2h
 2715               	l60c0h:
 2716 0a4b C1        	  pop bc
 2717 0a4c E5        	  push hl
 2718 0a4d D5        	  push de
 2719 0a4e DDE9      	  _jp_next
 2720               	
 2721               	.if 0 ; XXX TODO
 2722               	
 2723               	; ----------------------------------------------
 2724               	  _code_header s_m_slash_rem_,"SM/REM"
 2725               	
 2726               	; doc{
 2727               	;
 2728               	; sm/rem  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "s-m-slash-rem"
 2729               	;
 2730               	; Symmetric division:
 2731               	;
 2732               	;   d1 = n3*n1+n2, sign(n2)=sign(d1) or 0.
 2733               	;
 2734               	; Divide _d1_ by _n1_, giving the symmetric quotient _n3_ and
 2735               	; the remainder _n2_. Input and output stack arguments are
 2736               	; signed.
 2737               	;
 2738               	; }doc
GAS LISTING solo_forth.z80s 			page 51


 2739               	
 2740               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2741               	; if the quotient lies outside the range of a single-cell signed
 2742               	; integer.
 2743               	
 2744               	; [Code from DZX-Forth.]
 2745               	
 2746               	  ld l,c
 2747               	  ld h,b
 2748               	  pop bc
 2749               	  pop de
 2750               	  ex (sp),hl
 2751               	  ex de,hl
 2752               	s_m_slash_rem_.1:
 2753               	  call msm
 2754               	  jp msm.2
 2755               	
 2756               	; ----------------------------------------------
 2757               	  _code_header fm_slash_mod_,"FM/MOD"
 2758               	
 2759               	; doc{
 2760               	;
 2761               	; fm/mod  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "f-m-slash-mod"
 2762               	;
 2763               	; Floored division:
 2764               	;
 2765               	;   d1 = n3*n1+n2, n1>n2>=0 or 0>=n2>n1.
 2766               	;
 2767               	; Divide _d1_ by _n1_, giving the floored quotient _n3_ and
 2768               	; the remainder _n2_. Input and output stack arguments are
 2769               	; signed.
 2770               	;
 2771               	; }doc
 2772               	
 2773               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2774               	; if the quotient lies outside the range of a single-cell signed
 2775               	; integer.
 2776               	
 2777               	; [Code from DZX-Forth.]
 2778               	
 2779               	  ld l,c
 2780               	  ld h,b
 2781               	  pop bc
 2782               	  pop de
 2783               	  ex (sp),hl
 2784               	  ex de,hl
 2785               	fm_slash_mod.1:
 2786               	  call msm
 2787               	  ld a,d
 2788               	  or e
 2789               	  jp z,msm.2    ; skip if remainder = 0
 2790               	  dec hl    ; floor
 2791               	  push hl
 2792               	  ex de,hl
 2793               	  add hl,bc
 2794               	  ex de,hl
 2795               	  pop hl
GAS LISTING solo_forth.z80s 			page 52


 2796               	  jp msm.2
 2797               	
 2798               	.endif
 2799               	
 2800               	; ----------------------------------------------
 2801 0a50 520A      	  _code_header and_,"AND"
 2802               	
 2803 0a52 D1        	  pop de
 2804 0a53 E1        	  pop hl
 2805 0a54 7B        	  ld a,e
 2806 0a55 A5        	  and l
 2807 0a56 6F        	  ld l,a
 2808 0a57 7A        	  ld a,d
 2809 0a58 A4        	  and h
 2810 0a59 67        	  ld h,a
 2811 0a5a C35E 05   	  jp push_hl
 2812               	
 2813               	; ----------------------------------------------
 2814 0a5d 5F0A      	  _code_header or_,"OR"
 2815               	
 2816 0a5f D1        	  pop de
 2817 0a60 E1        	  pop hl
 2818 0a61 7B        	  ld a,e
 2819 0a62 B5        	  or l
 2820 0a63 6F        	  ld l,a
 2821 0a64 7A        	  ld a,d
 2822 0a65 B4        	  or h
 2823 0a66 67        	  ld h,a
 2824 0a67 C35E 05   	  jp push_hl
 2825               	
 2826               	; ----------------------------------------------
 2827 0a6a 6C0A      	  _code_header xor_,"XOR"
 2828               	
 2829 0a6c D1        	  pop de
 2830 0a6d E1        	  pop hl
 2831 0a6e 7B        	  ld a,e
 2832 0a6f AD        	  xor l
 2833 0a70 6F        	  ld l,a
 2834 0a71 7A        	  ld a,d
 2835 0a72 AC        	  xor h
 2836 0a73 67        	  ld h,a
 2837 0a74 C35E 05   	  jp push_hl
 2838               	
 2839               	; ----------------------------------------------
 2840 0a77 A00C      	  _constant_header np_,"NP"
 2841               	
 2842 0a79 2E00      	  dw names_pointer
 2843               	
 2844               	; ----------------------------------------------
 2845 0a7b A00C      	  _constant_header np0_,"NP0"
 2846               	
 2847               	  ; XXX OLD -- not used
 2848               	
 2849 0a7d 00C0      	  dw names_bank_address
 2850               	
 2851               	; ----------------------------------------------
 2852 0a7f 810A      	  _code_header np_fetch_,"NP@"
GAS LISTING solo_forth.z80s 			page 53


 2853               	
 2854 0a81 2A2E 00   	  ld hl,(names_pointer)
 2855 0a84 C35E 05   	  jp push_hl
 2856               	
 2857               	; ----------------------------------------------
 2858 0a87 890A      	  _code_header np_store_,"NP!"
 2859               	
 2860 0a89 E1        	  pop hl
 2861 0a8a 222E 00   	  ld (names_pointer),hl
 2862 0a8d DDE9      	  _jp_next
 2863               	
 2864               	; ----------------------------------------------
 2865               	
 2866 0a8f 650C      	  _colon_header comma_np_,",NP"
 2867               	
 2868               	; doc{
 2869               	;
 2870               	; ,np  ( x -- )
 2871               	;
 2872               	; Store _x_ into the next available names memory cell, advancing
 2873               	; the names pointer.
 2874               	;
 2875               	; Note: The names memory is supposed to be paged in.
 2876               	;
 2877               	; }doc
 2878               	
 2879 0a91 7F0A 490C 	  dw np_fetch_,store_,two_,np_,plus_store_
 2879      CD0C 770A 
 2879      F00B 
 2880 0a9b C00A      	  dw semicolon_s_
 2881               	
 2882               	; ----------------------------------------------
 2883 0a9d 9F0A      	  _code_header sp_fetch_,"SP@"
 2884               	
 2885 0a9f 2100 00   	  ld hl,0x0000
 2886 0aa2 39        	  add hl,sp
 2887 0aa3 C35E 05   	  jp push_hl
 2888               	
 2889               	; ----------------------------------------------
 2890 0aa6 A80A      	  _code_header sp_store_,"SP!"
 2891               	
 2892               	; doc{
 2893               	;
 2894               	; sp!  ( a -- )
 2895               	;
 2896               	; Store _a_ into the stack pointer.
 2897               	;
 2898               	; }doc
 2899               	
 2900               	.if 0 ; XXX OLD
 2901               	  ld hl,(user_variables_pointer)
 2902               	  ld a,(hl)
 2903               	  inc hl
 2904               	  ld h,(hl)
 2905               	  ld l,a
 2906               	.else
 2907 0aa8 E1        	  pop hl
GAS LISTING solo_forth.z80s 			page 54


 2908               	.endif
 2909 0aa9 F9        	  ld sp,hl
 2910 0aaa DDE9      	  _jp_next
 2911               	
 2912               	; ----------------------------------------------
 2913 0aac A00C      	  _constant_header rp_,"RP"
 2914               	
 2915 0aae 1000      	  dw return_stack_pointer
 2916               	
 2917               	; ----------------------------------------------
 2918 0ab0 B20A      	  _code_header rp_fetch_,"RP@"
 2919               	
 2920 0ab2 2A10 00   	  ld hl,(return_stack_pointer)
 2921 0ab5 C35E 05   	  jp push_hl
 2922               	
 2923               	; ----------------------------------------------
 2924 0ab8 BA0A      	  _code_header rp_store_,"RP!"
 2925               	
 2926               	; doc{
 2927               	;
 2928               	; rp!  ( a -- )
 2929               	;
 2930               	; Store _a_ into the return stack pointer.
 2931               	;
 2932               	; }doc
 2933               	
 2934               	.if 0 ; XXX OLD
 2935               	  ld hl,(user_variables_pointer)
 2936               	  inc hl
 2937               	  inc hl ; hl=address of r0
 2938               	  ld a,(hl)
 2939               	  inc hl
 2940               	  ld h,(hl)
 2941               	  ld l,a
 2942               	.else
 2943 0aba E1        	  pop hl
 2944               	.endif
 2945 0abb 2210 00   	  ld (return_stack_pointer),hl
 2946 0abe DDE9      	  _jp_next
 2947               	
 2948               	; ----------------------------------------------
 2949               	.if 1 ; fig_exit?
 2950 0ac0 C20A      	  _code_header semicolon_s_,";S"
 2951               	.else
 2952               	  _code_header exit_,"EXIT"
 2953               	semicolon_s_ equ exit_
 2954               	.endif
 2955               	
 2956               	
 2957               	; doc{
 2958               	;
 2959               	; ;s  ( -- )  \ fig-Forth
 2960               	;
 2961               	; Return execution to the calling definition.  Unnest one level.
 2962               	;
 2963               	; It is used to stop interpretation of a screen. It is also the
 2964               	; run-time word compiled at the end of a colon-definition which
GAS LISTING solo_forth.z80s 			page 55


 2965               	; returns execution to the calling procedure.
 2966               	;
 2967               	; }doc
 2968               	
 2969               	; XXX TODO combine this `;s` with `exit`?
 2970               	
 2971 0ac2 2A10 00   	  ld hl,(return_stack_pointer)
 2972 0ac5 4E        	  ld c,(hl)
 2973 0ac6 23        	  inc hl
 2974 0ac7 46        	  ld b,(hl)
 2975 0ac8 23        	  inc hl
 2976 0ac9 2210 00   	  ld (return_stack_pointer),hl
 2977 0acc DDE9      	  _jp_next
 2978               	
 2979               	; ----------------------------------------------
 2980 0ace D00A      	  _code_header pick_,"PICK"
 2981               	
 2982 0ad0 E1        	  pop hl
 2983 0ad1 29        	  add hl,hl
 2984 0ad2 39        	  add hl,sp
 2985 0ad3 C31D 0C   	  jp fetch.hl
 2986               	
 2987               	; ----------------------------------------------
 2988 0ad6 100B      	  _code_alias_header unloop_,"UNLOOP",,two_r_drop_
 2989               	
 2990               	; doc{
 2991               	;
 2992               	; unloop  ( -- ) ( R: x1 x2 -- )  \ ANS Forth, C
 2993               	;
 2994               	; x1 = loop index
 2995               	; x2 = loop limit
 2996               	;
 2997               	; Discard the loop-control parameters for the current nesting
 2998               	; level. An `unloop` is required for each nesting level before
 2999               	; the definition may be exited with `exit`. An ambiguous
 3000               	; condition exists if the loop-control parameters are
 3001               	; unavailable.
 3002               	;
 3003               	; }doc
 3004               	
 3005               	; ----------------------------------------------
 3006 0ad8 DA0A      	  _code_header exhaust_,"EXHAUST"
 3007               	
 3008               	; doc{
 3009               	;
 3010               	; exhaust  ( -- ) ( R: n1 n2 -- n2 n2 )
 3011               	;
 3012               	; n1 = loop limit
 3013               	; n2 = loop index
 3014               	;
 3015               	; Force termination of a do-loop at the next opportunity by
 3016               	; setting the loop limit equal to the current value of the
 3017               	; index. The index itself remains unchanged, and execution
 3018               	; proceeds normally until `loop` or `+loop` is encountered.
 3019               	;
 3020               	; Note: This is the equivalent of fig-Forth's `leave`.
 3021               	;
GAS LISTING solo_forth.z80s 			page 56


 3022               	; }doc
 3023               	
 3024 0ada 2A10 00   	  ld hl,(return_stack_pointer)
 3025 0add 5E        	  ld e,(hl)
 3026 0ade 23        	  inc hl
 3027 0adf 56        	  ld d,(hl)
 3028 0ae0 23        	  inc hl
 3029 0ae1 73        	  ld (hl),e
 3030 0ae2 23        	  inc hl
 3031 0ae3 72        	  ld (hl),d
 3032 0ae4 DDE9      	  _jp_next
 3033               	
 3034               	; ----------------------------------------------
 3035 0ae6 E80A      	  _code_header question_exhaust_,"?EXHAUST"
 3036               	
 3037               	; doc{
 3038               	;
 3039               	; ?exhaust  ( f -- ) ( R: n1 n2 -- n1 n2 | n2 n2 )
 3040               	;
 3041               	; n1 = loop limit
 3042               	; n2 = loop index
 3043               	; 
 3044               	; If _f_ is not false, force termination of a do-loop at the
 3045               	; next opportunity by setting the loop limit equal to the
 3046               	; current value of the index. The index itself remains
 3047               	; unchanged, and execution proceeds normally until `loop` or
 3048               	; `+loop` is encountered.
 3049               	;
 3050               	; }doc
 3051               	
 3052 0ae8 E1        	  pop hl
 3053 0ae9 67        	  ld h,a
 3054 0aea B5        	  or l
 3055 0aeb C2DA 0A   	  jp nz,exhaust_pfa
 3056 0aee DDE9      	  _jp_next
 3057               	
 3058               	; ----------------------------------------------
 3059 0af0 F20A      	  _code_header to_r_,">R"
 3060               	
 3061               	; doc{
 3062               	;
 3063               	; >r  ( x -- ) ( R: -- x )
 3064               	;
 3065               	; }doc
 3066               	
 3067 0af2 D1        	  pop de
 3068 0af3 2A10 00   	  ld hl,(return_stack_pointer)
 3069 0af6 2B        	  dec hl
 3070 0af7 72        	  ld (hl),d
 3071 0af8 2B        	  dec hl
 3072 0af9 73        	  ld (hl),e
 3073 0afa 2210 00   	  ld (return_stack_pointer),hl
 3074 0afd DDE9      	  _jp_next
 3075               	
 3076               	; ----------------------------------------------
 3077 0aff 010B      	  _code_header from_r_,"R>"
 3078               	
GAS LISTING solo_forth.z80s 			page 57


 3079               	; doc{
 3080               	;
 3081               	; r>  ( -- x ) ( R: x -- )
 3082               	;
 3083               	; }doc
 3084               	
 3085 0b01 2A10 00   	  ld hl,(return_stack_pointer)
 3086 0b04 5E        	  ld e,(hl)
 3087 0b05 23        	  inc hl
 3088 0b06 56        	  ld d,(hl)
 3089 0b07 23        	  inc hl
 3090 0b08 2210 00   	  ld (return_stack_pointer),hl
 3091 0b0b D5        	  push de
 3092 0b0c DDE9      	  _jp_next
 3093               	
 3094               	; ----------------------------------------------
 3095 0b0e 100B      	  _code_header two_r_drop_,"2RDROP"
 3096               	
 3097               	; doc{
 3098               	;
 3099               	; 2rdrop  ( R: x1 x2 -- )
 3100               	;
 3101               	; }doc
 3102               	
 3103 0b10 2A10 00   	  ld hl,(return_stack_pointer)
 3104 0b13 1104 00   	  ld de,cell*2
 3105 0b16 19        	  add hl,de
 3106 0b17 2210 00   	  ld (return_stack_pointer),hl
 3107 0b1a DDE9      	  _jp_next
 3108               	
 3109               	; ----------------------------------------------
 3110 0b1c 1E0B      	  _code_header r_drop_,"RDROP"
 3111               	
 3112               	; doc{
 3113               	;
 3114               	; rdrop  ( R: x -- )
 3115               	;
 3116               	; }doc
 3117               	
 3118 0b1e 2A10 00   	  ld hl,(return_stack_pointer)
 3119 0b21 23        	  inc hl
 3120 0b22 23        	  inc hl
 3121 0b23 2210 00   	  ld (return_stack_pointer),hl
 3122 0b26 DDE9      	  _jp_next
 3123               	
 3124               	; ----------------------------------------------
 3125 0b28 2A0B      	  _code_header two_to_r_,"2>R"
 3126               	
 3127               	; doc{
 3128               	;
 3129               	; 2>r  ( -- x1 x2 ) ( R: x1 x2 -- )
 3130               	;
 3131               	; }doc
 3132               	
 3133 0b2a 2A10 00   	  ld hl,(return_stack_pointer)
 3134 0b2d 11FC FF   	  ld de,-cell*2
 3135 0b30 19        	  add hl,de
GAS LISTING solo_forth.z80s 			page 58


 3136 0b31 2210 00   	  ld (return_stack_pointer),hl
 3137 0b34 C33E 0C   	  jp two_store.into_hl_pointer
 3138               	
 3139               	; ----------------------------------------------
 3140 0b37 390B      	  _code_header two_from_r_,"2R>"
 3141               	
 3142               	; 2r>  ( -- x1 x2 ) ( R: x1 x2 -- )
 3143               	
 3144 0b39 2A10 00   	  ld hl,(return_stack_pointer)
 3145 0b3c E5        	  push hl
 3146 0b3d 1104 00   	  ld de,cell*2
 3147 0b40 19        	  add hl,de
 3148 0b41 2210 00   	  ld (return_stack_pointer),hl
 3149 0b44 C32E 0C   	  jp two_fetch_pfa
 3150               	
 3151               	; ----------------------------------------------
 3152 0b47 490B      	  _code_header two_r_fetch_,"2R@"
 3153               	
 3154 0b49 2A10 00   	  ld hl,(return_stack_pointer)
 3155 0b4c C32F 0C   	  jp two_fetch.hl
 3156               	
 3157               	; ----------------------------------------------
 3158 0b4f 510B      	  _code_header r_fetch_,"R@"
 3159               	
 3160 0b51 2A10 00   	  ld hl,(return_stack_pointer)
 3161 0b54 C31D 0C   	  jp fetch.hl
 3162               	
 3163               	; ----------------------------------------------
 3164               	  ; XXX FIXME as Error: confusion in formal parameters
 3165               	  ; because of the string, why?
 3166 0b57 590B      	  _code_header zero_equals_,"0="
 3167               	
 3168 0b59 E1        	  pop hl
 3169 0b5a 7D        	  ld a,l
 3170 0b5b B4        	  or h
 3171 0b5c CADB 0C   	  jp z,true_pfa
 3172 0b5f C3D3 0C   	  jp false_pfa
 3173               	
 3174               	; ----------------------------------------------
 3175 0b62 640B      	  _code_header zero_not_equals_,"0<>"
 3176               	
 3177 0b64 E1        	  pop hl
 3178 0b65 7D        	  ld a,l
 3179 0b66 B4        	  or h
 3180 0b67 CAD3 0C   	  jp z,false_pfa
 3181 0b6a C3DB 0C   	  jp true_pfa
 3182               	
 3183               	; ----------------------------------------------
 3184 0b6d 6F0B      	  _code_header zero_less_than_,"0<"
 3185               	
 3186 0b6f E1        	  pop hl
 3187               	zero_less_.hl: ; XXX entry not used yet
 3188               	  .if size_optimization
 3189               	    add hl,hl ; 11t, 1 byte
 3190               	  .else
 3191               	    ; [Idea from Ace Forth.]
 3192 0b70 CB14      	    rl h ; 8t, 2 bytes
GAS LISTING solo_forth.z80s 			page 59


 3193               	  .endif
 3194               	true_if_cy:
 3195 0b72 DADB 0C   	  jp c,true_pfa
 3196 0b75 C3D3 0C   	  jp false_pfa
 3197               	
 3198               	; ----------------------------------------------
 3199 0b78 7A0B      	  _code_header zero_greater_than_,"0>"
 3200               	
 3201               	  ; [Code from DZX-Forth.]
 3202               	
 3203 0b7a D1        	  pop de
 3204 0b7b 2100 00   	  ld hl,0
 3205 0b7e C3FA 0D   	  jp is_de_less_than_hl
 3206               	
 3207               	; ----------------------------------------------
 3208 0b81 830B      	  _code_header plus_,"+"
 3209               	
 3210 0b83 D1        	  pop de
 3211 0b84 E1        	  pop hl
 3212 0b85 19        	  add hl,de
 3213 0b86 C35E 05   	  jp push_hl
 3214               	
 3215               	; ----------------------------------------------
 3216 0b89 8B0B      	  _code_header d_plus_,"D+"
 3217               	
 3218               	; XXX TODO move to the library.
 3219               	
 3220               	; [Code from fig-Forth 1.1g.]
 3221               	   
 3222               	              ;                           t  B
 3223               	              ;                           -- --
 3224 0b8b D9        	  exx         ; save ip                   04 01
 3225 0b8c C1        	  pop bc      ; (bc)<--d2h                10 01
 3226 0b8d E1        	  pop hl      ; (hl)<--d2l                10 01
 3227 0b8e F1        	  pop af      ; (af)<--d1h                10 01
 3228 0b8f D1        	  pop de      ; (de)<--d1l                10 01
 3229 0b90 F5        	  push  af    ; (s1)<--d1h                11 01
 3230 0b91 19        	  add hl,de   ; (hl)<--d2l+d1l=d3l        11 01
 3231 0b92 EB        	  ex  de,hl   ; (de)<--d3l                04 01
 3232 0b93 E1        	  pop hl      ; (hl)<--d1h                10 01
 3233 0b94 ED4A      	  adc hl,bc   ; (hl)<--d1h+d2h+carry=d3h  15 02
 3234 0b96 D5        	  push  de    ; (s2)<--d3l                11 01
 3235 0b97 E5        	  push  hl    ; (s1)<--d3h                11 01
 3236 0b98 D9        	  exx         ; restore ip                04 01
 3237 0b99 DDE9      	  _jp_next    ;                           08 02
 3238               	              ;                          --- --
 3239               	              ;                          134 15 TOTALS
 3240               	
 3241               	; ----------------------------------------------
 3242 0b9b 9D0B      	  _code_header negate_,"NEGATE"
 3243               	
 3244 0b9d D1        	  pop de
 3245 0b9e 2100 00   	  ld hl,0x0000
 3246 0ba1 A7        	  and a
 3247 0ba2 ED52      	  sbc hl,de
 3248 0ba4 C35E 05   	  jp push_hl
 3249               	
GAS LISTING solo_forth.z80s 			page 60


 3250               	; ----------------------------------------------
 3251 0ba7 A90B      	  _code_header dnegate_,"DNEGATE"
 3252               	
 3253               	  ; XXX TODO move to the disk
 3254               	
 3255 0ba9 E1        	  pop hl
 3256 0baa D1        	  pop de
 3257 0bab 97        	  sub a
 3258 0bac 93        	  sub e
 3259 0bad 5F        	  ld e,a
 3260 0bae 3E00      	  ld a,0x00
 3261 0bb0 9A        	  sbc a,d
 3262 0bb1 57        	  ld d,a
 3263 0bb2 3E00      	  ld a,0x00
 3264 0bb4 9D        	  sbc a,l
 3265 0bb5 6F        	  ld l,a
 3266 0bb6 3E00      	  ld a,0x00
 3267 0bb8 9C        	  sbc a,h
 3268 0bb9 67        	  ld h,a
 3269 0bba C35D 05   	  jp push_hlde
 3270               	
 3271               	; ----------------------------------------------
 3272 0bbd BF0B      	  _code_header nip_,"NIP"
 3273               	
 3274 0bbf E1        	  pop hl
 3275 0bc0 D1        	  pop de
 3276 0bc1 C35E 05   	  jp push_hl
 3277               	
 3278               	; ----------------------------------------------
 3279 0bc4 C60B      	  _code_header tuck_,"TUCK"
 3280               	
 3281 0bc6 E1        	  pop hl
 3282 0bc7 D1        	  pop de
 3283 0bc8 E5        	  push hl
 3284 0bc9 C35D 05   	  jp push_hlde
 3285               	
 3286               	; ----------------------------------------------
 3287 0bcc CE0B      	  _code_header over_,"OVER"
 3288               	
 3289 0bce D1        	  pop de
 3290 0bcf E1        	  pop hl
 3291 0bd0 E5        	  push hl
 3292 0bd1 C35D 05   	  jp push_hlde
 3293               	
 3294               	; ----------------------------------------------
 3295 0bd4 D60B      	  _code_header drop_,"DROP"
 3296               	
 3297 0bd6 E1        	  pop hl
 3298 0bd7 DDE9      	  _jp_next
 3299               	
 3300               	; ----------------------------------------------
 3301 0bd9 DB0B      	  _code_header swap_,"SWAP"
 3302               	
 3303 0bdb E1        	  pop hl
 3304 0bdc E3        	  ex (sp),hl
 3305 0bdd C35E 05   	  jp push_hl
 3306               	
GAS LISTING solo_forth.z80s 			page 61


 3307               	; ----------------------------------------------
 3308 0be0 E20B      	  _code_header dup_,"DUP"
 3309               	
 3310 0be2 E1        	  pop hl
 3311 0be3 E5        	  push hl
 3312 0be4 C35E 05   	  jp push_hl
 3313               	
 3314               	; ----------------------------------------------
 3315 0be7 E90B      	  _code_header two_dup_,"2DUP"
 3316               	
 3317 0be9 E1        	  pop hl
 3318 0bea D1        	  pop de
 3319 0beb D5        	  push de
 3320 0bec E5        	  push hl
 3321 0bed C35D 05   	  jp push_hlde
 3322               	
 3323               	; ----------------------------------------------
 3324 0bf0 F20B      	  _code_header plus_store_,"+!"
 3325               	
 3326 0bf2 E1        	  pop hl ; variable address
 3327 0bf3 D1        	  pop de ; number
 3328 0bf4 7E        	  ld a,(hl)
 3329 0bf5 83        	  add a,e
 3330 0bf6 77        	  ld (hl),a
 3331 0bf7 23        	  inc hl
 3332 0bf8 7E        	  ld a,(hl)
 3333 0bf9 8A        	  adc a,d
 3334 0bfa 77        	  ld (hl),a
 3335 0bfb DDE9      	  _jp_next
 3336               	
 3337               	; ----------------------------------------------
 3338 0bfd FF0B      	  _code_header off_,"OFF"
 3339               	
 3340 0bff E1        	  pop hl
 3341 0c00 3600      	  ld (hl),0
 3342 0c02 23        	  inc hl
 3343 0c03 3600      	  ld (hl),0
 3344 0c05 DDE9      	  _jp_next
 3345               	
 3346               	; ----------------------------------------------
 3347 0c07 090C      	  _code_header on_,"ON"
 3348               	
 3349 0c09 E1        	  pop hl
 3350               	.if true=1
 3351 0c0a 3601      	  ld (hl),1
 3352 0c0c 23        	  inc hl
 3353 0c0d 3600      	  ld (hl),0
 3354               	.else
 3355               	  ld (hl),0xFF
 3356               	  inc hl
 3357               	  ld (hl),0xFF
 3358               	.endif
 3359 0c0f DDE9      	  _jp_next
 3360               	
 3361               	; ----------------------------------------------
 3362 0c11 130C      	  _code_header toggle_,"TOGGLE"
 3363               	
GAS LISTING solo_forth.z80s 			page 62


 3364               	; doc{
 3365               	;
 3366               	; toggle  ( a b -- )  \ fig-Forth
 3367               	;
 3368               	; Complement the contents of _a_ by the bit pattern _b_.
 3369               	;
 3370               	; }doc
 3371               	
 3372 0c13 D1        	  pop de ; e = bit pattern
 3373 0c14 E1        	  pop hl ; address
 3374 0c15 7E        	  ld a,(hl)
 3375 0c16 AB        	  xor e
 3376 0c17 77        	  ld (hl),a
 3377 0c18 DDE9      	  _jp_next
 3378               	
 3379               	; ----------------------------------------------
 3380 0c1a 1C0C      	  _code_header fetch_,"@"
 3381               	
 3382 0c1c E1        	  pop hl
 3383               	fetch.hl:
 3384 0c1d 5E        	  ld e,(hl)
 3385 0c1e 23        	  inc hl
 3386 0c1f 56        	  ld d,(hl)
 3387 0c20 D5        	  push de
 3388 0c21 DDE9      	  _jp_next
 3389               	
 3390               	; ----------------------------------------------
 3391 0c23 250C      	  _code_header c_fetch_,"C@"
 3392               	
 3393 0c25 E1        	  pop hl
 3394 0c26 6E        	  ld l,(hl)
 3395 0c27 2600      	  ld h,0x00
 3396 0c29 C35E 05   	  jp push_hl
 3397               	
 3398               	; ----------------------------------------------
 3399 0c2c 2E0C      	  _code_header two_fetch_,"2@"
 3400               	
 3401 0c2e E1        	  pop hl ; address
 3402               	two_fetch.hl:
 3403 0c2f 5E        	  ld e,(hl)     ; 07t  1
 3404 0c30 23        	  inc hl        ; 06t  1
 3405 0c31 56        	  ld d,(hl)     ; 07t  1 ; de = low part
 3406 0c32 23        	  inc hl        ; 06t  1
 3407 0c33 7E        	  ld a,(hl)     ; 07t  1
 3408 0c34 23        	  inc hl        ; 06t  1
 3409 0c35 66        	  ld h,(hl)     ; 07t  1
 3410 0c36 6F        	  ld l,a        ; 04t  1 ; hl = high part
 3411 0c37 EB        	  ex de,hl      ; 04t  1
 3412 0c38 C35D 05   	  jp push_hlde ; 10t  3
 3413               	                ; 11t  0 push de
 3414               	                ; 11t  0 push hl
 3415               	                ; 86t 12 TOTAL
 3416               	
 3417               	; ----------------------------------------------
 3418 0c3b 3D0C      	  _code_header two_store_,"2!"
 3419               	
 3420 0c3d E1        	  pop hl
GAS LISTING solo_forth.z80s 			page 63


 3421               	two_store.into_hl_pointer:
 3422 0c3e D1        	  pop de
 3423 0c3f 73        	  ld (hl),e
 3424 0c40 23        	  inc hl
 3425 0c41 72        	  ld (hl),d
 3426 0c42 23        	  inc hl
 3427               	  .if size_optimization
 3428               	    jp store.into_hl_pointer
 3429               	  .else
 3430 0c43 D1        	    pop de
 3431 0c44 73        	    ld (hl),e
 3432 0c45 23        	    inc hl
 3433 0c46 72        	    ld (hl),d
 3434 0c47 DDE9      	    _jp_next
 3435               	  .endif
 3436               	
 3437               	; ----------------------------------------------
 3438 0c49 4B0C      	  _code_header store_,"!"
 3439               	
 3440 0c4b E1        	  pop hl
 3441               	store.into_hl_pointer:
 3442 0c4c D1        	  pop de
 3443               	store.de_into_hl_pointer:
 3444 0c4d 73        	  ld (hl),e
 3445 0c4e 23        	  inc hl
 3446 0c4f 72        	  ld (hl),d
 3447 0c50 DDE9      	  _jp_next
 3448               	
 3449               	; ----------------------------------------------
 3450 0c52 540C      	  _code_header c_store_,"C!"
 3451               	
 3452 0c54 E1        	  pop hl
 3453 0c55 D1        	  pop de
 3454 0c56 73        	  ld (hl),e
 3455 0c57 DDE9      	  _jp_next
 3456               	
 3457               	; ----------------------------------------------
 3458 0c59 650C      	  _colon_header colon_,":",immediate
 3459               	
 3460 0c5b 320F      	  dw question_exec_
 3461 0c5d 030F      	  dw store_csp_
 3462 0c5f C713 980F 	  dw header_,right_bracket_
 3463 0c63 C90F      	  dw paren_semicolon_code_
 3464               	do_colon:
 3465 0c65 2A10 00   	  ld hl,(return_stack_pointer)
 3466 0c68 2B        	  dec hl
 3467 0c69 70        	  ld (hl),b
 3468 0c6a 2B        	  dec hl
 3469 0c6b 71        	  ld (hl),c
 3470 0c6c 2210 00   	  ld (return_stack_pointer),hl ; save the updated IP
 3471 0c6f 13        	  inc de ; de=pfa
 3472 0c70 4B        	  ld c,e
 3473 0c71 42        	  ld b,d ; bc=pfa
 3474               	do_colon_end: ; XXX TMP for debugging
 3475 0c72 DDE9      	  _jp_next
 3476               	
 3477               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 64


 3478 0c74 650C      	  _colon_header noname_,":NONAME",immediate
 3479               	
 3480               	  ; [Code from the Afera library.]
 3481               	
 3482               	  ; XXX TODO move to the disk? problem: do_colon
 3483               	
 3484 0c76 320F      	  dw question_exec_
 3485 0c78 A00F      	  dw smudge_  ; deactivate the effect of the next `smudge` in `;`
 3486 0c7a 900D      	  dw here_ ; cfa
 3487 0c7c 030F      	  dw store_csp_
 3488 0c7e 8D06 650C 	  dw lit_,do_colon,comma_ ; create the code field
 3488      B20D 
 3489 0c84 980F      	  dw right_bracket_
 3490 0c86 C00A      	  dw semicolon_s_
 3491               	
 3492               	; ----------------------------------------------
 3493 0c88 650C      	  _colon_header semicolon_,";",immediate
 3494               	
 3495 0c8a 480F      	  dw question_csp_
 3496 0c8c 680F C00A 	  dw compile_,semicolon_s_
 3497 0c90 A00F      	  dw smudge_
 3498 0c92 900F      	  dw left_bracket_
 3499 0c94 C00A      	  dw semicolon_s_
 3500               	
 3501               	; ----------------------------------------------
 3502               	  _header noop_,"NOOP"
 3503               	
 3504               	; doc{
 3505               	;
 3506               	; noop  ( -- )
 3507               	;
 3508               	; }doc
 3509               	
 3510 0c96 5F05      	  dw next ; code field
 3511               	
 3512               	; ----------------------------------------------
 3513 0c98 650C      	  _colon_header constant_,"CONSTANT"
 3514               	
 3515 0c9a 1414 B20D 	  dw create_,comma_
 3516 0c9e C90F      	  dw paren_semicolon_code_
 3517               	do_constant:
 3518 0ca0 13        	  inc de    ; de=pfa
 3519 0ca1 EB        	  ex de,hl  ; hl=pfa
 3520 0ca2 C31D 0C   	  jp fetch.hl
 3521               	
 3522               	; ----------------------------------------------
 3523 0ca5 650C      	  _colon_header variable_,"VARIABLE"
 3524               	
 3525               	; doc{
 3526               	;
 3527               	; variable ( "name" -- )  \ ANS Forth
 3528               	;
 3529               	; Parse _name_.  Create a definition for _name_ with the
 3530               	; execution semantics defined below. Reserve one cell of data
 3531               	; space.
 3532               	;
 3533               	;    _name_ is referred to as a variable.
GAS LISTING solo_forth.z80s 			page 65


 3534               	;
 3535               	;          name Execution: ( -- a )
 3536               	;
 3537               	;    _a_ is the address of the reserved cell. A program is
 3538               	;    responsible for initializing the contents of the reserved
 3539               	;    cell.
 3540               	;
 3541               	; }doc
 3542               	
 3543 0ca7 1414 820D 	  dw create_,cell_,allot_
 3543      980D 
 3544 0cad C00A      	  dw semicolon_s_
 3545               	
 3546               	; ----------------------------------------------
 3547 0caf 650C      	  _colon_header user_,"USER"
 3548               	
 3549               	  ; XXX TODO -- Use only one byte for storage,
 3550               	  ; but defining `cconstant` only for this does not seem a good idea.
 3551               	
 3552 0cb1 980C      	  dw constant_
 3553 0cb3 C90F      	  dw paren_semicolon_code_
 3554               	do_user:
 3555               	;  _z80_border_wait 5 ; XXX INFORMER
 3556 0cb5 13        	  inc de      ; de=pfa
 3557 0cb6 EB        	  ex de,hl
 3558 0cb7 5E        	  ld e,(hl)
 3559 0cb8 1600      	  ld d,0x00   ; de = index of the user variable
 3560 0cba 2A0E 00   	  ld hl,(user_variables_pointer)
 3561 0cbd 19        	  add hl,de   ; hl= address of the user variable
 3562               	;  _z80_border_wait 6 ; XXX INFORMER
 3563 0cbe C35E 05   	  jp push_hl
 3564               	
 3565               	; ----------------------------------------------
 3566 0cc1 A00C      	  _constant_header msg_scr_,"MSG-SCR"
 3567               	
 3568               	; doc{
 3569               	;
 3570               	; msg-scr  ( -- n )
 3571               	;
 3572               	; Constant: Screen where the error messages start.
 3573               	;
 3574               	; }doc
 3575               	
 3576               	; Idea taken from lina ciforth.
 3577               	
 3578 0cc3 0400      	  dw 0x0004
 3579               	
 3580               	; ----------------------------------------------
 3581 0cc5 A00C      	  _constant_header zero_,"0"
 3582               	
 3583 0cc7 0000      	  dw 0x0000
 3584               	
 3585               	; ----------------------------------------------
 3586 0cc9 A00C      	  _constant_header one_,"1"
 3587               	
 3588 0ccb 0100      	  dw 0x0001
 3589               	
GAS LISTING solo_forth.z80s 			page 66


 3590               	; ----------------------------------------------
 3591 0ccd A00C      	  _constant_header two_,"2"
 3592               	
 3593 0ccf 0200      	  dw 0x0002
 3594               	
 3595               	; ----------------------------------------------
 3596 0cd1 D30C      	  _code_header false_,"FALSE"
 3597               	
 3598               	; doc{
 3599               	;
 3600               	; false  ( -- f )
 3601               	;
 3602               	; }doc
 3603               	
 3604 0cd3 2100 00   	  ld hl,false
 3605 0cd6 C35E 05   	  jp push_hl
 3606               	
 3607               	; ----------------------------------------------
 3608 0cd9 DB0C      	  _code_header true_,"TRUE"
 3609               	
 3610               	; doc{
 3611               	;
 3612               	; true  ( -- t )
 3613               	;
 3614               	; }doc
 3615               	
 3616 0cdb 2101 00   	  ld hl,true
 3617 0cde C35E 05   	  jp push_hl
 3618               	
 3619               	; ----------------------------------------------
 3620 0ce1 A00C      	  _constant_header b_l_,"BL"
 3621               	
 3622               	; doc{
 3623               	;
 3624               	; bl  ( -- n )
 3625               	;
 3626               	; }doc
 3627               	
 3628 0ce3 2000      	  dw space_char
 3629               	
 3630               	; ----------------------------------------------
 3631 0ce5 A00C      	  _constant_header c_slash_l_,"C/L"
 3632               	
 3633 0ce7 4000      	  dw characters_per_line
 3634               	
 3635               	; ----------------------------------------------
 3636 0ce9 A00C      	  _constant_header l_slash_scr_,"L/SCR"
 3637               	
 3638 0ceb 1000      	  dw lines_per_screen
 3639               	
 3640               	; ----------------------------------------------
 3641 0ced A00C      	  _constant_header disk_buffer_,"DISK-BUFFER"
 3642               	
 3643 0cef 0703      	  dw disk_buffer
 3644               	
 3645               	; ----------------------------------------------
 3646 0cf1 A00C      	  _constant_header b_slash_buf_,"B/BUF"
GAS LISTING solo_forth.z80s 			page 67


 3647               	
 3648 0cf3 0002      	  dw data_bytes_per_buffer
 3649               	
 3650               	; ----------------------------------------------
 3651 0cf5 A00C      	  _constant_header b_slash_scr_,"B/SCR"
 3652               	
 3653 0cf7 0200      	  dw blocks_per_screen
 3654               	
 3655               	; ----------------------------------------------
 3656 0cf9 A00C      	  _constant_header scr_slash_disk_,"SCR/DISK"
 3657               	
 3658 0cfb 0C03      	  dw screens_per_disk
 3659               	
 3660               	; ----------------------------------------------
 3661 0cfd A00C      	  _constant_header hash_vocs_,"#VOCS"
 3662               	
 3663 0cff 0800      	  dw max_search_order
 3664               	
 3665               	; ----------------------------------------------
 3666 0d01 650C      	  _colon_header plus_origin_,"+ORIGIN"
 3667               	
 3668               	; doc{
 3669               	;
 3670               	; +origin  ( n -- a )  \ fig-Forth
 3671               	;
 3672               	; Leave the memory address relative by _n_ to the origin
 3673               	; parameter area.  _n_ is the minimum address unit, either byte
 3674               	; or word.  This definition is used to access or modify the
 3675               	; boot-up parameters at the origin area.
 3676               	;
 3677               	; }doc
 3678               	
 3679 0d03 8D06 005E 	  dw lit_,origin,plus_
 3679      810B 
 3680 0d09 C00A      	  dw semicolon_s_
 3681               	
 3682               	; ----------------------------------------------
 3683 0d0b B50C      	  _user_variable_header sp0_,"SP0"
 3684               	
 3685 0d0d 00        	  db 0x00
 3686               	
 3687               	; ----------------------------------------------
 3688 0d0e B50C      	  _user_variable_header rp0_,"RP0"
 3689               	
 3690 0d10 02        	  db 0x02
 3691               	
 3692               	; ----------------------------------------------
 3693 0d11 B50C      	  _user_variable_header width_,"WIDTH"
 3694               	
 3695               	  ; XXX TODO normal variable
 3696               	
 3697 0d13 06        	  db 0x06
 3698               	
 3699               	; ----------------------------------------------
 3700 0d14 B50C      	  _user_variable_header warning_,"WARNING"
 3701               	
 3702 0d16 08        	  db 0x08
GAS LISTING solo_forth.z80s 			page 68


 3703               	
 3704               	; ----------------------------------------------
 3705 0d17 B50C      	  _user_variable_header dp_,"DP"
 3706               	
 3707               	  ; XXX TODO why this is a user variable?
 3708               	  ; XXX TODO normal variable
 3709               	
 3710 0d19 0C        	  db 0x0C
 3711               	
 3712               	; ----------------------------------------------
 3713 0d1a 1C14      	  _variable_header voc_link_,"VOC-LINK"
 3714               	
 3715 0d1c 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 3716               	
 3717               	; ----------------------------------------------
 3718 0d1e B50C      	  _user_variable_header blk_,"BLK"
 3719               	
 3720               	  ; XXX TODO normal variable
 3721               	
 3722 0d20 10        	  db 0x10
 3723               	
 3724               	; ----------------------------------------------
 3725 0d21 B50C      	  _user_variable_header to_in_,">IN"
 3726               	
 3727               	  ; XXX TODO normal variable
 3728               	
 3729 0d23 12        	  db 0x12
 3730               	
 3731               	; ----------------------------------------------
 3732 0d24 B50C      	  _user_variable_header out_,"OUT"
 3733               	
 3734               	  ; XXX TODO In Forth 83 it's a user variable too, but it's called `#out`.
 3735               	  ; XXX TODO rename to `#emitted`
 3736 0d26 14        	  db 0x14
 3737               	
 3738               	; ----------------------------------------------
 3739 0d27 B50C      	  _user_variable_header scr_,'SCR' ; XXX OLD -- used by `list`
 3740               	
 3741 0d29 16        	  db 0x16
 3742               	
 3743               	; ----------------------------------------------
 3744 0d2a B50C      	  _user_variable_header context_,"CONTEXT"
 3745               	
 3746 0d2c 2A        	  db 0x2A
 3747               	
 3748               	; ----------------------------------------------
 3749 0d2d B50C      	  _user_variable_header current_,"CURRENT"
 3750               	
 3751 0d2f 1C        	  db 0x1C
 3752               	
 3753               	; ----------------------------------------------
 3754 0d30 B50C      	  _user_variable_header state_,"STATE"
 3755               	
 3756 0d32 1E        	  db 0x1E
 3757               	
 3758               	; ----------------------------------------------
 3759 0d33 B50C      	  _user_variable_header base_,"BASE"
GAS LISTING solo_forth.z80s 			page 69


 3760               	
 3761 0d35 20        	  db 0x20
 3762               	
 3763               	; ----------------------------------------------
 3764 0d36 B50C      	  _user_variable_header dpl_,"DPL"
 3765               	
 3766 0d38 22        	  db 0x22
 3767               	
 3768               	; ----------------------------------------------
 3769 0d39 B50C      	  _user_variable_header fld_,"FLD"
 3770               	
 3771 0d3b 24        	  db 0x24
 3772               	
 3773               	; ----------------------------------------------
 3774 0d3c B50C      	  _user_variable_header csp_,"CSP"
 3775               	
 3776 0d3e 26        	  db 0x26
 3777               	
 3778               	; ----------------------------------------------
 3779 0d3f B50C      	  _user_variable_header r_hash_,"R#"
 3780               	
 3781               	  ; XXX OLD
 3782 0d41 28        	  db 0x28
 3783               	
 3784               	; ----------------------------------------------
 3785 0d42 B50C      	  _user_variable_header hld_,"HLD"
 3786               	
 3787 0d44 1A        	  db 0x1A
 3788               	
 3789               	; ----------------------------------------------
 3790 0d45 A00C      	  _constant_header tib_,"TIB"
 3791               	
 3792               	; doc{
 3793               	;
 3794               	; tib  ( -- ca )  \ ANS-Forth
 3795               	;
 3796               	; Address of the terminal input buffer.
 3797               	;
 3798               	; }doc
 3799               	
 3800 0d47 1402      	  dw terminal_input_buffer
 3801               	
 3802               	; ----------------------------------------------
 3803 0d49 1C14      	  _variable_header number_tib_,"#TIB"
 3804               	
 3805 0d4b 5000      	  dw bytes_per_terminal_input_buffer
 3806               	
 3807               	; ----------------------------------------------
 3808 0d4d 650C      	  _colon_header recurse_,"RECURSE",immediate
 3809               	
 3810               	; doc{
 3811               	;
 3812               	; recurse  ( -- )  \ ANS Forth
 3813               	;
 3814               	; }doc
 3815               	
 3816 0d4f 460E E30E 	  dw latest_,nfa_to_cfa_,compile_comma_
GAS LISTING solo_forth.z80s 			page 70


 3816      BE0D 
 3817 0d55 C00A      	  dw semicolon_s_
 3818               	
 3819               	; ----------------------------------------------
 3820 0d57 590D      	  _code_header one_plus_,"1+"
 3821               	
 3822 0d59 E1        	  pop hl
 3823 0d5a 23        	  inc hl
 3824 0d5b C35E 05   	  jp push_hl
 3825               	
 3826               	; ----------------------------------------------
 3827 0d5e 600D      	  _code_header two_plus_,"2+"
 3828               	
 3829 0d60 E1        	  pop hl
 3830 0d61 23        	  inc hl
 3831 0d62 23        	  inc hl
 3832 0d63 C35E 05   	  jp push_hl
 3833               	
 3834               	; ----------------------------------------------
 3835 0d66 730D      	  _code_alias_header cell_minus_,"CELL-",,two_minus_
 3836               	
 3837               	; ----------------------------------------------
 3838 0d68 600D      	  _code_alias_header cell_plus_,"CELL+",,two_plus_
 3839               	
 3840               	; ----------------------------------------------
 3841 0d6a 6C0D      	  _code_header one_minus_,"1-"
 3842               	
 3843 0d6c E1        	  pop hl
 3844 0d6d 2B        	  dec hl
 3845 0d6e C35E 05   	  jp push_hl
 3846               	
 3847               	; ----------------------------------------------
 3848 0d71 730D      	  _code_header two_minus_,"2-"
 3849               	
 3850 0d73 E1        	  pop hl
 3851 0d74 2B        	  dec hl
 3852 0d75 2B        	  dec hl
 3853 0d76 C35E 05   	  jp push_hl
 3854               	
 3855               	; ----------------------------------------------
 3856 0d79 7B0D      	  _code_header two_star_,"2*"
 3857               	
 3858               	; doc{
 3859               	;
 3860               	; 2*  ( x1 -- x2 )  \ ANS Forth
 3861               	;
 3862               	; _x2_ is the result of shifting _x1_ one bit toward the
 3863               	; most-significant bit, filling the vacated least-significant
 3864               	; bit with zero.
 3865               	;
 3866               	; This is the same as `1 lshift`.
 3867               	;
 3868               	; }doc
 3869               	
 3870               	  ; [Code from DZX-Forth. Documentation partly based on lina
 3871               	  ; ciforth.]
 3872               	
GAS LISTING solo_forth.z80s 			page 71


 3873 0d7b E1        	  pop hl
 3874 0d7c 29        	  add hl,hl
 3875 0d7d C35E 05   	  jp push_hl
 3876               	
 3877               	; ----------------------------------------------
 3878 0d80 7B0D      	  _code_alias_header cells_,"CELLS",,two_star_
 3879               	
 3880               	; ----------------------------------------------
 3881 0d82 A00C      	  _constant_header cell_,"CELL"
 3882               	
 3883 0d84 0200      	  dw 0x0002
 3884               	
 3885               	; ----------------------------------------------
 3886 0d86 880D      	  _code_header two_slash_,"2/"
 3887               	
 3888               	; doc{
 3889               	;
 3890               	; 2/  ( x1 -- x2 )  \ ANS Forth
 3891               	;
 3892               	; _x2_ is the result of shifting _x1_ one bit toward the
 3893               	; least-significant bit, leaving the most-significant bit
 3894               	; unchanged.
 3895               	;
 3896               	; This is the same as `s>d 2 fm/mod swap drop`. It is not the same
 3897               	; as `2 /`, nor is it the same as `1 rshift`.
 3898               	;
 3899               	; }doc
 3900               	
 3901               	  ; [Code from Spectrum Forth-83. Documentation partly based on lina
 3902               	  ; ciforth.]
 3903               	
 3904 0d88 E1        	  pop hl
 3905 0d89 CB2C      	  sra h
 3906 0d8b CB1D      	  rr l
 3907 0d8d C35E 05   	  jp push_hl
 3908               	
 3909               	; ----------------------------------------------
 3910 0d90 650C      	  _colon_header here_,"HERE"
 3911               	
 3912 0d92 170D 1A0C 	  dw dp_,fetch_
 3913 0d96 C00A      	  dw semicolon_s_
 3914               	
 3915               	; ----------------------------------------------
 3916 0d98 650C      	  _colon_header allot_,"ALLOT"
 3917               	
 3918 0d9a 170D F00B 	  dw dp_,plus_store_
 3919 0d9e C00A      	  dw semicolon_s_
 3920               	
 3921               	; ----------------------------------------------
 3922 0da0 650C      	  _colon_header s_comma_,"s,"
 3923               	
 3924               	; doc{
 3925               	; s,  ( ca len -- )
 3926               	; }doc
 3927               	
 3928 0da2 E00B C60D 	  dw dup_,c_comma_,tuck_,here_,swap_,cmove_,allot_
 3928      C40B 900D 
GAS LISTING solo_forth.z80s 			page 72


 3928      D90B E609 
 3928      980D 
 3929 0db0 C00A      	  dw semicolon_s_
 3930               	
 3931               	; ----------------------------------------------
 3932 0db2 650C      	  _colon_header comma_,","
 3933               	
 3934 0db4 900D 490C 	  dw here_,store_,two_,allot_
 3934      CD0C 980D 
 3935 0dbc C00A      	  dw semicolon_s_
 3936               	
 3937               	; ----------------------------------------------
 3938 0dbe 650C      	  _colon_header compile_comma_,"COMPILE,"
 3939               	
 3940               	; doc{
 3941               	;
 3942               	; compile,  ( cfa -- )
 3943               	;
 3944               	; }doc
 3945               	
 3946 0dc0 250F B20D 	  dw question_comp_,comma_
 3947 0dc4 C00A      	  dw semicolon_s_
 3948               	
 3949               	; ----------------------------------------------
 3950 0dc6 650C      	  _colon_header c_comma_,"C,"
 3951               	
 3952 0dc8 900D 520C 	  dw here_,c_store_,one_,allot_
 3952      C90C 980D 
 3953 0dd0 C00A      	  dw semicolon_s_
 3954               	
 3955               	; ----------------------------------------------
 3956 0dd2 D40D      	  _code_header minus_,"-"
 3957               	
 3958 0dd4 D1        	  pop de
 3959 0dd5 E1        	  pop hl
 3960 0dd6 A7        	  and a
 3961 0dd7 ED52      	  sbc hl,de
 3962 0dd9 C35E 05   	  jp push_hl
 3963               	
 3964               	; ----------------------------------------------
 3965 0ddc DE0D      	  _code_header not_equals_,"<>"
 3966               	
 3967 0dde D1        	  pop de
 3968 0ddf E1        	  pop hl
 3969 0de0 CD0C 05   	  call compare_de_hl_unsigned
 3970               	false_if_z: ; XXX entry not used yet
 3971 0de3 CAD3 0C   	  jp z,false_pfa
 3972 0de6 C3DB 0C   	  jp true_pfa
 3973               	
 3974               	; ----------------------------------------------
 3975 0de9 EB0D      	  _code_header equals_,"="
 3976               	
 3977 0deb D1        	  pop de
 3978 0dec E1        	  pop hl
 3979 0ded CD0C 05   	  call compare_de_hl_unsigned
 3980               	true_if_z: ; XXX entry not used yet
 3981 0df0 CADB 0C   	  jp z,true_pfa
GAS LISTING solo_forth.z80s 			page 73


 3982 0df3 C3D3 0C   	  jp false_pfa
 3983               	
 3984               	; ----------------------------------------------
 3985 0df6 F80D      	  _code_header less_than_,"<"
 3986               	
 3987 0df8 D1        	  pop de
 3988 0df9 E1        	  pop hl
 3989               	is_de_less_than_hl:
 3990 0dfa CD12 05   	  call compare_de_hl_signed
 3991               	  .if size_optimization
 3992               	    jp true_if_cy
 3993               	  .else
 3994 0dfd DADB 0C   	    jp c,true_pfa
 3995 0e00 C3D3 0C   	    jp false_pfa
 3996               	  .endif
 3997               	
 3998               	; ----------------------------------------------
 3999 0e03 050E      	  _code_header u_greater_than_,"U>"
 4000               	
 4001 0e05 E1        	  pop hl
 4002               	u_greater_than.hl:
 4003 0e06 D1        	  pop de
 4004 0e07 C30E 0E   	  jp u_less_than.de_hl
 4005               	
 4006               	; ----------------------------------------------
 4007 0e0a 0C0E      	  _code_header u_less_than_,"U<"
 4008               	
 4009 0e0c D1        	  pop de
 4010 0e0d E1        	  pop hl
 4011               	u_less_than.de_hl:
 4012 0e0e CD0C 05   	  call compare_de_hl_unsigned
 4013               	  .if size_optimization
 4014               	    jp true_if_cy
 4015               	  .else
 4016 0e11 DADB 0C   	    jp c,true_pfa
 4017 0e14 C3D3 0C   	    jp false_pfa
 4018               	  .endif
 4019               	
 4020               	; ----------------------------------------------
 4021 0e17 190E      	  _code_header greater_than_,">"
 4022               	
 4023 0e19 E1        	  pop hl
 4024 0e1a D1        	  pop de
 4025 0e1b C3FA 0D   	  jp is_de_less_than_hl
 4026               	
 4027               	; ----------------------------------------------
 4028 0e1e 200E      	  _code_header rot_,"ROT"
 4029               	
 4030 0e20 D1        	  pop de
 4031 0e21 E1        	  pop hl
 4032 0e22 E3        	  ex (sp),hl
 4033 0e23 C35D 05   	  jp push_hlde
 4034               	
 4035               	; ----------------------------------------------
 4036 0e26 650C      	  _colon_header space_,"SPACE"
 4037               	
 4038 0e28 E10C EC08 	  dw b_l_,emit_
GAS LISTING solo_forth.z80s 			page 74


 4039 0e2c C00A      	  dw semicolon_s_
 4040               	
 4041               	; ----------------------------------------------
 4042 0e2e 650C      	  _colon_header question_dup_,"?DUP"
 4043               	
 4044 0e30 E00B      	  dw dup_
 4045 0e32 6007 380E 	  dw zero_branch_,question_dup.end
 4046 0e36 E00B      	  dw dup_
 4047               	question_dup.end:
 4048 0e38 C00A      	  dw semicolon_s_
 4049               	
 4050               	; ----------------------------------------------
 4051 0e3a 600D      	  _code_alias_header lfa_to_nfa_,"LFA>NFA",,two_plus_
 4052               	
 4053               	; ----------------------------------------------
 4054 0e3c 650C      	  _colon_header trail_,"TRAIL"
 4055               	
 4056               	; doc{
 4057               	;
 4058               	; trail ( -- nfa )
 4059               	;
 4060               	; Leave the name field address of the topmost word in the
 4061               	; `context` vocabulary.
 4062               	;
 4063               	; }doc
 4064               	
 4065 0e3e 2A0D 1A0C 	  dw context_,fetch_,fetch_
 4065      1A0C 
 4066 0e44 C00A      	  dw semicolon_s_
 4067               	
 4068               	; ----------------------------------------------
 4069 0e46 650C      	  _colon_header latest_,"LATEST"
 4070               	
 4071               	; doc{
 4072               	;
 4073               	; latest ( -- nfa )  \ ANS Forth
 4074               	;
 4075               	; Leave the name field address of the topmost word in the
 4076               	; `current` vocabulary.
 4077               	;
 4078               	; }doc
 4079               	
 4080 0e48 2D0D 1A0C 	  dw current_,fetch_,fetch_
 4080      1A0C 
 4081 0e4e C00A      	  dw semicolon_s_
 4082               	
 4083               	; ----------------------------------------------
 4084 0e50 650C      	  _colon_header pfa_to_lfa_,"PFA>LFA"
 4085               	
 4086 0e52 560E 620E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4087               	
 4088               	; ----------------------------------------------
 4089 0e56 730D      	  _code_alias_header pfa_to_cfa_,"PFA>CFA",,two_minus_
 4090               	
 4091               	; ----------------------------------------------
 4092 0e58 600D      	  _code_alias_header cfa_to_pfa_,"CFA>PFA",,two_plus_
 4093               	
GAS LISTING solo_forth.z80s 			page 75


 4094               	; ----------------------------------------------
 4095 0e5a 650C      	  _colon_header pfa_to_nfa_,"PFA>NFA"
 4096               	
 4097 0e5c 560E 620E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4098 0e60 C00A      	  dw semicolon_s_
 4099               	
 4100               	; ----------------------------------------------
 4101               	
 4102               	; doc{
 4103               	;
 4104               	; cfa>nfa  ( cfa -- nfa )
 4105               	;
 4106               	; Warning: No check is done where cfa belongs to a definition
 4107               	; created with `:noname`.
 4108               	;
 4109               	; }doc
 4110               	
 4111               	; XXX FIXME -- make it return 0 if cfa has no name associated
 4112               	
 4113 0e62 640E      	  _code_header cfa_to_nfa_,"CFA>NFA"
 4114               	
 4115 0e64 1E01      	  ld e,names_bank
 4116 0e66 CDA0 06   	  call bank.e ; page the memory bank
 4117 0e69 D1        	  pop de ; cfa
 4118 0e6a C5        	  push bc ; save Forth IP
 4119 0e6b 0600      	  ld b,0
 4120 0e6d 21FC BF   	  ld hl, names_bank_address-4
 4121               	
 4122               	cfa_to_nfa.begin_0:
 4123               	  ; hl = address of the cfa pointer
 4124 0e70 23        	  inc hl
 4125               	cfa_to_nfa.begin_1:
 4126 0e71 23        	  inc hl
 4127 0e72 23        	  inc hl
 4128 0e73 23        	  inc hl
 4129 0e74 7E        	  ld a,(hl) ; name field byte length
 4130 0e75 E61F      	  and max_word_length_bit_mask ; name length
 4131 0e77 4F        	  ld c,a ; name length
 4132 0e78 0C        	  inc c  ; plus the length byte
 4133 0e79 09        	  add hl,bc ; point to the cfa pointer
 4134               	
 4135 0e7a 7E        	  ld a,(hl) ; low byte of cfa
 4136 0e7b BB        	  cp e ; equal?
 4137 0e7c 20F2      	  jr nz,cfa_to_nfa.begin_0 ; not equal
 4138 0e7e 23        	  inc hl
 4139 0e7f 7E        	  ld a,(hl) ; high byte of cfa
 4140 0e80 BA        	  cp d ; equal?
 4141 0e81 20EE      	  jr nz,cfa_to_nfa.begin_1 ; not equal
 4142               	  ; cfa found
 4143 0e83 0E03      	  ld c,3
 4144 0e85 09        	  add hl,bc ; nfa
 4145               	
 4146 0e86 1E00      	  ld e,default_bank
 4147 0e88 CDA0 06   	  call bank.e ; page the default memory bank
 4148               	
 4149 0e8b C1        	  pop bc ; restore Forth IP
 4150 0e8c C35E 05   	  jp push_hl
GAS LISTING solo_forth.z80s 			page 76


 4151               	
 4152               	; ----------------------------------------------
 4153               	
 4154 0e8f 600D      	  _code_alias_header cfap_to_lfa_,"CFAP>LFA",,two_plus_
 4155               	
 4156               	; ----------------------------------------------
 4157               	
 4158 0e91 730D      	  _code_alias_header nfa_to_lfa_,"NFA>LFA",,two_minus_
 4159               	
 4160               	; ----------------------------------------------
 4161 0e93 650C      	  _colon_header c_store_bank_,"C!BANK"
 4162               	
 4163               	; doc{
 4164               	;
 4165               	; c!bank  ( b a n -- )
 4166               	;
 4167               	; Store _b_ into address _a_ of bank _n_.
 4168               	;
 4169               	; }doc
 4170               	
 4171               	  ; XXX 11 bytes
 4172 0e95 9806 520C 	  dw bank_,c_store_
 4173 0e99 C50C 9806 	  _default_bank
 4174 0e9d C00A      	  dw semicolon_s_
 4175               	
 4176               	  ; XXX TODO
 4177               	  ; pop de
 4178               	  ; c_store_bank.e:
 4179               	  ; call bank.e
 4180               	  ; pop hl
 4181               	  ; ld l,(hl)
 4182               	  ; ld h,0
 4183               	  ; ld e,default_bank
 4184               	  ; call bank.e
 4185               	  ; jp pushhl
 4186               	
 4187               	; ----------------------------------------------
 4188 0e9f 650C      	  _colon_header store_bank_,"!BANK"
 4189               	
 4190               	; doc{
 4191               	;
 4192               	; !bank  ( x a n -- )
 4193               	;
 4194               	; Store _x_ into address _a_ of bank _n_.
 4195               	;
 4196               	; }doc
 4197               	
 4198               	  ; XXX 11 bytes
 4199 0ea1 9806 490C 	  dw bank_,store_
 4200 0ea5 C50C 9806 	  _default_bank
 4201 0ea9 C00A      	  dw semicolon_s_
 4202               	
 4203               	; ----------------------------------------------
 4204 0eab 650C      	  _colon_header c_fetch_bank_,"C@BANK"
 4205               	
 4206               	; doc{
 4207               	;
GAS LISTING solo_forth.z80s 			page 77


 4208               	; c@bank  ( a n -- b )
 4209               	;
 4210               	; Fetch the 8-bit content of address _a_ of the bank _n_.
 4211               	;
 4212               	; }doc
 4213               	
 4214               	  ; XXX 11 bytes
 4215 0ead 9806 230C 	  dw bank_,c_fetch_
 4216 0eb1 C50C 9806 	  _default_bank
 4217 0eb5 C00A      	  dw semicolon_s_
 4218               	
 4219               	  ; XXX 15 bytes
 4220               	  ; pop de
 4221               	  ; c_fetch_bank.e:
 4222               	  ; call bank.e
 4223               	  ; pop hl
 4224               	  ; ld l,(hl)
 4225               	  ; ld h,0
 4226               	  ; ld e,default_bank
 4227               	  ; call bank.e
 4228               	  ; jp pushhl
 4229               	
 4230               	; ----------------------------------------------
 4231 0eb7 650C      	  _colon_header fetch_bank_,"@BANK"
 4232               	
 4233               	; doc{
 4234               	;
 4235               	; @bank  ( a n -- x )
 4236               	;
 4237               	; Fetch the 16-bit content of address _a_ of bank _n_.
 4238               	;
 4239               	; }doc
 4240               	
 4241               	  ; XXX 11 bytes
 4242 0eb9 9806 1A0C 	  dw bank_,fetch_
 4243 0ebd C50C 9806 	  _default_bank
 4244 0ec1 C00A      	  dw semicolon_s_
 4245               	
 4246               	  ; XXX 17 bytes
 4247               	  ; pop de
 4248               	  ; fetch_bank.e
 4249               	  ; call bank.e
 4250               	  ; pop hl
 4251               	  ; ld a,(hl)
 4252               	  ; inc hl
 4253               	  ; ld h,(hl)
 4254               	  ; ld l,a
 4255               	  ; ld e,default_bank
 4256               	  ; call bank.e
 4257               	  ; jp pushhl
 4258               	
 4259               	; ----------------------------------------------
 4260 0ec3 650C      	  _colon_header c_fetch_n_,"C@N"
 4261               	
 4262               	; doc{
 4263               	;
 4264               	; c@n  ( a -- x )
GAS LISTING solo_forth.z80s 			page 78


 4265               	;
 4266               	; Fetch from the _a_ address of the names bank.
 4267               	;
 4268               	; }doc
 4269               	
 4270               	  ; XXX 7 bytes:
 4271 0ec5 C90C      	  _literal names_bank
 4272 0ec7 AB0E      	  dw c_fetch_bank_
 4273 0ec9 C00A      	  dw semicolon_s_
 4274               	
 4275               	  ; XXX 5 bytes
 4276               	  ; ld e,names_bank
 4277               	  ; jp c_fetch_bank.e
 4278               	
 4279               	; ----------------------------------------------
 4280 0ecb 650C      	  _colon_header fetch_n_,"@N"
 4281               	
 4282               	; doc{
 4283               	;
 4284               	; @n  ( a -- x )
 4285               	;
 4286               	; Fetch from the _a_ address of the names bank.
 4287               	;
 4288               	; }doc
 4289               	
 4290               	  ; XXX 7 bytes:
 4291 0ecd C90C      	  _literal names_bank
 4292 0ecf B70E      	  dw fetch_bank_
 4293 0ed1 C00A      	  dw semicolon_s_
 4294               	
 4295               	  ; XXX 5 bytes
 4296               	  ; ld e,names_bank
 4297               	  ; jp fetch_bank.e
 4298               	
 4299               	; ----------------------------------------------
 4300 0ed3 650C      	  _colon_header c_store_n_,"C!N"
 4301               	
 4302               	; doc{
 4303               	;
 4304               	; c!n  ( c a -- )
 4305               	;
 4306               	; Store _c_ into the _a_ address of the names bank.
 4307               	;
 4308               	; }doc
 4309               	
 4310               	  ; XXX 7 bytes:
 4311 0ed5 C90C      	  _literal names_bank
 4312 0ed7 930E      	  dw c_store_bank_
 4313 0ed9 C00A      	  dw semicolon_s_
 4314               	
 4315               	; ----------------------------------------------
 4316 0edb 650C      	  _colon_header store_n_,"!N"
 4317               	
 4318               	; doc{
 4319               	;
 4320               	; !n  ( x a -- )
 4321               	;
GAS LISTING solo_forth.z80s 			page 79


 4322               	; Store _x_ into the _a_ address of the names bank.
 4323               	;
 4324               	; }doc
 4325               	
 4326               	  ; XXX 7 bytes:
 4327 0edd C90C      	  _literal names_bank
 4328 0edf 9F0E      	  dw store_bank_
 4329 0ee1 C00A      	  dw semicolon_s_
 4330               	
 4331               	; ----------------------------------------------
 4332 0ee3 650C      	  _colon_header nfa_to_cfa_,"NFA>CFA"
 4333               	
 4334 0ee5 8306 04   	  _literal 4
 4335 0ee8 D20D CB0E 	  dw minus_,fetch_n_
 4336 0eec C00A      	  dw semicolon_s_
 4337               	
 4338               	; ----------------------------------------------
 4339               	; doc{
 4340               	;
 4341               	; nfa>string  ( nfa -- ca len )
 4342               	;
 4343               	; }doc
 4344               	
 4345 0eee 650C      	  _colon_header nfa_to_string_,"NFA>STRING"
 4346               	
 4347 0ef0 C90C 9806 	  _names_bank
 4348 0ef4 0710      	  dw count_
 4349 0ef6 8306 1F   	  _literal max_word_length_bit_mask
 4350 0ef9 500A      	  dw and_
 4351 0efb EA06      	  dw save_string_
 4352 0efd C50C 9806 	  _default_bank
 4353 0f01 C00A      	  dw semicolon_s_
 4354               	
 4355               	; ----------------------------------------------
 4356 0f03 650C      	  _colon_header store_csp_,"!CSP"
 4357               	
 4358 0f05 9D0A 3C0D 	  dw sp_fetch_,csp_,store_
 4358      490C 
 4359 0f0b C00A      	  dw semicolon_s_
 4360               	
 4361               	; ----------------------------------------------
 4362 0f0d 650C      	  _colon_header question_error_,"?ERROR"
 4363               	
 4364 0f0f D90B      	  dw swap_
 4365 0f11 6007 190F 	  dw zero_branch_,question_error.no_error
 4366 0f15 8013      	  dw error_
 4367 0f17 C00A      	  dw semicolon_s_
 4368               	
 4369               	question_error.no_error:
 4370 0f19 D40B      	  dw drop_
 4371 0f1b C00A      	  dw semicolon_s_
 4372               	
 4373               	; ----------------------------------------------
 4374 0f1d 650C      	  _colon_header comp_question_,"COMP?"
 4375               	
 4376 0f1f 300D 1A0C 	  dw state_,fetch_
 4377 0f23 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 80


 4378               	
 4379               	; ----------------------------------------------
 4380 0f25 650C      	  _colon_header question_comp_,"?COMP"
 4381               	
 4382 0f27 1D0F 570B 	  dw comp_question_,zero_equals_
 4383 0f2b 8306 110D 	  _question_error error.compilation_only
 4383      0F
 4384 0f30 C00A      	  dw semicolon_s_
 4385               	
 4386               	; ----------------------------------------------
 4387 0f32 650C      	  _colon_header question_exec_,"?EXEC"
 4388               	
 4389 0f34 1D0F      	  dw comp_question_
 4390 0f36 8306 120D 	  _question_error error.execution_only
 4390      0F
 4391 0f3b C00A      	  dw semicolon_s_
 4392               	
 4393               	; ----------------------------------------------
 4394               	.if 1
 4395               	  ; XXX TODO -- remove when the security is removed
 4396 0f3d 650C      	  _colon_header question_pairs_,"?PAIRS"
 4397               	
 4398 0f3f DC0D      	  dw not_equals_
 4399 0f41 8306 130D 	  _question_error error.conditionals_not_paired
 4399      0F
 4400 0f46 C00A      	  dw semicolon_s_
 4401               	.endif
 4402               	
 4403               	; ----------------------------------------------
 4404 0f48 650C      	  _colon_header question_csp_,"?CSP"
 4405               	
 4406 0f4a 9D0A 3C0D 	  dw sp_fetch_,csp_,fetch_,not_equals_
 4406      1A0C DC0D 
 4407 0f52 8306 140D 	  _question_error error.definition_not_finished
 4407      0F
 4408 0f57 C00A      	  dw semicolon_s_
 4409               	
 4410               	; ----------------------------------------------
 4411 0f59 650C      	  _colon_header question_loading_,"?LOADING"
 4412               	
 4413 0f5b 1E0D 1A0C 	  dw blk_,fetch_,zero_equals_
 4413      570B 
 4414 0f61 8306 160D 	  _question_error error.loading_only
 4414      0F
 4415 0f66 C00A      	  dw semicolon_s_
 4416               	
 4417               	; ----------------------------------------------
 4418 0f68 650C      	  _colon_header compile_,"COMPILE"
 4419               	
 4420 0f6a 250F      	  dw question_comp_
 4421 0f6c FF0A E00B 	  dw from_r_,dup_,two_plus_,to_r_,fetch_,compile_comma_
 4421      5E0D F00A 
 4421      1A0C BE0D 
 4422 0f78 C00A      	  dw semicolon_s_
 4423               	
 4424               	; ----------------------------------------------
 4425 0f7a 650C      	  _colon_header postpone_,"POSTPONE",immediate
GAS LISTING solo_forth.z80s 			page 81


 4426               	
 4427               	; doc{
 4428               	;
 4429               	; postpone ( "name" -- )  \ ANS Forth, C I
 4430               	;
 4431               	; Skip leading space delimiters. Parse name delimited by a
 4432               	; space. Find name. Append the compilation semantics of _name_ to
 4433               	; the current definition.
 4434               	;
 4435               	; }doc
 4436               	
 4437 0f7c 7919      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 4438 0f7e E00B 8919 	  dw dup_,question_defined_ ; error if not found
 4439 0f82 6D0B      	  dw zero_less_than_ ; non-immediate word?
 4440 0f84 6007 8C0F 	  dw zero_branch_,postpone.end
 4441               	  ; Non-immediate word.
 4442 0f88 680F 680F 	  dw compile_,compile_ ; compile `compile`
 4443               	postpone.end:
 4444 0f8c BE0D      	  dw compile_comma_
 4445 0f8e C00A      	  dw semicolon_s_
 4446               	
 4447               	; ----------------------------------------------
 4448 0f90 650C      	  _colon_header left_bracket_,"[",immediate
 4449               	
 4450 0f92 300D FD0B 	  dw state_,off_
 4451 0f96 C00A      	  dw semicolon_s_
 4452               	
 4453               	; ----------------------------------------------
 4454 0f98 650C      	  _colon_header right_bracket_,"]"
 4455               	
 4456 0f9a 300D 070C 	  dw state_,on_
 4457 0f9e C00A      	  dw semicolon_s_
 4458               	
 4459               	; ----------------------------------------------
 4460 0fa0 650C      	  _colon_header smudge_,"SMUDGE"
 4461               	
 4462               	
 4463               	; doc{
 4464               	;
 4465               	; smudge  ( -- )
 4466               	;
 4467               	; Toggle the "smudge bit" in a definitions' name field. This
 4468               	; prevents an uncompleted definition from being found during
 4469               	; dictionary searches, until compiling is completed without
 4470               	; error.
 4471               	;
 4472               	; }doc
 4473               	
 4474 0fa2 460E      	  dw latest_
 4475 0fa4 8306 20   	  _literal smudge_bit_mask
 4476               	  ; XXX TODO factor `toggle-names'?
 4477 0fa7 C90C 9806 	  _names_bank
 4478 0fab 110C      	  dw toggle_
 4479 0fad C50C 9806 	  _default_bank
 4480 0fb1 C00A      	  dw semicolon_s_
 4481               	
 4482               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 82


 4483 0fb3 650C      	  _colon_header hex_,"HEX"
 4484               	
 4485 0fb5 8306 10   	  _literal 0x10
 4486 0fb8 330D 490C 	  dw base_,store_
 4487 0fbc C00A      	  dw semicolon_s_
 4488               	
 4489               	; ----------------------------------------------
 4490 0fbe 650C      	  _colon_header decimal_,"DECIMAL"
 4491               	
 4492 0fc0 8306 0A   	  _literal 0x0A
 4493 0fc3 330D 490C 	  dw base_,store_
 4494 0fc7 C00A      	  dw semicolon_s_
 4495               	
 4496               	; ----------------------------------------------
 4497 0fc9 650C      	  _colon_header paren_semicolon_code_,"(;CODE)"
 4498               	
 4499               	; doc{
 4500               	;
 4501               	; (;code)  ( -- )
 4502               	;
 4503               	; The run-time procedure compiled by `;code`. Rewrite the code
 4504               	; field of the most recently defined word to point to the
 4505               	; following machine code sequence.
 4506               	;
 4507               	; }doc
 4508               	
 4509               	; : (;code)       --
 4510               	;   r>        \ Pop the address of the next instruction off the return stack,
 4511               	;             \ which is the starting address of the run-time code routine.
 4512               	;   latest    \ Get the name field address of the word under construction.
 4513               	;   nfa>cfa ! \ Find its code field address and store in it the address of
 4514               	;             \ the code routine to be executed at run-time.
 4515               	;   ;
 4516               	
 4517 0fcb FF0A 460E 	  dw from_r_,latest_,nfa_to_cfa_,store_
 4517      E30E 490C 
 4518 0fd3 C00A      	  dw semicolon_s_
 4519               	
 4520               	; ----------------------------------------------
 4521 0fd5 650C      	  _colon_header semicolon_code_,";CODE",immediate
 4522               	
 4523               	; XXX TODO -- documentation
 4524               	; doc{
 4525               	;
 4526               	; ;code  ( -- )
 4527               	;
 4528               	; Stop compilation and terminate a new defining word by
 4529               	; compiling the run-time routine `(;code)`.  Assemble the
 4530               	; assembly mnemonics following.
 4531               	;
 4532               	; }doc
 4533               	
 4534 0fd7 480F      	  dw question_csp_
 4535 0fd9 680F C90F 	  dw compile_,paren_semicolon_code_
 4536 0fdd 8205      	  dw asm_
 4537 0fdf 900F A00F 	  dw left_bracket_,smudge_
 4538 0fe3 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 83


 4539               	
 4540               	; ----------------------------------------------
 4541 0fe5 650C      	  _colon_header does_,"DOES>",immediate
 4542               	
 4543 0fe7 680F C90F 	  dw compile_,paren_semicolon_code_
 4544 0feb 8306 CD   	  _literal 0xCD ; Z80 opcode for "call"
 4545 0fee C60D      	  dw c_comma_ ; compile it
 4546 0ff0 8D06 F80F 	  dw lit_,do_does,comma_ ; compile the routine address
 4546      B20D 
 4547 0ff6 C00A      	  dw semicolon_s_
 4548               	
 4549               	do_does:
 4550               	  ; Save the IP in the return stack.
 4551 0ff8 2A10 00   	  ld hl,(return_stack_pointer)
 4552 0ffb 2B        	  dec hl
 4553 0ffc 70        	  ld (hl),b
 4554 0ffd 2B        	  dec hl
 4555 0ffe 71        	  ld (hl),c
 4556 0fff 2210 00   	  ld (return_stack_pointer),hl
 4557               	  ; Pop the address of the run-time routine
 4558               	  ; (put there bye `call do_does`) in IP.
 4559 1002 C1        	  pop bc ; new Forth IP
 4560               	  ; Push the pfa.
 4561 1003 13        	  inc de  ; de=pfa
 4562 1004 D5        	  push de
 4563               	  ; Execute the run-time routine.
 4564 1005 DDE9      	  _jp_next
 4565               	
 4566               	; ----------------------------------------------
 4567 1007 0910      	  _code_header count_,"COUNT"
 4568               	
 4569               	  ; Code from DZX-Forth.
 4570               	
 4571 1009 D1        	  pop de
 4572 100a 1A        	  ld a,(de)
 4573 100b 13        	  inc de
 4574 100c D5        	  push de
 4575 100d C387 06   	  jp push_a
 4576               	
 4577               	; ----------------------------------------------
 4578 1010 650C      	  _colon_header bounds_,"BOUNDS"
 4579               	
 4580 1012 CC0B 810B 	  dw over_,plus_,swap_
 4580      D90B 
 4581 1018 C00A      	  dw semicolon_s_
 4582               	
 4583               	; ----------------------------------------------
 4584 101a 650C      	  _colon_header type_,"TYPE"
 4585               	
 4586               	  ; XXX TODO Rewrite in Z80, after the ROM routine.
 4587               	
 4588 101c 2E0E      	  dw question_dup_
 4589 101e 6007 3210 	  dw zero_branch_,type.empty_string
 4590               	
 4591 1022 1010      	  dw bounds_
 4592 1024 AD07      	  dw paren_do_
 4593               	type.do:
GAS LISTING solo_forth.z80s 			page 84


 4594 1026 4408 230C 	  dw i_,c_fetch_,emit_
 4594      EC08 
 4595 102c 7807 2610 	  dw paren_loop_,type.do ; loop
 4596 1030 C00A      	  dw semicolon_s_
 4597               	
 4598               	type.empty_string:
 4599 1032 D40B      	  dw drop_
 4600               	type.end:
 4601 1034 C00A      	  dw semicolon_s_
 4602               	
 4603               	; ----------------------------------------------
 4604               	
 4605 1036 3810      	  _code_header minus_trailing_,"-TRAILING"
 4606               	
 4607 1038 D1        	  pop de
 4608 1039 E1        	  pop hl
 4609 103a E5        	  push hl
 4610 103b 19        	  add hl,de
 4611 103c EB        	  ex de,hl
 4612               	  ; de = address after the string
 4613               	  ; hl = length of the string
 4614               	minus_trailing.begin:
 4615 103d 7D        	  ld a,l
 4616 103e B4        	  or h ; exhausted?
 4617 103f CA5E 05   	  jp z,push_hl
 4618 1042 1B        	  dec de ; next char
 4619 1043 1A        	  ld a,(de)
 4620 1044 FE20      	  cp ' ' ; space?
 4621 1046 C25E 05   	  jp nz,push_hl
 4622 1049 2B        	  dec hl ; new length
 4623 104a C33D 10   	  jp minus_trailing.begin ; repeat
 4624               	
 4625               	; ----------------------------------------------
 4626               	  ;_colon_header paren_dot_quote_,"(.\")" ; XXX FIXME as error
 4627 104d 650C      	  _colon_header paren_dot_quote_,"(.\x22)"
 4628               	
 4629 104f 4F0B 0710 	  dw r_fetch_,count_ ; ( ca len )
 4630 1053 E00B 570D 	  dw dup_,one_plus_,from_r_,plus_,to_r_ ; skip the string after return
 4630      FF0A 810B 
 4630      F00A 
 4631 105d 1A10      	  dw type_
 4632 105f C00A      	  dw semicolon_s_
 4633               	
 4634               	; ----------------------------------------------
 4635               	  ;_colon_header dot_quote_,".\"",immediate ; XXX FIXME as error
 4636 1061 650C      	  _colon_header dot_quote_,".\x22",immediate
 4637               	
 4638 1063 8306 22   	  _literal '"'
 4639 1066 A711      	  dw parse_ ; ( ca len )
 4640 1068 1D0F      	  dw comp_question_
 4641 106a 6007 7610 	  dw zero_branch_,dot_quote.interpreting
 4642               	  ; Compiling.
 4643 106e 680F 4D10 	  dw compile_,paren_dot_quote_,s_comma_
 4643      A00D 
 4644 1074 3E1D      	  dw exit_
 4645               	dot_quote.interpreting:
 4646 1076 1A10      	  dw type_
GAS LISTING solo_forth.z80s 			page 85


 4647 1078 C00A      	  dw semicolon_s_
 4648               	
 4649               	; ----------------------------------------------
 4650 107a 1C14      	  _variable_header span_,"SPAN"
 4651               	
 4652               	; doc{
 4653               	;
 4654               	; span  ( -- a )  \ Forth-83
 4655               	;
 4656               	; The address of a variable containing the count of characters
 4657               	; actually received and stored by the last execution of
 4658               	; `expect`.
 4659               	;
 4660               	; }doc
 4661               	
 4662 107c 0000      	  dw 0
 4663               	
 4664               	; ----------------------------------------------
 4665 107e 650C      	  _colon_header accept_,"ACCEPT"
 4666               	
 4667               	; doc{
 4668               	;
 4669               	; accept  ( ca1 len1 -- len2 )  \ ANS Forth
 4670               	;
 4671               	; }doc
 4672               	
 4673               	  ; XXX TODO -- not finished
 4674               	
 4675               	  ; dw span_,off_
 4676               	  ; dw question_dup_
 4677               	  ; dw zero_branch_,accept.end
 4678               	
 4679               	  ; dw swap_ ; ( len ca )
 4680               	; accept.begin: ; ( len ca )
 4681               	  ; dw key_,dup_ ; ( len ca c c )
 4682               	
 4683               	  ; dw c_lit_
 4684               	  ; db delete_char
 4685               	  ; dw equals_ ; delete key?
 4686               	  ; dw zero_branch_,accept.maybe_carriage_return
 4687               	  ; ; Delete key ( len ca c )
 4688               	  ; dw drop_
 4689               	  ; dw dup_,i_,equals_ ; cursor at the start position?
 4690               	  ; dw dup_ ; ( len ca f f )
 4691               	  ; ; XXX TODO adapt this when true=-1
 4692               	  ; dw from_r_,two_minus_,plus_,to_r_ ; update the index
 4693               	  ; dw question_branch_,accept.loop ; nothing to delete
 4694               	  ; ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4695               	  ; dw c_lit_
 4696               	  ; db backspace_char
 4697               	  ; dw branch_,accept.emit
 4698               	
 4699               	; accept.maybe_carriage_return: ; ( len ca c )
 4700               	  ; dw dup_
 4701               	  ; dw c_lit_
 4702               	  ; db carriage_return_char
 4703               	  ; dw equals_ ; carriage return?
GAS LISTING solo_forth.z80s 			page 86


 4704               	  ; dw zero_branch_,accept.ordinary_key
 4705               	  ; ; Carriage return ( len ca c )
 4706               	  ; dw exhaust_
 4707               	  ; dw drop_,b_l_
 4708               	  ; dw branch_,accept.emit
 4709               	
 4710               	; accept.ordinary_key: ; ( len ca c )
 4711               	  ; dw dup_
 4712               	; accept.store: ; ( len ca c c | len ca c 0 )
 4713               	  ; dw i_,c_store_
 4714               	; accept.emit: ; ( len ca c )
 4715               	  ; dw emit_
 4716               	
 4717               	  ; ; ( len ca )
 4718               	  ; dw i_,over_,minus_,span_,store_ ; update `span`
 4719               	  ; dw paren_loop_,accept.do
 4720               	; accept.end:
 4721               	  ; dw drop_
 4722               	  ; dw span_,fetch_
 4723 1080 C00A      	  dw semicolon_s_
 4724               	
 4725               	; ----------------------------------------------
 4726 1082 650C      	  _colon_header expect_,"EXPECT"
 4727               	
 4728               	; doc{
 4729               	;
 4730               	; expect  ( ca len -- )  \ Forth-83
 4731               	;
 4732               	; Transfer characters from the terminal to address _ca_, until a
 4733               	; "return" or _len_ characters have been received.
 4734               	;
 4735               	; The transfer begins at addr proceeding towards higher
 4736               	; addresses one byte per character until either a "return" is
 4737               	; received or until _len_ characters have been transferred.
 4738               	
 4739               	; No more than _len_ characters will be stored.  The "return" is
 4740               	; not stored into memory.  No characters are received or
 4741               	; transferred if _len_ is zero.  All characters actually
 4742               	; received and stored into memory will be displayed, with the
 4743               	; "return" displaying as a space.
 4744               	
 4745               	; ; }doc
 4746               	
 4747 1084 7A10 FD0B 	  dw span_,off_
 4748 1088 2E0E      	  dw question_dup_
 4749 108a 6007 F910 	  dw zero_branch_,expect.end
 4750               	
 4751 108e 1010 C40B 	  dw bounds_,tuck_ ; ( ca ca+len ca )
 4752 1092 AD07      	  dw paren_do_
 4753               	expect.do: ; ( ca )
 4754 1094 7609 E00B 	  dw xkey_,dup_ ; ( ca c c )
 4755               	
 4756 1098 8306 0C   	  _literal delete_char
 4757 109b E90D      	  dw equals_ ; delete key?
 4758 109d 6007 BE10 	  dw zero_branch_,expect.maybe_carriage_return
 4759               	  ; Delete key ( ca c )
 4760 10a1 D40B      	  dw drop_
GAS LISTING solo_forth.z80s 			page 87


 4761 10a3 E00B 4408 	  dw dup_,i_,equals_ ; cursor at the start position?
 4761      E90D 
 4762               	.if true=(-1)
 4763               	  ; XXX TODO simplify
 4764               	  dw abs_
 4765               	.endif
 4766 10a9 E00B      	  dw dup_ ; ( ca f f )
 4767 10ab FF0A 710D 	  dw from_r_,two_minus_,plus_,to_r_ ; update the index
 4767      810B F00A 
 4768 10b3 6C07 EB10 	  dw question_branch_,expect.loop ; nothing to delete
 4769               	  ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4770 10b7 8306 08   	  _literal backspace_char
 4771 10ba 5707 E910 	  dw branch_,expect.emit
 4772               	
 4773               	expect.maybe_carriage_return: ; ( ca c )
 4774 10be E00B      	  dw dup_
 4775 10c0 8306 0D   	  _literal carriage_return_char
 4776 10c3 E90D      	  dw equals_ ; carriage return?
 4777 10c5 6007 D310 	  dw zero_branch_,expect.control_char
 4778               	  ; Carriage return ( ca c )
 4779 10c9 D80A      	  dw exhaust_
 4780 10cb D40B E10C 	  dw drop_,b_l_
 4781 10cf 5707 E910 	  dw branch_,expect.emit
 4782               	
 4783               	expect.control_char: ; ( ca c )
 4784 10d3 E00B E10C 	  dw dup_,b_l_,less_than_ ; control char?
 4784      F60D 
 4785 10d9 6007 E310 	  dw zero_branch_,expect.ordinary_key
 4786               	  ; Control char ( ca c )
 4787 10dd D40B      	  dw drop_
 4788 10df 5707 9410 	  dw branch_,expect.do
 4789               	
 4790               	expect.ordinary_key: ; ( ca c )
 4791 10e3 E00B      	  dw dup_
 4792               	expect.store: ; ( ca c c | ca c 0 )
 4793 10e5 4408 520C 	  dw i_,c_store_
 4794               	expect.emit: ; ( ca c )
 4795 10e9 EC08      	  dw emit_
 4796               	
 4797               	expect.loop: ; ( ca )
 4798 10eb 4408 CC0B 	  dw i_,over_,minus_,span_,store_ ; update `span`
 4798      D20D 7A10 
 4798      490C 
 4799 10f5 7807 9410 	  dw paren_loop_,expect.do
 4800               	expect.end:
 4801 10f9 D40B      	  dw drop_
 4802 10fb C00A      	  dw semicolon_s_
 4803               	
 4804               	; ----------------------------------------------
 4805 10fd 650C      	  _colon_header query_,"QUERY"
 4806               	
 4807               	; doc{
 4808               	;
 4809               	; query  ( -- )  \ fig-Forth
 4810               	;
 4811               	; XXX TODO description
 4812               	;
GAS LISTING solo_forth.z80s 			page 88


 4813               	; Make the user input device the input source. Receive input
 4814               	; into the terminal input buffer, replacing any previous
 4815               	; contents. Make the result, whose address is returned by `tib`,
 4816               	; the input buffer. `>in` to zero.
 4817               	;
 4818               	; Input 80 characters of text (or until a "return") from the
 4819               	; operators terminal. Text is positioned at the address
 4820               	; contained in TIB with IN set to zero.
 4821               	;
 4822               	; Transfer characters from the terminal to address contained in
 4823               	; returned by `tib`, until a "return" or the count contained in
 4824               	; the `#tib` variable have been received. One or more nulls are
 4825               	; added at the end of the text.
 4826               	;
 4827               	; }doc
 4828               	
 4829 10ff 450D E00B 	  dw tib_,dup_
 4830 1103 490D 1A0C 	  dw number_tib_,fetch_
 4831 1107 E70B 5D11 	  dw two_dup_,blank_ ; clean the input buffer
 4832 110b 8210      	  dw expect_
 4833 110d 7A10 1A0C 	  dw span_,fetch_,plus_,stream_end_
 4833      810B FC17 
 4834 1115 210D FD0B 	  dw to_in_,off_
 4835 1119 C00A      	  dw semicolon_s_
 4836               	
 4837               	; ----------------------------------------------
 4838 111b 650C      	  _colon_header x_,0,immediate
 4839               	
 4840               	; doc{
 4841               	
 4842               	; x  ( -- )
 4843               	
 4844               	; This is pseudonym for the "null" or dictionary entry for a
 4845               	; name of one character of ascii null. It is the execution
 4846               	; procedure to terminate interpretation of a line of text from
 4847               	; the terminal or within a disk buffer, as both buffers always
 4848               	; have a null word at the end.
 4849               	;
 4850               	; In the fig-Forth model a null character is used to detect the
 4851               	; end of the buffers.  Therefore the scanning words must treat
 4852               	; the null character as a special unconditional delimiter, and
 4853               	; do other tricks in order to simulate the null character found
 4854               	; is a parsed null word.
 4855               	;
 4856               	; In Solo Forth the scanning words does not treat the null char
 4857               	; apart; instead, an actual null word (a null character
 4858               	; surrounded by spaces) is put after the buffers (disk buffers
 4859               	; and `tib`). Therefore the null word is parsed normally as any
 4860               	; other word. No need to treat the null character as a special
 4861               	; delimiter. This new method is compatible with the original
 4862               	; fig-Forth parsing words.
 4863               	
 4864               	; }doc
 4865               	
 4866 111d 1E0D 1A0C 	  dw blk_,fetch_ ; input stream from disk?
 4867 1121 6007 3D11 	  dw zero_branch_,x.exit ; if not, branch
 4868               	  ; From disk.
GAS LISTING solo_forth.z80s 			page 89


 4869 1125 C90C 1E0D 	  dw one_,blk_,plus_store_ ; next disk buffer
 4869      F00B 
 4870 112b 210D FD0B 	  dw to_in_,off_ ; clear `in`, preparing parsing of input text
 4871               	
 4872               	  ; XXX WARNING -- The following check of the last block is
 4873               	  ; specific for 2 blocks per screen; the generic slower check
 4874               	  ; would be `blk @ b/scr 1- and`.
 4875               	
 4876 112f 1E0D 1A0C 	  dw blk_,fetch_,one_,and_ ; was it the last block of the screen?
 4876      C90C 500A 
 4877 1137 6C07 3F11 	  dw question_branch_,x.end ; if not, branch
 4878               	  ; Last block of the screen.
 4879 113b 320F      	  dw question_exec_ ; error if not executing
 4880               	x.exit:
 4881               	
 4882               	  ; The top item on the return stack is thrown away.  The interpreter
 4883               	  ; will not continue to execute the `?stack` instruction that follows
 4884               	  ; `execute` in `interpret`, but will return to the next higher level
 4885               	  ; of nesting and execute the next word after `interpret` in the Forth
 4886               	  ; loop.  This is when the familiar "ok" message is displayed on the
 4887               	  ; terminal, prompting the operator for the next line of commands.
 4888               	
 4889 113d 1C0B      	  dw r_drop_
 4890               	;  dw lit_,7,border_ ; XXX INFORMER
 4891               	
 4892               	x.end:
 4893 113f C00A      	  dw semicolon_s_
 4894               	
 4895               	; ----------------------------------------------
 4896 1141 4311      	  _code_header fill_,"FILL"
 4897               	
 4898 1143 D1        	  pop de ; e = char
 4899               	fill.e:
 4900 1144 69        	  ld l,c
 4901 1145 60        	  ld h,b ; the Forth IP
 4902 1146 C1        	  pop bc ; count
 4903 1147 E3        	  ex (sp),hl ; save the Forth IP
 4904               	fill.do:
 4905 1148 78        	  ld a,b
 4906 1149 B1        	  or c
 4907 114a CA53 11   	  _jump_z fill.end
 4908 114d 73        	  ld (hl),e
 4909 114e 23        	  inc hl
 4910 114f 0B        	  dec bc
 4911 1150 C348 11   	  jp fill.do
 4912               	fill.end:
 4913 1153 C1        	  pop bc ; restore the Forth IP
 4914 1154 DDE9      	  _jp_next
 4915               	
 4916               	; ----------------------------------------------
 4917 1156 5811      	  _code_header erase_,"ERASE"
 4918               	
 4919 1158 1E00      	  ld e,0
 4920 115a C344 11   	  jp fill.e
 4921               	
 4922               	; ----------------------------------------------
 4923 115d 5F11      	  _code_header blank_,"BLANK"
GAS LISTING solo_forth.z80s 			page 90


 4924               	
 4925 115f 1E20      	  ld e,space_char
 4926 1161 C344 11   	  jp fill.e
 4927               	
 4928               	; ----------------------------------------------
 4929 1164 650C      	  _colon_header hold_,"HOLD"
 4930               	
 4931 1166 8D06 FFFF 	  dw lit_,-1,hld_,plus_store_ ; decrement `hld`
 4931      420D F00B 
 4932 116e 420D 1A0C 	  dw hld_,fetch_,c_store_ ; store character into `pad`
 4932      520C 
 4933 1174 C00A      	  dw semicolon_s_
 4934               	
 4935               	; ----------------------------------------------
 4936 1176 650C      	  _colon_header pad_,"PAD"
 4937               	
 4938 1178 900D      	  dw here_
 4939 117a 8306 44   	  _literal 0x44
 4940 117d 810B      	  dw plus_
 4941 117f C00A      	  dw semicolon_s_
 4942               	
 4943               	; ----------------------------------------------
 4944 1181 650C      	  _colon_header stream_,"STREAM"
 4945               	
 4946               	; doc{
 4947               	;
 4948               	; stream  ( -- ca )
 4949               	;
 4950               	; ca = current parsing position in the stream source
 4951               	;
 4952               	; }doc
 4953               	
 4954 1183 1E0D 1A0C 	  dw blk_,fetch_,question_dup_ ; from disk?
 4954      2E0E 
 4955 1189 6007 9311 	  dw zero_branch_,stream.terminal
 4956 118d 6818      	  dw block_ ; from disk
 4957 118f 5707 9511 	  dw branch_,stream.end
 4958               	stream.terminal:
 4959 1193 450D      	  dw tib_ ; from terminal
 4960               	stream.end:
 4961 1195 210D 1A0C 	  dw to_in_,fetch_,plus_
 4961      810B 
 4962 119b C00A      	  dw semicolon_s_
 4963               	
 4964               	; ----------------------------------------------
 4965 119d 650C      	  _colon_header parsed_,"PARSED"
 4966               	
 4967               	; doc{
 4968               	;
 4969               	; parsed  ( len -- )
 4970               	;
 4971               	; Add the given _len_ plus 1 to `>in`.
 4972               	;
 4973               	; }word
 4974               	
 4975 119f 570D 210D 	  dw one_plus_,to_in_,plus_store_
 4975      F00B 
GAS LISTING solo_forth.z80s 			page 91


 4976 11a5 C00A      	  dw semicolon_s_
 4977               	
 4978               	; ----------------------------------------------
 4979 11a7 650C      	  _colon_header parse_,"PARSE"
 4980               	
 4981               	; doc{
 4982               	;
 4983               	; parse  ( c "text<c>" -- ca len )  \ ANS Forth
 4984               	;
 4985               	; Parse _text_ delimited by the delimiter char _c_.
 4986               	;
 4987               	; ca = address of the parsed string, within the input buffer
 4988               	; len = length of the parsed string
 4989               	;
 4990               	; If the parse area was empty, the resulting string has a zero length.
 4991               	;
 4992               	; }doc
 4993               	
 4994 11a9 8111 D90B 	  dw stream_,swap_,scan_,dup_,parsed_
 4994      BE08 E00B 
 4994      9D11 
 4995 11b3 C00A      	  dw semicolon_s_
 4996               	
 4997               	; ----------------------------------------------
 4998 11b5 650C      	  _colon_header parse_name_,"PARSE-NAME"
 4999               	
 5000               	; doc{
 5001               	;
 5002               	; parse-name  ( "name"  -- ca len )
 5003               	;
 5004               	; }word
 5005               	
 5006 11b7 8111 E00B 	  dw stream_,dup_,to_r_ ; ( ca1 )
 5006      F00A 
 5007 11bd E10C D408 	  dw b_l_,skip_ ; ( ca2 )
 5008 11c1 E00B FF0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
 5008      D20D 210D 
 5008      F00B 
 5009               	  ; XXX TODO factor of `parse`?:
 5010 11cb E10C BE08 	  dw b_l_,scan_ ; ( ca len )
 5011 11cf E00B 9D11 	  dw dup_,parsed_
 5012 11d3 C00A      	  dw semicolon_s_
 5013               	
 5014               	; ----------------------------------------------
 5015 11d5 650C      	  _colon_header word_,"WORD"
 5016               	
 5017               	; doc{
 5018               	;
 5019               	; word  ( c "<c...>text<c>" -- ca )  \ ANS Forth
 5020               	;
 5021               	; c = delimiter char
 5022               	;
 5023               	; Skip leading _c_ delimiters from the input stream.  Parse the
 5024               	; next text characters from the input stream, until a delimiter
 5025               	; _c_ is found, storing the packed character string beginning at
 5026               	; _ca_, as a counted string (the character count in the first
 5027               	; byte), and with one blank at the end.
GAS LISTING solo_forth.z80s 			page 92


 5028               	;
 5029               	; }doc
 5030               	
 5031 11d7 8111      	  dw stream_ ; ( c a1 )
 5032 11d9 E00B F00A 	  dw dup_,to_r_
 5033 11dd CC0B D408 	  dw over_,skip_ ; ( c a2 )
 5034               	.if  0
 5035               	  dw hex_
 5036               	  _echo 'In word after skip:' ; XXX INFORMER
 5037               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5038               	  dw key_,drop_ ; XXX INFORMER
 5039               	.endif
 5040 11e1 E00B FF0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
 5040      D20D 210D 
 5040      F00B 
 5041               	  ; XXX TODO factor of `parse`:
 5042 11eb D90B BE08 	  dw swap_,scan_ ; ( a2 len )
 5043               	.if  0
 5044               	  dw hex_
 5045               	  _echo 'In word after scan:' ; XXX INFORMER
 5046               	  dw cr_,two_dup_,type_ ; XXX INFORMER
 5047               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5048               	  dw key_,drop_ ; XXX INFORMER
 5049               	.endif
 5050 11ef E00B 570D 	  dw dup_,one_plus_,to_in_,plus_store_
 5050      210D F00B 
 5051               	
 5052 11f7 900D      	  dw here_
 5053 11f9 8306 21   	  _literal max_word_length+2
 5054 11fc 5D11      	  dw blank_
 5055               	
 5056 11fe E00B 900D 	  dw dup_,here_,c_store_ ; count byte
 5056      520C 
 5057 1204 900D 570D 	  dw here_,one_plus_ ; destination
 5058 1208 D90B      	  dw swap_ ; count
 5059 120a E609      	  dw cmove_ ; move the word
 5060 120c 900D      	  dw here_
 5061               	
 5062               	  .if 0 ; XXX OLD
 5063               	    ;dw space_ ; XXX INFORMER
 5064               	    ;dw depth_,dot_ ; XXX INFORMER
 5065               	    ;_echo 'blk ' ; XXX INFORMER
 5066               	    ;dw blk_,fetch_,dot_ ; XXX INFORMER
 5067               	    ;_echo 'in ' ; XXX INFORMER
 5068               	    ;dw in_,fetch_,dot_ ; XXX INFORMER
 5069               	    ; dw here_,count_,one_,ink_,type_,zero_,ink_,space_ ; XXX INFORMER
 5070               	    ;dw key_,drop_ ; XXX INFORMER
 5071               	  .endif
 5072               	
 5073 120e C00A      	  dw semicolon_s_
 5074               	; ----------------------------------------------
 5075 1210 650C      	  _colon_header paren_number_,"(NUMBER)"
 5076               	
 5077               	; doc{
 5078               	;
 5079               	; (number)  ( d1 ca1 -- d2 ca2 )  \ fig-Forth
 5080               	;
GAS LISTING solo_forth.z80s 			page 93


 5081               	; Convert the ASCII text beginning at _ca1+l_ with regard to
 5082               	; `base`. The new value is accumulated into double number _d1_,
 5083               	; being left as _d2_.  _ca2_ is the address of the first
 5084               	; unconvertable digit. Used by `number`.
 5085               	;
 5086               	; }doc
 5087               	
 5088               	paren_number.begin: ; begin
 5089 1212 570D      	  dw one_plus_ ; address of the next digit
 5090 1214 E00B F00A 	  dw dup_,to_r_ ; save the address
 5091 1218 230C      	  dw c_fetch_ ; get the digit
 5092               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5093               	  ;dw dup_,dup_,cr_,dot_,emit_; XXX INFORMER
 5094 121a 330D 1A0C 	  dw base_,fetch_,digit_ ; convert the digit
 5094      4608 
 5095 1220 6007 4E12 	  dw zero_branch_,paren_number.end ; while
 5096 1224 D90B      	  dw swap_ ; get the high order part of d1 to the top.
 5097 1226 330D 1A0C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5097      060A 
 5098 122c D40B      	  dw drop_ ; drop the high order part of the product
 5099 122e 1E0E      	  dw rot_ ; move the low order part of d1 to top of stack
 5100 1230 330D 1A0C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5100      060A 
 5101 1236 890B      	  dw d_plus_ ; accumulate result into d1
 5102 1238 360D 1A0C 	  dw dpl_,fetch_,one_plus_ ; is DPL other than -1?
 5102      570D 
 5103 123e 6007 4812 	  dw zero_branch_,paren_number.decimal_point_done
 5104               	  ; DPL is not -1, a decimal point was encountered
 5105 1242 C90C 360D 	  dw one_,dpl_,plus_store_ ; increment DPL, one more digit to right of decimal point
 5105      F00B 
 5106               	paren_number.decimal_point_done:
 5107 1248 FF0A      	  dw from_r_ ; pop addr1+1 back to convert the next digit
 5108 124a 5707 1212 	  dw branch_,paren_number.begin ; repeat
 5109               	paren_number.end:
 5110 124e FF0A      	  dw from_r_ ; address of the first non-convertable digit, a2.
 5111 1250 C00A      	  dw semicolon_s_
 5112               	
 5113               	; ----------------------------------------------
 5114 1252 650C      	  _colon_header number_,"NUMBER"
 5115               	
 5116               	; doc{
 5117               	;
 5118               	; number  ( ca  -- d )  \ fig-Forth
 5119               	;
 5120               	; Convert a counted character string left at _ca_, to a signed
 5121               	; .double number, using the current numeric base. If a decimal
 5122               	; point is encountered in the text, its position will be given
 5123               	; in `dpl`, but no other effect occurs. If numeric conversion is
 5124               	; not possible, an error message will be given.
 5125               	;
 5126               	; }doc
 5127               	
 5128               	  ;dw cr_,dup_,count_,swap_,dot_,dot_ ; XXX INFORMER
 5129               	  ;dw dup_,count_,type_ ; XXX INFORMER
 5130 1254 C50C C50C 	  dw zero_,zero_,rot_ ; two zeros, initial value of the double number
 5130      1E0E 
 5131 125a E00B 570D 	  dw dup_,one_plus_,c_fetch_ ; get the first digit
GAS LISTING solo_forth.z80s 			page 94


 5131      230C 
 5132 1260 8306 2D   	  _literal '-'
 5133 1263 E90D      	  dw equals_ ; is it a minus sign?
 5134 1265 E00B F00A 	  dw dup_,to_r_ ; save the flag
 5135               	.if true=(-1)
 5136               	  dw abs_
 5137               	.endif
 5138 1269 810B      	  dw plus_
 5139               	  ; If the first digit is "-", the flag is 1,
 5140               	  ; and addr+1 points to the second digit.
 5141               	  ; If the first digit is not "-", the flag is
 5142               	  ; 0.  addr+0 remains the same, pointing to
 5143               	  ; the first digit.
 5144 126b 8D06 FFFF 	  dw lit_,-1 ; initial value of `dpl`
 5145               	number.begin:
 5146 126f 360D 490C 	  dw dpl_,store_
 5147 1273 1012      	  dw paren_number_ ; convert one digit after another until an invalid char occurs
 5148 1275 E00B 230C 	  dw dup_,c_fetch_ ; get the invalid digit
 5149               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5150               	  ;dw cr_,dup_,emit_; XXX INFORMER
 5151 1279 E10C E90D 	  dw b_l_,equals_ ; is it a blank?
 5152 127d 6C07 9412 	  dw question_branch_,number.a_blank
 5153               	  ; The invalid digit is not a blank.
 5154 1281 E00B 230C 	  dw dup_,c_fetch_ ; get the invalid digit again
 5155 1285 8306 2E   	  _literal '.'
 5156 1288 DC0D      	  dw not_equals_ ; not a decimal point?
 5157 128a C90C 0D0F 	  _question_error error.not_understood ; error if not
 5158               	  ; Decimal point found, set `dpl` to zero next time.
 5159 128e C50C      	  dw zero_
 5160 1290 5707 6F12 	  dw branch_,number.begin ; repeat
 5161               	number.a_blank:
 5162 1294 D40B      	  dw drop_ ; discard address
 5163 1296 FF0A      	  dw from_r_ ; pop the flag of "-" sign back
 5164 1298 6007 9E12 	  dw zero_branch_,number.end
 5165               	  ; The first digit is a "-" sign.
 5166 129c A70B      	  dw dnegate_
 5167               	number.end:
 5168 129e C00A      	  dw semicolon_s_
 5169               	
 5170               	; ----------------------------------------------
 5171 12a0 A212      	  _code_header upper_,"UPPER"
 5172               	
 5173               	; doc{
 5174               	;
 5175               	; upper  ( c -- c' )
 5176               	;
 5177               	; }doc
 5178               	
 5179 12a2 E1        	  pop hl
 5180 12a3 7D        	  ld a,l
 5181 12a4 CDAB 12   	  call upper.a
 5182 12a7 6F        	  ld l,a
 5183 12a8 C35E 05   	  jp push_hl
 5184               	
 5185               	upper.a:
 5186               	  ; Convert the ASCII char in the 'a' register to uppercase.
 5187 12ab FE61      	  cp 'a'
GAS LISTING solo_forth.z80s 			page 95


 5188 12ad D8        	  ret c
 5189 12ae FE7B      	  cp 'z'+1
 5190 12b0 D0        	  ret nc
 5191 12b1 EE20      	  xor 0x20 ; toggle bit 5
 5192 12b3 C9        	  ret
 5193               	
 5194               	; ----------------------------------------------
 5195 12b4 B612      	  _code_header uppers_,"UPPERS"
 5196               	
 5197               	; doc{
 5198               	;
 5199               	; uppers  ( ca len -- )
 5200               	;
 5201               	; }doc
 5202               	
 5203 12b6 D1        	  pop de
 5204 12b7 E1        	  pop hl
 5205               	uppers.do:
 5206 12b8 7A        	  ld a,d
 5207 12b9 B3        	  or e
 5208 12ba CA5F 05   	  jp z,next
 5209 12bd 7E        	  ld a,(hl)
 5210 12be CDAB 12   	  call upper.a
 5211 12c1 77        	  ld (hl),a
 5212 12c2 23        	  inc hl
 5213 12c3 1B        	  dec de
 5214 12c4 C3B8 12   	  jp uppers.do
 5215               	
 5216               	; ----------------------------------------------
 5217 12c7 650C      	  _colon_header defined_question_,"DEFINED?"
 5218               	
 5219               	; defined?  ( ca len -- wf )
 5220               	
 5221 12c9 3C13 BD0B 	  dw found_,nip_,zero_not_equals_
 5221      620B 
 5222 12cf C00A      	  dw semicolon_s_
 5223               	
 5224               	; ----------------------------------------------
 5225 12d1 650C      	  _colon_header undefined_question_,"UNDEFINED?"
 5226               	
 5227               	; doc{
 5228               	;
 5229               	; undefined?  ( ca len -- wf )
 5230               	;
 5231               	; }doc
 5232               	
 5233 12d3 C712 570B 	  dw defined_question_,zero_equals_
 5234 12d7 C00A      	  dw semicolon_s_
 5235               	
 5236               	; ----------------------------------------------
 5237 12d9 DB12      	  _code_header dollar_store_,"$!"
 5238               	
 5239               	  ; [Code from DZX-Forth's `packed`.]
 5240               	
 5241               	; doc{
 5242               	;
 5243               	; $!  ( ca1 len1 ca2 -- )
GAS LISTING solo_forth.z80s 			page 96


 5244               	;
 5245               	; Store the string _ca1 len1_ as a counted string at _ca2_.  The
 5246               	; source and destination strings are permitted to overlap.
 5247               	;
 5248               	; An ambiguous condition exists if _len1_ is greater than 255 or
 5249               	; the buffer at _ca2_ is less than _len1_+1 characters.
 5250               	;
 5251               	; }doc
 5252               	
 5253               	  ; XXX TODO rename? `s!`, `packed`, `pack`, `uncount`...
 5254               	
 5255 12db D9        	  exx
 5256 12dc D1        	  pop de      ; de=ca2
 5257 12dd C1        	  pop bc      ; c=len1
 5258 12de E1        	  pop hl      ; hl=ca1
 5259 12df C5        	  push bc     ; len1
 5260 12e0 D5        	  push de     ; ca2
 5261 12e1 13        	  inc  de
 5262 12e2 CD1C 05   	  call move_block
 5263 12e5 E1        	  pop hl      ; ca2
 5264 12e6 D1        	  pop de      ; e=len1
 5265 12e7 73        	  ld (hl),e
 5266 12e8 D9        	  exx
 5267 12e9 DDE9      	  _jp_next
 5268               	
 5269               	; ----------------------------------------------
 5270 12eb 650C      	  _colon_header find_,"FIND"
 5271               	
 5272               	; doc{
 5273               	;
 5274               	; find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5275               	;
 5276               	; Find the definition named in the counted string at _ca_. If
 5277               	; the definition is not found after searching all the
 5278               	; vocabularies in the search order, return _ca_ and zero.  If
 5279               	; the definition is found, return its _cfa_. If the definition
 5280               	; is immediate, also return one (1); otherwise also return
 5281               	; minus-one (-1).
 5282               	;
 5283               	; }doc
 5284               	
 5285               	  ; : find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5286               	  ;   #vocs 0 do
 5287               	  ;     context i cells + @  ?dup
 5288               	  ;     if  @ (find) ?dup if  unloop exit  then  then
 5289               	  ;   loop  false  ;
 5290               	
 5291 12ed FD0C C50C 	  dw hash_vocs_,zero_,paren_do_
 5291      AD07 
 5292               	find.do:
 5293 12f3 2A0D 4408 	  dw context_,i_,cells_,plus_,fetch_
 5293      800D 810B 
 5293      1A0C 
 5294 12fd 2E0E      	  dw question_dup_ ; a vocabulary in the search order?
 5295 12ff 6007 1113 	  dw zero_branch_,find.loop ; if not, next
 5296               	  ; valid vocabulary in the search order
 5297 1303 1A0C 6508 	  dw fetch_,paren_find_,question_dup_ ; word found in the vocabulary?
GAS LISTING solo_forth.z80s 			page 97


 5297      2E0E 
 5298 1309 6007 1113 	  dw zero_branch_,find.loop ; if not, try the next vocabulary
 5299 130d D60A 3E1D 	  dw unloop_,exit_
 5300               	find.loop:
 5301 1311 7807 F312 	  dw paren_loop_,find.do,false_
 5301      D10C 
 5302 1317 C00A      	  dw semicolon_s_
 5303               	
 5304               	; ----------------------------------------------
 5305 1319 1C14      	  _variable_header find_dollar_,"FIND$"
 5306               	
 5307               	  ; XXX TODO use an unused address above `pad` instead?
 5308               	  ; XXX TODO rename to `word$`?
 5309               	  ; XXX TODO use also in `word`?
 5310               	
 5311 131b 0000 0000 	  ds max_word_length+2
 5311      0000 0000 
 5311      0000 0000 
 5311      0000 0000 
 5311      0000 0000 
 5312               	
 5313               	; ----------------------------------------------
 5314 133c 650C      	  _colon_header found_,"FOUND"
 5315               	
 5316               	; doc{
 5317               	;
 5318               	; found  ( ca len --- ca 0 | cfa 1 | cfa -1 )
 5319               	;
 5320               	; }doc
 5321               	
 5322               	  ; XXX TODO factor
 5323               	
 5324 133e 1913      	  dw find_dollar_
 5325 1340 8306 21   	  _literal max_word_length+2
 5326 1343 5611      	  dw erase_ ; make sure there will be a null at the end
 5327 1345 1913 D912 	  dw find_dollar_,dollar_store_
 5328 1349 1913 0710 	  dw find_dollar_,count_,uppers_
 5328      B412 
 5329 134f 1913 EB12 	  dw find_dollar_,find_
 5330 1353 C00A      	  dw semicolon_s_
 5331               	
 5332               	; ----------------------------------------------
 5333 1355 650C      	  _colon_header paren_abort_,"(ABORT)"
 5334               	
 5335 1357 1816      	  dw abort_
 5336 1359 C00A      	  dw semicolon_s_
 5337               	
 5338               	; ----------------------------------------------
 5339 135b 1C14      	  _variable_header error_number_,"ERROR#"
 5340               	
 5341 135d 0000      	  dw 0
 5342               	
 5343               	; ----------------------------------------------
 5344 135f 1C14      	  _two_variable_header error_pos_,"ERROR-POS"
 5345               	
 5346 1361 0000 0000 	  dw 0,0
 5347               	
GAS LISTING solo_forth.z80s 			page 98


 5348               	; ----------------------------------------------
 5349 1365 650C      	  _colon_header error_to_line_,"ERROR>LINE"
 5350               	
 5351               	; doc{
 5352               	;
 5353               	; error>line  ( n1 -- n2 )
 5354               	;
 5355               	; Convert an error number to its correspondent line offset. This
 5356               	; is used in order to skip the first line of screens and use
 5357               	; them as screen headers as usual.
 5358               	;
 5359               	; }doc
 5360               	
 5361 1367 E00B 570D 	  dw dup_,one_plus_,one_,paren_do_
 5361      C90C AD07 
 5362               	error_to_number.do:
 5363 136f 4408      	  dw i_
 5364 1371 8306 10   	  _literal 16
 5365 1374 6917 570B 	  dw mod_,zero_equals_
 5366               	.if true=(-1)
 5367               	  dw abs_
 5368               	.endif
 5369 1378 810B      	  dw plus_
 5370 137a 7807 6F13 	  dw paren_loop_,error_to_number.do
 5371 137e C00A      	  dw semicolon_s_
 5372               	
 5373               	; ----------------------------------------------
 5374 1380 650C      	  _colon_header error_,"ERROR"
 5375               	
 5376 1382 E00B 5B13 	  dw dup_,error_number_,store_ ; save the error number
 5376      490C 
 5377 1388 140D 1A0C 	  dw warning_,fetch_,zero_less_than_ ; custom error routine?
 5377      6D0B 
 5378 138e 6C07 5713 	  dw question_branch_,paren_abort_pfa ; if so, branch to it
 5379               	
 5380               	error.message:
 5381 1392 900D 0710 	  dw here_,count_,type_ ; last parsed word ; XXX TODO adapt to `parse-word`
 5381      1A10 
 5382 1398 4D10      	  dw paren_dot_quote_
 5383 139a 0427 3F20 	  _string '? '
 5383      27
 5384 139f BF17      	  dw message_
 5385 13a1 0B0D 1A0C 	  dw sp0_,fetch_,sp_store_
 5385      A60A 
 5386 13a7 1E0D 1A0C 	  dw blk_,fetch_,question_dup_
 5386      2E0E 
 5387 13ad 6007 BB13 	  dw zero_branch_,error.end
 5388 13b1 210D 1A0C 	  dw to_in_,fetch_
 5389 13b5 D90B      	  dw swap_
 5390 13b7 5F13 3B0C 	  dw error_pos_,two_store_
 5391               	error.end:
 5392 13bb A315      	  dw quit_
 5393               	
 5394               	; ----------------------------------------------
 5395 13bd 650C      	  _colon_header id_dot_,"ID."
 5396               	
 5397 13bf EE0E 1A10 	  dw nfa_to_string_,type_,space_
GAS LISTING solo_forth.z80s 			page 99


 5397      260E 
 5398 13c5 C00A      	  dw semicolon_s_
 5399               	
 5400               	; ----------------------------------------------
 5401 13c7 650C      	  _colon_header header_,"HEADER"
 5402               	
 5403               	; header  ( "name" -- )
 5404               	
 5405               	  ; XXX TODO -- make sure `current` is searched? else duplicated
 5406               	  ; definitions would not be remarked.
 5407               	  ;
 5408               	  ; the only secure method is:
 5409               	  ;
 5410               	  ;   get-order n>r also current @ context ! defined nr> set-order
 5411               	  ;
 5412               	  ; but that would make the compilation slower.
 5413               	  ; i think it can be left to the programmer.
 5414               	
 5415 13c9 7919      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5416 13cb D816 4D17 	  dw abs_,star_,question_dup_ ; ( 0 | cfa cfa )
 5416      2E0E 
 5417 13d1 6007 DE13 	  dw zero_branch_,header.continue
 5418               	  ; The word is not unique.
 5419 13d5 620E      	  dw cfa_to_nfa_
 5420               	
 5421 13d7 BD13      	  dw id_dot_
 5422 13d9 8306 04BF 	  _message error.not_unique
 5422      17
 5423               	header.continue:
 5424               	
 5425               	    ; XXX TODO adapt to `parse-word`; now it works because
 5426               	    ; `defined` still uses `word`, that leaves the string at
 5427               	    ; `here`.
 5428               	
 5429 13de 900D 0710 	  dw here_,count_
 5430               	  ; XXX TODO error if name is too long? (see lina)
 5431 13e2 110D 1A0C 	  dw width_,fetch_,min_
 5431      FC16 
 5432 13e8 EA06 C40B 	  dw save_string_,tuck_ ; ( len ca len )
 5433 13ec C90C 9806 	  _names_bank
 5434 13f0 900D 8F0A 	  dw here_,comma_np_ ; store a pointer to the cfa
 5435 13f4 460E 8F0A 	  dw latest_,comma_np_ ; link field
 5436               	  ; Now `np` contains the address of the nfa.
 5437 13f8 7F0A D912 	  dw np_fetch_,dollar_store_ ; store the name
 5438 13fc 7F0A 2D0D 	  dw np_fetch_,current_,fetch_,store_ ; update contents of `latest` in the current vocabulary
 5438      1A0C 490C 
 5439 1404 A00F      	  dw smudge_ ; set the smudge bit and page the default bank
 5440 1406 570D 770A 	  dw one_plus_,np_,plus_store_ ; update the names pointer with the length+1
 5440      F00B 
 5441 140c 900D 5E0D 	  dw here_,two_plus_,comma_ ; compile the pfa into code field
 5441      B20D 
 5442 1412 C00A      	  dw semicolon_s_
 5443               	
 5444               	; ----------------------------------------------
 5445 1414 650C      	  _colon_header create_,"CREATE"
 5446               	
 5447 1416 C713 A00F 	  dw header_,smudge_
GAS LISTING solo_forth.z80s 			page 100


 5448 141a C90F      	  dw paren_semicolon_code_
 5449               	do_create:
 5450 141c 13        	  inc de  ; de=pfa
 5451 141d D5        	  push de
 5452 141e DDE9      	  _jp_next
 5453               	
 5454               	; ----------------------------------------------
 5455 1420 650C      	  _colon_header code_,"CODE"
 5456               	
 5457 1422 C713      	  dw header_
 5458 1424 030F      	  dw store_csp_
 5459 1426 FD05 5906 	  dw also_,assembler_,asm_
 5459      8205 
 5460 142c C00A      	  dw semicolon_s_
 5461               	
 5462               	; ----------------------------------------------
 5463 142e 3014      	  _code_header compare_,"COMPARE"
 5464               	
 5465               	  ; ANS Forth
 5466               	  ; Adapted from DZX-Forth
 5467               	
 5468               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5469               	  ; because there will be no option to change it.
 5470               	  ; Use shorter internal code instead.
 5471               	  ; When case insensitive comparation is needed,
 5472               	  ; `uppers` can be used.
 5473               	
 5474 1430 D1        	  pop de      ; de = len2
 5475 1431 E1        	  pop hl      ; hl = ca2
 5476 1432 E3        	  ex (sp),hl  ; hl = len1 ; ( ca1 ca2 )
 5477 1433 7A        	  ld a,d
 5478 1434 BC        	  cp h
 5479 1435 2002      	  jr nz,compare.lengths
 5480 1437 7B        	  ld a,e
 5481 1438 BD        	  cp l
 5482               	compare.lengths:
 5483               	  ; cy = string2 is longer than string1?
 5484 1439 3801      	  jr c,compare.ready
 5485 143b EB        	  ex de,hl
 5486               	compare.ready:
 5487               	  ; de = length of the short string
 5488               	  ; hl = length of the long string
 5489 143c 69        	  ld l,c
 5490 143d 60        	  ld h,b ; hl = Forth IP
 5491 143e C1        	  pop bc ; bc = ca2
 5492 143f E3        	  ex (sp),hl ; hl = ca1 ; save Forth IP
 5493 1440 F5        	  push af ; save carry flag
 5494               	compare.compare_strings: equ $+1 ; XXX not used
 5495 1441 CD59 14   	  call compare_strings_case_sensitive
 5496 1444 2003      	  jr nz,compare.no_match
 5497               	
 5498               	compare.match:
 5499               	  ; The smaller string matches.
 5500 1446 F1        	  pop af ; restore flags
 5501 1447 1801      	  jr compare.end
 5502               	
 5503               	compare.no_match:
GAS LISTING solo_forth.z80s 			page 101


 5504               	  ; The smaller string does not match.
 5505 1449 C1        	  pop bc ; useless carry flag
 5506               	
 5507               	compare.end:
 5508 144a C1        	  pop bc ; restore Forth IP
 5509 144b 2101 00   	  ld hl,1
 5510 144e DA5E 05   	  jp c,push_hl
 5511 1451 2B        	  dec hl ; 0
 5512 1452 CA5E 05   	  jp z,push_hl ; string1 equals string2
 5513 1455 2B        	  dec hl ; -1
 5514 1456 C35E 05   	  jp push_hl
 5515               	
 5516               	compare_strings_case_sensitive:
 5517               	  ; Used by 'compare' and 'search'.
 5518               	  ; Input:
 5519               	  ;   HL = a1
 5520               	  ;   BC = a2
 5521               	  ;   DE = len
 5522               	  ; Output:
 5523               	  ;   Z = match?
 5524               	  ; [Code from DZX-Forth.]
 5525 1459 7B        	  ld a,e
 5526 145a B2        	  or d
 5527 145b C8        	  ret z
 5528 145c 0A        	  ld a,(bc)
 5529 145d BE        	  cp (hl)
 5530 145e C0        	  ret nz
 5531 145f 23        	  inc hl
 5532 1460 03        	  inc bc
 5533 1461 1B        	  dec de
 5534 1462 C359 14   	  jp compare_strings_case_sensitive
 5535               	
 5536               	; ----------------------------------------------
 5537 1465 6714      	  _code_header search_,"SEARCH"
 5538               	
 5539               	  ; search  ( ca1 len1 ca2 len2 -- ca3 len3 -1 | ca1 len1 0 )
 5540               	
 5541               	  ; ANS Forth
 5542               	
 5543               	  ; Adapted from DZX-Forth.
 5544               	  ;
 5545               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5546               	  ; because there will be no option to change it.
 5547               	  ; Use shorter internal code instead.
 5548               	  ; When case insensitive comparation is needed,
 5549               	  ; `uppers` can be used.
 5550               	
 5551 1467 D9        	  exx ; save Forth IP
 5552 1468 E1        	  pop hl
 5553 1469 2289 14   	  ld (search.string_2_len),hl
 5554 146c 7D        	  ld a,l
 5555 146d B4        	  or h ; len2 is zero?
 5556 146e C1        	  pop bc ; ca2
 5557 146f E1        	  pop hl ; len1
 5558 1470 22A2 14   	  ld (search.string_1_len),hl
 5559 1473 EB        	  ex de,hl ; de = len1
 5560 1474 E1        	  pop hl ; ca1
GAS LISTING solo_forth.z80s 			page 102


 5561 1475 22A6 14   	  ld (search.string_1_addr),hl
 5562 1478 CA95 14   	  jp z,search.match ; if len2 is zero, match
 5563 147b 2B        	  dec hl
 5564 147c 13        	  inc de
 5565               	search.1:
 5566 147d 23        	  inc hl ; address of current char of string 1
 5567 147e 1B        	  dec de ; remaining length of string 1
 5568 147f 7B        	  ld a,e
 5569 1480 B2        	  or d ; end of string 1?
 5570 1481 CA9E 14   	  jp z,search.no_match
 5571               	; XXX OLD -- already commented out in DX-Forth:
 5572               	; ld a,(bc)
 5573               	; cp  (hl)
 5574               	; jp nz,search.1
 5575 1484 D5        	  push de
 5576 1485 C5        	  push bc
 5577 1486 E5        	  push hl
 5578 1487 EB        	  ex de,hl
 5579               	search.string_2_len equ $+1
 5580 1488 2100 00   	  ld hl,0  ; length of the second string
 5581 148b EB        	  ex de,hl
 5582 148c CD59 14   	  call compare_strings_case_sensitive
 5583 148f E1        	  pop hl
 5584 1490 C1        	  pop bc
 5585 1491 D1        	  pop de
 5586 1492 C27D 14   	  jp nz,search.1
 5587               	
 5588               	search.match:
 5589 1495 0101 00   	  ld bc,true
 5590               	search.end:
 5591 1498 E5        	  push hl
 5592 1499 D5        	  push de
 5593 149a C5        	  push bc
 5594 149b D9        	  exx ; restore Forth IP
 5595 149c DDE9      	  _jp_next
 5596               	
 5597               	search.no_match:
 5598 149e 0100 00   	  ld bc,false
 5599               	search.string_1_len equ $+1
 5600 14a1 2100 00   	  ld hl,0  ; length of the first string
 5601 14a4 EB        	  ex de,hl
 5602               	search.string_1_addr equ $+1
 5603 14a5 2100 00   	  ld hl,0  ; address of the first string
 5604 14a8 C398 14   	  jp search.end
 5605               	
 5606               	; ----------------------------------------------
 5607 14ab 650C      	  _colon_header bracket_compile_,"[COMPILE]",immediate
 5608               	
 5609 14ad A419 BE0D 	  dw tick_,compile_comma_
 5610 14b1 C00A      	  dw semicolon_s_
 5611               	
 5612               	; ----------------------------------------------
 5613 14b3 650C      	  _colon_header s_literal_,"SLITERAL",immediate
 5614               	
 5615               	  ; : sliteral  ( ca len -- )  compile slit s,  ; immediate
 5616               	
 5617 14b5 680F 5F06 	  dw compile_,s_lit_,s_comma_
GAS LISTING solo_forth.z80s 			page 103


 5617      A00D 
 5618 14bb C00A      	  dw semicolon_s_
 5619               	
 5620               	; ----------------------------------------------
 5621 14bd 650C      	  _colon_header c_literal_,"CLITERAL",immediate
 5622               	
 5623               	; doc{
 5624               	;
 5625               	; cliteral  ( b -- )  \ I
 5626               	;
 5627               	; If compiling, then compile the stack value _b_ as a 8-bit literal.
 5628               	; `cliteral` does the same than `literal` but saves one byte of
 5629               	; dictionary space.
 5630               	;
 5631               	; }doc
 5632               	
 5633               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5634               	
 5635               	  .if 1 ; XXX OLD
 5636 14bf 1D0F      	    dw comp_question_
 5637 14c1 6007 CB14 	    dw zero_branch_,c_literal.end
 5638 14c5 680F 8306 	    dw compile_,c_lit_,c_comma_
 5638      C60D 
 5639               	c_literal.end:
 5640               	  .else ; XXX NEW
 5641               	    dw question_comp_
 5642               	    dw compile_,c_lit_,comma_
 5643               	  .endif
 5644 14cb C00A      	  dw semicolon_s_
 5645               	
 5646               	; ----------------------------------------------
 5647 14cd 650C      	  _colon_header literal_,"LITERAL",immediate
 5648               	
 5649               	; doc{
 5650               	;
 5651               	; literal  ( n -- )  \ fig-Forth, I
 5652               	;
 5653               	; If compiling, then compile the stack value _n_ as a 16-bit literal.
 5654               	;
 5655               	; }doc
 5656               	
 5657               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5658               	
 5659               	  .if 1 ; XXX OLD
 5660 14cf 1D0F      	    dw comp_question_
 5661 14d1 6007 DB14 	    dw zero_branch_,literal.end
 5662 14d5 680F 8D06 	    dw compile_,lit_,comma_
 5662      B20D 
 5663               	literal.end:
 5664               	  .else ; XXX NEW
 5665               	    dw question_comp_
 5666               	    dw compile_,lit_,comma_
 5667               	  .endif
 5668 14db C00A      	  dw semicolon_s_
 5669               	
 5670               	; ----------------------------------------------
 5671 14dd 650C      	  _colon_header two_literal_,"2LITERAL",immediate
GAS LISTING solo_forth.z80s 			page 104


 5672               	
 5673               	; doc{
 5674               	;
 5675               	; 2literal  ( d -- )  \ I
 5676               	;
 5677               	; If compiling, then compile the stack value _d_ as a 32-bit literal.
 5678               	;
 5679               	; }doc
 5680               	
 5681               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5682               	
 5683               	  .if 1 ; XXX OLD
 5684 14df 1D0F      	    dw comp_question_
 5685 14e1 6007 EB14 	    dw zero_branch_,two_literal.end
 5686 14e5 D90B CD14 	    dw swap_,literal_,literal_
 5686      CD14 
 5687               	two_literal.end:
 5688               	  .else ; XXX NEW
 5689               	    ; XXX TODO -- dlit
 5690               	    dw question_comp_
 5691               	    dw swap_,literal_,literal_
 5692               	  .endif
 5693 14eb C00A      	  dw semicolon_s_
 5694               	
 5695               	; ----------------------------------------------
 5696 14ed 650C      	  _colon_header depth_,"DEPTH"
 5697               	
 5698 14ef 9D0A 0B0D 	  dw sp_fetch_,sp0_,fetch_,minus_,lit_,-2,slash_
 5698      1A0C D20D 
 5698      8D06 FEFF 
 5698      6117 
 5699 14fd C00A      	  dw semicolon_s_
 5700               	
 5701               	; ----------------------------------------------
 5702 14ff 650C      	  _colon_header question_stack_,"?STACK"
 5703               	
 5704               	; doc{
 5705               	;
 5706               	; ?stack  ( -- )  \ fig-Forth
 5707               	;
 5708               	; Issue an error message if the stack is out of bounds.
 5709               	;
 5710               	; }doc
 5711               	
 5712 1501 9D0A      	  dw sp_fetch_
 5713 1503 0B0D 1A0C 	  dw sp0_,fetch_
 5714 1507 D90B F60D 	  dw swap_,less_than_
 5715 150b CD0C 0D0F 	  _question_error error.stack_empty
 5716 150f 9D0A      	  dw sp_fetch_
 5717 1511 8D06 7601 	  dw lit_,data_stack_limit
 5718 1515 F60D      	  dw less_than_
 5719 1517 8306 070D 	  _question_error error.full_stack
 5719      0F
 5720 151c C00A      	  dw semicolon_s_
 5721               	
 5722               	; ----------------------------------------------
 5723 151e 650C      	  _colon_header interpret_,"INTERPRET"
GAS LISTING solo_forth.z80s 			page 105


 5724               	
 5725               	; doc{
 5726               	;
 5727               	; interpret  ( -- )
 5728               	;
 5729               	; The outer text interpreter which sequentially executes or
 5730               	; compiles text from the input stream (terminal or disk)
 5731               	; depending on `state`. if the word name cannot be found after a
 5732               	; search of the `context` search order it is converted to a
 5733               	; number according to the current `base`.  That also failing, an
 5734               	; error message echoing the name with a "?" will be given.
 5735               	;
 5736               	; }doc
 5737               	
 5738               	interpret.begin:
 5739               	
 5740               	  ; XXX TODO -- finish
 5741               	
 5742               	  ; XXX TODO -- In order to change the behaviour of `literal`,
 5743               	  ; `2literal` and `cliteral` (make them give an error in
 5744               	  ; interpretation mode), `interpret` must be modified.
 5745               	
 5746               	
 5747 1520 FF14      	  dw question_stack_
 5748               	  ; dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5749 1522 7919      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5750               	  ;dw cr_,dot_s_ ; XXX INFORMER
 5751               	  ; _echo 'In interpret after defined ' ; XXX INFORMER
 5752               	  ; dw hex_,dot_s_,decimal_,key_,drop_ ; XXX INFORMER
 5753 1524 2E0E      	  dw question_dup_ ; found?
 5754               	  ; dw lit_,4,border_,dot_s_,key_,drop_ ; XXX INFORMER
 5755 1526 6007 4015 	  dw zero_branch_,interpret.word_not_found
 5756               	
 5757               	  ; Found ( cfa 1 | cfa -1 )
 5758               	  ; Immediate word:     ( cfa  1 )
 5759               	  ; Non-immediate word: ( cfa -1 )
 5760 152a 1D0F      	  dw comp_question_
 5761               	  ; ( cfa 1 state | cfa -1 state )
 5762               	.if true=1
 5763               	  ; Compiling an immediate word:     ( cfa  1 1 )
 5764               	  ; Compiling a non-immediate word:  ( cfa -1 1 )
 5765               	  ; Executing an immediate word:     ( cfa  1 0 )
 5766               	  ; Executing a non-immediate word:  ( cfa -1 0 )
 5767 152c 9B0B      	  dw negate_
 5768               	.endif
 5769               	  ; Compiling an immediate word:     ( cfa  1 -1 )
 5770               	  ; Compiling a non-immediate word:  ( cfa -1 -1 )
 5771               	  ; Executing an immediate word:     ( cfa  1  0 )
 5772               	  ; Executing a non-immediate word:  ( cfa -1  0 )
 5773 152e E90D      	  dw equals_ ; compiling a non-immediate word?
 5774 1530 6007 3A15 	  dw zero_branch_,interpret.execute
 5775               	
 5776               	  ; Compiling a non-immediate word  ( cfa )
 5777 1534 BE0D      	  dw compile_comma_
 5778 1536 5707 2015 	  dw branch_,interpret.begin
 5779               	
 5780               	interpret.execute:
GAS LISTING solo_forth.z80s 			page 106


 5781               	  ; Executing or immediate ( cfa )
 5782               	  ;_echo 'about to execute cfa ' ; XXX INFORMER
 5783               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5784               	;  dw dup_,u_dot_,key_,drop_ ; XXX INFORMER
 5785 153a 1C07      	  dw execute_
 5786               	  ;dw zero_,border_ ; XXX INFORMER
 5787 153c 5707 2015 	  dw branch_,interpret.begin
 5788               	
 5789               	interpret.word_not_found:
 5790               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5791               	  ; try to convert the text to a number
 5792               	  ; ( ca )
 5793               	  ;_echo 'about to convert to number ' ; XXX INFORMER
 5794               	  ;dw lit_,5,border_,key_,drop_ ; XXX INFORMER
 5795 1540 5212      	  dw number_
 5796               	  ;dw zero_,border_ ; XXX INFORMER
 5797 1542 360D 1A0C 	  dw dpl_,fetch_,one_plus_ ; is there a decimal point?
 5797      570D 
 5798 1548 6007 5215 	  dw zero_branch_,interpret.16bit_number
 5799               	  ; decimal point detected, so it's a double, 32-bit, number
 5800               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5801 154c DD14      	  dw two_literal_
 5802 154e 5707 2015 	  dw branch_,interpret.begin
 5803               	
 5804               	interpret.16bit_number:
 5805               	  ;dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5806               	  ; no decimal point, so it's a 16-bit number
 5807 1552 D40B      	  dw drop_ ; discard high order part of the double number
 5808               	  ; XXX TODO use `c_literal` for 8-bit values.
 5809 1554 CD14      	  dw literal_
 5810 1556 5707 2015 	  dw branch_,interpret.begin
 5811               	
 5812               	; ----------------------------------------------
 5813 155a 650C      	  _colon_header immediate_,"IMMEDIATE"
 5814               	
 5815 155c 460E      	  dw latest_
 5816 155e 8306 40   	  _literal precedence_bit_mask
 5817               	  ; XXX TODO factor `toggle-names'?
 5818 1561 C90C 9806 	  _names_bank
 5819 1565 110C      	  dw toggle_
 5820 1567 C50C 9806 	  _default_bank
 5821 156b C00A      	  dw semicolon_s_
 5822               	
 5823               	; ----------------------------------------------
 5824 156d 650C      	  _colon_header vocabulary_,"VOCABULARY"
 5825               	
 5826               	; doc{
 5827               	;
 5828               	; vocabulary  ( "name" -- )
 5829               	;
 5830               	; Create a vocabulary with the parsed "name" as its name. The
 5831               	; run-time efect of `name` is to replace `context`, the top
 5832               	; vocabulary in the search order.
 5833               	;
 5834               	; }doc
 5835               	
 5836 156f 1414      	  dw create_
GAS LISTING solo_forth.z80s 			page 107


 5837 1571 C50C B20D 	  dw zero_,comma_ ; space for the nfa of the latest word defined in the vocabulary
 5838 1575 900D      	  dw here_ ; address of vocabulary link
 5839 1577 1A0D 1A0C 	  dw voc_link_,fetch_,comma_ ; compile the current content of `voc-link`
 5839      B20D 
 5840 157d 1A0D 490C 	  dw voc_link_,store_ ; update `voc-link` with the link in this vocabulary
 5841               	
 5842 1581 C90F      	  dw paren_semicolon_code_
 5843               	
 5844               	do_vocabulary:
 5845 1583 CDF8 0F   	  call do_does
 5846               	
 5847               	  ; The next words are to be executed when the vocabulary is invoked.
 5848               	  ;_echo "Was here 1"
 5849               	  ;dw lit_,3,border_,key_,drop_ ; XXX INFORMER
 5850 1586 2A0D      	  dw context_
 5851               	  ;_echo "Was here 2"
 5852               	  ;dw lit_,4,border_,key_,drop_ ; XXX INFORMER
 5853 1588 490C      	  dw store_
 5854               	  ;_echo "Was here 3"
 5855               	  ;dw lit_,5,border_,key_,drop_ ; XXX INFORMER
 5856 158a C00A      	  dw semicolon_s_
 5857               	
 5858               	; ----------------------------------------------
 5859 158c 650C      	  _colon_header definitions_,"DEFINITIONS"
 5860               	
 5861 158e 2A0D 1A0C 	  dw context_,fetch_
 5862 1592 2D0D 490C 	  dw current_,store_
 5863 1596 C00A      	  dw semicolon_s_
 5864               	
 5865               	; ----------------------------------------------
 5866 1598 650C      	  _colon_header paren_,"(",immediate
 5867               	
 5868 159a 8306 29   	  _literal ')'
 5869               	  ; XXX TODO use `skip`?
 5870 159d A711 B81B 	  dw parse_,two_drop_
 5871 15a1 C00A      	  dw semicolon_s_
 5872               	
 5873               	; ----------------------------------------------
 5874 15a3 650C      	  _colon_header quit_,"QUIT"
 5875               	
 5876               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5877 15a5 1E0D FD0B 	  dw blk_,off_
 5878 15a9 900F      	  dw left_bracket_
 5879               	quit.do:
 5880               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5881 15ab 0E0D 1A0C 	  dw rp0_,fetch_,rp_store_
 5881      B80A 
 5882               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5883 15b1 CD09      	  dw cr_
 5884               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5885 15b3 FD10      	  dw query_
 5886               	  ; XXX FIXME never reached before the crash
 5887               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5888 15b5 1E15      	  dw interpret_
 5889 15b7 1D0F      	  dw comp_question_
 5890 15b9 6C07 AB15 	  dw question_branch_,quit.do
 5891 15bd 4D10      	  dw paren_dot_quote_
GAS LISTING solo_forth.z80s 			page 108


 5892 15bf 0427 6F6B 	  _string 'ok'
 5892      27
 5893 15c4 5707 AB15 	  dw branch_,quit.do
 5894               	
 5895               	.if show_version
 5896               	
 5897               	; ----------------------------------------------
 5898               	  _constant_header version_release_,"VERSION-RELEASE"
 5899               	
 5900               	  ; XXX TMP for debugging
 5901               	
 5902               	  dw version_release_variable
 5903               	
 5904               	; ----------------------------------------------
 5905               	  _colon_header dot_version_,".VERSION"
 5906               	
 5907               	  ; XXX TMP
 5908               	
 5909               	  dw lit_,version_status_variable,fetch_,emit_
 5910               	  _literal '-'
 5911               	  dw emit_
 5912               	  dw lit_,version_branch_variable,fetch_
 5913               	  dw s_to_d_,less_hash_,hash_,hash_,hash_greater_,type_
 5914               	  _literal '-'
 5915               	  dw emit_
 5916               	  dw lit_,version_release_variable,two_fetch_
 5917               	  ; XXX TODO use `du.` when available (it's in the library disk)
 5918               	  dw less_hash_,hash_s_,hash_greater_,type_
 5919               	  dw semicolon_s_
 5920               	
 5921               	.endif
 5922               	
 5923               	; ----------------------------------------------
 5924 15c8 650C      	  _colon_header greeting_,"GREETING"
 5925               	
 5926               	; doc{
 5927               	;
 5928               	; greeting  ( -- )
 5929               	;
 5930               	; }doc
 5931               	
 5932               	.if show_version
 5933               	  dw paren_dot_quote_
 5934               	;  _string "Solo Forth\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5935               	  _string "Solo Forth\rVersion "
 5936               	  ; XXX TMP show the version and the free dictionary memory:
 5937               	  dw dot_version_,cr_
 5938               	;  _string "\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5939               	.else
 5940 15ca 4D10      	  dw paren_dot_quote_
 5941 15cc 0453 6F6C 	  _string "Solo Forth\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5941      6F20 466F 
 5941      7274 685C 
 5941      725C 7837 
 5941      4620 3230 
 5942               	  ; XXX TMP show the free memory, during development only
 5943 1605 D31B 1F1B 	  dw unused_,u_dot_
GAS LISTING solo_forth.z80s 			page 109


 5944 1609 4D10      	  dw paren_dot_quote_
 5945 160b 3862 7974 	  _string "bytes free"
 5945      6573 2066 
 5945      7265 65
 5946               	.endif
 5947 1616 C00A      	  dw semicolon_s_
 5948               	
 5949               	; ----------------------------------------------
 5950 1618 650C      	  _colon_header abort_,"ABORT"
 5951               	
 5952               	
 5953 161a 0B0D 1A0C 	  dw sp0_,fetch_,sp_store_
 5953      A60A 
 5954               	boot:
 5955 1620 960C      	  dw noop_ ; patched by `turnkey` ; XXX OLD
 5956 1622 A315      	  dw quit_
 5957               	
 5958               	; ----------------------------------------------
 5959 1624 A00C      	  _constant_header boot_,"BOOT"
 5960               	
 5961 1626 2016      	  dw boot
 5962               	
 5963               	; ----------------------------------------------
 5964 1628 650C      	  _colon_header warm_,"WARM"
 5965               	
 5966               	  ; dw sp0_,fetch_,sp_store_
 5967               	  ; dw noop_ ; patched by `turnkey` ; XXX OLD
 5968               	  ; dw quit_
 5969 162a A71B 1816 	  dw page_,abort_
 5970 162e C00A      	  dw semicolon_s_
 5971               	
 5972               	warm_start:
 5973               	
 5974 1630 ED73 B41B 	  ld (system_stack_pointer),sp ; save the system stack pointer
 5975               	;  XXX TODO this works too
 5976               	;  ld hl,abort_
 5977               	;  ld ix,next ; restore IX
 5978               	;  jp next2
 5979               	
 5980 1634 CDA6 16   	  call common_start
 5981 1637 2816      	  dw warm_ ; XXX FIXME -- this works
 5982               	;  dw abort_ ; XXX FIXME -- this crashes the system, why?
 5983               	
 5984               	; ----------------------------------------------
 5985 1639 650C      	  _colon_header cold_,"COLD"
 5986               	
 5987               	  ; Init the names pointer.
 5988 163b 8D06 3000 	  dw lit_,names_pointer_init_value,fetch_
 5988      1A0C 
 5989 1641 8D06 2E00 	  dw lit_,names_pointer,store_
 5989      490C 
 5990               	
 5991               	  ; Init the disk buffers.
 5992 1647 0A18      	  dw empty_buffers_
 5993               	
 5994               	  ; Init the circular string buffer.
 5995 1649 0E07      	  dw empty_csb_
GAS LISTING solo_forth.z80s 			page 110


 5996               	
 5997               	  ; Init the user variables.
 5998 164b 8D06 1400 	  dw lit_,default_user_variables_start ; from
 5999 164f 8D06 0E00 	  dw lit_,user_variables_pointer,fetch_ ; to
 5999      1A0C 
 6000 1655 8306 18   	  _literal default_user_variables_end-default_user_variables_start ; length
 6001 1658 E609      	  dw cmove_
 6002               	
 6003               	  ; Restore the vocabularies to the default state.
 6004 165a 8D06 0600 	  dw lit_,latest_nfa_in_root_voc.init_value,fetch_
 6004      1A0C 
 6005 1660 8D06 4F06 	  dw lit_,root_pfa,store_
 6005      490C 
 6006 1666 8D06 0800 	  dw lit_,latest_nfa_in_forth_voc.init_value,fetch_
 6006      1A0C 
 6007 166c 8D06 5506 	  dw lit_,forth_pfa,store_
 6007      490C 
 6008 1672 8D06 0A00 	  dw lit_,latest_nfa_in_assembler_voc.init_value,fetch_
 6008      1A0C 
 6009 1678 8D06 5B06 	  dw lit_,assembler_pfa,store_
 6009      490C 
 6010 167e 8D06 0C00 	  dw lit_,voc_link.init_value,fetch_
 6010      1A0C 
 6011 1684 8D06 1C0D 	  dw lit_,voc_link_pfa,store_
 6011      490C 
 6012               	
 6013 168a 1906      	  dw only_
 6014 168c 5306      	  dw forth_
 6015 168e 8C15      	  dw definitions_  ; search order
 6016 1690 BE0F      	  dw decimal_      ; base
 6017               	
 6018 1692 631B A71B 	  dw colors0_,page_,greeting_
 6018      C815 
 6019               	
 6020 1698 1816      	  dw abort_
 6021               	
 6022               	cold_start:
 6023 169a ED73 B41B 	  ld (system_stack_pointer),sp ; save the system stack pointer
 6024               	only_first_cold: ; XXX TMP -- temporary label
 6025 169e CD9C 1D   	  call move_name_fields_to_memory_bank ; (only the first time)
 6026               	.if latin1_charset_in_bank
 6027               	  ld hl,charset_address-0x0100
 6028               	  ld (sys_chars),hl
 6029               	.endif
 6030 16a1 CDA6 16   	  call common_start
 6031 16a4 3916      	  dw cold_
 6032               	  ;dw abort_ ; XXX TMP for debugging
 6033               	
 6034               	common_start:
 6035               	
 6036               	  ; Common operations done by warm_start and cold_start.
 6037               	
 6038 16a6 C1        	  pop bc ; get the return address, that holds the cfa of `cold` or `warm`
 6039 16a7 AF        	  xor a
 6040 16a8 FD77 31   	  ld (iy+sys_df_sz_offset),a ; no lines at the bottom part of the screen
 6041 16ab DD21 5F05 	  ld ix,next ; restore IX
 6042 16af DDE9      	  _jp_next ; jump to the cfa pointed by the BC register
GAS LISTING solo_forth.z80s 			page 111


 6043               	
 6044               	; ----------------------------------------------
 6045 16b1 B316      	  _code_header s_to_d_,"S>D"
 6046               	
 6047               	; doc{
 6048               	;
 6049               	; s->d  ( n -- d )
 6050               	;
 6051               	; Sign extend a single number _n_ to form a double number _d_.
 6052               	;
 6053               	; }doc
 6054               	
 6055               	; dup 0<
 6056               	
 6057 16b3 2100 00   	  ld hl,0
 6058 16b6 D1        	  pop de
 6059 16b7 7A        	  ld a,d
 6060 16b8 B7        	  or a
 6061 16b9 F25D 05   	  jp p,push_hlde ; jump if positive
 6062 16bc 2B        	  dec hl
 6063 16bd C35D 05   	  jp push_hlde
 6064               	
 6065               	; ----------------------------------------------
 6066 16c0 650C      	  _colon_header plus_minus_,"+-"
 6067               	
 6068               	; doc{
 6069               	;
 6070               	; +-  ( n1 n2 -- n3 )  \ fig-Forth
 6071               	;
 6072               	; Apply the sign of n2 to n1, which is left as n3.
 6073               	;
 6074               	; }doc
 6075               	
 6076 16c2 6D0B      	  dw zero_less_than_
 6077 16c4 6007 CA16 	  dw zero_branch_,plus_minus.end
 6078 16c8 9B0B      	  dw negate_
 6079               	plus_minus.end:
 6080 16ca C00A      	  dw semicolon_s_
 6081               	
 6082               	; ----------------------------------------------
 6083 16cc 650C      	  _colon_header d_plus_minus_,"D+-"
 6084               	
 6085               	; doc{
 6086               	;
 6087               	; d+-  ( d1 n -- d2 )  \ fig-Forth
 6088               	;
 6089               	; Apply the sign of _n_ to the double number _d1_, leaving it as
 6090               	; _d2_.
 6091               	;
 6092               	; }doc
 6093               	
 6094 16ce 6D0B      	  dw zero_less_than_
 6095 16d0 6007 D616 	  dw zero_branch_,d_plus_minus.end
 6096 16d4 A70B      	  dw dnegate_
 6097               	d_plus_minus.end:
 6098 16d6 C00A      	  dw semicolon_s_
 6099               	
GAS LISTING solo_forth.z80s 			page 112


 6100               	; ----------------------------------------------
 6101 16d8 650C      	  _colon_header abs_,"ABS"
 6102               	
 6103               	; doc{
 6104               	;
 6105               	; abs  ( n -- u )
 6106               	;
 6107               	; Leave the absolute value _u_ of a number _n_.
 6108               	;
 6109               	; }doc
 6110               	
 6111 16da E00B C016 	  dw dup_,plus_minus_
 6112 16de C00A      	  dw semicolon_s_
 6113               	
 6114               	; ----------------------------------------------
 6115 16e0 650C      	  _colon_header dabs_,"DABS"
 6116               	
 6117               	; doc{
 6118               	;
 6119               	; dabs  ( d -- ud )
 6120               	;
 6121               	; Leave the absolute value _ud_ of a double number _d_.
 6122               	;
 6123               	; }doc
 6124               	
 6125 16e2 E00B CC16 	  dw dup_,d_plus_minus_
 6126 16e6 C00A      	  dw semicolon_s_
 6127               	
 6128               	; ----------------------------------------------
 6129 16e8 EA16      	  _code_header umax_,"UMAX"
 6130               	
 6131               	; doc{
 6132               	;
 6133               	; umax  ( u1 u2 -- u1 | u2 )
 6134               	;
 6135               	; }doc
 6136               	
 6137               	  ; [Code from DZX-Forth.]
 6138               	
 6139 16ea D1        	  pop de
 6140 16eb E1        	  pop hl
 6141 16ec CD0C 05   	  call compare_de_hl_unsigned
 6142 16ef C30D 17   	  jp max.1
 6143               	
 6144               	; ----------------------------------------------
 6145 16f2 F416      	  _code_header umin_,"UMIN"
 6146               	
 6147               	; doc{
 6148               	;
 6149               	; umin  ( u1 u2 -- u1 | u2 )
 6150               	;
 6151               	; }doc
 6152               	
 6153               	  ; [Code from DZX-Forth.]
 6154               	
 6155 16f4 D1        	  pop de
 6156 16f5 E1        	  pop hl
GAS LISTING solo_forth.z80s 			page 113


 6157 16f6 CD0C 05   	  call compare_de_hl_unsigned
 6158 16f9 C30E 17   	  jp max.2
 6159               	
 6160               	; ----------------------------------------------
 6161 16fc FE16      	  _code_header min_,"MIN"
 6162               	
 6163               	  ; [Code from DZX-Forth.]
 6164               	
 6165 16fe D1        	  pop de
 6166 16ff E1        	  pop hl
 6167 1700 CD12 05   	  call compare_de_hl_signed
 6168 1703 C30E 17   	  jp max.2
 6169               	
 6170               	; ----------------------------------------------
 6171 1706 0817      	  _code_header max_,"MAX"
 6172               	
 6173               	  ; [Code from DZX-Forth.]
 6174               	
 6175 1708 D1        	  pop de
 6176               	max.de:
 6177 1709 E1        	  pop hl
 6178 170a CD12 05   	  call compare_de_hl_signed
 6179               	max.1:
 6180 170d 3F        	  ccf
 6181               	max.2:
 6182 170e DA5E 05   	  jp c,push_hl
 6183 1711 EB        	  ex de,hl
 6184 1712 C35E 05   	  jp push_hl
 6185               	
 6186               	; ----------------------------------------------
 6187 1715 650C      	  _colon_header m_star_,"M*"
 6188               	
 6189               	; doc{
 6190               	;
 6191               	; m*  ( n1 n2 -- d )  \ fig-Forth
 6192               	;
 6193               	; A mixed magnitude math operation which leaves the double
 6194               	; number signed product of two signed number.
 6195               	;
 6196               	; }doc
 6197               	
 6198 1717 E70B      	  dw two_dup_
 6199 1719 6A0A F00A 	  dw xor_,to_r_
 6200 171d D816      	  dw abs_
 6201 171f D90B D816 	  dw swap_,abs_,u_m_star_
 6201      060A 
 6202 1725 FF0A CC16 	  dw from_r_,d_plus_minus_
 6203 1729 C00A      	  dw semicolon_s_
 6204               	
 6205               	; ----------------------------------------------
 6206 172b 650C      	  _colon_header m_slash_,"M/"
 6207               	
 6208               	; doc{
 6209               	;
 6210               	; m/  ( d n1 -- n2 n3 )  \ fig-Forth
 6211               	;
 6212               	; A mixed magnitude math operator which leaves the signed
GAS LISTING solo_forth.z80s 			page 114


 6213               	; remainder _n2_ and signed quotient _n3_ from a double number
 6214               	; dividend and divisor _n1_.  The  remainder takes its sign from
 6215               	; the dividend.
 6216               	;
 6217               	; }doc
 6218               	
 6219 172d CC0B      	  dw over_
 6220 172f F00A      	  dw to_r_
 6221 1731 F00A      	  dw to_r_
 6222 1733 E016      	  dw dabs_
 6223 1735 4F0B      	  dw r_fetch_
 6224 1737 D816      	  dw abs_
 6225 1739 100A      	  dw u_slash_mod_
 6226 173b FF0A      	  dw from_r_
 6227 173d 4F0B      	  dw r_fetch_
 6228 173f 6A0A      	  dw xor_
 6229 1741 C016      	  dw plus_minus_
 6230 1743 D90B      	  dw swap_
 6231 1745 FF0A      	  dw from_r_
 6232 1747 C016      	  dw plus_minus_
 6233 1749 D90B      	  dw swap_
 6234 174b C00A      	  dw semicolon_s_
 6235               	
 6236               	; ----------------------------------------------
 6237 174d 650C      	  _colon_header star_,"*"
 6238               	
 6239 174f 1517 D40B 	  dw m_star_,drop_
 6240 1753 C00A      	  dw semicolon_s_
 6241               	
 6242               	; ----------------------------------------------
 6243 1755 650C      	  _colon_header slash_mod_,"/MOD"
 6244               	
 6245               	; doc{
 6246               	;
 6247               	; /mod  ( n1 n2 -- rem quot )  \ fig-Forth
 6248               	;
 6249               	; Leave the remainder and signed quotient of _n1_/_n2_. The
 6250               	; remainder has the sign of the dividend.
 6251               	;
 6252               	; }doc
 6253               	
 6254 1757 F00A B116 	  dw to_r_,s_to_d_
 6255 175b FF0A 2B17 	  dw from_r_,m_slash_
 6256 175f C00A      	  dw semicolon_s_
 6257               	
 6258               	; ----------------------------------------------
 6259 1761 650C      	  _colon_header slash_,"/"
 6260               	
 6261 1763 5517 BD0B 	  dw slash_mod_,nip_
 6262 1767 C00A      	  dw semicolon_s_
 6263               	
 6264               	; ----------------------------------------------
 6265 1769 650C      	  _colon_header mod_,"MOD"
 6266               	
 6267 176b 5517 D40B 	  dw slash_mod_,drop_
 6268 176f C00A      	  dw semicolon_s_
 6269               	
GAS LISTING solo_forth.z80s 			page 115


 6270               	; ----------------------------------------------
 6271 1771 650C      	  _colon_header star_slash_mod_,"*/MOD"
 6272               	
 6273 1773 F00A 1517 	  dw to_r_,m_star_
 6274 1777 FF0A 2B17 	  dw from_r_,m_slash_
 6275 177b C00A      	  dw semicolon_s_
 6276               	
 6277               	; ----------------------------------------------
 6278 177d 650C      	  _colon_header star_slash_,"*/"
 6279               	
 6280 177f 7117 BD0B 	  dw star_slash_mod_,nip_
 6281 1783 C00A      	  dw semicolon_s_
 6282               	
 6283               	; ----------------------------------------------
 6284 1785 650C      	  _colon_header m_slash_mod_,"M/MOD"
 6285               	
 6286 1787 F00A C50C 	  dw to_r_,zero_,r_fetch_
 6286      4F0B 
 6287 178d 100A      	  dw u_slash_mod_
 6288 178f FF0A D90B 	  dw from_r_,swap_
 6289 1793 F00A 100A 	  dw to_r_,u_slash_mod_,from_r_
 6289      FF0A 
 6290 1799 C00A      	  dw semicolon_s_
 6291               	
 6292               	; ----------------------------------------------
 6293 179b 650C      	  _colon_header paren_line_,"(LINE)"
 6294               	
 6295 179d F00A      	  dw to_r_
 6296 179f E50C F10C 	  dw c_slash_l_,b_slash_buf_,star_slash_mod_
 6296      7117 
 6297 17a5 FF0A F50C 	  dw from_r_,b_slash_scr_,star_,plus_
 6297      4D17 810B 
 6298 17ad 6818 810B 	  dw block_,plus_,c_slash_l_
 6298      E50C 
 6299 17b3 C00A      	  dw semicolon_s_
 6300               	
 6301               	; ----------------------------------------------
 6302 17b5 650C      	  _colon_header dot_line_,".LINE"
 6303               	
 6304 17b7 9B17 3610 	  dw paren_line_,minus_trailing_,type_
 6304      1A10 
 6305 17bd C00A      	  dw semicolon_s_
 6306               	
 6307               	; ----------------------------------------------
 6308 17bf 650C      	  _colon_header message_,"MESSAGE"
 6309               	
 6310               	; doc{
 6311               	;
 6312               	; message  ( n -- )
 6313               	;
 6314               	; }doc
 6315               	
 6316 17c1 140D 1A0C 	  dw warning_,fetch_
 6317 17c5 6007 D317 	  dw zero_branch_,message.number_only
 6318 17c9 6513 C10C 	  dw error_to_line_,msg_scr_,dot_line_,space_
 6318      B517 260E 
 6319 17d1 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 116


 6320               	
 6321               	message.number_only:
 6322 17d3 4D10      	  dw paren_dot_quote_
 6323 17d5 0A27 4D53 	  _string 'MSG # '
 6323      4720 2320 
 6323      27
 6324               	  ; XXX TODO force decimal base
 6325 17de 0F1B      	  dw dot_
 6326 17e0 C00A      	  dw semicolon_s_
 6327               	
 6328               	
 6329               	; ----------------------------------------------
 6330 17e2 650C      	  _colon_header update_,"UPDATE"
 6331               	
 6332               	; doc{
 6333               	;
 6334               	; update  ( -- )  \ ANS-Forth
 6335               	;
 6336               	; Mark the most recently referenced block (pointed to by `prev`) as
 6337               	; altered. The block will subsequently be transferred automatically to
 6338               	; disk should its buffer be required for storage of a different block.
 6339               	;
 6340               	; }doc
 6341               	
 6342               	  ; XXX TODO move to the disk?
 6343               	
 6344 17e4 ED0C 1A0C 	  dw disk_buffer_,fetch_
 6345 17e8 8D06 0080 	  dw lit_,0x8000,or_
 6345      5D0A 
 6346 17ee ED0C 490C 	  dw disk_buffer_,store_
 6347 17f2 C00A      	  dw semicolon_s_
 6348               	
 6349               	; ----------------------------------------------
 6350 17f4 650C      	  _colon_header updated_question_,"UPDATED?"
 6351               	
 6352               	; doc{
 6353               	;
 6354               	; updated?  ( -- f )
 6355               	;
 6356               	; Is the current disk buffer marked as modified?
 6357               	;
 6358               	; }doc
 6359               	
 6360 17f6 1E18 6D0B 	  dw buffer_id_,zero_less_than_
 6361 17fa C00A      	  dw semicolon_s_
 6362               	
 6363               	; ----------------------------------------------
 6364 17fc 650C      	  _colon_header stream_end_,"STREAM-END"
 6365               	
 6366               	; doc{
 6367               	;
 6368               	; stream-end  ( ca -- )
 6369               	;
 6370               	; Store the null word (a null character) at the given address,
 6371               	; surrounded by spaces. This marks the end of a input stream.
 6372               	;
 6373               	; }doc
GAS LISTING solo_forth.z80s 			page 117


 6374               	
 6375 17fe 5F06      	  dw s_lit_
 6376 1800 0320 0020 	  db 3,space_char,0,space_char ; string
 6377 1804 1E0E FE09 	  dw rot_,smove_
 6378 1808 C00A      	  dw semicolon_s_
 6379               	
 6380               	; ----------------------------------------------
 6381 180a 650C      	  _colon_header empty_buffers_,"EMPTY-BUFFERS"
 6382               	
 6383               	; doc{
 6384               	;
 6385               	; empty-buffers  ( -- )
 6386               	; 
 6387               	; Unassign all block buffers. Do not transfer the contents of
 6388               	; any updated block to mass storage.
 6389               	;
 6390               	; }doc
 6391               	
 6392 180c 8D06 FF7F 	  dw lit_,buffer_block_id_mask,disk_buffer_,store_
 6392      ED0C 490C 
 6393 1814 C00A      	  dw semicolon_s_
 6394               	
 6395               	; ----------------------------------------------
 6396 1816 650C      	  _colon_header buffer_data_,"BUFFER-DATA"
 6397               	
 6398               	; doc{
 6399               	;
 6400               	; buffer-data  ( -- a )
 6401               	; 
 6402               	; First data address of the disk buffer.
 6403               	;
 6404               	; }doc
 6405               	
 6406 1818 ED0C 680D 	  dw disk_buffer_,cell_plus_
 6407 181c C00A      	  dw semicolon_s_
 6408               	
 6409               	; ----------------------------------------------
 6410 181e 650C      	  _colon_header buffer_id_,"BUFFER-ID"
 6411               	
 6412               	; doc{
 6413               	;
 6414               	; buffer-id  ( -- x )
 6415               	; 
 6416               	; Id of the disk buffer.
 6417               	;
 6418               	; }doc
 6419               	
 6420 1820 ED0C 1A0C 	  dw disk_buffer_,fetch_
 6421 1824 C00A      	  dw semicolon_s_
 6422               	
 6423               	; ----------------------------------------------
 6424 1826 650C      	  _colon_header block_number_,"BLOCK-NUMBER"
 6425               	
 6426               	; doc{
 6427               	;
 6428               	; block-number  ( x -- n )
 6429               	; 
GAS LISTING solo_forth.z80s 			page 118


 6430               	; Convert the disk buffer id _x_ to its associated block _n_,
 6431               	; by removing the update bit.
 6432               	;
 6433               	; }doc
 6434               	
 6435 1828 8D06 FF7F 	  _literal buffer_block_id_mask
 6436 182c 500A      	  dw and_
 6437 182e C00A      	  dw semicolon_s_
 6438               	
 6439               	; ----------------------------------------------
 6440 1830 650C      	  _colon_header buffer_block_,"BUFFER-BLOCK"
 6441               	
 6442               	; doc{
 6443               	;
 6444               	; buffer-block  ( -- n )
 6445               	;
 6446               	; Block number associated with the disk buffer.
 6447               	;
 6448               	; }doc
 6449               	
 6450 1832 1E18 2618 	  dw buffer_id_,block_number_
 6451 1836 C00A      	  dw semicolon_s_
 6452               	
 6453               	; ----------------------------------------------
 6454 1838 650C      	  _colon_header paren_buffer_,"(BUFFER)"
 6455               	
 6456               	; doc{
 6457               	;
 6458               	; (buffer)  ( n -- )
 6459               	;
 6460               	; If the contents of the disk buffer has been marked as updated,
 6461               	; write its block to the disk. Assign the block number _n_ to
 6462               	; the disk buffer.
 6463               	
 6464               	; ----
 6465               	; : (buffer)  ( n -- )
 6466               	;   updated?  if    block-number write-buffer
 6467               	;             else  drop
 6468               	;             then  disk-buffer !  ;
 6469               	; ----
 6470               	 
 6471               	; }doc
 6472               	
 6473 183a F417      	  dw updated_question_
 6474 183c 6007 4818 	  dw zero_branch_,free_buffer.not_updated
 6475 1840 2618 D918 	  dw block_number_,write_buffer_
 6476 1844 5707 4A18 	  dw branch_,free_buffer.end
 6477               	free_buffer.not_updated:
 6478 1848 D40B      	  dw drop_
 6479               	free_buffer.end:
 6480 184a ED0C 490C 	  dw disk_buffer_,store_
 6481 184e C00A      	  dw semicolon_s_
 6482               	
 6483               	; ----------------------------------------------
 6484 1850 650C      	  _colon_header buffer_,"BUFFER"
 6485               	
 6486               	; doc{
GAS LISTING solo_forth.z80s 			page 119


 6487               	;
 6488               	; buffer  ( n -- a )
 6489               	;
 6490               	; Assign the block buffer to block _n_.   If the contents of the
 6491               	; buffer were marked as updated, it is written to the disk.  The
 6492               	; block _n_ is not read from the disk.  The address _a_ left on
 6493               	; stack is the first cell in the buffer for data storage.
 6494               	
 6495               	; ----
 6496               	; : buffer  ( n -- a )
 6497               	;   dup buffer-block =  if    drop
 6498               	;                       else  (buffer)
 6499               	;                       then  buffer-data  ;
 6500               	; ----
 6501               	
 6502               	; }doc
 6503               	
 6504 1852 E00B 3018 	  dw dup_,buffer_block_,equals_
 6504      E90D 
 6505 1858 6007 6218 	  dw zero_branch_,buffer.not_equals
 6506               	  ; The requested block is the one already in the buffer.
 6507 185c D40B      	  dw drop_
 6508 185e 5707 6418 	  dw branch_,buffer.end
 6509               	buffer.not_equals:
 6510 1862 3818      	  dw paren_buffer_
 6511               	buffer.end:  
 6512 1864 1618      	  dw buffer_data_ ; first cell of data in the buffer
 6513 1866 C00A      	  dw semicolon_s_
 6514               	
 6515               	; ----------------------------------------------
 6516 1868 650C      	  _colon_header block_,"BLOCK"
 6517               	
 6518               	; doc{
 6519               	;
 6520               	; block  ( n -- a )
 6521               	
 6522               	; If the block _n_ is already in memory, leave the address _a_
 6523               	; of the first cell in the disk buffer for data storage.
 6524               	; 
 6525               	; If the block _n_ is not already in memory, transfer it from
 6526               	; disk to the buffer.  If the block occupying that buffer has
 6527               	; been marked as updated, rewrite it to disk before block _n_ is
 6528               	; read into the buffer.  Finally leave the address _a_ of the
 6529               	; first cell in the disk buffer for data storage.
 6530               	
 6531               	; ----
 6532               	; : block ( n --- a )
 6533               	;   dup buffer-block =
 6534               	;   if    drop
 6535               	;   else  save-buffers  dup read-buffer  disk-buffer !
 6536               	;   then  buffer-data  ;
 6537               	; ----
 6538               	
 6539               	; }doc
 6540               	
 6541 186a E00B 3018 	  dw dup_,buffer_block_,equals_
 6541      E90D 
GAS LISTING solo_forth.z80s 			page 120


 6542 1870 6007 7A18 	  dw zero_branch_,block.not_equals
 6543 1874 D40B      	  dw drop_
 6544 1876 5707 8418 	  dw branch_,block.end
 6545               	block.not_equals:
 6546 187a 0219 E00B 	  dw save_buffers_,dup_,read_buffer_
 6546      C618 
 6547 1880 ED0C 490C 	  dw disk_buffer_,store_
 6548               	block.end:
 6549 1884 1618      	  dw buffer_data_
 6550 1886 C00A      	  dw semicolon_s_
 6551               	
 6552               	; ----------------------------------------------
 6553 1888 8A18      	  _code_header flip_,"FLIP"
 6554               	
 6555               	; doc{
 6556               	;
 6557               	; flip  ( n1 -- n2 )
 6558               	;
 6559               	;   Exchange the low and high bytes within n1.
 6560               	;
 6561               	; }doc
 6562               	
 6563               	; [Name taken from eForth. It's called `><` or `cswap` in other
 6564               	; Forth systems.]
 6565               	
 6566 188a E1        	  pop hl
 6567 188b 7C        	  ld a,h
 6568 188c 65        	  ld h,l
 6569 188d 6F        	  ld l,a
 6570 188e C35E 05   	  jp push_hl
 6571               	
 6572               	; ----------------------------------------------
 6573 1891 650C      	  _colon_header block_to_sector_,"BLOCK>SECTOR"
 6574               	
 6575               	; doc{
 6576               	
 6577               	; block>sector  ( n1 -- n2 )
 6578               	
 6579               	; Convert the disk block _n1_ to the disk sector _n2_, in the
 6580               	; format required by G+DOS: The high byte of _n2_ is the track
 6581               	; (0..79 for side 0; 128..207 for side 1); the low byte of _n2_
 6582               	; is the sector (1..10).
 6583               	
 6584               	; ----
 6585               	; : block>sector  ( n1 -- n2 )
 6586               	;   \ n2 (high byte) = track 0..79 for side 0, 128..207 for side 1
 6587               	;   \    (low byte)  = sector 1..10
 6588               	;   \ track0 = 0..79
 6589               	;   \ track = 0..207
 6590               	;   \ side = 0..1
 6591               	;   dup 10 mod 1+    ( n1 sector )
 6592               	;   swap dup 20 /    ( sector n1 track0 )
 6593               	;   swap 10 / 1 and  ( sector track0 side )
 6594               	;   128              ( sector track 128 )
 6595               	;   \ * +          ( sector track ) \ XXX OLD for true=1
 6596               	;   negate and or    ( sector track )  \ XXX NEW a bit faster, for true=-1
 6597               	;   flip or  ;
GAS LISTING solo_forth.z80s 			page 121


 6598               	; ----
 6599               	;
 6600               	; }doc
 6601               	
 6602 1893 E00B      	  dw dup_
 6603 1895 8306 0A   	  _literal 10
 6604 1898 6917 570D 	  dw mod_,one_plus_,swap_,dup_
 6604      D90B E00B 
 6605 18a0 8306 14   	  _literal 20
 6606 18a3 6117 D90B 	  dw slash_,swap_
 6607 18a7 8306 0A   	  _literal 10
 6608 18aa 6117 C90C 	  dw slash_,one_,and_
 6608      500A 
 6609               	
 6610               	.if true=1 ; XXX OLD
 6611               	  ; XXX TODO optimize with `7 lshift`?
 6612 18b0 8306 80   	  _literal 128
 6613 18b3 4D17 810B 	  dw star_,plus_
 6614               	.else
 6615               	  dw negate_
 6616               	  _literal 128
 6617               	  dw and_,or_
 6618               	.endif
 6619               	  
 6620 18b7 8818 5D0A 	  dw flip_,or_
 6621 18bb C00A      	  dw semicolon_s_
 6622               	
 6623               	; ----------------------------------------------
 6624 18bd 650C      	  _colon_header read_block_,"READ-BLOCK"
 6625               	
 6626               	; doc{
 6627               	;
 6628               	; read-block  ( a n -- )
 6629               	;
 6630               	; Read disk block _n_ to buffer _a_.
 6631               	;
 6632               	; }doc
 6633               	
 6634 18bf 8306 44   	  _literal 0x44 ; G+DOS command to read a disk sector
 6635 18c2 E318      	  dw transfer_block_
 6636 18c4 C00A      	  dw semicolon_s_
 6637               	
 6638               	; ----------------------------------------------
 6639 18c6 650C      	  _colon_header read_buffer_,"READ-BUFFER"
 6640               	
 6641               	; doc{
 6642               	;
 6643               	; read-buffer  ( n -- )
 6644               	;
 6645               	; Read disk block _n_ to the disk buffer.
 6646               	;
 6647               	; }doc
 6648               	
 6649 18c8 1618 D90B 	  dw buffer_data_,swap_,read_block_
 6649      BD18 
 6650 18ce C00A      	  dw semicolon_s_
 6651               	
GAS LISTING solo_forth.z80s 			page 122


 6652               	; ----------------------------------------------
 6653 18d0 650C      	  _colon_header write_block_,"WRITE-BLOCK"
 6654               	
 6655               	; doc{
 6656               	;
 6657               	; write-block  ( a n -- )
 6658               	;
 6659               	; Write buffer _a_ to disk block _n_.
 6660               	;
 6661               	; }doc
 6662               	
 6663 18d2 8306 45   	  _literal 0x45 ; G+DOS command to write a disk sector
 6664 18d5 E318      	  dw transfer_block_
 6665 18d7 C00A      	  dw semicolon_s_
 6666               	
 6667               	; ----------------------------------------------
 6668 18d9 650C      	  _colon_header write_buffer_,"WRITE-BUFFER"
 6669               	
 6670               	; doc{
 6671               	;
 6672               	; write-buffer  ( n -- )
 6673               	;
 6674               	; Write the disk buffer to disk block _n_.
 6675               	;
 6676               	; }doc
 6677               	
 6678 18db 1618 D90B 	  dw buffer_data_,swap_,write_block_
 6678      D018 
 6679 18e1 C00A      	  dw semicolon_s_
 6680               	
 6681               	; ----------------------------------------------
 6682 18e3 650C      	  _colon_header transfer_block_,"TRANSFER-BLOCK"
 6683               	
 6684               	; doc{
 6685               	;
 6686               	; transfer-block  ( a n b -- )
 6687               	;
 6688               	; The disk read-write linkage.
 6689               	;
 6690               	; a = source or destination block buffer
 6691               	; n = sequential number of the referenced disk block
 6692               	; b = G+DOS command to read or write a sector
 6693               	;
 6694               	; }doc
 6695               	
 6696 18e5 8D06 FA18 	  dw lit_,read_write_sector_command,c_store_
 6696      520C 
 6697 18eb 9118      	  dw block_to_sector_
 6698 18ed F118      	  dw paren_transfer_block_
 6699 18ef C00A      	  dw semicolon_s_
 6700               	
 6701               	paren_transfer_block_:
 6702               	  ; Headerless word with the low level code of `R/W`.
 6703 18f1 F318      	  dw paren_transfer_block_pfa ; code field
 6704               	  
 6705               	  ; ( a sector -- )
 6706               	  ; sector (high byte) = track 0..79, +128 if side 1
GAS LISTING solo_forth.z80s 			page 123


 6707               	  ;        (low byte)   = sector 1..10
 6708               	paren_transfer_block_pfa:
 6709 18f3 D1        	  pop de ; d = track 0..79, +128 if side 1
 6710               	         ; e = sector 1..10
 6711 18f4 DDE1      	  pop ix ; address
 6712 18f6 C5        	  push bc ; save the Forth IP
 6713 18f7 3E02      	  ld a,2 ; drive ; XXX TMP
 6714 18f9 CF        	  rst 8 ; G+DOS hook
 6715               	read_write_sector_command:
 6716               	  ; G+DOS command already patched:
 6717 18fa 44        	  db 0x44 ; 0x44 = read ; 0x45 = write
 6718 18fb C1        	  pop bc ; restore the Forth IP
 6719 18fc DD21 5F05 	  ld ix,next
 6720 1900 DDE9      	  _jp_next
 6721               	
 6722               	; ----------------------------------------------
 6723 1902 650C      	  _colon_header save_buffers_,"SAVE-BUFFERS"
 6724               	
 6725               	; doc{
 6726               	;
 6727               	; save-buffers  ( -- )  \ ANS Forth
 6728               	;
 6729               	; If the disk buffer has been modified, transfer its contents to
 6730               	; disk and mark it as unmodified.
 6731               	;
 6732               	; ----
 6733               	; : save-buffers ( -- )
 6734               	;   updated? 0= ?exit \ exit if not updated
 6735               	;   buffer-block dup write-buffer  disk-buffer !  ;
 6736               	; ----
 6737               	;
 6738               	; }doc
 6739               	
 6740 1904 F417 570B 	  dw updated_question_,zero_equals_ ; not updated?
 6741 1908 441D      	  dw question_exit_ ; exit if not updated
 6742               	  ; Updated
 6743 190a 3018 E00B 	  dw buffer_block_,dup_,write_buffer_
 6743      D918 
 6744 1910 ED0C 490C 	  dw disk_buffer_,store_
 6745 1914 C00A      	  dw semicolon_s_
 6746               	
 6747               	; ----------------------------------------------
 6748 1916 650C      	  _colon_header flush_,"FLUSH"
 6749               	
 6750               	  ; XXX TODO -- move to the disk?
 6751               	
 6752 1918 0219 0A18 	  dw save_buffers_,empty_buffers_
 6753 191c C00A      	  dw semicolon_s_
 6754               	
 6755               	; ----------------------------------------------
 6756 191e 650C      	  _colon_header paren_load_,"(LOAD)"
 6757               	
 6758               	; doc{
 6759               	;
 6760               	; (load)  ( i*x u -- j*x )
 6761               	;
 6762               	; Store _u_ in `blk` (thus making block _u_ the input source and
GAS LISTING solo_forth.z80s 			page 124


 6763               	; setting the input buffer to encompass its contents), set `>in`
 6764               	; to zero, and interpret.  Other stack effects are due to the
 6765               	; words loaded.
 6766               	;
 6767               	; An error is issued if _u_ is zero.
 6768               	;
 6769               	; ----
 6770               	; : (load)  ( i*x u -- j*x )
 6771               	;   dup 0= 9 ?error
 6772               	;   b/scr * blk !  >in off  interpret  ;
 6773               	; ----
 6774               	;
 6775               	; }doc
 6776               	
 6777 1920 E00B 570B 	  dw dup_,zero_equals_
 6778 1924 8306 090D 	  _question_error error.loading_from_screen_0
 6778      0F
 6779 1929 F50C 4D17 	  dw b_slash_scr_,star_,blk_,store_
 6779      1E0D 490C 
 6780 1931 210D FD0B 	  dw to_in_,off_,interpret_
 6780      1E15 
 6781 1937 C00A      	  dw semicolon_s_
 6782               	
 6783               	; ----------------------------------------------
 6784 1939 650C      	  _colon_header continued_,"CONTINUED"
 6785               	
 6786               	; doc{
 6787               	;
 6788               	; continued  ( i*x u -- j*x )  \ Forth-79 (uncontrolled word
 6789               	; definition from the Reference Word Set)
 6790               	;
 6791               	; Store _u_ in `blk` (thus making block _u_ the input source and
 6792               	; setting the input buffer to encompass its contents), set `>in`
 6793               	; to zero, and interpret.  Other stack effects are due to the
 6794               	; words loaded.
 6795               	;
 6796               	; ----
 6797               	; : continued  ( -- )
 6798               	;   ?loading (load)  ;
 6799               	; ----
 6800               	;
 6801               	; }doc
 6802               	
 6803 193b 590F 1E19 	  dw question_loading_,paren_load_
 6804 193f C00A      	  dw semicolon_s_
 6805               	
 6806               	; ----------------------------------------------
 6807 1941 650C      	  _colon_header load_,"LOAD"
 6808               	
 6809               	; doc{
 6810               	;
 6811               	; load  ( u -- )
 6812               	;
 6813               	; Save the current input-source specification. Store _u_ in
 6814               	; `blk` (thus making block _u_ the input source and setting the
 6815               	; input buffer to encompass its contents), set `>in` to zero,
 6816               	; and interpret. When the parse area is exhausted, restore the
GAS LISTING solo_forth.z80s 			page 125


 6817               	; prior input source specification. Other stack effects are due
 6818               	; to the words loaded.
 6819               	;
 6820               	; An error is issued if _u_ is zero.
 6821               	;
 6822               	; ----
 6823               	; : load  ( n -- )
 6824               	;   blk @ >r  >in @ >r
 6825               	;   (load)
 6826               	;   r> >in !  r> blk !  ;
 6827               	; ----
 6828               	;
 6829               	; }doc
 6830               	
 6831 1943 1E0D 1A0C 	  dw blk_,fetch_,to_r_
 6831      F00A 
 6832 1949 210D 1A0C 	  dw to_in_,fetch_,to_r_
 6832      F00A 
 6833 194f 1E19      	  dw paren_load_
 6834 1951 FF0A 210D 	  dw from_r_,to_in_,store_
 6834      490C 
 6835 1957 FF0A 1E0D 	  dw from_r_,blk_,store_
 6835      490C 
 6836 195d C00A      	  dw semicolon_s_
 6837               	
 6838               	; ----------------------------------------------
 6839 195f 650C      	  _colon_header next_screen_,"-->",immediate
 6840               	
 6841               	; doc{
 6842               	;
 6843               	; -->  ( -- )  \ "next-screen"
 6844               	;
 6845               	; Continue interpretation with the next disk screen.
 6846               	;
 6847               	; ----
 6848               	; : -->  ( -- )
 6849               	;   ?loading  >in off
 6850               	;   b/scr blk @ over mod - blk +!  ; immediate
 6851               	; ----
 6852               	;
 6853               	; }doc
 6854               	
 6855 1961 590F      	  dw question_loading_
 6856 1963 210D FD0B 	  dw to_in_,off_
 6857 1967 F50C 1E0D 	  dw b_slash_scr_,blk_,fetch_,over_,mod_,minus_
 6857      1A0C CC0B 
 6857      6917 D20D 
 6858 1973 1E0D F00B 	  dw blk_,plus_store_
 6859 1977 C00A      	  dw semicolon_s_
 6860               	
 6861               	; ----------------------------------------------
 6862 1979 650C      	  _colon_header defined_,"DEFINED"
 6863               	
 6864               	; doc{
 6865               	;
 6866               	; defined  ( "name" -- ca 0 | cfa 1 | cfa -1 )
 6867               	;
GAS LISTING solo_forth.z80s 			page 126


 6868               	; }doc
 6869               	
 6870               	  ; XXX TODO -- adapt to the new parsing method
 6871               	
 6872               	.if 1 ; XXX OLD
 6873               	
 6874 197b E10C D511 	  dw b_l_,word_ ; ( ca2 )
 6875               	
 6876               	.else ; XXX NEW
 6877               	
 6878               	  ; XXX FIXME -- crash somewhere in `query`
 6879               	
 6880               	  dw parse_name_  ; ( ca1 len1 )
 6881               	  ;dw cr_,dot_s_,lit_,1,border_,key_,drop_ ; XXX INFORMER
 6882               	  dw save_counted_string_ ; ( ca2 )
 6883               	  ;dw cr_,dot_s_,lit_,2,border_,key_,drop_ ; XXX INFORMER
 6884               	
 6885               	.endif
 6886               	
 6887 197f E00B 0710 	  dw dup_,count_,uppers_  ; uppercase ( ca2 )
 6887      B412 
 6888               	  ;dw cr_,dot_s_,lit_,3,border_,key_,drop_ ; XXX INFORMER
 6889 1985 EB12      	  dw find_
 6890               	  ;dw cr_,dot_s_,lit_,4,border_,key_,drop_ ; XXX INFORMER
 6891               	
 6892 1987 C00A      	  dw semicolon_s_
 6893               	
 6894               	; ----------------------------------------------
 6895 1989 650C      	  _colon_header question_defined_,"?DEFINED"
 6896               	
 6897               	; doc{
 6898               	;
 6899               	; ?defined  ( f -- )
 6900               	;
 6901               	; }doc
 6902               	
 6903               	  ; [Code from DZX-Forth.]
 6904               	
 6905 198b 570B      	  dw zero_equals_
 6906 198d 8306 050D 	  _question_error error.not_found
 6906      0F
 6907 1992 C00A      	  dw semicolon_s_
 6908               	
 6909               	; ----------------------------------------------
 6910 1994 650C      	  _colon_header bracket_defined_,"[DEFINED]",immediate
 6911               	
 6912               	; doc{
 6913               	;
 6914               	; [defined]  ( "name" -- wf )
 6915               	;
 6916               	; }doc
 6917               	
 6918 1996 7919 BD0B 	  dw defined_,nip_
 6919 199a C00A      	  dw semicolon_s_
 6920               	
 6921               	; ----------------------------------------------
 6922 199c 650C      	  _colon_header bracket_undefined_,"[UNDEFINED]",immediate
GAS LISTING solo_forth.z80s 			page 127


 6923               	
 6924               	; doc{
 6925               	;
 6926               	; [undefined]  ( "name" -- wf )
 6927               	;
 6928               	; }doc
 6929               	
 6930 199e 9419 570B 	  dw bracket_defined_,zero_equals_
 6931 19a2 C00A      	  dw semicolon_s_
 6932               	
 6933               	; ----------------------------------------------
 6934 19a4 650C      	  _colon_header tick_,"'"
 6935               	
 6936               	; doc{
 6937               	;
 6938               	; '  ( "name" -- cfa )
 6939               	;
 6940               	; }doc
 6941               	
 6942 19a6 7919 8919 	  dw defined_,question_defined_
 6943 19aa C00A      	  dw semicolon_s_
 6944               	
 6945               	; ----------------------------------------------
 6946 19ac 650C      	  _colon_header bracket_tick_,"[']",immediate
 6947               	
 6948               	; doc{
 6949               	;
 6950               	; [']  ( "name" -- cfa )
 6951               	;
 6952               	; }doc
 6953               	
 6954 19ae A419 CD14 	  dw tick_,literal_
 6955 19b2 C00A      	  dw semicolon_s_
 6956               	
 6957               	; ----------------------------------------------
 6958 19b4 650C      	  _colon_header begin_,"BEGIN",immediate
 6959               	
 6960               	; doc{
 6961               	;
 6962               	; begin  ( compilation: -- a n )
 6963               	;
 6964               	; At compile time `begin` leaves the dictionary address on
 6965               	; stack with an error checking number _n_.  It does not compile
 6966               	; anything to the dictionary.
 6967               	;
 6968               	; }doc
 6969               	
 6970 19b6 250F      	  dw question_comp_ ; error if not compiling
 6971 19b8 4707      	  dw backward_mark_ ; address to compute the backward branch
 6972               	.if 1 ; fig_compiler_security
 6973 19ba C90C      	  dw one_ ; error checking number
 6974               	.endif
 6975 19bc C00A      	  dw semicolon_s_
 6976               	
 6977               	; ----------------------------------------------
 6978 19be 650C      	  _colon_header then_,"THEN",immediate
 6979               	
GAS LISTING solo_forth.z80s 			page 128


 6980 19c0 250F      	  dw question_comp_ ; error if not compiling
 6981               	.if 1 ; fig_compiler_security
 6982 19c2 CD0C 3D0F 	  dw two_,question_pairs_ ; check for nesting error
 6983               	.endif
 6984 19c6 3B07      	  dw forward_resolve_
 6985 19c8 C00A      	  dw semicolon_s_
 6986               	
 6987               	; ----------------------------------------------
 6988               	  ; _colon_header question_do_,"?DO",immediate
 6989               	
 6990               	  ; XXX TODO
 6991               	
 6992               	  ; dw compile_,paren_question_do_
 6993               	  ; dw branch_,do.common
 6994               	
 6995               	; ----------------------------------------------
 6996 19ca 650C      	  _colon_header do_,"DO",immediate
 6997               	
 6998 19cc 680F AD07 	  dw compile_,paren_do_
 6999               	do.common:
 7000 19d0 4707      	  dw backward_mark_
 7001               	.if 1 ; fig_compiler_security
 7002 19d2 8306 03   	  _literal 3 ; error checking number
 7003               	.endif
 7004 19d5 C00A      	  dw semicolon_s_
 7005               	
 7006               	; ----------------------------------------------
 7007 19d7 650C      	  _colon_header loop_,"LOOP",immediate
 7008               	
 7009               	.if 1 ; fig_compiler_security
 7010 19d9 8306 03   	  _literal 3 ; error checking number
 7011 19dc 3D0F      	  dw question_pairs_
 7012               	.endif
 7013 19de 680F 7807 	  dw compile_,paren_loop_
 7014 19e2 4F07      	  dw backward_resolve_
 7015 19e4 C00A      	  dw semicolon_s_
 7016               	
 7017               	; ----------------------------------------------
 7018 19e6 650C      	  _colon_header plus_loop_,"+LOOP",immediate
 7019               	
 7020               	.if 1 ; fig_compiler_security
 7021 19e8 8306 03   	  _literal 3 ; error checking number
 7022 19eb 3D0F      	  dw question_pairs_
 7023               	.endif
 7024 19ed 680F A707 	  dw compile_,paren_plus_loop_
 7025 19f1 4F07      	  dw backward_resolve_
 7026 19f3 C00A      	  dw semicolon_s_
 7027               	
 7028               	; ----------------------------------------------
 7029 19f5 650C      	  _colon_header until_,"UNTIL",immediate
 7030               	
 7031               	.if 1 ; fig_compiler_security
 7032 19f7 C90C 3D0F 	  dw one_,question_pairs_
 7033               	.endif
 7034 19fb 680F 6007 	  dw compile_,zero_branch_
 7035 19ff 4F07      	  dw backward_resolve_
 7036 1a01 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 129


 7037               	
 7038               	; ----------------------------------------------
 7039 1a03 650C      	  _colon_header again_,"AGAIN",immediate
 7040               	
 7041               	; doc{
 7042               	;
 7043               	; again  ( compilation: a n -- )
 7044               	;
 7045               	; End of an infinite loop.  Compile an unconditional jump
 7046               	; instruction to branch backward to _a_.
 7047               	;
 7048               	; }doc
 7049               	
 7050               	.if 1 ; fig_compiler_security
 7051 1a05 C90C 3D0F 	  dw one_,question_pairs_ ; check n for error
 7052               	.endif
 7053 1a09 680F 5707 	  dw compile_,branch_
 7054 1a0d 4F07      	  dw backward_resolve_
 7055 1a0f C00A      	  dw semicolon_s_
 7056               	
 7057               	; ----------------------------------------------
 7058 1a11 650C      	  _colon_header repeat_,"REPEAT",immediate
 7059               	
 7060               	; doc{
 7061               	;
 7062               	; repeat  ( compilation: a1 n1 a2 n2 -- )
 7063               	;
 7064               	; a1 = address of `begin` to branch to
 7065               	; n1 = `begin` check number
 7066               	; a2 = address of the branch of `while` to resolve
 7067               	; n2 = `while` check number
 7068               	;
 7069               	; Compile `branch` to jump back to `begin`.  Resolve also  the
 7070               	; branching offset required by `while`.
 7071               	;
 7072               	; }doc
 7073               	
 7074 1a13 280B      	  dw two_to_r_
 7075 1a15 031A      	  dw again_ ; unconditional branch back to `begin`
 7076 1a17 370B      	  dw two_from_r_
 7077               	  ; dw two_minus_ ; restore 2 to be checked by `then` ; XXX OLD -- unnecessary
 7078               	  ; XXX TODO why unncessary?
 7079 1a19 BE19      	  dw then_ ; resolve the forward branching needed by `while`
 7080 1a1b C00A      	  dw semicolon_s_
 7081               	
 7082               	; ----------------------------------------------
 7083 1a1d 650C      	  _colon_header if_,"IF",immediate
 7084               	
 7085 1a1f 680F 6007 	  dw compile_,zero_branch_
 7086               	if.do:
 7087 1a23 2F07      	  dw forward_mark_
 7088               	.if 1 ; fig_compiler_security
 7089 1a25 CD0C      	  dw two_ ; error checking number
 7090               	.endif
 7091 1a27 C00A      	  dw semicolon_s_
 7092               	
 7093               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 130


 7094 1a29 650C      	  _colon_header unless_,"UNLESS",immediate
 7095               	
 7096               	  ; Equivalent to `0= if`, but faster.
 7097               	
 7098 1a2b 680F 6C07 	  dw compile_,question_branch_
 7099 1a2f 5707 231A 	  dw branch_,if.do
 7100               	
 7101               	  ; XXX TODO move to the disk:
 7102               	
 7103               	; : unless  ( f -- )  postpone ?branch >mark 2  ; immediate
 7104               	; \ Alternative: when compiler security is removed:
 7105               	; : unless  ( f -- )  postpone ?branch >mark  ; immediate
 7106               	
 7107               	; ----------------------------------------------
 7108 1a33 650C      	  _colon_header ahead_,"AHEAD",immediate
 7109               	
 7110 1a35 680F 5707 	  dw compile_,branch_
 7111 1a39 2F07      	  dw forward_mark_
 7112               	
 7113               	; ----------------------------------------------
 7114 1a3b 650C      	  _colon_header else_,"ELSE",immediate
 7115               	
 7116               	  ; XXX FIXME Pasmo bug?
 7117               	  ; The system crashes when conditional compilation
 7118               	  ; is used here, in any combination. Very strange.
 7119               	
 7120               	.if 1 ; fig_compiler_security
 7121               	
 7122 1a3d CD0C      	  dw two_ ; error checking number
 7123 1a3f 3D0F      	  dw question_pairs_
 7124 1a41 680F 5707 	  dw compile_,branch_
 7125 1a45 2F07      	  dw forward_mark_
 7126 1a47 D90B      	  dw swap_
 7127 1a49 CD0C      	  dw two_ ; error checking number
 7128 1a4b BE19      	  dw then_
 7129 1a4d CD0C      	  dw two_ ; error checking number
 7130 1a4f C00A      	  dw semicolon_s_
 7131               	
 7132               	.else
 7133               	
 7134               	  dw compile_,branch_
 7135               	  dw forward_mark_
 7136               	  dw then_
 7137               	  dw semicolon_s_
 7138               	
 7139               	.endif
 7140               	
 7141               	; ----------------------------------------------
 7142 1a51 650C      	  _colon_header while_,"WHILE",immediate
 7143               	
 7144 1a53 1D1A      	  dw if_
 7145               	  ; dw two_plus_ ; leave 4 to be checked by `repeat` ; XXX OLD -- unnecessary
 7146               	  ; XXX TODO 2015-08-13: why unnecessary? why fig-Forth does not use `swap`?
 7147 1a55 C00A      	  dw semicolon_s_
 7148               	
 7149               	; ----------------------------------------------
 7150 1a57 650C      	  _colon_header spaces_,"SPACES"
GAS LISTING solo_forth.z80s 			page 131


 7151               	
 7152 1a59 E10C 5F1A 	  dw b_l_,emits_
 7153 1a5d C00A      	  dw semicolon_s_
 7154               	
 7155               	; ----------------------------------------------
 7156 1a5f 650C      	  _colon_header emits_,"EMITS"
 7157               	
 7158               	  ; emits  ( u c -- )
 7159               	
 7160               	  ; XXX TODO use `?do` or `for` when available
 7161 1a61 D90B C50C 	  dw swap_,zero_,max_,question_dup_
 7161      0617 2E0E 
 7162 1a69 6007 791A 	  dw zero_branch_,emits_.end
 7163 1a6d C50C      	  dw zero_
 7164 1a6f AD07      	  dw paren_do_
 7165               	emits_.do:
 7166 1a71 E00B EC08 	  dw dup_,emit_
 7167 1a75 7807 711A 	  dw paren_loop_,emits_.do
 7168               	emits_.end:
 7169 1a79 D40B      	  dw drop_
 7170 1a7b C00A      	  dw semicolon_s_
 7171               	
 7172               	; ----------------------------------------------
 7173 1a7d 650C      	  _colon_header less_hash_,"<#"
 7174               	
 7175 1a7f 7611      	  dw pad_
 7176 1a81 420D      	  dw hld_
 7177 1a83 490C      	  dw store_
 7178 1a85 C00A      	  dw semicolon_s_
 7179               	
 7180               	; ----------------------------------------------
 7181 1a87 650C      	  _colon_header hash_greater_,"#>"
 7182               	
 7183 1a89 D40B      	  dw drop_
 7184 1a8b D40B      	  dw drop_
 7185 1a8d 420D 1A0C 	  dw hld_,fetch_
 7186 1a91 7611      	  dw pad_
 7187 1a93 CC0B      	  dw over_
 7188 1a95 D20D      	  dw minus_
 7189 1a97 C00A      	  dw semicolon_s_
 7190               	
 7191               	; ----------------------------------------------
 7192 1a99 650C      	  _colon_header sign_,"SIGN"
 7193               	
 7194               	; doc{
 7195               	
 7196               	; sign  ( n  d  ---  d ) \ fig-Forth
 7197               	
 7198               	; Stores an ascii "-" sign just before a converted numeric
 7199               	; output string in the text output buffer when _n_ is negative.
 7200               	; _n_ is discarded but double number _d_ is maintained. Must be
 7201               	; used between `<#` and `#>`.
 7202               	
 7203               	; }doc
 7204               	
 7205               	  ; XXX TODO convert to ANS Forth
 7206               	
GAS LISTING solo_forth.z80s 			page 132


 7207 1a9b 1E0E 6D0B 	  dw rot_,zero_less_than_
 7208 1a9f 6007 A81A 	  dw zero_branch_,sign.end
 7209 1aa3 8306 2D   	  _literal '-'
 7210 1aa6 6411      	  dw hold_
 7211               	sign.end:
 7212 1aa8 C00A      	  dw semicolon_s_
 7213               	
 7214               	; ----------------------------------------------
 7215 1aaa 650C      	  _colon_header hash_,"#"
 7216               	
 7217               	; doc{
 7218               	;
 7219               	; #  ( d1 -- d2 )
 7220               	;
 7221               	; Divide _d1_ by current base.  The remainder is converted to
 7222               	; an ASCII character and appended to the output text string.
 7223               	; The quotient _d2_ is left on stack.
 7224               	;
 7225               	; }doc
 7226               	
 7227               	
 7228 1aac 330D 1A0C 	  dw base_,fetch_
 7229 1ab0 8517      	  dw m_slash_mod_ ;  ( remainder dquotient )
 7230 1ab2 1E0E      	  dw rot_ ; ( dquotient remainder )
 7231 1ab4 8306 09   	  _literal 0x09
 7232 1ab7 CC0B F60D 	  dw over_,less_than_ ; remainder<9?
 7233 1abb 6007 C41A 	  dw zero_branch_,hash.digit
 7234               	  ; remainder<9
 7235 1abf 8306 07   	  _literal 0x07
 7236 1ac2 810B      	  dw plus_ ; make it an alphabet
 7237               	hash.digit:
 7238               	  ; Form the ASCII representation of a digit:
 7239               	  ; "0" to "9" and "A" to "F" (or above).
 7240 1ac4 8306 30   	  _literal '0'
 7241 1ac7 810B      	  dw plus_
 7242 1ac9 6411      	  dw hold_ ; put the digit into `pad` in a reversed order.
 7243 1acb C00A      	  dw semicolon_s_
 7244               	
 7245               	; ----------------------------------------------
 7246 1acd 650C      	  _colon_header hash_s_,"#S"
 7247               	
 7248               	; doc{
 7249               	;
 7250               	; #S  ( d1 -- d2 )
 7251               	;
 7252               	; }doc
 7253               	
 7254               	hash_s.begin:
 7255 1acf AA1A E70B 	  dw hash_,two_dup_,or_
 7255      5D0A 
 7256 1ad5 6C07 CF1A 	  dw question_branch_,hash_s.begin
 7257 1ad9 C00A      	  dw semicolon_s_
 7258               	
 7259               	; ----------------------------------------------
 7260 1adb 650C      	  _colon_header d_dot_r_,"D.R"
 7261               	
 7262               	; doc{
GAS LISTING solo_forth.z80s 			page 133


 7263               	;
 7264               	; d.r  ( d n -- )
 7265               	;
 7266               	; Print a signed double number _d_ right justified in a field of
 7267               	; _n_ characters.
 7268               	;
 7269               	; }doc
 7270               	
 7271 1add F00A      	  dw to_r_ ; save n
 7272               	  ; Save the high order part of d under d,
 7273               	  ; to be used by `sign` to add a "-" sign to a negative number:
 7274 1adf D90B CC0B 	  dw swap_,over_
 7275 1ae3 E016      	  dw dabs_ ; convert d to its absolute value
 7276               	  ; Convert the absolute value to ASCII text with proper sign:
 7277 1ae5 7D1A      	  dw less_hash_
 7278 1ae7 CD1A      	  dw hash_s_
 7279 1ae9 991A      	  dw sign_
 7280 1aeb 871A      	  dw hash_greater_
 7281 1aed FF0A      	  dw from_r_ ; retrieve n
 7282 1aef CC0B D20D 	  dw over_,minus_,spaces_ ; fill the output field with preceding blanks
 7282      571A 
 7283 1af5 1A10      	  dw type_ ; type out the number
 7284 1af7 C00A      	  dw semicolon_s_
 7285               	
 7286               	; ----------------------------------------------
 7287 1af9 650C      	  _colon_header dot_r_,".R"
 7288               	
 7289 1afb F00A B116 	  dw to_r_,s_to_d_,from_r_,d_dot_r_
 7289      FF0A DB1A 
 7290 1b03 C00A      	  dw semicolon_s_
 7291               	
 7292               	; ----------------------------------------------
 7293 1b05 650C      	  _colon_header d_dot_,"D."
 7294               	
 7295               	; doc{
 7296               	;
 7297               	; d.  ( d -- )
 7298               	;
 7299               	; Print signed double integer _d_ according to current base,
 7300               	; followed by only one blank.
 7301               	;
 7302               	; }doc
 7303               	
 7304 1b07 C50C DB1A 	  dw zero_,d_dot_r_,space_
 7304      260E 
 7305 1b0d C00A      	  dw semicolon_s_
 7306               	
 7307               	; ----------------------------------------------
 7308 1b0f 650C      	  _colon_header dot_,"."
 7309               	
 7310               	; doc{
 7311               	;
 7312               	; .  ( n -- )
 7313               	;
 7314               	; Print signed integer _n_ according to current base, followed
 7315               	; by only one blank.
 7316               	;
GAS LISTING solo_forth.z80s 			page 134


 7317               	; }doc
 7318               	
 7319 1b11 B116 051B 	  dw s_to_d_,d_dot_
 7320 1b15 C00A      	  dw semicolon_s_
 7321               	
 7322               	; ----------------------------------------------
 7323 1b17 650C      	  _colon_header question_,"?"
 7324               	
 7325 1b19 1A0C 0F1B 	  dw fetch_,dot_
 7326 1b1d C00A      	  dw semicolon_s_
 7327               	
 7328               	; ----------------------------------------------
 7329 1b1f 650C      	  _colon_header u_dot_,"U."
 7330               	
 7331 1b21 C50C 051B 	  dw zero_,d_dot_
 7332 1b25 C00A      	  dw semicolon_s_
 7333               	
 7334               	; ----------------------------------------------
 7335               	
 7336               	.if 1
 7337               	
 7338 1b27 650C      	  _colon_header dot_s_,".S"
 7339               	
 7340               	  ; XXX TMP -- only during the development, then remove
 7341               	  ; It is already on the disk.
 7342               	
 7343 1b29 ED14 E00B 	  dw depth_,dup_,s_to_d_,less_hash_
 7343      B116 7D1A 
 7344 1b31 8306 3E   	  _literal '>'
 7345 1b34 6411 CD1A 	  dw hold_,hash_s_
 7346 1b38 8306 3C   	  _literal '<'
 7347 1b3b 6411 871A 	  dw hold_,hash_greater_,type_,space_
 7347      1A10 260E 
 7348 1b43 6007 611B 	  dw zero_branch_,dot_s.end
 7349               	
 7350 1b47 9D0A 710D 	  dw sp_fetch_,two_minus_,sp0_,fetch_,two_minus_
 7350      0B0D 1A0C 
 7350      710D 
 7351 1b51 AD07      	  dw paren_do_
 7352               	dot_s.do:
 7353 1b53 4408 1A0C 	  dw i_,fetch_,u_dot_ ; XXX TMP `u.`
 7353      1F1B 
 7354 1b59 8D06 FEFF 	  dw lit_,-2
 7355 1b5d A707 531B 	  dw paren_plus_loop_,dot_s.do
 7356               	dot_s.end:
 7357 1b61 C00A      	  dw semicolon_s_
 7358               	
 7359               	.endif
 7360               	
 7361               	; ----------------------------------------------
 7362 1b63 651B      	  _code_header colors0_,"COLORS0"
 7363               	
 7364               	; doc{
 7365               	;
 7366               	; colors0  ( -- )
 7367               	; 
 7368               	; Set the screen colors to the default values.
GAS LISTING solo_forth.z80s 			page 135


 7369               	;
 7370               	; }doc
 7371               	
 7372               	  ; Set the colors and their masks.
 7373               	
 7374 1b65 2A12 00   	  ld hl,(default_color_attribute)
 7375               	  ; l = 128*flash + 64*bright + 8*paper + ink
 7376               	  ; h = mask
 7377 1b68 228D 5C   	  ld (sys_attr_p),hl ; permanent
 7378 1b6b 228F 5C   	  ld (sys_attr_t),hl ; temporary
 7379               	
 7380               	  ; Set the system variable that holds the attributes of the
 7381               	  ; lower part of the screen.  It is needed only because G+DOS
 7382               	  ; by default changes the border color during disk operations,
 7383               	  ; and at the end restores it with the value of this system
 7384               	  ; variable.
 7385               	
 7386 1b6e 7D        	  ld a,l
 7387 1b6f 3248 5C   	  ld (sys_bordcr),a ; lower screen colors
 7388               	
 7389               	  ; Set the border color to the paper color.
 7390               	
 7391               	  ; a = 128*flash + 64*bright + 8*paper + ink
 7392 1b72 A7        	  and a ; cy=0
 7393 1b73 1F        	  rra
 7394 1b74 1F        	  rra
 7395 1b75 1F        	  rra ; a = paper
 7396 1b76 D3FE      	  out (border_port),a ; set the border color
 7397               	
 7398 1b78 DDE9      	  _jp_next
 7399               	
 7400               	; ----------------------------------------------
 7401 1b7a 7C1B      	  _code_header home_,"HOME"
 7402               	
 7403               	; doc{
 7404               	;
 7405               	; home  ( -- )
 7406               	;
 7407               	; Reset the cursor position to the upper left corner (column 0,
 7408               	; row 0).
 7409               	;
 7410               	; }doc
 7411               	
 7412 1b7c 2121 18   	  ld hl,0x1821 ; 0x18 = 24 - row
 7413               	               ; 0x21 = 33 - column
 7414 1b7f 2288 5C   	  ld (sys_s_posn),hl
 7415 1b82 DDE9      	  _jp_next
 7416               	
 7417               	; ----------------------------------------------
 7418 1b84 861B      	  _code_header cls_,"CLS"
 7419               	
 7420               	
 7421               	; doc{
 7422               	;
 7423               	; cls  ( -- )
 7424               	;
 7425               	; Clear the screen with the current colors and reset the cursor
GAS LISTING solo_forth.z80s 			page 136


 7426               	; position to the upper left corner (column 0, row 0).
 7427               	;
 7428               	; }doc
 7429               	
 7430               	; Note: The ROM routines that clear the screen are slow and do
 7431               	; many unnecessary BASIC-related things. This code simply clears
 7432               	; the screen.
 7433               	
 7434               	  ; XXX TODO compare size with Forth
 7435               	
 7436 1b86 D9        	  exx ; save the Forth IP
 7437               	  ; Erase the bitmap.
 7438 1b87 2100 40   	  ld hl,sys_screen
 7439 1b8a 1101 40   	  ld de,sys_screen+1
 7440 1b8d 0100 18   	  ld bc,sys_screen_bitmap_size
 7441 1b90 3600      	  ld (hl),0
 7442 1b92 EDB0      	  ldir
 7443               	  ; Color with the permanent attributes.
 7444 1b94 2100 58   	  ld hl,sys_screen_attributes
 7445 1b97 1101 58   	  ld de,sys_screen_attributes+1
 7446 1b9a 0100 03   	  ld bc,sys_screen_attributes_size
 7447 1b9d 3A8D 5C   	  ld a,(sys_attr_p)
 7448 1ba0 77        	  ld (hl),a
 7449 1ba1 EDB0      	  ldir
 7450 1ba3 D9        	  exx ; restore the Forth IP
 7451 1ba4 C37C 1B   	  jp home_pfa ; continue at `home`
 7452               	
 7453               	; ----------------------------------------------
 7454 1ba7 650C      	  _colon_header page_,"PAGE"
 7455               	
 7456               	; doc{
 7457               	;
 7458               	; page  ( -- )  \ ANS Forth
 7459               	;
 7460               	; Move to another page for output.  On a terminal, `page` clears
 7461               	; the screen and resets the cursor position to the upper left
 7462               	; corner. On a printer, `page` performs a form feed.
 7463               	;
 7464               	; }doc
 7465               	
 7466               	  ; XXX TODO printer support
 7467               	
 7468 1ba9 841B      	  dw cls_
 7469 1bab C00A      	  dw semicolon_s_
 7470               	
 7471               	; ----------------------------------------------
 7472 1bad AF1B      	  _code_header bye_,"BYE"
 7473               	
 7474 1baf FD36 3102 	  ld (iy+sys_df_sz_offset),0x02 ; restore lines of the lower screen
 7475               	system_stack_pointer: equ $+1
 7476 1bb3 3100 00   	  ld sp,0 ; restore the system stack
 7477               	.if latin1_charset_in_bank
 7478               	  ; Restore the default charset:
 7479               	  ld hl,15360
 7480               	  ld (sys_chars),hl
 7481               	.endif
 7482               	  ; Exit to BASIC:
GAS LISTING solo_forth.z80s 			page 137


 7483 1bb6 CF        	  rst 0x08
 7484 1bb7 08        	  db 0x08 ; "STOP" BASIC error
 7485               	
 7486               	; ----------------------------------------------
 7487 1bb8 BA1B      	  _code_header two_drop_,"2DROP"
 7488               	
 7489 1bba E1        	  pop hl
 7490 1bbb E1        	  pop hl
 7491 1bbc DDE9      	  _jp_next
 7492               	
 7493               	; ----------------------------------------------
 7494 1bbe C01B      	  _code_header two_swap_,"2SWAP"
 7495               	
 7496               	  ; [Code from DZX-Forth.]
 7497               	
 7498 1bc0 E1        	  pop hl
 7499 1bc1 D1        	  pop de
 7500 1bc2 E3        	  ex (sp),hl
 7501 1bc3 E5        	  push hl
 7502 1bc4 2105 00   	  ld hl,5
 7503 1bc7 39        	  add hl,sp
 7504 1bc8 7E        	  ld a,(hl)
 7505 1bc9 72        	  ld (hl),d
 7506 1bca 57        	  ld d,a
 7507 1bcb 2B        	  dec hl
 7508 1bcc 7E        	  ld a,(hl)
 7509 1bcd 73        	  ld (hl),e
 7510 1bce 5F        	  ld e,a
 7511 1bcf E1        	  pop hl
 7512 1bd0 C35D 05   	  jp push_hlde
 7513               	
 7514               	; ----------------------------------------------
 7515 1bd3 650C      	  _colon_header unused_,"UNUSED"
 7516               	
 7517               	  ; XXX TMP
 7518 1bd5 C50C 900D 	  dw zero_,here_,minus_
 7518      D20D 
 7519 1bdb C00A      	  dw semicolon_s_
 7520               	
 7521               	; ----------------------------------------------
 7522 1bdd 650C      	  _colon_header where_,"WHERE"
 7523               	
 7524               	  ; XXX TODO -- remove; already copied to the disk
 7525               	
 7526 1bdf 5F13 2C0C 	  dw error_pos_,two_fetch_ ; XXX NEW
 7527 1be3 E00B      	  dw dup_
 7528 1be5 6C07 ED1B 	  dw question_branch_,where.do_it
 7529 1be9 B81B      	  dw two_drop_
 7530 1beb C00A      	  dw semicolon_s_
 7531               	
 7532               	where.do_it:
 7533 1bed E00B F50C 	  dw dup_,b_slash_scr_,slash_
 7533      6117 
 7534 1bf3 4D10      	  dw paren_dot_quote_
 7535 1bf5 0827 5363 	  _string 'Scr # '
 7535      7220 2320 
 7535      27
GAS LISTING solo_forth.z80s 			page 138


 7536 1bfe BE0F 0F1B 	  dw decimal_,dot_
 7537 1c02 D90B E50C 	  dw swap_,c_slash_l_,slash_mod_,c_slash_l_,star_
 7537      5517 E50C 
 7537      4D17 
 7538 1c0c 1E0E 6818 	  dw rot_,block_,plus_
 7538      810B 
 7539 1c12 E50C CD09 	  dw c_slash_l_,cr_,type_,cr_
 7539      1A10 CD09 
 7540 1c1a 900D 230C 	  dw here_,c_fetch_,minus_,spaces_
 7540      D20D 571A 
 7541 1c22 8306 5E   	  _literal '^'
 7542 1c25 EC08      	  dw emit_
 7543 1c27 C00A      	  dw semicolon_s_
 7544               	
 7545               	; ----------------------------------------------
 7546 1c29 650C      	  _colon_header at_xy,"AT-XY"
 7547               	
 7548               	; doc{
 7549               	
 7550               	; at-xy ( col line -- )  \ ANS Forth
 7551               	
 7552               	; Warning: The system will crash if the coordinates are out of screen.
 7553               	; For the sake of speed, no check is done.  A wrapper secure word can
 7554               	; be written if needed.
 7555               	
 7556               	; }doc
 7557               	
 7558               	; [Code adapted from Spectrum Forth-83.]
 7559               	
 7560 1c2b E00B      	  dw dup_
 7561 1c2d 8306 17   	  _literal 23
 7562 1c30 DC0D      	  dw not_equals_ ; not the last line?
 7563 1c32 6007 421C 	  dw zero_branch_,at_pfa.last_line
 7564               	  ; not the last line
 7565 1c36 8D06 1600 	  dw lit_,22,paren_emit_,paren_emit_,paren_emit_
 7565      F808 F808 
 7565      F808 
 7566 1c40 C00A      	  dw semicolon_s_ ; XXX TODO exit_
 7567               	
 7568               	at_pfa.last_line:
 7569 1c42 6A0D E00B 	  dw one_minus_,dup_,paren_emit_,paren_emit_,zero_,paren_emit_
 7569      F808 F808 
 7569      C50C F808 
 7570 1c4e CD09      	  dw cr_
 7571 1c50 E00B      	  dw dup_
 7572 1c52 8D06 845C 	  dw lit_,sys_df_cc ; address in display file of print position
 7573 1c56 F00B      	  dw plus_store_
 7574 1c58 8306 21   	  _literal 33
 7575 1c5b D90B      	  dw swap_
 7576 1c5d D20D      	  dw minus_
 7577 1c5f 8D06 885C 	  dw lit_,sys_s_posn ; 33 minus column number for print position
 7578 1c63 520C      	  dw c_store_
 7579 1c65 C00A      	  dw semicolon_s_
 7580               	
 7581               	; ----------------------------------------------
 7582 1c67 691C      	  _code_header border_,"BORDER"
 7583               	
GAS LISTING solo_forth.z80s 			page 139


 7584 1c69 E1        	  pop hl
 7585 1c6a 7D        	  ld a,l
 7586 1c6b D3FE      	  out (border_port),a
 7587               	
 7588               	  ; The system variable that holds the attributes of the lower
 7589               	  ; part of the screen, unnecessary in Solo Forth, must be
 7590               	  ; updated.  The reason is G+DOS, after disk operations that
 7591               	  ; make the border change, restores the border color with the
 7592               	  ; value of this system variable.  We use the border color as
 7593               	  ; paper and set a a contrast ink (black or white), to make
 7594               	  ; sure the lower part of the screen is usable after returning
 7595               	  ; to BASIC.
 7596               	
 7597               	  ; XXX TODO move the contrast ink calculation to `bye` or
 7598               	  ; simply remove it:
 7599               	
 7600 1c6d FE04      	  cp 4 ; cy = dark color (0..3)?
 7601 1c6f 3E07      	  ld a,7 ; white ink
 7602 1c71 3801      	  jr c,border.end
 7603 1c73 AF        	  xor a ; black ink
 7604               	
 7605               	border.end:
 7606               	  ; Note: slower than shifting the register, but saves three bytes.
 7607 1c74 29        	  add hl,hl
 7608 1c75 29        	  add hl,hl
 7609 1c76 29        	  add hl,hl ; l = paper (bits 3..5)
 7610 1c77 B5        	  or l ; combine with ink
 7611 1c78 3248 5C   	  ld (sys_bordcr),a
 7612 1c7b DDE9      	  _jp_next
 7613               	
 7614               	; ----------------------------------------------
 7615 1c7d 7F1C      	  _code_header overwrite_,"OVERWRITE"
 7616               	
 7617 1c7f 3E15      	  ld a,over_char
 7618 1c81 C3A4 1C   	  jp color
 7619               	
 7620               	; ----------------------------------------------
 7621 1c84 861C      	  _code_header flash_,"FLASH"
 7622               	
 7623 1c86 3E12      	  ld a,flash_char
 7624 1c88 C3A4 1C   	  jp color
 7625               	
 7626               	; ----------------------------------------------
 7627 1c8b 8D1C      	  _code_header inverse_,"INVERSE"
 7628               	
 7629 1c8d 3E14      	  ld a,inverse_char
 7630 1c8f C3A4 1C   	  jp color
 7631               	
 7632               	; ----------------------------------------------
 7633 1c92 941C      	  _code_header bright_,"BRIGHT"
 7634               	
 7635 1c94 3E13      	  ld a,bright_char
 7636 1c96 C3A4 1C   	  jp color
 7637               	
 7638               	; ----------------------------------------------
 7639 1c99 9B1C      	  _code_header paper_,"PAPER"
 7640               	
GAS LISTING solo_forth.z80s 			page 140


 7641 1c9b 3E11      	  ld a,paper_char
 7642 1c9d C3A4 1C   	  jp color
 7643               	
 7644               	; ----------------------------------------------
 7645 1ca0 A21C      	  _code_header ink_,"INK"
 7646               	
 7647 1ca2 3E10      	  ld a,ink_char
 7648               	
 7649               	color:
 7650               	  ; Set a color attribute (ink, paper, bright, flash, inverse or
 7651               	  ; overwrite).
 7652               	  ; Input:
 7653               	  ;   a = attribute control char
 7654               	  ;   (tos) = color attribute value
 7655 1ca4 D7        	  rst 0x10
 7656 1ca5 E1        	  pop hl
 7657 1ca6 7D        	  ld a,l
 7658 1ca7 D7        	  rst 0x10
 7659 1ca8 CDAD 1C   	  call rom_set_permanent_colors_0x1CAD
 7660 1cab DDE9      	  _jp_next
 7661               	
 7662               	; ----------------------------------------------
 7663 1cad AF1C      	  _code_header emitted_,"EMITTED"
 7664               	
 7665               	  ; [Code adapted and modified from the ZX Spectrum ROM routine
 7666               	  ; S-SCRN$-S at 0x2535.]
 7667               	
 7668               	; doc{
 7669               	;
 7670               	; emitted  ( col row -- n | 0 )
 7671               	;
 7672               	; Return the ordinal number _n_ (first is 1) of the character
 7673               	; printed at the given screen coordinates, or 0 if no character
 7674               	; can be recognized on that position of the screen.
 7675               	;
 7676               	; This word must be configured by `emitted-charset` and
 7677               	; `#emitted-chars`, that set the address of the first character
 7678               	; and the number of characters to compare with. By default the
 7679               	; printable ASCII chars of the ROM charset are used.
 7680               	;
 7681               	; The result _n_ is the ordinal number (first is 1) of the
 7682               	; recognized char in the specified charset. Example: with the
 7683               	; default configuration, a recognized space char would return 1;
 7684               	; a "!" char, 2; a "A", 34...
 7685               	;
 7686               	; This word is meant to be used with user defined graphics.
 7687               	;
 7688               	; }doc
 7689               	
 7690               	  ; XXX TODO improve the result
 7691               	  ;
 7692               	  ; XXX TODO move to the disk
 7693               	  ;
 7694               	  ; XXX TODO rename?: `ocr`, `recognized`, `on-xy`, `xy-char`?
 7695               	  ; The reasen is name clash with the fig-Forth `out` counter,
 7696               	  ; that was going to be called `emitted` or `#emitted`.
 7697               	
GAS LISTING solo_forth.z80s 			page 141


 7698 1caf D1        	  pop de ; row
 7699 1cb0 E1        	  pop hl ; col
 7700 1cb1 C5        	  push bc ; save the Forth IP
 7701 1cb2 45        	  ld b,l ; column
 7702 1cb3 4B        	  ld c,e ; row
 7703 1cb4 2A00 1D   	  ld hl,(emitted_charset_pfa) ; address of first printable char in the charset
 7704 1cb7 79        	  ld a,c  ; row
 7705 1cb8 0F        	  rrca
 7706 1cb9 0F        	  rrca
 7707 1cba 0F        	  rrca ; multiply by 0x20
 7708 1cbb E6E0      	  and  %11100000
 7709 1cbd A8        	  xor  b ; combine with column (0x00..0x1F)
 7710 1cbe 5F        	  ld  e,a ; low byte of top row = 0x20 * (line mod 8) + column
 7711 1cbf 79        	  ld  a,c  ; row is copied to a again
 7712 1cc0 E618      	  and  0x18
 7713 1cc2 EE40      	  xor  0x40
 7714 1cc4 57        	  ld  d,a ; high byte of top row = 64 + 8*int (line/8)
 7715               	  ; de = screen address
 7716 1cc5 3A04 1D   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7717 1cc8 47        	  ld b,a
 7718               	
 7719               	emitted.do:
 7720 1cc9 C5        	  push  bc  ; save the characters count
 7721 1cca D5        	  push  de  ; save the screen pointer
 7722 1ccb E5        	  push  hl  ; save the character set pointer (bitmap start)
 7723 1ccc 1A        	  ld  a,(de)  ; get first scan of screen character
 7724 1ccd AE        	  xor  (hl)  ; match with scan from character set
 7725 1cce CAD6 1C   	  jp z,emitted.match  ; jump if direct match found
 7726               	  ; if inverse, a=0xFF
 7727 1cd1 3C        	  inc  a  ; inverse? (if inverse, a=0)
 7728 1cd2 C2EE 1C   	  jp  nz,emitted.next_char  ; jump if inverse match not found
 7729               	  ; inverse match
 7730 1cd5 3D        	  dec  a  ; restore 0xFF
 7731               	emitted.match:
 7732 1cd6 4F        	  ld  c,a  ; inverse mask (0x00 or 0xFF)
 7733 1cd7 0607      	  ld  b,0x07  ; count 7 more character rows
 7734               	emitted.scans:
 7735 1cd9 14        	  inc  d  ; next screen scan (add 0x100)
 7736 1cda 23        	  inc  hl  ; next bitmap address
 7737 1cdb 1A        	  ld  a,(de)  ; screen scan
 7738 1cdc AE        	  xor  (hl)  ; will give 0x00 or 0xFF (inverse)
 7739 1cdd A9        	  xor  c  ; inverse mask to include the inverse status
 7740 1cde C2EE 1C   	  jp  nz,emitted.next_char  ; jump if no match
 7741 1ce1 10F6      	  djnz  emitted.scans  ; jump back till all scans done
 7742               	
 7743               	  ; character match
 7744 1ce3 C1        	  pop  bc  ; discard character set pointer
 7745 1ce4 C1        	  pop  bc  ; discard screen pointer
 7746 1ce5 C1        	  pop  bc  ; final count
 7747 1ce6 3A04 1D   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7748 1ce9 90        	  sub  b ; ordinal number of the matched character (1 is the first)
 7749 1cea 6F        	  ld l,a
 7750 1ceb C3F8 1C   	  jp emitted.end
 7751               	
 7752               	emitted.next_char:
 7753 1cee E1        	  pop  hl  ; restore character set pointer
 7754 1cef 1108 00   	  ld  de,0x0008  ; move it on 8 bytes
GAS LISTING solo_forth.z80s 			page 142


 7755 1cf2 19        	  add  hl,de  ; to the next character in the set
 7756 1cf3 D1        	  pop  de  ; restore the screen pointer
 7757 1cf4 C1        	  pop  bc  ; restore the counter
 7758 1cf5 10D2      	  djnz  emitted.do  ; loop back for the 96 characters
 7759               	  ; no match
 7760 1cf7 68        	  ld l,b ; zero
 7761               	
 7762               	emitted.end:
 7763 1cf8 C1        	  pop bc ; restore the Forth IP
 7764 1cf9 2600      	  ld h,0
 7765 1cfb C35E 05   	  jp push_hl
 7766               	
 7767               	; ----------------------------------------------
 7768 1cfe 1C14      	  _variable_header emitted_charset_,"EMITTED-CHARSET"
 7769               	
 7770               	; doc{
 7771               	;
 7772               	; emitted-charset  ( -- a )
 7773               	;
 7774               	; Variable that holds the address of the first printable char in
 7775               	; the charset used by `emitted`. By default it contains 0x3D00, the
 7776               	; address of the space char in the ROM charset.
 7777               	;
 7778               	; }doc
 7779               	
 7780 1d00 003D      	  dw 0x3D00 ; address of the space in the ROM charset
 7781               	
 7782               	; ----------------------------------------------
 7783 1d02 1C14      	  _variable_header hash_emitted_chars_,"#EMITTED-CHARS"
 7784               	
 7785               	; doc{
 7786               	;
 7787               	; #emitted-charset  ( -- a )
 7788               	;
 7789               	; Variable that holds the number of printable chars in the
 7790               	; charset used by `emitted`. By default it contais 0x5F, the
 7791               	; number of printable ASCII chars in the ROM charset.
 7792               	;
 7793               	; }doc
 7794               	
 7795 1d04 5F00      	  dw 0x5F ; printable ASCII chars in the ROM charset
 7796               	
 7797               	; ----------------------------------------------
 7798 1d06 081D      	  _code_header j_,"J"
 7799               	
 7800               	; doc{
 7801               	;
 7802               	; j  ( -- x ) ( R: loop-sys1 loop-sys2 -- loop-sys1 loop-sys2 ) \ ANS Forth
 7803               	;
 7804               	; Return a copy of the next-outer loop index.
 7805               	;
 7806               	; }doc
 7807               	
 7808 1d08 2A10 00   	  ld hl,(return_stack_pointer)
 7809 1d0b 1104 00   	  ld de,cell*2
 7810 1d0e 19        	  add hl,de
 7811 1d0f C31D 0C   	  jp fetch.hl
GAS LISTING solo_forth.z80s 			page 143


 7812               	
 7813               	; ----------------------------------------------
 7814 1d12 650C      	  _colon_header two_constant_,"2CONSTANT"
 7815               	
 7816 1d14 1D1D      	  dw two_variable_
 7817 1d16 C90F      	  dw paren_semicolon_code_
 7818               	do_two_constant:
 7819 1d18 13        	  inc de    ; de=pfa
 7820 1d19 EB        	  ex de,hl  ; hl=pfa
 7821 1d1a C32F 0C   	  jp two_fetch.hl
 7822               	
 7823               	; ----------------------------------------------
 7824 1d1d 650C      	  _colon_header two_variable_,"2VARIABLE"
 7825               	
 7826               	; doc{
 7827               	;
 7828               	; 2variable ( "name" -- )  \ ANS Forth
 7829               	;
 7830               	; Parse _name_.  Create a definition for _name_ with the
 7831               	; execution semantics defined below. Reserve two consecutive
 7832               	; cells of data space.
 7833               	;
 7834               	;    _name_ is referred to as a two-variable.
 7835               	;
 7836               	;          name Execution: ( -- a )
 7837               	;
 7838               	;    _a_ is the address of the first (lowes address) cell of two
 7839               	;    consecutive cells. A program is responsible for
 7840               	;    initializing the contents.
 7841               	;
 7842               	; }doc
 7843               	
 7844 1d1f 1414      	  dw create_
 7845 1d21 8D06 0400 	  dw lit_,cell*2,allot_
 7845      980D 
 7846 1d27 C00A      	  dw semicolon_s_
 7847               	
 7848               	; ----------------------------------------------
 7849 1d29 650C      	  _colon_header u_dot_r_,"U.R"
 7850               	
 7851 1d2b F00A C50C 	  dw to_r_,zero_,from_r_,d_dot_r_
 7851      FF0A DB1A 
 7852 1d33 C00A      	  dw semicolon_s_
 7853               	
 7854               	; ----------------------------------------------
 7855 1d35 371D      	  _code_header two_over_,"2OVER"
 7856               	
 7857               	; doc{
 7858               	;
 7859               	; 2over  ( d1 d2 -- d1 d2 d1 )
 7860               	;
 7861               	; }doc
 7862               	
 7863 1d37 2104 00   	  ld hl,4
 7864 1d3a 39        	  add hl,sp
 7865 1d3b C32F 0C   	  jp two_fetch.hl
 7866               	
GAS LISTING solo_forth.z80s 			page 144


 7867               	.if 1 ; fig_exit?
 7868               	
 7869               	; ----------------------------------------------
 7870 1d3e 650C      	  _colon_header exit_,"EXIT"
 7871               	
 7872               	; doc{
 7873               	;
 7874               	; exit  ( -- ) ( R: a -- )  \ ANS Forth
 7875               	;
 7876               	; Return control to the calling definition, specified by the
 7877               	; address on the return stack.
 7878               	;
 7879               	; Before executing `exit` within a do-loop, a program shall
 7880               	; discard the loop-control parameters by executing `unloop`.
 7881               	;
 7882               	; }doc
 7883               	
 7884               	; XXX TODO combine this `exit` with `;s`?
 7885               	
 7886 1d40 1C0B      	  dw r_drop_
 7887 1d42 C00A      	  dw semicolon_s_
 7888               	
 7889               	; ----------------------------------------------
 7890 1d44 650C      	  _colon_header question_exit_,"?EXIT"
 7891               	
 7892               	; doc{
 7893               	;
 7894               	; ?exit  ( f -- ) ( R: a | -- a | )
 7895               	;
 7896               	; If _f_ is non-zero, return control to the calling definition,
 7897               	; specified by the address on the return stack.
 7898               	;
 7899               	; `?exit` is not intended to be used within a do-loop. Use `if
 7900               	; unloop exit then` instead.
 7901               	;
 7902               	; }doc
 7903               	
 7904 1d46 6C07 401D 	  dw question_branch_,exit_pfa
 7905 1d4a C00A      	  dw semicolon_s_
 7906               	
 7907               	.else
 7908               	
 7909               	; ----------------------------------------------
 7910               	  _code_header question_exit_,"?EXIT"
 7911               	
 7912               	; doc{
 7913               	;
 7914               	; ?exit  ( f -- ) ( R: a | -- a | )
 7915               	;
 7916               	; If _f_ is non-zero, return control to the calling definition,
 7917               	; specified by the address on the return stack.
 7918               	;
 7919               	; `?exit` is not intended to be used within a do-loop. Use `if
 7920               	; unloop exit then` instead.
 7921               	;
 7922               	; }doc
 7923               	
GAS LISTING solo_forth.z80s 			page 145


 7924               	  pop hl
 7925               	  ld h,a
 7926               	  or l
 7927               	  jp nz,exit_pfa
 7928               	  _jp_next
 7929               	
 7930               	.endif
 7931               	
 7932               	; ----------------------------------------------
 7933 1d4c 650C      	  _colon_header char_,"CHAR"
 7934               	
 7935 1d4e B511 D40B 	  dw parse_name_,drop_,c_fetch_
 7935      230C 
 7936 1d54 C00A      	  dw semicolon_s_
 7937               	
 7938               	; ----------------------------------------------
 7939 1d56 650C      	  _colon_header bracket_char_,"[CHAR]",immediate
 7940               	
 7941 1d58 4C1D CD14 	  dw char_,literal_
 7942 1d5c C00A      	  dw semicolon_s_
 7943               	
 7944               	; ----------------------------------------------
 7945               	  ;_colon_header s_quote_,"S\"",immediate ; XXX FIXME as error
 7946 1d5e 650C      	  _colon_header s_quote_,"S\x22",immediate
 7947               	
 7948               	  ; : s"  ( compilation: "text<">" -- ) ( run-time:  -- ca len )
 7949               	  ;  [char] " (s)  ; immediate
 7950               	
 7951 1d60 8306 22   	  _literal '"'
 7952 1d63 7106      	  dw paren_s_
 7953 1d65 C00A      	  dw semicolon_s_
 7954               	
 7955               	; ----------------------------------------------
 7956 1d67 650C      	  _colon_header question_next_screen_,"?-->",immediate
 7957               	
 7958 1d69 6007 6F1D 	  dw zero_branch_,question_next_screen.end
 7959 1d6d 5F19      	  dw next_screen_
 7960               	question_next_screen.end:
 7961 1d6f C00A      	  dw semicolon_s_
 7962               	
 7963               	  ; XXX TODO a good place to use `??` instead of a branch:
 7964               	;  dw question_question_,next_screen_
 7965               	;  dw semicolon_s_
 7966               	
 7967               	; ----------------------------------------------
 7968 1d71 650C      	  _colon_header question_backslash_,"?\\",immediate
 7969               	
 7970               	; doc{
 7971               	;
 7972               	; ?\  ( f "ccc<eol> -- )
 7973               	;
 7974               	; If _f_ is not false, parse and discard the rest of the parse
 7975               	; area. This word is used for conditional compilation.
 7976               	;
 7977               	; }doc
 7978               	
 7979 1d73 6007 791D 	  dw zero_branch_,question_backslash.end
GAS LISTING solo_forth.z80s 			page 146


 7980 1d77 7B1D      	  dw backslash_
 7981               	question_backslash.end:
 7982 1d79 C00A      	  dw semicolon_s_
 7983               	
 7984               	; ----------------------------------------------
 7985 1d7b 650C      	  _colon_header backslash_,"\\",immediate
 7986               	
 7987               	; doc{
 7988               	;
 7989               	; \  ( -- )
 7990               	; 
 7991               	; Parse and discard the rest of the parse area.
 7992               	;
 7993               	; }doc
 7994               	
 7995 1d7d 210D 1A0C 	  dw to_in_,fetch_,c_slash_l_,mod_
 7995      E50C 6917 
 7996 1d85 E50C D90B 	  dw c_slash_l_,swap_,minus_
 7996      D20D 
 7997 1d8b 210D F00B 	  dw to_in_,plus_store_
 7998 1d8f C00A      	  dw semicolon_s_
 7999               	
 8000               	; ----------------------------------------------
 8001 1d91 650C      	  _colon_header dot_paren_,".(",immediate
 8002               	
 8003               	; doc{
 8004               	;
 8005               	; .(  ( 'text<paren>' -- )  \ immediate
 8006               	;
 8007               	; }doc
 8008               	
 8009 1d93 8306 29   	  _literal ')'
 8010 1d96 A711 1A10 	  dw parse_,type_
 8011 1d9a C00A      	  dw semicolon_s_
 8012               	
 8013               	latest_nfa_in_forth_voc: equ dot_paren_nfa
 8014               	
 8015               	dictionary_pointer_after_cold:
 8016               	
 8017               	; ==============================================================
 8018               	; Name and link fields
 8019               	
 8020               	move_name_fields_to_memory_bank:
 8021               	
 8022               	  ; Move the name fields, assembled in ordinary memory, to the
 8023               	  ; names bank. This routine is needed only once, therefore its
 8024               	  ; call is patched with `noop` at the end; the routine itself
 8025               	  ; will be overwritten by the Forth dictionary.
 8026               	
 8027               	  ; The whole screen is used as intermediate buffer for copying
 8028               	  ; the data.
 8029               	
 8030 1d9c 2100 C0   	  ld hl,names_bank_address ; origin
 8031 1d9f 1100 40   	  ld de,sys_screen ; destination
 8032 1da2 0100 1B   	  ld bc,sys_screen_size ; count
 8033 1da5 EDB0      	  ldir ; copy the data to the screen
 8034               	  ;_z80_border_wait 1 ; XXX INFORMER
GAS LISTING solo_forth.z80s 			page 147


 8035 1da7 1E01      	  ld e,names_bank
 8036 1da9 CDA0 06   	  call bank.e
 8037 1dac 2100 40   	  ld hl,sys_screen ; origin
 8038 1daf 1100 C0   	  ld de,names_bank_address ; destination
 8039 1db2 0100 1B   	  ld bc,sys_screen_size ; count
 8040 1db5 EDB0      	  ldir ; copy the name fields to the bank
 8041               	  ;_z80_border_wait 2 ; XXX INFORMER
 8042               	.if latin1_charset_in_bank
 8043               	  ld hl,sys_screen+sys_screen_size-charset_size ; origin
 8044               	  ld de,charset_address ; destination
 8045               	  ld bc,charset_size ; count
 8046               	  ldir ; copy the charset to the bank
 8047               	.endif
 8048 1db7 1E00      	  ld e,default_bank
 8049 1db9 CDA0 06   	  call bank.e
 8050               	
 8051               	  ; Erase the default bank (not necessary) ; XXX OLD
 8052               	  ; ld hl,names_bank_address ; the first byte is 0
 8053               	  ; ld de,names_bank_address+1
 8054               	  ; ld bc,sys_screen
 8055               	  ; ldir
 8056               	
 8057               	  ; Remove the call to this routine:
 8058 1dbc 219E 16   	  ld hl,only_first_cold ; address of the call to this routine
 8059 1dbf 3600      	  ld (hl),0 ; nop
 8060 1dc1 23        	  inc hl
 8061 1dc2 3600      	  ld (hl),0 ; nop
 8062 1dc4 23        	  inc hl
 8063 1dc5 3600      	  ld (hl),0 ; nop
 8064               	  ;_z80_border_wait 3 ; XXX INFORMER
 8065 1dc7 C9        	  ret
 8066               	
 8067               	; ==============================================================
 8068               	; Character set
 8069               	
 8070               	; XXX OLD
 8071               	
 8072               	.if latin1_charset_in_bank
 8073               	
 8074               	  .org names_bank_address+sys_screen_size-charset_size
 8075               	
 8076               	  incbin solo_forth.charset.bin
 8077               	
 8078               	.endif
 8079               	
 8080               	; ==============================================================
 8081               	; End
 8082               	
 8083               	.end
GAS LISTING solo_forth.z80s 			page 148


DEFINED SYMBOLS
                            *ABS*:00000000 fake
                            *ABS*:00000000 false
     solo_forth.z80s:444    .text:00000000 cold_entry
     solo_forth.z80s:6022   .text:0000169a cold_start
     solo_forth.z80s:447    .text:00000003 warm_entry
     solo_forth.z80s:5972   .text:00001630 warm_start
     solo_forth.z80s:456    .text:00000006 latest_nfa_in_root_voc.init_value
     solo_forth.z80s:201    .data:00000018 latest_nfa_in_root_voc
     solo_forth.z80s:459    .text:00000008 latest_nfa_in_forth_voc.init_value
     solo_forth.z80s:7946   .data:0000100f latest_nfa_in_forth_voc
     solo_forth.z80s:462    .text:0000000a latest_nfa_in_assembler_voc.init_value
     solo_forth.z80s:201    .data:000000a4 latest_nfa_in_assembler_voc
     solo_forth.z80s:465    .text:0000000c voc_link.init_value
     solo_forth.z80s:1412   .text:0000065d assembler_vocabulary_link
     solo_forth.z80s:468    .text:0000000e user_variables_pointer
     solo_forth.z80s:547    .text:00000032 user_variables
     solo_forth.z80s:471    .text:00000010 return_stack_pointer
     solo_forth.z80s:645    .text:00000307 return_stack_bottom
     solo_forth.z80s:474    .text:00000012 default_color_attribute
     solo_forth.z80s:494    .text:00000014 default_user_variables_start
     solo_forth.z80s:496    .text:00000014 s0_init_value
     solo_forth.z80s:631    .text:00000214 data_stack_bottom
     solo_forth.z80s:498    .text:00000016 r0_init_value
     solo_forth.z80s:501    .text:0000001a width_init_value
     solo_forth.z80s:503    .text:0000001c warning_init_value
     solo_forth.z80s:506    .text:00000020 dp_init_value
     solo_forth.z80s:8015   .text:00001d9c dictionary_pointer_after_cold
     solo_forth.z80s:516    .text:00000024 blk_init_value
     solo_forth.z80s:518    .text:00000026 in_init_value
     solo_forth.z80s:520    .text:00000028 out_init_value
     solo_forth.z80s:522    .text:0000002a scr_init_value
     solo_forth.z80s:529    .text:0000002c default_user_variables_end
     solo_forth.z80s:531    .text:0000002c ip_backup
     solo_forth.z80s:536    .text:0000002e names_pointer
     solo_forth.z80s:540    .text:00000030 names_pointer_init_value
     solo_forth.z80s:553    .text:00000032 s0_value
     solo_forth.z80s:555    .text:00000034 r0_value
     solo_forth.z80s:559    .text:00000038 width_value
     solo_forth.z80s:561    .text:0000003a warning_value
     solo_forth.z80s:565    .text:0000003e dp_value
     solo_forth.z80s:571    .text:00000042 blk_value
     solo_forth.z80s:573    .text:00000044 in_value
     solo_forth.z80s:575    .text:00000046 out_value
     solo_forth.z80s:577    .text:00000048 scr_value
     solo_forth.z80s:579    .text:0000004a number_tib_value
     solo_forth.z80s:581    .text:0000004c hld_value
     solo_forth.z80s:583    .text:0000004e current_value
     solo_forth.z80s:585    .text:00000050 state_value
     solo_forth.z80s:587    .text:00000052 base_value
     solo_forth.z80s:589    .text:00000054 dpl_value
     solo_forth.z80s:591    .text:00000056 fld_value
     solo_forth.z80s:593    .text:00000058 csp_value
     solo_forth.z80s:595    .text:0000005a r_hash_value
     solo_forth.z80s:598    .text:0000005c context_value
     solo_forth.z80s:1398   .text:00000655 forth_pfa
     solo_forth.z80s:1389   .text:0000064f root_pfa
GAS LISTING solo_forth.z80s 			page 149


     solo_forth.z80s:619    .text:00000072 csb
     solo_forth.z80s:620    .text:00000072 unused_csb
     solo_forth.z80s:622    .text:00000074 csb0
     solo_forth.z80s:636    .text:00000214 terminal_input_buffer
     solo_forth.z80s:656    .text:00000307 disk_buffer
                            *ABS*:00000000 _header
                            *ABS*:00000000 _code_header
                            *ABS*:00000000 _code_alias_header
                            *ABS*:00000000 _colon_header
                            *ABS*:00000000 _user_variable_header
                            *ABS*:00000000 _does_header
                            *ABS*:00000000 _constant_header
                            *ABS*:00000000 _variable_header
                            *ABS*:00000000 _two_variable_header
                            *ABS*:00000000 _string
                            *ABS*:00000000 _literal
                            *ABS*:00000000 _jp_next
                            *ABS*:00000000 _jump
                            *ABS*:00000000 _jump_nc
                            *ABS*:00000000 _jump_z
                            *ABS*:00000000 _bank
                            *ABS*:00000000 _names_bank
                            *ABS*:00000000 _default_bank
                            *ABS*:00000000 _question_error
                            *ABS*:00000000 _message
                            *ABS*:00000000 _z80_border
                            *ABS*:00000000 _z80_border_wait
                            *ABS*:00000000 _echo
     solo_forth.z80s:920    .text:0000050c compare_de_hl_unsigned
     solo_forth.z80s:934    .text:00000512 compare_de_hl_signed
     solo_forth.z80s:951    .text:0000051c move_block
     solo_forth.z80s:998    .text:00000528 move_block_downwards
     solo_forth.z80s:969    .text:00000522 move_block_upwards
     solo_forth.z80s:1017   .text:00000534 a_multiplied_by_de_to_ahl
     solo_forth.z80s:1020   .text:00000539 a_multiplied_by_de_to_ahl.1
     solo_forth.z80s:1026   .text:00000541 a_multiplied_by_de_to_ahl.2
     solo_forth.z80s:1035   .text:00000546 hl_multiplied_by_de_to_hlde_unsigned
     solo_forth.z80s:1058   .text:0000055d push_hlde
     solo_forth.z80s:1061   .text:0000055e push_hl
     solo_forth.z80s:1064   .text:0000055f next
     solo_forth.z80s:1077   .text:00000565 next2
     solo_forth.z80s:1088   .text:00000569 next2_end
     solo_forth.z80s:1101   .text:0000056a root_x_
     solo_forth.z80s:201    .data:00000001 root_x_cfap
     solo_forth.z80s:201    .data:00000003 root_x_lfa
     solo_forth.z80s:201    .data:00000005 root_x_nfa
     solo_forth.z80s:7946   .data:00001012 _address_after_name
     solo_forth.z80s:7946   .data:00001010 _name_address
     solo_forth.z80s:1101   .text:0000056c root_x_pfa
     solo_forth.z80s:4838   .text:0000111b x_
     solo_forth.z80s:1116   .text:00000572 root_forth_
     solo_forth.z80s:201    .data:0000000a root_forth_cfap
     solo_forth.z80s:201    .data:0000000c root_forth_lfa
     solo_forth.z80s:201    .data:0000000e root_forth_nfa
     solo_forth.z80s:3464   .text:00000c65 do_colon
     solo_forth.z80s:1116   .text:00000574 root_forth_pfa
     solo_forth.z80s:1398   .text:00000653 forth_
GAS LISTING solo_forth.z80s 			page 150


     solo_forth.z80s:2950   .text:00000ac0 semicolon_s_
     solo_forth.z80s:1122   .text:00000578 root_definitions_
     solo_forth.z80s:201    .data:00000014 root_definitions_cfap
     solo_forth.z80s:201    .data:00000016 root_definitions_lfa
     solo_forth.z80s:201    .data:00000018 root_definitions_nfa
     solo_forth.z80s:1122   .text:0000057a root_definitions_pfa
     solo_forth.z80s:5859   .text:0000158c definitions_
     solo_forth.z80s:1136   .text:0000057e abase_
     solo_forth.z80s:201    .data:00000024 abase_cfap
     solo_forth.z80s:201    .data:00000026 abase_lfa
     solo_forth.z80s:201    .data:00000028 abase_nfa
     solo_forth.z80s:5449   .text:0000141c do_create
     solo_forth.z80s:1136   .text:00000580 abase_pfa
     solo_forth.z80s:1150   .text:00000582 asm_
     solo_forth.z80s:201    .data:0000002e asm_cfap
     solo_forth.z80s:201    .data:00000030 asm_lfa
     solo_forth.z80s:201    .data:00000032 asm_nfa
     solo_forth.z80s:1150   .text:00000584 asm_pfa
     solo_forth.z80s:3502   .text:00000c96 noop_
     solo_forth.z80s:3759   .text:00000d33 base_
     solo_forth.z80s:3380   .text:00000c1a fetch_
     solo_forth.z80s:3438   .text:00000c49 store_
     solo_forth.z80s:4483   .text:00000fb3 hex_
     solo_forth.z80s:1296   .text:000005fd also_
     solo_forth.z80s:1406   .text:00000659 assembler_
     solo_forth.z80s:1169   .text:00000596 end_asm_
     solo_forth.z80s:201    .data:00000036 end_asm_cfap
     solo_forth.z80s:201    .data:00000038 end_asm_lfa
     solo_forth.z80s:201    .data:0000003a end_asm_nfa
     solo_forth.z80s:1169   .text:00000598 end_asm_pfa
     solo_forth.z80s:1346   .text:00000623 previous_
     solo_forth.z80s:1184   .text:000005a4 end_code_
     solo_forth.z80s:201    .data:00000042 end_code_cfap
     solo_forth.z80s:201    .data:00000044 end_code_lfa
     solo_forth.z80s:201    .data:00000046 end_code_nfa
     solo_forth.z80s:1184   .text:000005a6 end_code_pfa
     solo_forth.z80s:4404   .text:00000f48 question_csp_
     solo_forth.z80s:4460   .text:00000fa0 smudge_
     solo_forth.z80s:1190   .text:000005ae next_
     solo_forth.z80s:201    .data:0000004f next_cfap
     solo_forth.z80s:201    .data:00000051 next_lfa
     solo_forth.z80s:201    .data:00000053 next_nfa
     solo_forth.z80s:3517   .text:00000ca0 do_constant
     solo_forth.z80s:1190   .text:000005b0 next_pfa
     solo_forth.z80s:1203   .text:000005b2 pushhl_
     solo_forth.z80s:201    .data:00000058 pushhl_cfap
     solo_forth.z80s:201    .data:0000005a pushhl_lfa
     solo_forth.z80s:201    .data:0000005c pushhl_nfa
     solo_forth.z80s:1203   .text:000005b4 pushhl_pfa
     solo_forth.z80s:1208   .text:000005b6 pushhlde_
     solo_forth.z80s:201    .data:00000063 pushhlde_cfap
     solo_forth.z80s:201    .data:00000065 pushhlde_lfa
     solo_forth.z80s:201    .data:00000067 pushhlde_nfa
     solo_forth.z80s:1208   .text:000005b8 pushhlde_pfa
     solo_forth.z80s:1213   .text:000005ba fetchhl_
     solo_forth.z80s:201    .data:00000070 fetchhl_cfap
     solo_forth.z80s:201    .data:00000072 fetchhl_lfa
GAS LISTING solo_forth.z80s 			page 151


     solo_forth.z80s:201    .data:00000074 fetchhl_nfa
     solo_forth.z80s:1213   .text:000005bc fetchhl_pfa
     solo_forth.z80s:3383   .text:00000c1d fetch.hl
     solo_forth.z80s:1218   .text:000005be next_comma_
     solo_forth.z80s:201    .data:0000007c next_comma_cfap
     solo_forth.z80s:201    .data:0000007e next_comma_lfa
     solo_forth.z80s:201    .data:00000080 next_comma_nfa
     solo_forth.z80s:1218   .text:000005c0 next_comma_pfa
     solo_forth.z80s:1456   .text:0000068d lit_
     solo_forth.z80s:3932   .text:00000db2 comma_
     solo_forth.z80s:1233   .text:000005c8 pushhl_comma_
     solo_forth.z80s:201    .data:00000086 pushhl_comma_cfap
     solo_forth.z80s:201    .data:00000088 pushhl_comma_lfa
     solo_forth.z80s:201    .data:0000008a pushhl_comma_nfa
     solo_forth.z80s:1233   .text:000005ca pushhl_comma_pfa
     solo_forth.z80s:1444   .text:00000683 c_lit_
     solo_forth.z80s:3950   .text:00000dc6 c_comma_
     solo_forth.z80s:1249   .text:000005d7 pushhlde_comma_
     solo_forth.z80s:201    .data:00000092 pushhlde_comma_cfap
     solo_forth.z80s:201    .data:00000094 pushhlde_comma_lfa
     solo_forth.z80s:201    .data:00000096 pushhlde_comma_nfa
     solo_forth.z80s:1249   .text:000005d9 pushhlde_comma_pfa
     solo_forth.z80s:1265   .text:000005e6 fetchhl_comma_
     solo_forth.z80s:201    .data:000000a0 fetchhl_comma_cfap
     solo_forth.z80s:201    .data:000000a2 fetchhl_comma_lfa
     solo_forth.z80s:201    .data:000000a4 fetchhl_comma_nfa
     solo_forth.z80s:1265   .text:000005e8 fetchhl_comma_pfa
     solo_forth.z80s:1290   .text:000005f5 label_
     solo_forth.z80s:201    .data:000000ad label_cfap
     solo_forth.z80s:201    .data:000000af label_lfa
     solo_forth.z80s:201    .data:000000b1 label_nfa
     solo_forth.z80s:1290   .text:000005f7 label_pfa
     solo_forth.z80s:5445   .text:00001414 create_
     solo_forth.z80s:201    .data:000000b7 also_cfap
     solo_forth.z80s:201    .data:000000b9 also_lfa
     solo_forth.z80s:201    .data:000000bb also_nfa
     solo_forth.z80s:1296   .text:000005ff also_pfa
     solo_forth.z80s:3744   .text:00000d2a context_
     solo_forth.z80s:3308   .text:00000be0 dup_
     solo_forth.z80s:3838   .text:00000d68 cell_plus_
     solo_forth.z80s:2571   .text:000009da cmove_up_
     solo_forth.z80s:1317   .text:0000060d minus_order_
     solo_forth.z80s:201    .data:000000c0 minus_order_cfap
     solo_forth.z80s:201    .data:000000c2 minus_order_lfa
     solo_forth.z80s:201    .data:000000c4 minus_order_nfa
     solo_forth.z80s:1317   .text:0000060f minus_order_pfa
     solo_forth.z80s:4917   .text:00001156 erase_
     solo_forth.z80s:1325   .text:00000619 only_
     solo_forth.z80s:201    .data:000000cb only_cfap
     solo_forth.z80s:201    .data:000000cd only_lfa
     solo_forth.z80s:201    .data:000000cf only_nfa
     solo_forth.z80s:1325   .text:0000061b only_pfa
     solo_forth.z80s:1389   .text:0000064d root_
     solo_forth.z80s:201    .data:000000d4 previous_cfap
     solo_forth.z80s:201    .data:000000d6 previous_lfa
     solo_forth.z80s:201    .data:000000d8 previous_nfa
     solo_forth.z80s:1346   .text:00000625 previous_pfa
GAS LISTING solo_forth.z80s 			page 152


     solo_forth.z80s:3301   .text:00000bd9 swap_
     solo_forth.z80s:2582   .text:000009e6 cmove_
     solo_forth.z80s:3208   .text:00000b81 plus_
     solo_forth.z80s:3338   .text:00000bfd off_
     solo_forth.z80s:1369   .text:0000063f seal_
     solo_forth.z80s:201    .data:000000e1 seal_cfap
     solo_forth.z80s:201    .data:000000e3 seal_lfa
     solo_forth.z80s:201    .data:000000e5 seal_nfa
     solo_forth.z80s:1369   .text:00000641 seal_pfa
     solo_forth.z80s:201    .data:000000ea root_cfap
     solo_forth.z80s:201    .data:000000ec root_lfa
     solo_forth.z80s:201    .data:000000ee root_nfa
     solo_forth.z80s:5844   .text:00001583 do_vocabulary
     solo_forth.z80s:1393   .text:00000651 root_vocabulary_link
     solo_forth.z80s:201    .data:000000f3 forth_cfap
     solo_forth.z80s:201    .data:000000f5 forth_lfa
     solo_forth.z80s:201    .data:000000f7 forth_nfa
     solo_forth.z80s:1402   .text:00000657 forth_vocabulary_link
     solo_forth.z80s:201    .data:000000fd assembler_cfap
     solo_forth.z80s:201    .data:000000ff assembler_lfa
     solo_forth.z80s:201    .data:00000101 assembler_nfa
     solo_forth.z80s:1406   .text:0000065b assembler_pfa
     solo_forth.z80s:1416   .text:0000065f s_lit_
     solo_forth.z80s:201    .data:0000010b s_lit_cfap
     solo_forth.z80s:201    .data:0000010d s_lit_lfa
     solo_forth.z80s:201    .data:0000010f s_lit_nfa
     solo_forth.z80s:1416   .text:00000661 s_lit_pfa
     solo_forth.z80s:3158   .text:00000b4f r_fetch_
     solo_forth.z80s:4567   .text:00001007 count_
     solo_forth.z80s:3820   .text:00000d57 one_plus_
     solo_forth.z80s:3077   .text:00000aff from_r_
     solo_forth.z80s:3059   .text:00000af0 to_r_
     solo_forth.z80s:1425   .text:00000671 paren_s_
     solo_forth.z80s:201    .data:00000114 paren_s_cfap
     solo_forth.z80s:201    .data:00000116 paren_s_lfa
     solo_forth.z80s:201    .data:00000118 paren_s_nfa
     solo_forth.z80s:1425   .text:00000673 paren_s_pfa
     solo_forth.z80s:4979   .text:000011a7 parse_
     solo_forth.z80s:4374   .text:00000f1d comp_question_
     solo_forth.z80s:1723   .text:00000760 zero_branch_
     solo_forth.z80s:1439   .text:0000067f paren_s.interpreting
     solo_forth.z80s:5613   .text:000014b3 s_literal_
     solo_forth.z80s:1557   .text:000006ea save_string_
     solo_forth.z80s:201    .data:0000011c c_lit_cfap
     solo_forth.z80s:201    .data:0000011e c_lit_lfa
     solo_forth.z80s:201    .data:00000120 c_lit_nfa
     solo_forth.z80s:1444   .text:00000685 c_lit_pfa
     solo_forth.z80s:1449   .text:00000687 push_a
     solo_forth.z80s:1451   .text:00000688 push_l
     solo_forth.z80s:201    .data:00000125 lit_cfap
     solo_forth.z80s:201    .data:00000127 lit_lfa
     solo_forth.z80s:201    .data:00000129 lit_nfa
     solo_forth.z80s:1456   .text:0000068f lit_pfa
     solo_forth.z80s:1470   .text:00000698 bank_
     solo_forth.z80s:201    .data:0000012d bank_cfap
     solo_forth.z80s:201    .data:0000012f bank_lfa
     solo_forth.z80s:201    .data:00000131 bank_nfa
GAS LISTING solo_forth.z80s 			page 153


     solo_forth.z80s:1470   .text:0000069a bank_pfa
     solo_forth.z80s:1488   .text:000006a0 bank.e
     solo_forth.z80s:1484   .text:000006a0 bank.default
     solo_forth.z80s:1486   .text:000006a0 bank.names
     solo_forth.z80s:1500   .text:000006ae unused_csb_
     solo_forth.z80s:201    .data:00000136 unused_csb_cfap
     solo_forth.z80s:201    .data:00000138 unused_csb_lfa
     solo_forth.z80s:201    .data:0000013a unused_csb_nfa
     solo_forth.z80s:1500   .text:000006b0 unused_csb_pfa
     solo_forth.z80s:1512   .text:000006b6 csb0_
     solo_forth.z80s:201    .data:00000145 csb0_cfap
     solo_forth.z80s:201    .data:00000147 csb0_lfa
     solo_forth.z80s:201    .data:00000149 csb0_nfa
     solo_forth.z80s:1512   .text:000006b8 csb0_pfa
     solo_forth.z80s:1523   .text:000006ba question_csb_
     solo_forth.z80s:201    .data:0000014e question_csb_cfap
     solo_forth.z80s:201    .data:00000150 question_csb_lfa
     solo_forth.z80s:201    .data:00000152 question_csb_nfa
     solo_forth.z80s:1523   .text:000006bc question_csb_pfa
     solo_forth.z80s:4021   .text:00000e17 greater_than_
     solo_forth.z80s:1539   .text:000006d4 question_csb_.enough
     solo_forth.z80s:3242   .text:00000b9b negate_
     solo_forth.z80s:3324   .text:00000bf0 plus_store_
     solo_forth.z80s:1544   .text:000006de allocate_string_
     solo_forth.z80s:201    .data:00000157 allocate_string_cfap
     solo_forth.z80s:201    .data:00000159 allocate_string_lfa
     solo_forth.z80s:201    .data:0000015b allocate_string_nfa
     solo_forth.z80s:1544   .text:000006e0 allocate_string_pfa
     solo_forth.z80s:201    .data:0000016b save_string_cfap
     solo_forth.z80s:201    .data:0000016d save_string_lfa
     solo_forth.z80s:201    .data:0000016f save_string_nfa
     solo_forth.z80s:1557   .text:000006ec save_string_pfa
     solo_forth.z80s:3315   .text:00000be7 two_dup_
     solo_forth.z80s:3125   .text:00000b28 two_to_r_
     solo_forth.z80s:2593   .text:000009f2 move_
     solo_forth.z80s:3140   .text:00000b37 two_from_r_
     solo_forth.z80s:1571   .text:000006fc save_counted_string_
     solo_forth.z80s:201    .data:0000017b save_counted_string_cfap
     solo_forth.z80s:201    .data:0000017d save_counted_string_lfa
     solo_forth.z80s:201    .data:0000017f save_counted_string_nfa
     solo_forth.z80s:1571   .text:000006fe save_counted_string_pfa
     solo_forth.z80s:5237   .text:000012d9 dollar_store_
     solo_forth.z80s:1586   .text:0000070e empty_csb_
     solo_forth.z80s:201    .data:00000193 empty_csb_cfap
     solo_forth.z80s:201    .data:00000195 empty_csb_lfa
     solo_forth.z80s:201    .data:00000197 empty_csb_nfa
     solo_forth.z80s:1586   .text:00000710 empty_csb_pfa
     solo_forth.z80s:1600   .text:0000071c execute_
     solo_forth.z80s:201    .data:000001a1 execute_cfap
     solo_forth.z80s:201    .data:000001a3 execute_lfa
     solo_forth.z80s:201    .data:000001a5 execute_nfa
     solo_forth.z80s:1600   .text:0000071e execute_pfa
     solo_forth.z80s:1612   .text:00000722 perform_
     solo_forth.z80s:201    .data:000001ad perform_cfap
     solo_forth.z80s:201    .data:000001af perform_lfa
     solo_forth.z80s:201    .data:000001b1 perform_nfa
     solo_forth.z80s:1612   .text:00000724 perform_pfa
GAS LISTING solo_forth.z80s 			page 154


     solo_forth.z80s:1633   .text:0000072f forward_mark_
     solo_forth.z80s:201    .data:000001b9 forward_mark_cfap
     solo_forth.z80s:201    .data:000001bb forward_mark_lfa
     solo_forth.z80s:201    .data:000001bd forward_mark_nfa
     solo_forth.z80s:1633   .text:00000731 forward_mark_pfa
     solo_forth.z80s:4380   .text:00000f25 question_comp_
     solo_forth.z80s:3910   .text:00000d90 here_
     solo_forth.z80s:3581   .text:00000cc5 zero_
     solo_forth.z80s:1652   .text:0000073b forward_resolve_
     solo_forth.z80s:201    .data:000001c3 forward_resolve_cfap
     solo_forth.z80s:201    .data:000001c5 forward_resolve_lfa
     solo_forth.z80s:201    .data:000001c7 forward_resolve_nfa
     solo_forth.z80s:1652   .text:0000073d forward_resolve_pfa
     solo_forth.z80s:1668   .text:00000747 backward_mark_
     solo_forth.z80s:201    .data:000001d0 backward_mark_cfap
     solo_forth.z80s:201    .data:000001d2 backward_mark_lfa
     solo_forth.z80s:201    .data:000001d4 backward_mark_nfa
     solo_forth.z80s:1668   .text:00000749 backward_mark_pfa
     solo_forth.z80s:1685   .text:0000074f backward_resolve_
     solo_forth.z80s:201    .data:000001da backward_resolve_cfap
     solo_forth.z80s:201    .data:000001dc backward_resolve_lfa
     solo_forth.z80s:201    .data:000001de backward_resolve_nfa
     solo_forth.z80s:1685   .text:00000751 backward_resolve_pfa
     solo_forth.z80s:1703   .text:00000757 branch_
     solo_forth.z80s:201    .data:000001e7 branch_cfap
     solo_forth.z80s:201    .data:000001e9 branch_lfa
     solo_forth.z80s:201    .data:000001eb branch_nfa
     solo_forth.z80s:1703   .text:00000759 branch_pfa
     solo_forth.z80s:201    .data:000001f2 zero_branch_cfap
     solo_forth.z80s:201    .data:000001f4 zero_branch_lfa
     solo_forth.z80s:201    .data:000001f6 zero_branch_nfa
     solo_forth.z80s:1723   .text:00000762 zero_branch_pfa
     solo_forth.z80s:1744   .text:0000076c question_branch_
     solo_forth.z80s:201    .data:000001fe question_branch_cfap
     solo_forth.z80s:201    .data:00000200 question_branch_lfa
     solo_forth.z80s:201    .data:00000202 question_branch_nfa
     solo_forth.z80s:1744   .text:0000076e question_branch_pfa
     solo_forth.z80s:1771   .text:00000778 paren_loop_
     solo_forth.z80s:201    .data:0000020a paren_loop_cfap
     solo_forth.z80s:201    .data:0000020c paren_loop_lfa
     solo_forth.z80s:201    .data:0000020e paren_loop_nfa
     solo_forth.z80s:1771   .text:0000077a paren_loop_pfa
     solo_forth.z80s:1784   .text:0000077d paren_loop.step_in_de
     solo_forth.z80s:1808   .text:00000797 paren_loop.negative_step
     solo_forth.z80s:1816   .text:0000079c paren_loop.end
     solo_forth.z80s:1827   .text:000007a7 paren_plus_loop_
     solo_forth.z80s:201    .data:00000215 paren_plus_loop_cfap
     solo_forth.z80s:201    .data:00000217 paren_plus_loop_lfa
     solo_forth.z80s:201    .data:00000219 paren_plus_loop_nfa
     solo_forth.z80s:1827   .text:000007a9 paren_plus_loop_pfa
     solo_forth.z80s:1854   .text:000007ad paren_do_
     solo_forth.z80s:201    .data:00000221 paren_do_cfap
     solo_forth.z80s:201    .data:00000223 paren_do_lfa
     solo_forth.z80s:201    .data:00000225 paren_do_nfa
     solo_forth.z80s:1854   .text:000007af paren_do_pfa
     solo_forth.z80s:1890   .text:000007c3 paren_do83_
     solo_forth.z80s:201    .data:0000022a paren_do83_cfap
GAS LISTING solo_forth.z80s 			page 155


     solo_forth.z80s:201    .data:0000022c paren_do83_lfa
     solo_forth.z80s:201    .data:0000022e paren_do83_nfa
     solo_forth.z80s:1890   .text:000007c5 paren_do83_pfa
     solo_forth.z80s:1894   .text:000007c7 paren_do83.de_hl
     solo_forth.z80s:1924   .text:000007e8 paren_question_do83_
     solo_forth.z80s:201    .data:00000235 paren_question_do83_cfap
     solo_forth.z80s:201    .data:00000237 paren_question_do83_lfa
     solo_forth.z80s:201    .data:00000239 paren_question_do83_nfa
     solo_forth.z80s:1924   .text:000007ea paren_question_do83_pfa
     solo_forth.z80s:1935   .text:000007f5 question_do.equals
     solo_forth.z80s:1938   .text:000007f8 question_do83_
     solo_forth.z80s:201    .data:00000241 question_do83_cfap
     solo_forth.z80s:201    .data:00000243 question_do83_lfa
     solo_forth.z80s:201    .data:00000245 question_do83_nfa
     solo_forth.z80s:1938   .text:000007fa question_do83_pfa
     solo_forth.z80s:4418   .text:00000f68 compile_
     solo_forth.z80s:1947   .text:00000805 do83_
     solo_forth.z80s:201    .data:0000024b do83_cfap
     solo_forth.z80s:201    .data:0000024d do83_lfa
     solo_forth.z80s:201    .data:0000024f do83_nfa
     solo_forth.z80s:1947   .text:00000807 do83_pfa
     solo_forth.z80s:1956   .text:00000812 loop83_
     solo_forth.z80s:201    .data:00000254 loop83_cfap
     solo_forth.z80s:201    .data:00000256 loop83_lfa
     solo_forth.z80s:201    .data:00000258 loop83_nfa
     solo_forth.z80s:1956   .text:00000814 loop83_pfa
     solo_forth.z80s:4396   .text:00000f3d question_pairs_
     solo_forth.z80s:1975   .text:00000821 paren_loop83_
     solo_forth.z80s:201    .data:0000025f paren_loop83_cfap
     solo_forth.z80s:201    .data:00000261 paren_loop83_lfa
     solo_forth.z80s:201    .data:00000263 paren_loop83_nfa
     solo_forth.z80s:1975   .text:00000823 paren_loop83_pfa
     solo_forth.z80s:1994   .text:0000083a paren_loop83.loop
     solo_forth.z80s:2095   .text:00000844 i_
     solo_forth.z80s:201    .data:0000026c i_cfap
     solo_forth.z80s:201    .data:0000026e i_lfa
     solo_forth.z80s:201    .data:00000270 i_nfa
     solo_forth.z80s:3158   .text:00000b51 r_fetch_pfa
     solo_forth.z80s:2106   .text:00000846 digit_
     solo_forth.z80s:201    .data:00000272 digit_cfap
     solo_forth.z80s:201    .data:00000274 digit_lfa
     solo_forth.z80s:201    .data:00000276 digit_nfa
     solo_forth.z80s:2106   .text:00000848 digit_pfa
     solo_forth.z80s:3596   .text:00000cd3 false_pfa
     solo_forth.z80s:2128   .text:0000085c digit.test_value
     solo_forth.z80s:3608   .text:00000cdb true_pfa
     solo_forth.z80s:2136   .text:00000865 paren_find_
     solo_forth.z80s:201    .data:0000027c paren_find_cfap
     solo_forth.z80s:201    .data:0000027e paren_find_lfa
     solo_forth.z80s:201    .data:00000280 paren_find_nfa
     solo_forth.z80s:2136   .text:00000867 paren_find_pfa
     solo_forth.z80s:2168   .text:00000877 paren_find.string_address
     solo_forth.z80s:2162   .text:00000872 paren_find.begin
     solo_forth.z80s:2224   .text:000008a9 paren_find.nfa_backup
     solo_forth.z80s:2222   .text:000008a8 paren_find.not_a_match
     solo_forth.z80s:2178   .text:00000881 paren_find.compare_next_char
     solo_forth.z80s:2207   .text:0000089d paren_find.end
GAS LISTING solo_forth.z80s 			page 156


     solo_forth.z80s:2239   .text:000008be scan_
     solo_forth.z80s:201    .data:00000287 scan_cfap
     solo_forth.z80s:201    .data:00000289 scan_lfa
     solo_forth.z80s:201    .data:0000028b scan_nfa
     solo_forth.z80s:2239   .text:000008c0 scan_pfa
     solo_forth.z80s:2259   .text:000008ca scan.begin
     solo_forth.z80s:2270   .text:000008d4 skip_
     solo_forth.z80s:201    .data:00000290 skip_cfap
     solo_forth.z80s:201    .data:00000292 skip_lfa
     solo_forth.z80s:201    .data:00000294 skip_nfa
     solo_forth.z80s:2270   .text:000008d6 skip_pfa
     solo_forth.z80s:2280   .text:000008d8 skip.begin
     solo_forth.z80s:2288   .text:000008e1 chan_
     solo_forth.z80s:201    .data:00000299 chan_cfap
     solo_forth.z80s:201    .data:0000029b chan_lfa
     solo_forth.z80s:201    .data:0000029d chan_nfa
     solo_forth.z80s:2288   .text:000008e3 chan_pfa
     solo_forth.z80s:2306   .text:000008ec emit_
     solo_forth.z80s:201    .data:000002a2 emit_cfap
     solo_forth.z80s:201    .data:000002a4 emit_lfa
     solo_forth.z80s:201    .data:000002a6 emit_nfa
     solo_forth.z80s:2306   .text:000008ee emit_pfa
     solo_forth.z80s:2316   .text:000008f8 paren_emit_
     solo_forth.z80s:3586   .text:00000cc9 one_
     solo_forth.z80s:3732   .text:00000d24 out_
     solo_forth.z80s:201    .data:000002ab paren_emit_cfap
     solo_forth.z80s:201    .data:000002ad paren_emit_lfa
     solo_forth.z80s:201    .data:000002af paren_emit_nfa
     solo_forth.z80s:2316   .text:000008fa paren_emit_pfa
     solo_forth.z80s:2343   .text:00000903 printer_
     solo_forth.z80s:201    .data:000002b6 printer_cfap
     solo_forth.z80s:201    .data:000002b8 printer_lfa
     solo_forth.z80s:201    .data:000002ba printer_nfa
     solo_forth.z80s:2343   .text:00000905 printer_pfa
     solo_forth.z80s:2350   .text:0000090c display_
     solo_forth.z80s:201    .data:000002c2 display_cfap
     solo_forth.z80s:201    .data:000002c4 display_lfa
     solo_forth.z80s:201    .data:000002c6 display_nfa
     solo_forth.z80s:2350   .text:0000090e display_pfa
     solo_forth.z80s:3591   .text:00000ccd two_
     solo_forth.z80s:2357   .text:00000914 key_question_
     solo_forth.z80s:201    .data:000002ce key_question_cfap
     solo_forth.z80s:201    .data:000002d0 key_question_lfa
     solo_forth.z80s:201    .data:000002d2 key_question_nfa
     solo_forth.z80s:2357   .text:00000916 key_question_pfa
     solo_forth.z80s:2371   .text:00000920 decode_table_
     solo_forth.z80s:201    .data:000002d7 decode_table_cfap
     solo_forth.z80s:201    .data:000002d9 decode_table_lfa
     solo_forth.z80s:201    .data:000002db decode_table_nfa
     solo_forth.z80s:2371   .text:00000922 decode_table_pfa
     solo_forth.z80s:2387   .text:00000933 decode_char_
     solo_forth.z80s:201    .data:000002e8 decode_char_cfap
     solo_forth.z80s:201    .data:000002ea decode_char_lfa
     solo_forth.z80s:201    .data:000002ec decode_char_nfa
     solo_forth.z80s:2387   .text:00000935 decode_char_pfa
     solo_forth.z80s:2399   .text:00000939 decode_char.begin
     solo_forth.z80s:2405   .text:0000093c paren_key_
GAS LISTING solo_forth.z80s 			page 157


     solo_forth.z80s:201    .data:000002f8 paren_key_cfap
     solo_forth.z80s:201    .data:000002fa paren_key_lfa
     solo_forth.z80s:201    .data:000002fc paren_key_nfa
     solo_forth.z80s:2405   .text:0000093e paren_key_pfa
     solo_forth.z80s:2413   .text:00000948 previous_key
     solo_forth.z80s:2409   .text:00000944 paren_key_.begin
     solo_forth.z80s:2424   .text:00000957 key_
     solo_forth.z80s:201    .data:00000302 key_cfap
     solo_forth.z80s:201    .data:00000304 key_lfa
     solo_forth.z80s:201    .data:00000306 key_nfa
     solo_forth.z80s:2424   .text:00000959 key_pfa
     solo_forth.z80s:2437   .text:0000095c key.begin
     solo_forth.z80s:2445   .text:0000096b key.end
     solo_forth.z80s:2453   .text:00000976 xkey_
     solo_forth.z80s:201    .data:0000030a xkey_cfap
     solo_forth.z80s:201    .data:0000030c xkey_lfa
     solo_forth.z80s:201    .data:0000030e xkey_nfa
     solo_forth.z80s:2453   .text:00000978 xkey_pfa
     solo_forth.z80s:2477   .text:00000979 xkey.new_key
     solo_forth.z80s:2487   .text:00000983 xkey.wait_for_key
     solo_forth.z80s:2505   .text:00000996 xkey.translate
     solo_forth.z80s:2506   .text:00000996 xkey.left_bracket
     solo_forth.z80s:2510   .text:0000099c xkey.right_bracket
     solo_forth.z80s:2514   .text:000009a2 xkey.tilde
     solo_forth.z80s:2518   .text:000009a8 xkey.vertical_bar
     solo_forth.z80s:2522   .text:000009ae xkey.backslash
     solo_forth.z80s:2526   .text:000009b4 xkey.left_curly_bracket
     solo_forth.z80s:2530   .text:000009ba xkey.right_curly_bracket
     solo_forth.z80s:2535   .text:000009c0 xkey.end
     solo_forth.z80s:2556   .text:000009cd cr_
     solo_forth.z80s:201    .data:00000313 cr_cfap
     solo_forth.z80s:201    .data:00000315 cr_lfa
     solo_forth.z80s:201    .data:00000317 cr_nfa
     solo_forth.z80s:2556   .text:000009cf cr_pfa
     solo_forth.z80s:201    .data:0000031a cmove_up_cfap
     solo_forth.z80s:201    .data:0000031c cmove_up_lfa
     solo_forth.z80s:201    .data:0000031e cmove_up_nfa
     solo_forth.z80s:2571   .text:000009dc cmove_up_pfa
     solo_forth.z80s:201    .data:00000325 cmove_cfap
     solo_forth.z80s:201    .data:00000327 cmove_lfa
     solo_forth.z80s:201    .data:00000329 cmove_nfa
     solo_forth.z80s:2582   .text:000009e8 cmove_pfa
     solo_forth.z80s:201    .data:0000032f move_cfap
     solo_forth.z80s:201    .data:00000331 move_lfa
     solo_forth.z80s:201    .data:00000333 move_nfa
     solo_forth.z80s:2593   .text:000009f4 move_pfa
     solo_forth.z80s:2604   .text:000009f7 move.do
     solo_forth.z80s:2611   .text:000009fe smove_
     solo_forth.z80s:201    .data:00000338 smove_cfap
     solo_forth.z80s:201    .data:0000033a smove_lfa
     solo_forth.z80s:201    .data:0000033c smove_nfa
     solo_forth.z80s:2611   .text:00000a00 smove_pfa
     solo_forth.z80s:2630   .text:00000a06 u_m_star_
     solo_forth.z80s:201    .data:00000342 u_m_star_cfap
     solo_forth.z80s:201    .data:00000344 u_m_star_lfa
     solo_forth.z80s:201    .data:00000346 u_m_star_nfa
     solo_forth.z80s:2630   .text:00000a08 u_m_star_pfa
GAS LISTING solo_forth.z80s 			page 158


     solo_forth.z80s:2649   .text:00000a10 u_slash_mod_
     solo_forth.z80s:201    .data:0000034a u_slash_mod_cfap
     solo_forth.z80s:201    .data:0000034c u_slash_mod_lfa
     solo_forth.z80s:201    .data:0000034e u_slash_mod_nfa
     solo_forth.z80s:2649   .text:00000a12 u_slash_mod_pfa
     solo_forth.z80s:2686   .text:00000a2b l60a0h
     solo_forth.z80s:2715   .text:00000a4b l60c0h
     solo_forth.z80s:2688   .text:00000a2d l60a2h
     solo_forth.z80s:2696   .text:00000a35 l60aah
     solo_forth.z80s:2704   .text:00000a3f l60b4h
     solo_forth.z80s:2710   .text:00000a46 l60bbh
     solo_forth.z80s:2801   .text:00000a50 and_
     solo_forth.z80s:201    .data:00000356 and_cfap
     solo_forth.z80s:201    .data:00000358 and_lfa
     solo_forth.z80s:201    .data:0000035a and_nfa
     solo_forth.z80s:2801   .text:00000a52 and_pfa
     solo_forth.z80s:2814   .text:00000a5d or_
     solo_forth.z80s:201    .data:0000035e or_cfap
     solo_forth.z80s:201    .data:00000360 or_lfa
     solo_forth.z80s:201    .data:00000362 or_nfa
     solo_forth.z80s:2814   .text:00000a5f or_pfa
     solo_forth.z80s:2827   .text:00000a6a xor_
     solo_forth.z80s:201    .data:00000365 xor_cfap
     solo_forth.z80s:201    .data:00000367 xor_lfa
     solo_forth.z80s:201    .data:00000369 xor_nfa
     solo_forth.z80s:2827   .text:00000a6c xor_pfa
     solo_forth.z80s:2840   .text:00000a77 np_
     solo_forth.z80s:201    .data:0000036d np_cfap
     solo_forth.z80s:201    .data:0000036f np_lfa
     solo_forth.z80s:201    .data:00000371 np_nfa
     solo_forth.z80s:2840   .text:00000a79 np_pfa
     solo_forth.z80s:2845   .text:00000a7b np0_
     solo_forth.z80s:201    .data:00000374 np0_cfap
     solo_forth.z80s:201    .data:00000376 np0_lfa
     solo_forth.z80s:201    .data:00000378 np0_nfa
     solo_forth.z80s:2845   .text:00000a7d np0_pfa
     solo_forth.z80s:2852   .text:00000a7f np_fetch_
     solo_forth.z80s:201    .data:0000037c np_fetch_cfap
     solo_forth.z80s:201    .data:0000037e np_fetch_lfa
     solo_forth.z80s:201    .data:00000380 np_fetch_nfa
     solo_forth.z80s:2852   .text:00000a81 np_fetch_pfa
     solo_forth.z80s:2858   .text:00000a87 np_store_
     solo_forth.z80s:201    .data:00000384 np_store_cfap
     solo_forth.z80s:201    .data:00000386 np_store_lfa
     solo_forth.z80s:201    .data:00000388 np_store_nfa
     solo_forth.z80s:2858   .text:00000a89 np_store_pfa
     solo_forth.z80s:2866   .text:00000a8f comma_np_
     solo_forth.z80s:201    .data:0000038c comma_np_cfap
     solo_forth.z80s:201    .data:0000038e comma_np_lfa
     solo_forth.z80s:201    .data:00000390 comma_np_nfa
     solo_forth.z80s:2866   .text:00000a91 comma_np_pfa
     solo_forth.z80s:2883   .text:00000a9d sp_fetch_
     solo_forth.z80s:201    .data:00000394 sp_fetch_cfap
     solo_forth.z80s:201    .data:00000396 sp_fetch_lfa
     solo_forth.z80s:201    .data:00000398 sp_fetch_nfa
     solo_forth.z80s:2883   .text:00000a9f sp_fetch_pfa
     solo_forth.z80s:2890   .text:00000aa6 sp_store_
GAS LISTING solo_forth.z80s 			page 159


     solo_forth.z80s:201    .data:0000039c sp_store_cfap
     solo_forth.z80s:201    .data:0000039e sp_store_lfa
     solo_forth.z80s:201    .data:000003a0 sp_store_nfa
     solo_forth.z80s:2890   .text:00000aa8 sp_store_pfa
     solo_forth.z80s:2913   .text:00000aac rp_
     solo_forth.z80s:201    .data:000003a4 rp_cfap
     solo_forth.z80s:201    .data:000003a6 rp_lfa
     solo_forth.z80s:201    .data:000003a8 rp_nfa
     solo_forth.z80s:2913   .text:00000aae rp_pfa
     solo_forth.z80s:2918   .text:00000ab0 rp_fetch_
     solo_forth.z80s:201    .data:000003ab rp_fetch_cfap
     solo_forth.z80s:201    .data:000003ad rp_fetch_lfa
     solo_forth.z80s:201    .data:000003af rp_fetch_nfa
     solo_forth.z80s:2918   .text:00000ab2 rp_fetch_pfa
     solo_forth.z80s:2924   .text:00000ab8 rp_store_
     solo_forth.z80s:201    .data:000003b3 rp_store_cfap
     solo_forth.z80s:201    .data:000003b5 rp_store_lfa
     solo_forth.z80s:201    .data:000003b7 rp_store_nfa
     solo_forth.z80s:2924   .text:00000aba rp_store_pfa
     solo_forth.z80s:201    .data:000003bb semicolon_s_cfap
     solo_forth.z80s:201    .data:000003bd semicolon_s_lfa
     solo_forth.z80s:201    .data:000003bf semicolon_s_nfa
     solo_forth.z80s:2950   .text:00000ac2 semicolon_s_pfa
     solo_forth.z80s:2980   .text:00000ace pick_
     solo_forth.z80s:201    .data:000003c2 pick_cfap
     solo_forth.z80s:201    .data:000003c4 pick_lfa
     solo_forth.z80s:201    .data:000003c6 pick_nfa
     solo_forth.z80s:2980   .text:00000ad0 pick_pfa
     solo_forth.z80s:2988   .text:00000ad6 unloop_
     solo_forth.z80s:201    .data:000003cb unloop_cfap
     solo_forth.z80s:201    .data:000003cd unloop_lfa
     solo_forth.z80s:201    .data:000003cf unloop_nfa
     solo_forth.z80s:3095   .text:00000b10 two_r_drop_pfa
     solo_forth.z80s:3006   .text:00000ad8 exhaust_
     solo_forth.z80s:201    .data:000003d6 exhaust_cfap
     solo_forth.z80s:201    .data:000003d8 exhaust_lfa
     solo_forth.z80s:201    .data:000003da exhaust_nfa
     solo_forth.z80s:3006   .text:00000ada exhaust_pfa
     solo_forth.z80s:3035   .text:00000ae6 question_exhaust_
     solo_forth.z80s:201    .data:000003e2 question_exhaust_cfap
     solo_forth.z80s:201    .data:000003e4 question_exhaust_lfa
     solo_forth.z80s:201    .data:000003e6 question_exhaust_nfa
     solo_forth.z80s:3035   .text:00000ae8 question_exhaust_pfa
     solo_forth.z80s:201    .data:000003ef to_r_cfap
     solo_forth.z80s:201    .data:000003f1 to_r_lfa
     solo_forth.z80s:201    .data:000003f3 to_r_nfa
     solo_forth.z80s:3059   .text:00000af2 to_r_pfa
     solo_forth.z80s:201    .data:000003f6 from_r_cfap
     solo_forth.z80s:201    .data:000003f8 from_r_lfa
     solo_forth.z80s:201    .data:000003fa from_r_nfa
     solo_forth.z80s:3077   .text:00000b01 from_r_pfa
     solo_forth.z80s:3095   .text:00000b0e two_r_drop_
     solo_forth.z80s:201    .data:000003fd two_r_drop_cfap
     solo_forth.z80s:201    .data:000003ff two_r_drop_lfa
     solo_forth.z80s:201    .data:00000401 two_r_drop_nfa
     solo_forth.z80s:3110   .text:00000b1c r_drop_
     solo_forth.z80s:201    .data:00000408 r_drop_cfap
GAS LISTING solo_forth.z80s 			page 160


     solo_forth.z80s:201    .data:0000040a r_drop_lfa
     solo_forth.z80s:201    .data:0000040c r_drop_nfa
     solo_forth.z80s:3110   .text:00000b1e r_drop_pfa
     solo_forth.z80s:201    .data:00000412 two_to_r_cfap
     solo_forth.z80s:201    .data:00000414 two_to_r_lfa
     solo_forth.z80s:201    .data:00000416 two_to_r_nfa
     solo_forth.z80s:3125   .text:00000b2a two_to_r_pfa
     solo_forth.z80s:3421   .text:00000c3e two_store.into_hl_pointer
     solo_forth.z80s:201    .data:0000041a two_from_r_cfap
     solo_forth.z80s:201    .data:0000041c two_from_r_lfa
     solo_forth.z80s:201    .data:0000041e two_from_r_nfa
     solo_forth.z80s:3140   .text:00000b39 two_from_r_pfa
     solo_forth.z80s:3399   .text:00000c2e two_fetch_pfa
     solo_forth.z80s:3152   .text:00000b47 two_r_fetch_
     solo_forth.z80s:201    .data:00000422 two_r_fetch_cfap
     solo_forth.z80s:201    .data:00000424 two_r_fetch_lfa
     solo_forth.z80s:201    .data:00000426 two_r_fetch_nfa
     solo_forth.z80s:3152   .text:00000b49 two_r_fetch_pfa
     solo_forth.z80s:3402   .text:00000c2f two_fetch.hl
     solo_forth.z80s:201    .data:0000042a r_fetch_cfap
     solo_forth.z80s:201    .data:0000042c r_fetch_lfa
     solo_forth.z80s:201    .data:0000042e r_fetch_nfa
     solo_forth.z80s:3166   .text:00000b57 zero_equals_
     solo_forth.z80s:201    .data:00000431 zero_equals_cfap
     solo_forth.z80s:201    .data:00000433 zero_equals_lfa
     solo_forth.z80s:201    .data:00000435 zero_equals_nfa
     solo_forth.z80s:3166   .text:00000b59 zero_equals_pfa
     solo_forth.z80s:3175   .text:00000b62 zero_not_equals_
     solo_forth.z80s:201    .data:00000438 zero_not_equals_cfap
     solo_forth.z80s:201    .data:0000043a zero_not_equals_lfa
     solo_forth.z80s:201    .data:0000043c zero_not_equals_nfa
     solo_forth.z80s:3175   .text:00000b64 zero_not_equals_pfa
     solo_forth.z80s:3184   .text:00000b6d zero_less_than_
     solo_forth.z80s:201    .data:00000440 zero_less_than_cfap
     solo_forth.z80s:201    .data:00000442 zero_less_than_lfa
     solo_forth.z80s:201    .data:00000444 zero_less_than_nfa
     solo_forth.z80s:3184   .text:00000b6f zero_less_than_pfa
     solo_forth.z80s:3187   .text:00000b70 zero_less_.hl
     solo_forth.z80s:3194   .text:00000b72 true_if_cy
     solo_forth.z80s:3199   .text:00000b78 zero_greater_than_
     solo_forth.z80s:201    .data:00000447 zero_greater_than_cfap
     solo_forth.z80s:201    .data:00000449 zero_greater_than_lfa
     solo_forth.z80s:201    .data:0000044b zero_greater_than_nfa
     solo_forth.z80s:3199   .text:00000b7a zero_greater_than_pfa
     solo_forth.z80s:3989   .text:00000dfa is_de_less_than_hl
     solo_forth.z80s:201    .data:0000044e plus_cfap
     solo_forth.z80s:201    .data:00000450 plus_lfa
     solo_forth.z80s:201    .data:00000452 plus_nfa
     solo_forth.z80s:3208   .text:00000b83 plus_pfa
     solo_forth.z80s:3216   .text:00000b89 d_plus_
     solo_forth.z80s:201    .data:00000454 d_plus_cfap
     solo_forth.z80s:201    .data:00000456 d_plus_lfa
     solo_forth.z80s:201    .data:00000458 d_plus_nfa
     solo_forth.z80s:3216   .text:00000b8b d_plus_pfa
     solo_forth.z80s:201    .data:0000045b negate_cfap
     solo_forth.z80s:201    .data:0000045d negate_lfa
     solo_forth.z80s:201    .data:0000045f negate_nfa
GAS LISTING solo_forth.z80s 			page 161


     solo_forth.z80s:3242   .text:00000b9d negate_pfa
     solo_forth.z80s:3251   .text:00000ba7 dnegate_
     solo_forth.z80s:201    .data:00000466 dnegate_cfap
     solo_forth.z80s:201    .data:00000468 dnegate_lfa
     solo_forth.z80s:201    .data:0000046a dnegate_nfa
     solo_forth.z80s:3251   .text:00000ba9 dnegate_pfa
     solo_forth.z80s:3272   .text:00000bbd nip_
     solo_forth.z80s:201    .data:00000472 nip_cfap
     solo_forth.z80s:201    .data:00000474 nip_lfa
     solo_forth.z80s:201    .data:00000476 nip_nfa
     solo_forth.z80s:3272   .text:00000bbf nip_pfa
     solo_forth.z80s:3279   .text:00000bc4 tuck_
     solo_forth.z80s:201    .data:0000047a tuck_cfap
     solo_forth.z80s:201    .data:0000047c tuck_lfa
     solo_forth.z80s:201    .data:0000047e tuck_nfa
     solo_forth.z80s:3279   .text:00000bc6 tuck_pfa
     solo_forth.z80s:3287   .text:00000bcc over_
     solo_forth.z80s:201    .data:00000483 over_cfap
     solo_forth.z80s:201    .data:00000485 over_lfa
     solo_forth.z80s:201    .data:00000487 over_nfa
     solo_forth.z80s:3287   .text:00000bce over_pfa
     solo_forth.z80s:3295   .text:00000bd4 drop_
     solo_forth.z80s:201    .data:0000048c drop_cfap
     solo_forth.z80s:201    .data:0000048e drop_lfa
     solo_forth.z80s:201    .data:00000490 drop_nfa
     solo_forth.z80s:3295   .text:00000bd6 drop_pfa
     solo_forth.z80s:201    .data:00000495 swap_cfap
     solo_forth.z80s:201    .data:00000497 swap_lfa
     solo_forth.z80s:201    .data:00000499 swap_nfa
     solo_forth.z80s:3301   .text:00000bdb swap_pfa
     solo_forth.z80s:201    .data:0000049e dup_cfap
     solo_forth.z80s:201    .data:000004a0 dup_lfa
     solo_forth.z80s:201    .data:000004a2 dup_nfa
     solo_forth.z80s:3308   .text:00000be2 dup_pfa
     solo_forth.z80s:201    .data:000004a6 two_dup_cfap
     solo_forth.z80s:201    .data:000004a8 two_dup_lfa
     solo_forth.z80s:201    .data:000004aa two_dup_nfa
     solo_forth.z80s:3315   .text:00000be9 two_dup_pfa
     solo_forth.z80s:201    .data:000004af plus_store_cfap
     solo_forth.z80s:201    .data:000004b1 plus_store_lfa
     solo_forth.z80s:201    .data:000004b3 plus_store_nfa
     solo_forth.z80s:3324   .text:00000bf2 plus_store_pfa
     solo_forth.z80s:201    .data:000004b6 off_cfap
     solo_forth.z80s:201    .data:000004b8 off_lfa
     solo_forth.z80s:201    .data:000004ba off_nfa
     solo_forth.z80s:3338   .text:00000bff off_pfa
     solo_forth.z80s:3347   .text:00000c07 on_
     solo_forth.z80s:201    .data:000004be on_cfap
     solo_forth.z80s:201    .data:000004c0 on_lfa
     solo_forth.z80s:201    .data:000004c2 on_nfa
     solo_forth.z80s:3347   .text:00000c09 on_pfa
     solo_forth.z80s:3362   .text:00000c11 toggle_
     solo_forth.z80s:201    .data:000004c5 toggle_cfap
     solo_forth.z80s:201    .data:000004c7 toggle_lfa
     solo_forth.z80s:201    .data:000004c9 toggle_nfa
     solo_forth.z80s:3362   .text:00000c13 toggle_pfa
     solo_forth.z80s:201    .data:000004d0 fetch_cfap
GAS LISTING solo_forth.z80s 			page 162


     solo_forth.z80s:201    .data:000004d2 fetch_lfa
     solo_forth.z80s:201    .data:000004d4 fetch_nfa
     solo_forth.z80s:3380   .text:00000c1c fetch_pfa
     solo_forth.z80s:3391   .text:00000c23 c_fetch_
     solo_forth.z80s:201    .data:000004d6 c_fetch_cfap
     solo_forth.z80s:201    .data:000004d8 c_fetch_lfa
     solo_forth.z80s:201    .data:000004da c_fetch_nfa
     solo_forth.z80s:3391   .text:00000c25 c_fetch_pfa
     solo_forth.z80s:3399   .text:00000c2c two_fetch_
     solo_forth.z80s:201    .data:000004dd two_fetch_cfap
     solo_forth.z80s:201    .data:000004df two_fetch_lfa
     solo_forth.z80s:201    .data:000004e1 two_fetch_nfa
     solo_forth.z80s:3418   .text:00000c3b two_store_
     solo_forth.z80s:201    .data:000004e4 two_store_cfap
     solo_forth.z80s:201    .data:000004e6 two_store_lfa
     solo_forth.z80s:201    .data:000004e8 two_store_nfa
     solo_forth.z80s:3418   .text:00000c3d two_store_pfa
     solo_forth.z80s:201    .data:000004eb store_cfap
     solo_forth.z80s:201    .data:000004ed store_lfa
     solo_forth.z80s:201    .data:000004ef store_nfa
     solo_forth.z80s:3438   .text:00000c4b store_pfa
     solo_forth.z80s:3441   .text:00000c4c store.into_hl_pointer
     solo_forth.z80s:3443   .text:00000c4d store.de_into_hl_pointer
     solo_forth.z80s:3450   .text:00000c52 c_store_
     solo_forth.z80s:201    .data:000004f1 c_store_cfap
     solo_forth.z80s:201    .data:000004f3 c_store_lfa
     solo_forth.z80s:201    .data:000004f5 c_store_nfa
     solo_forth.z80s:3450   .text:00000c54 c_store_pfa
     solo_forth.z80s:3458   .text:00000c59 colon_
     solo_forth.z80s:201    .data:000004f8 colon_cfap
     solo_forth.z80s:201    .data:000004fa colon_lfa
     solo_forth.z80s:201    .data:000004fc colon_nfa
     solo_forth.z80s:3458   .text:00000c5b colon_pfa
     solo_forth.z80s:4387   .text:00000f32 question_exec_
     solo_forth.z80s:4356   .text:00000f03 store_csp_
     solo_forth.z80s:5401   .text:000013c7 header_
     solo_forth.z80s:4454   .text:00000f98 right_bracket_
     solo_forth.z80s:4497   .text:00000fc9 paren_semicolon_code_
     solo_forth.z80s:3474   .text:00000c72 do_colon_end
     solo_forth.z80s:3478   .text:00000c74 noname_
     solo_forth.z80s:201    .data:000004fe noname_cfap
     solo_forth.z80s:201    .data:00000500 noname_lfa
     solo_forth.z80s:201    .data:00000502 noname_nfa
     solo_forth.z80s:3478   .text:00000c76 noname_pfa
     solo_forth.z80s:3493   .text:00000c88 semicolon_
     solo_forth.z80s:201    .data:0000050a semicolon_cfap
     solo_forth.z80s:201    .data:0000050c semicolon_lfa
     solo_forth.z80s:201    .data:0000050e semicolon_nfa
     solo_forth.z80s:3493   .text:00000c8a semicolon_pfa
     solo_forth.z80s:4448   .text:00000f90 left_bracket_
     solo_forth.z80s:201    .data:00000510 noop_cfap
     solo_forth.z80s:201    .data:00000512 noop_lfa
     solo_forth.z80s:201    .data:00000514 noop_nfa
     solo_forth.z80s:3513   .text:00000c98 constant_
     solo_forth.z80s:201    .data:00000519 constant_cfap
     solo_forth.z80s:201    .data:0000051b constant_lfa
     solo_forth.z80s:201    .data:0000051d constant_nfa
GAS LISTING solo_forth.z80s 			page 163


     solo_forth.z80s:3513   .text:00000c9a constant_pfa
     solo_forth.z80s:3523   .text:00000ca5 variable_
     solo_forth.z80s:201    .data:00000526 variable_cfap
     solo_forth.z80s:201    .data:00000528 variable_lfa
     solo_forth.z80s:201    .data:0000052a variable_nfa
     solo_forth.z80s:3523   .text:00000ca7 variable_pfa
     solo_forth.z80s:3881   .text:00000d82 cell_
     solo_forth.z80s:3916   .text:00000d98 allot_
     solo_forth.z80s:3547   .text:00000caf user_
     solo_forth.z80s:201    .data:00000533 user_cfap
     solo_forth.z80s:201    .data:00000535 user_lfa
     solo_forth.z80s:201    .data:00000537 user_nfa
     solo_forth.z80s:3547   .text:00000cb1 user_pfa
     solo_forth.z80s:3554   .text:00000cb5 do_user
     solo_forth.z80s:3566   .text:00000cc1 msg_scr_
     solo_forth.z80s:201    .data:0000053c msg_scr_cfap
     solo_forth.z80s:201    .data:0000053e msg_scr_lfa
     solo_forth.z80s:201    .data:00000540 msg_scr_nfa
     solo_forth.z80s:3566   .text:00000cc3 msg_scr_pfa
     solo_forth.z80s:201    .data:00000548 zero_cfap
     solo_forth.z80s:201    .data:0000054a zero_lfa
     solo_forth.z80s:201    .data:0000054c zero_nfa
     solo_forth.z80s:3581   .text:00000cc7 zero_pfa
     solo_forth.z80s:201    .data:0000054e one_cfap
     solo_forth.z80s:201    .data:00000550 one_lfa
     solo_forth.z80s:201    .data:00000552 one_nfa
     solo_forth.z80s:3586   .text:00000ccb one_pfa
     solo_forth.z80s:201    .data:00000554 two_cfap
     solo_forth.z80s:201    .data:00000556 two_lfa
     solo_forth.z80s:201    .data:00000558 two_nfa
     solo_forth.z80s:3591   .text:00000ccf two_pfa
     solo_forth.z80s:3596   .text:00000cd1 false_
     solo_forth.z80s:201    .data:0000055a false_cfap
     solo_forth.z80s:201    .data:0000055c false_lfa
     solo_forth.z80s:201    .data:0000055e false_nfa
     solo_forth.z80s:3608   .text:00000cd9 true_
     solo_forth.z80s:201    .data:00000564 true_cfap
     solo_forth.z80s:201    .data:00000566 true_lfa
     solo_forth.z80s:201    .data:00000568 true_nfa
     solo_forth.z80s:3620   .text:00000ce1 b_l_
     solo_forth.z80s:201    .data:0000056d b_l_cfap
     solo_forth.z80s:201    .data:0000056f b_l_lfa
     solo_forth.z80s:201    .data:00000571 b_l_nfa
     solo_forth.z80s:3620   .text:00000ce3 b_l_pfa
     solo_forth.z80s:3631   .text:00000ce5 c_slash_l_
     solo_forth.z80s:201    .data:00000574 c_slash_l_cfap
     solo_forth.z80s:201    .data:00000576 c_slash_l_lfa
     solo_forth.z80s:201    .data:00000578 c_slash_l_nfa
     solo_forth.z80s:3631   .text:00000ce7 c_slash_l_pfa
     solo_forth.z80s:3636   .text:00000ce9 l_slash_scr_
     solo_forth.z80s:201    .data:0000057c l_slash_scr_cfap
     solo_forth.z80s:201    .data:0000057e l_slash_scr_lfa
     solo_forth.z80s:201    .data:00000580 l_slash_scr_nfa
     solo_forth.z80s:3636   .text:00000ceb l_slash_scr_pfa
     solo_forth.z80s:3641   .text:00000ced disk_buffer_
     solo_forth.z80s:201    .data:00000586 disk_buffer_cfap
     solo_forth.z80s:201    .data:00000588 disk_buffer_lfa
GAS LISTING solo_forth.z80s 			page 164


     solo_forth.z80s:201    .data:0000058a disk_buffer_nfa
     solo_forth.z80s:3641   .text:00000cef disk_buffer_pfa
     solo_forth.z80s:3646   .text:00000cf1 b_slash_buf_
     solo_forth.z80s:201    .data:00000596 b_slash_buf_cfap
     solo_forth.z80s:201    .data:00000598 b_slash_buf_lfa
     solo_forth.z80s:201    .data:0000059a b_slash_buf_nfa
     solo_forth.z80s:3646   .text:00000cf3 b_slash_buf_pfa
     solo_forth.z80s:3651   .text:00000cf5 b_slash_scr_
     solo_forth.z80s:201    .data:000005a0 b_slash_scr_cfap
     solo_forth.z80s:201    .data:000005a2 b_slash_scr_lfa
     solo_forth.z80s:201    .data:000005a4 b_slash_scr_nfa
     solo_forth.z80s:3651   .text:00000cf7 b_slash_scr_pfa
     solo_forth.z80s:3656   .text:00000cf9 scr_slash_disk_
     solo_forth.z80s:201    .data:000005aa scr_slash_disk_cfap
     solo_forth.z80s:201    .data:000005ac scr_slash_disk_lfa
     solo_forth.z80s:201    .data:000005ae scr_slash_disk_nfa
     solo_forth.z80s:3656   .text:00000cfb scr_slash_disk_pfa
     solo_forth.z80s:3661   .text:00000cfd hash_vocs_
     solo_forth.z80s:201    .data:000005b7 hash_vocs_cfap
     solo_forth.z80s:201    .data:000005b9 hash_vocs_lfa
     solo_forth.z80s:201    .data:000005bb hash_vocs_nfa
     solo_forth.z80s:3661   .text:00000cff hash_vocs_pfa
     solo_forth.z80s:3666   .text:00000d01 plus_origin_
     solo_forth.z80s:201    .data:000005c1 plus_origin_cfap
     solo_forth.z80s:201    .data:000005c3 plus_origin_lfa
     solo_forth.z80s:201    .data:000005c5 plus_origin_nfa
     solo_forth.z80s:3666   .text:00000d03 plus_origin_pfa
     solo_forth.z80s:3683   .text:00000d0b sp0_
     solo_forth.z80s:201    .data:000005cd sp0_cfap
     solo_forth.z80s:201    .data:000005cf sp0_lfa
     solo_forth.z80s:201    .data:000005d1 sp0_nfa
     solo_forth.z80s:3683   .text:00000d0d sp0_pfa
     solo_forth.z80s:3688   .text:00000d0e rp0_
     solo_forth.z80s:201    .data:000005d5 rp0_cfap
     solo_forth.z80s:201    .data:000005d7 rp0_lfa
     solo_forth.z80s:201    .data:000005d9 rp0_nfa
     solo_forth.z80s:3688   .text:00000d10 rp0_pfa
     solo_forth.z80s:3693   .text:00000d11 width_
     solo_forth.z80s:201    .data:000005dd width_cfap
     solo_forth.z80s:201    .data:000005df width_lfa
     solo_forth.z80s:201    .data:000005e1 width_nfa
     solo_forth.z80s:3693   .text:00000d13 width_pfa
     solo_forth.z80s:3700   .text:00000d14 warning_
     solo_forth.z80s:201    .data:000005e7 warning_cfap
     solo_forth.z80s:201    .data:000005e9 warning_lfa
     solo_forth.z80s:201    .data:000005eb warning_nfa
     solo_forth.z80s:3700   .text:00000d16 warning_pfa
     solo_forth.z80s:3705   .text:00000d17 dp_
     solo_forth.z80s:201    .data:000005f3 dp_cfap
     solo_forth.z80s:201    .data:000005f5 dp_lfa
     solo_forth.z80s:201    .data:000005f7 dp_nfa
     solo_forth.z80s:3705   .text:00000d19 dp_pfa
     solo_forth.z80s:3713   .text:00000d1a voc_link_
     solo_forth.z80s:201    .data:000005fa voc_link_cfap
     solo_forth.z80s:201    .data:000005fc voc_link_lfa
     solo_forth.z80s:201    .data:000005fe voc_link_nfa
     solo_forth.z80s:3713   .text:00000d1c voc_link_pfa
GAS LISTING solo_forth.z80s 			page 165


     solo_forth.z80s:3718   .text:00000d1e blk_
     solo_forth.z80s:201    .data:00000607 blk_cfap
     solo_forth.z80s:201    .data:00000609 blk_lfa
     solo_forth.z80s:201    .data:0000060b blk_nfa
     solo_forth.z80s:3718   .text:00000d20 blk_pfa
     solo_forth.z80s:3725   .text:00000d21 to_in_
     solo_forth.z80s:201    .data:0000060f to_in_cfap
     solo_forth.z80s:201    .data:00000611 to_in_lfa
     solo_forth.z80s:201    .data:00000613 to_in_nfa
     solo_forth.z80s:3725   .text:00000d23 to_in_pfa
     solo_forth.z80s:201    .data:00000617 out_cfap
     solo_forth.z80s:201    .data:00000619 out_lfa
     solo_forth.z80s:201    .data:0000061b out_nfa
     solo_forth.z80s:3732   .text:00000d26 out_pfa
     solo_forth.z80s:3739   .text:00000d27 scr_
     solo_forth.z80s:201    .data:0000061f scr_cfap
     solo_forth.z80s:201    .data:00000621 scr_lfa
     solo_forth.z80s:201    .data:00000623 scr_nfa
     solo_forth.z80s:3739   .text:00000d29 scr_pfa
     solo_forth.z80s:201    .data:00000629 context_cfap
     solo_forth.z80s:201    .data:0000062b context_lfa
     solo_forth.z80s:201    .data:0000062d context_nfa
     solo_forth.z80s:3744   .text:00000d2c context_pfa
     solo_forth.z80s:3749   .text:00000d2d current_
     solo_forth.z80s:201    .data:00000635 current_cfap
     solo_forth.z80s:201    .data:00000637 current_lfa
     solo_forth.z80s:201    .data:00000639 current_nfa
     solo_forth.z80s:3749   .text:00000d2f current_pfa
     solo_forth.z80s:3754   .text:00000d30 state_
     solo_forth.z80s:201    .data:00000641 state_cfap
     solo_forth.z80s:201    .data:00000643 state_lfa
     solo_forth.z80s:201    .data:00000645 state_nfa
     solo_forth.z80s:3754   .text:00000d32 state_pfa
     solo_forth.z80s:201    .data:0000064b base_cfap
     solo_forth.z80s:201    .data:0000064d base_lfa
     solo_forth.z80s:201    .data:0000064f base_nfa
     solo_forth.z80s:3759   .text:00000d35 base_pfa
     solo_forth.z80s:3764   .text:00000d36 dpl_
     solo_forth.z80s:201    .data:00000654 dpl_cfap
     solo_forth.z80s:201    .data:00000656 dpl_lfa
     solo_forth.z80s:201    .data:00000658 dpl_nfa
     solo_forth.z80s:3764   .text:00000d38 dpl_pfa
     solo_forth.z80s:3769   .text:00000d39 fld_
     solo_forth.z80s:201    .data:0000065c fld_cfap
     solo_forth.z80s:201    .data:0000065e fld_lfa
     solo_forth.z80s:201    .data:00000660 fld_nfa
     solo_forth.z80s:3769   .text:00000d3b fld_pfa
     solo_forth.z80s:3774   .text:00000d3c csp_
     solo_forth.z80s:201    .data:00000664 csp_cfap
     solo_forth.z80s:201    .data:00000666 csp_lfa
     solo_forth.z80s:201    .data:00000668 csp_nfa
     solo_forth.z80s:3774   .text:00000d3e csp_pfa
     solo_forth.z80s:3779   .text:00000d3f r_hash_
     solo_forth.z80s:201    .data:0000066c r_hash_cfap
     solo_forth.z80s:201    .data:0000066e r_hash_lfa
     solo_forth.z80s:201    .data:00000670 r_hash_nfa
     solo_forth.z80s:3779   .text:00000d41 r_hash_pfa
GAS LISTING solo_forth.z80s 			page 166


     solo_forth.z80s:3785   .text:00000d42 hld_
     solo_forth.z80s:201    .data:00000673 hld_cfap
     solo_forth.z80s:201    .data:00000675 hld_lfa
     solo_forth.z80s:201    .data:00000677 hld_nfa
     solo_forth.z80s:3785   .text:00000d44 hld_pfa
     solo_forth.z80s:3790   .text:00000d45 tib_
     solo_forth.z80s:201    .data:0000067b tib_cfap
     solo_forth.z80s:201    .data:0000067d tib_lfa
     solo_forth.z80s:201    .data:0000067f tib_nfa
     solo_forth.z80s:3790   .text:00000d47 tib_pfa
     solo_forth.z80s:3803   .text:00000d49 number_tib_
     solo_forth.z80s:201    .data:00000683 number_tib_cfap
     solo_forth.z80s:201    .data:00000685 number_tib_lfa
     solo_forth.z80s:201    .data:00000687 number_tib_nfa
     solo_forth.z80s:3803   .text:00000d4b number_tib_pfa
     solo_forth.z80s:3808   .text:00000d4d recurse_
     solo_forth.z80s:201    .data:0000068c recurse_cfap
     solo_forth.z80s:201    .data:0000068e recurse_lfa
     solo_forth.z80s:201    .data:00000690 recurse_nfa
     solo_forth.z80s:3808   .text:00000d4f recurse_pfa
     solo_forth.z80s:4069   .text:00000e46 latest_
     solo_forth.z80s:4332   .text:00000ee3 nfa_to_cfa_
     solo_forth.z80s:3938   .text:00000dbe compile_comma_
     solo_forth.z80s:201    .data:00000698 one_plus_cfap
     solo_forth.z80s:201    .data:0000069a one_plus_lfa
     solo_forth.z80s:201    .data:0000069c one_plus_nfa
     solo_forth.z80s:3820   .text:00000d59 one_plus_pfa
     solo_forth.z80s:3827   .text:00000d5e two_plus_
     solo_forth.z80s:201    .data:0000069f two_plus_cfap
     solo_forth.z80s:201    .data:000006a1 two_plus_lfa
     solo_forth.z80s:201    .data:000006a3 two_plus_nfa
     solo_forth.z80s:3827   .text:00000d60 two_plus_pfa
     solo_forth.z80s:3835   .text:00000d66 cell_minus_
     solo_forth.z80s:201    .data:000006a6 cell_minus_cfap
     solo_forth.z80s:201    .data:000006a8 cell_minus_lfa
     solo_forth.z80s:201    .data:000006aa cell_minus_nfa
     solo_forth.z80s:3848   .text:00000d73 two_minus_pfa
     solo_forth.z80s:201    .data:000006b0 cell_plus_cfap
     solo_forth.z80s:201    .data:000006b2 cell_plus_lfa
     solo_forth.z80s:201    .data:000006b4 cell_plus_nfa
     solo_forth.z80s:3841   .text:00000d6a one_minus_
     solo_forth.z80s:201    .data:000006ba one_minus_cfap
     solo_forth.z80s:201    .data:000006bc one_minus_lfa
     solo_forth.z80s:201    .data:000006be one_minus_nfa
     solo_forth.z80s:3841   .text:00000d6c one_minus_pfa
     solo_forth.z80s:3848   .text:00000d71 two_minus_
     solo_forth.z80s:201    .data:000006c1 two_minus_cfap
     solo_forth.z80s:201    .data:000006c3 two_minus_lfa
     solo_forth.z80s:201    .data:000006c5 two_minus_nfa
     solo_forth.z80s:3856   .text:00000d79 two_star_
     solo_forth.z80s:201    .data:000006c8 two_star_cfap
     solo_forth.z80s:201    .data:000006ca two_star_lfa
     solo_forth.z80s:201    .data:000006cc two_star_nfa
     solo_forth.z80s:3856   .text:00000d7b two_star_pfa
     solo_forth.z80s:3878   .text:00000d80 cells_
     solo_forth.z80s:201    .data:000006cf cells_cfap
     solo_forth.z80s:201    .data:000006d1 cells_lfa
GAS LISTING solo_forth.z80s 			page 167


     solo_forth.z80s:201    .data:000006d3 cells_nfa
     solo_forth.z80s:201    .data:000006d9 cell_cfap
     solo_forth.z80s:201    .data:000006db cell_lfa
     solo_forth.z80s:201    .data:000006dd cell_nfa
     solo_forth.z80s:3881   .text:00000d84 cell_pfa
     solo_forth.z80s:3886   .text:00000d86 two_slash_
     solo_forth.z80s:201    .data:000006e2 two_slash_cfap
     solo_forth.z80s:201    .data:000006e4 two_slash_lfa
     solo_forth.z80s:201    .data:000006e6 two_slash_nfa
     solo_forth.z80s:3886   .text:00000d88 two_slash_pfa
     solo_forth.z80s:201    .data:000006e9 here_cfap
     solo_forth.z80s:201    .data:000006eb here_lfa
     solo_forth.z80s:201    .data:000006ed here_nfa
     solo_forth.z80s:3910   .text:00000d92 here_pfa
     solo_forth.z80s:201    .data:000006f2 allot_cfap
     solo_forth.z80s:201    .data:000006f4 allot_lfa
     solo_forth.z80s:201    .data:000006f6 allot_nfa
     solo_forth.z80s:3916   .text:00000d9a allot_pfa
     solo_forth.z80s:3922   .text:00000da0 s_comma_
     solo_forth.z80s:201    .data:000006fc s_comma_cfap
     solo_forth.z80s:201    .data:000006fe s_comma_lfa
     solo_forth.z80s:201    .data:00000700 s_comma_nfa
     solo_forth.z80s:3922   .text:00000da2 s_comma_pfa
     solo_forth.z80s:201    .data:00000703 comma_cfap
     solo_forth.z80s:201    .data:00000705 comma_lfa
     solo_forth.z80s:201    .data:00000707 comma_nfa
     solo_forth.z80s:3932   .text:00000db4 comma_pfa
     solo_forth.z80s:201    .data:00000709 compile_comma_cfap
     solo_forth.z80s:201    .data:0000070b compile_comma_lfa
     solo_forth.z80s:201    .data:0000070d compile_comma_nfa
     solo_forth.z80s:3938   .text:00000dc0 compile_comma_pfa
     solo_forth.z80s:201    .data:00000716 c_comma_cfap
     solo_forth.z80s:201    .data:00000718 c_comma_lfa
     solo_forth.z80s:201    .data:0000071a c_comma_nfa
     solo_forth.z80s:3950   .text:00000dc8 c_comma_pfa
     solo_forth.z80s:3956   .text:00000dd2 minus_
     solo_forth.z80s:201    .data:0000071d minus_cfap
     solo_forth.z80s:201    .data:0000071f minus_lfa
     solo_forth.z80s:201    .data:00000721 minus_nfa
     solo_forth.z80s:3956   .text:00000dd4 minus_pfa
     solo_forth.z80s:3965   .text:00000ddc not_equals_
     solo_forth.z80s:201    .data:00000723 not_equals_cfap
     solo_forth.z80s:201    .data:00000725 not_equals_lfa
     solo_forth.z80s:201    .data:00000727 not_equals_nfa
     solo_forth.z80s:3965   .text:00000dde not_equals_pfa
     solo_forth.z80s:3970   .text:00000de3 false_if_z
     solo_forth.z80s:3975   .text:00000de9 equals_
     solo_forth.z80s:201    .data:0000072a equals_cfap
     solo_forth.z80s:201    .data:0000072c equals_lfa
     solo_forth.z80s:201    .data:0000072e equals_nfa
     solo_forth.z80s:3975   .text:00000deb equals_pfa
     solo_forth.z80s:3980   .text:00000df0 true_if_z
     solo_forth.z80s:3985   .text:00000df6 less_than_
     solo_forth.z80s:201    .data:00000730 less_than_cfap
     solo_forth.z80s:201    .data:00000732 less_than_lfa
     solo_forth.z80s:201    .data:00000734 less_than_nfa
     solo_forth.z80s:3985   .text:00000df8 less_than_pfa
GAS LISTING solo_forth.z80s 			page 168


     solo_forth.z80s:3999   .text:00000e03 u_greater_than_
     solo_forth.z80s:201    .data:00000736 u_greater_than_cfap
     solo_forth.z80s:201    .data:00000738 u_greater_than_lfa
     solo_forth.z80s:201    .data:0000073a u_greater_than_nfa
     solo_forth.z80s:3999   .text:00000e05 u_greater_than_pfa
     solo_forth.z80s:4002   .text:00000e06 u_greater_than.hl
     solo_forth.z80s:4011   .text:00000e0e u_less_than.de_hl
     solo_forth.z80s:4007   .text:00000e0a u_less_than_
     solo_forth.z80s:201    .data:0000073d u_less_than_cfap
     solo_forth.z80s:201    .data:0000073f u_less_than_lfa
     solo_forth.z80s:201    .data:00000741 u_less_than_nfa
     solo_forth.z80s:4007   .text:00000e0c u_less_than_pfa
     solo_forth.z80s:201    .data:00000744 greater_than_cfap
     solo_forth.z80s:201    .data:00000746 greater_than_lfa
     solo_forth.z80s:201    .data:00000748 greater_than_nfa
     solo_forth.z80s:4021   .text:00000e19 greater_than_pfa
     solo_forth.z80s:4028   .text:00000e1e rot_
     solo_forth.z80s:201    .data:0000074a rot_cfap
     solo_forth.z80s:201    .data:0000074c rot_lfa
     solo_forth.z80s:201    .data:0000074e rot_nfa
     solo_forth.z80s:4028   .text:00000e20 rot_pfa
     solo_forth.z80s:4036   .text:00000e26 space_
     solo_forth.z80s:201    .data:00000752 space_cfap
     solo_forth.z80s:201    .data:00000754 space_lfa
     solo_forth.z80s:201    .data:00000756 space_nfa
     solo_forth.z80s:4036   .text:00000e28 space_pfa
     solo_forth.z80s:4042   .text:00000e2e question_dup_
     solo_forth.z80s:201    .data:0000075c question_dup_cfap
     solo_forth.z80s:201    .data:0000075e question_dup_lfa
     solo_forth.z80s:201    .data:00000760 question_dup_nfa
     solo_forth.z80s:4042   .text:00000e30 question_dup_pfa
     solo_forth.z80s:4047   .text:00000e38 question_dup.end
     solo_forth.z80s:4051   .text:00000e3a lfa_to_nfa_
     solo_forth.z80s:201    .data:00000765 lfa_to_nfa_cfap
     solo_forth.z80s:201    .data:00000767 lfa_to_nfa_lfa
     solo_forth.z80s:201    .data:00000769 lfa_to_nfa_nfa
     solo_forth.z80s:4054   .text:00000e3c trail_
     solo_forth.z80s:201    .data:00000771 trail_cfap
     solo_forth.z80s:201    .data:00000773 trail_lfa
     solo_forth.z80s:201    .data:00000775 trail_nfa
     solo_forth.z80s:4054   .text:00000e3e trail_pfa
     solo_forth.z80s:201    .data:0000077b latest_cfap
     solo_forth.z80s:201    .data:0000077d latest_lfa
     solo_forth.z80s:201    .data:0000077f latest_nfa
     solo_forth.z80s:4069   .text:00000e48 latest_pfa
     solo_forth.z80s:4084   .text:00000e50 pfa_to_lfa_
     solo_forth.z80s:201    .data:00000786 pfa_to_lfa_cfap
     solo_forth.z80s:201    .data:00000788 pfa_to_lfa_lfa
     solo_forth.z80s:201    .data:0000078a pfa_to_lfa_nfa
     solo_forth.z80s:4084   .text:00000e52 pfa_to_lfa_pfa
     solo_forth.z80s:4089   .text:00000e56 pfa_to_cfa_
     solo_forth.z80s:4113   .text:00000e62 cfa_to_nfa_
     solo_forth.z80s:201    .data:00000792 pfa_to_cfa_cfap
     solo_forth.z80s:201    .data:00000794 pfa_to_cfa_lfa
     solo_forth.z80s:201    .data:00000796 pfa_to_cfa_nfa
     solo_forth.z80s:4092   .text:00000e58 cfa_to_pfa_
     solo_forth.z80s:201    .data:0000079e cfa_to_pfa_cfap
GAS LISTING solo_forth.z80s 			page 169


     solo_forth.z80s:201    .data:000007a0 cfa_to_pfa_lfa
     solo_forth.z80s:201    .data:000007a2 cfa_to_pfa_nfa
     solo_forth.z80s:4095   .text:00000e5a pfa_to_nfa_
     solo_forth.z80s:201    .data:000007aa pfa_to_nfa_cfap
     solo_forth.z80s:201    .data:000007ac pfa_to_nfa_lfa
     solo_forth.z80s:201    .data:000007ae pfa_to_nfa_nfa
     solo_forth.z80s:4095   .text:00000e5c pfa_to_nfa_pfa
     solo_forth.z80s:201    .data:000007b6 cfa_to_nfa_cfap
     solo_forth.z80s:201    .data:000007b8 cfa_to_nfa_lfa
     solo_forth.z80s:201    .data:000007ba cfa_to_nfa_nfa
     solo_forth.z80s:4113   .text:00000e64 cfa_to_nfa_pfa
     solo_forth.z80s:4122   .text:00000e70 cfa_to_nfa.begin_0
     solo_forth.z80s:4125   .text:00000e71 cfa_to_nfa.begin_1
     solo_forth.z80s:4154   .text:00000e8f cfap_to_lfa_
     solo_forth.z80s:4113   .data:000007c2 cfap_to_lfa_cfap
     solo_forth.z80s:4113   .data:000007c4 cfap_to_lfa_lfa
     solo_forth.z80s:4113   .data:000007c6 cfap_to_lfa_nfa
     solo_forth.z80s:4158   .text:00000e91 nfa_to_lfa_
     solo_forth.z80s:4113   .data:000007cf nfa_to_lfa_cfap
     solo_forth.z80s:4113   .data:000007d1 nfa_to_lfa_lfa
     solo_forth.z80s:4113   .data:000007d3 nfa_to_lfa_nfa
     solo_forth.z80s:4161   .text:00000e93 c_store_bank_
     solo_forth.z80s:4113   .data:000007db c_store_bank_cfap
     solo_forth.z80s:4113   .data:000007dd c_store_bank_lfa
     solo_forth.z80s:4113   .data:000007df c_store_bank_nfa
     solo_forth.z80s:4161   .text:00000e95 c_store_bank_pfa
     solo_forth.z80s:4188   .text:00000e9f store_bank_
     solo_forth.z80s:4113   .data:000007e6 store_bank_cfap
     solo_forth.z80s:4113   .data:000007e8 store_bank_lfa
     solo_forth.z80s:4113   .data:000007ea store_bank_nfa
     solo_forth.z80s:4188   .text:00000ea1 store_bank_pfa
     solo_forth.z80s:4204   .text:00000eab c_fetch_bank_
     solo_forth.z80s:4113   .data:000007f0 c_fetch_bank_cfap
     solo_forth.z80s:4113   .data:000007f2 c_fetch_bank_lfa
     solo_forth.z80s:4113   .data:000007f4 c_fetch_bank_nfa
     solo_forth.z80s:4204   .text:00000ead c_fetch_bank_pfa
     solo_forth.z80s:4231   .text:00000eb7 fetch_bank_
     solo_forth.z80s:4113   .data:000007fb fetch_bank_cfap
     solo_forth.z80s:4113   .data:000007fd fetch_bank_lfa
     solo_forth.z80s:4113   .data:000007ff fetch_bank_nfa
     solo_forth.z80s:4231   .text:00000eb9 fetch_bank_pfa
     solo_forth.z80s:4260   .text:00000ec3 c_fetch_n_
     solo_forth.z80s:4113   .data:00000805 c_fetch_n_cfap
     solo_forth.z80s:4113   .data:00000807 c_fetch_n_lfa
     solo_forth.z80s:4113   .data:00000809 c_fetch_n_nfa
     solo_forth.z80s:4260   .text:00000ec5 c_fetch_n_pfa
     solo_forth.z80s:4280   .text:00000ecb fetch_n_
     solo_forth.z80s:4113   .data:0000080d fetch_n_cfap
     solo_forth.z80s:4113   .data:0000080f fetch_n_lfa
     solo_forth.z80s:4113   .data:00000811 fetch_n_nfa
     solo_forth.z80s:4280   .text:00000ecd fetch_n_pfa
     solo_forth.z80s:4300   .text:00000ed3 c_store_n_
     solo_forth.z80s:4113   .data:00000814 c_store_n_cfap
     solo_forth.z80s:4113   .data:00000816 c_store_n_lfa
     solo_forth.z80s:4300   .data:00000818 c_store_n_nfa
     solo_forth.z80s:4300   .text:00000ed5 c_store_n_pfa
     solo_forth.z80s:4316   .text:00000edb store_n_
GAS LISTING solo_forth.z80s 			page 170


     solo_forth.z80s:4300   .data:0000081c store_n_cfap
     solo_forth.z80s:4300   .data:0000081e store_n_lfa
     solo_forth.z80s:4300   .data:00000820 store_n_nfa
     solo_forth.z80s:4316   .text:00000edd store_n_pfa
     solo_forth.z80s:4300   .data:00000823 nfa_to_cfa_cfap
     solo_forth.z80s:4300   .data:00000825 nfa_to_cfa_lfa
     solo_forth.z80s:4300   .data:00000827 nfa_to_cfa_nfa
     solo_forth.z80s:4332   .text:00000ee5 nfa_to_cfa_pfa
     solo_forth.z80s:4345   .text:00000eee nfa_to_string_
     solo_forth.z80s:4300   .data:0000082f nfa_to_string_cfap
     solo_forth.z80s:4300   .data:00000831 nfa_to_string_lfa
     solo_forth.z80s:4300   .data:00000833 nfa_to_string_nfa
     solo_forth.z80s:4345   .text:00000ef0 nfa_to_string_pfa
     solo_forth.z80s:4300   .data:0000083e store_csp_cfap
     solo_forth.z80s:4300   .data:00000840 store_csp_lfa
     solo_forth.z80s:4300   .data:00000842 store_csp_nfa
     solo_forth.z80s:4356   .text:00000f05 store_csp_pfa
     solo_forth.z80s:4362   .text:00000f0d question_error_
     solo_forth.z80s:4300   .data:00000847 question_error_cfap
     solo_forth.z80s:4300   .data:00000849 question_error_lfa
     solo_forth.z80s:4300   .data:0000084b question_error_nfa
     solo_forth.z80s:4362   .text:00000f0f question_error_pfa
     solo_forth.z80s:4369   .text:00000f19 question_error.no_error
     solo_forth.z80s:5374   .text:00001380 error_
     solo_forth.z80s:4300   .data:00000852 comp_question_cfap
     solo_forth.z80s:4300   .data:00000854 comp_question_lfa
     solo_forth.z80s:4300   .data:00000856 comp_question_nfa
     solo_forth.z80s:4374   .text:00000f1f comp_question_pfa
     solo_forth.z80s:4300   .data:0000085c question_comp_cfap
     solo_forth.z80s:4300   .data:0000085e question_comp_lfa
     solo_forth.z80s:4300   .data:00000860 question_comp_nfa
     solo_forth.z80s:4380   .text:00000f27 question_comp_pfa
     solo_forth.z80s:4300   .data:00000866 question_exec_cfap
     solo_forth.z80s:4300   .data:00000868 question_exec_lfa
     solo_forth.z80s:4300   .data:0000086a question_exec_nfa
     solo_forth.z80s:4387   .text:00000f34 question_exec_pfa
     solo_forth.z80s:4300   .data:00000870 question_pairs_cfap
     solo_forth.z80s:4300   .data:00000872 question_pairs_lfa
     solo_forth.z80s:4396   .data:00000874 question_pairs_nfa
     solo_forth.z80s:4396   .text:00000f3f question_pairs_pfa
     solo_forth.z80s:4396   .data:0000087b question_csp_cfap
     solo_forth.z80s:4396   .data:0000087d question_csp_lfa
     solo_forth.z80s:4396   .data:0000087f question_csp_nfa
     solo_forth.z80s:4404   .text:00000f4a question_csp_pfa
     solo_forth.z80s:4411   .text:00000f59 question_loading_
     solo_forth.z80s:4396   .data:00000884 question_loading_cfap
     solo_forth.z80s:4396   .data:00000886 question_loading_lfa
     solo_forth.z80s:4396   .data:00000888 question_loading_nfa
     solo_forth.z80s:4411   .text:00000f5b question_loading_pfa
     solo_forth.z80s:4396   .data:00000891 compile_cfap
     solo_forth.z80s:4396   .data:00000893 compile_lfa
     solo_forth.z80s:4396   .data:00000895 compile_nfa
     solo_forth.z80s:4418   .text:00000f6a compile_pfa
     solo_forth.z80s:4425   .text:00000f7a postpone_
     solo_forth.z80s:4396   .data:0000089d postpone_cfap
     solo_forth.z80s:4396   .data:0000089f postpone_lfa
     solo_forth.z80s:4396   .data:000008a1 postpone_nfa
GAS LISTING solo_forth.z80s 			page 171


     solo_forth.z80s:4425   .text:00000f7c postpone_pfa
     solo_forth.z80s:6862   .text:00001979 defined_
     solo_forth.z80s:6895   .text:00001989 question_defined_
     solo_forth.z80s:4443   .text:00000f8c postpone.end
     solo_forth.z80s:4396   .data:000008aa left_bracket_cfap
     solo_forth.z80s:4396   .data:000008ac left_bracket_lfa
     solo_forth.z80s:4396   .data:000008ae left_bracket_nfa
     solo_forth.z80s:4448   .text:00000f92 left_bracket_pfa
     solo_forth.z80s:4396   .data:000008b0 right_bracket_cfap
     solo_forth.z80s:4396   .data:000008b2 right_bracket_lfa
     solo_forth.z80s:4396   .data:000008b4 right_bracket_nfa
     solo_forth.z80s:4454   .text:00000f9a right_bracket_pfa
     solo_forth.z80s:4396   .data:000008b6 smudge_cfap
     solo_forth.z80s:4396   .data:000008b8 smudge_lfa
     solo_forth.z80s:4396   .data:000008ba smudge_nfa
     solo_forth.z80s:4460   .text:00000fa2 smudge_pfa
     solo_forth.z80s:4396   .data:000008c1 hex_cfap
     solo_forth.z80s:4396   .data:000008c3 hex_lfa
     solo_forth.z80s:4396   .data:000008c5 hex_nfa
     solo_forth.z80s:4483   .text:00000fb5 hex_pfa
     solo_forth.z80s:4490   .text:00000fbe decimal_
     solo_forth.z80s:4396   .data:000008c9 decimal_cfap
     solo_forth.z80s:4396   .data:000008cb decimal_lfa
     solo_forth.z80s:4396   .data:000008cd decimal_nfa
     solo_forth.z80s:4490   .text:00000fc0 decimal_pfa
     solo_forth.z80s:4490   .data:000008d5 paren_semicolon_code_cfap
     solo_forth.z80s:4490   .data:000008d7 paren_semicolon_code_lfa
     solo_forth.z80s:4490   .data:000008d9 paren_semicolon_code_nfa
     solo_forth.z80s:4497   .text:00000fcb paren_semicolon_code_pfa
     solo_forth.z80s:4521   .text:00000fd5 semicolon_code_
     solo_forth.z80s:4490   .data:000008e1 semicolon_code_cfap
     solo_forth.z80s:4490   .data:000008e3 semicolon_code_lfa
     solo_forth.z80s:4490   .data:000008e5 semicolon_code_nfa
     solo_forth.z80s:4521   .text:00000fd7 semicolon_code_pfa
     solo_forth.z80s:4541   .text:00000fe5 does_
     solo_forth.z80s:4490   .data:000008eb does_cfap
     solo_forth.z80s:4490   .data:000008ed does_lfa
     solo_forth.z80s:4490   .data:000008ef does_nfa
     solo_forth.z80s:4541   .text:00000fe7 does_pfa
     solo_forth.z80s:4549   .text:00000ff8 do_does
     solo_forth.z80s:4490   .data:000008f5 count_cfap
     solo_forth.z80s:4490   .data:000008f7 count_lfa
     solo_forth.z80s:4490   .data:000008f9 count_nfa
     solo_forth.z80s:4567   .text:00001009 count_pfa
     solo_forth.z80s:4578   .text:00001010 bounds_
     solo_forth.z80s:4490   .data:000008ff bounds_cfap
     solo_forth.z80s:4490   .data:00000901 bounds_lfa
     solo_forth.z80s:4490   .data:00000903 bounds_nfa
     solo_forth.z80s:4578   .text:00001012 bounds_pfa
     solo_forth.z80s:4584   .text:0000101a type_
     solo_forth.z80s:4490   .data:0000090a type_cfap
     solo_forth.z80s:4490   .data:0000090c type_lfa
     solo_forth.z80s:4490   .data:0000090e type_nfa
     solo_forth.z80s:4584   .text:0000101c type_pfa
     solo_forth.z80s:4598   .text:00001032 type.empty_string
     solo_forth.z80s:4593   .text:00001026 type.do
     solo_forth.z80s:4600   .text:00001034 type.end
GAS LISTING solo_forth.z80s 			page 172


     solo_forth.z80s:4605   .text:00001036 minus_trailing_
     solo_forth.z80s:4490   .data:00000913 minus_trailing_cfap
     solo_forth.z80s:4490   .data:00000915 minus_trailing_lfa
     solo_forth.z80s:4490   .data:00000917 minus_trailing_nfa
     solo_forth.z80s:4605   .text:00001038 minus_trailing_pfa
     solo_forth.z80s:4614   .text:0000103d minus_trailing.begin
     solo_forth.z80s:4627   .text:0000104d paren_dot_quote_
     solo_forth.z80s:4490   .data:00000921 paren_dot_quote_cfap
     solo_forth.z80s:4490   .data:00000923 paren_dot_quote_lfa
     solo_forth.z80s:4490   .data:00000925 paren_dot_quote_nfa
     solo_forth.z80s:4627   .text:0000104f paren_dot_quote_pfa
     solo_forth.z80s:4636   .text:00001061 dot_quote_
     solo_forth.z80s:4627   .data:0000092d dot_quote_cfap
     solo_forth.z80s:4627   .data:0000092f dot_quote_lfa
     solo_forth.z80s:4627   .data:00000931 dot_quote_nfa
     solo_forth.z80s:4636   .text:00001063 dot_quote_pfa
     solo_forth.z80s:4645   .text:00001076 dot_quote.interpreting
     solo_forth.z80s:7870   .text:00001d3e exit_
     solo_forth.z80s:4650   .text:0000107a span_
     solo_forth.z80s:4627   .data:00000937 span_cfap
     solo_forth.z80s:4627   .data:00000939 span_lfa
     solo_forth.z80s:4627   .data:0000093b span_nfa
     solo_forth.z80s:4650   .text:0000107c span_pfa
     solo_forth.z80s:4665   .text:0000107e accept_
     solo_forth.z80s:4627   .data:00000940 accept_cfap
     solo_forth.z80s:4627   .data:00000942 accept_lfa
     solo_forth.z80s:4627   .data:00000944 accept_nfa
     solo_forth.z80s:4665   .text:00001080 accept_pfa
     solo_forth.z80s:4726   .text:00001082 expect_
     solo_forth.z80s:4627   .data:0000094b expect_cfap
     solo_forth.z80s:4627   .data:0000094d expect_lfa
     solo_forth.z80s:4627   .data:0000094f expect_nfa
     solo_forth.z80s:4726   .text:00001084 expect_pfa
     solo_forth.z80s:4800   .text:000010f9 expect.end
     solo_forth.z80s:4753   .text:00001094 expect.do
     solo_forth.z80s:4773   .text:000010be expect.maybe_carriage_return
     solo_forth.z80s:4797   .text:000010eb expect.loop
     solo_forth.z80s:4794   .text:000010e9 expect.emit
     solo_forth.z80s:4783   .text:000010d3 expect.control_char
     solo_forth.z80s:4790   .text:000010e3 expect.ordinary_key
     solo_forth.z80s:4792   .text:000010e5 expect.store
     solo_forth.z80s:4805   .text:000010fd query_
     solo_forth.z80s:4627   .data:00000956 query_cfap
     solo_forth.z80s:4627   .data:00000958 query_lfa
     solo_forth.z80s:4627   .data:0000095a query_nfa
     solo_forth.z80s:4805   .text:000010ff query_pfa
     solo_forth.z80s:4923   .text:0000115d blank_
     solo_forth.z80s:6364   .text:000017fc stream_end_
     solo_forth.z80s:4627   .data:00000960 x_cfap
     solo_forth.z80s:4627   .data:00000962 x_lfa
     solo_forth.z80s:4627   .data:00000964 x_nfa
     solo_forth.z80s:4838   .text:0000111d x_pfa
     solo_forth.z80s:4880   .text:0000113d x.exit
     solo_forth.z80s:4892   .text:0000113f x.end
     solo_forth.z80s:4896   .text:00001141 fill_
     solo_forth.z80s:4627   .data:00000966 fill_cfap
     solo_forth.z80s:4627   .data:00000968 fill_lfa
GAS LISTING solo_forth.z80s 			page 173


     solo_forth.z80s:4627   .data:0000096a fill_nfa
     solo_forth.z80s:4896   .text:00001143 fill_pfa
     solo_forth.z80s:4899   .text:00001144 fill.e
     solo_forth.z80s:4904   .text:00001148 fill.do
     solo_forth.z80s:4912   .text:00001153 fill.end
     solo_forth.z80s:4627   .data:0000096f erase_cfap
     solo_forth.z80s:4627   .data:00000971 erase_lfa
     solo_forth.z80s:4627   .data:00000973 erase_nfa
     solo_forth.z80s:4917   .text:00001158 erase_pfa
     solo_forth.z80s:4627   .data:00000979 blank_cfap
     solo_forth.z80s:4627   .data:0000097b blank_lfa
     solo_forth.z80s:4627   .data:0000097d blank_nfa
     solo_forth.z80s:4923   .text:0000115f blank_pfa
     solo_forth.z80s:4929   .text:00001164 hold_
     solo_forth.z80s:4923   .data:00000983 hold_cfap
     solo_forth.z80s:4923   .data:00000985 hold_lfa
     solo_forth.z80s:4923   .data:00000987 hold_nfa
     solo_forth.z80s:4929   .text:00001166 hold_pfa
     solo_forth.z80s:4936   .text:00001176 pad_
     solo_forth.z80s:4923   .data:0000098c pad_cfap
     solo_forth.z80s:4923   .data:0000098e pad_lfa
     solo_forth.z80s:4923   .data:00000990 pad_nfa
     solo_forth.z80s:4936   .text:00001178 pad_pfa
     solo_forth.z80s:4944   .text:00001181 stream_
     solo_forth.z80s:4923   .data:00000994 stream_cfap
     solo_forth.z80s:4923   .data:00000996 stream_lfa
     solo_forth.z80s:4923   .data:00000998 stream_nfa
     solo_forth.z80s:4944   .text:00001183 stream_pfa
     solo_forth.z80s:4958   .text:00001193 stream.terminal
     solo_forth.z80s:6516   .text:00001868 block_
     solo_forth.z80s:4960   .text:00001195 stream.end
     solo_forth.z80s:4965   .text:0000119d parsed_
     solo_forth.z80s:4923   .data:0000099f parsed_cfap
     solo_forth.z80s:4923   .data:000009a1 parsed_lfa
     solo_forth.z80s:4923   .data:000009a3 parsed_nfa
     solo_forth.z80s:4965   .text:0000119f parsed_pfa
     solo_forth.z80s:4923   .data:000009aa parse_cfap
     solo_forth.z80s:4923   .data:000009ac parse_lfa
     solo_forth.z80s:4923   .data:000009ae parse_nfa
     solo_forth.z80s:4979   .text:000011a9 parse_pfa
     solo_forth.z80s:4998   .text:000011b5 parse_name_
     solo_forth.z80s:4923   .data:000009b4 parse_name_cfap
     solo_forth.z80s:4923   .data:000009b6 parse_name_lfa
     solo_forth.z80s:4923   .data:000009b8 parse_name_nfa
     solo_forth.z80s:4998   .text:000011b7 parse_name_pfa
     solo_forth.z80s:5015   .text:000011d5 word_
     solo_forth.z80s:4923   .data:000009c3 word_cfap
     solo_forth.z80s:4923   .data:000009c5 word_lfa
     solo_forth.z80s:4923   .data:000009c7 word_nfa
     solo_forth.z80s:5015   .text:000011d7 word_pfa
     solo_forth.z80s:5075   .text:00001210 paren_number_
     solo_forth.z80s:4923   .data:000009cc paren_number_cfap
     solo_forth.z80s:4923   .data:000009ce paren_number_lfa
     solo_forth.z80s:4923   .data:000009d0 paren_number_nfa
     solo_forth.z80s:5075   .text:00001212 paren_number_pfa
     solo_forth.z80s:5088   .text:00001212 paren_number.begin
     solo_forth.z80s:5109   .text:0000124e paren_number.end
GAS LISTING solo_forth.z80s 			page 174


     solo_forth.z80s:5106   .text:00001248 paren_number.decimal_point_done
     solo_forth.z80s:5114   .text:00001252 number_
     solo_forth.z80s:4923   .data:000009d9 number_cfap
     solo_forth.z80s:5114   .data:000009db number_lfa
     solo_forth.z80s:5114   .data:000009dd number_nfa
     solo_forth.z80s:5114   .text:00001254 number_pfa
     solo_forth.z80s:5145   .text:0000126f number.begin
     solo_forth.z80s:5161   .text:00001294 number.a_blank
     solo_forth.z80s:5167   .text:0000129e number.end
     solo_forth.z80s:5171   .text:000012a0 upper_
     solo_forth.z80s:5114   .data:000009e4 upper_cfap
     solo_forth.z80s:5114   .data:000009e6 upper_lfa
     solo_forth.z80s:5114   .data:000009e8 upper_nfa
     solo_forth.z80s:5171   .text:000012a2 upper_pfa
     solo_forth.z80s:5185   .text:000012ab upper.a
     solo_forth.z80s:5195   .text:000012b4 uppers_
     solo_forth.z80s:5114   .data:000009ee uppers_cfap
     solo_forth.z80s:5114   .data:000009f0 uppers_lfa
     solo_forth.z80s:5114   .data:000009f2 uppers_nfa
     solo_forth.z80s:5195   .text:000012b6 uppers_pfa
     solo_forth.z80s:5205   .text:000012b8 uppers.do
     solo_forth.z80s:5217   .text:000012c7 defined_question_
     solo_forth.z80s:5114   .data:000009f9 defined_question_cfap
     solo_forth.z80s:5114   .data:000009fb defined_question_lfa
     solo_forth.z80s:5114   .data:000009fd defined_question_nfa
     solo_forth.z80s:5217   .text:000012c9 defined_question_pfa
     solo_forth.z80s:5314   .text:0000133c found_
     solo_forth.z80s:5225   .text:000012d1 undefined_question_
     solo_forth.z80s:5114   .data:00000a06 undefined_question_cfap
     solo_forth.z80s:5114   .data:00000a08 undefined_question_lfa
     solo_forth.z80s:5114   .data:00000a0a undefined_question_nfa
     solo_forth.z80s:5225   .text:000012d3 undefined_question_pfa
     solo_forth.z80s:5114   .data:00000a15 dollar_store_cfap
     solo_forth.z80s:5114   .data:00000a17 dollar_store_lfa
     solo_forth.z80s:5114   .data:00000a19 dollar_store_nfa
     solo_forth.z80s:5237   .text:000012db dollar_store_pfa
     solo_forth.z80s:5270   .text:000012eb find_
     solo_forth.z80s:5114   .data:00000a1c find_cfap
     solo_forth.z80s:5114   .data:00000a1e find_lfa
     solo_forth.z80s:5114   .data:00000a20 find_nfa
     solo_forth.z80s:5270   .text:000012ed find_pfa
     solo_forth.z80s:5292   .text:000012f3 find.do
     solo_forth.z80s:5300   .text:00001311 find.loop
     solo_forth.z80s:5305   .text:00001319 find_dollar_
     solo_forth.z80s:5114   .data:00000a25 find_dollar_cfap
     solo_forth.z80s:5114   .data:00000a27 find_dollar_lfa
     solo_forth.z80s:5114   .data:00000a29 find_dollar_nfa
     solo_forth.z80s:5305   .text:0000131b find_dollar_pfa
     solo_forth.z80s:5114   .data:00000a2f found_cfap
     solo_forth.z80s:5114   .data:00000a31 found_lfa
     solo_forth.z80s:5114   .data:00000a33 found_nfa
     solo_forth.z80s:5314   .text:0000133e found_pfa
     solo_forth.z80s:5333   .text:00001355 paren_abort_
     solo_forth.z80s:5314   .data:00000a39 paren_abort_cfap
     solo_forth.z80s:5314   .data:00000a3b paren_abort_lfa
     solo_forth.z80s:5314   .data:00000a3d paren_abort_nfa
     solo_forth.z80s:5333   .text:00001357 paren_abort_pfa
GAS LISTING solo_forth.z80s 			page 175


     solo_forth.z80s:5950   .text:00001618 abort_
     solo_forth.z80s:5339   .text:0000135b error_number_
     solo_forth.z80s:5314   .data:00000a45 error_number_cfap
     solo_forth.z80s:5314   .data:00000a47 error_number_lfa
     solo_forth.z80s:5314   .data:00000a49 error_number_nfa
     solo_forth.z80s:5339   .text:0000135d error_number_pfa
     solo_forth.z80s:5344   .text:0000135f error_pos_
     solo_forth.z80s:5314   .data:00000a50 error_pos_cfap
     solo_forth.z80s:5314   .data:00000a52 error_pos_lfa
     solo_forth.z80s:5314   .data:00000a54 error_pos_nfa
     solo_forth.z80s:5344   .text:00001361 error_pos_pfa
     solo_forth.z80s:5349   .text:00001365 error_to_line_
     solo_forth.z80s:5314   .data:00000a5e error_to_line_cfap
     solo_forth.z80s:5314   .data:00000a60 error_to_line_lfa
     solo_forth.z80s:5314   .data:00000a62 error_to_line_nfa
     solo_forth.z80s:5349   .text:00001367 error_to_line_pfa
     solo_forth.z80s:5362   .text:0000136f error_to_number.do
     solo_forth.z80s:6265   .text:00001769 mod_
     solo_forth.z80s:5314   .data:00000a6d error_cfap
     solo_forth.z80s:5314   .data:00000a6f error_lfa
     solo_forth.z80s:5314   .data:00000a71 error_nfa
     solo_forth.z80s:5374   .text:00001382 error_pfa
     solo_forth.z80s:5380   .text:00001392 error.message
     solo_forth.z80s:7535   .text:00001bfe _string_next
     solo_forth.z80s:7535   .text:00001bf6 _string_first
     solo_forth.z80s:6308   .text:000017bf message_
     solo_forth.z80s:5391   .text:000013bb error.end
     solo_forth.z80s:5874   .text:000015a3 quit_
     solo_forth.z80s:5395   .text:000013bd id_dot_
     solo_forth.z80s:5314   .data:00000a77 id_dot_cfap
     solo_forth.z80s:5314   .data:00000a79 id_dot_lfa
     solo_forth.z80s:5314   .data:00000a7b id_dot_nfa
     solo_forth.z80s:5395   .text:000013bf id_dot_pfa
     solo_forth.z80s:5314   .data:00000a7f header_cfap
     solo_forth.z80s:5314   .data:00000a81 header_lfa
     solo_forth.z80s:5314   .data:00000a83 header_nfa
     solo_forth.z80s:5401   .text:000013c9 header_pfa
     solo_forth.z80s:6101   .text:000016d8 abs_
     solo_forth.z80s:6237   .text:0000174d star_
     solo_forth.z80s:5423   .text:000013de header.continue
     solo_forth.z80s:6161   .text:000016fc min_
     solo_forth.z80s:5314   .data:00000a8a create_cfap
     solo_forth.z80s:5314   .data:00000a8c create_lfa
     solo_forth.z80s:5314   .data:00000a8e create_nfa
     solo_forth.z80s:5445   .text:00001416 create_pfa
     solo_forth.z80s:5455   .text:00001420 code_
     solo_forth.z80s:5445   .data:00000a95 code_cfap
     solo_forth.z80s:5445   .data:00000a97 code_lfa
     solo_forth.z80s:5445   .data:00000a99 code_nfa
     solo_forth.z80s:5455   .text:00001422 code_pfa
     solo_forth.z80s:5463   .text:0000142e compare_
     solo_forth.z80s:5445   .data:00000a9e compare_cfap
     solo_forth.z80s:5445   .data:00000aa0 compare_lfa
     solo_forth.z80s:5445   .data:00000aa2 compare_nfa
     solo_forth.z80s:5463   .text:00001430 compare_pfa
     solo_forth.z80s:5482   .text:00001439 compare.lengths
     solo_forth.z80s:5486   .text:0000143c compare.ready
GAS LISTING solo_forth.z80s 			page 176


     solo_forth.z80s:5516   .text:00001459 compare_strings_case_sensitive
     solo_forth.z80s:5503   .text:00001449 compare.no_match
     solo_forth.z80s:5498   .text:00001446 compare.match
     solo_forth.z80s:5507   .text:0000144a compare.end
     solo_forth.z80s:5537   .text:00001465 search_
     solo_forth.z80s:5445   .data:00000aaa search_cfap
     solo_forth.z80s:5445   .data:00000aac search_lfa
     solo_forth.z80s:5445   .data:00000aae search_nfa
     solo_forth.z80s:5537   .text:00001467 search_pfa
     solo_forth.z80s:5579   .text:00001489 search.string_2_len
     solo_forth.z80s:5599   .text:000014a2 search.string_1_len
     solo_forth.z80s:5602   .text:000014a6 search.string_1_addr
     solo_forth.z80s:5588   .text:00001495 search.match
     solo_forth.z80s:5565   .text:0000147d search.1
     solo_forth.z80s:5597   .text:0000149e search.no_match
     solo_forth.z80s:5590   .text:00001498 search.end
     solo_forth.z80s:5607   .text:000014ab bracket_compile_
     solo_forth.z80s:5445   .data:00000ab5 bracket_compile_cfap
     solo_forth.z80s:5445   .data:00000ab7 bracket_compile_lfa
     solo_forth.z80s:5445   .data:00000ab9 bracket_compile_nfa
     solo_forth.z80s:5607   .text:000014ad bracket_compile_pfa
     solo_forth.z80s:6934   .text:000019a4 tick_
     solo_forth.z80s:5445   .data:00000ac3 s_literal_cfap
     solo_forth.z80s:5445   .data:00000ac5 s_literal_lfa
     solo_forth.z80s:5445   .data:00000ac7 s_literal_nfa
     solo_forth.z80s:5613   .text:000014b5 s_literal_pfa
     solo_forth.z80s:5621   .text:000014bd c_literal_
     solo_forth.z80s:5445   .data:00000ad0 c_literal_cfap
     solo_forth.z80s:5445   .data:00000ad2 c_literal_lfa
     solo_forth.z80s:5445   .data:00000ad4 c_literal_nfa
     solo_forth.z80s:5621   .text:000014bf c_literal_pfa
     solo_forth.z80s:5639   .text:000014cb c_literal.end
     solo_forth.z80s:5647   .text:000014cd literal_
     solo_forth.z80s:5445   .data:00000add literal_cfap
     solo_forth.z80s:5445   .data:00000adf literal_lfa
     solo_forth.z80s:5445   .data:00000ae1 literal_nfa
     solo_forth.z80s:5647   .text:000014cf literal_pfa
     solo_forth.z80s:5663   .text:000014db literal.end
     solo_forth.z80s:5671   .text:000014dd two_literal_
     solo_forth.z80s:5445   .data:00000ae9 two_literal_cfap
     solo_forth.z80s:5445   .data:00000aeb two_literal_lfa
     solo_forth.z80s:5671   .data:00000aed two_literal_nfa
     solo_forth.z80s:5671   .text:000014df two_literal_pfa
     solo_forth.z80s:5687   .text:000014eb two_literal.end
     solo_forth.z80s:5696   .text:000014ed depth_
     solo_forth.z80s:5671   .data:00000af6 depth_cfap
     solo_forth.z80s:5671   .data:00000af8 depth_lfa
     solo_forth.z80s:5671   .data:00000afa depth_nfa
     solo_forth.z80s:5696   .text:000014ef depth_pfa
     solo_forth.z80s:6259   .text:00001761 slash_
     solo_forth.z80s:5702   .text:000014ff question_stack_
     solo_forth.z80s:5671   .data:00000b00 question_stack_cfap
     solo_forth.z80s:5671   .data:00000b02 question_stack_lfa
     solo_forth.z80s:5671   .data:00000b04 question_stack_nfa
     solo_forth.z80s:5702   .text:00001501 question_stack_pfa
     solo_forth.z80s:5723   .text:0000151e interpret_
     solo_forth.z80s:5671   .data:00000b0b interpret_cfap
GAS LISTING solo_forth.z80s 			page 177


     solo_forth.z80s:5671   .data:00000b0d interpret_lfa
     solo_forth.z80s:5671   .data:00000b0f interpret_nfa
     solo_forth.z80s:5723   .text:00001520 interpret_pfa
     solo_forth.z80s:5738   .text:00001520 interpret.begin
     solo_forth.z80s:5789   .text:00001540 interpret.word_not_found
     solo_forth.z80s:5780   .text:0000153a interpret.execute
     solo_forth.z80s:5804   .text:00001552 interpret.16bit_number
     solo_forth.z80s:5813   .text:0000155a immediate_
     solo_forth.z80s:5671   .data:00000b19 immediate_cfap
     solo_forth.z80s:5671   .data:00000b1b immediate_lfa
     solo_forth.z80s:5671   .data:00000b1d immediate_nfa
     solo_forth.z80s:5813   .text:0000155c immediate_pfa
     solo_forth.z80s:5824   .text:0000156d vocabulary_
     solo_forth.z80s:5671   .data:00000b27 vocabulary_cfap
     solo_forth.z80s:5671   .data:00000b29 vocabulary_lfa
     solo_forth.z80s:5671   .data:00000b2b vocabulary_nfa
     solo_forth.z80s:5824   .text:0000156f vocabulary_pfa
     solo_forth.z80s:5671   .data:00000b36 definitions_cfap
     solo_forth.z80s:5671   .data:00000b38 definitions_lfa
     solo_forth.z80s:5671   .data:00000b3a definitions_nfa
     solo_forth.z80s:5859   .text:0000158e definitions_pfa
     solo_forth.z80s:5866   .text:00001598 paren_
     solo_forth.z80s:5671   .data:00000b46 paren_cfap
     solo_forth.z80s:5866   .data:00000b48 paren_lfa
     solo_forth.z80s:5866   .data:00000b4a paren_nfa
     solo_forth.z80s:5866   .text:0000159a paren_pfa
     solo_forth.z80s:7487   .text:00001bb8 two_drop_
     solo_forth.z80s:5866   .data:00000b4c quit_cfap
     solo_forth.z80s:5866   .data:00000b4e quit_lfa
     solo_forth.z80s:5866   .data:00000b50 quit_nfa
     solo_forth.z80s:5874   .text:000015a5 quit_pfa
     solo_forth.z80s:5879   .text:000015ab quit.do
     solo_forth.z80s:5924   .text:000015c8 greeting_
     solo_forth.z80s:5866   .data:00000b55 greeting_cfap
     solo_forth.z80s:5866   .data:00000b57 greeting_lfa
     solo_forth.z80s:5866   .data:00000b59 greeting_nfa
     solo_forth.z80s:5924   .text:000015ca greeting_pfa
     solo_forth.z80s:7515   .text:00001bd3 unused_
     solo_forth.z80s:7329   .text:00001b1f u_dot_
     solo_forth.z80s:5866   .data:00000b62 abort_cfap
     solo_forth.z80s:5866   .data:00000b64 abort_lfa
     solo_forth.z80s:5866   .data:00000b66 abort_nfa
     solo_forth.z80s:5950   .text:0000161a abort_pfa
     solo_forth.z80s:5954   .text:00001620 boot
     solo_forth.z80s:5959   .text:00001624 boot_
     solo_forth.z80s:5866   .data:00000b6c boot_cfap
     solo_forth.z80s:5866   .data:00000b6e boot_lfa
     solo_forth.z80s:5866   .data:00000b70 boot_nfa
     solo_forth.z80s:5959   .text:00001626 boot_pfa
     solo_forth.z80s:5964   .text:00001628 warm_
     solo_forth.z80s:5866   .data:00000b75 warm_cfap
     solo_forth.z80s:5866   .data:00000b77 warm_lfa
     solo_forth.z80s:5866   .data:00000b79 warm_nfa
     solo_forth.z80s:5964   .text:0000162a warm_pfa
     solo_forth.z80s:7454   .text:00001ba7 page_
     solo_forth.z80s:7475   .text:00001bb4 system_stack_pointer
     solo_forth.z80s:6034   .text:000016a6 common_start
GAS LISTING solo_forth.z80s 			page 178


     solo_forth.z80s:5985   .text:00001639 cold_
     solo_forth.z80s:5866   .data:00000b7e cold_cfap
     solo_forth.z80s:5866   .data:00000b80 cold_lfa
     solo_forth.z80s:5866   .data:00000b82 cold_nfa
     solo_forth.z80s:5985   .text:0000163b cold_pfa
     solo_forth.z80s:6381   .text:0000180a empty_buffers_
     solo_forth.z80s:7362   .text:00001b63 colors0_
     solo_forth.z80s:6024   .text:0000169e only_first_cold
     solo_forth.z80s:8020   .text:00001d9c move_name_fields_to_memory_bank
     solo_forth.z80s:6045   .text:000016b1 s_to_d_
     solo_forth.z80s:5866   .data:00000b87 s_to_d_cfap
     solo_forth.z80s:5866   .data:00000b89 s_to_d_lfa
     solo_forth.z80s:5866   .data:00000b8b s_to_d_nfa
     solo_forth.z80s:6045   .text:000016b3 s_to_d_pfa
     solo_forth.z80s:6066   .text:000016c0 plus_minus_
     solo_forth.z80s:5866   .data:00000b8f plus_minus_cfap
     solo_forth.z80s:5866   .data:00000b91 plus_minus_lfa
     solo_forth.z80s:5866   .data:00000b93 plus_minus_nfa
     solo_forth.z80s:6066   .text:000016c2 plus_minus_pfa
     solo_forth.z80s:6079   .text:000016ca plus_minus.end
     solo_forth.z80s:6083   .text:000016cc d_plus_minus_
     solo_forth.z80s:5866   .data:00000b96 d_plus_minus_cfap
     solo_forth.z80s:5866   .data:00000b98 d_plus_minus_lfa
     solo_forth.z80s:5866   .data:00000b9a d_plus_minus_nfa
     solo_forth.z80s:6083   .text:000016ce d_plus_minus_pfa
     solo_forth.z80s:6097   .text:000016d6 d_plus_minus.end
     solo_forth.z80s:5866   .data:00000b9e abs_cfap
     solo_forth.z80s:5866   .data:00000ba0 abs_lfa
     solo_forth.z80s:5866   .data:00000ba2 abs_nfa
     solo_forth.z80s:6101   .text:000016da abs_pfa
     solo_forth.z80s:6115   .text:000016e0 dabs_
     solo_forth.z80s:6101   .data:00000ba6 dabs_cfap
     solo_forth.z80s:6101   .data:00000ba8 dabs_lfa
     solo_forth.z80s:6101   .data:00000baa dabs_nfa
     solo_forth.z80s:6115   .text:000016e2 dabs_pfa
     solo_forth.z80s:6129   .text:000016e8 umax_
     solo_forth.z80s:6101   .data:00000baf umax_cfap
     solo_forth.z80s:6101   .data:00000bb1 umax_lfa
     solo_forth.z80s:6101   .data:00000bb3 umax_nfa
     solo_forth.z80s:6129   .text:000016ea umax_pfa
     solo_forth.z80s:6179   .text:0000170d max.1
     solo_forth.z80s:6145   .text:000016f2 umin_
     solo_forth.z80s:6101   .data:00000bb8 umin_cfap
     solo_forth.z80s:6101   .data:00000bba umin_lfa
     solo_forth.z80s:6101   .data:00000bbc umin_nfa
     solo_forth.z80s:6145   .text:000016f4 umin_pfa
     solo_forth.z80s:6181   .text:0000170e max.2
     solo_forth.z80s:6101   .data:00000bc1 min_cfap
     solo_forth.z80s:6101   .data:00000bc3 min_lfa
     solo_forth.z80s:6101   .data:00000bc5 min_nfa
     solo_forth.z80s:6161   .text:000016fe min_pfa
     solo_forth.z80s:6171   .text:00001706 max_
     solo_forth.z80s:6101   .data:00000bc9 max_cfap
     solo_forth.z80s:6101   .data:00000bcb max_lfa
     solo_forth.z80s:6101   .data:00000bcd max_nfa
     solo_forth.z80s:6171   .text:00001708 max_pfa
     solo_forth.z80s:6176   .text:00001709 max.de
GAS LISTING solo_forth.z80s 			page 179


     solo_forth.z80s:6187   .text:00001715 m_star_
     solo_forth.z80s:6101   .data:00000bd1 m_star_cfap
     solo_forth.z80s:6101   .data:00000bd3 m_star_lfa
     solo_forth.z80s:6101   .data:00000bd5 m_star_nfa
     solo_forth.z80s:6187   .text:00001717 m_star_pfa
     solo_forth.z80s:6206   .text:0000172b m_slash_
     solo_forth.z80s:6101   .data:00000bd8 m_slash_cfap
     solo_forth.z80s:6101   .data:00000bda m_slash_lfa
     solo_forth.z80s:6101   .data:00000bdc m_slash_nfa
     solo_forth.z80s:6206   .text:0000172d m_slash_pfa
     solo_forth.z80s:6101   .data:00000bdf star_cfap
     solo_forth.z80s:6101   .data:00000be1 star_lfa
     solo_forth.z80s:6101   .data:00000be3 star_nfa
     solo_forth.z80s:6237   .text:0000174f star_pfa
     solo_forth.z80s:6243   .text:00001755 slash_mod_
     solo_forth.z80s:6101   .data:00000be5 slash_mod_cfap
     solo_forth.z80s:6101   .data:00000be7 slash_mod_lfa
     solo_forth.z80s:6101   .data:00000be9 slash_mod_nfa
     solo_forth.z80s:6243   .text:00001757 slash_mod_pfa
     solo_forth.z80s:6101   .data:00000bee slash_cfap
     solo_forth.z80s:6101   .data:00000bf0 slash_lfa
     solo_forth.z80s:6101   .data:00000bf2 slash_nfa
     solo_forth.z80s:6259   .text:00001763 slash_pfa
     solo_forth.z80s:6101   .data:00000bf4 mod_cfap
     solo_forth.z80s:6101   .data:00000bf6 mod_lfa
     solo_forth.z80s:6101   .data:00000bf8 mod_nfa
     solo_forth.z80s:6265   .text:0000176b mod_pfa
     solo_forth.z80s:6271   .text:00001771 star_slash_mod_
     solo_forth.z80s:6101   .data:00000bfc star_slash_mod_cfap
     solo_forth.z80s:6101   .data:00000bfe star_slash_mod_lfa
     solo_forth.z80s:6271   .data:00000c00 star_slash_mod_nfa
     solo_forth.z80s:6271   .text:00001773 star_slash_mod_pfa
     solo_forth.z80s:6278   .text:0000177d star_slash_
     solo_forth.z80s:6271   .data:00000c06 star_slash_cfap
     solo_forth.z80s:6271   .data:00000c08 star_slash_lfa
     solo_forth.z80s:6271   .data:00000c0a star_slash_nfa
     solo_forth.z80s:6278   .text:0000177f star_slash_pfa
     solo_forth.z80s:6284   .text:00001785 m_slash_mod_
     solo_forth.z80s:6271   .data:00000c0d m_slash_mod_cfap
     solo_forth.z80s:6271   .data:00000c0f m_slash_mod_lfa
     solo_forth.z80s:6271   .data:00000c11 m_slash_mod_nfa
     solo_forth.z80s:6284   .text:00001787 m_slash_mod_pfa
     solo_forth.z80s:6293   .text:0000179b paren_line_
     solo_forth.z80s:6271   .data:00000c17 paren_line_cfap
     solo_forth.z80s:6271   .data:00000c19 paren_line_lfa
     solo_forth.z80s:6271   .data:00000c1b paren_line_nfa
     solo_forth.z80s:6293   .text:0000179d paren_line_pfa
     solo_forth.z80s:6302   .text:000017b5 dot_line_
     solo_forth.z80s:6271   .data:00000c22 dot_line_cfap
     solo_forth.z80s:6271   .data:00000c24 dot_line_lfa
     solo_forth.z80s:6271   .data:00000c26 dot_line_nfa
     solo_forth.z80s:6302   .text:000017b7 dot_line_pfa
     solo_forth.z80s:6271   .data:00000c2c message_cfap
     solo_forth.z80s:6271   .data:00000c2e message_lfa
     solo_forth.z80s:6271   .data:00000c30 message_nfa
     solo_forth.z80s:6308   .text:000017c1 message_pfa
     solo_forth.z80s:6321   .text:000017d3 message.number_only
GAS LISTING solo_forth.z80s 			page 180


     solo_forth.z80s:7308   .text:00001b0f dot_
     solo_forth.z80s:6330   .text:000017e2 update_
     solo_forth.z80s:6271   .data:00000c38 update_cfap
     solo_forth.z80s:6271   .data:00000c3a update_lfa
     solo_forth.z80s:6271   .data:00000c3c update_nfa
     solo_forth.z80s:6330   .text:000017e4 update_pfa
     solo_forth.z80s:6350   .text:000017f4 updated_question_
     solo_forth.z80s:6271   .data:00000c43 updated_question_cfap
     solo_forth.z80s:6271   .data:00000c45 updated_question_lfa
     solo_forth.z80s:6271   .data:00000c47 updated_question_nfa
     solo_forth.z80s:6350   .text:000017f6 updated_question_pfa
     solo_forth.z80s:6410   .text:0000181e buffer_id_
     solo_forth.z80s:6271   .data:00000c50 stream_end_cfap
     solo_forth.z80s:6271   .data:00000c52 stream_end_lfa
     solo_forth.z80s:6271   .data:00000c54 stream_end_nfa
     solo_forth.z80s:6364   .text:000017fe stream_end_pfa
     solo_forth.z80s:6364   .data:00000c5f empty_buffers_cfap
     solo_forth.z80s:6364   .data:00000c61 empty_buffers_lfa
     solo_forth.z80s:6364   .data:00000c63 empty_buffers_nfa
     solo_forth.z80s:6381   .text:0000180c empty_buffers_pfa
     solo_forth.z80s:6396   .text:00001816 buffer_data_
     solo_forth.z80s:6364   .data:00000c71 buffer_data_cfap
     solo_forth.z80s:6364   .data:00000c73 buffer_data_lfa
     solo_forth.z80s:6364   .data:00000c75 buffer_data_nfa
     solo_forth.z80s:6396   .text:00001818 buffer_data_pfa
     solo_forth.z80s:6364   .data:00000c81 buffer_id_cfap
     solo_forth.z80s:6364   .data:00000c83 buffer_id_lfa
     solo_forth.z80s:6364   .data:00000c85 buffer_id_nfa
     solo_forth.z80s:6410   .text:00001820 buffer_id_pfa
     solo_forth.z80s:6424   .text:00001826 block_number_
     solo_forth.z80s:6364   .data:00000c8f block_number_cfap
     solo_forth.z80s:6364   .data:00000c91 block_number_lfa
     solo_forth.z80s:6364   .data:00000c93 block_number_nfa
     solo_forth.z80s:6424   .text:00001828 block_number_pfa
     solo_forth.z80s:6440   .text:00001830 buffer_block_
     solo_forth.z80s:6364   .data:00000ca0 buffer_block_cfap
     solo_forth.z80s:6364   .data:00000ca2 buffer_block_lfa
     solo_forth.z80s:6364   .data:00000ca4 buffer_block_nfa
     solo_forth.z80s:6440   .text:00001832 buffer_block_pfa
     solo_forth.z80s:6454   .text:00001838 paren_buffer_
     solo_forth.z80s:6364   .data:00000cb1 paren_buffer_cfap
     solo_forth.z80s:6454   .data:00000cb3 paren_buffer_lfa
     solo_forth.z80s:6454   .data:00000cb5 paren_buffer_nfa
     solo_forth.z80s:6454   .text:0000183a paren_buffer_pfa
     solo_forth.z80s:6477   .text:00001848 free_buffer.not_updated
     solo_forth.z80s:6668   .text:000018d9 write_buffer_
     solo_forth.z80s:6479   .text:0000184a free_buffer.end
     solo_forth.z80s:6484   .text:00001850 buffer_
     solo_forth.z80s:6454   .data:00000cbe buffer_cfap
     solo_forth.z80s:6454   .data:00000cc0 buffer_lfa
     solo_forth.z80s:6454   .data:00000cc2 buffer_nfa
     solo_forth.z80s:6484   .text:00001852 buffer_pfa
     solo_forth.z80s:6509   .text:00001862 buffer.not_equals
     solo_forth.z80s:6511   .text:00001864 buffer.end
     solo_forth.z80s:6454   .data:00000cc9 block_cfap
     solo_forth.z80s:6454   .data:00000ccb block_lfa
     solo_forth.z80s:6454   .data:00000ccd block_nfa
GAS LISTING solo_forth.z80s 			page 181


     solo_forth.z80s:6516   .text:0000186a block_pfa
     solo_forth.z80s:6545   .text:0000187a block.not_equals
     solo_forth.z80s:6548   .text:00001884 block.end
     solo_forth.z80s:6723   .text:00001902 save_buffers_
     solo_forth.z80s:6639   .text:000018c6 read_buffer_
     solo_forth.z80s:6553   .text:00001888 flip_
     solo_forth.z80s:6454   .data:00000cd3 flip_cfap
     solo_forth.z80s:6454   .data:00000cd5 flip_lfa
     solo_forth.z80s:6454   .data:00000cd7 flip_nfa
     solo_forth.z80s:6553   .text:0000188a flip_pfa
     solo_forth.z80s:6573   .text:00001891 block_to_sector_
     solo_forth.z80s:6454   .data:00000cdc block_to_sector_cfap
     solo_forth.z80s:6454   .data:00000cde block_to_sector_lfa
     solo_forth.z80s:6454   .data:00000ce0 block_to_sector_nfa
     solo_forth.z80s:6573   .text:00001893 block_to_sector_pfa
     solo_forth.z80s:6624   .text:000018bd read_block_
     solo_forth.z80s:6454   .data:00000ced read_block_cfap
     solo_forth.z80s:6454   .data:00000cef read_block_lfa
     solo_forth.z80s:6454   .data:00000cf1 read_block_nfa
     solo_forth.z80s:6624   .text:000018bf read_block_pfa
     solo_forth.z80s:6682   .text:000018e3 transfer_block_
     solo_forth.z80s:6454   .data:00000cfc read_buffer_cfap
     solo_forth.z80s:6454   .data:00000cfe read_buffer_lfa
     solo_forth.z80s:6454   .data:00000d00 read_buffer_nfa
     solo_forth.z80s:6639   .text:000018c8 read_buffer_pfa
     solo_forth.z80s:6653   .text:000018d0 write_block_
     solo_forth.z80s:6454   .data:00000d0c write_block_cfap
     solo_forth.z80s:6653   .data:00000d0e write_block_lfa
     solo_forth.z80s:6653   .data:00000d10 write_block_nfa
     solo_forth.z80s:6653   .text:000018d2 write_block_pfa
     solo_forth.z80s:6653   .data:00000d1c write_buffer_cfap
     solo_forth.z80s:6653   .data:00000d1e write_buffer_lfa
     solo_forth.z80s:6653   .data:00000d20 write_buffer_nfa
     solo_forth.z80s:6668   .text:000018db write_buffer_pfa
     solo_forth.z80s:6653   .data:00000d2d transfer_block_cfap
     solo_forth.z80s:6653   .data:00000d2f transfer_block_lfa
     solo_forth.z80s:6653   .data:00000d31 transfer_block_nfa
     solo_forth.z80s:6682   .text:000018e5 transfer_block_pfa
     solo_forth.z80s:6715   .text:000018fa read_write_sector_command
     solo_forth.z80s:6701   .text:000018f1 paren_transfer_block_
     solo_forth.z80s:6708   .text:000018f3 paren_transfer_block_pfa
     solo_forth.z80s:6653   .data:00000d40 save_buffers_cfap
     solo_forth.z80s:6653   .data:00000d42 save_buffers_lfa
     solo_forth.z80s:6653   .data:00000d44 save_buffers_nfa
     solo_forth.z80s:6723   .text:00001904 save_buffers_pfa
     solo_forth.z80s:7890   .text:00001d44 question_exit_
     solo_forth.z80s:6748   .text:00001916 flush_
     solo_forth.z80s:6653   .data:00000d51 flush_cfap
     solo_forth.z80s:6653   .data:00000d53 flush_lfa
     solo_forth.z80s:6653   .data:00000d55 flush_nfa
     solo_forth.z80s:6748   .text:00001918 flush_pfa
     solo_forth.z80s:6756   .text:0000191e paren_load_
     solo_forth.z80s:6653   .data:00000d5b paren_load_cfap
     solo_forth.z80s:6653   .data:00000d5d paren_load_lfa
     solo_forth.z80s:6653   .data:00000d5f paren_load_nfa
     solo_forth.z80s:6756   .text:00001920 paren_load_pfa
     solo_forth.z80s:6784   .text:00001939 continued_
GAS LISTING solo_forth.z80s 			page 182


     solo_forth.z80s:6653   .data:00000d66 continued_cfap
     solo_forth.z80s:6653   .data:00000d68 continued_lfa
     solo_forth.z80s:6784   .data:00000d6a continued_nfa
     solo_forth.z80s:6784   .text:0000193b continued_pfa
     solo_forth.z80s:6807   .text:00001941 load_
     solo_forth.z80s:6784   .data:00000d74 load_cfap
     solo_forth.z80s:6784   .data:00000d76 load_lfa
     solo_forth.z80s:6784   .data:00000d78 load_nfa
     solo_forth.z80s:6807   .text:00001943 load_pfa
     solo_forth.z80s:6839   .text:0000195f next_screen_
     solo_forth.z80s:6784   .data:00000d7d next_screen_cfap
     solo_forth.z80s:6784   .data:00000d7f next_screen_lfa
     solo_forth.z80s:6784   .data:00000d81 next_screen_nfa
     solo_forth.z80s:6839   .text:00001961 next_screen_pfa
     solo_forth.z80s:6784   .data:00000d85 defined_cfap
     solo_forth.z80s:6784   .data:00000d87 defined_lfa
     solo_forth.z80s:6784   .data:00000d89 defined_nfa
     solo_forth.z80s:6862   .text:0000197b defined_pfa
     solo_forth.z80s:6784   .data:00000d91 question_defined_cfap
     solo_forth.z80s:6784   .data:00000d93 question_defined_lfa
     solo_forth.z80s:6784   .data:00000d95 question_defined_nfa
     solo_forth.z80s:6895   .text:0000198b question_defined_pfa
     solo_forth.z80s:6910   .text:00001994 bracket_defined_
     solo_forth.z80s:6784   .data:00000d9e bracket_defined_cfap
     solo_forth.z80s:6784   .data:00000da0 bracket_defined_lfa
     solo_forth.z80s:6784   .data:00000da2 bracket_defined_nfa
     solo_forth.z80s:6910   .text:00001996 bracket_defined_pfa
     solo_forth.z80s:6922   .text:0000199c bracket_undefined_
     solo_forth.z80s:6784   .data:00000dac bracket_undefined_cfap
     solo_forth.z80s:6784   .data:00000dae bracket_undefined_lfa
     solo_forth.z80s:6784   .data:00000db0 bracket_undefined_nfa
     solo_forth.z80s:6922   .text:0000199e bracket_undefined_pfa
     solo_forth.z80s:6784   .data:00000dbc tick_cfap
     solo_forth.z80s:6784   .data:00000dbe tick_lfa
     solo_forth.z80s:6784   .data:00000dc0 tick_nfa
     solo_forth.z80s:6934   .text:000019a6 tick_pfa
     solo_forth.z80s:6946   .text:000019ac bracket_tick_
     solo_forth.z80s:6784   .data:00000dc2 bracket_tick_cfap
     solo_forth.z80s:6784   .data:00000dc4 bracket_tick_lfa
     solo_forth.z80s:6946   .data:00000dc6 bracket_tick_nfa
     solo_forth.z80s:6946   .text:000019ae bracket_tick_pfa
     solo_forth.z80s:6958   .text:000019b4 begin_
     solo_forth.z80s:6946   .data:00000dca begin_cfap
     solo_forth.z80s:6946   .data:00000dcc begin_lfa
     solo_forth.z80s:6946   .data:00000dce begin_nfa
     solo_forth.z80s:6958   .text:000019b6 begin_pfa
     solo_forth.z80s:6978   .text:000019be then_
     solo_forth.z80s:6946   .data:00000dd4 then_cfap
     solo_forth.z80s:6946   .data:00000dd6 then_lfa
     solo_forth.z80s:6946   .data:00000dd8 then_nfa
     solo_forth.z80s:6978   .text:000019c0 then_pfa
     solo_forth.z80s:6996   .text:000019ca do_
     solo_forth.z80s:6946   .data:00000ddd do_cfap
     solo_forth.z80s:6946   .data:00000ddf do_lfa
     solo_forth.z80s:6946   .data:00000de1 do_nfa
     solo_forth.z80s:6996   .text:000019cc do_pfa
     solo_forth.z80s:6999   .text:000019d0 do.common
GAS LISTING solo_forth.z80s 			page 183


     solo_forth.z80s:7007   .text:000019d7 loop_
     solo_forth.z80s:6946   .data:00000de4 loop_cfap
     solo_forth.z80s:6946   .data:00000de6 loop_lfa
     solo_forth.z80s:6946   .data:00000de8 loop_nfa
     solo_forth.z80s:7007   .text:000019d9 loop_pfa
     solo_forth.z80s:7018   .text:000019e6 plus_loop_
     solo_forth.z80s:6946   .data:00000ded plus_loop_cfap
     solo_forth.z80s:6946   .data:00000def plus_loop_lfa
     solo_forth.z80s:6946   .data:00000df1 plus_loop_nfa
     solo_forth.z80s:7018   .text:000019e8 plus_loop_pfa
     solo_forth.z80s:7029   .text:000019f5 until_
     solo_forth.z80s:6946   .data:00000df7 until_cfap
     solo_forth.z80s:6946   .data:00000df9 until_lfa
     solo_forth.z80s:6946   .data:00000dfb until_nfa
     solo_forth.z80s:7029   .text:000019f7 until_pfa
     solo_forth.z80s:7039   .text:00001a03 again_
     solo_forth.z80s:6946   .data:00000e01 again_cfap
     solo_forth.z80s:6946   .data:00000e03 again_lfa
     solo_forth.z80s:6946   .data:00000e05 again_nfa
     solo_forth.z80s:7039   .text:00001a05 again_pfa
     solo_forth.z80s:7058   .text:00001a11 repeat_
     solo_forth.z80s:6946   .data:00000e0b repeat_cfap
     solo_forth.z80s:6946   .data:00000e0d repeat_lfa
     solo_forth.z80s:6946   .data:00000e0f repeat_nfa
     solo_forth.z80s:7058   .text:00001a13 repeat_pfa
     solo_forth.z80s:7083   .text:00001a1d if_
     solo_forth.z80s:6946   .data:00000e16 if_cfap
     solo_forth.z80s:6946   .data:00000e18 if_lfa
     solo_forth.z80s:6946   .data:00000e1a if_nfa
     solo_forth.z80s:7083   .text:00001a1f if_pfa
     solo_forth.z80s:7086   .text:00001a23 if.do
     solo_forth.z80s:7094   .text:00001a29 unless_
     solo_forth.z80s:6946   .data:00000e1d unless_cfap
     solo_forth.z80s:6946   .data:00000e1f unless_lfa
     solo_forth.z80s:7094   .data:00000e21 unless_nfa
     solo_forth.z80s:7094   .text:00001a2b unless_pfa
     solo_forth.z80s:7108   .text:00001a33 ahead_
     solo_forth.z80s:7094   .data:00000e28 ahead_cfap
     solo_forth.z80s:7094   .data:00000e2a ahead_lfa
     solo_forth.z80s:7094   .data:00000e2c ahead_nfa
     solo_forth.z80s:7108   .text:00001a35 ahead_pfa
     solo_forth.z80s:7114   .text:00001a3b else_
     solo_forth.z80s:7094   .data:00000e32 else_cfap
     solo_forth.z80s:7094   .data:00000e34 else_lfa
     solo_forth.z80s:7094   .data:00000e36 else_nfa
     solo_forth.z80s:7114   .text:00001a3d else_pfa
     solo_forth.z80s:7142   .text:00001a51 while_
     solo_forth.z80s:7094   .data:00000e3b while_cfap
     solo_forth.z80s:7094   .data:00000e3d while_lfa
     solo_forth.z80s:7094   .data:00000e3f while_nfa
     solo_forth.z80s:7142   .text:00001a53 while_pfa
     solo_forth.z80s:7150   .text:00001a57 spaces_
     solo_forth.z80s:7094   .data:00000e45 spaces_cfap
     solo_forth.z80s:7094   .data:00000e47 spaces_lfa
     solo_forth.z80s:7094   .data:00000e49 spaces_nfa
     solo_forth.z80s:7150   .text:00001a59 spaces_pfa
     solo_forth.z80s:7156   .text:00001a5f emits_
GAS LISTING solo_forth.z80s 			page 184


     solo_forth.z80s:7094   .data:00000e50 emits_cfap
     solo_forth.z80s:7094   .data:00000e52 emits_lfa
     solo_forth.z80s:7094   .data:00000e54 emits_nfa
     solo_forth.z80s:7156   .text:00001a61 emits_pfa
     solo_forth.z80s:7168   .text:00001a79 emits_.end
     solo_forth.z80s:7165   .text:00001a71 emits_.do
     solo_forth.z80s:7173   .text:00001a7d less_hash_
     solo_forth.z80s:7094   .data:00000e5a less_hash_cfap
     solo_forth.z80s:7094   .data:00000e5c less_hash_lfa
     solo_forth.z80s:7094   .data:00000e5e less_hash_nfa
     solo_forth.z80s:7173   .text:00001a7f less_hash_pfa
     solo_forth.z80s:7181   .text:00001a87 hash_greater_
     solo_forth.z80s:7094   .data:00000e61 hash_greater_cfap
     solo_forth.z80s:7094   .data:00000e63 hash_greater_lfa
     solo_forth.z80s:7094   .data:00000e65 hash_greater_nfa
     solo_forth.z80s:7181   .text:00001a89 hash_greater_pfa
     solo_forth.z80s:7192   .text:00001a99 sign_
     solo_forth.z80s:7094   .data:00000e68 sign_cfap
     solo_forth.z80s:7094   .data:00000e6a sign_lfa
     solo_forth.z80s:7094   .data:00000e6c sign_nfa
     solo_forth.z80s:7192   .text:00001a9b sign_pfa
     solo_forth.z80s:7211   .text:00001aa8 sign.end
     solo_forth.z80s:7215   .text:00001aaa hash_
     solo_forth.z80s:7094   .data:00000e71 hash_cfap
     solo_forth.z80s:7094   .data:00000e73 hash_lfa
     solo_forth.z80s:7094   .data:00000e75 hash_nfa
     solo_forth.z80s:7215   .text:00001aac hash_pfa
     solo_forth.z80s:7237   .text:00001ac4 hash.digit
     solo_forth.z80s:7246   .text:00001acd hash_s_
     solo_forth.z80s:7094   .data:00000e77 hash_s_cfap
     solo_forth.z80s:7094   .data:00000e79 hash_s_lfa
     solo_forth.z80s:7094   .data:00000e7b hash_s_nfa
     solo_forth.z80s:7246   .text:00001acf hash_s_pfa
     solo_forth.z80s:7254   .text:00001acf hash_s.begin
     solo_forth.z80s:7260   .text:00001adb d_dot_r_
     solo_forth.z80s:7246   .data:00000e7e d_dot_r_cfap
     solo_forth.z80s:7246   .data:00000e80 d_dot_r_lfa
     solo_forth.z80s:7246   .data:00000e82 d_dot_r_nfa
     solo_forth.z80s:7260   .text:00001add d_dot_r_pfa
     solo_forth.z80s:7287   .text:00001af9 dot_r_
     solo_forth.z80s:7246   .data:00000e86 dot_r_cfap
     solo_forth.z80s:7246   .data:00000e88 dot_r_lfa
     solo_forth.z80s:7246   .data:00000e8a dot_r_nfa
     solo_forth.z80s:7287   .text:00001afb dot_r_pfa
     solo_forth.z80s:7293   .text:00001b05 d_dot_
     solo_forth.z80s:7246   .data:00000e8d d_dot_cfap
     solo_forth.z80s:7246   .data:00000e8f d_dot_lfa
     solo_forth.z80s:7246   .data:00000e91 d_dot_nfa
     solo_forth.z80s:7293   .text:00001b07 d_dot_pfa
     solo_forth.z80s:7246   .data:00000e94 dot_cfap
     solo_forth.z80s:7246   .data:00000e96 dot_lfa
     solo_forth.z80s:7246   .data:00000e98 dot_nfa
     solo_forth.z80s:7308   .text:00001b11 dot_pfa
     solo_forth.z80s:7323   .text:00001b17 question_
     solo_forth.z80s:7246   .data:00000e9a question_cfap
     solo_forth.z80s:7246   .data:00000e9c question_lfa
     solo_forth.z80s:7246   .data:00000e9e question_nfa
GAS LISTING solo_forth.z80s 			page 185


     solo_forth.z80s:7323   .text:00001b19 question_pfa
     solo_forth.z80s:7246   .data:00000ea0 u_dot_cfap
     solo_forth.z80s:7246   .data:00000ea2 u_dot_lfa
     solo_forth.z80s:7246   .data:00000ea4 u_dot_nfa
     solo_forth.z80s:7329   .text:00001b21 u_dot_pfa
     solo_forth.z80s:7338   .text:00001b27 dot_s_
     solo_forth.z80s:7246   .data:00000ea7 dot_s_cfap
     solo_forth.z80s:7246   .data:00000ea9 dot_s_lfa
     solo_forth.z80s:7246   .data:00000eab dot_s_nfa
     solo_forth.z80s:7338   .text:00001b29 dot_s_pfa
     solo_forth.z80s:7356   .text:00001b61 dot_s.end
     solo_forth.z80s:7352   .text:00001b53 dot_s.do
     solo_forth.z80s:7246   .data:00000eae colors0_cfap
     solo_forth.z80s:7246   .data:00000eb0 colors0_lfa
     solo_forth.z80s:7246   .data:00000eb2 colors0_nfa
     solo_forth.z80s:7362   .text:00001b65 colors0_pfa
     solo_forth.z80s:7401   .text:00001b7a home_
     solo_forth.z80s:7246   .data:00000eba home_cfap
     solo_forth.z80s:7246   .data:00000ebc home_lfa
     solo_forth.z80s:7246   .data:00000ebe home_nfa
     solo_forth.z80s:7401   .text:00001b7c home_pfa
     solo_forth.z80s:7418   .text:00001b84 cls_
     solo_forth.z80s:7246   .data:00000ec3 cls_cfap
     solo_forth.z80s:7246   .data:00000ec5 cls_lfa
     solo_forth.z80s:7246   .data:00000ec7 cls_nfa
     solo_forth.z80s:7418   .text:00001b86 cls_pfa
     solo_forth.z80s:7246   .data:00000ecb page_cfap
     solo_forth.z80s:7246   .data:00000ecd page_lfa
     solo_forth.z80s:7246   .data:00000ecf page_nfa
     solo_forth.z80s:7454   .text:00001ba9 page_pfa
     solo_forth.z80s:7472   .text:00001bad bye_
     solo_forth.z80s:7246   .data:00000ed4 bye_cfap
     solo_forth.z80s:7246   .data:00000ed6 bye_lfa
     solo_forth.z80s:7472   .data:00000ed8 bye_nfa
     solo_forth.z80s:7472   .text:00001baf bye_pfa
     solo_forth.z80s:7472   .data:00000edc two_drop_cfap
     solo_forth.z80s:7472   .data:00000ede two_drop_lfa
     solo_forth.z80s:7472   .data:00000ee0 two_drop_nfa
     solo_forth.z80s:7487   .text:00001bba two_drop_pfa
     solo_forth.z80s:7494   .text:00001bbe two_swap_
     solo_forth.z80s:7472   .data:00000ee6 two_swap_cfap
     solo_forth.z80s:7472   .data:00000ee8 two_swap_lfa
     solo_forth.z80s:7472   .data:00000eea two_swap_nfa
     solo_forth.z80s:7494   .text:00001bc0 two_swap_pfa
     solo_forth.z80s:7472   .data:00000ef0 unused_cfap
     solo_forth.z80s:7472   .data:00000ef2 unused_lfa
     solo_forth.z80s:7472   .data:00000ef4 unused_nfa
     solo_forth.z80s:7515   .text:00001bd5 unused_pfa
     solo_forth.z80s:7522   .text:00001bdd where_
     solo_forth.z80s:7472   .data:00000efb where_cfap
     solo_forth.z80s:7472   .data:00000efd where_lfa
     solo_forth.z80s:7472   .data:00000eff where_nfa
     solo_forth.z80s:7522   .text:00001bdf where_pfa
     solo_forth.z80s:7532   .text:00001bed where.do_it
     solo_forth.z80s:7546   .text:00001c29 at_xy
     solo_forth.z80s:7472   .data:00000f05 at_xycfap
     solo_forth.z80s:7472   .data:00000f07 at_xylfa
GAS LISTING solo_forth.z80s 			page 186


     solo_forth.z80s:7472   .data:00000f09 at_xynfa
     solo_forth.z80s:7546   .text:00001c2b at_xypfa
     solo_forth.z80s:7568   .text:00001c42 at_pfa.last_line
     solo_forth.z80s:7582   .text:00001c67 border_
     solo_forth.z80s:7472   .data:00000f0f border_cfap
     solo_forth.z80s:7472   .data:00000f11 border_lfa
     solo_forth.z80s:7472   .data:00000f13 border_nfa
     solo_forth.z80s:7582   .text:00001c69 border_pfa
     solo_forth.z80s:7605   .text:00001c74 border.end
     solo_forth.z80s:7615   .text:00001c7d overwrite_
     solo_forth.z80s:7472   .data:00000f1a overwrite_cfap
     solo_forth.z80s:7472   .data:00000f1c overwrite_lfa
     solo_forth.z80s:7472   .data:00000f1e overwrite_nfa
     solo_forth.z80s:7615   .text:00001c7f overwrite_pfa
     solo_forth.z80s:7649   .text:00001ca4 color
     solo_forth.z80s:7621   .text:00001c84 flash_
     solo_forth.z80s:7472   .data:00000f28 flash_cfap
     solo_forth.z80s:7472   .data:00000f2a flash_lfa
     solo_forth.z80s:7472   .data:00000f2c flash_nfa
     solo_forth.z80s:7621   .text:00001c86 flash_pfa
     solo_forth.z80s:7627   .text:00001c8b inverse_
     solo_forth.z80s:7472   .data:00000f32 inverse_cfap
     solo_forth.z80s:7627   .data:00000f34 inverse_lfa
     solo_forth.z80s:7627   .data:00000f36 inverse_nfa
     solo_forth.z80s:7627   .text:00001c8d inverse_pfa
     solo_forth.z80s:7633   .text:00001c92 bright_
     solo_forth.z80s:7627   .data:00000f3e bright_cfap
     solo_forth.z80s:7627   .data:00000f40 bright_lfa
     solo_forth.z80s:7627   .data:00000f42 bright_nfa
     solo_forth.z80s:7633   .text:00001c94 bright_pfa
     solo_forth.z80s:7639   .text:00001c99 paper_
     solo_forth.z80s:7627   .data:00000f49 paper_cfap
     solo_forth.z80s:7627   .data:00000f4b paper_lfa
     solo_forth.z80s:7627   .data:00000f4d paper_nfa
     solo_forth.z80s:7639   .text:00001c9b paper_pfa
     solo_forth.z80s:7645   .text:00001ca0 ink_
     solo_forth.z80s:7627   .data:00000f53 ink_cfap
     solo_forth.z80s:7627   .data:00000f55 ink_lfa
     solo_forth.z80s:7627   .data:00000f57 ink_nfa
     solo_forth.z80s:7645   .text:00001ca2 ink_pfa
     solo_forth.z80s:7663   .text:00001cad emitted_
     solo_forth.z80s:7627   .data:00000f5b emitted_cfap
     solo_forth.z80s:7627   .data:00000f5d emitted_lfa
     solo_forth.z80s:7627   .data:00000f5f emitted_nfa
     solo_forth.z80s:7663   .text:00001caf emitted_pfa
     solo_forth.z80s:7768   .text:00001d00 emitted_charset_pfa
     solo_forth.z80s:7783   .text:00001d04 hash_emitted_chars_pfa
     solo_forth.z80s:7719   .text:00001cc9 emitted.do
     solo_forth.z80s:7731   .text:00001cd6 emitted.match
     solo_forth.z80s:7752   .text:00001cee emitted.next_char
     solo_forth.z80s:7734   .text:00001cd9 emitted.scans
     solo_forth.z80s:7762   .text:00001cf8 emitted.end
     solo_forth.z80s:7768   .text:00001cfe emitted_charset_
     solo_forth.z80s:7627   .data:00000f67 emitted_charset_cfap
     solo_forth.z80s:7627   .data:00000f69 emitted_charset_lfa
     solo_forth.z80s:7627   .data:00000f6b emitted_charset_nfa
     solo_forth.z80s:7783   .text:00001d02 hash_emitted_chars_
GAS LISTING solo_forth.z80s 			page 187


     solo_forth.z80s:7627   .data:00000f7b hash_emitted_chars_cfap
     solo_forth.z80s:7627   .data:00000f7d hash_emitted_chars_lfa
     solo_forth.z80s:7627   .data:00000f7f hash_emitted_chars_nfa
     solo_forth.z80s:7798   .text:00001d06 j_
     solo_forth.z80s:7627   .data:00000f8e j_cfap
     solo_forth.z80s:7798   .data:00000f90 j_lfa
     solo_forth.z80s:7798   .data:00000f92 j_nfa
     solo_forth.z80s:7798   .text:00001d08 j_pfa
     solo_forth.z80s:7814   .text:00001d12 two_constant_
     solo_forth.z80s:7798   .data:00000f94 two_constant_cfap
     solo_forth.z80s:7798   .data:00000f96 two_constant_lfa
     solo_forth.z80s:7798   .data:00000f98 two_constant_nfa
     solo_forth.z80s:7814   .text:00001d14 two_constant_pfa
     solo_forth.z80s:7824   .text:00001d1d two_variable_
     solo_forth.z80s:7818   .text:00001d18 do_two_constant
     solo_forth.z80s:7798   .data:00000fa2 two_variable_cfap
     solo_forth.z80s:7798   .data:00000fa4 two_variable_lfa
     solo_forth.z80s:7798   .data:00000fa6 two_variable_nfa
     solo_forth.z80s:7824   .text:00001d1f two_variable_pfa
     solo_forth.z80s:7849   .text:00001d29 u_dot_r_
     solo_forth.z80s:7798   .data:00000fb0 u_dot_r_cfap
     solo_forth.z80s:7798   .data:00000fb2 u_dot_r_lfa
     solo_forth.z80s:7798   .data:00000fb4 u_dot_r_nfa
     solo_forth.z80s:7849   .text:00001d2b u_dot_r_pfa
     solo_forth.z80s:7855   .text:00001d35 two_over_
     solo_forth.z80s:7798   .data:00000fb8 two_over_cfap
     solo_forth.z80s:7798   .data:00000fba two_over_lfa
     solo_forth.z80s:7798   .data:00000fbc two_over_nfa
     solo_forth.z80s:7855   .text:00001d37 two_over_pfa
     solo_forth.z80s:7798   .data:00000fc2 exit_cfap
     solo_forth.z80s:7798   .data:00000fc4 exit_lfa
     solo_forth.z80s:7798   .data:00000fc6 exit_nfa
     solo_forth.z80s:7870   .text:00001d40 exit_pfa
     solo_forth.z80s:7798   .data:00000fcb question_exit_cfap
     solo_forth.z80s:7798   .data:00000fcd question_exit_lfa
     solo_forth.z80s:7798   .data:00000fcf question_exit_nfa
     solo_forth.z80s:7890   .text:00001d46 question_exit_pfa
     solo_forth.z80s:7933   .text:00001d4c char_
     solo_forth.z80s:7798   .data:00000fd5 char_cfap
     solo_forth.z80s:7798   .data:00000fd7 char_lfa
     solo_forth.z80s:7798   .data:00000fd9 char_nfa
     solo_forth.z80s:7933   .text:00001d4e char_pfa
     solo_forth.z80s:7939   .text:00001d56 bracket_char_
     solo_forth.z80s:7798   .data:00000fde bracket_char_cfap
     solo_forth.z80s:7798   .data:00000fe0 bracket_char_lfa
     solo_forth.z80s:7798   .data:00000fe2 bracket_char_nfa
     solo_forth.z80s:7939   .text:00001d58 bracket_char_pfa
     solo_forth.z80s:7946   .text:00001d5e s_quote_
     solo_forth.z80s:7798   .data:00000fe9 s_quote_cfap
     solo_forth.z80s:7946   .data:00000feb s_quote_lfa
     solo_forth.z80s:7946   .data:00000fed s_quote_nfa
     solo_forth.z80s:7946   .text:00001d60 s_quote_pfa
     solo_forth.z80s:7956   .text:00001d67 question_next_screen_
     solo_forth.z80s:7946   .data:00000ff3 question_next_screen_cfap
     solo_forth.z80s:7946   .data:00000ff5 question_next_screen_lfa
     solo_forth.z80s:7946   .data:00000ff7 question_next_screen_nfa
     solo_forth.z80s:7956   .text:00001d69 question_next_screen_pfa
GAS LISTING solo_forth.z80s 			page 188


     solo_forth.z80s:7960   .text:00001d6f question_next_screen.end
     solo_forth.z80s:7968   .text:00001d71 question_backslash_
     solo_forth.z80s:7946   .data:00000ffc question_backslash_cfap
     solo_forth.z80s:7946   .data:00000ffe question_backslash_lfa
     solo_forth.z80s:7946   .data:00001000 question_backslash_nfa
     solo_forth.z80s:7968   .text:00001d73 question_backslash_pfa
     solo_forth.z80s:7981   .text:00001d79 question_backslash.end
     solo_forth.z80s:7985   .text:00001d7b backslash_
     solo_forth.z80s:7946   .data:00001004 backslash_cfap
     solo_forth.z80s:7946   .data:00001006 backslash_lfa
     solo_forth.z80s:7946   .data:00001008 backslash_nfa
     solo_forth.z80s:7985   .text:00001d7d backslash_pfa
     solo_forth.z80s:8001   .text:00001d91 dot_paren_
     solo_forth.z80s:7946   .data:0000100b dot_paren_cfap
     solo_forth.z80s:7946   .data:0000100d dot_paren_lfa
     solo_forth.z80s:7946   .data:0000100f dot_paren_nfa
     solo_forth.z80s:8001   .text:00001d93 dot_paren_pfa

NO UNDEFINED SYMBOLS
