GAS LISTING solo_forth.z80s 			page 1


 GNU assembler version 2.22 (z80-unknown-coff)
	 using BFD version (GNU Binutils) 2.22.
 options passed	: -z80 -agls=solo_forth.list.txt -L 
 input file    	: solo_forth.z80s
 output file   	: solo_forth.o
 target        	: z80-unknown-coff
 time stamp    	: 2015-08-19T00:43:03.000+0200

GAS LISTING solo_forth.z80s 			page 2


   1               	; Solo Forth
   2               	;
   3               	
   4               	; *******************************************************
   5               	; XXX WARNING
   6               	
   7               	; This source has being converted from Pasmo to GNU binutils.
   8               	; It can be assembled, but does not work fine yet.
   9               	
  10               	; *******************************************************
  11               	
  12               	  .text
  13               	
  14               	; XXX TODO
  15               	version_status:   equ 'A'
  16               	version_branch:   equ 00
  17               	version_release:  equ 2015081721
  18               	
  19               	; XXX TMP -- for debugging
  20               	;vr_div: equ version_release/65535
  21               	;vr_mod: equ version_release mod 65535
  22               	;vr_mod2: equ version_release - vr_div
  23               	
  24               	; A Forth system for ZX Spectrum 128K and G+DOS.
  25               	; http://programandala.net/en.program.solo_forth.html
  26               	
  27               	; Copyright (C) 2015 Marcos Cruz (programandala.net)
  28               	
  29               	; Copying and distribution of this file, with or without
  30               	; modification, are permitted in any medium without royalty
  31               	; provided the copyright notice, the aknowledgments file and
  32               	; this notice are preserved.  This file is offered as-is,
  33               	; without any warranty.
  34               	
  35               	; ==============================================================
  36               	; Acknowledgments
  37               	
  38               	; See the file <ACKNOWLEDGMENTS.adoc>.
  39               	
  40               	; ==============================================================
  41               	; History
  42               	
  43               	; See
  44               	; http://programandala.net/en.program.solo_forth.history.html
  45               	
  46               	; ==============================================================
  47               	; System description
  48               	
  49               	; ----------------------------------------------
  50               	; Forth Registers
  51               	
  52               	; Forth Z80  Forth preservation rules
  53               	; ----- ---  ------------------------
  54               	; IP    BC   Interpretive pointer.
  55               	;            Should be preserved across Forth words.
  56               	; SP    SP   Data stack pointer.
  57               	;            Should be used only as data stack across Forth words.
GAS LISTING solo_forth.z80s 			page 3


  58               	;            May be used within Forth words if restored before exit.
  59               	;       DE   Input only when pushhlde called. ; XXX TODO
  60               	;       HL   Input only when pushhl called. ; XXX TODO
  61               	;       IX   Address of `next`.
  62               	;            May be used within Forth words if restored before exit.
  63               	;       IY   Address of the ERRNR ZX Spectrum system variable.
  64               	;            May be used within Forth words if restored before exit.
  65               	
  66               	; ----------------------------------------------
  67               	; Header structure
  68               	
  69               	; The name and link fields are created in a memory bank:
  70               	
  71               	; cfap: dw cfa             ; Pointer to cfa in main memory.
  72               	; lfa:  dw nfa of the previous word
  73               	; nfa:  db length+flags    ; Bits:      76543210
  74               	                           ; Bit names: .PSLLLLL
  75               	                           ; Legend:
  76               	                           ;   P: Precedence bit.
  77               	                           ;      0 = non-immediate word
  78               	                           ;      1 = immediate word
  79               	                           ;   S: Smudge bit:
  80               	                           ;      0 = definition completed
  81               	                           ;      1 = definition not completed
  82               	                           ;   LLLLL: name length (0..31).
  83               	;       ds length          ; name
  84               	
  85               	; The code and parameter fields are created in the dictionary:
  86               	
  87               	; cfa: dw code_address
  88               	; pfa:    ...              ; data or code
  89               	
  90               	; ==============================================================
  91               	; Glossary
  92               	
  93               	; The description of Forth words is included in this source.
  94               	; The markers `doc{` and `}doc` delimitate the comments that
  95               	; form the glossary.
  96               	
  97               	; ----------------------------------------------
  98               	; Stack notation
  99               	
 100               	; XXX TODO
 101               	; XXX TODO update when true=-1
 102               	
 103               	; a        = address
 104               	; ca       = character-aligned address
 105               	
 106               	; f        = flag (false is 0; true is any other value)
 107               	; tf       = true flag (1)
 108               	; ff       = false flag (0)
 109               	; wf       = well-formed flag (false is 0; true is 1)
 110               	
 111               	; b        = 8-bit byte
 112               	; c        = 7-bit or 8-bit character
 113               	; u        = 16-bit unsigned number
 114               	; len      = 16-bit unsigned number, length of memory zone or string
GAS LISTING solo_forth.z80s 			page 4


 115               	; ca len   = string
 116               	; n        = 16-bit signed number
 117               	; x        = 16-bit signed or unsigned number
 118               	; d        = 32-bit signed double number
 119               	; ud       = 32-bit unsigned double number
 120               	; xd       = 32-bit signed or unsigned number
 121               	
 122               	; xc       = 8-bit graphic x coordinate (0..255)
 123               	; yc       = 8-bit graphic y coordinate (0..191)
 124               	; line     = 8-bit cursor line (0..23)
 125               	; col      = 8-bit cursor column (0..31)
 126               	
 127               	; cfa      = code field address
 128               	; lfa      = link field address
 129               	; nfa      = name field address
 130               	; pfa      = parameter field address
 131               	; cfap     = code field address pointer
 132               	
 133               	; orig     = address of an unresolved forward branch
 134               	; dest     = address of a backward branch target
 135               	
 136               	; cs-id    = control structure identifier
 137               	
 138               	; op       = Z80 8-bit opcode, generally a jump
 139               	; r        = Z80 8-bit register identifier
 140               	; rp       = Z80 16-bit register pair identifier
 141               	
 142               	; ----------------------------------------------
 143               	; Parsed text notation
 144               	
 145               	; XXX TODO
 146               	
 147               	; <char>          the delimiting character marking the end of the
 148               	;                 string being parsed
 149               	; <chars>         zero or more consecutive occurrences of the
 150               	;                 character char
 151               	; <space>         a delimiting space character
 152               	; <spaces>        zero or more consecutive occurrences of the
 153               	;                 character space
 154               	; <quote>         a delimiting double quote
 155               	; <paren>         a delimiting right parenthesis
 156               	; <eol>           an implied delimiter marking the end of a line
 157               	; ccc             a parsed sequence of arbitrary characters,
 158               	;                 excluding the delimiter character
 159               	; text            same as ccc
 160               	; name            a token delimited by space, equivalent to
 161               	;                 ccc<space> or ccc<eol>
 162               	
 163               	; ----------------------------------------------
 164               	; Word attributes
 165               	
 166               	; XXX TODO -- finish
 167               	
 168               	; The capital letters on the right show definition characteristics:
 169               	
 170               	; C      May only be used within a colon definition. A digit indicates number
 171               	;        of memory addresses used, if other than one. A plus sign indicates
GAS LISTING solo_forth.z80s 			page 5


 172               	;        a variable number of memory addresses used.
 173               	; E      Intended for execution only.
 174               	; I      Immediate. Has precedence bit set. Will execute even when compiling.
 175               	; U      A user variable.
 176               	
 177               	; ==============================================================
 178               	; Configuration
 179               	
 180               	  ; XXX FIXME Pasmo gives strange errors (symbols not found)
 181               	  ; when some config flags are used in nested `if`. A literal
 182               	  ; flag (0/1) is used instead, with the flag name in a comment;
 183               	  ; it is changed with a text substitution.  Some Vim mappings
 184               	  ; are created to turn them on on an off.
 185               	
 186               	  ; XXX experimental
 187               	size_optimization: equ false
 188               	  ; true = some code pieces are more compact but slower.
 189               	  ; false = normal, faster code.
 190               	
 191               	  ; XXX TODO -- not used yet
 192               	fig_parsing: equ false
 193               	  ; true = the fig-Forth parsing method is used.
 194               	  ; false = parsing is modified after Forth-83 and ANS Forth.
 195               	
 196               	  ; XXX TODO
 197               	latin1_charset_in_bank: equ false
 198               	  ; true = a 224-char Latin 1 charset is stored in the memory bank.
 199               	  ; false = the default charset is used.
 200               	
 201               	ans_forth_block_size: equ false
 202               	  ; true = one 1024-byte block per screen ; XXX TODO
 203               	  ; false = two 512-byte blocks per screen
 204               	
 205               	  ; XXX TODO
 206               	; fig_exit: equ true
 207               	  ; true = fig-Forth `;s` is used
 208               	  ; false = Forth-83 and ANS Forth `exit` is used ; XXX FIXME
 209               	
 210               	  ; XXX TODO try false
 211               	  ; XXX FIXME still there are problems when compiler security is off
 212               	  ; XXX TMP 2015-08-16 Note: using 1 intead  of the label doesn't make a
 213               	  ; difference in the crash bug
 214               	;fig_compiler_security: equ true
 215               	  ; true = fig-Forth `?pairs' is used
 216               	  ; false = no checking during compilation of control
 217               	  ;   structures: smaller and faster code.
 218               	
 219               	  ; XXX TODO
 220               	show_version: equ false
 221               	
 222               	; ==============================================================
 223               	; Symbols
 224               	
 225               	; ----------------------------------------------
 226               	; Forth
 227               	
 228               	origin:                           equ 0x5E00
GAS LISTING solo_forth.z80s 			page 6


 229               	
 230               	false:                            equ 0
 231               	true:                             equ 1
 232               	.if true==(-1)
 233               	  ; XXX FIXME
 234               	  ; There were problems when true=-1, but it seems they have
 235               	  ; disappeared after switching to the one buffer method.
 236               	  .warning TRUE is -1
 237               	.endif
 238               	
 239               	cell:                             equ 2
 240               	
 241               	cells_per_data_stack:             equ 0x50
 242               	cells_per_return_stack:           equ 0x50
 243               	
 244               	bytes_per_terminal_input_buffer:  equ 0x50
 245               	
 246               	buffers:                          equ 0x01
 247               	
 248               	.if ans_forth_block_size
 249               	
 250               	data_bytes_per_buffer:          equ 0x0400
 251               	blocks_per_screen:              equ 0x01
 252               	
 253               	.else
 254               	
 255               	data_bytes_per_buffer:          equ 0x0200
 256               	blocks_per_screen:              equ 0x02
 257               	
 258               	.endif
 259               	
 260               	total_bytes_per_buffer:           equ 2+data_bytes_per_buffer+3
 261               	
 262               	screens_per_disk:                 equ 0x030C ; 780 KiB per disk in G+DOS
 263               	characters_per_line:              equ 0x40
 264               	lines_per_screen:                 equ 0x10
 265               	max_search_order:                 equ 0x08 ; maximum number of vocabularies in the search order
 266               	bytes_per_user_variables:         equ 0x40
 267               	
 268               	smudge_bit:       equ 5
 269               	smudge_mask:      equ 1 << smudge_bit
 270               	precedence_bit:   equ 6
 271               	precedence_mask:  equ 1 << precedence_bit
 272               	
 273               	max_word_length:            equ 0x1F
 274               	max_word_length_mask:       equ max_word_length
 275               	
 276               	csb_size:                       equ 256 ; size of the circular string buffer
 277               	
 278               	; Memory banks
 279               	
 280               	default_bank: equ 0
 281               	names_bank:   equ 1
 282               	
 283               	names_bank_address: equ 0xC000 ; names pointers
 284               	
 285               	; Charset
GAS LISTING solo_forth.z80s 			page 7


 286               	
 287               	charset_size:     equ 224*8 ; 224 chars (0x20..0xFF) * 8 bitmap rows
 288               	charset_address:  equ 0xFFFF-charset_size+1
 289               	
 290               	; Control structure check numbers
 291               	
 292               	; XXX TODO -- not used yet
 293               	;begin_structure_check_number:   equ 1
 294               	;if_structure_check_number:      equ 2
 295               	;do_structure_check_number:      equ 3
 296               	;case_structure_check_number:    equ 4
 297               	;of_structure_check_number:      equ 5
 298               	;for_structure_check_number:     equ 6
 299               	
 300               	; Error messages are in the disk, starting from the screen
 301               	; number hold in the `msg-scr` constant.  Error codes 0, 16, 32
 302               	; etc are not used, because they coincide with the first line of
 303               	; screens.
 304               	
 305               	; XXX TODO change the order
 306               	
 307               	error.not_understood:               equ 01
 308               	error.stack_empty:                  equ 02
 309               	error.dictionary_full:              equ 03 ; not used
 310               	error.not_unique:                   equ 04
 311               	error.not_found:                    equ 05
 312               	error.out_of_disk_range:            equ 06
 313               	error.full_stack:                   equ 07
 314               	error.number_08:                    equ 08 ; free
 315               	error.loading_from_screen_0:        equ 09
 316               	error.number_10:                    equ 10 ; free
 317               	error.number_11:                    equ 11 ; free
 318               	error.number_12:                    equ 12 ; free
 319               	error.number_13:                    equ 13 ; free
 320               	error.number_14:                    equ 14 ; free
 321               	error.deferred_word_uninitialized:  equ 15
 322               	error.compilation_only:             equ 17
 323               	error.execution_only:               equ 18
 324               	error.conditionals_not_paired:      equ 19
 325               	error.definition_not_finished:      equ 20
 326               	error.protected_dictionary:         equ 21
 327               	error.loading_only:                 equ 22
 328               	error.off_current_editing_screen:   equ 23
 329               	error.declare_vocabulary:           equ 24
 330               	error.unsupported_tape_operation:   equ 25
 331               	error.unsupported_disk_operation:   equ 26
 332               	error.source_file_needed:           equ 27
 333               	error.not_present_though_required:  equ 28
 334               	error.required_but_not_located:     equ 29
 335               	error.branch_too_long:              equ 30
 336               	error.number_31:                    equ 31 ; free
 337               	error.number_33:                    equ 32 ; free
 338               	
 339               	; ----------------------------------------------
 340               	; Character codes
 341               	
 342               	caps_char:                  equ 0x06 ; toggle caps lock
GAS LISTING solo_forth.z80s 			page 8


 343               	edit_char:                  equ 0x07 ; edit
 344               	backspace_char:             equ 0x08
 345               	delete_char:                equ 0x0c ; delete (backspace)
 346               	form_feed_char:             equ 0x0c ; used for printing
 347               	carriage_return_char:       equ 0x0d
 348               	extended_mode_char:         equ 0x0e ; Fuse associates it to the host's Tab key
 349               	graphics_char:              equ 0x0f ; toggle graphics mode
 350               	ink_char:                   equ 0x10
 351               	paper_char:                 equ 0x11
 352               	flash_char:                 equ 0x12
 353               	bright_char:                equ 0x13
 354               	inverse_char:               equ 0x14
 355               	over_char:                  equ 0x15
 356               	at_char:                    equ 0x16
 357               	tab_char:                   equ 0x17 ; tab (screen only)
 358               	space_char:                 equ 0x20
 359               	copyright_char:             equ 0x7F
 360               	
 361               	; ----------------------------------------------
 362               	; ROM  routines
 363               	
 364               	rom_chan_open:                   equ 0x1601
 365               	; rom_cl_all:                      equ 0x0DAF ; XXX OLD
 366               	rom_key_decode:                  equ 0x0333
 367               	rom_key_scan:                    equ 0x028E
 368               	rom_key_test:                    equ 0x031E
 369               	rom_set_permanent_colors_0x1CAD: equ 0x1CAD
 370               	
 371               	; ----------------------------------------------
 372               	; System variables
 373               	
 374               	  ; XXX FIXME Pasmo's bug?: `sys_errnr` is used as the base offset.  When it's
 375               	  ; not defined first, the compilation halts with error "offset out of
 376               	  ; range", though they are fine in the symbols file.
 377               	
 378               	sys_errnr:         equ 0x5C3A ; used as IY index by the OS
 379               	
 380               	sys_attr_p:        equ 0x5C8D
 381               	sys_attr_t:        equ 0x5C8F
 382               	sys_bankm:         equ 0x5B5C
 383               	sys_bordcr:        equ 0x5C48
 384               	sys_chars:         equ 0x5C36
 385               	sys_df_cc:         equ 0x5C84
 386               	sys_df_sz:         equ 0x5C6B
 387               	sys_df_sz_offset:  equ sys_df_sz-sys_errnr
 388               	sys_flags2:        equ 0x5C6A
 389               	sys_last_k:        equ 0x5C08
 390               	sys_last_k_offset: equ sys_last_k-sys_errnr
 391               	sys_mode:          equ 0x5C41
 392               	sys_s_posn:        equ 0x5C88
 393               	sys_scr_ct:        equ 0x5C8C
 394               	sys_scr_ct_offset: equ sys_scr_ct-sys_errnr
 395               	sys_udg:           equ 0x5C7B
 396               	
 397               	; ----------------------------------------------
 398               	; System constants
 399               	
GAS LISTING solo_forth.z80s 			page 9


 400               	sys_screen:                 equ 0x4000
 401               	sys_screen_size:            equ 0x1B00
 402               	sys_screen_bitmap_size:     equ 0x1800
 403               	sys_screen_attributes:      equ 0x5800
 404               	sys_screen_attributes_size: equ 0x0300
 405               	
 406               	; ----------------------------------------------
 407               	; Ports
 408               	
 409               	bank1_port:   equ 0x7FFD
 410               	border_port:  equ 0xFE
 411               	
 412               	; ==============================================================
 413               	; Entry points
 414               	
 415               	  .text
 416               	
 417               	cold_entry:
 418               	  ; Location (of the destination address): `0x01 +origin`
 419 0000 C3A8 16   	  jp cold_start
 420               	warm_entry:
 421               	  ; Location (of the destination address): `0x04 +origin`
 422 0003 C326 16   	  jp warm_start
 423               	
 424               	; ==============================================================
 425               	; Parameter area
 426               	
 427               	  ; XXX TODO document the `+origin` index
 428               	
 429               	latest_nfa_in_root_voc.init_value:
 430 0006 1700      	  dw latest_nfa_in_root_voc
 431               	
 432               	latest_nfa_in_forth_voc.init_value:
 433 0008 1510      	  dw latest_nfa_in_forth_voc
 434               	
 435               	latest_nfa_in_assembler_voc.init_value:
 436 000a A300      	  dw latest_nfa_in_assembler_voc
 437               	
 438               	voc_link.init_value:
 439 000c 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 440               	
 441               	user_variables_pointer:
 442 000e 3200      	  dw user_variables
 443               	
 444               	return_stack_pointer:
 445 0010 0703      	  dw return_stack_bottom
 446               	
 447               	default_color_attribute:
 448 0012 0400      	  dw 4 ; low byte: green paper, black ink; high byte: no mask
 449               	
 450               	  ; XXX TODO
 451               	.if show_version
 452               	version_status_variable:
 453               	  dw version_status
 454               	version_branch_variable:
 455               	  dw version_branch
 456               	version_release_variable:
GAS LISTING solo_forth.z80s 			page 10


 457               	  dw version_release mod 0xFFFF
 458               	  dw version_release / 0xFFFF
 459               	.endif
 460               	
 461               	  ; User variables default values
 462               	
 463               	  ; The first eight user variables have default values.  They are used
 464               	  ; by `cold` to overwrite the correspondent user variables.  They must
 465               	  ; be in the same order than user variables.
 466               	
 467               	default_user_variables_start:
 468               	
 469               	s0_init_value:
 470 0014 1402      	  dw data_stack_bottom
 471               	r0_init_value:
 472 0016 0703      	  dw return_stack_bottom
 473 0018 0000      	  dw 0x0000 ; XXX OLD -- tib
 474               	width_init_value:
 475 001a 1F00      	  dw max_word_length
 476               	warning_init_value:
 477 001c 0000      	  dw 0x0000
 478 001e 0000      	  dw 0x0000 ; XXX OLD -- fence
 479               	dp_init_value:
 480 0020 AC1D      	  dw dictionary_pointer_after_cold
 481               	
 482               	  ; XXX TODO move
 483 0022 0000      	  dw 0x0000 ; XXX free
 484               	
 485               	  ; XXX TODO this four user variables do not need init and this
 486               	  ; space could be saved; they are included here because `#tib`
 487               	  ; must be init; it should be moved to user variable +0x10.
 488               	
 489               	blk_init_value:
 490 0024 0000      	  dw 0x0000
 491               	in_init_value:
 492 0026 0000      	  dw 0x0000
 493               	out_init_value:
 494 0028 0000      	  dw 0x0000
 495               	scr_init_value:
 496 002a 0000      	  dw 0x0000
 497               	
 498               	; XXX OLD
 499               	;number_tib_init_value:
 500               	;  dw bytes_per_terminal_input_buffer
 501               	
 502               	default_user_variables_end:
 503               	
 504               	ip_backup: ; temporary copy of Forth IP
 505 002c 0000      	  dw 0
 506               	
 507               	; XXX FIXME binutils bug?
 508               	; With this `defl`, np doesn't change its value (0xC001);
 509               	; without it, it keeps the first value assigned with `defl`
 510               	; in the `_header` macro (0xC00A).
 511               	; np defl names_bank_address+1
 512               	
 513               	np defl 0xC000 ; data_start
GAS LISTING solo_forth.z80s 			page 11


 514               	
 515               	names_pointer:
 516               	  ; First free address in the names bank,  restored by `cold`.
 517 002e 00C0      	  dw np
 518               	
 519               	names_pointer_init_value:
 520               	  ; Init value of the names pointer, used by `cold`.
 521 0030 00C0      	  dw np
 522               	
 523               	; ==============================================================
 524               	; User variables
 525               	
 526               	user_variables:
 527               	
 528               	  ; Note: the first eight user variables are initialized with
 529               	  ; default values by `cold`.  They must be in the same order
 530               	  ; than their default variables.
 531               	
 532               	s0_value: ; +0x00
 533 0032 1402      	  dw data_stack_bottom
 534               	r0_value: ; +0x02
 535 0034 0703      	  dw return_stack_bottom
 536               	  ; +0x04
 537 0036 0000      	  dw 0x0000 ; XXX OLD -- tib
 538               	width_value: ; +0x06
 539 0038 1F00      	  dw max_word_length
 540               	warning_value: ; +0x08
 541 003a 0000      	  dw 0x0000
 542               	  ; +0x0A
 543 003c 0000      	  dw 0x0000 ; XXX OLD -- fence
 544               	dp_value: ; +0x0C
 545 003e AC1D      	  dw dictionary_pointer_after_cold
 546               	
 547               	  ; XXX TODO move
 548 0040 0000      	  dw 0x0000 ; +0x0E free
 549               	
 550               	blk_value: ; +0x10
 551 0042 0000      	  dw 0x0000
 552               	in_value: ; +0x12
 553 0044 0000      	  dw 0x0000
 554               	out_value: ; +0x14
 555 0046 0000      	  dw 0x0000
 556               	scr_value: ; +0x16
 557 0048 0000      	  dw 0x0000
 558               	number_tib_value: ; +0x18
 559 004a 0000      	  dw 0x0000
 560               	hld_value: ; +0x1A
 561 004c 0000      	  dw 0x0000
 562               	current_value: ; +0x1C
 563 004e 0000      	  dw 0x0000
 564               	state_value: ; +0x1E
 565 0050 0000      	  dw 0x0000
 566               	base_value: ; +0x20
 567 0052 0A00      	  dw 0x000A
 568               	dpl_value: ; +0x22
 569 0054 0000      	  dw 0x0000
 570               	fld_value: ; +0x24
GAS LISTING solo_forth.z80s 			page 12


 571 0056 0000      	  dw 0x0000
 572               	csp_value: ; +0x26
 573 0058 0000      	  dw 0x0000
 574               	r_hash_value: ; +0x28 ; XXX OLD -- used by the editor, remove
 575 005a 0000      	  dw 0x0000
 576               	
 577               	context_value: ; +0x2A..+0x38
 578               	
 579 005c 5506      	  dw forth_pfa
 580 005e 4F06      	  dw root_pfa
 581 0060 0000 0000 	  ds (max_search_order-2)*cell
 581      0000 0000 
 581      0000 0000 
 582 006c 0000      	  dw 0x0000 ; end of search order, required by `find` \ XXX TODO improve and remove
 583               	
 584               	  ; Unused
 585 006e 0000      	  dw 0x0000
 586 0070 0000      	  dw 0x0000
 587               	
 588               	.if ($-user_variables) != bytes_per_user_variables
 589               	  .error "The space reserved for user variables is wrong."
 590               	.endif
 591               	
 592               	; ==============================================================
 593               	; Stacks and buffers
 594               	
 595               	; ----------------------------------------------
 596               	; Circular string buffer
 597               	
 598               	csb:
 599               	unused_csb:
 600 0072 0001      	  dw csb_size ; unused space in the buffer
 601               	csb0:
 602 0074 0000 0000 	  ds csb_size
 602      0000 0000 
 602      0000 0000 
 602      0000 0000 
 602      0000 0000 
 603               	csb_total_size: equ $-csb
 604               	
 605               	; ----------------------------------------------
 606               	; Data stack
 607               	
 608               	data_stack_limit: equ $+cell
 609 0174 0000 0000 	  ds cells_per_data_stack*cell
 609      0000 0000 
 609      0000 0000 
 609      0000 0000 
 609      0000 0000 
 610               	data_stack_bottom:
 611               	
 612               	; ----------------------------------------------
 613               	; Terminal input buffer
 614               	
 615               	terminal_input_buffer:
 616 0214 0000 0000 	  ds bytes_per_terminal_input_buffer
 616      0000 0000 
GAS LISTING solo_forth.z80s 			page 13


 616      0000 0000 
 616      0000 0000 
 616      0000 0000 
 617 0264 0000 00   	  ds 3 ; for the null word
 618               	
 619               	; ----------------------------------------------
 620               	; Return stack
 621               	
 622               	return_stack_limit: equ $+cell
 623 0267 0000 0000 	  ds cells_per_return_stack*cell
 623      0000 0000 
 623      0000 0000 
 623      0000 0000 
 623      0000 0000 
 624               	return_stack_bottom:
 625               	
 626               	; ----------------------------------------------
 627               	; Disk buffer
 628               	
 629               	buffer_block_id_mask: equ 0x7FFF
 630               	
 631               	; A block id is the number of the associated block, with the
 632               	; sign bit indicating, when it's set, that the buffer has been
 633               	; modified.
 634               	
 635               	disk_buffer:
 636               	
 637 0307 FF7F      	dw buffer_block_id_mask     ; Block id used when the  buffer
 638               	                            ; is not associated with a block.
 639 0309 0000 0000 	ds data_bytes_per_buffer    ; Actual content of the block,
 639      0000 0000 
 639      0000 0000 
 639      0000 0000 
 639      0000 0000 
 640               	                            ; a disk sector.
 641 0509 2000 20   	db space_char,0,space_char  ; Null word, required by the parsing words.
 642               	
 643               	; ==============================================================
 644               	; Macros
 645               	
 646               	; ----------------------------------------------
 647               	; Header
 648               	
 649               	immediate: equ precedence_mask ; used as optional parameter
 650               	
 651               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 652               	; current_vocabulary defl forth_pfa \ XXX OLD
 653               	
 654               	_header: macro _base_label,_name,_immediate=0
 655               	
 656               	  ; In dictionary:
 657               	
 658               	  .text
 659               	
 660               	\_base_label: ; code field address
 661               	
 662               	  ; In memory bank:
GAS LISTING solo_forth.z80s 			page 14


 663               	
 664               	  .data
 665               	
 666               	\_base_label\()cfap: 
 667               	    dw \_base_label ; code field address pointer
 668               	\_base_label\()lfa: ; link field address
 669               	    dw nfa_of_the_previous_word ; link field
 670               	\_base_label\()nfa: ; name field address
 671               	
 672               	  ; Name field
 673               	  ; XXX FIXME the length byte is compiled wrong
 674               	  ;db _address_after_name-.-1+\_immediate ; length byte with optional precedence bit
 675               	  ; db (_address_after_name-.-1) ; XXX TMP -- always 0xFB!
 676               	  ;db 2 ; XXX TMP -- 2
 677               	  ; .byte 2 ; XXX TMP -- 2
 678               	  .byte (_address_after_name-.-1) ; XXX TMP -- always 0xFB!
 679               	  db "\_name"
 680               	_address_after_name defl .
 681               	
 682               	;np defl $ ; update the names pointer ; XXX does not work
 683               	np defl . ; XXX it works, depending on strange things; the symbol is updated and also appears in th
 684               	
 685               	  ; In dictionary:
 686               	  
 687               	  .text
 688               	
 689               	nfa_of_the_previous_word defl \_base_label\()nfa
 690               	
 691               	  endm
 692               	
 693               	_code_header: macro _base_label,_name,_immediate=0
 694               	
 695               	  _header \_base_label,"\_name",\_immediate
 696               	  dw \_base_label\()pfa ; code field
 697               	  \_base_label\()pfa: ; parameter field address
 698               	
 699               	  endm
 700               	
 701               	_code_alias_header: macro _base_label,_name,_immediate=0,_alias
 702               	
 703               	  _header \_base_label,"\_name",\_immediate
 704               	  dw \_alias\()pfa ; code field
 705               	
 706               	  endm
 707               	
 708               	_colon_header: macro _base_label,_name,_immediate=0
 709               	
 710               	  _header \_base_label,"\_name",\_immediate
 711               	  dw do_colon ; code field
 712               	  \_base_label\()pfa: ; parameter field address
 713               	
 714               	  endm
 715               	
 716               	_user_variable_header: macro _base_label,_name,_immediate=0
 717               	
 718               	  _header \_base_label,"\_name",\_immediate
 719               	  dw do_user ; code field
GAS LISTING solo_forth.z80s 			page 15


 720               	  \_base_label\()pfa: ; parameter field address
 721               	
 722               	  endm
 723               	
 724               	_does_header: macro _base_label,_name,_immediate=0,_runtime_routine
 725               	
 726               	  _header \_base_label,"\_name",\_immediate
 727               	
 728               	  dw \_runtime_routine ; code field
 729               	  \_base_label\()pfa: ; parameter field address
 730               	
 731               	  endm
 732               	
 733               	_constant_header: macro _base_label,_name,_immediate=0
 734               	
 735               	  _header \_base_label,"\_name",\_immediate
 736               	  dw do_constant ; code field
 737               	  \_base_label\()pfa: ; parameter field address
 738               	
 739               	  endm
 740               	
 741               	_variable_header: macro _base_label,_name,_immediate=0
 742               	
 743               	  _header \_base_label,"\_name",\_immediate
 744               	  dw do_create ; code field
 745               	  \_base_label\()pfa: ; parameter field address
 746               	
 747               	  endm
 748               	
 749               	_two_variable_header: macro _base_label,_name,_immediate=0
 750               	
 751               	  _variable_header \_base_label,"\_name",\_immediate
 752               	
 753               	  endm
 754               	
 755               	; ----------------------------------------------
 756               	; Literals
 757               	
 758               	_string: macro _text
 759               	
 760               	  ; XXX FIXME binutils compiles wrong lengths
 761               	  
 762               	  .warning "The _string macro is obsolete"
 763               	
 764               	  db _string_end-$-1 ; length byte
 765               	  db "\_text"
 766               	_string_end defl $
 767               	
 768               	endm
 769               	
 770               	_literal: macro _n
 771               	
 772               	  .if \_n==0
 773               	    dw zero_
 774               	  .elseif \_n==1
 775               	    dw one_
 776               	  .elseif \_n==2
GAS LISTING solo_forth.z80s 			page 16


 777               	    dw two_
 778               	  .elseif \_n>=0 && \_n<=255
 779               	    dw c_lit_
 780               	    db \_n
 781               	  .else
 782               	    dw lit_
 783               	    dw \_n
 784               	  .endif
 785               	  endm
 786               	
 787               	; ----------------------------------------------
 788               	; Jumps
 789               	
 790               	_jp_next: macro
 791               	
 792               	  jp (ix)
 793               	
 794               	  endm
 795               	
 796               	; Create relative or absolute jumps, depending on the configured optimization
 797               	
 798               	_jump: macro _address
 799               	  .if size_optimization
 800               	    jr \_address
 801               	  .else
 802               	    jp \_address
 803               	  .endif
 804               	  endm
 805               	
 806               	_jump_nc: macro _address
 807               	  .if size_optimization
 808               	    jr nc,\_address
 809               	  .else
 810               	    jp nc,\_address
 811               	  .endif
 812               	  endm
 813               	
 814               	_jump_z: macro _address
 815               	  .if size_optimization
 816               	    jr z,\_address
 817               	  .else
 818               	    jp z,\_address
 819               	  .endif
 820               	  endm
 821               	
 822               	; ----------------------------------------------
 823               	; Bank
 824               	
 825               	_bank: macro _n
 826               	  _literal \_n
 827               	  dw bank_
 828               	  endm
 829               	
 830               	_names_bank: macro
 831               	  _bank names_bank
 832               	  endm
 833               	
GAS LISTING solo_forth.z80s 			page 17


 834               	_default_bank: macro
 835               	  _bank default_bank
 836               	  endm
 837               	
 838               	; ----------------------------------------------
 839               	; Error messages
 840               	
 841               	_question_error: macro _error
 842               	  _literal \_error
 843               	  dw question_error_
 844               	  endm
 845               	
 846               	_message: macro _error
 847               	  _literal \_error
 848               	  dw message_
 849               	  endm
 850               	
 851               	; ----------------------------------------------
 852               	; Debug
 853               	
 854               	_z80_border: macro _color
 855               	  push af
 856               	  push bc
 857               	  ld a,\_color
 858               	  out (border_port),a
 859               	  ld bc,0
 860               	_z80_border_pause: defl $
 861               	  dec bc
 862               	  ld a,b
 863               	  or c
 864               	  jr nz,_z80_border_pause
 865               	  pop bc
 866               	  pop af
 867               	  endm
 868               	
 869               	_z80_border_wait: macro _color
 870               	  push af
 871               	  ld a,\_color
 872               	  out (border_port),a
 873               	  xor a
 874               	  ld (sys_last_k),a
 875               	_z80_border_wait_pause: defl $
 876               	  ld a,(sys_last_k)
 877               	  and a
 878               	  jr z,_z80_border_wait_pause
 879               	  pop af
 880               	  endm
 881               	
 882               	_echo: macro _txt
 883               	  .warning "The _echo macro is obsolete"
 884               	  dw cr_,paren_dot_quote_
 885               	  _string "\_txt"
 886               	  endm
 887               	
 888               	; ==============================================================
 889               	; Misc routines
 890               	
GAS LISTING solo_forth.z80s 			page 18


 891               	; [Code from DZX-Forth.]
 892               	
 893               	; ----------------------------------------------
 894               	; Compare de and hl
 895               	
 896               	compare_de_hl_unsigned:
 897               	
 898               	  ; Input:  de, hl
 899               	  ; Output:
 900               	  ;  flag C if hl < de
 901               	  ;  flag Z if hl = de
 902               	
 903 050c 7C        	  ld a,h
 904 050d BA        	  cp d
 905 050e C0        	  ret nz
 906 050f 7D        	  ld a,l
 907 0510 BB        	  cp e
 908 0511 C9        	  ret
 909               	
 910               	compare_de_hl_signed:
 911               	
 912               	  ; Input:  de, hl
 913               	  ; Output: flag C if hl < de
 914               	
 915 0512 7C        	  ld a,h
 916 0513 AA        	  xor d
 917 0514 F20C 05   	  jp p,compare_de_hl_unsigned
 918 0517 7C        	  ld a,h
 919 0518 B7        	  or a
 920 0519 F0        	  ret p
 921 051a 37        	  scf
 922 051b C9        	  ret
 923               	
 924               	; ----------------------------------------------
 925               	; Move block
 926               	
 927               	move_block:
 928               	
 929               	  ; Input:
 930               	  ; hl = source
 931               	  ; de = destination
 932               	  ; bc = count
 933               	
 934               	  ; If bc is greater than zero, copy the contents of bc consecutive address
 935               	  ; units at hl to the bc consecutive address units at de. After the move
 936               	  ; completes, the bc consecutive address units at de contain exactly what the
 937               	  ; bc consecutive address units at hl contained before the move.
 938               	
 939 051c CD0C 05   	  call compare_de_hl_unsigned
 940 051f DA28 05   	  jp c,move_block_downwards
 941               	
 942               	; ----------------------------------------------
 943               	; Move block upwards
 944               	
 945               	move_block_upwards:
 946               	
 947               	  ; Input:
GAS LISTING solo_forth.z80s 			page 19


 948               	  ; hl = source
 949               	  ; de = destination
 950               	  ; bc = count
 951               	
 952               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 953               	  ; space starting at hl to that starting at de, proceeding
 954               	  ; character-by-character from lower addresses to higher addresses.
 955               	
 956 0522 79        	  ld a,c
 957 0523 B0        	  or b
 958 0524 C8        	  ret z
 959 0525 EDB0      	  ldir
 960 0527 C9        	  ret
 961               	
 962               	; ----------------------------------------------
 963               	; Move block downwards
 964               	
 965               	  ; Input:
 966               	  ; hl = source
 967               	  ; de = destination
 968               	  ; bc = count
 969               	
 970               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 971               	  ; space starting at hl to that starting at de, proceeding
 972               	  ; character-by-character from higher addresses to lower addresses.
 973               	
 974               	move_block_downwards:
 975               	
 976 0528 79        	  ld a,c
 977 0529 B0        	  or b
 978 052a C8        	  ret z
 979 052b 09        	  add hl,bc
 980 052c 2B        	  dec hl
 981 052d EB        	  ex de,hl
 982 052e 09        	  add hl,bc
 983 052f 2B        	  dec hl
 984 0530 EB        	  ex de,hl
 985 0531 EDB8      	  lddr
 986 0533 C9        	  ret
 987               	
 988               	; ----------------------------------------------
 989               	; Multiplication primitives
 990               	
 991               	; AHL <- A * DE
 992               	
 993               	a_multiplied_by_de_to_ahl:
 994 0534 2100 00   	  ld hl,0
 995 0537 0E08      	  ld c,8
 996               	a_multiplied_by_de_to_ahl.1:
 997 0539 29        	  add hl,hl
 998 053a 17        	  rla
 999 053b D241 05   	  jp nc,a_multiplied_by_de_to_ahl.2
 1000 053e 19        	  add hl,de
 1001 053f CE00      	  adc a,0
 1002               	a_multiplied_by_de_to_ahl.2:
 1003 0541 0D        	  dec c
 1004 0542 C239 05   	  jp nz,a_multiplied_by_de_to_ahl.1
GAS LISTING solo_forth.z80s 			page 20


 1005 0545 C9        	  ret
 1006               	
 1007               	; Unsigned 16*16 multiply, 32-bit result
 1008               	
 1009               	; HLDE <- HL * DE
 1010               	
 1011               	hl_multiplied_by_de_to_hlde_unsigned:
 1012 0546 C5        	  push bc ; save Forth IP
 1013 0547 44        	  ld b,h
 1014 0548 7D        	  ld a,l
 1015 0549 CD34 05   	  call a_multiplied_by_de_to_ahl
 1016 054c E5        	  push hl
 1017 054d 67        	  ld h,a
 1018 054e 78        	  ld a,b
 1019 054f 44        	  ld b,h
 1020 0550 CD34 05   	  call a_multiplied_by_de_to_ahl
 1021 0553 D1        	  pop de
 1022 0554 4A        	  ld c,d
 1023 0555 09        	  add hl,bc
 1024 0556 CE00      	  adc a,0
 1025 0558 55        	  ld d,l
 1026 0559 6C        	  ld l,h
 1027 055a 67        	  ld h,a
 1028 055b C1        	  pop bc ; restore Forth IP
 1029 055c C9        	  ret
 1030               	
 1031               	; ==============================================================
 1032               	; :Inner interpreter
 1033               	
 1034               	push_hlde:
 1035 055d D5        	  push de
 1036               	
 1037               	push_hl:
 1038 055e E5        	  push hl
 1039               	
 1040               	next:
 1041               	  ; Execute the word whose cfa is in the address pointed by the bc register.
 1042               	  ; Forth: W  <-- (IP)
 1043               	  ; Z80:   hl <-- (bc)
 1044 055f 0A        	  ld a,(bc)
 1045 0560 6F        	  ld l,a
 1046 0561 03        	  inc bc ; inc IP
 1047 0562 0A        	  ld a,(bc)
 1048 0563 67        	  ld h,a
 1049 0564 03        	  inc bc ; inc IP
 1050               	  ; bc = address of the next cfa
 1051               	  ; hl = cfa
 1052               	
 1053               	next2:
 1054               	  ; Execute the word whose cfa is in the hl register.
 1055               	  ; Forth: PC <-- (W)
 1056               	  ; Z80:   pc <-- (hl)
 1057 0565 5E        	  ld e,(hl)
 1058 0566 23        	  inc hl
 1059 0567 56        	  ld d,(hl)
 1060 0568 EB        	  ex de,hl
 1061               	  ; hl = (cfa) = address of the code
GAS LISTING solo_forth.z80s 			page 21


 1062               	  ; de = cfa+1 = pfa-1
 1063               	
 1064               	next2_end: ; XXX TMP for debugging
 1065 0569 E9        	  jp (hl)
 1066               	
 1067               	; ==============================================================
 1068               	; Dictionary
 1069               	
 1070               	; ----------------------------------------------
 1071               	; Start compiling in the `root` vocabulary
 1072               	
 1073               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1074               	; current_vocabulary defl root_pfa
 1075               	
 1076               	; ----------------------------------------------
 1077 056a 6C05      	  _code_header root_x_,"\x00",immediate
 1078               	
 1079               	; doc{
 1080               	
 1081               	; x  ( -- )
 1082               	
 1083               	; This is a pseudonym for an alias of the "null" word that is
 1084               	; defined in the `forth` vocabulary.
 1085               	
 1086               	; }doc
 1087               	
 1088 056c 211B 11   	  ld hl,x_ ; cfa of the actual null word
 1089 056f C365 05   	  jp next2 ; execute it
 1090               	
 1091               	; ----------------------------------------------
 1092 0572 650C      	  _colon_header root_forth_,"FORTH"
 1093               	
 1094 0574 5306      	  dw forth_
 1095 0576 C00A      	  dw semicolon_s_
 1096               	
 1097               	; ----------------------------------------------
 1098 0578 650C      	  _colon_header root_definitions_,"DEFINITIONS"
 1099               	
 1100 057a 8A15      	  dw definitions_
 1101 057c C00A      	  dw semicolon_s_
 1102               	
 1103               	latest_nfa_in_root_voc: equ root_definitions_nfa
 1104               	
 1105               	; ----------------------------------------------
 1106               	; Start compiling in the `assembler` vocabulary
 1107               	
 1108               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1109               	; current_vocabulary defl forth_pfa
 1110               	
 1111               	; ----------------------------------------------
 1112 057e 1A14      	  _variable_header abase_,"ABASE"
 1113               	
 1114               	; doc{
 1115               	;
 1116               	; abase  ( -- a )
 1117               	;
 1118               	; A variable used to save the current value of `base` in
GAS LISTING solo_forth.z80s 			page 22


 1119               	; assembler definitions.
 1120               	;
 1121               	; }doc
 1122               	
 1123 0580 0000      	  dw 0
 1124               	
 1125               	; ----------------------------------------------
 1126 0582 650C      	  _colon_header asm_,"ASM"
 1127               	
 1128               	; doc{
 1129               	;
 1130               	; asm  ( -- )
 1131               	;
 1132               	; Enter the assembler mode.
 1133               	;
 1134               	; }doc
 1135               	
 1136               	  ; [Idea taken from Coos Haak's Z80 Forth assembler.]
 1137               	
 1138 0584 960C      	  dw noop_ ; to be patched by the assembler
 1139 0586 330D 1A0C 	  dw base_,fetch_,abase_,store_ ; save the current base
 1139      7E05 490C 
 1140 058e B30F      	  dw hex_
 1141 0590 FD05 5906 	  dw also_,assembler_ ; XXX TODO better
 1142 0594 C00A      	  dw semicolon_s_
 1143               	
 1144               	; ----------------------------------------------
 1145 0596 650C      	  _colon_header end_asm_,"END-ASM"
 1146               	
 1147               	; doc{
 1148               	;
 1149               	; end-asm  ( -- )
 1150               	;
 1151               	; Exit the assembler mode.
 1152               	;
 1153               	; }doc
 1154               	
 1155 0598 2306      	  dw previous_ ; restore the search order ; XXX TODO better
 1156 059a 7E05 1A0C 	  dw abase_,fetch_,base_,store_ ; restore `base`
 1156      330D 490C 
 1157 05a2 C00A      	  dw semicolon_s_
 1158               	
 1159               	; ----------------------------------------------
 1160 05a4 650C      	  _colon_header end_code_,"END-CODE"
 1161               	
 1162 05a6 480F 9605 	  dw question_csp_,end_asm_,smudge_
 1162      A00F 
 1163 05ac C00A      	  dw semicolon_s_
 1164               	
 1165               	; ----------------------------------------------
 1166 05ae A00C      	  _constant_header next_,"NEXT"
 1167               	
 1168 05b0 5F05      	  dw next
 1169               	
 1170               	; ----------------------------------------------
 1171               	  ; _constant_header next_,"NEXT2"
 1172               	
GAS LISTING solo_forth.z80s 			page 23


 1173               	  ; ; XXX OLD -- added for the second version of `defer`, but
 1174               	  ; ; not needed
 1175               	  
 1176               	  ; dw next2
 1177               	
 1178               	; ----------------------------------------------
 1179 05b2 A00C      	  _constant_header pushhl_,"PUSHHL"
 1180               	
 1181 05b4 5E05      	  dw push_hl
 1182               	
 1183               	; ----------------------------------------------
 1184 05b6 A00C      	  _constant_header pushhlde_,"PUSHHLDE"
 1185               	
 1186 05b8 5D05      	  dw push_hlde
 1187               	
 1188               	; ----------------------------------------------
 1189 05ba A00C      	  _constant_header fetchhl_,"FETCHHL"
 1190               	
 1191 05bc 1D0C      	  dw fetch.hl
 1192               	
 1193               	; ----------------------------------------------
 1194 05be 650C      	  _colon_header next_comma_,"NEXT,"
 1195               	
 1196               	; doc{
 1197               	;
 1198               	; next,  ( -- )
 1199               	; 
 1200               	; Compile a Z80 jump to `next`.
 1201               	;
 1202               	; }doc
 1203               	
 1204 05c0 8D06 DDE9 	  dw lit_,0xE9DD ; opcode `jp (ix)`
 1205 05c4 B20D      	  dw comma_
 1206 05c6 C00A      	  dw semicolon_s_
 1207               	
 1208               	; ----------------------------------------------
 1209 05c8 650C      	  _colon_header pushhl_comma_,"PUSHHL,"
 1210               	
 1211               	; doc{
 1212               	;
 1213               	; pushhl,  ( -- )
 1214               	; 
 1215               	; Compile a Z80 jump to `pushhl`.
 1216               	;
 1217               	; }doc
 1218               	
 1219 05ca 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1220 05cd C60D      	  dw c_comma_
 1221 05cf 8D06 5E05 	  dw lit_,push_hl,comma_
 1221      B20D 
 1222 05d5 C00A      	  dw semicolon_s_
 1223               	
 1224               	; ----------------------------------------------
 1225 05d7 650C      	  _colon_header pushhlde_comma_,"PUSHHLDE,"
 1226               	
 1227               	; doc{
 1228               	;
GAS LISTING solo_forth.z80s 			page 24


 1229               	; pushhlde,  ( -- )
 1230               	; 
 1231               	; Compile a Z80 jump to `pushhlde`.
 1232               	;
 1233               	; }doc
 1234               	
 1235 05d9 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1236 05dc C60D      	  dw c_comma_
 1237 05de 8D06 5D05 	  dw lit_,push_hlde,comma_
 1237      B20D 
 1238 05e4 C00A      	  dw semicolon_s_
 1239               	
 1240               	; ----------------------------------------------
 1241 05e6 650C      	  _colon_header fetchhl_comma_,"FETCHHL,"
 1242               	
 1243               	; doc{
 1244               	;
 1245               	; fetchhl,  ( -- )
 1246               	; 
 1247               	; Compile a Z80 jump to `fetchhl`.
 1248               	;
 1249               	; }doc
 1250               	
 1251 05e8 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1252 05eb C60D      	  dw c_comma_
 1253 05ed 8D06 1D0C 	  dw lit_,fetch.hl,comma_
 1253      B20D 
 1254 05f3 C00A      	  dw semicolon_s_
 1255               	
 1256               	latest_nfa_in_assembler_voc: equ fetchhl_comma_nfa
 1257               	
 1258               	; ----------------------------------------------
 1259               	; Start compiling in the `forth` vocabulary
 1260               	
 1261               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1262               	; current_vocabulary defl forth_pfa
 1263               	
 1264               	
 1265               	; ----------------------------------------------
 1266 05f5 650C      	  _colon_header label_,"LABEL"
 1267               	
 1268 05f7 1214 8205 	  dw create_,asm_
 1269 05fb C00A      	  dw semicolon_s_
 1270               	
 1271               	; ----------------------------------------------
 1272 05fd 650C      	  _colon_header also_,"ALSO"
 1273               	
 1274               	; doc{
 1275               	;
 1276               	; also  ( -- )
 1277               	;
 1278               	; Duplicate the vocabulary at the top of the search order.
 1279               	;
 1280               	; }doc
 1281               	
 1282               	; [Code adapted from F83.]
 1283               	
GAS LISTING solo_forth.z80s 			page 25


 1284               	; : also  ( -- )
 1285               	;   context dup cell+ [ #vocs 2- cells ] literal cmove>  ;
 1286               	
 1287 05ff 2A0D E00B 	  dw context_,dup_,cell_plus_
 1287      680D 
 1288 0605 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell
 1289 0609 DA09      	  dw cmove_up_
 1290 060b C00A      	  dw semicolon_s_
 1291               	
 1292               	; ----------------------------------------------
 1293 060d 650C      	  _colon_header minus_order_,"-ORDER"
 1294               	
 1295               	; : -order  ( -- )  context [ #vocs cells ] literal erase  ;
 1296               	
 1297 060f 2A0D 8D06 	  dw context_,lit_,max_search_order*cell,erase_
 1297      1000 5611 
 1298 0617 C00A      	  dw semicolon_s_
 1299               	
 1300               	; ----------------------------------------------
 1301 0619 650C      	  _colon_header only_,"ONLY"
 1302               	
 1303               	; doc{
 1304               	;
 1305               	; only  ( -- )
 1306               	;
 1307               	; Erase the search order and forces the `root` vocabulary to
 1308               	; be the first and second.
 1309               	;
 1310               	; }doc
 1311               	
 1312               	; [Code adapted from F83.]
 1313               	
 1314               	; : only  ( -- )  -order root also  ;
 1315               	
 1316 061b 0D06      	  dw minus_order_
 1317 061d 4D06      	  dw root_
 1318 061f FD05      	  dw also_
 1319 0621 C00A      	  dw semicolon_s_
 1320               	
 1321               	; ----------------------------------------------
 1322 0623 650C      	  _colon_header previous_,"PREVIOUS"
 1323               	
 1324               	; doc{
 1325               	;
 1326               	; previous  ( -- )
 1327               	;
 1328               	; Remove the most recently referenced vocabulary from the search
 1329               	; order.
 1330               	;
 1331               	; }doc
 1332               	
 1333               	; [Code adapted from F83.]
 1334               	
 1335               	; : previous  ( -- )
 1336               	;   context dup cell+ swap [ #vocs 2- cells dup ] literal cmove
 1337               	;   context literal + off  ;
 1338               	
GAS LISTING solo_forth.z80s 			page 26


 1339 0625 2A0D E00B 	  dw context_,dup_,cell_plus_,swap_
 1339      680D D90B 
 1340 062d 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell,cmove_
 1340      E609 
 1341 0633 2A0D 8D06 	  dw context_,lit_,(max_search_order-cell)*cell,plus_,off_
 1341      0C00 810B 
 1341      FD0B 
 1342 063d C00A      	  dw semicolon_s_
 1343               	
 1344               	; ----------------------------------------------
 1345 063f 650C      	  _colon_header seal_,"SEAL"
 1346               	
 1347               	; doc{
 1348               	;
 1349               	; seal  ( -- )
 1350               	;
 1351               	; Change the search order such that only the vocabulary at the
 1352               	; top of the search order will be searched.
 1353               	;
 1354               	; }doc
 1355               	
 1356               	; [Code adapted from F83.]
 1357               	
 1358               	; : seal  ( -- )  context @ -order context !  ;
 1359               	
 1360 0641 2A0D 1A0C 	  dw context_,fetch_,minus_order_,context_,store_
 1360      0D06 2A0D 
 1360      490C 
 1361 064b C00A      	  dw semicolon_s_
 1362               	
 1363               	; ----------------------------------------------
 1364               	
 1365 064d 8115      	  _does_header root_,"ROOT",,do_vocabulary
 1366               	
 1367 064f 1700      	  dw latest_nfa_in_root_voc
 1368               	
 1369               	root_vocabulary_link:
 1370 0651 0000      	  dw 0x0000
 1371               	
 1372               	; ----------------------------------------------
 1373               	
 1374 0653 8115      	  _does_header forth_,"FORTH",,do_vocabulary
 1375               	
 1376 0655 1510      	  dw latest_nfa_in_forth_voc ; nfa of the latest word defined in this vocabulary
 1377               	
 1378               	forth_vocabulary_link:
 1379 0657 5106      	  dw root_vocabulary_link
 1380               	
 1381               	; ----------------------------------------------
 1382 0659 8115      	  _does_header assembler_,"ASSEMBLER",,do_vocabulary
 1383               	
 1384               	; XXX TODO move `assembler` and everthing related
 1385               	; to the library disk?
 1386               	
 1387 065b A300      	  dw latest_nfa_in_assembler_voc
 1388               	assembler_vocabulary_link:
 1389 065d 5706      	  dw forth_vocabulary_link
GAS LISTING solo_forth.z80s 			page 27


 1390               	
 1391               	; ----------------------------------------------
 1392 065f 650C      	  _colon_header s_lit_,"SLIT"
 1393               	
 1394               	  ; : slit  ( -- ca len )  r@ count dup 1+ r> + >r  ;
 1395               	
 1396 0661 4F0B 0710 	  dw r_fetch_,count_,dup_,one_plus_
 1396      E00B 570D 
 1397 0669 FF0A 810B 	  dw from_r_,plus_,to_r_
 1397      F00A 
 1398 066f C00A      	  dw semicolon_s_
 1399               	
 1400               	; ----------------------------------------------
 1401 0671 650C      	  _colon_header paren_s_,"(S)"
 1402               	
 1403               	; doc{
 1404               	;
 1405               	; (s) ( compilation: c "text<c>" -- ) ( run-time:  -- ca len )
 1406               	;
 1407               	; }doc
 1408               	
 1409 0673 A711      	  dw parse_ ; ( ca len )
 1410 0675 1D0F      	  dw comp_question_
 1411 0677 6007 7F06 	  dw zero_branch_,paren_s.interpreting
 1412               	  ; compiling
 1413 067b B114      	  dw s_literal_
 1414 067d C00A      	  dw semicolon_s_ ; XXX TODO exit_
 1415               	paren_s.interpreting:
 1416 067f EA06      	  dw save_string_
 1417 0681 C00A      	  dw semicolon_s_
 1418               	
 1419               	; ----------------------------------------------
 1420 0683 8506      	  _code_header c_lit_,"CLIT"
 1421               	
 1422 0685 0A        	  ld a,(bc)
 1423 0686 03        	  inc bc
 1424               	  ; XXX TODO include these entry points in the `assembler` vocabulary?
 1425               	push_a:
 1426 0687 6F        	  ld l,a
 1427               	push_l: ; XXX TMP -- not used yet
 1428 0688 2600      	  ld h,0
 1429 068a C35E 05   	  jp push_hl
 1430               	
 1431               	; ----------------------------------------------
 1432 068d 8F06      	  _code_header lit_,"LIT"
 1433               	
 1434               	  ; XXX FIXME -- crash if not compiling
 1435               	  ; XXX TODO -- implement compile-only flag?
 1436               	
 1437 068f 0A        	  ld a,(bc)
 1438 0690 03        	  inc bc
 1439 0691 6F        	  ld l,a
 1440 0692 0A        	  ld a,(bc)
 1441 0693 03        	  inc bc
 1442 0694 67        	  ld h,a
 1443 0695 C35E 05   	  jp push_hl
 1444               	
GAS LISTING solo_forth.z80s 			page 28


 1445               	; ----------------------------------------------
 1446 0698 9A06      	  _code_header bank_,"BANK"
 1447               	
 1448               	; doc{
 1449               	;
 1450               	; bank  ( n -- )
 1451               	;
 1452               	; Page memory bank _n_ (0..7) at 0xC000..0xFFFF.
 1453               	;
 1454               	; }doc
 1455               	
 1456 069a D1        	  pop de ; e = bank
 1457 069b CDA0 06   	  call bank.e
 1458 069e DDE9      	  _jp_next
 1459               	
 1460               	bank.default:
 1461               	  ; XXX TODO ?
 1462               	bank.names:
 1463               	  ; XXX TODO ?
 1464               	bank.e:
 1465               	  ; ret ; XXX TMP for debugging
 1466 06a0 3A5C 5B   	  ld a,(sys_bankm) ; get the saved status of BANKM
 1467 06a3 E6F8      	  and 0xF8 ; erase bits 0-2
 1468 06a5 B3        	  or e ; modify bits 0-2
 1469 06a6 F3        	  di
 1470 06a7 325C 5B   	  ld (sys_bankm),a ; update BANKM
 1471 06aa D3FD      	  out (bank1_port),a ; page the bank
****  Warning:overflow
 1472 06ac FB        	  ei
 1473 06ad C9        	  ret
 1474               	
 1475               	; ----------------------------------------------
 1476 06ae B006      	  _code_header unused_csb_,"UNUSED-CSB"
 1477               	
 1478               	; doc{
 1479               	;
 1480               	; csb-unused  ( -- len )
 1481               	;
 1482               	; }doc
 1483               	
 1484 06b0 2A72 00   	  ld hl,(unused_csb)
 1485 06b3 C35E 05   	  jp push_hl
 1486               	
 1487               	; ----------------------------------------------
 1488 06b6 A00C      	  _constant_header csb0_,"CSB0"
 1489               	
 1490               	; doc{
 1491               	;
 1492               	; csb0  ( -- a )
 1493               	;
 1494               	; }doc
 1495               	
 1496 06b8 7400      	  dw csb0
 1497               	
 1498               	; ----------------------------------------------
 1499 06ba 650C      	  _colon_header question_csb_,"?CSB"
 1500               	
GAS LISTING solo_forth.z80s 			page 29


 1501               	; doc{
 1502               	;
 1503               	; ?csb  ( len -- )
 1504               	;
 1505               	; Make sure there's room for the given characters.
 1506               	;
 1507               	; }doc
 1508               	
 1509 06bc E00B 8D06 	  dw dup_,lit_,unused_csb,fetch_,greater_than_
 1509      7200 1A0C 
 1509      170E 
 1510 06c6 6007 D406 	  dw zero_branch_,question_csb_.enough
 1511               	  ; not enough space; reset the pointer
 1512 06ca 8D06 0001 	  _literal csb_size
 1513 06ce 8D06 7200 	  dw lit_,unused_csb,store_
 1513      490C 
 1514               	
 1515               	question_csb_.enough:
 1516 06d4 9B0B 8D06 	  dw negate_,lit_,unused_csb,plus_store_
 1516      7200 F00B 
 1517 06dc C00A      	  dw semicolon_s_
 1518               	
 1519               	; ----------------------------------------------
 1520 06de 650C      	  _colon_header allocate_string_,"ALLOCATE-STRING"
 1521               	
 1522               	; doc{
 1523               	;
 1524               	; string-allocate  ( len -- ca )
 1525               	;
 1526               	; }doc
 1527               	
 1528 06e0 BA06      	  dw question_csb_
 1529 06e2 B606 AE06 	  dw csb0_,unused_csb_,plus_
 1529      810B 
 1530 06e8 C00A      	  dw semicolon_s_
 1531               	
 1532               	; ----------------------------------------------
 1533 06ea 650C      	  _colon_header save_string_,"SAVE-STRING"
 1534               	
 1535               	; doc{
 1536               	;
 1537               	; save-string  ( ca1 len1 -- ca2 len1 )
 1538               	;
 1539               	; }doc
 1540               	
 1541 06ec E00B DE06 	  dw dup_,allocate_string_,swap_
 1541      D90B 
 1542 06f2 E70B 280B 	  dw two_dup_,two_to_r_
 1543 06f6 F209 370B 	  dw move_,two_from_r_
 1544 06fa C00A      	  dw semicolon_s_
 1545               	
 1546               	; ----------------------------------------------
 1547 06fc 650C      	  _colon_header save_counted_string_,"SAVE-COUNTED-STRING"
 1548               	
 1549               	; doc{
 1550               	;
 1551               	; save-counted-string  ( ca1 len1 -- ca2 )
GAS LISTING solo_forth.z80s 			page 30


 1552               	;
 1553               	; }doc
 1554               	
 1555               	; dup 1+ string-allocate dup >r $! r>
 1556               	
 1557 06fe E00B 570D 	  dw dup_,one_plus_,allocate_string_
 1557      DE06 
 1558 0704 E00B F00A 	  dw dup_,to_r_,dollar_store_,from_r_
 1558      D912 FF0A 
 1559 070c C00A      	  dw semicolon_s_
 1560               	
 1561               	; ----------------------------------------------
 1562 070e 650C      	  _colon_header empty_csb_,"EMPTY-CSB"
 1563               	
 1564               	; doc{
 1565               	;
 1566               	; empty-csb  ( -- )
 1567               	;
 1568               	; }doc
 1569               	
 1570 0710 8D06 7200 	  dw lit_,csb
 1571 0714 8D06 0201 	  _literal csb_total_size
 1572 0718 5611      	  dw erase_
 1573 071a C00A      	  dw semicolon_s_
 1574               	
 1575               	; ----------------------------------------------
 1576 071c 1E07      	  _code_header execute_,"EXECUTE"
 1577               	
 1578               	; doc{
 1579               	;
 1580               	; execute  ( cfa  -- )
 1581               	;
 1582               	; }doc
 1583               	
 1584 071e E1        	  pop hl
 1585 071f C365 05   	  jp next2
 1586               	
 1587               	; ----------------------------------------------
 1588 0722 2407      	  _code_header perform_,"PERFORM"
 1589               	
 1590               	; doc{
 1591               	;
 1592               	; perform  ( a  -- )
 1593               	;
 1594               	; Execute the word whose cfa is stored in _a_.  Do nothing if
 1595               	; the content of _a_ is zero.
 1596               	;
 1597               	; }doc
 1598               	
 1599 0724 E1        	  pop hl
 1600 0725 7E        	  ld a,(hl)
 1601 0726 23        	  inc hl
 1602 0727 66        	  ld h,(hl)
 1603 0728 6F        	  ld l,a
 1604 0729 B4        	  or h
 1605 072a C265 05   	  jp nz,next2
 1606 072d DDE9      	  _jp_next
GAS LISTING solo_forth.z80s 			page 31


 1607               	
 1608               	; ----------------------------------------------
 1609 072f 650C      	  _colon_header forward_mark_,">MARK"
 1610               	
 1611               	; doc{
 1612               	;
 1613               	; >mark  ( -- orig )  \ Forth-83, C, "forward-mark"
 1614               	;
 1615               	; Compile space in the dictionary for a branch address which
 1616               	; will later be resolved by `>resolve`.
 1617               	;
 1618               	; Used at the source of a forward branch.  Typically used after
 1619               	; either `branch`, `0branch` or `?branch`.
 1620               	;
 1621               	; }doc
 1622               	
 1623 0731 250F      	  dw question_comp_
 1624 0733 900D C50C 	  dw here_,zero_,comma_
 1624      B20D 
 1625 0739 C00A      	  dw semicolon_s_
 1626               	
 1627               	; ----------------------------------------------
 1628 073b 650C      	  _colon_header forward_resolve_,">RESOLVE"
 1629               	
 1630               	; doc{
 1631               	;
 1632               	; >resolve  ( orig -- )  \ Forth-83, C, "forward-resolve"
 1633               	;
 1634               	; Resolve a forward branch by placing the address of the current
 1635               	; dictionary pointer into the space compiled by `>mark`.
 1636               	;
 1637               	; }doc
 1638               	
 1639 073d 250F      	  dw question_comp_
 1640 073f 900D D90B 	  dw here_,swap_,store_
 1640      490C 
 1641 0745 C00A      	  dw semicolon_s_
 1642               	
 1643               	; ----------------------------------------------
 1644 0747 650C      	  _colon_header backward_mark_,"<MARK"
 1645               	
 1646               	; doc{
 1647               	;
 1648               	; <mark  ( -- dest )  \ Forth-83, C, "backward-mark"
 1649               	;
 1650               	; Leave the address of the current dictionary pointer, as the
 1651               	; the destination of a backward branch.  _dest_ is typically
 1652               	; only used by `<resolve` to compile a branch address.
 1653               	;
 1654               	; }doc
 1655               	
 1656 0749 250F      	  dw question_comp_
 1657 074b 900D      	  dw here_
 1658 074d C00A      	  dw semicolon_s_
 1659               	
 1660               	; ----------------------------------------------
 1661 074f 650C      	  _colon_header backward_resolve_,"<RESOLVE"
GAS LISTING solo_forth.z80s 			page 32


 1662               	
 1663               	; doc{
 1664               	;
 1665               	; <resolve  ( dest -- )  \ Forth-83, C, "backward-resolve"
 1666               	;
 1667               	; Resolve a backward branch.  Compile a branch address using
 1668               	; _dest_, the address left by `<mark`,  as the destination
 1669               	; address.  Used at the source of a backward branch after either
 1670               	; `branch` or `?branch` or `0branch`.
 1671               	;
 1672               	; }doc
 1673               	
 1674 0751 250F      	  dw question_comp_
 1675 0753 B20D      	  dw comma_
 1676 0755 C00A      	  dw semicolon_s_
 1677               	
 1678               	; ----------------------------------------------
 1679 0757 5907      	  _code_header branch_,"BRANCH"
 1680               	
 1681               	; doc{
 1682               	;
 1683               	; branch  ( -- )  \ ANS Forth
 1684               	;
 1685               	; The run-time procedure to branch unconditionally. An in-line
 1686               	; offset is copied to the interpretive pointer IP to branch
 1687               	; forward or backward.
 1688               	;
 1689               	; }doc
 1690               	
 1691 0759 60        	  ld h,b
 1692 075a 69        	  ld l,c ; hl = Forth IP, containing the address to jump to
 1693 075b 4E        	  ld c,(hl)
 1694 075c 23        	  inc hl
 1695 075d 46        	  ld b,(hl) ; bc = New Forth IP
 1696 075e DDE9      	  _jp_next
 1697               	
 1698               	; ----------------------------------------------
 1699 0760 6207      	  _code_header zero_branch_,"0BRANCH"
 1700               	
 1701               	; doc{
 1702               	;
 1703               	; 0branch  ( f -- )  \ fig-Forth
 1704               	;
 1705               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1706               	; is false (zero), the following in-line address is copied to IP
 1707               	; to branch forward or  backward.
 1708               	;
 1709               	; }doc
 1710               	
 1711 0762 E1        	  pop hl
 1712 0763 7D        	  ld a,l
 1713 0764 B4        	  or h
 1714 0765 CA59 07   	  jp z,branch_pfa ; branch if zero
 1715 0768 03        	  inc bc
 1716 0769 03        	  inc bc ; skip the inline branch address
 1717 076a DDE9      	  _jp_next
 1718               	
GAS LISTING solo_forth.z80s 			page 33


 1719               	; ----------------------------------------------
 1720 076c 6E07      	  _code_header question_branch_,"?BRANCH"
 1721               	
 1722               	; doc{
 1723               	;
 1724               	; ?branch  ( f -- )
 1725               	;
 1726               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1727               	; is not zero, the following in-line address is copied to IP to
 1728               	; branch forward or backward.
 1729               	;
 1730               	; Note: This is not Forth-83's `?branch`: Forth-83's `?branch`
 1731               	; does the same than fig-Forth's `0branch`: the branch is done
 1732               	; when the flag is zero. Solo Forth includes fig-Forth's
 1733               	; `0branch` and also `?branch`, that branches when the flag is
 1734               	; not zero.
 1735               	;
 1736               	; }doc
 1737               	
 1738 076e E1        	  pop hl
 1739 076f 7D        	  ld a,l
 1740 0770 B4        	  or h
 1741 0771 C259 07   	  jp nz,branch_pfa ; branch if not zero
 1742 0774 03        	  inc bc
 1743 0775 03        	  inc bc ; skip the inline branch address
 1744 0776 DDE9      	  _jp_next
 1745               	
 1746               	; ----------------------------------------------
 1747 0778 7A07      	  _code_header paren_loop_,"(LOOP)"
 1748               	
 1749               	  ; XXX NOTE:
 1750               	  ;
 1751               	  ; This code is from Abersoft Fort.  It's the same code used in
 1752               	  ; `(+loop)` in fig-Forth 1.1g.  The author of Abersoft Forth
 1753               	  ; used it to write `(loop)` and wrote `(+loop)` with a simple
 1754               	  ; call to it, what saves code.
 1755               	  ;
 1756               	  ; XXX TODO -- The `(loop)` of DZX-Forth is much faster, but
 1757               	  ; requires and additional parameter on the return stack.
 1758               	
 1759 077a 1101 00   	  ld de,0x0001
 1760               	paren_loop.step_in_de:
 1761 077d 2A10 00   	  ld hl,(return_stack_pointer)
 1762 0780 7E        	  ld a,(hl)
 1763 0781 83        	  add a,e
 1764 0782 77        	  ld (hl),a
 1765 0783 5F        	  ld e,a
 1766 0784 23        	  inc hl
 1767 0785 7E        	  ld a,(hl)
 1768 0786 8A        	  adc a,d
 1769 0787 77        	  ld (hl),a
 1770 0788 23        	  inc hl ; (hl) = limit
 1771 0789 14        	  inc d
 1772 078a 15        	  dec d
 1773 078b 57        	  ld d,a ; de = new index
 1774 078c FA97 07   	  jp m,paren_loop.negative_step
 1775               	
GAS LISTING solo_forth.z80s 			page 34


 1776               	  ; increment>0
 1777 078f 7B        	  ld a,e
 1778 0790 96        	  sub (hl)
 1779 0791 7A        	  ld a,d
 1780 0792 23        	  inc hl
 1781 0793 9E        	  sbc a,(hl)
 1782 0794 C39C 07   	  jp paren_loop.end
 1783               	
 1784               	paren_loop.negative_step:
 1785               	  ; increment<0
 1786 0797 7E        	  ld a,(hl) ; limit-index
 1787 0798 93        	  sub e
 1788 0799 23        	  inc hl
 1789 079a 7E        	  ld a,(hl)
 1790 079b 9A        	  sbc a,d ; a<0?
 1791               	
 1792               	paren_loop.end:
 1793 079c FA59 07   	  jp m,branch_pfa ; loop again if a<0
 1794               	  ; done, discard loop parameters
 1795 079f 23        	  inc hl
 1796 07a0 2210 00   	  ld (return_stack_pointer),hl
 1797               	  ; skip branch offset
 1798 07a3 03        	  inc bc
 1799 07a4 03        	  inc bc
 1800 07a5 DDE9      	  _jp_next
 1801               	
 1802               	; ----------------------------------------------
 1803 07a7 A907      	  _code_header paren_plus_loop_,"(+LOOP)"
 1804               	
 1805 07a9 D1        	  pop de
 1806 07aa C37D 07   	  jp paren_loop.step_in_de
 1807               	
 1808               	; ----------------------------------------------
 1809               	
 1810               	.if 0
 1811               	
 1812               	  _colon_header paren_question_do_,"(?DO)"
 1813               	
 1814               	  ; XXX TODO -- first draft, just copied from DZX-Forth
 1815               	
 1816               	  ; XXX FIXME -- crash in both cases
 1817               	
 1818               	  dw two_dup_,equals_
 1819               	  dw question_branch_,paren_question.end
 1820               	  dw paren_do_
 1821               	  dw semicolon_s_ ; XXX TODO exit_
 1822               	paren_question.end:
 1823               	  dw two_drop_
 1824               	  dw from_r_,fetch_,to_r_
 1825               	  dw semicolon_s_
 1826               	
 1827               	.endif
 1828               	
 1829               	; ----------------------------------------------
 1830 07ad AF07      	  _code_header paren_do_,"(DO)"
 1831               	
 1832               	  ; [Code from CP/M fig-Forth 1.1g.]
GAS LISTING solo_forth.z80s 			page 35


 1833               	
 1834 07af D9        	  exx                           ; 04t 01b
 1835 07b0 D1        	  pop de                        ; 10t 01b
 1836 07b1 C1        	  pop bc                        ; 10t 01b
 1837 07b2 2A10 00   	  ld hl,(return_stack_pointer)  ; 20t 03b
 1838 07b5 2B        	  dec hl                        ; 06t 01b
 1839 07b6 70        	  ld (hl),b                     ; 07t 01b
 1840 07b7 2B        	  dec hl                        ; 06t 01b
 1841 07b8 71        	  ld (hl),c                     ; 07t 01b
 1842 07b9 2B        	  dec hl                        ; 06t 01b
 1843 07ba 72        	  ld (hl),d                     ; 07t 01b
 1844 07bb 2B        	  dec hl                        ; 06t 01b
 1845 07bc 73        	  ld (hl),e                     ; 07t 01b
 1846 07bd 2210 00   	  ld (return_stack_pointer),hl  ; 16t 03b
 1847 07c0 D9        	  exx                           ; 04t 01b
 1848               	                                ;116t 18b TOTAL
 1849 07c1 DDE9      	  _jp_next
 1850               	
 1851               	; ----------------------------------------------
 1852               	; XXX TODO experimental do-loop structures adapted from Spectrum Forth-83
 1853               	; and F83.
 1854               	
 1855               	; A do-loop pushes three items on the return stack:
 1856               	;
 1857               	; 0) Limit
 1858               	; 1) Reverse branch address (jump to here if loop repeats).
 1859               	; 2) Current index represented as `(index-limit) xor 0x8000`.
 1860               	;    This is at the top.
 1861               	;    The current index is represented this way so it is easier
 1862               	;    to check whether index has crossed the boundary between
 1863               	;    limit-1 and limit, acoording to
 1864               	;    the rules of Forth-83, even with negative increment in +LOOP.
 1865               	
 1866 07c3 C507      	  _code_header paren_do83_,"(DO83)"
 1867               	
 1868 07c5 E1        	  pop hl ; initial value
 1869 07c6 D1        	  pop de ; limit
 1870               	paren_do83.de_hl:
 1871               	  ; de = limit
 1872               	  ; hl = initial value
 1873 07c7 E5        	  push hl ; initial value  ( initial )
 1874 07c8 2A10 00   	  ld hl,(return_stack_pointer)
 1875 07cb 2B        	  dec hl
 1876 07cc 72        	  ld (hl),d
 1877 07cd 2B        	  dec hl
 1878 07ce 73        	  ld (hl),e ; push limit value on return stack ( R: initial )
 1879 07cf 03        	  inc bc
 1880 07d0 03        	  inc bc ; increment the Forth IP, skip branch address
 1881 07d1 2B        	  dec hl
 1882 07d2 70        	  ld (hl),b
 1883 07d3 2B        	  dec hl
 1884 07d4 71        	  ld (hl),c ; push current instruction pointer on return stack
 1885 07d5 E3        	  ex (sp),hl ; initial value now in HL, return stack pointer on stack
 1886 07d6 A7        	  and a ; reset the carry flag
 1887 07d7 ED52      	  sbc hl,de ; B SBCP        \ Subtract limit value.
 1888 07d9 7C        	  ld a,h ; H A LD
 1889 07da EE80      	  xor 0x80 ; 80 XOR#       \ Flip most significant bit.
GAS LISTING solo_forth.z80s 			page 36


 1890 07dc 57        	  ld d,a ; A B LD
 1891 07dd 5D        	  ld e,l ; L C LD        \ Move result to DE.
 1892 07de E1        	  pop hl ; H POP        \ Get return stack pointer from stack,
 1893 07df 2B        	  dec hl ; H DEC
 1894 07e0 72        	  ld (hl),d ; B M LD
 1895 07e1 2B        	  dec hl ; H DEC
 1896 07e2 73        	  ld (hl),e ; C M LD        \ Push (initial - limit) XOR 0x8000 onto return stack.
 1897 07e3 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL       \ Save return stack pointer.
 1898 07e6 DDE9      	  _jp_next ; JPIX ;C
 1899               	
 1900 07e8 EA07      	  _code_header paren_question_do83_,"(?DO83)"
 1901               	
 1902 07ea E1        	  pop hl ; initial value
 1903 07eb D1        	  pop de ; limit
 1904 07ec A7        	  and a ; reset the carry flag
 1905 07ed ED52      	  sbc hl,de ; compare
 1906 07ef 2804      	  jr z,question_do.equals
 1907               	  ; not equals
 1908               	  ; XXX TODO move add after sbc and save one jump
 1909 07f1 19        	  add hl,de ; reverse the subtraction
 1910 07f2 C3C7 07   	  jp paren_do83.de_hl ; perform regular `do`
 1911               	question_do.equals:
 1912 07f5 C359 07   	  jp branch_pfa ; XXX TODO ?
 1913               	
 1914 07f8 650C      	  _colon_header question_do83_,"?DO83",immediate
 1915               	
 1916 07fa 680F E807 	  dw compile_,paren_question_do83_
 1917 07fe 2F07      	  dw forward_mark_
 1918               	.if 1 ; fig_compiler_security
 1919 0800 8306 03   	  _literal 3
 1920               	.endif
 1921 0803 C00A      	  dw semicolon_s_
 1922               	
 1923 0805 650C      	  _colon_header do83_,"DO83",immediate
 1924               	
 1925 0807 680F C307 	  dw compile_,paren_do83_
 1926 080b 2F07      	  dw forward_mark_
 1927               	.if 1 ; fig_compiler_security
 1928 080d 8306 03   	  _literal 3
 1929               	.endif
 1930 0810 C00A      	  dw semicolon_s_
 1931               	
 1932 0812 650C      	  _colon_header loop83_,"LOOP83",immediate
 1933               	
 1934               	.if 1 ; fig_compiler_security
 1935 0814 8306 03   	  _literal 3
 1936 0817 3D0F      	  dw question_pairs_
 1937               	.endif
 1938 0819 680F 2108 	  dw compile_,paren_loop83_
 1939 081d 3B07      	  dw forward_resolve_
 1940 081f C00A      	  dw semicolon_s_
 1941               	
 1942               	  ; _colon_header plus_loop83_,"+LOOP83",immediate
 1943               	
 1944               	  ; dw c_lit_
 1945               	  ; db 3
 1946               	  ; dw question_pairs_
GAS LISTING solo_forth.z80s 			page 37


 1947               	  ; dw compile_,paren_plus_loop83_
 1948               	  ; dw forward_resolve_
 1949               	  ; dw semicolon_s_
 1950               	
 1951 0821 650C      	  _colon_header paren_loop83_,"(LOOP83)"
 1952               	
 1953 0823 2A10 00   	  ld hl,(return_stack_pointer)
 1954 0826 5E        	  ld e,(hl) ; M C LD
 1955 0827 23        	  inc hl    ; H INC
 1956 0828 56        	  ld d,(hl) ; M B LD         \ Read current index value.
 1957 0829 13        	  inc de    ; B INC         \ Increment it.
 1958 082a 7A        	  ld a,d    ; B A LD
 1959 082b EE80      	  xor 0x80  ; 80 XOR#
 1960 082d B3        	  or e      ;  C OR         \ Was it equal to 0x8000 ?
 1961 082e C23A 08   	  jp nz,paren_loop83.loop ; jump if not
 1962               	
 1963               	  ; The real index has reached limit, terminate loop.
 1964               	  ; Increment ret stack pointer by 5 (1 increment already done).
 1965 0831 1105 00   	  ld de,5   ; 5 B LDP#
 1966 0834 19        	  add hl,de ; B ADDP
 1967 0835 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL
 1968 0838 DDE9      	  _jp_next
 1969               	
 1970               	paren_loop83.loop:
 1971               	
 1972 083a 72        	  ld (hl),d ;  B M LD
 1973 083b 2B        	  dec hl    ; H DEC
 1974 083c 73        	  ld (hl),e ; C M LD    \ Store updated index.
 1975 083d 23        	  inc hl    ; H INC
 1976 083e 23        	  inc hl    ; H INC
 1977 083f 4E        	  ld c,(hl) ; M E LD
 1978 0840 23        	  inc hl    ; H INC
 1979 0841 4E        	  ld c,(hl) ; M D LD   \ Read loop start address into instruction pointer, repeat loop.
 1980 0842 DDE9      	  _jp_next
 1981               	
 1982               	.if 0 ; XXX TODO adapt
 1983               	
 1984               	; CODE (+LOOP83) ( w --- )
 1985               	;  RPTR LDHL     \ Read return stack pointer into HL.
 1986               	;    M C LD
 1987               	;     H INC
 1988               	;    M B LD      \ Read Current index.
 1989               	;      EXSP      \ HL now contains w, the increment value.
 1990               	;     A AND
 1991               	;    B ADCP      \ Add increment to index.
 1992               	;    v if
 1993               	;                \ If overflow, then boundary between limit-1 and limit is
 1994               	;                \ crossed, terminate loop.
 1995               	;      H POP     \ Get return stack pointer.
 1996               	;   5 B LDP#
 1997               	;     B ADDP
 1998               	;  RPTR STHL     \ Increment ret stack pointer by 5 (1 increment already done)
 1999               	;                \ and store updated ret stack pointer back.
 2000               	;    else
 2001               	;     H B LD
 2002               	;     L C LD     \ Move updated index to BC.
 2003               	;      H POP     \ Get return stack pointer.
GAS LISTING solo_forth.z80s 			page 38


 2004               	;     B M LD
 2005               	;      H DEC
 2006               	;     C M LD     \ Store updated index.
 2007               	;      H INC
 2008               	;      H INC
 2009               	;     M E LD
 2010               	;      H INC
 2011               	;     M D LD     \ Read loop start address into instruction pointer, repeat loop.
 2012               	;    then
 2013               	;  JPIX ;C
 2014               	
 2015               	; CODE LEAVE83
 2016               	;  RPTR LDHL     \ Read return stack pointer into HL.
 2017               	;     H INC
 2018               	;     H INC
 2019               	;    M E LD
 2020               	;     H INC
 2021               	;    M D LD      \ Get start address into DE.
 2022               	;     H INC
 2023               	;     H INC
 2024               	;     H INC
 2025               	; RPTR STHL      \ Write updated return stack pointer (6 was added).
 2026               	;     D DEC
 2027               	;     D DEC      \ DE (instruction pointer) now points to forward branch address
 2028               	;   'BRANCH @ JP ;C \ continue into BRANCH.
 2029               	
 2030               	; CODE I83  ( --- w)
 2031               	; RPTR LDHL        \ Read return stack pointer into HL.
 2032               	;   \ J jumps here.
 2033               	;   M C LD
 2034               	;    H INC
 2035               	;   M B LD         \ Read current index. (which is (index-limit) xor 0x8000.
 2036               	;    H INC
 2037               	;    H INC
 2038               	;    H INC
 2039               	;   M A LD         \ Read limit and add to index
 2040               	;    C ADD
 2041               	;   A C LD
 2042               	;    H INC
 2043               	;   M A LD
 2044               	;    B ADC
 2045               	;  80 XOR#         \ and flip most significant bit, getting true index value.
 2046               	;   A B LD
 2047               	;   B PUSH         \ Push result.
 2048               	; JPIX ;C
 2049               	
 2050               	; CODE J83 ( --- w)
 2051               	;   RPTR LDHL      \ Read return stack pointer into HL
 2052               	;   6 B LDP#
 2053               	;     B ADDP       \ Add 6 to it, to get to next inner loop parameters.
 2054               	;  'I @ 3 + JR ;C  \ Continue into I.
 2055               	
 2056               	; CODE I'83 ( --- w)
 2057               	;   RPTR LDHL      \ Read return stack pointer into HL
 2058               	;      H INC
 2059               	;      H INC
 2060               	;      H INC
GAS LISTING solo_forth.z80s 			page 39


 2061               	;      H INC
 2062               	;     M C LD
 2063               	;      H INC
 2064               	;     M B LD       \ Read limit value.
 2065               	;     B PUSH       \ Push result
 2066               	;     JPIX ;C
 2067               	
 2068               	.endif
 2069               	
 2070               	; ----------------------------------------------
 2071 0844 510B      	  _code_alias_header i_,"I",,r_fetch_
 2072               	
 2073               	; doc{
 2074               	;
 2075               	; i  ( -- x ) ( R: loop-sys -- loop-sys ) \ ANS Forth
 2076               	;
 2077               	; Return a copy of the current (innermost) loop index.
 2078               	;
 2079               	; }doc
 2080               	
 2081               	; ----------------------------------------------
 2082 0846 4808      	  _code_header digit_,"DIGIT"
 2083               	
 2084               	; doc{
 2085               	;
 2086               	; digit  ( c n1 --- n2 tf | ff )  \ fig-Forth
 2087               	;
 2088               	; Convert the ascii character _c_ (using base _n1_) to its
 2089               	; binary equivalent n2, accompanied by a true flag. If the
 2090               	; conversion is invalid, leave only a false flag.
 2091               	;
 2092               	; }doc
 2093               	
 2094 0848 E1        	  pop hl  ; l=base
 2095 0849 D1        	  pop de  ; e=character
 2096 084a 7B        	  ld a,e  ; character
 2097 084b D630      	  sub '0' ; >="0"?
 2098 084d DAD3 0C   	  jp c,false_pfa ; <"0" is invalid
 2099 0850 FE0A      	  cp 0x0A ; >"9"?
 2100 0852 FA5C 08   	  jp m,digit.test_value ; no, test value
 2101 0855 D607      	  sub 0x07 ; gap between "9" & "A", now "A"=0x0A
 2102 0857 FE0A      	  cp 0x0A ; >="A"?
 2103 0859 DAD3 0C   	  jp c,false_pfa ; characters between "9" & "A" are invalid
 2104               	digit.test_value:
 2105 085c BD        	  cp l ; <base?
 2106 085d D2D3 0C   	  jp nc,false_pfa ; no, invalid
 2107 0860 5F        	  ld e,a ; converted digit
 2108 0861 D5        	  push de
 2109 0862 C3DB 0C   	  jp true_pfa
 2110               	
 2111               	; ----------------------------------------------
 2112 0865 6708      	  _code_header paren_find_,"(FIND)"
 2113               	
 2114               	; doc{
 2115               	;
 2116               	; (find)  ( ca nfa --- ca 0 | cfa 1 | cfa -1 )
 2117               	;
GAS LISTING solo_forth.z80s 			page 40


 2118               	; Find the definition named in the counted string at _ca_,
 2119               	; starting at _nfa_. If the definition is not found, return _ca_
 2120               	; and zero.  If the definition is found, return its _cfa_. If
 2121               	; the definition is immediate, also return one (1); otherwise
 2122               	; also return minus-one (-1).
 2123               	;
 2124               	; }doc
 2125               	
 2126 0867 1E01      	  ld e,names_bank
 2127 0869 CDA0 06   	  call bank.e ; page the memory bank
 2128               	
 2129 086c D1        	  pop de ; nfa
 2130 086d E1        	  pop hl ; string address
 2131 086e C5        	  push bc ; save the Forth IP
 2132 086f 2277 08   	  ld (paren_find.string_address),hl
 2133               	
 2134               	  ; XXX FIXME the string searched for must be in the string
 2135               	  ; buffer, below 0xC000! This is not a problem now, during the
 2136               	  ; development, because the dictionary is small.
 2137               	
 2138               	paren_find.begin:
 2139               	  ;_z80_border 2 ; XXX INFORMER
 2140               	  ;_z80_border 7 ; XXX INFORMER
 2141               	  ; Compare the string with a new word.
 2142               	  ; de = nfa
 2143 0872 ED53 A908 	  ld (paren_find.nfa_backup),de ; save the nfa for later
 2144               	paren_find.string_address: equ $+1
 2145 0876 2100 00   	  ld hl,0 ; string address
 2146 0879 1A        	  ld a,(de) ; length byte of the name field
 2147 087a 4F        	  ld c,a    ; save for later
 2148 087b E61F      	  and max_word_length_mask  ; length
 2149 087d BE        	  cp (hl) ; same length?
 2150 087e 2028      	  jr nz,paren_find.not_a_match ; lengths differ
 2151               	
 2152               	  ; Lengths match, compare the characters.
 2153 0880 47        	  ld b,a ; length
 2154               	paren_find.compare_next_char:
 2155 0881 23        	  inc hl ; next character in string
 2156 0882 13        	  inc de ; next character in name field
 2157 0883 1A        	  ld a,(de)
 2158 0884 BE        	  cp (hl) ; match?
 2159 0885 2021      	  jr nz,paren_find.not_a_match ; no match
 2160 0887 10F8      	  djnz paren_find.compare_next_char ; match so far, loop again
 2161               	
 2162               	  ; The string matches.
 2163               	  ; c = name field length byte
 2164 0889 2AA9 08   	  ld hl,(paren_find.nfa_backup)
 2165               	;  ld (0xfffa),hl ; XXX INFORMER ; nfa, ok
 2166 088c 2B        	  dec hl
 2167 088d 2B        	  dec hl ; lfa
 2168 088e 2B        	  dec hl ; high part of the pointer to cfa
 2169 088f 56        	  ld d,(hl)
 2170 0890 2B        	  dec hl ; low part of the pointer to cfa
 2171 0891 5E        	  ld e,(hl) ; de = cfa
 2172               	
 2173               	;  ld (0xfffc),de ; XXX INFORMER ; cfa, ok
 2174               	
GAS LISTING solo_forth.z80s 			page 41


 2175 0892 2101 00   	  ld hl,1 ; 1=immediate word
 2176 0895 79        	  ld a,c ; name field length byte
 2177 0896 E640      	  and precedence_mask ; immediate word?
 2178 0898 C29D 08   	  jp nz,paren_find.end
 2179               	  ; non-immediate word
 2180 089b 2B        	  dec hl
 2181 089c 2B        	  dec hl ; -1 = non-immediate word
 2182               	
 2183               	paren_find.end:
 2184               	  ; If match found:
 2185               	  ;   de = cfa
 2186               	  ;   hl = -1 | 1
 2187               	  ; If no match found:
 2188               	  ;   de = ca
 2189               	  ;   hl = 0
 2190 089d D9        	  exx
 2191 089e 1E00      	  ld e,default_bank
 2192 08a0 CDA0 06   	  call bank.e ; page the default memory bank
 2193 08a3 D9        	  exx
 2194 08a4 C1        	  pop bc ; restore the Forth IP
 2195               	  ; _z80_border 4 ; XXX INFORMER
 2196 08a5 C35D 05   	  jp push_hlde
 2197               	
 2198               	paren_find.not_a_match:
 2199               	  ; Not a match, try next one.
 2200               	paren_find.nfa_backup: equ $+1
 2201 08a8 2100 00   	  ld hl,0 ; nfa
 2202 08ab 2B        	  dec hl ; high address of lfa
 2203 08ac 56        	  ld d,(hl) ; high part of the next nfa
 2204 08ad 2B        	  dec hl ; low address of lfa
 2205 08ae 5E        	  ld e,(hl) ; low part of the next nfa
 2206 08af 7A        	  ld a,d
 2207 08b0 B3        	  or e ; end of dictionary? (next nfa=0)
 2208 08b1 C272 08   	  jp nz,paren_find.begin ; if not, continue
 2209               	  ; End of dictionary, no match found, return.
 2210 08b4 ED5B 7708 	  ld de,(paren_find.string_address)
 2211 08b8 2100 00   	  ld hl,0
 2212 08bb C39D 08   	  jp paren_find.end
 2213               	
 2214               	; ----------------------------------------------
 2215 08be C008      	  _code_header scan_,"SCAN"
 2216               	
 2217               	; doc{
 2218               	;
 2219               	; scan  ( ca c -- ca len )
 2220               	;
 2221               	; c = ascii delimiting character
 2222               	; ca = text address
 2223               	; len = length of the parsed text
 2224               	;
 2225               	; }doc
 2226               	
 2227 08c0 E1        	  pop hl ; delimiter
 2228 08c1 D1        	  pop de ; address
 2229 08c2 D5        	  push de
 2230 08c3 C5        	  push bc ; save Forth IP
 2231 08c4 4D        	  ld c,l ; delimiter
GAS LISTING solo_forth.z80s 			page 42


 2232 08c5 2100 00   	  ld hl,0 ; length
 2233 08c8 2B        	  dec hl
 2234 08c9 1B        	  dec de
 2235               	scan.begin:
 2236 08ca 23        	  inc hl
 2237 08cb 13        	  inc de
 2238 08cc 1A        	  ld a,(de)
 2239 08cd B9        	  cp c ; delimiter?
 2240 08ce 20FA      	  jr nz,scan.begin
 2241               	  ; delimiter found
 2242 08d0 C1        	  pop bc ; restore Forth IP
 2243 08d1 C35E 05   	  jp push_hl
 2244               	
 2245               	; ----------------------------------------------
 2246 08d4 D608      	  _code_header skip_,"SKIP"
 2247               	
 2248               	; doc{
 2249               	;
 2250               	; skip  ( ca1 c -- ca2 )
 2251               	;
 2252               	; }doc
 2253               	
 2254 08d6 D1        	  pop de ; e = delimiter
 2255 08d7 E1        	  pop hl ; ca1
 2256               	skip.begin:
 2257 08d8 7E        	  ld a,(hl)
 2258 08d9 BB        	  cp e ; delimiter?
 2259 08da C25E 05   	  jp nz,push_hl
 2260 08dd 23        	  inc hl
 2261 08de C3D8 08   	  jp skip.begin ; again
 2262               	
 2263               	; ----------------------------------------------
 2264 08e1 E308      	  _code_header chan_,"CHAN"
 2265               	
 2266               	; doc{
 2267               	;
 2268               	; chan  ( n -- )  \ Open channel n for output.
 2269               	;
 2270               	; }doc
 2271               	;
 2272               	; [Code from Spectrum Forth-83.]
 2273               	
 2274 08e3 E1        	  pop hl
 2275 08e4 C5        	  push bc
 2276 08e5 7D        	  ld a,l
 2277 08e6 CD01 16   	  call rom_chan_open
 2278 08e9 C1        	  pop bc
 2279 08ea DDE9      	  _jp_next
 2280               	
 2281               	; ----------------------------------------------
 2282 08ec 650C      	  _colon_header emit_,"EMIT"
 2283               	
 2284               	; XXX TODO -- Add multitasker's `pause` when available.
 2285               	; XXX TODO -- defer
 2286               	
 2287 08ee F808      	  dw paren_emit_
 2288 08f0 C90C 240D 	  dw one_,out_,plus_store_
GAS LISTING solo_forth.z80s 			page 43


 2288      F00B 
 2289 08f6 C00A      	  dw semicolon_s_
 2290               	
 2291               	; ----------------------------------------------
 2292 08f8 FA08      	  _code_header paren_emit_,"(EMIT)"
 2293               	
 2294               	; doc{
 2295               	;
 2296               	; (emit)  ( b -- )
 2297               	;
 2298               	; Send the character b to the current channel.
 2299               	;
 2300               	; }doc
 2301               	
 2302               	; [Code from Spectrum Forth-83's `TOCH`.]
 2303               	
 2304               	.if latin1_charset_in_bank
 2305               	  ld e,names_bank
 2306               	  call bank.e ; the charset is in the memory bank
 2307               	.endif
 2308 08fa E1        	  pop hl
 2309 08fb 7D        	  ld a,l
 2310 08fc FD36 52FF 	  ld (iy+sys_scr_ct_offset),0xFF ; no scroll message
 2311 0900 D7        	  rst 0x10
 2312               	.if latin1_charset_in_bank
 2313               	  ld e,default_bank
 2314               	  call bank.e
 2315               	.endif
 2316 0901 DDE9      	  _jp_next
 2317               	
 2318               	; ----------------------------------------------
 2319 0903 650C      	  _colon_header printer_,"PRINTER"
 2320               	
 2321 0905 8306 03   	  _literal 3
 2322 0908 E108      	  dw chan_
 2323 090a C00A      	  dw semicolon_s_
 2324               	
 2325               	; ----------------------------------------------
 2326 090c 650C      	  _colon_header display_,"DISPLAY"
 2327               	
 2328 090e CD0C      	  dw two_
 2329 0910 E108      	  dw chan_
 2330 0912 C00A      	  dw semicolon_s_
 2331               	
 2332               	; ----------------------------------------------
 2333 0914 1609      	  _code_header key_question_,"KEY?"
 2334               	
 2335               	; doc{
 2336               	;
 2337               	; key?  ( -- f )  \ ANS Forth
 2338               	;
 2339               	; }doc
 2340               	
 2341 0916 3A08 5C   	  ld a,(sys_last_k)
 2342 0919 A7        	  and a
 2343 091a CAD3 0C   	  jp z,false_pfa
 2344 091d C3DB 0C   	  jp true_pfa
GAS LISTING solo_forth.z80s 			page 44


 2345               	
 2346               	; ----------------------------------------------
 2347 0920 1A14      	  _variable_header decode_table_,"DECODE-TABLE"
 2348               	
 2349 0922 0000      	  dw 0 ; no chained table ; XXX TODO
 2350               	              ; Symbol Shift + Letter --> new char
 2351 0924 C65B      	  db 0xC6,'[' ; "Y" 198 (0xC6) "AND"  --> 091 (0x5B) "["
 2352 0926 C55D      	  db 0xC5,']' ; "U" 197 (0xC5) "OR"   --> 093 (0x5D) "]"
 2353 0928 E27E      	  db 0xE2,'~' ; "A" 226 (0xE2) "STOP" --> 126 (0x7E) "~"
 2354 092a C37C      	  db 0xC3,'|' ; "S" 195 (0xC3) "NOT"  --> 124 (0x7C) "|"
 2355 092c CD5C      	  db 0xCD,'\' ; "D" 205 (0xCD) "STEP" --> 092 (0x5C) "\"
 2356 092e CC7B      	  db 0xCC,'{' ; "F" 204 (0xCC) "TO"   --> 123 (0x7B) "{"
 2357 0930 CB7D      	  db 0xCB,'}' ; "G" 203 (0xCB) "THEN" --> 125 (0x7D) "}"
 2358 0932 00        	  db 0 ; end of data
 2359               	
 2360               	  ; "I" 172 (0xAC) "AT"   --> 127 (0x7F) "(C)" ; XXX TODO
 2361               	
 2362               	; ----------------------------------------------
 2363 0933 3509      	  _code_header decode_char_,"DECODE-CHAR"
 2364               	  
 2365               	; doc{
 2366               	;
 2367               	; decode-char  ( c1 -- c2 )
 2368               	;
 2369               	; }doc
 2370               	
 2371               	  ; XXX TODO
 2372               	
 2373 0935 D1        	  pop de
 2374 0936 2122 09   	  ld hl,decode_table_+2 ; XXX TMP
 2375               	decode_char.begin:
 2376 0939 7E        	  ld a,(hl)
 2377 093a A7        	  and a
 2378 093b 7B        	  ld a,e
 2379               	
 2380               	; ----------------------------------------------
 2381 093c 3E09      	  _code_header paren_key_,"(KEY)"
 2382               	
 2383 093e 3A08 5C   	  ld a,(sys_last_k)
 2384 0941 3248 09   	  ld (previous_key),a
 2385               	paren_key_.begin:
 2386               	  ; call pause ; XXX TODO
 2387               	  ; call rom_keyboard ; XXX TODO not needed if system interrupts are on
 2388 0944 3A08 5C   	  ld a,(sys_last_k)
 2389               	previous_key: equ $+1
 2390 0947 FE00      	  cp 0 ; a different key?
 2391 0949 CA44 09   	  jp z,paren_key_.begin
 2392 094c 2600      	  ld h,0
 2393 094e 6F        	  ld l,a
 2394 094f AF        	  xor a
 2395 0950 3208 5C   	  ld (sys_last_k),a ; delete the last key
 2396 0953 E5        	  push hl
 2397 0954 C333 09   	  jp decode_char_
 2398               	
 2399               	; ----------------------------------------------
 2400 0957 5909      	  _code_header key_,"KEY"
 2401               	
GAS LISTING solo_forth.z80s 			page 45


 2402               	; doc{
 2403               	;
 2404               	; key  ( -- c )  \ ANS Forth
 2405               	;
 2406               	; }doc
 2407               	
 2408               	; XXX -- This version works also when the system interrupts are off.
 2409               	; XXX TODO -- Add multitasker's `pause` when available.
 2410               	
 2411 0959 C5        	  push bc
 2412 095a DDE5      	  push ix ; XXX TMP
 2413               	key.begin:
 2414 095c CD8E 02   	  call rom_key_scan
 2415 095f 20FB      	  jr nz,key.begin
 2416 0961 CD1E 03   	  call rom_key_test
 2417 0964 30F6      	  jr nc,key.begin
 2418 0966 15        	  dec d
 2419 0967 5F        	  ld e,a
 2420 0968 CD33 03   	  call rom_key_decode
 2421               	key.end:
 2422 096b 2108 5C   	  ld hl,sys_last_k
 2423 096e 3600      	  ld (hl),0
 2424 0970 DDE1      	  pop ix ; XXX TMP
 2425 0972 C1        	  pop bc
 2426 0973 C387 06   	  jp push_a
 2427               	
 2428               	; ----------------------------------------------
 2429 0976 7809      	  _code_header xkey_,"XKEY"
 2430               	
 2431               	; XXX OLD -- this is the original code from Abersoft Forth.
 2432               	; Too complex. A mode-less version will be coded.
 2433               	
 2434               	; doc{
 2435               	;
 2436               	; xkey  ( -- c )
 2437               	;
 2438               	; Leave the ASCII value of the next terminal key struck.
 2439               	;
 2440               	; }doc
 2441               	
 2442               	  ; XXX TODO simplify, no Spectrum modes
 2443               	
 2444 0978 C5        	  push bc
 2445               	
 2446               	  ; XXX OLD
 2447               	  ; inverse video on
 2448               	  ; ld a,inverse_char
 2449               	  ; rst 0x10
 2450               	  ; ld a,0x01
 2451               	  ; rst 0x10
 2452               	
 2453               	xkey.new_key:
 2454 0979 AF        	  xor a
 2455 097a 3208 5C   	  ld (sys_last_k),a
 2456               	
 2457               	  ; Print cursor:
 2458 097d 3E88      	  ld a,0x88 ; cursor
GAS LISTING solo_forth.z80s 			page 46


 2459 097f D7        	  rst 0x10
 2460 0980 3E08      	  ld a,backspace_char
 2461 0982 D7        	  rst 0x10
 2462               	
 2463               	xkey.wait_for_key:
 2464 0983 3A08 5C   	  ld a,(sys_last_k)
 2465 0986 A7        	  and a
 2466 0987 28FA      	  jr z,xkey.wait_for_key
 2467               	  ; a = pressed key code
 2468               	
 2469 0989 FE06      	  cp caps_char ; toggle caps lock?
 2470 098b 2009      	  jr nz,xkey.translate
 2471               	  ; toggle caps lock
 2472 098d 216A 5C   	  ld hl,sys_flags2
 2473 0990 3E08      	  ld a,0x08
 2474 0992 AE        	  xor (hl)
 2475 0993 77        	  ld (hl),a
 2476 0994 18E3      	  jr xkey.new_key
 2477               	
 2478               	  ; Translate some chars
 2479               	  ; XXX TODO use a configurable list of chars pairs
 2480               	
 2481               	xkey.translate:
 2482               	xkey.left_bracket:
 2483 0996 FEC6      	  cp 0xC6
 2484 0998 2002      	  jr nz,xkey.right_bracket
 2485 099a 3E5B      	  ld a,'['
 2486               	xkey.right_bracket:
 2487 099c FEC5      	  cp 0xC5
 2488 099e 2002      	  jr nz,xkey.tilde
 2489 09a0 3E5D      	  ld a,']'
 2490               	xkey.tilde:
 2491 09a2 FEE2      	  cp 0xE2
 2492 09a4 2002      	  jr nz,xkey.vertical_bar
 2493 09a6 3E7E      	  ld a,'~'
 2494               	xkey.vertical_bar:
 2495 09a8 FEC3      	  cp 0xC3
 2496 09aa 2002      	  jr nz,xkey.backslash
 2497 09ac 3E7C      	  ld a,'|'
 2498               	xkey.backslash:
 2499 09ae FECD      	  cp 0xCD
 2500 09b0 2002      	  jr nz,xkey.left_curly_bracket
 2501 09b2 3E5C      	  ld a,'\'
 2502               	xkey.left_curly_bracket:
 2503 09b4 FECC      	  cp 0xCC
 2504 09b6 2002      	  jr nz,xkey.right_curly_bracket
 2505 09b8 3E7B      	  ld a,'{'
 2506               	xkey.right_curly_bracket:
 2507 09ba FECB      	  cp 0xCB
 2508 09bc 2002      	  jr nz,xkey.end
 2509 09be 3E7D      	  ld a,'}'
 2510               	
 2511               	xkey.end:
 2512 09c0 6F        	  ld l,a
 2513 09c1 2600      	  ld h,0x00
 2514               	
 2515               	  ; XXX OLD
GAS LISTING solo_forth.z80s 			page 47


 2516               	  ; inverse video off
 2517               	  ; ld a,inverse_char
 2518               	  ; rst 0x10
 2519               	  ; ld a,0x00
 2520               	  ; rst 0x10
 2521               	
 2522               	  ; delete the cursor
 2523 09c3 3E20      	  ld a,space_char
 2524 09c5 D7        	  rst 0x10
 2525 09c6 3E08      	  ld a,backspace_char
 2526 09c8 D7        	  rst 0x10
 2527               	
 2528 09c9 C1        	  pop bc
 2529 09ca C35E 05   	  jp push_hl
 2530               	
 2531               	; ----------------------------------------------
 2532 09cd 650C      	  _colon_header cr_,"CR"
 2533               	
 2534               	; doc{
 2535               	;
 2536               	; cr  ( -- )
 2537               	;
 2538               	; Transmit a carriage return to the selected output device.
 2539               	;
 2540               	; }doc
 2541               	
 2542 09cf 8306 0D   	  _literal carriage_return_char
 2543 09d2 EC08 240D 	  dw emit_,out_,off_
 2543      FD0B 
 2544 09d8 C00A      	  dw semicolon_s_
 2545               	
 2546               	; ----------------------------------------------
 2547 09da DC09      	  _code_header cmove_up_,"CMOVE>"
 2548               	
 2549 09dc D9        	  exx
 2550 09dd C1        	  pop bc
 2551 09de D1        	  pop de
 2552 09df E1        	  pop hl
 2553 09e0 CD28 05   	  call move_block_downwards
 2554 09e3 D9        	  exx
 2555 09e4 DDE9      	  _jp_next
 2556               	
 2557               	; ----------------------------------------------
 2558 09e6 E809      	  _code_header cmove_,"CMOVE"
 2559               	
 2560 09e8 D9        	  exx
 2561 09e9 C1        	  pop bc
 2562 09ea D1        	  pop de
 2563 09eb E1        	  pop hl
 2564 09ec CD22 05   	  call move_block_upwards
 2565 09ef D9        	  exx
 2566 09f0 DDE9      	  _jp_next
 2567               	
 2568               	; ----------------------------------------------
 2569 09f2 F409      	  _code_header move_,"MOVE"
 2570               	
 2571               	; doc{
GAS LISTING solo_forth.z80s 			page 48


 2572               	;
 2573               	; move  ( a1 a2 len -- )
 2574               	;
 2575               	; }doc
 2576               	
 2577 09f4 D9        	  exx
 2578 09f5 C1        	  pop bc
 2579 09f6 D1        	  pop de
 2580               	move.do:
 2581 09f7 E1        	  pop hl
 2582 09f8 CD1C 05   	  call move_block
 2583 09fb D9        	  exx
 2584 09fc DDE9      	  _jp_next
 2585               	
 2586               	; ----------------------------------------------
 2587 09fe 000A      	  _code_header smove_,"SMOVE"
 2588               	
 2589               	; doc{
 2590               	;
 2591               	; smove  ( a1 len a2 -- )
 2592               	; 
 2593               	; Move the string _a1 len_ to _a2_. _a2_ will contain the first
 2594               	; char of the string.
 2595               	;
 2596               	; }doc
 2597               	
 2598               	; swap move
 2599               	
 2600 0a00 D9        	  exx
 2601 0a01 D1        	  pop de
 2602 0a02 C1        	  pop bc
 2603 0a03 C3F7 09   	  jp move.do
 2604               	
 2605               	; ----------------------------------------------
 2606 0a06 080A      	  _code_header u_m_star_,"UM*"
 2607               	
 2608               	; doc{
 2609               	;
 2610               	; um*  ( u1 u2 -- ud )  \ ANS Forth
 2611               	;
 2612               	; Multiply _u1_ by _u2_, giving the unsigned double-cell product
 2613               	; _ud_.  All values and arithmetic are unsigned.
 2614               	;
 2615               	; }doc
 2616               	
 2617               	  ; [Code from DZX-Forth.]
 2618               	
 2619 0a08 D1        	  pop de
 2620 0a09 E1        	  pop hl
 2621 0a0a CD46 05   	  call hl_multiplied_by_de_to_hlde_unsigned
 2622 0a0d C35D 05   	  jp push_hlde
 2623               	
 2624               	; ----------------------------------------------
 2625 0a10 120A      	  _code_header u_slash_mod_,'U/MOD' ; XXX OLD
 2626               	
 2627               	; doc{
 2628               	;
GAS LISTING solo_forth.z80s 			page 49


 2629               	; u/mod ( ud u1 -- u2 u3 )
 2630               	;
 2631               	; Divide _ud_ by _u1_, giving the quotient _u3_ and the
 2632               	; remainder _u2_.  All values and arithmetic are unsigned. An
 2633               	; ambiguous condition exists if u1 is zero or if the quotient
 2634               	; lies outside the range of a single-cell unsigned integer.
 2635               	;
 2636               	; }doc
 2637               	
 2638               	; XXX FIXME -- This word, whose code is taken from Abersoft
 2639               	; forth, has a bug that affects `(line)`, used by `message`, and
 2640               	; other words that use it: `*/mod`, `mod` and `/mod`, with
 2641               	; certain negative values, return different values in Abersoft
 2642               	; Forth and other Forth systems that have been tested (some of
 2643               	; them are fig-Forth).
 2644               	
 2645 0a12 2104 00   	  ld hl,0x0004
 2646 0a15 39        	  add hl,sp
 2647 0a16 5E        	  ld e,(hl)
 2648 0a17 71        	  ld (hl),c
 2649 0a18 23        	  inc hl
 2650 0a19 56        	  ld d,(hl)
 2651 0a1a 70        	  ld (hl),b
 2652 0a1b C1        	  pop bc
 2653 0a1c E1        	  pop hl
 2654 0a1d 7D        	  ld a,l
 2655 0a1e 91        	  sub c
 2656 0a1f 7C        	  ld a,h
 2657 0a20 98        	  sbc a,b
 2658 0a21 3808      	  jr c,l60a0h
 2659 0a23 21FF FF   	  ld hl,0xFFFF
 2660 0a26 11FF FF   	  ld de,0xFFFF
 2661 0a29 1820      	  jr l60c0h
 2662               	l60a0h:
 2663 0a2b 3E10      	  ld a,0x10
 2664               	l60a2h:
 2665 0a2d 29        	  add hl,hl
 2666 0a2e 17        	  rla
 2667 0a2f EB        	  ex de,hl
 2668 0a30 29        	  add hl,hl
 2669 0a31 3002      	  jr nc,l60aah
 2670 0a33 13        	  inc de
 2671 0a34 A7        	  and a
 2672               	l60aah:
 2673 0a35 EB        	  ex de,hl
 2674 0a36 1F        	  rra
 2675 0a37 F5        	  push af
 2676 0a38 3005      	  jr nc,l60b4h
 2677 0a3a A5        	  and l
 2678 0a3b ED42      	  sbc hl,bc
 2679 0a3d 1807      	  jr l60bbh
 2680               	l60b4h:
 2681 0a3f A7        	  and a
 2682 0a40 ED42      	  sbc hl,bc
 2683 0a42 3002      	  jr nc,l60bbh
 2684 0a44 09        	  add hl,bc
 2685 0a45 1B        	  dec de
GAS LISTING solo_forth.z80s 			page 50


 2686               	l60bbh:
 2687 0a46 13        	  inc de
 2688 0a47 F1        	  pop af
 2689 0a48 3D        	  dec a
 2690 0a49 20E2      	  jr nz,l60a2h
 2691               	l60c0h:
 2692 0a4b C1        	  pop bc
 2693 0a4c E5        	  push hl
 2694 0a4d D5        	  push de
 2695 0a4e DDE9      	  _jp_next
 2696               	
 2697               	.if 0 ; XXX TODO
 2698               	
 2699               	; ----------------------------------------------
 2700               	  _code_header s_m_slash_rem_,"SM/REM"
 2701               	
 2702               	; doc{
 2703               	;
 2704               	; sm/rem  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "s-m-slash-rem"
 2705               	;
 2706               	; Symmetric division:
 2707               	;
 2708               	;   d1 = n3*n1+n2, sign(n2)=sign(d1) or 0.
 2709               	;
 2710               	; Divide _d1_ by _n1_, giving the symmetric quotient _n3_ and
 2711               	; the remainder _n2_. Input and output stack arguments are
 2712               	; signed.
 2713               	;
 2714               	; }doc
 2715               	
 2716               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2717               	; if the quotient lies outside the range of a single-cell signed
 2718               	; integer.
 2719               	
 2720               	; [Code from DZX-Forth.]
 2721               	
 2722               	  ld l,c
 2723               	  ld h,b
 2724               	  pop bc
 2725               	  pop de
 2726               	  ex (sp),hl
 2727               	  ex de,hl
 2728               	s_m_slash_rem_.1:
 2729               	  call msm
 2730               	  jp msm.2
 2731               	
 2732               	; ----------------------------------------------
 2733               	  _code_header fm_slash_mod_,"FM/MOD"
 2734               	
 2735               	; doc{
 2736               	;
 2737               	; fm/mod  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "f-m-slash-mod"
 2738               	;
 2739               	; Floored division:
 2740               	;
 2741               	;   d1 = n3*n1+n2, n1>n2>=0 or 0>=n2>n1.
 2742               	;
GAS LISTING solo_forth.z80s 			page 51


 2743               	; Divide _d1_ by _n1_, giving the floored quotient _n3_ and
 2744               	; the remainder _n2_. Input and output stack arguments are
 2745               	; signed.
 2746               	;
 2747               	; }doc
 2748               	
 2749               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2750               	; if the quotient lies outside the range of a single-cell signed
 2751               	; integer.
 2752               	
 2753               	; [Code from DZX-Forth.]
 2754               	
 2755               	  ld l,c
 2756               	  ld h,b
 2757               	  pop bc
 2758               	  pop de
 2759               	  ex (sp),hl
 2760               	  ex de,hl
 2761               	fm_slash_mod.1:
 2762               	  call msm
 2763               	  ld a,d
 2764               	  or e
 2765               	  jp z,msm.2    ; skip if remainder = 0
 2766               	  dec hl    ; floor
 2767               	  push hl
 2768               	  ex de,hl
 2769               	  add hl,bc
 2770               	  ex de,hl
 2771               	  pop hl
 2772               	  jp msm.2
 2773               	
 2774               	.endif
 2775               	
 2776               	; ----------------------------------------------
 2777 0a50 520A      	  _code_header and_,"AND"
 2778               	
 2779 0a52 D1        	  pop de
 2780 0a53 E1        	  pop hl
 2781 0a54 7B        	  ld a,e
 2782 0a55 A5        	  and l
 2783 0a56 6F        	  ld l,a
 2784 0a57 7A        	  ld a,d
 2785 0a58 A4        	  and h
 2786 0a59 67        	  ld h,a
 2787 0a5a C35E 05   	  jp push_hl
 2788               	
 2789               	; ----------------------------------------------
 2790 0a5d 5F0A      	  _code_header or_,"OR"
 2791               	
 2792 0a5f D1        	  pop de
 2793 0a60 E1        	  pop hl
 2794 0a61 7B        	  ld a,e
 2795 0a62 B5        	  or l
 2796 0a63 6F        	  ld l,a
 2797 0a64 7A        	  ld a,d
 2798 0a65 B4        	  or h
 2799 0a66 67        	  ld h,a
GAS LISTING solo_forth.z80s 			page 52


 2800 0a67 C35E 05   	  jp push_hl
 2801               	
 2802               	; ----------------------------------------------
 2803 0a6a 6C0A      	  _code_header xor_,"XOR"
 2804               	
 2805 0a6c D1        	  pop de
 2806 0a6d E1        	  pop hl
 2807 0a6e 7B        	  ld a,e
 2808 0a6f AD        	  xor l
 2809 0a70 6F        	  ld l,a
 2810 0a71 7A        	  ld a,d
 2811 0a72 AC        	  xor h
 2812 0a73 67        	  ld h,a
 2813 0a74 C35E 05   	  jp push_hl
 2814               	
 2815               	; ----------------------------------------------
 2816 0a77 A00C      	  _constant_header np_,"NP"
 2817               	
 2818 0a79 2E00      	  dw names_pointer
 2819               	
 2820               	; ----------------------------------------------
 2821 0a7b A00C      	  _constant_header np0_,"NP0"
 2822               	
 2823               	  ; XXX OLD -- not used
 2824               	
 2825 0a7d 00C0      	  dw names_bank_address
 2826               	
 2827               	; ----------------------------------------------
 2828 0a7f 810A      	  _code_header np_fetch_,"NP@"
 2829               	
 2830 0a81 2A2E 00   	  ld hl,(names_pointer)
 2831 0a84 C35E 05   	  jp push_hl
 2832               	
 2833               	; ----------------------------------------------
 2834 0a87 890A      	  _code_header np_store_,"NP!"
 2835               	
 2836 0a89 E1        	  pop hl
 2837 0a8a 222E 00   	  ld (names_pointer),hl
 2838 0a8d DDE9      	  _jp_next
 2839               	
 2840               	; ----------------------------------------------
 2841               	
 2842 0a8f 650C      	  _colon_header comma_np_,",NP"
 2843               	
 2844               	; doc{
 2845               	;
 2846               	; ,np  ( x -- )
 2847               	;
 2848               	; Store _x_ into the next available names memory cell, advancing
 2849               	; the names pointer.
 2850               	;
 2851               	; Note: The names memory is supposed to be paged in.
 2852               	;
 2853               	; }doc
 2854               	
 2855 0a91 7F0A 490C 	  dw np_fetch_,store_,two_,np_,plus_store_
 2855      CD0C 770A 
GAS LISTING solo_forth.z80s 			page 53


 2855      F00B 
 2856 0a9b C00A      	  dw semicolon_s_
 2857               	
 2858               	; ----------------------------------------------
 2859 0a9d 9F0A      	  _code_header sp_fetch_,"SP@"
 2860               	
 2861 0a9f 2100 00   	  ld hl,0x0000
 2862 0aa2 39        	  add hl,sp
 2863 0aa3 C35E 05   	  jp push_hl
 2864               	
 2865               	; ----------------------------------------------
 2866 0aa6 A80A      	  _code_header sp_store_,"SP!"
 2867               	
 2868               	; doc{
 2869               	;
 2870               	; sp!  ( a -- )
 2871               	;
 2872               	; Store _a_ into the stack pointer.
 2873               	;
 2874               	; }doc
 2875               	
 2876 0aa8 E1        	  pop hl
 2877 0aa9 F9        	  ld sp,hl
 2878 0aaa DDE9      	  _jp_next
 2879               	
 2880               	; ----------------------------------------------
 2881 0aac A00C      	  _constant_header rp_,"RP"
 2882               	
 2883 0aae 1000      	  dw return_stack_pointer
 2884               	
 2885               	; ----------------------------------------------
 2886 0ab0 B20A      	  _code_header rp_fetch_,"RP@"
 2887               	
 2888 0ab2 2A10 00   	  ld hl,(return_stack_pointer)
 2889 0ab5 C35E 05   	  jp push_hl
 2890               	
 2891               	; ----------------------------------------------
 2892 0ab8 BA0A      	  _code_header rp_store_,"RP!"
 2893               	
 2894               	; doc{
 2895               	;
 2896               	; rp!  ( a -- )
 2897               	;
 2898               	; Store _a_ into the return stack pointer.
 2899               	;
 2900               	; }doc
 2901               	
 2902               	.if 0 ; XXX OLD
 2903               	  ld hl,(user_variables_pointer)
 2904               	  inc hl
 2905               	  inc hl ; hl=address of r0
 2906               	  ld a,(hl)
 2907               	  inc hl
 2908               	  ld h,(hl)
 2909               	  ld l,a
 2910               	.else
 2911 0aba E1        	  pop hl
GAS LISTING solo_forth.z80s 			page 54


 2912               	.endif
 2913 0abb 2210 00   	  ld (return_stack_pointer),hl
 2914 0abe DDE9      	  _jp_next
 2915               	
 2916               	; ----------------------------------------------
 2917               	.if 1 ; fig_exit?
 2918 0ac0 C20A      	  _code_header semicolon_s_,";S"
 2919               	.else
 2920               	  _code_header exit_,"EXIT"
 2921               	semicolon_s_ equ exit_
 2922               	.endif
 2923               	
 2924               	
 2925               	; doc{
 2926               	;
 2927               	; ;s  ( -- )  \ fig-Forth
 2928               	;
 2929               	; Return execution to the calling definition.  Unnest one level.
 2930               	;
 2931               	; It is used to stop interpretation of a screen. It is also the
 2932               	; run-time word compiled at the end of a colon-definition which
 2933               	; returns execution to the calling procedure.
 2934               	;
 2935               	; }doc
 2936               	
 2937               	; XXX TODO combine this `;s` with `exit`?
 2938               	
 2939 0ac2 2A10 00   	  ld hl,(return_stack_pointer)
 2940 0ac5 4E        	  ld c,(hl)
 2941 0ac6 23        	  inc hl
 2942 0ac7 46        	  ld b,(hl)
 2943 0ac8 23        	  inc hl
 2944 0ac9 2210 00   	  ld (return_stack_pointer),hl
 2945 0acc DDE9      	  _jp_next
 2946               	
 2947               	; ----------------------------------------------
 2948 0ace D00A      	  _code_header pick_,"PICK"
 2949               	
 2950 0ad0 E1        	  pop hl
 2951 0ad1 29        	  add hl,hl
 2952 0ad2 39        	  add hl,sp
 2953 0ad3 C31D 0C   	  jp fetch.hl
 2954               	
 2955               	; ----------------------------------------------
 2956 0ad6 100B      	  _code_alias_header unloop_,"UNLOOP",,two_r_drop_
 2957               	
 2958               	; doc{
 2959               	;
 2960               	; unloop  ( -- ) ( R: x1 x2 -- )  \ ANS Forth, C
 2961               	;
 2962               	; x1 = loop index
 2963               	; x2 = loop limit
 2964               	;
 2965               	; Discard the loop-control parameters for the current nesting
 2966               	; level. An `unloop` is required for each nesting level before
 2967               	; the definition may be exited with `exit`. An ambiguous
 2968               	; condition exists if the loop-control parameters are
GAS LISTING solo_forth.z80s 			page 55


 2969               	; unavailable.
 2970               	;
 2971               	; }doc
 2972               	
 2973               	; ----------------------------------------------
 2974 0ad8 DA0A      	  _code_header exhaust_,"EXHAUST"
 2975               	
 2976               	; doc{
 2977               	;
 2978               	; exhaust  ( -- ) ( R: n1 n2 -- n2 n2 )
 2979               	;
 2980               	; n1 = loop limit
 2981               	; n2 = loop index
 2982               	;
 2983               	; Force termination of a do-loop at the next opportunity by
 2984               	; setting the loop limit equal to the current value of the
 2985               	; index. The index itself remains unchanged, and execution
 2986               	; proceeds normally until `loop` or `+loop` is encountered.
 2987               	;
 2988               	; Note: This is the equivalent of fig-Forth's `leave`.
 2989               	;
 2990               	; }doc
 2991               	
 2992 0ada 2A10 00   	  ld hl,(return_stack_pointer)
 2993 0add 5E        	  ld e,(hl)
 2994 0ade 23        	  inc hl
 2995 0adf 56        	  ld d,(hl)
 2996 0ae0 23        	  inc hl
 2997 0ae1 73        	  ld (hl),e
 2998 0ae2 23        	  inc hl
 2999 0ae3 72        	  ld (hl),d
 3000 0ae4 DDE9      	  _jp_next
 3001               	
 3002               	; ----------------------------------------------
 3003 0ae6 E80A      	  _code_header question_exhaust_,"?EXHAUST"
 3004               	
 3005               	; doc{
 3006               	;
 3007               	; ?exhaust  ( f -- ) ( R: n1 n2 -- n1 n2 | n2 n2 )
 3008               	;
 3009               	; n1 = loop limit
 3010               	; n2 = loop index
 3011               	; 
 3012               	; If _f_ is not false, force termination of a do-loop at the
 3013               	; next opportunity by setting the loop limit equal to the
 3014               	; current value of the index. The index itself remains
 3015               	; unchanged, and execution proceeds normally until `loop` or
 3016               	; `+loop` is encountered.
 3017               	;
 3018               	; }doc
 3019               	
 3020 0ae8 E1        	  pop hl
 3021 0ae9 67        	  ld h,a
 3022 0aea B5        	  or l
 3023 0aeb C2DA 0A   	  jp nz,exhaust_pfa
 3024 0aee DDE9      	  _jp_next
 3025               	
GAS LISTING solo_forth.z80s 			page 56


 3026               	; ----------------------------------------------
 3027 0af0 F20A      	  _code_header to_r_,">R"
 3028               	
 3029               	; doc{
 3030               	;
 3031               	; >r  ( x -- ) ( R: -- x )
 3032               	;
 3033               	; }doc
 3034               	
 3035 0af2 D1        	  pop de
 3036 0af3 2A10 00   	  ld hl,(return_stack_pointer)
 3037 0af6 2B        	  dec hl
 3038 0af7 72        	  ld (hl),d
 3039 0af8 2B        	  dec hl
 3040 0af9 73        	  ld (hl),e
 3041 0afa 2210 00   	  ld (return_stack_pointer),hl
 3042 0afd DDE9      	  _jp_next
 3043               	
 3044               	; ----------------------------------------------
 3045 0aff 010B      	  _code_header from_r_,"R>"
 3046               	
 3047               	; doc{
 3048               	;
 3049               	; r>  ( -- x ) ( R: x -- )
 3050               	;
 3051               	; }doc
 3052               	
 3053 0b01 2A10 00   	  ld hl,(return_stack_pointer)
 3054 0b04 5E        	  ld e,(hl)
 3055 0b05 23        	  inc hl
 3056 0b06 56        	  ld d,(hl)
 3057 0b07 23        	  inc hl
 3058 0b08 2210 00   	  ld (return_stack_pointer),hl
 3059 0b0b D5        	  push de
 3060 0b0c DDE9      	  _jp_next
 3061               	
 3062               	; ----------------------------------------------
 3063 0b0e 100B      	  _code_header two_r_drop_,"2RDROP"
 3064               	
 3065               	; doc{
 3066               	;
 3067               	; 2rdrop  ( R: x1 x2 -- )
 3068               	;
 3069               	; }doc
 3070               	
 3071 0b10 2A10 00   	  ld hl,(return_stack_pointer)
 3072 0b13 1104 00   	  ld de,cell*2
 3073 0b16 19        	  add hl,de
 3074 0b17 2210 00   	  ld (return_stack_pointer),hl
 3075 0b1a DDE9      	  _jp_next
 3076               	
 3077               	; ----------------------------------------------
 3078 0b1c 1E0B      	  _code_header r_drop_,"RDROP"
 3079               	
 3080               	; doc{
 3081               	;
 3082               	; rdrop  ( R: x -- )
GAS LISTING solo_forth.z80s 			page 57


 3083               	;
 3084               	; }doc
 3085               	
 3086 0b1e 2A10 00   	  ld hl,(return_stack_pointer)
 3087 0b21 23        	  inc hl
 3088 0b22 23        	  inc hl
 3089 0b23 2210 00   	  ld (return_stack_pointer),hl
 3090 0b26 DDE9      	  _jp_next
 3091               	
 3092               	; ----------------------------------------------
 3093 0b28 2A0B      	  _code_header two_to_r_,"2>R"
 3094               	
 3095               	; doc{
 3096               	;
 3097               	; 2>r  ( -- x1 x2 ) ( R: x1 x2 -- )
 3098               	;
 3099               	; }doc
 3100               	
 3101 0b2a 2A10 00   	  ld hl,(return_stack_pointer)
 3102 0b2d 11FC FF   	  ld de,-cell*2
 3103 0b30 19        	  add hl,de
 3104 0b31 2210 00   	  ld (return_stack_pointer),hl
 3105 0b34 C33E 0C   	  jp two_store.into_hl_pointer
 3106               	
 3107               	; ----------------------------------------------
 3108 0b37 390B      	  _code_header two_from_r_,"2R>"
 3109               	
 3110               	; 2r>  ( -- x1 x2 ) ( R: x1 x2 -- )
 3111               	
 3112 0b39 2A10 00   	  ld hl,(return_stack_pointer)
 3113 0b3c E5        	  push hl
 3114 0b3d 1104 00   	  ld de,cell*2
 3115 0b40 19        	  add hl,de
 3116 0b41 2210 00   	  ld (return_stack_pointer),hl
 3117 0b44 C32E 0C   	  jp two_fetch_pfa
 3118               	
 3119               	; ----------------------------------------------
 3120 0b47 490B      	  _code_header two_r_fetch_,"2R@"
 3121               	
 3122 0b49 2A10 00   	  ld hl,(return_stack_pointer)
 3123 0b4c C32F 0C   	  jp two_fetch.hl
 3124               	
 3125               	; ----------------------------------------------
 3126 0b4f 510B      	  _code_header r_fetch_,"R@"
 3127               	
 3128 0b51 2A10 00   	  ld hl,(return_stack_pointer)
 3129 0b54 C31D 0C   	  jp fetch.hl
 3130               	
 3131               	; ----------------------------------------------
 3132               	  ; XXX FIXME as Error: confusion in formal parameters
 3133               	  ; because of the string, why?
 3134 0b57 590B      	  _code_header zero_equals_,"0="
 3135               	
 3136 0b59 E1        	  pop hl
 3137 0b5a 7D        	  ld a,l
 3138 0b5b B4        	  or h
 3139 0b5c CADB 0C   	  jp z,true_pfa
GAS LISTING solo_forth.z80s 			page 58


 3140 0b5f C3D3 0C   	  jp false_pfa
 3141               	
 3142               	; ----------------------------------------------
 3143 0b62 640B      	  _code_header zero_not_equals_,"0<>"
 3144               	
 3145 0b64 E1        	  pop hl
 3146 0b65 7D        	  ld a,l
 3147 0b66 B4        	  or h
 3148 0b67 CAD3 0C   	  jp z,false_pfa
 3149 0b6a C3DB 0C   	  jp true_pfa
 3150               	
 3151               	; ----------------------------------------------
 3152 0b6d 6F0B      	  _code_header zero_less_than_,"0<"
 3153               	
 3154 0b6f E1        	  pop hl
 3155               	zero_less_.hl: ; XXX entry not used yet
 3156               	  .if size_optimization
 3157               	    add hl,hl ; 11t, 1 byte
 3158               	  .else
 3159               	    ; [Idea from Ace Forth.]
 3160 0b70 CB14      	    rl h ; 8t, 2 bytes
 3161               	  .endif
 3162               	true_if_cy:
 3163 0b72 DADB 0C   	  jp c,true_pfa
 3164 0b75 C3D3 0C   	  jp false_pfa
 3165               	
 3166               	; ----------------------------------------------
 3167 0b78 7A0B      	  _code_header zero_greater_than_,"0>"
 3168               	
 3169               	  ; [Code from DZX-Forth.]
 3170               	
 3171 0b7a D1        	  pop de
 3172 0b7b 2100 00   	  ld hl,0
 3173 0b7e C3FA 0D   	  jp is_de_less_than_hl
 3174               	
 3175               	; ----------------------------------------------
 3176 0b81 830B      	  _code_header plus_,"+"
 3177               	
 3178 0b83 D1        	  pop de
 3179 0b84 E1        	  pop hl
 3180 0b85 19        	  add hl,de
 3181 0b86 C35E 05   	  jp push_hl
 3182               	
 3183               	; ----------------------------------------------
 3184 0b89 8B0B      	  _code_header d_plus_,"D+"
 3185               	
 3186               	; XXX TODO move to the library.
 3187               	
 3188               	; [Code from fig-Forth 1.1g.]
 3189               	   
 3190               	              ;                           t  B
 3191               	              ;                           -- --
 3192 0b8b D9        	  exx         ; save ip                   04 01
 3193 0b8c C1        	  pop bc      ; (bc)<--d2h                10 01
 3194 0b8d E1        	  pop hl      ; (hl)<--d2l                10 01
 3195 0b8e F1        	  pop af      ; (af)<--d1h                10 01
 3196 0b8f D1        	  pop de      ; (de)<--d1l                10 01
GAS LISTING solo_forth.z80s 			page 59


 3197 0b90 F5        	  push  af    ; (s1)<--d1h                11 01
 3198 0b91 19        	  add hl,de   ; (hl)<--d2l+d1l=d3l        11 01
 3199 0b92 EB        	  ex  de,hl   ; (de)<--d3l                04 01
 3200 0b93 E1        	  pop hl      ; (hl)<--d1h                10 01
 3201 0b94 ED4A      	  adc hl,bc   ; (hl)<--d1h+d2h+carry=d3h  15 02
 3202 0b96 D5        	  push  de    ; (s2)<--d3l                11 01
 3203 0b97 E5        	  push  hl    ; (s1)<--d3h                11 01
 3204 0b98 D9        	  exx         ; restore ip                04 01
 3205 0b99 DDE9      	  _jp_next    ;                           08 02
 3206               	              ;                          --- --
 3207               	              ;                          134 15 TOTALS
 3208               	
 3209               	; ----------------------------------------------
 3210 0b9b 9D0B      	  _code_header negate_,"NEGATE"
 3211               	
 3212 0b9d D1        	  pop de
 3213 0b9e 2100 00   	  ld hl,0x0000
 3214 0ba1 A7        	  and a
 3215 0ba2 ED52      	  sbc hl,de
 3216 0ba4 C35E 05   	  jp push_hl
 3217               	
 3218               	; ----------------------------------------------
 3219 0ba7 A90B      	  _code_header dnegate_,"DNEGATE"
 3220               	
 3221               	  ; XXX TODO move to the disk
 3222               	
 3223 0ba9 E1        	  pop hl
 3224 0baa D1        	  pop de
 3225 0bab 97        	  sub a
 3226 0bac 93        	  sub e
 3227 0bad 5F        	  ld e,a
 3228 0bae 3E00      	  ld a,0x00
 3229 0bb0 9A        	  sbc a,d
 3230 0bb1 57        	  ld d,a
 3231 0bb2 3E00      	  ld a,0x00
 3232 0bb4 9D        	  sbc a,l
 3233 0bb5 6F        	  ld l,a
 3234 0bb6 3E00      	  ld a,0x00
 3235 0bb8 9C        	  sbc a,h
 3236 0bb9 67        	  ld h,a
 3237 0bba C35D 05   	  jp push_hlde
 3238               	
 3239               	; ----------------------------------------------
 3240 0bbd BF0B      	  _code_header nip_,"NIP"
 3241               	
 3242 0bbf E1        	  pop hl
 3243 0bc0 D1        	  pop de
 3244 0bc1 C35E 05   	  jp push_hl
 3245               	
 3246               	; ----------------------------------------------
 3247 0bc4 C60B      	  _code_header tuck_,"TUCK"
 3248               	
 3249 0bc6 E1        	  pop hl
 3250 0bc7 D1        	  pop de
 3251 0bc8 E5        	  push hl
 3252 0bc9 C35D 05   	  jp push_hlde
 3253               	
GAS LISTING solo_forth.z80s 			page 60


 3254               	; ----------------------------------------------
 3255 0bcc CE0B      	  _code_header over_,"OVER"
 3256               	
 3257 0bce D1        	  pop de
 3258 0bcf E1        	  pop hl
 3259 0bd0 E5        	  push hl
 3260 0bd1 C35D 05   	  jp push_hlde
 3261               	
 3262               	; ----------------------------------------------
 3263 0bd4 D60B      	  _code_header drop_,"DROP"
 3264               	
 3265 0bd6 E1        	  pop hl
 3266 0bd7 DDE9      	  _jp_next
 3267               	
 3268               	; ----------------------------------------------
 3269 0bd9 DB0B      	  _code_header swap_,"SWAP"
 3270               	
 3271 0bdb E1        	  pop hl
 3272 0bdc E3        	  ex (sp),hl
 3273 0bdd C35E 05   	  jp push_hl
 3274               	
 3275               	; ----------------------------------------------
 3276 0be0 E20B      	  _code_header dup_,"DUP"
 3277               	
 3278 0be2 E1        	  pop hl
 3279 0be3 E5        	  push hl
 3280 0be4 C35E 05   	  jp push_hl
 3281               	
 3282               	; ----------------------------------------------
 3283 0be7 E90B      	  _code_header two_dup_,"2DUP"
 3284               	
 3285 0be9 E1        	  pop hl
 3286 0bea D1        	  pop de
 3287 0beb D5        	  push de
 3288 0bec E5        	  push hl
 3289 0bed C35D 05   	  jp push_hlde
 3290               	
 3291               	; ----------------------------------------------
 3292 0bf0 F20B      	  _code_header plus_store_,"+!"
 3293               	
 3294 0bf2 E1        	  pop hl ; variable address
 3295 0bf3 D1        	  pop de ; number
 3296 0bf4 7E        	  ld a,(hl)
 3297 0bf5 83        	  add a,e
 3298 0bf6 77        	  ld (hl),a
 3299 0bf7 23        	  inc hl
 3300 0bf8 7E        	  ld a,(hl)
 3301 0bf9 8A        	  adc a,d
 3302 0bfa 77        	  ld (hl),a
 3303 0bfb DDE9      	  _jp_next
 3304               	
 3305               	; ----------------------------------------------
 3306 0bfd FF0B      	  _code_header off_,"OFF"
 3307               	
 3308 0bff E1        	  pop hl
 3309 0c00 3600      	  ld (hl),0
 3310 0c02 23        	  inc hl
GAS LISTING solo_forth.z80s 			page 61


 3311 0c03 3600      	  ld (hl),0
 3312 0c05 DDE9      	  _jp_next
 3313               	
 3314               	; ----------------------------------------------
 3315 0c07 090C      	  _code_header on_,"ON"
 3316               	
 3317 0c09 E1        	  pop hl
 3318               	.if true==1
 3319 0c0a 3601      	  ld (hl),1
 3320 0c0c 23        	  inc hl
 3321 0c0d 3600      	  ld (hl),0
 3322               	.else
 3323               	  ld (hl),0xFF
 3324               	  inc hl
 3325               	  ld (hl),0xFF
 3326               	.endif
 3327 0c0f DDE9      	  _jp_next
 3328               	
 3329               	; ----------------------------------------------
 3330 0c11 130C      	  _code_header toggle_,"TOGGLE"
 3331               	
 3332               	; doc{
 3333               	;
 3334               	; toggle  ( a b -- )  \ fig-Forth
 3335               	;
 3336               	; Complement the contents of _a_ by the bit pattern _b_.
 3337               	;
 3338               	; }doc
 3339               	
 3340 0c13 D1        	  pop de ; e = bit pattern
 3341 0c14 E1        	  pop hl ; address
 3342 0c15 7E        	  ld a,(hl)
 3343 0c16 AB        	  xor e
 3344 0c17 77        	  ld (hl),a
 3345 0c18 DDE9      	  _jp_next
 3346               	
 3347               	; ----------------------------------------------
 3348 0c1a 1C0C      	  _code_header fetch_,"@"
 3349               	
 3350 0c1c E1        	  pop hl
 3351               	fetch.hl:
 3352 0c1d 5E        	  ld e,(hl)
 3353 0c1e 23        	  inc hl
 3354 0c1f 56        	  ld d,(hl)
 3355 0c20 D5        	  push de
 3356 0c21 DDE9      	  _jp_next
 3357               	
 3358               	; ----------------------------------------------
 3359 0c23 250C      	  _code_header c_fetch_,"C@"
 3360               	
 3361 0c25 E1        	  pop hl
 3362 0c26 6E        	  ld l,(hl)
 3363 0c27 2600      	  ld h,0x00
 3364 0c29 C35E 05   	  jp push_hl
 3365               	
 3366               	; ----------------------------------------------
 3367 0c2c 2E0C      	  _code_header two_fetch_,"2@"
GAS LISTING solo_forth.z80s 			page 62


 3368               	
 3369 0c2e E1        	  pop hl ; address
 3370               	two_fetch.hl:
 3371 0c2f 5E        	  ld e,(hl)     ; 07t  1
 3372 0c30 23        	  inc hl        ; 06t  1
 3373 0c31 56        	  ld d,(hl)     ; 07t  1 ; de = low part
 3374 0c32 23        	  inc hl        ; 06t  1
 3375 0c33 7E        	  ld a,(hl)     ; 07t  1
 3376 0c34 23        	  inc hl        ; 06t  1
 3377 0c35 66        	  ld h,(hl)     ; 07t  1
 3378 0c36 6F        	  ld l,a        ; 04t  1 ; hl = high part
 3379 0c37 EB        	  ex de,hl      ; 04t  1
 3380 0c38 C35D 05   	  jp push_hlde ; 10t  3
 3381               	                ; 11t  0 push de
 3382               	                ; 11t  0 push hl
 3383               	                ; 86t 12 TOTAL
 3384               	
 3385               	; ----------------------------------------------
 3386 0c3b 3D0C      	  _code_header two_store_,"2!"
 3387               	
 3388 0c3d E1        	  pop hl
 3389               	two_store.into_hl_pointer:
 3390 0c3e D1        	  pop de
 3391 0c3f 73        	  ld (hl),e
 3392 0c40 23        	  inc hl
 3393 0c41 72        	  ld (hl),d
 3394 0c42 23        	  inc hl
 3395               	  .if size_optimization
 3396               	    jp store.into_hl_pointer
 3397               	  .else
 3398 0c43 D1        	    pop de
 3399 0c44 73        	    ld (hl),e
 3400 0c45 23        	    inc hl
 3401 0c46 72        	    ld (hl),d
 3402 0c47 DDE9      	    _jp_next
 3403               	  .endif
 3404               	
 3405               	; ----------------------------------------------
 3406 0c49 4B0C      	  _code_header store_,"!"
 3407               	
 3408 0c4b E1        	  pop hl
 3409               	store.into_hl_pointer:
 3410 0c4c D1        	  pop de
 3411               	store.de_into_hl_pointer:
 3412 0c4d 73        	  ld (hl),e
 3413 0c4e 23        	  inc hl
 3414 0c4f 72        	  ld (hl),d
 3415 0c50 DDE9      	  _jp_next
 3416               	
 3417               	; ----------------------------------------------
 3418 0c52 540C      	  _code_header c_store_,"C!"
 3419               	
 3420 0c54 E1        	  pop hl
 3421 0c55 D1        	  pop de
 3422 0c56 73        	  ld (hl),e
 3423 0c57 DDE9      	  _jp_next
 3424               	
GAS LISTING solo_forth.z80s 			page 63


 3425               	; ----------------------------------------------
 3426 0c59 650C      	  _colon_header colon_,":",immediate
 3427               	
 3428 0c5b 320F      	  dw question_exec_
 3429 0c5d 030F      	  dw store_csp_
 3430 0c5f C513 980F 	  dw header_,right_bracket_
 3431 0c63 C90F      	  dw paren_semicolon_code_
 3432               	do_colon:
 3433 0c65 2A10 00   	  ld hl,(return_stack_pointer)
 3434 0c68 2B        	  dec hl
 3435 0c69 70        	  ld (hl),b
 3436 0c6a 2B        	  dec hl
 3437 0c6b 71        	  ld (hl),c
 3438 0c6c 2210 00   	  ld (return_stack_pointer),hl ; save the updated IP
 3439 0c6f 13        	  inc de ; de=pfa
 3440 0c70 4B        	  ld c,e
 3441 0c71 42        	  ld b,d ; bc=pfa
 3442               	do_colon.end: ; XXX TMP for debugging
 3443 0c72 DDE9      	  _jp_next
 3444               	
 3445               	; ----------------------------------------------
 3446 0c74 650C      	  _colon_header noname_,":NONAME",immediate
 3447               	
 3448               	  ; [Code from the Afera library.]
 3449               	
 3450               	  ; XXX TODO move to the disk? problem: do_colon
 3451               	
 3452 0c76 320F      	  dw question_exec_
 3453 0c78 A00F      	  dw smudge_  ; deactivate the effect of the next `smudge` in `;`
 3454 0c7a 900D      	  dw here_ ; cfa
 3455 0c7c 030F      	  dw store_csp_
 3456 0c7e 8D06 650C 	  dw lit_,do_colon,comma_ ; create the code field
 3456      B20D 
 3457 0c84 980F      	  dw right_bracket_
 3458 0c86 C00A      	  dw semicolon_s_
 3459               	
 3460               	; ----------------------------------------------
 3461 0c88 650C      	  _colon_header semicolon_,";",immediate
 3462               	
 3463 0c8a 480F      	  dw question_csp_
 3464 0c8c 680F C00A 	  dw compile_,semicolon_s_
 3465 0c90 A00F      	  dw smudge_
 3466 0c92 900F      	  dw left_bracket_
 3467 0c94 C00A      	  dw semicolon_s_
 3468               	
 3469               	; ----------------------------------------------
 3470               	  _header noop_,"NOOP"
 3471               	
 3472               	; doc{
 3473               	;
 3474               	; noop  ( -- )
 3475               	;
 3476               	; }doc
 3477               	
 3478 0c96 5F05      	  dw next ; code field
 3479               	
 3480               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 64


 3481 0c98 650C      	  _colon_header constant_,"CONSTANT"
 3482               	
 3483 0c9a 1214 B20D 	  dw create_,comma_
 3484 0c9e C90F      	  dw paren_semicolon_code_
 3485               	do_constant:
 3486 0ca0 13        	  inc de    ; de=pfa
 3487 0ca1 EB        	  ex de,hl  ; hl=pfa
 3488 0ca2 C31D 0C   	  jp fetch.hl
 3489               	
 3490               	; ----------------------------------------------
 3491 0ca5 650C      	  _colon_header variable_,"VARIABLE"
 3492               	
 3493               	; doc{
 3494               	;
 3495               	; variable ( "name" -- )  \ ANS Forth
 3496               	;
 3497               	; Parse _name_.  Create a definition for _name_ with the
 3498               	; execution semantics defined below. Reserve one cell of data
 3499               	; space.
 3500               	;
 3501               	;    _name_ is referred to as a variable.
 3502               	;
 3503               	;          name Execution: ( -- a )
 3504               	;
 3505               	;    _a_ is the address of the reserved cell. A program is
 3506               	;    responsible for initializing the contents of the reserved
 3507               	;    cell.
 3508               	;
 3509               	; }doc
 3510               	
 3511 0ca7 1214 820D 	  dw create_,cell_,allot_
 3511      980D 
 3512 0cad C00A      	  dw semicolon_s_
 3513               	
 3514               	; ----------------------------------------------
 3515 0caf 650C      	  _colon_header user_,"USER"
 3516               	
 3517               	  ; XXX TODO -- Use only one byte for storage,
 3518               	  ; but defining `cconstant` only for this does not seem a good idea.
 3519               	
 3520 0cb1 980C      	  dw constant_
 3521 0cb3 C90F      	  dw paren_semicolon_code_
 3522               	do_user:
 3523               	;  _z80_border_wait 5 ; XXX INFORMER
 3524 0cb5 13        	  inc de      ; de=pfa
 3525 0cb6 EB        	  ex de,hl
 3526 0cb7 5E        	  ld e,(hl)
 3527 0cb8 1600      	  ld d,0x00   ; de = index of the user variable
 3528 0cba 2A0E 00   	  ld hl,(user_variables_pointer)
 3529 0cbd 19        	  add hl,de   ; hl= address of the user variable
 3530               	;  _z80_border_wait 6 ; XXX INFORMER
 3531 0cbe C35E 05   	  jp push_hl
 3532               	
 3533               	; ----------------------------------------------
 3534 0cc1 A00C      	  _constant_header msg_scr_,"MSG-SCR"
 3535               	
 3536               	; doc{
GAS LISTING solo_forth.z80s 			page 65


 3537               	;
 3538               	; msg-scr  ( -- n )
 3539               	;
 3540               	; Constant: Screen where the error messages start.
 3541               	;
 3542               	; }doc
 3543               	
 3544               	; Idea taken from lina ciforth.
 3545               	
 3546 0cc3 0400      	  dw 0x0004
 3547               	
 3548               	; ----------------------------------------------
 3549 0cc5 A00C      	  _constant_header zero_,"0"
 3550               	
 3551 0cc7 0000      	  dw 0x0000
 3552               	
 3553               	; ----------------------------------------------
 3554 0cc9 A00C      	  _constant_header one_,"1"
 3555               	
 3556 0ccb 0100      	  dw 0x0001
 3557               	
 3558               	; ----------------------------------------------
 3559 0ccd A00C      	  _constant_header two_,"2"
 3560               	
 3561 0ccf 0200      	  dw 0x0002
 3562               	
 3563               	; ----------------------------------------------
 3564 0cd1 D30C      	  _code_header false_,"FALSE"
 3565               	
 3566               	; doc{
 3567               	;
 3568               	; false  ( -- f )
 3569               	;
 3570               	; }doc
 3571               	
 3572 0cd3 2100 00   	  ld hl,false
 3573 0cd6 C35E 05   	  jp push_hl
 3574               	
 3575               	; ----------------------------------------------
 3576 0cd9 DB0C      	  _code_header true_,"TRUE"
 3577               	
 3578               	; doc{
 3579               	;
 3580               	; true  ( -- t )
 3581               	;
 3582               	; }doc
 3583               	
 3584 0cdb 2101 00   	  ld hl,true
 3585 0cde C35E 05   	  jp push_hl
 3586               	
 3587               	; ----------------------------------------------
 3588 0ce1 A00C      	  _constant_header b_l_,"BL"
 3589               	
 3590               	; doc{
 3591               	;
 3592               	; bl  ( -- n )
 3593               	;
GAS LISTING solo_forth.z80s 			page 66


 3594               	; }doc
 3595               	
 3596 0ce3 2000      	  dw space_char
 3597               	
 3598               	; ----------------------------------------------
 3599 0ce5 A00C      	  _constant_header c_slash_l_,"C/L"
 3600               	
 3601 0ce7 4000      	  dw characters_per_line
 3602               	
 3603               	; ----------------------------------------------
 3604 0ce9 A00C      	  _constant_header l_slash_scr_,"L/SCR"
 3605               	
 3606 0ceb 1000      	  dw lines_per_screen
 3607               	
 3608               	; ----------------------------------------------
 3609 0ced A00C      	  _constant_header disk_buffer_,"DISK-BUFFER"
 3610               	
 3611 0cef 0703      	  dw disk_buffer
 3612               	
 3613               	; ----------------------------------------------
 3614 0cf1 A00C      	  _constant_header b_slash_buf_,"B/BUF"
 3615               	
 3616 0cf3 0002      	  dw data_bytes_per_buffer
 3617               	
 3618               	; ----------------------------------------------
 3619 0cf5 A00C      	  _constant_header b_slash_scr_,"B/SCR"
 3620               	
 3621 0cf7 0200      	  dw blocks_per_screen
 3622               	
 3623               	; ----------------------------------------------
 3624 0cf9 A00C      	  _constant_header scr_slash_disk_,"SCR/DISK"
 3625               	
 3626 0cfb 0C03      	  dw screens_per_disk
 3627               	
 3628               	; ----------------------------------------------
 3629 0cfd A00C      	  _constant_header hash_vocs_,"#VOCS"
 3630               	
 3631 0cff 0800      	  dw max_search_order
 3632               	
 3633               	; ----------------------------------------------
 3634 0d01 650C      	  _colon_header plus_origin_,"+ORIGIN"
 3635               	
 3636               	; doc{
 3637               	;
 3638               	; +origin  ( n -- a )  \ fig-Forth
 3639               	;
 3640               	; Leave the memory address relative by _n_ to the origin
 3641               	; parameter area.  _n_ is the minimum address unit, either byte
 3642               	; or word.  This definition is used to access or modify the
 3643               	; boot-up parameters at the origin area.
 3644               	;
 3645               	; }doc
 3646               	
 3647 0d03 8D06 005E 	  dw lit_,origin,plus_
 3647      810B 
 3648 0d09 C00A      	  dw semicolon_s_
 3649               	
GAS LISTING solo_forth.z80s 			page 67


 3650               	; ----------------------------------------------
 3651 0d0b B50C      	  _user_variable_header sp0_,"SP0"
 3652               	
 3653 0d0d 00        	  db 0x00
 3654               	
 3655               	; ----------------------------------------------
 3656 0d0e B50C      	  _user_variable_header rp0_,"RP0"
 3657               	
 3658 0d10 02        	  db 0x02
 3659               	
 3660               	; ----------------------------------------------
 3661 0d11 B50C      	  _user_variable_header width_,"WIDTH"
 3662               	
 3663               	  ; XXX TODO normal variable
 3664               	
 3665 0d13 06        	  db 0x06
 3666               	
 3667               	; ----------------------------------------------
 3668 0d14 B50C      	  _user_variable_header warning_,"WARNING"
 3669               	
 3670 0d16 08        	  db 0x08
 3671               	
 3672               	; ----------------------------------------------
 3673 0d17 B50C      	  _user_variable_header dp_,"DP"
 3674               	
 3675               	  ; XXX TODO why this is a user variable?
 3676               	  ; XXX TODO normal variable
 3677               	
 3678 0d19 0C        	  db 0x0C
 3679               	
 3680               	; ----------------------------------------------
 3681 0d1a 1A14      	  _variable_header voc_link_,"VOC-LINK"
 3682               	
 3683 0d1c 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 3684               	
 3685               	; ----------------------------------------------
 3686 0d1e B50C      	  _user_variable_header blk_,"BLK"
 3687               	
 3688               	  ; XXX TODO normal variable
 3689               	
 3690 0d20 10        	  db 0x10
 3691               	
 3692               	; ----------------------------------------------
 3693 0d21 B50C      	  _user_variable_header to_in_,">IN"
 3694               	
 3695               	  ; XXX TODO normal variable
 3696               	
 3697 0d23 12        	  db 0x12
 3698               	
 3699               	; ----------------------------------------------
 3700 0d24 B50C      	  _user_variable_header out_,"OUT"
 3701               	
 3702               	  ; XXX TODO In Forth 83 it's a user variable too, but it's called `#out`.
 3703               	  ; XXX TODO rename to `#emitted`
 3704 0d26 14        	  db 0x14
 3705               	
 3706               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 68


 3707 0d27 B50C      	  _user_variable_header scr_,'SCR' ; XXX OLD -- used by `list`
 3708               	
 3709 0d29 16        	  db 0x16
 3710               	
 3711               	; ----------------------------------------------
 3712 0d2a B50C      	  _user_variable_header context_,"CONTEXT"
 3713               	
 3714 0d2c 2A        	  db 0x2A
 3715               	
 3716               	; ----------------------------------------------
 3717 0d2d B50C      	  _user_variable_header current_,"CURRENT"
 3718               	
 3719 0d2f 1C        	  db 0x1C
 3720               	
 3721               	; ----------------------------------------------
 3722 0d30 B50C      	  _user_variable_header state_,"STATE"
 3723               	
 3724 0d32 1E        	  db 0x1E
 3725               	
 3726               	; ----------------------------------------------
 3727 0d33 B50C      	  _user_variable_header base_,"BASE"
 3728               	
 3729 0d35 20        	  db 0x20
 3730               	
 3731               	; ----------------------------------------------
 3732 0d36 B50C      	  _user_variable_header dpl_,"DPL"
 3733               	
 3734 0d38 22        	  db 0x22
 3735               	
 3736               	; ----------------------------------------------
 3737 0d39 B50C      	  _user_variable_header fld_,"FLD"
 3738               	
 3739 0d3b 24        	  db 0x24
 3740               	
 3741               	; ----------------------------------------------
 3742 0d3c B50C      	  _user_variable_header csp_,"CSP"
 3743               	
 3744 0d3e 26        	  db 0x26
 3745               	
 3746               	; ----------------------------------------------
 3747 0d3f B50C      	  _user_variable_header r_hash_,"R#"
 3748               	
 3749               	  ; XXX OLD
 3750 0d41 28        	  db 0x28
 3751               	
 3752               	; ----------------------------------------------
 3753 0d42 B50C      	  _user_variable_header hld_,"HLD"
 3754               	
 3755 0d44 1A        	  db 0x1A
 3756               	
 3757               	; ----------------------------------------------
 3758 0d45 A00C      	  _constant_header tib_,"TIB"
 3759               	
 3760               	; doc{
 3761               	;
 3762               	; tib  ( -- ca )  \ ANS-Forth
 3763               	;
GAS LISTING solo_forth.z80s 			page 69


 3764               	; Address of the terminal input buffer.
 3765               	;
 3766               	; }doc
 3767               	
 3768 0d47 1402      	  dw terminal_input_buffer
 3769               	
 3770               	; ----------------------------------------------
 3771 0d49 1A14      	  _variable_header number_tib_,"#TIB"
 3772               	
 3773 0d4b 5000      	  dw bytes_per_terminal_input_buffer
 3774               	
 3775               	; ----------------------------------------------
 3776 0d4d 650C      	  _colon_header recurse_,"RECURSE",immediate
 3777               	
 3778               	; doc{
 3779               	;
 3780               	; recurse  ( -- )  \ ANS Forth
 3781               	;
 3782               	; }doc
 3783               	
 3784 0d4f 460E E30E 	  dw latest_,nfa_to_cfa_,compile_comma_
 3784      BE0D 
 3785 0d55 C00A      	  dw semicolon_s_
 3786               	
 3787               	; ----------------------------------------------
 3788 0d57 590D      	  _code_header one_plus_,"1+"
 3789               	
 3790 0d59 E1        	  pop hl
 3791 0d5a 23        	  inc hl
 3792 0d5b C35E 05   	  jp push_hl
 3793               	
 3794               	; ----------------------------------------------
 3795 0d5e 600D      	  _code_header two_plus_,"2+"
 3796               	
 3797 0d60 E1        	  pop hl
 3798 0d61 23        	  inc hl
 3799 0d62 23        	  inc hl
 3800 0d63 C35E 05   	  jp push_hl
 3801               	
 3802               	; ----------------------------------------------
 3803 0d66 730D      	  _code_alias_header cell_minus_,"CELL-",,two_minus_
 3804               	
 3805               	; ----------------------------------------------
 3806 0d68 600D      	  _code_alias_header cell_plus_,"CELL+",,two_plus_
 3807               	
 3808               	; ----------------------------------------------
 3809 0d6a 6C0D      	  _code_header one_minus_,"1-"
 3810               	
 3811 0d6c E1        	  pop hl
 3812 0d6d 2B        	  dec hl
 3813 0d6e C35E 05   	  jp push_hl
 3814               	
 3815               	; ----------------------------------------------
 3816 0d71 730D      	  _code_header two_minus_,"2-"
 3817               	
 3818 0d73 E1        	  pop hl
 3819 0d74 2B        	  dec hl
GAS LISTING solo_forth.z80s 			page 70


 3820 0d75 2B        	  dec hl
 3821 0d76 C35E 05   	  jp push_hl
 3822               	
 3823               	; ----------------------------------------------
 3824 0d79 7B0D      	  _code_header two_star_,"2*"
 3825               	
 3826               	; doc{
 3827               	;
 3828               	; 2*  ( x1 -- x2 )  \ ANS Forth
 3829               	;
 3830               	; _x2_ is the result of shifting _x1_ one bit toward the
 3831               	; most-significant bit, filling the vacated least-significant
 3832               	; bit with zero.
 3833               	;
 3834               	; This is the same as `1 lshift`.
 3835               	;
 3836               	; }doc
 3837               	
 3838               	  ; [Code from DZX-Forth. Documentation partly based on lina
 3839               	  ; ciforth.]
 3840               	
 3841 0d7b E1        	  pop hl
 3842 0d7c 29        	  add hl,hl
 3843 0d7d C35E 05   	  jp push_hl
 3844               	
 3845               	; ----------------------------------------------
 3846 0d80 7B0D      	  _code_alias_header cells_,"CELLS",,two_star_
 3847               	
 3848               	; ----------------------------------------------
 3849 0d82 A00C      	  _constant_header cell_,"CELL"
 3850               	
 3851 0d84 0200      	  dw 0x0002
 3852               	
 3853               	; ----------------------------------------------
 3854 0d86 880D      	  _code_header two_slash_,"2/"
 3855               	
 3856               	; doc{
 3857               	;
 3858               	; 2/  ( x1 -- x2 )  \ ANS Forth
 3859               	;
 3860               	; _x2_ is the result of shifting _x1_ one bit toward the
 3861               	; least-significant bit, leaving the most-significant bit
 3862               	; unchanged.
 3863               	;
 3864               	; This is the same as `s>d 2 fm/mod swap drop`. It is not the same
 3865               	; as `2 /`, nor is it the same as `1 rshift`.
 3866               	;
 3867               	; }doc
 3868               	
 3869               	  ; [Code from Spectrum Forth-83. Documentation partly based on lina
 3870               	  ; ciforth.]
 3871               	
 3872 0d88 E1        	  pop hl
 3873 0d89 CB2C      	  sra h
 3874 0d8b CB1D      	  rr l
 3875 0d8d C35E 05   	  jp push_hl
 3876               	
GAS LISTING solo_forth.z80s 			page 71


 3877               	; ----------------------------------------------
 3878 0d90 650C      	  _colon_header here_,"HERE"
 3879               	
 3880 0d92 170D 1A0C 	  dw dp_,fetch_
 3881 0d96 C00A      	  dw semicolon_s_
 3882               	
 3883               	; ----------------------------------------------
 3884 0d98 650C      	  _colon_header allot_,"ALLOT"
 3885               	
 3886 0d9a 170D F00B 	  dw dp_,plus_store_
 3887 0d9e C00A      	  dw semicolon_s_
 3888               	
 3889               	; ----------------------------------------------
 3890 0da0 650C      	  _colon_header s_comma_,"s,"
 3891               	
 3892               	; doc{
 3893               	; s,  ( ca len -- )
 3894               	; }doc
 3895               	
 3896 0da2 E00B C60D 	  dw dup_,c_comma_,tuck_,here_,swap_,cmove_,allot_
 3896      C40B 900D 
 3896      D90B E609 
 3896      980D 
 3897 0db0 C00A      	  dw semicolon_s_
 3898               	
 3899               	; ----------------------------------------------
 3900 0db2 650C      	  _colon_header comma_,","
 3901               	
 3902 0db4 900D 490C 	  dw here_,store_,two_,allot_
 3902      CD0C 980D 
 3903 0dbc C00A      	  dw semicolon_s_
 3904               	
 3905               	; ----------------------------------------------
 3906 0dbe 650C      	  _colon_header compile_comma_,"COMPILE,"
 3907               	
 3908               	; doc{
 3909               	;
 3910               	; compile,  ( cfa -- )
 3911               	;
 3912               	; }doc
 3913               	
 3914 0dc0 250F B20D 	  dw question_comp_,comma_
 3915 0dc4 C00A      	  dw semicolon_s_
 3916               	
 3917               	; ----------------------------------------------
 3918 0dc6 650C      	  _colon_header c_comma_,"C,"
 3919               	
 3920 0dc8 900D 520C 	  dw here_,c_store_,one_,allot_
 3920      C90C 980D 
 3921 0dd0 C00A      	  dw semicolon_s_
 3922               	
 3923               	; ----------------------------------------------
 3924 0dd2 D40D      	  _code_header minus_,"-"
 3925               	
 3926 0dd4 D1        	  pop de
 3927 0dd5 E1        	  pop hl
 3928 0dd6 A7        	  and a
GAS LISTING solo_forth.z80s 			page 72


 3929 0dd7 ED52      	  sbc hl,de
 3930 0dd9 C35E 05   	  jp push_hl
 3931               	
 3932               	; ----------------------------------------------
 3933 0ddc DE0D      	  _code_header not_equals_,"<>"
 3934               	
 3935 0dde D1        	  pop de
 3936 0ddf E1        	  pop hl
 3937 0de0 CD0C 05   	  call compare_de_hl_unsigned
 3938               	false_if_z: ; XXX entry not used yet
 3939 0de3 CAD3 0C   	  jp z,false_pfa
 3940 0de6 C3DB 0C   	  jp true_pfa
 3941               	
 3942               	; ----------------------------------------------
 3943 0de9 EB0D      	  _code_header equals_,"="
 3944               	
 3945 0deb D1        	  pop de
 3946 0dec E1        	  pop hl
 3947 0ded CD0C 05   	  call compare_de_hl_unsigned
 3948               	true_if_z: ; XXX entry not used yet
 3949 0df0 CADB 0C   	  jp z,true_pfa
 3950 0df3 C3D3 0C   	  jp false_pfa
 3951               	
 3952               	; ----------------------------------------------
 3953 0df6 F80D      	  _code_header less_than_,"<"
 3954               	
 3955 0df8 D1        	  pop de
 3956 0df9 E1        	  pop hl
 3957               	is_de_less_than_hl:
 3958 0dfa CD12 05   	  call compare_de_hl_signed
 3959               	  .if size_optimization
 3960               	    jp true_if_cy
 3961               	  .else
 3962 0dfd DADB 0C   	    jp c,true_pfa
 3963 0e00 C3D3 0C   	    jp false_pfa
 3964               	  .endif
 3965               	
 3966               	; ----------------------------------------------
 3967 0e03 050E      	  _code_header u_greater_than_,"U>"
 3968               	
 3969 0e05 E1        	  pop hl
 3970               	u_greater_than.hl:
 3971 0e06 D1        	  pop de
 3972 0e07 C30E 0E   	  jp u_less_than.de_hl
 3973               	
 3974               	; ----------------------------------------------
 3975 0e0a 0C0E      	  _code_header u_less_than_,"U<"
 3976               	
 3977 0e0c D1        	  pop de
 3978 0e0d E1        	  pop hl
 3979               	u_less_than.de_hl:
 3980 0e0e CD0C 05   	  call compare_de_hl_unsigned
 3981               	  .if size_optimization
 3982               	    jp true_if_cy
 3983               	  .else
 3984 0e11 DADB 0C   	    jp c,true_pfa
 3985 0e14 C3D3 0C   	    jp false_pfa
GAS LISTING solo_forth.z80s 			page 73


 3986               	  .endif
 3987               	
 3988               	; ----------------------------------------------
 3989 0e17 190E      	  _code_header greater_than_,">"
 3990               	
 3991 0e19 E1        	  pop hl
 3992 0e1a D1        	  pop de
 3993 0e1b C3FA 0D   	  jp is_de_less_than_hl
 3994               	
 3995               	; ----------------------------------------------
 3996 0e1e 200E      	  _code_header rot_,"ROT"
 3997               	
 3998 0e20 D1        	  pop de
 3999 0e21 E1        	  pop hl
 4000 0e22 E3        	  ex (sp),hl
 4001 0e23 C35D 05   	  jp push_hlde
 4002               	
 4003               	; ----------------------------------------------
 4004 0e26 650C      	  _colon_header space_,"SPACE"
 4005               	
 4006 0e28 E10C EC08 	  dw b_l_,emit_
 4007 0e2c C00A      	  dw semicolon_s_
 4008               	
 4009               	; ----------------------------------------------
 4010 0e2e 650C      	  _colon_header question_dup_,"?DUP"
 4011               	
 4012 0e30 E00B      	  dw dup_
 4013 0e32 6007 380E 	  dw zero_branch_,question_dup.end
 4014 0e36 E00B      	  dw dup_
 4015               	question_dup.end:
 4016 0e38 C00A      	  dw semicolon_s_
 4017               	
 4018               	; ----------------------------------------------
 4019 0e3a 600D      	  _code_alias_header lfa_to_nfa_,"LFA>NFA",,two_plus_
 4020               	
 4021               	; ----------------------------------------------
 4022 0e3c 650C      	  _colon_header trail_,"TRAIL"
 4023               	
 4024               	; doc{
 4025               	;
 4026               	; trail ( -- nfa )
 4027               	;
 4028               	; Leave the name field address of the topmost word in the
 4029               	; `context` vocabulary.
 4030               	;
 4031               	; }doc
 4032               	
 4033 0e3e 2A0D 1A0C 	  dw context_,fetch_,fetch_
 4033      1A0C 
 4034 0e44 C00A      	  dw semicolon_s_
 4035               	
 4036               	; ----------------------------------------------
 4037 0e46 650C      	  _colon_header latest_,"LATEST"
 4038               	
 4039               	; doc{
 4040               	;
 4041               	; latest ( -- nfa )  \ ANS Forth
GAS LISTING solo_forth.z80s 			page 74


 4042               	;
 4043               	; Leave the name field address of the topmost word in the
 4044               	; `current` vocabulary.
 4045               	;
 4046               	; }doc
 4047               	
 4048 0e48 2D0D 1A0C 	  dw current_,fetch_,fetch_
 4048      1A0C 
 4049 0e4e C00A      	  dw semicolon_s_
 4050               	
 4051               	; ----------------------------------------------
 4052 0e50 650C      	  _colon_header pfa_to_lfa_,"PFA>LFA"
 4053               	
 4054 0e52 560E 620E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4055               	
 4056               	; ----------------------------------------------
 4057 0e56 730D      	  _code_alias_header pfa_to_cfa_,"PFA>CFA",,two_minus_
 4058               	
 4059               	; ----------------------------------------------
 4060 0e58 600D      	  _code_alias_header cfa_to_pfa_,"CFA>PFA",,two_plus_
 4061               	
 4062               	; ----------------------------------------------
 4063 0e5a 650C      	  _colon_header pfa_to_nfa_,"PFA>NFA"
 4064               	
 4065 0e5c 560E 620E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4066 0e60 C00A      	  dw semicolon_s_
 4067               	
 4068               	; ----------------------------------------------
 4069               	
 4070               	; doc{
 4071               	;
 4072               	; cfa>nfa  ( cfa -- nfa )
 4073               	;
 4074               	; Warning: No check is done where cfa belongs to a definition
 4075               	; created with `:noname`.
 4076               	;
 4077               	; }doc
 4078               	
 4079               	; XXX FIXME -- make it return 0 if cfa has no name associated
 4080               	
 4081 0e62 640E      	  _code_header cfa_to_nfa_,"CFA>NFA"
 4082               	
 4083 0e64 1E01      	  ld e,names_bank
 4084 0e66 CDA0 06   	  call bank.e ; page the memory bank
 4085 0e69 D1        	  pop de ; cfa
 4086 0e6a C5        	  push bc ; save Forth IP
 4087 0e6b 0600      	  ld b,0
 4088 0e6d 21FC BF   	  ld hl, names_bank_address-4
 4089               	
 4090               	cfa_to_nfa.begin_0:
 4091               	  ; hl = address of the cfa pointer
 4092 0e70 23        	  inc hl
 4093               	cfa_to_nfa.begin_1:
 4094 0e71 23        	  inc hl
 4095 0e72 23        	  inc hl
 4096 0e73 23        	  inc hl
 4097 0e74 7E        	  ld a,(hl) ; name field byte length
GAS LISTING solo_forth.z80s 			page 75


 4098 0e75 E61F      	  and max_word_length_mask ; name length
 4099 0e77 4F        	  ld c,a ; name length
 4100 0e78 0C        	  inc c  ; plus the length byte
 4101 0e79 09        	  add hl,bc ; point to the cfa pointer
 4102               	
 4103 0e7a 7E        	  ld a,(hl) ; low byte of cfa
 4104 0e7b BB        	  cp e ; equal?
 4105 0e7c 20F2      	  jr nz,cfa_to_nfa.begin_0 ; not equal
 4106 0e7e 23        	  inc hl
 4107 0e7f 7E        	  ld a,(hl) ; high byte of cfa
 4108 0e80 BA        	  cp d ; equal?
 4109 0e81 20EE      	  jr nz,cfa_to_nfa.begin_1 ; not equal
 4110               	  ; cfa found
 4111 0e83 0E03      	  ld c,3
 4112 0e85 09        	  add hl,bc ; nfa
 4113               	
 4114 0e86 1E00      	  ld e,default_bank
 4115 0e88 CDA0 06   	  call bank.e ; page the default memory bank
 4116               	
 4117 0e8b C1        	  pop bc ; restore Forth IP
 4118 0e8c C35E 05   	  jp push_hl
 4119               	
 4120               	; ----------------------------------------------
 4121               	
 4122 0e8f 600D      	  _code_alias_header cfap_to_lfa_,"CFAP>LFA",,two_plus_
 4123               	
 4124               	; ----------------------------------------------
 4125               	
 4126 0e91 730D      	  _code_alias_header nfa_to_lfa_,"NFA>LFA",,two_minus_
 4127               	
 4128               	; ----------------------------------------------
 4129 0e93 650C      	  _colon_header c_store_bank_,"C!BANK"
 4130               	
 4131               	; doc{
 4132               	;
 4133               	; c!bank  ( b a n -- )
 4134               	;
 4135               	; Store _b_ into address _a_ of bank _n_.
 4136               	;
 4137               	; }doc
 4138               	
 4139               	  ; XXX 11 bytes
 4140 0e95 9806 520C 	  dw bank_,c_store_
 4141 0e99 C50C 9806 	  _default_bank
 4142 0e9d C00A      	  dw semicolon_s_
 4143               	
 4144               	  ; XXX TODO
 4145               	  ; pop de
 4146               	  ; c_store_bank.e:
 4147               	  ; call bank.e
 4148               	  ; pop hl
 4149               	  ; ld l,(hl)
 4150               	  ; ld h,0
 4151               	  ; ld e,default_bank
 4152               	  ; call bank.e
 4153               	  ; jp pushhl
 4154               	
GAS LISTING solo_forth.z80s 			page 76


 4155               	; ----------------------------------------------
 4156 0e9f 650C      	  _colon_header store_bank_,"!BANK"
 4157               	
 4158               	; doc{
 4159               	;
 4160               	; !bank  ( x a n -- )
 4161               	;
 4162               	; Store _x_ into address _a_ of bank _n_.
 4163               	;
 4164               	; }doc
 4165               	
 4166               	  ; XXX 11 bytes
 4167 0ea1 9806 490C 	  dw bank_,store_
 4168 0ea5 C50C 9806 	  _default_bank
 4169 0ea9 C00A      	  dw semicolon_s_
 4170               	
 4171               	; ----------------------------------------------
 4172 0eab 650C      	  _colon_header c_fetch_bank_,"C@BANK"
 4173               	
 4174               	; doc{
 4175               	;
 4176               	; c@bank  ( a n -- b )
 4177               	;
 4178               	; Fetch the 8-bit content of address _a_ of the bank _n_.
 4179               	;
 4180               	; }doc
 4181               	
 4182               	  ; XXX 11 bytes
 4183 0ead 9806 230C 	  dw bank_,c_fetch_
 4184 0eb1 C50C 9806 	  _default_bank
 4185 0eb5 C00A      	  dw semicolon_s_
 4186               	
 4187               	  ; XXX 15 bytes
 4188               	  ; pop de
 4189               	  ; c_fetch_bank.e:
 4190               	  ; call bank.e
 4191               	  ; pop hl
 4192               	  ; ld l,(hl)
 4193               	  ; ld h,0
 4194               	  ; ld e,default_bank
 4195               	  ; call bank.e
 4196               	  ; jp pushhl
 4197               	
 4198               	; ----------------------------------------------
 4199 0eb7 650C      	  _colon_header fetch_bank_,"@BANK"
 4200               	
 4201               	; doc{
 4202               	;
 4203               	; @bank  ( a n -- x )
 4204               	;
 4205               	; Fetch the 16-bit content of address _a_ of bank _n_.
 4206               	;
 4207               	; }doc
 4208               	
 4209               	  ; XXX 11 bytes
 4210 0eb9 9806 1A0C 	  dw bank_,fetch_
 4211 0ebd C50C 9806 	  _default_bank
GAS LISTING solo_forth.z80s 			page 77


 4212 0ec1 C00A      	  dw semicolon_s_
 4213               	
 4214               	  ; XXX 17 bytes
 4215               	  ; pop de
 4216               	  ; fetch_bank.e
 4217               	  ; call bank.e
 4218               	  ; pop hl
 4219               	  ; ld a,(hl)
 4220               	  ; inc hl
 4221               	  ; ld h,(hl)
 4222               	  ; ld l,a
 4223               	  ; ld e,default_bank
 4224               	  ; call bank.e
 4225               	  ; jp pushhl
 4226               	
 4227               	; ----------------------------------------------
 4228 0ec3 650C      	  _colon_header c_fetch_n_,"C@N"
 4229               	
 4230               	; doc{
 4231               	;
 4232               	; c@n  ( a -- x )
 4233               	;
 4234               	; Fetch from the _a_ address of the names bank.
 4235               	;
 4236               	; }doc
 4237               	
 4238               	  ; XXX 7 bytes:
 4239 0ec5 C90C      	  _literal names_bank
 4240 0ec7 AB0E      	  dw c_fetch_bank_
 4241 0ec9 C00A      	  dw semicolon_s_
 4242               	
 4243               	  ; XXX 5 bytes
 4244               	  ; ld e,names_bank
 4245               	  ; jp c_fetch_bank.e
 4246               	
 4247               	; ----------------------------------------------
 4248 0ecb 650C      	  _colon_header fetch_n_,"@N"
 4249               	
 4250               	; doc{
 4251               	;
 4252               	; @n  ( a -- x )
 4253               	;
 4254               	; Fetch from the _a_ address of the names bank.
 4255               	;
 4256               	; }doc
 4257               	
 4258               	  ; XXX 7 bytes:
 4259 0ecd C90C      	  _literal names_bank
 4260 0ecf B70E      	  dw fetch_bank_
 4261 0ed1 C00A      	  dw semicolon_s_
 4262               	
 4263               	  ; XXX 5 bytes
 4264               	  ; ld e,names_bank
 4265               	  ; jp fetch_bank.e
 4266               	
 4267               	; ----------------------------------------------
 4268 0ed3 650C      	  _colon_header c_store_n_,"C!N"
GAS LISTING solo_forth.z80s 			page 78


 4269               	
 4270               	; doc{
 4271               	;
 4272               	; c!n  ( c a -- )
 4273               	;
 4274               	; Store _c_ into the _a_ address of the names bank.
 4275               	;
 4276               	; }doc
 4277               	
 4278               	  ; XXX 7 bytes:
 4279 0ed5 C90C      	  _literal names_bank
 4280 0ed7 930E      	  dw c_store_bank_
 4281 0ed9 C00A      	  dw semicolon_s_
 4282               	
 4283               	; ----------------------------------------------
 4284 0edb 650C      	  _colon_header store_n_,"!N"
 4285               	
 4286               	; doc{
 4287               	;
 4288               	; !n  ( x a -- )
 4289               	;
 4290               	; Store _x_ into the _a_ address of the names bank.
 4291               	;
 4292               	; }doc
 4293               	
 4294               	  ; XXX 7 bytes:
 4295 0edd C90C      	  _literal names_bank
 4296 0edf 9F0E      	  dw store_bank_
 4297 0ee1 C00A      	  dw semicolon_s_
 4298               	
 4299               	; ----------------------------------------------
 4300 0ee3 650C      	  _colon_header nfa_to_cfa_,"NFA>CFA"
 4301               	
 4302 0ee5 8306 04   	  _literal 4
 4303 0ee8 D20D CB0E 	  dw minus_,fetch_n_
 4304 0eec C00A      	  dw semicolon_s_
 4305               	
 4306               	; ----------------------------------------------
 4307               	; doc{
 4308               	;
 4309               	; nfa>string  ( nfa -- ca len )
 4310               	;
 4311               	; }doc
 4312               	
 4313 0eee 650C      	  _colon_header nfa_to_string_,"NFA>STRING"
 4314               	
 4315 0ef0 C90C 9806 	  _names_bank
 4316 0ef4 0710      	  dw count_
 4317 0ef6 8306 1F   	  _literal max_word_length_mask
 4318 0ef9 500A      	  dw and_
 4319 0efb EA06      	  dw save_string_
 4320 0efd C50C 9806 	  _default_bank
 4321 0f01 C00A      	  dw semicolon_s_
 4322               	
 4323               	; ----------------------------------------------
 4324 0f03 650C      	  _colon_header store_csp_,"!CSP"
 4325               	
GAS LISTING solo_forth.z80s 			page 79


 4326 0f05 9D0A 3C0D 	  dw sp_fetch_,csp_,store_
 4326      490C 
 4327 0f0b C00A      	  dw semicolon_s_
 4328               	
 4329               	; ----------------------------------------------
 4330 0f0d 650C      	  _colon_header question_error_,"?ERROR"
 4331               	
 4332 0f0f D90B      	  dw swap_
 4333 0f11 6007 190F 	  dw zero_branch_,question_error.no_error
 4334 0f15 8013      	  dw error_
 4335 0f17 C00A      	  dw semicolon_s_
 4336               	
 4337               	question_error.no_error:
 4338 0f19 D40B      	  dw drop_
 4339 0f1b C00A      	  dw semicolon_s_
 4340               	
 4341               	; ----------------------------------------------
 4342 0f1d 650C      	  _colon_header comp_question_,"COMP?"
 4343               	
 4344 0f1f 300D 1A0C 	  dw state_,fetch_
 4345 0f23 C00A      	  dw semicolon_s_
 4346               	
 4347               	; ----------------------------------------------
 4348 0f25 650C      	  _colon_header question_comp_,"?COMP"
 4349               	
 4350 0f27 1D0F 570B 	  dw comp_question_,zero_equals_
 4351 0f2b 8306 110D 	  _question_error error.compilation_only
 4351      0F
 4352 0f30 C00A      	  dw semicolon_s_
 4353               	
 4354               	; ----------------------------------------------
 4355 0f32 650C      	  _colon_header question_exec_,"?EXEC"
 4356               	
 4357 0f34 1D0F      	  dw comp_question_
 4358 0f36 8306 120D 	  _question_error error.execution_only
 4358      0F
 4359 0f3b C00A      	  dw semicolon_s_
 4360               	
 4361               	; ----------------------------------------------
 4362               	.if 1
 4363               	  ; XXX TODO -- remove when the security is removed
 4364 0f3d 650C      	  _colon_header question_pairs_,"?PAIRS"
 4365               	
 4366 0f3f DC0D      	  dw not_equals_
 4367 0f41 8306 130D 	  _question_error error.conditionals_not_paired
 4367      0F
 4368 0f46 C00A      	  dw semicolon_s_
 4369               	.endif
 4370               	
 4371               	; ----------------------------------------------
 4372 0f48 650C      	  _colon_header question_csp_,"?CSP"
 4373               	
 4374 0f4a 9D0A 3C0D 	  dw sp_fetch_,csp_,fetch_,not_equals_
 4374      1A0C DC0D 
 4375 0f52 8306 140D 	  _question_error error.definition_not_finished
 4375      0F
 4376 0f57 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 80


 4377               	
 4378               	; ----------------------------------------------
 4379 0f59 650C      	  _colon_header question_loading_,"?LOADING"
 4380               	
 4381 0f5b 1E0D 1A0C 	  dw blk_,fetch_,zero_equals_
 4381      570B 
 4382 0f61 8306 160D 	  _question_error error.loading_only
 4382      0F
 4383 0f66 C00A      	  dw semicolon_s_
 4384               	
 4385               	; ----------------------------------------------
 4386 0f68 650C      	  _colon_header compile_,"COMPILE"
 4387               	
 4388 0f6a 250F      	  dw question_comp_
 4389 0f6c FF0A E00B 	  dw from_r_,dup_,two_plus_,to_r_,fetch_,compile_comma_
 4389      5E0D F00A 
 4389      1A0C BE0D 
 4390 0f78 C00A      	  dw semicolon_s_
 4391               	
 4392               	; ----------------------------------------------
 4393 0f7a 650C      	  _colon_header postpone_,"POSTPONE",immediate
 4394               	
 4395               	; doc{
 4396               	;
 4397               	; postpone ( "name" -- )  \ ANS Forth, C I
 4398               	;
 4399               	; Skip leading space delimiters. Parse name delimited by a
 4400               	; space. Find name. Append the compilation semantics of _name_ to
 4401               	; the current definition.
 4402               	;
 4403               	; }doc
 4404               	
 4405 0f7c 8819      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 4406 0f7e E00B 9819 	  dw dup_,question_defined_ ; error if not found
 4407 0f82 6D0B      	  dw zero_less_than_ ; non-immediate word?
 4408 0f84 6007 8C0F 	  dw zero_branch_,postpone.end
 4409               	  ; Non-immediate word.
 4410 0f88 680F 680F 	  dw compile_,compile_ ; compile `compile`
 4411               	postpone.end:
 4412 0f8c BE0D      	  dw compile_comma_
 4413 0f8e C00A      	  dw semicolon_s_
 4414               	
 4415               	; ----------------------------------------------
 4416 0f90 650C      	  _colon_header left_bracket_,"[",immediate
 4417               	
 4418 0f92 300D FD0B 	  dw state_,off_
 4419 0f96 C00A      	  dw semicolon_s_
 4420               	
 4421               	; ----------------------------------------------
 4422 0f98 650C      	  _colon_header right_bracket_,"]"
 4423               	
 4424 0f9a 300D 070C 	  dw state_,on_
 4425 0f9e C00A      	  dw semicolon_s_
 4426               	
 4427               	; ----------------------------------------------
 4428 0fa0 650C      	  _colon_header smudge_,"SMUDGE"
 4429               	
GAS LISTING solo_forth.z80s 			page 81


 4430               	
 4431               	; doc{
 4432               	;
 4433               	; smudge  ( -- )
 4434               	;
 4435               	; Toggle the "smudge bit" in a definitions' name field. This
 4436               	; prevents an uncompleted definition from being found during
 4437               	; dictionary searches, until compiling is completed without
 4438               	; error.
 4439               	;
 4440               	; }doc
 4441               	
 4442 0fa2 460E      	  dw latest_
 4443 0fa4 8306 20   	  _literal smudge_mask
 4444               	  ; XXX TODO factor `toggle-names'?
 4445 0fa7 C90C 9806 	  _names_bank
 4446 0fab 110C      	  dw toggle_
 4447 0fad C50C 9806 	  _default_bank
 4448 0fb1 C00A      	  dw semicolon_s_
 4449               	
 4450               	; ----------------------------------------------
 4451 0fb3 650C      	  _colon_header hex_,"HEX"
 4452               	
 4453 0fb5 8306 10   	  _literal 0x10
 4454 0fb8 330D 490C 	  dw base_,store_
 4455 0fbc C00A      	  dw semicolon_s_
 4456               	
 4457               	; ----------------------------------------------
 4458 0fbe 650C      	  _colon_header decimal_,"DECIMAL"
 4459               	
 4460 0fc0 8306 0A   	  _literal 0x0A
 4461 0fc3 330D 490C 	  dw base_,store_
 4462 0fc7 C00A      	  dw semicolon_s_
 4463               	
 4464               	; ----------------------------------------------
 4465 0fc9 650C      	  _colon_header paren_semicolon_code_,"(;CODE)"
 4466               	
 4467               	; doc{
 4468               	;
 4469               	; (;code)  ( -- )
 4470               	;
 4471               	; The run-time procedure compiled by `;code`. Rewrite the code
 4472               	; field of the most recently defined word to point to the
 4473               	; following machine code sequence.
 4474               	;
 4475               	; }doc
 4476               	
 4477               	; : (;code)       --
 4478               	;   r>        \ Pop the address of the next instruction off the return stack,
 4479               	;             \ which is the starting address of the run-time code routine.
 4480               	;   latest    \ Get the name field address of the word under construction.
 4481               	;   nfa>cfa ! \ Find its code field address and store in it the address of
 4482               	;             \ the code routine to be executed at run-time.
 4483               	;   ;
 4484               	
 4485 0fcb FF0A 460E 	  dw from_r_,latest_,nfa_to_cfa_,store_
 4485      E30E 490C 
GAS LISTING solo_forth.z80s 			page 82


 4486 0fd3 C00A      	  dw semicolon_s_
 4487               	
 4488               	; ----------------------------------------------
 4489 0fd5 650C      	  _colon_header semicolon_code_,";CODE",immediate
 4490               	
 4491               	; XXX TODO -- documentation
 4492               	; doc{
 4493               	;
 4494               	; ;code  ( -- )
 4495               	;
 4496               	; Stop compilation and terminate a new defining word by
 4497               	; compiling the run-time routine `(;code)`.  Assemble the
 4498               	; assembly mnemonics following.
 4499               	;
 4500               	; }doc
 4501               	
 4502 0fd7 480F      	  dw question_csp_
 4503 0fd9 680F C90F 	  dw compile_,paren_semicolon_code_
 4504 0fdd 8205      	  dw asm_
 4505 0fdf 900F A00F 	  dw left_bracket_,smudge_
 4506 0fe3 C00A      	  dw semicolon_s_
 4507               	
 4508               	; ----------------------------------------------
 4509 0fe5 650C      	  _colon_header does_,"DOES>",immediate
 4510               	
 4511 0fe7 680F C90F 	  dw compile_,paren_semicolon_code_
 4512 0feb 8306 CD   	  _literal 0xCD ; Z80 opcode for "call"
 4513 0fee C60D      	  dw c_comma_ ; compile it
 4514 0ff0 8D06 F80F 	  dw lit_,do_does,comma_ ; compile the routine address
 4514      B20D 
 4515 0ff6 C00A      	  dw semicolon_s_
 4516               	
 4517               	do_does:
 4518               	  ; Save the IP in the return stack.
 4519 0ff8 2A10 00   	  ld hl,(return_stack_pointer)
 4520 0ffb 2B        	  dec hl
 4521 0ffc 70        	  ld (hl),b
 4522 0ffd 2B        	  dec hl
 4523 0ffe 71        	  ld (hl),c
 4524 0fff 2210 00   	  ld (return_stack_pointer),hl
 4525               	  ; Pop the address of the run-time routine
 4526               	  ; (put there bye `call do_does`) in IP.
 4527 1002 C1        	  pop bc ; new Forth IP
 4528               	  ; Push the pfa.
 4529 1003 13        	  inc de  ; de=pfa
 4530 1004 D5        	  push de
 4531               	  ; Execute the run-time routine.
 4532 1005 DDE9      	  _jp_next
 4533               	
 4534               	; ----------------------------------------------
 4535 1007 0910      	  _code_header count_,"COUNT"
 4536               	
 4537               	  ; Code from DZX-Forth.
 4538               	
 4539 1009 D1        	  pop de
 4540 100a 1A        	  ld a,(de)
 4541 100b 13        	  inc de
GAS LISTING solo_forth.z80s 			page 83


 4542 100c D5        	  push de
 4543 100d C387 06   	  jp push_a
 4544               	
 4545               	; ----------------------------------------------
 4546 1010 650C      	  _colon_header bounds_,"BOUNDS"
 4547               	
 4548 1012 CC0B 810B 	  dw over_,plus_,swap_
 4548      D90B 
 4549 1018 C00A      	  dw semicolon_s_
 4550               	
 4551               	; ----------------------------------------------
 4552 101a 650C      	  _colon_header type_,"TYPE"
 4553               	
 4554               	  ; XXX TODO Rewrite in Z80, after the ROM routine.
 4555               	
 4556 101c 2E0E      	  dw question_dup_
 4557 101e 6007 3210 	  dw zero_branch_,type.empty_string
 4558               	
 4559 1022 1010      	  dw bounds_
 4560 1024 AD07      	  dw paren_do_
 4561               	type.do:
 4562 1026 4408 230C 	  dw i_,c_fetch_,emit_
 4562      EC08 
 4563 102c 7807 2610 	  dw paren_loop_,type.do ; loop
 4564 1030 C00A      	  dw semicolon_s_
 4565               	
 4566               	type.empty_string:
 4567 1032 D40B      	  dw drop_
 4568               	type.end:
 4569 1034 C00A      	  dw semicolon_s_
 4570               	
 4571               	; ----------------------------------------------
 4572               	
 4573 1036 3810      	  _code_header minus_trailing_,"-TRAILING"
 4574               	
 4575 1038 D1        	  pop de
 4576 1039 E1        	  pop hl
 4577 103a E5        	  push hl
 4578 103b 19        	  add hl,de
 4579 103c EB        	  ex de,hl
 4580               	  ; de = address after the string
 4581               	  ; hl = length of the string
 4582               	minus_trailing.begin:
 4583 103d 7D        	  ld a,l
 4584 103e B4        	  or h ; exhausted?
 4585 103f CA5E 05   	  jp z,push_hl
 4586 1042 1B        	  dec de ; next char
 4587 1043 1A        	  ld a,(de)
 4588 1044 FE20      	  cp ' ' ; space?
 4589 1046 C25E 05   	  jp nz,push_hl
 4590 1049 2B        	  dec hl ; new length
 4591 104a C33D 10   	  jp minus_trailing.begin ; repeat
 4592               	
 4593               	; ----------------------------------------------
 4594               	  ;_colon_header paren_dot_quote_,"(.\")" ; XXX FIXME as error
 4595 104d 650C      	  _colon_header paren_dot_quote_,"(.\x22)"
 4596               	
GAS LISTING solo_forth.z80s 			page 84


 4597 104f 4F0B 0710 	  dw r_fetch_,count_ ; ( ca len )
 4598 1053 E00B 570D 	  dw dup_,one_plus_,from_r_,plus_,to_r_ ; skip the string after return
 4598      FF0A 810B 
 4598      F00A 
 4599 105d 1A10      	  dw type_
 4600 105f C00A      	  dw semicolon_s_
 4601               	
 4602               	; ----------------------------------------------
 4603               	  ;_colon_header dot_quote_,".\"",immediate ; XXX FIXME as error
 4604 1061 650C      	  _colon_header dot_quote_,".\x22",immediate
 4605               	
 4606 1063 8306 22   	  _literal '"'
 4607 1066 A711      	  dw parse_ ; ( ca len )
 4608 1068 1D0F      	  dw comp_question_
 4609 106a 6007 7610 	  dw zero_branch_,dot_quote.interpreting
 4610               	  ; Compiling.
 4611 106e 680F 4D10 	  dw compile_,paren_dot_quote_,s_comma_
 4611      A00D 
 4612 1074 4A1D      	  dw exit_
 4613               	dot_quote.interpreting:
 4614 1076 1A10      	  dw type_
 4615 1078 C00A      	  dw semicolon_s_
 4616               	
 4617               	; ----------------------------------------------
 4618 107a 1A14      	  _variable_header span_,"SPAN"
 4619               	
 4620               	; doc{
 4621               	;
 4622               	; span  ( -- a )  \ Forth-83
 4623               	;
 4624               	; The address of a variable containing the count of characters
 4625               	; actually received and stored by the last execution of
 4626               	; `expect`.
 4627               	;
 4628               	; }doc
 4629               	
 4630 107c 0000      	  dw 0
 4631               	
 4632               	; ----------------------------------------------
 4633 107e 650C      	  _colon_header accept_,"ACCEPT"
 4634               	
 4635               	; doc{
 4636               	;
 4637               	; accept  ( ca1 len1 -- len2 )  \ ANS Forth
 4638               	;
 4639               	; }doc
 4640               	
 4641               	  ; XXX TODO -- not finished
 4642               	
 4643               	  ; dw span_,off_
 4644               	  ; dw question_dup_
 4645               	  ; dw zero_branch_,accept.end
 4646               	
 4647               	  ; dw swap_ ; ( len ca )
 4648               	; accept.begin: ; ( len ca )
 4649               	  ; dw key_,dup_ ; ( len ca c c )
 4650               	
GAS LISTING solo_forth.z80s 			page 85


 4651               	  ; dw c_lit_
 4652               	  ; db delete_char
 4653               	  ; dw equals_ ; delete key?
 4654               	  ; dw zero_branch_,accept.maybe_carriage_return
 4655               	  ; ; Delete key ( len ca c )
 4656               	  ; dw drop_
 4657               	  ; dw dup_,i_,equals_ ; cursor at the start position?
 4658               	  ; dw dup_ ; ( len ca f f )
 4659               	  ; ; XXX TODO adapt this when true=-1
 4660               	  ; dw from_r_,two_minus_,plus_,to_r_ ; update the index
 4661               	  ; dw question_branch_,accept.loop ; nothing to delete
 4662               	  ; ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4663               	  ; dw c_lit_
 4664               	  ; db backspace_char
 4665               	  ; dw branch_,accept.emit
 4666               	
 4667               	; accept.maybe_carriage_return: ; ( len ca c )
 4668               	  ; dw dup_
 4669               	  ; dw c_lit_
 4670               	  ; db carriage_return_char
 4671               	  ; dw equals_ ; carriage return?
 4672               	  ; dw zero_branch_,accept.ordinary_key
 4673               	  ; ; Carriage return ( len ca c )
 4674               	  ; dw exhaust_
 4675               	  ; dw drop_,b_l_
 4676               	  ; dw branch_,accept.emit
 4677               	
 4678               	; accept.ordinary_key: ; ( len ca c )
 4679               	  ; dw dup_
 4680               	; accept.store: ; ( len ca c c | len ca c 0 )
 4681               	  ; dw i_,c_store_
 4682               	; accept.emit: ; ( len ca c )
 4683               	  ; dw emit_
 4684               	
 4685               	  ; ; ( len ca )
 4686               	  ; dw i_,over_,minus_,span_,store_ ; update `span`
 4687               	  ; dw paren_loop_,accept.do
 4688               	; accept.end:
 4689               	  ; dw drop_
 4690               	  ; dw span_,fetch_
 4691 1080 C00A      	  dw semicolon_s_
 4692               	
 4693               	; ----------------------------------------------
 4694 1082 650C      	  _colon_header expect_,"EXPECT"
 4695               	
 4696               	; doc{
 4697               	;
 4698               	; expect  ( ca len -- )  \ Forth-83
 4699               	;
 4700               	; Transfer characters from the terminal to address _ca_, until a
 4701               	; "return" or _len_ characters have been received.
 4702               	;
 4703               	; The transfer begins at addr proceeding towards higher
 4704               	; addresses one byte per character until either a "return" is
 4705               	; received or until _len_ characters have been transferred.
 4706               	
 4707               	; No more than _len_ characters will be stored.  The "return" is
GAS LISTING solo_forth.z80s 			page 86


 4708               	; not stored into memory.  No characters are received or
 4709               	; transferred if _len_ is zero.  All characters actually
 4710               	; received and stored into memory will be displayed, with the
 4711               	; "return" displaying as a space.
 4712               	
 4713               	; ; }doc
 4714               	
 4715 1084 7A10 FD0B 	  dw span_,off_
 4716 1088 2E0E      	  dw question_dup_
 4717 108a 6007 F910 	  dw zero_branch_,expect.end
 4718               	
 4719 108e 1010 C40B 	  dw bounds_,tuck_ ; ( ca ca+len ca )
 4720 1092 AD07      	  dw paren_do_
 4721               	expect.do: ; ( ca )
 4722 1094 7609 E00B 	  dw xkey_,dup_ ; ( ca c c )
 4723               	
 4724 1098 8306 0C   	  _literal delete_char
 4725 109b E90D      	  dw equals_ ; delete key?
 4726 109d 6007 BE10 	  dw zero_branch_,expect.maybe_carriage_return
 4727               	  ; Delete key ( ca c )
 4728 10a1 D40B      	  dw drop_
 4729 10a3 E00B 4408 	  dw dup_,i_,equals_ ; cursor at the start position?
 4729      E90D 
 4730               	.if true==(-1)
 4731               	  ; XXX TODO simplify
 4732               	  dw abs_
 4733               	.endif
 4734 10a9 E00B      	  dw dup_ ; ( ca f f )
 4735 10ab FF0A 710D 	  dw from_r_,two_minus_,plus_,to_r_ ; update the index
 4735      810B F00A 
 4736 10b3 6C07 EB10 	  dw question_branch_,expect.loop ; nothing to delete
 4737               	  ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4738 10b7 8306 08   	  _literal backspace_char
 4739 10ba 5707 E910 	  dw branch_,expect.emit
 4740               	
 4741               	expect.maybe_carriage_return: ; ( ca c )
 4742 10be E00B      	  dw dup_
 4743 10c0 8306 0D   	  _literal carriage_return_char
 4744 10c3 E90D      	  dw equals_ ; carriage return?
 4745 10c5 6007 D310 	  dw zero_branch_,expect.control_char
 4746               	  ; Carriage return ( ca c )
 4747 10c9 D80A      	  dw exhaust_
 4748 10cb D40B E10C 	  dw drop_,b_l_
 4749 10cf 5707 E910 	  dw branch_,expect.emit
 4750               	
 4751               	expect.control_char: ; ( ca c )
 4752 10d3 E00B E10C 	  dw dup_,b_l_,less_than_ ; control char?
 4752      F60D 
 4753 10d9 6007 E310 	  dw zero_branch_,expect.ordinary_key
 4754               	  ; Control char ( ca c )
 4755 10dd D40B      	  dw drop_
 4756 10df 5707 9410 	  dw branch_,expect.do
 4757               	
 4758               	expect.ordinary_key: ; ( ca c )
 4759 10e3 E00B      	  dw dup_
 4760               	expect.store: ; ( ca c c | ca c 0 )
 4761 10e5 4408 520C 	  dw i_,c_store_
GAS LISTING solo_forth.z80s 			page 87


 4762               	expect.emit: ; ( ca c )
 4763 10e9 EC08      	  dw emit_
 4764               	
 4765               	expect.loop: ; ( ca )
 4766 10eb 4408 CC0B 	  dw i_,over_,minus_,span_,store_ ; update `span`
 4766      D20D 7A10 
 4766      490C 
 4767 10f5 7807 9410 	  dw paren_loop_,expect.do
 4768               	expect.end:
 4769 10f9 D40B      	  dw drop_
 4770 10fb C00A      	  dw semicolon_s_
 4771               	
 4772               	; ----------------------------------------------
 4773 10fd 650C      	  _colon_header query_,"QUERY"
 4774               	
 4775               	; doc{
 4776               	;
 4777               	; query  ( -- )  \ fig-Forth
 4778               	;
 4779               	; XXX TODO description
 4780               	;
 4781               	; Make the user input device the input source. Receive input
 4782               	; into the terminal input buffer, replacing any previous
 4783               	; contents. Make the result, whose address is returned by `tib`,
 4784               	; the input buffer. `>in` to zero.
 4785               	;
 4786               	; Input 80 characters of text (or until a "return") from the
 4787               	; operators terminal. Text is positioned at the address
 4788               	; contained in TIB with IN set to zero.
 4789               	;
 4790               	; Transfer characters from the terminal to address contained in
 4791               	; returned by `tib`, until a "return" or the count contained in
 4792               	; the `#tib` variable have been received. One or more nulls are
 4793               	; added at the end of the text.
 4794               	;
 4795               	; }doc
 4796               	
 4797 10ff 450D E00B 	  dw tib_,dup_
 4798 1103 490D 1A0C 	  dw number_tib_,fetch_
 4799 1107 E70B 5D11 	  dw two_dup_,blank_ ; clean the input buffer
 4800 110b 8210      	  dw expect_
 4801 110d 7A10 1A0C 	  dw span_,fetch_,plus_,stream_end_
 4801      810B 0B18 
 4802 1115 210D FD0B 	  dw to_in_,off_
 4803 1119 C00A      	  dw semicolon_s_
 4804               	
 4805               	; ----------------------------------------------
 4806 111b 650C      	  _colon_header x_,0,immediate
 4807               	
 4808               	; doc{
 4809               	
 4810               	; x  ( -- )
 4811               	
 4812               	; This is pseudonym for the "null" or dictionary entry for a
 4813               	; name of one character of ascii null. It is the execution
 4814               	; procedure to terminate interpretation of a line of text from
 4815               	; the terminal or within a disk buffer, as both buffers always
GAS LISTING solo_forth.z80s 			page 88


 4816               	; have a null word at the end.
 4817               	;
 4818               	; In the fig-Forth model a null character is used to detect the
 4819               	; end of the buffers.  Therefore the scanning words must treat
 4820               	; the null character as a special unconditional delimiter, and
 4821               	; do other tricks in order to simulate the null character found
 4822               	; is a parsed null word.
 4823               	;
 4824               	; In Solo Forth the scanning words does not treat the null char
 4825               	; apart; instead, an actual null word (a null character
 4826               	; surrounded by spaces) is put after the buffers (disk buffers
 4827               	; and `tib`). Therefore the null word is parsed normally as any
 4828               	; other word. No need to treat the null character as a special
 4829               	; delimiter. This new method is compatible with the original
 4830               	; fig-Forth parsing words.
 4831               	
 4832               	; }doc
 4833               	
 4834 111d 1E0D 1A0C 	  dw blk_,fetch_ ; input stream from disk?
 4835 1121 6007 3D11 	  dw zero_branch_,x.exit ; if not, branch
 4836               	  ; From disk.
 4837 1125 C90C 1E0D 	  dw one_,blk_,plus_store_ ; next disk buffer
 4837      F00B 
 4838 112b 210D FD0B 	  dw to_in_,off_ ; clear `in`, preparing parsing of input text
 4839               	
 4840               	  ; XXX WARNING -- The following check of the last block is
 4841               	  ; specific for 2 blocks per screen; the generic slower check
 4842               	  ; would be `blk @ b/scr 1- and`.
 4843               	
 4844 112f 1E0D 1A0C 	  dw blk_,fetch_,one_,and_ ; was it the last block of the screen?
 4844      C90C 500A 
 4845 1137 6C07 3F11 	  dw question_branch_,x.end ; if not, branch
 4846               	  ; Last block of the screen.
 4847 113b 320F      	  dw question_exec_ ; error if not executing
 4848               	x.exit:
 4849               	
 4850               	  ; The top item on the return stack is thrown away.  The interpreter
 4851               	  ; will not continue to execute the `?stack` instruction that follows
 4852               	  ; `execute` in `interpret`, but will return to the next higher level
 4853               	  ; of nesting and execute the next word after `interpret` in the Forth
 4854               	  ; loop.  This is when the familiar "ok" message is displayed on the
 4855               	  ; terminal, prompting the operator for the next line of commands.
 4856               	
 4857 113d 1C0B      	  dw r_drop_
 4858               	;  dw lit_,7,border_ ; XXX INFORMER
 4859               	
 4860               	x.end:
 4861 113f C00A      	  dw semicolon_s_
 4862               	
 4863               	; ----------------------------------------------
 4864 1141 4311      	  _code_header fill_,"FILL"
 4865               	
 4866 1143 D1        	  pop de ; e = char
 4867               	fill.e:
 4868 1144 69        	  ld l,c
 4869 1145 60        	  ld h,b ; the Forth IP
 4870 1146 C1        	  pop bc ; count
GAS LISTING solo_forth.z80s 			page 89


 4871 1147 E3        	  ex (sp),hl ; save the Forth IP
 4872               	fill.do:
 4873 1148 78        	  ld a,b
 4874 1149 B1        	  or c
 4875 114a CA53 11   	  _jump_z fill.end
 4876 114d 73        	  ld (hl),e
 4877 114e 23        	  inc hl
 4878 114f 0B        	  dec bc
 4879 1150 C348 11   	  jp fill.do
 4880               	fill.end:
 4881 1153 C1        	  pop bc ; restore the Forth IP
 4882 1154 DDE9      	  _jp_next
 4883               	
 4884               	; ----------------------------------------------
 4885 1156 5811      	  _code_header erase_,"ERASE"
 4886               	
 4887 1158 1E00      	  ld e,0
 4888 115a C344 11   	  jp fill.e
 4889               	
 4890               	; ----------------------------------------------
 4891 115d 5F11      	  _code_header blank_,"BLANK"
 4892               	
 4893 115f 1E20      	  ld e,space_char
 4894 1161 C344 11   	  jp fill.e
 4895               	
 4896               	; ----------------------------------------------
 4897 1164 650C      	  _colon_header hold_,"HOLD"
 4898               	
 4899 1166 8D06 FFFF 	  dw lit_,-1,hld_,plus_store_ ; decrement `hld`
 4899      420D F00B 
 4900 116e 420D 1A0C 	  dw hld_,fetch_,c_store_ ; store character into `pad`
 4900      520C 
 4901 1174 C00A      	  dw semicolon_s_
 4902               	
 4903               	; ----------------------------------------------
 4904 1176 650C      	  _colon_header pad_,"PAD"
 4905               	
 4906 1178 900D      	  dw here_
 4907 117a 8306 44   	  _literal 0x44
 4908 117d 810B      	  dw plus_
 4909 117f C00A      	  dw semicolon_s_
 4910               	
 4911               	; ----------------------------------------------
 4912 1181 650C      	  _colon_header stream_,"STREAM"
 4913               	
 4914               	; doc{
 4915               	;
 4916               	; stream  ( -- ca )
 4917               	;
 4918               	; ca = current parsing position in the stream source
 4919               	;
 4920               	; }doc
 4921               	
 4922 1183 1E0D 1A0C 	  dw blk_,fetch_,question_dup_ ; from disk?
 4922      2E0E 
 4923 1189 6007 9311 	  dw zero_branch_,stream.terminal
 4924 118d 7718      	  dw block_ ; from disk
GAS LISTING solo_forth.z80s 			page 90


 4925 118f 5707 9511 	  dw branch_,stream.end
 4926               	stream.terminal:
 4927 1193 450D      	  dw tib_ ; from terminal
 4928               	stream.end:
 4929 1195 210D 1A0C 	  dw to_in_,fetch_,plus_
 4929      810B 
 4930 119b C00A      	  dw semicolon_s_
 4931               	
 4932               	; ----------------------------------------------
 4933 119d 650C      	  _colon_header parsed_,"PARSED"
 4934               	
 4935               	; doc{
 4936               	;
 4937               	; parsed  ( len -- )
 4938               	;
 4939               	; Add the given _len_ plus 1 to `>in`.
 4940               	;
 4941               	; }word
 4942               	
 4943 119f 570D 210D 	  dw one_plus_,to_in_,plus_store_
 4943      F00B 
 4944 11a5 C00A      	  dw semicolon_s_
 4945               	
 4946               	; ----------------------------------------------
 4947 11a7 650C      	  _colon_header parse_,"PARSE"
 4948               	
 4949               	; doc{
 4950               	;
 4951               	; parse  ( c "text<c>" -- ca len )  \ ANS Forth
 4952               	;
 4953               	; Parse _text_ delimited by the delimiter char _c_.
 4954               	;
 4955               	; ca = address of the parsed string, within the input buffer
 4956               	; len = length of the parsed string
 4957               	;
 4958               	; If the parse area was empty, the resulting string has a zero length.
 4959               	;
 4960               	; }doc
 4961               	
 4962 11a9 8111 D90B 	  dw stream_,swap_,scan_,dup_,parsed_
 4962      BE08 E00B 
 4962      9D11 
 4963 11b3 C00A      	  dw semicolon_s_
 4964               	
 4965               	; ----------------------------------------------
 4966 11b5 650C      	  _colon_header parse_name_,"PARSE-NAME"
 4967               	
 4968               	; doc{
 4969               	;
 4970               	; parse-name  ( "name"  -- ca len )
 4971               	;
 4972               	; }word
 4973               	
 4974 11b7 8111 E00B 	  dw stream_,dup_,to_r_ ; ( ca1 )
 4974      F00A 
 4975 11bd E10C D408 	  dw b_l_,skip_ ; ( ca2 )
 4976 11c1 E00B FF0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
GAS LISTING solo_forth.z80s 			page 91


 4976      D20D 210D 
 4976      F00B 
 4977               	  ; XXX TODO factor of `parse`?:
 4978 11cb E10C BE08 	  dw b_l_,scan_ ; ( ca len )
 4979 11cf E00B 9D11 	  dw dup_,parsed_
 4980 11d3 C00A      	  dw semicolon_s_
 4981               	
 4982               	; ----------------------------------------------
 4983 11d5 650C      	  _colon_header word_,"WORD"
 4984               	
 4985               	; doc{
 4986               	;
 4987               	; word  ( c "<c...>text<c>" -- ca )  \ ANS Forth
 4988               	;
 4989               	; c = delimiter char
 4990               	;
 4991               	; Skip leading _c_ delimiters from the input stream.  Parse the
 4992               	; next text characters from the input stream, until a delimiter
 4993               	; _c_ is found, storing the packed character string beginning at
 4994               	; _ca_, as a counted string (the character count in the first
 4995               	; byte), and with one blank at the end.
 4996               	;
 4997               	; }doc
 4998               	
 4999 11d7 8111      	  dw stream_ ; ( c a1 )
 5000 11d9 E00B F00A 	  dw dup_,to_r_
 5001 11dd CC0B D408 	  dw over_,skip_ ; ( c a2 )
 5002               	.if  0
 5003               	  dw hex_
 5004               	  _echo 'In word after skip:' ; XXX INFORMER
 5005               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5006               	  dw key_,drop_ ; XXX INFORMER
 5007               	.endif
 5008 11e1 E00B FF0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
 5008      D20D 210D 
 5008      F00B 
 5009               	  ; XXX TODO factor of `parse`:
 5010 11eb D90B BE08 	  dw swap_,scan_ ; ( a2 len )
 5011               	.if  0
 5012               	  dw hex_
 5013               	  _echo 'In word after scan:' ; XXX INFORMER
 5014               	  dw cr_,two_dup_,type_ ; XXX INFORMER
 5015               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5016               	  dw key_,drop_ ; XXX INFORMER
 5017               	.endif
 5018 11ef E00B 570D 	  dw dup_,one_plus_,to_in_,plus_store_
 5018      210D F00B 
 5019               	
 5020 11f7 900D      	  dw here_
 5021 11f9 8306 21   	  _literal max_word_length+2
 5022 11fc 5D11      	  dw blank_
 5023               	
 5024 11fe E00B 900D 	  dw dup_,here_,c_store_ ; count byte
 5024      520C 
 5025 1204 900D 570D 	  dw here_,one_plus_ ; destination
 5026 1208 D90B      	  dw swap_ ; count
 5027 120a E609      	  dw cmove_ ; move the word
GAS LISTING solo_forth.z80s 			page 92


 5028 120c 900D      	  dw here_
 5029               	
 5030               	  .if 0 ; XXX OLD
 5031               	    ;dw space_ ; XXX INFORMER
 5032               	    ;dw depth_,dot_ ; XXX INFORMER
 5033               	    ;_echo 'blk ' ; XXX INFORMER
 5034               	    ;dw blk_,fetch_,dot_ ; XXX INFORMER
 5035               	    ;_echo 'in ' ; XXX INFORMER
 5036               	    ;dw in_,fetch_,dot_ ; XXX INFORMER
 5037               	    ; dw here_,count_,one_,ink_,type_,zero_,ink_,space_ ; XXX INFORMER
 5038               	    ;dw key_,drop_ ; XXX INFORMER
 5039               	  .endif
 5040               	
 5041 120e C00A      	  dw semicolon_s_
 5042               	; ----------------------------------------------
 5043 1210 650C      	  _colon_header paren_number_,"(NUMBER)"
 5044               	
 5045               	; doc{
 5046               	;
 5047               	; (number)  ( d1 ca1 -- d2 ca2 )  \ fig-Forth
 5048               	;
 5049               	; Convert the ASCII text beginning at _ca1+l_ with regard to
 5050               	; `base`. The new value is accumulated into double number _d1_,
 5051               	; being left as _d2_.  _ca2_ is the address of the first
 5052               	; unconvertable digit. Used by `number`.
 5053               	;
 5054               	; }doc
 5055               	
 5056               	paren_number.begin: ; begin
 5057 1212 570D      	  dw one_plus_ ; address of the next digit
 5058 1214 E00B F00A 	  dw dup_,to_r_ ; save the address
 5059 1218 230C      	  dw c_fetch_ ; get the digit
 5060               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5061               	  ;dw dup_,dup_,cr_,dot_,emit_; XXX INFORMER
 5062 121a 330D 1A0C 	  dw base_,fetch_,digit_ ; convert the digit
 5062      4608 
 5063 1220 6007 4E12 	  dw zero_branch_,paren_number.end ; while
 5064 1224 D90B      	  dw swap_ ; get the high order part of d1 to the top.
 5065 1226 330D 1A0C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5065      060A 
 5066 122c D40B      	  dw drop_ ; drop the high order part of the product
 5067 122e 1E0E      	  dw rot_ ; move the low order part of d1 to top of stack
 5068 1230 330D 1A0C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5068      060A 
 5069 1236 890B      	  dw d_plus_ ; accumulate result into d1
 5070 1238 360D 1A0C 	  dw dpl_,fetch_,one_plus_ ; is DPL other than -1?
 5070      570D 
 5071 123e 6007 4812 	  dw zero_branch_,paren_number.decimal_point_done
 5072               	  ; DPL is not -1, a decimal point was encountered
 5073 1242 C90C 360D 	  dw one_,dpl_,plus_store_ ; increment DPL, one more digit to right of decimal point
 5073      F00B 
 5074               	paren_number.decimal_point_done:
 5075 1248 FF0A      	  dw from_r_ ; pop addr1+1 back to convert the next digit
 5076 124a 5707 1212 	  dw branch_,paren_number.begin ; repeat
 5077               	paren_number.end:
 5078 124e FF0A      	  dw from_r_ ; address of the first non-convertable digit, a2.
 5079 1250 C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 93


 5080               	
 5081               	; ----------------------------------------------
 5082 1252 650C      	  _colon_header number_,"NUMBER"
 5083               	
 5084               	; doc{
 5085               	;
 5086               	; number  ( ca  -- d )  \ fig-Forth
 5087               	;
 5088               	; Convert a counted character string left at _ca_, to a signed
 5089               	; .double number, using the current numeric base. If a decimal
 5090               	; point is encountered in the text, its position will be given
 5091               	; in `dpl`, but no other effect occurs. If numeric conversion is
 5092               	; not possible, an error message will be given.
 5093               	;
 5094               	; }doc
 5095               	
 5096               	  ;dw cr_,dup_,count_,swap_,dot_,dot_ ; XXX INFORMER
 5097               	  ;dw dup_,count_,type_ ; XXX INFORMER
 5098 1254 C50C C50C 	  dw zero_,zero_,rot_ ; two zeros, initial value of the double number
 5098      1E0E 
 5099 125a E00B 570D 	  dw dup_,one_plus_,c_fetch_ ; get the first digit
 5099      230C 
 5100 1260 8306 2D   	  _literal '-'
 5101 1263 E90D      	  dw equals_ ; is it a minus sign?
 5102 1265 E00B F00A 	  dw dup_,to_r_ ; save the flag
 5103               	.if true==(-1)
 5104               	  dw abs_
 5105               	.endif
 5106 1269 810B      	  dw plus_
 5107               	  ; If the first digit is "-", the flag is 1,
 5108               	  ; and addr+1 points to the second digit.
 5109               	  ; If the first digit is not "-", the flag is
 5110               	  ; 0.  addr+0 remains the same, pointing to
 5111               	  ; the first digit.
 5112 126b 8D06 FFFF 	  dw lit_,-1 ; initial value of `dpl`
 5113               	number.begin:
 5114 126f 360D 490C 	  dw dpl_,store_
 5115 1273 1012      	  dw paren_number_ ; convert one digit after another until an invalid char occurs
 5116 1275 E00B 230C 	  dw dup_,c_fetch_ ; get the invalid digit
 5117               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5118               	  ;dw cr_,dup_,emit_; XXX INFORMER
 5119 1279 E10C E90D 	  dw b_l_,equals_ ; is it a blank?
 5120 127d 6C07 9412 	  dw question_branch_,number.a_blank
 5121               	  ; The invalid digit is not a blank.
 5122 1281 E00B 230C 	  dw dup_,c_fetch_ ; get the invalid digit again
 5123 1285 8306 2E   	  _literal '.'
 5124 1288 DC0D      	  dw not_equals_ ; not a decimal point?
 5125 128a C90C 0D0F 	  _question_error error.not_understood ; error if not
 5126               	  ; Decimal point found, set `dpl` to zero next time.
 5127 128e C50C      	  dw zero_
 5128 1290 5707 6F12 	  dw branch_,number.begin ; repeat
 5129               	number.a_blank:
 5130 1294 D40B      	  dw drop_ ; discard address
 5131 1296 FF0A      	  dw from_r_ ; pop the flag of "-" sign back
 5132 1298 6007 9E12 	  dw zero_branch_,number.end
 5133               	  ; The first digit is a "-" sign.
 5134 129c A70B      	  dw dnegate_
GAS LISTING solo_forth.z80s 			page 94


 5135               	number.end:
 5136 129e C00A      	  dw semicolon_s_
 5137               	
 5138               	; ----------------------------------------------
 5139 12a0 A212      	  _code_header upper_,"UPPER"
 5140               	
 5141               	; doc{
 5142               	;
 5143               	; upper  ( c -- c' )
 5144               	;
 5145               	; }doc
 5146               	
 5147 12a2 E1        	  pop hl
 5148 12a3 7D        	  ld a,l
 5149 12a4 CDAB 12   	  call upper.a
 5150 12a7 6F        	  ld l,a
 5151 12a8 C35E 05   	  jp push_hl
 5152               	
 5153               	upper.a:
 5154               	  ; Convert the ASCII char in the 'a' register to uppercase.
 5155 12ab FE61      	  cp 'a'
 5156 12ad D8        	  ret c
 5157 12ae FE7B      	  cp 'z'+1
 5158 12b0 D0        	  ret nc
 5159 12b1 EE20      	  xor 0x20 ; toggle bit 5
 5160 12b3 C9        	  ret
 5161               	
 5162               	; ----------------------------------------------
 5163 12b4 B612      	  _code_header uppers_,"UPPERS"
 5164               	
 5165               	; doc{
 5166               	;
 5167               	; uppers  ( ca len -- )
 5168               	;
 5169               	; }doc
 5170               	
 5171 12b6 D1        	  pop de
 5172 12b7 E1        	  pop hl
 5173               	uppers.do:
 5174 12b8 7A        	  ld a,d
 5175 12b9 B3        	  or e
 5176 12ba CA5F 05   	  jp z,next
 5177 12bd 7E        	  ld a,(hl)
 5178 12be CDAB 12   	  call upper.a
 5179 12c1 77        	  ld (hl),a
 5180 12c2 23        	  inc hl
 5181 12c3 1B        	  dec de
 5182 12c4 C3B8 12   	  jp uppers.do
 5183               	
 5184               	; ----------------------------------------------
 5185 12c7 650C      	  _colon_header defined_question_,"DEFINED?"
 5186               	
 5187               	; defined?  ( ca len -- wf )
 5188               	
 5189 12c9 3C13 BD0B 	  dw found_,nip_,zero_not_equals_
 5189      620B 
 5190 12cf C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 95


 5191               	
 5192               	; ----------------------------------------------
 5193 12d1 650C      	  _colon_header undefined_question_,"UNDEFINED?"
 5194               	
 5195               	; doc{
 5196               	;
 5197               	; undefined?  ( ca len -- wf )
 5198               	;
 5199               	; }doc
 5200               	
 5201 12d3 C712 570B 	  dw defined_question_,zero_equals_
 5202 12d7 C00A      	  dw semicolon_s_
 5203               	
 5204               	; ----------------------------------------------
 5205 12d9 DB12      	  _code_header dollar_store_,"$!"
 5206               	
 5207               	  ; [Code from DZX-Forth's `packed`.]
 5208               	
 5209               	; doc{
 5210               	;
 5211               	; $!  ( ca1 len1 ca2 -- )
 5212               	;
 5213               	; Store the string _ca1 len1_ as a counted string at _ca2_.  The
 5214               	; source and destination strings are permitted to overlap.
 5215               	;
 5216               	; An ambiguous condition exists if _len1_ is greater than 255 or
 5217               	; the buffer at _ca2_ is less than _len1_+1 characters.
 5218               	;
 5219               	; }doc
 5220               	
 5221               	  ; XXX TODO rename? `s!`, `packed`, `pack`, `uncount`...
 5222               	
 5223 12db D9        	  exx
 5224 12dc D1        	  pop de      ; de=ca2
 5225 12dd C1        	  pop bc      ; c=len1
 5226 12de E1        	  pop hl      ; hl=ca1
 5227 12df C5        	  push bc     ; len1
 5228 12e0 D5        	  push de     ; ca2
 5229 12e1 13        	  inc  de
 5230 12e2 CD1C 05   	  call move_block
 5231 12e5 E1        	  pop hl      ; ca2
 5232 12e6 D1        	  pop de      ; e=len1
 5233 12e7 73        	  ld (hl),e
 5234 12e8 D9        	  exx
 5235 12e9 DDE9      	  _jp_next
 5236               	
 5237               	; ----------------------------------------------
 5238 12eb 650C      	  _colon_header find_,"FIND"
 5239               	
 5240               	; doc{
 5241               	;
 5242               	; find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5243               	;
 5244               	; Find the definition named in the counted string at _ca_. If
 5245               	; the definition is not found after searching all the
 5246               	; vocabularies in the search order, return _ca_ and zero.  If
 5247               	; the definition is found, return its _cfa_. If the definition
GAS LISTING solo_forth.z80s 			page 96


 5248               	; is immediate, also return one (1); otherwise also return
 5249               	; minus-one (-1).
 5250               	;
 5251               	; }doc
 5252               	
 5253               	  ; : find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5254               	  ;   #vocs 0 do
 5255               	  ;     context i cells + @  ?dup
 5256               	  ;     if  @ (find) ?dup if  unloop exit  then  then
 5257               	  ;   loop  false  ;
 5258               	
 5259 12ed FD0C C50C 	  dw hash_vocs_,zero_,paren_do_
 5259      AD07 
 5260               	find.do:
 5261 12f3 2A0D 4408 	  dw context_,i_,cells_,plus_,fetch_
 5261      800D 810B 
 5261      1A0C 
 5262 12fd 2E0E      	  dw question_dup_ ; a vocabulary in the search order?
 5263 12ff 6007 1113 	  dw zero_branch_,find.loop ; if not, next
 5264               	  ; valid vocabulary in the search order
 5265 1303 1A0C      	  dw fetch_
 5266               	  ;dw cr_,paren_dot_quote_ ; XXX INFORMER
 5267               	  ;db 7,"(find){" ; XXX INFORMER
 5268               	  ;dw cr_,dot_s_ ; XXX INFORMER
 5269 1305 6508      	  dw paren_find_
 5270               	  ;dw cr_,paren_dot_quote_ ; XXX INFORMER
 5271               	  ;db 7,"}(find)" ; XXX INFORMER
 5272               	  ;dw cr_,dot_s_ ; XXX INFORMER
 5273 1307 2E0E      	  dw question_dup_ ; word found in the vocabulary?
 5274 1309 6007 1113 	  dw zero_branch_,find.loop ; if not, try the next vocabulary
 5275 130d D60A 4A1D 	  dw unloop_,exit_
 5276               	find.loop:
 5277 1311 7807 F312 	  dw paren_loop_,find.do,false_
 5277      D10C 
 5278 1317 C00A      	  dw semicolon_s_
 5279               	
 5280               	; ----------------------------------------------
 5281 1319 1A14      	  _variable_header find_dollar_,"FIND$"
 5282               	
 5283               	  ; XXX TODO use an unused address above `pad` instead?
 5284               	  ; XXX TODO rename to `word$`?
 5285               	  ; XXX TODO use also in `word`?
 5286               	
 5287 131b 0000 0000 	  ds max_word_length+2
 5287      0000 0000 
 5287      0000 0000 
 5287      0000 0000 
 5287      0000 0000 
 5288               	
 5289               	; ----------------------------------------------
 5290 133c 650C      	  _colon_header found_,"FOUND"
 5291               	
 5292               	; doc{
 5293               	;
 5294               	; found  ( ca len --- ca 0 | cfa 1 | cfa -1 )
 5295               	;
 5296               	; }doc
GAS LISTING solo_forth.z80s 			page 97


 5297               	
 5298               	  ; XXX TODO factor
 5299               	
 5300 133e 1913      	  dw find_dollar_
 5301 1340 8306 21   	  _literal max_word_length+2
 5302 1343 5611      	  dw erase_ ; make sure there will be a null at the end
 5303 1345 1913 D912 	  dw find_dollar_,dollar_store_
 5304 1349 1913 0710 	  dw find_dollar_,count_,uppers_
 5304      B412 
 5305 134f 1913 EB12 	  dw find_dollar_,find_
 5306 1353 C00A      	  dw semicolon_s_
 5307               	
 5308               	; ----------------------------------------------
 5309 1355 650C      	  _colon_header paren_abort_,"(ABORT)"
 5310               	
 5311 1357 0E16      	  dw abort_
 5312 1359 C00A      	  dw semicolon_s_
 5313               	
 5314               	; ----------------------------------------------
 5315 135b 1A14      	  _variable_header error_number_,"ERROR#"
 5316               	
 5317 135d 0000      	  dw 0
 5318               	
 5319               	; ----------------------------------------------
 5320 135f 1A14      	  _two_variable_header error_pos_,"ERROR-POS"
 5321               	
 5322 1361 0000 0000 	  dw 0,0
 5323               	
 5324               	; ----------------------------------------------
 5325 1365 650C      	  _colon_header error_to_line_,"ERROR>LINE"
 5326               	
 5327               	; doc{
 5328               	;
 5329               	; error>line  ( n1 -- n2 )
 5330               	;
 5331               	; Convert an error number to its correspondent line offset. This
 5332               	; is used in order to skip the first line of screens and use
 5333               	; them as screen headers as usual.
 5334               	;
 5335               	; }doc
 5336               	
 5337 1367 E00B 570D 	  dw dup_,one_plus_,one_,paren_do_
 5337      C90C AD07 
 5338               	error_to_number.do:
 5339 136f 4408      	  dw i_
 5340 1371 8306 10   	  _literal 16
 5341 1374 7B17 570B 	  dw mod_,zero_equals_
 5342               	.if true==(-1)
 5343               	  dw abs_
 5344               	.endif
 5345 1378 810B      	  dw plus_
 5346 137a 7807 6F13 	  dw paren_loop_,error_to_number.do
 5347 137e C00A      	  dw semicolon_s_
 5348               	
 5349               	; ----------------------------------------------
 5350 1380 650C      	  _colon_header error_,"ERROR"
 5351               	
GAS LISTING solo_forth.z80s 			page 98


 5352 1382 E00B 5B13 	  dw dup_,error_number_,store_ ; save the error number
 5352      490C 
 5353 1388 140D 1A0C 	  dw warning_,fetch_,zero_less_than_ ; custom error routine?
 5353      6D0B 
 5354 138e 6C07 5713 	  dw question_branch_,paren_abort_pfa ; if so, branch to it
 5355               	
 5356               	error.message:
 5357 1392 900D 0710 	  dw here_,count_,type_ ; last parsed word ; XXX TODO adapt to `parse-word`
 5357      1A10 
 5358 1398 4D10      	  dw paren_dot_quote_
 5359 139a 023F 20   	  db 2,"? "
 5360 139d D117      	  dw message_
 5361 139f 0B0D 1A0C 	  dw sp0_,fetch_,sp_store_
 5361      A60A 
 5362 13a5 1E0D 1A0C 	  dw blk_,fetch_,question_dup_
 5362      2E0E 
 5363 13ab 6007 B913 	  dw zero_branch_,error.end
 5364 13af 210D 1A0C 	  dw to_in_,fetch_
 5365 13b3 D90B      	  dw swap_
 5366 13b5 5F13 3B0C 	  dw error_pos_,two_store_
 5367               	error.end:
 5368 13b9 A115      	  dw quit_
 5369               	
 5370               	; ----------------------------------------------
 5371 13bb 650C      	  _colon_header id_dot_,"ID."
 5372               	
 5373 13bd EE0E 1A10 	  dw nfa_to_string_,type_,space_
 5373      260E 
 5374 13c3 C00A      	  dw semicolon_s_
 5375               	
 5376               	; ----------------------------------------------
 5377 13c5 650C      	  _colon_header header_,"HEADER"
 5378               	
 5379               	; header  ( "name" -- )
 5380               	
 5381               	  ; XXX TODO -- make sure `current` is searched? else duplicated
 5382               	  ; definitions would not be remarked.
 5383               	  ;
 5384               	  ; the only secure method is:
 5385               	  ;
 5386               	  ;   get-order n>r also current @ context ! defined nr> set-order
 5387               	  ;
 5388               	  ; but that would make the compilation slower.
 5389               	  ; i think it can be left to the programmer.
 5390               	
 5391 13c7 8819      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5392 13c9 EA16 5F17 	  dw abs_,star_,question_dup_ ; ( 0 | cfa cfa )
 5392      2E0E 
 5393 13cf 6007 DC13 	  dw zero_branch_,header.continue
 5394               	  ; The word is not unique.
 5395 13d3 620E      	  dw cfa_to_nfa_
 5396               	
 5397 13d5 BB13      	  dw id_dot_
 5398 13d7 8306 04D1 	  _message error.not_unique
 5398      17
 5399               	header.continue:
 5400               	
GAS LISTING solo_forth.z80s 			page 99


 5401               	    ; XXX TODO adapt to `parse-word`; now it works because
 5402               	    ; `defined` still uses `word`, that leaves the string at
 5403               	    ; `here`.
 5404               	
 5405 13dc 900D 0710 	  dw here_,count_
 5406               	  ; XXX TODO error if name is too long? (see lina)
 5407 13e0 110D 1A0C 	  dw width_,fetch_,min_
 5407      0E17 
 5408 13e6 EA06 C40B 	  dw save_string_,tuck_ ; ( len ca len )
 5409 13ea C90C 9806 	  _names_bank
 5410 13ee 900D 8F0A 	  dw here_,comma_np_ ; store a pointer to the cfa
 5411 13f2 460E 8F0A 	  dw latest_,comma_np_ ; link field
 5412               	  ; Now `np` contains the address of the nfa.
 5413 13f6 7F0A D912 	  dw np_fetch_,dollar_store_ ; store the name
 5414 13fa 7F0A 2D0D 	  dw np_fetch_,current_,fetch_,store_ ; update contents of `latest` in the current vocabulary
 5414      1A0C 490C 
 5415 1402 A00F      	  dw smudge_ ; set the smudge bit and page the default bank
 5416 1404 570D 770A 	  dw one_plus_,np_,plus_store_ ; update the names pointer with the length+1
 5416      F00B 
 5417 140a 900D 5E0D 	  dw here_,two_plus_,comma_ ; compile the pfa into code field
 5417      B20D 
 5418 1410 C00A      	  dw semicolon_s_
 5419               	
 5420               	; ----------------------------------------------
 5421 1412 650C      	  _colon_header create_,"CREATE"
 5422               	
 5423 1414 C513 A00F 	  dw header_,smudge_
 5424 1418 C90F      	  dw paren_semicolon_code_
 5425               	do_create:
 5426 141a 13        	  inc de  ; de=pfa
 5427 141b D5        	  push de
 5428 141c DDE9      	  _jp_next
 5429               	
 5430               	; ----------------------------------------------
 5431 141e 650C      	  _colon_header code_,"CODE"
 5432               	
 5433 1420 C513      	  dw header_
 5434 1422 030F      	  dw store_csp_
 5435 1424 FD05 5906 	  dw also_,assembler_,asm_
 5435      8205 
 5436 142a C00A      	  dw semicolon_s_
 5437               	
 5438               	; ----------------------------------------------
 5439 142c 2E14      	  _code_header compare_,"COMPARE"
 5440               	
 5441               	  ; ANS Forth
 5442               	  ; Adapted from DZX-Forth
 5443               	
 5444               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5445               	  ; because there will be no option to change it.
 5446               	  ; Use shorter internal code instead.
 5447               	  ; When case insensitive comparation is needed,
 5448               	  ; `uppers` can be used.
 5449               	
 5450 142e D1        	  pop de      ; de = len2
 5451 142f E1        	  pop hl      ; hl = ca2
 5452 1430 E3        	  ex (sp),hl  ; hl = len1 ; ( ca1 ca2 )
GAS LISTING solo_forth.z80s 			page 100


 5453 1431 7A        	  ld a,d
 5454 1432 BC        	  cp h
 5455 1433 2002      	  jr nz,compare.lengths
 5456 1435 7B        	  ld a,e
 5457 1436 BD        	  cp l
 5458               	compare.lengths:
 5459               	  ; cy = string2 is longer than string1?
 5460 1437 3801      	  jr c,compare.ready
 5461 1439 EB        	  ex de,hl
 5462               	compare.ready:
 5463               	  ; de = length of the short string
 5464               	  ; hl = length of the long string
 5465 143a 69        	  ld l,c
 5466 143b 60        	  ld h,b ; hl = Forth IP
 5467 143c C1        	  pop bc ; bc = ca2
 5468 143d E3        	  ex (sp),hl ; hl = ca1 ; save Forth IP
 5469 143e F5        	  push af ; save carry flag
 5470               	compare.compare_strings: equ $+1 ; XXX not used
 5471 143f CD57 14   	  call compare_strings_case_sensitive
 5472 1442 2003      	  jr nz,compare.no_match
 5473               	
 5474               	compare.match:
 5475               	  ; The smaller string matches.
 5476 1444 F1        	  pop af ; restore flags
 5477 1445 1801      	  jr compare.end
 5478               	
 5479               	compare.no_match:
 5480               	  ; The smaller string does not match.
 5481 1447 C1        	  pop bc ; useless carry flag
 5482               	
 5483               	compare.end:
 5484 1448 C1        	  pop bc ; restore Forth IP
 5485 1449 2101 00   	  ld hl,1
 5486 144c DA5E 05   	  jp c,push_hl
 5487 144f 2B        	  dec hl ; 0
 5488 1450 CA5E 05   	  jp z,push_hl ; string1 equals string2
 5489 1453 2B        	  dec hl ; -1
 5490 1454 C35E 05   	  jp push_hl
 5491               	
 5492               	compare_strings_case_sensitive:
 5493               	  ; Used by 'compare' and 'search'.
 5494               	  ; Input:
 5495               	  ;   HL = a1
 5496               	  ;   BC = a2
 5497               	  ;   DE = len
 5498               	  ; Output:
 5499               	  ;   Z = match?
 5500               	  ; [Code from DZX-Forth.]
 5501 1457 7B        	  ld a,e
 5502 1458 B2        	  or d
 5503 1459 C8        	  ret z
 5504 145a 0A        	  ld a,(bc)
 5505 145b BE        	  cp (hl)
 5506 145c C0        	  ret nz
 5507 145d 23        	  inc hl
 5508 145e 03        	  inc bc
 5509 145f 1B        	  dec de
GAS LISTING solo_forth.z80s 			page 101


 5510 1460 C357 14   	  jp compare_strings_case_sensitive
 5511               	
 5512               	; ----------------------------------------------
 5513 1463 6514      	  _code_header search_,"SEARCH"
 5514               	
 5515               	  ; search  ( ca1 len1 ca2 len2 -- ca3 len3 -1 | ca1 len1 0 )
 5516               	
 5517               	  ; ANS Forth
 5518               	
 5519               	  ; Adapted from DZX-Forth.
 5520               	  ;
 5521               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5522               	  ; because there will be no option to change it.
 5523               	  ; Use shorter internal code instead.
 5524               	  ; When case insensitive comparation is needed,
 5525               	  ; `uppers` can be used.
 5526               	
 5527 1465 D9        	  exx ; save Forth IP
 5528 1466 E1        	  pop hl
 5529 1467 2287 14   	  ld (search.string_2_len),hl
 5530 146a 7D        	  ld a,l
 5531 146b B4        	  or h ; len2 is zero?
 5532 146c C1        	  pop bc ; ca2
 5533 146d E1        	  pop hl ; len1
 5534 146e 22A0 14   	  ld (search.string_1_len),hl
 5535 1471 EB        	  ex de,hl ; de = len1
 5536 1472 E1        	  pop hl ; ca1
 5537 1473 22A4 14   	  ld (search.string_1_addr),hl
 5538 1476 CA93 14   	  jp z,search.match ; if len2 is zero, match
 5539 1479 2B        	  dec hl
 5540 147a 13        	  inc de
 5541               	search.1:
 5542 147b 23        	  inc hl ; address of current char of string 1
 5543 147c 1B        	  dec de ; remaining length of string 1
 5544 147d 7B        	  ld a,e
 5545 147e B2        	  or d ; end of string 1?
 5546 147f CA9C 14   	  jp z,search.no_match
 5547               	; XXX OLD -- already commented out in DX-Forth:
 5548               	; ld a,(bc)
 5549               	; cp  (hl)
 5550               	; jp nz,search.1
 5551 1482 D5        	  push de
 5552 1483 C5        	  push bc
 5553 1484 E5        	  push hl
 5554 1485 EB        	  ex de,hl
 5555               	search.string_2_len equ $+1
 5556 1486 2100 00   	  ld hl,0  ; length of the second string
 5557 1489 EB        	  ex de,hl
 5558 148a CD57 14   	  call compare_strings_case_sensitive
 5559 148d E1        	  pop hl
 5560 148e C1        	  pop bc
 5561 148f D1        	  pop de
 5562 1490 C27B 14   	  jp nz,search.1
 5563               	
 5564               	search.match:
 5565 1493 0101 00   	  ld bc,true
 5566               	search.end:
GAS LISTING solo_forth.z80s 			page 102


 5567 1496 E5        	  push hl
 5568 1497 D5        	  push de
 5569 1498 C5        	  push bc
 5570 1499 D9        	  exx ; restore Forth IP
 5571 149a DDE9      	  _jp_next
 5572               	
 5573               	search.no_match:
 5574 149c 0100 00   	  ld bc,false
 5575               	search.string_1_len equ $+1
 5576 149f 2100 00   	  ld hl,0  ; length of the first string
 5577 14a2 EB        	  ex de,hl
 5578               	search.string_1_addr equ $+1
 5579 14a3 2100 00   	  ld hl,0  ; address of the first string
 5580 14a6 C396 14   	  jp search.end
 5581               	
 5582               	; ----------------------------------------------
 5583 14a9 650C      	  _colon_header bracket_compile_,"[COMPILE]",immediate
 5584               	
 5585 14ab B319 BE0D 	  dw tick_,compile_comma_
 5586 14af C00A      	  dw semicolon_s_
 5587               	
 5588               	; ----------------------------------------------
 5589 14b1 650C      	  _colon_header s_literal_,"SLITERAL",immediate
 5590               	
 5591               	  ; : sliteral  ( ca len -- )  compile slit s,  ; immediate
 5592               	
 5593 14b3 680F 5F06 	  dw compile_,s_lit_,s_comma_
 5593      A00D 
 5594 14b9 C00A      	  dw semicolon_s_
 5595               	
 5596               	; ----------------------------------------------
 5597 14bb 650C      	  _colon_header c_literal_,"CLITERAL",immediate
 5598               	
 5599               	; doc{
 5600               	;
 5601               	; cliteral  ( b -- )  \ I
 5602               	;
 5603               	; If compiling, then compile the stack value _b_ as a 8-bit literal.
 5604               	; `cliteral` does the same than `literal` but saves one byte of
 5605               	; dictionary space.
 5606               	;
 5607               	; }doc
 5608               	
 5609               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5610               	
 5611               	  .if 1 ; XXX OLD
 5612 14bd 1D0F      	    dw comp_question_
 5613 14bf 6007 C914 	    dw zero_branch_,c_literal.end
 5614 14c3 680F 8306 	    dw compile_,c_lit_,c_comma_
 5614      C60D 
 5615               	c_literal.end:
 5616               	  .else ; XXX NEW
 5617               	    dw question_comp_
 5618               	    dw compile_,c_lit_,comma_
 5619               	  .endif
 5620 14c9 C00A      	  dw semicolon_s_
 5621               	
GAS LISTING solo_forth.z80s 			page 103


 5622               	; ----------------------------------------------
 5623 14cb 650C      	  _colon_header literal_,"LITERAL",immediate
 5624               	
 5625               	; doc{
 5626               	;
 5627               	; literal  ( n -- )  \ fig-Forth, I
 5628               	;
 5629               	; If compiling, then compile the stack value _n_ as a 16-bit literal.
 5630               	;
 5631               	; }doc
 5632               	
 5633               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5634               	
 5635               	  .if 1 ; XXX OLD
 5636 14cd 1D0F      	    dw comp_question_
 5637 14cf 6007 D914 	    dw zero_branch_,literal.end
 5638 14d3 680F 8D06 	    dw compile_,lit_,comma_
 5638      B20D 
 5639               	literal.end:
 5640               	  .else ; XXX NEW
 5641               	    dw question_comp_
 5642               	    dw compile_,lit_,comma_
 5643               	  .endif
 5644 14d9 C00A      	  dw semicolon_s_
 5645               	
 5646               	; ----------------------------------------------
 5647 14db 650C      	  _colon_header two_literal_,"2LITERAL",immediate
 5648               	
 5649               	; doc{
 5650               	;
 5651               	; 2literal  ( d -- )  \ I
 5652               	;
 5653               	; If compiling, then compile the stack value _d_ as a 32-bit literal.
 5654               	;
 5655               	; }doc
 5656               	
 5657               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5658               	
 5659               	  .if 1 ; XXX OLD
 5660 14dd 1D0F      	    dw comp_question_
 5661 14df 6007 E914 	    dw zero_branch_,two_literal.end
 5662 14e3 D90B CB14 	    dw swap_,literal_,literal_
 5662      CB14 
 5663               	two_literal.end:
 5664               	  .else ; XXX NEW
 5665               	    ; XXX TODO -- dlit
 5666               	    dw question_comp_
 5667               	    dw swap_,literal_,literal_
 5668               	  .endif
 5669 14e9 C00A      	  dw semicolon_s_
 5670               	
 5671               	; ----------------------------------------------
 5672 14eb 650C      	  _colon_header depth_,"DEPTH"
 5673               	
 5674 14ed 9D0A 0B0D 	  dw sp_fetch_,sp0_,fetch_,minus_,lit_,-2,slash_
 5674      1A0C D20D 
 5674      8D06 FEFF 
GAS LISTING solo_forth.z80s 			page 104


 5674      7317 
 5675 14fb C00A      	  dw semicolon_s_
 5676               	
 5677               	; ----------------------------------------------
 5678 14fd 650C      	  _colon_header question_stack_,"?STACK"
 5679               	
 5680               	; doc{
 5681               	;
 5682               	; ?stack  ( -- )  \ fig-Forth
 5683               	;
 5684               	; Issue an error message if the stack is out of bounds.
 5685               	;
 5686               	; }doc
 5687               	
 5688 14ff 9D0A      	  dw sp_fetch_
 5689 1501 0B0D 1A0C 	  dw sp0_,fetch_
 5690 1505 D90B F60D 	  dw swap_,less_than_
 5691 1509 CD0C 0D0F 	  _question_error error.stack_empty
 5692 150d 9D0A      	  dw sp_fetch_
 5693 150f 8D06 7601 	  dw lit_,data_stack_limit
 5694 1513 F60D      	  dw less_than_
 5695 1515 8306 070D 	  _question_error error.full_stack
 5695      0F
 5696 151a C00A      	  dw semicolon_s_
 5697               	
 5698               	; ----------------------------------------------
 5699 151c 650C      	  _colon_header interpret_,"INTERPRET"
 5700               	
 5701               	; doc{
 5702               	;
 5703               	; interpret  ( -- )
 5704               	;
 5705               	; The outer text interpreter which sequentially executes or
 5706               	; compiles text from the input stream (terminal or disk)
 5707               	; depending on `state`. if the word name cannot be found after a
 5708               	; search of the `context` search order it is converted to a
 5709               	; number according to the current `base`.  That also failing, an
 5710               	; error message echoing the name with a "?" will be given.
 5711               	;
 5712               	; }doc
 5713               	
 5714               	interpret.begin:
 5715               	
 5716               	  ; XXX TODO -- finish
 5717               	
 5718               	  ; XXX TODO -- In order to change the behaviour of `literal`,
 5719               	  ; `2literal` and `cliteral` (make them give an error in
 5720               	  ; interpretation mode), `interpret` must be modified.
 5721               	
 5722 151e FD14      	  dw question_stack_
 5723               	  ; dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5724 1520 8819      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5725               	  ; dw cr_,dot_s_ ; XXX INFORMER
 5726               	  ; _echo 'In interpret after defined ' ; XXX INFORMER
 5727               	  ; dw hex_,dot_s_,decimal_,key_,drop_ ; XXX INFORMER
 5728 1522 2E0E      	  dw question_dup_ ; found?
 5729               	  ; dw lit_,4,border_,dot_s_,key_,drop_ ; XXX INFORMER
GAS LISTING solo_forth.z80s 			page 105


 5730 1524 6007 3E15 	  dw zero_branch_,interpret.word_not_found
 5731               	
 5732               	  ; Found ( cfa 1 | cfa -1 )
 5733               	  ; Immediate word:     ( cfa  1 )
 5734               	  ; Non-immediate word: ( cfa -1 )
 5735 1528 1D0F      	  dw comp_question_
 5736               	  ; ( cfa 1 state | cfa -1 state )
 5737               	.if true==1
 5738               	  ; Compiling an immediate word:     ( cfa  1 1 )
 5739               	  ; Compiling a non-immediate word:  ( cfa -1 1 )
 5740               	  ; Executing an immediate word:     ( cfa  1 0 )
 5741               	  ; Executing a non-immediate word:  ( cfa -1 0 )
 5742 152a 9B0B      	  dw negate_
 5743               	.endif
 5744               	  ; Compiling an immediate word:     ( cfa  1 -1 )
 5745               	  ; Compiling a non-immediate word:  ( cfa -1 -1 )
 5746               	  ; Executing an immediate word:     ( cfa  1  0 )
 5747               	  ; Executing a non-immediate word:  ( cfa -1  0 )
 5748 152c E90D      	  dw equals_ ; compiling a non-immediate word?
 5749 152e 6007 3815 	  dw zero_branch_,interpret.execute
 5750               	
 5751               	  ; Compiling a non-immediate word  ( cfa )
 5752 1532 BE0D      	  dw compile_comma_
 5753 1534 5707 1E15 	  dw branch_,interpret.begin
 5754               	
 5755               	interpret.execute:
 5756               	  ; Executing or immediate ( cfa )
 5757               	  ;_echo 'about to execute cfa ' ; XXX INFORMER
 5758               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5759               	;  dw dup_,u_dot_,key_,drop_ ; XXX INFORMER
 5760 1538 1C07      	  dw execute_
 5761               	  ;dw zero_,border_ ; XXX INFORMER
 5762 153a 5707 1E15 	  dw branch_,interpret.begin
 5763               	
 5764               	interpret.word_not_found:
 5765               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5766               	  ; try to convert the text to a number
 5767               	  ; ( ca )
 5768               	  ;_echo 'about to convert to number ' ; XXX INFORMER
 5769               	  ;dw lit_,5,border_,key_,drop_ ; XXX INFORMER
 5770 153e 5212      	  dw number_
 5771               	  ;dw zero_,border_ ; XXX INFORMER
 5772 1540 360D 1A0C 	  dw dpl_,fetch_,one_plus_ ; is there a decimal point?
 5772      570D 
 5773 1546 6007 5015 	  dw zero_branch_,interpret.16bit_number
 5774               	  ; decimal point detected, so it's a double, 32-bit, number
 5775               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5776 154a DB14      	  dw two_literal_
 5777 154c 5707 1E15 	  dw branch_,interpret.begin
 5778               	
 5779               	interpret.16bit_number:
 5780               	  ;dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5781               	  ; no decimal point, so it's a 16-bit number
 5782 1550 D40B      	  dw drop_ ; discard high order part of the double number
 5783               	  ; XXX TODO use `c_literal` for 8-bit values.
 5784 1552 CB14      	  dw literal_
 5785 1554 5707 1E15 	  dw branch_,interpret.begin
GAS LISTING solo_forth.z80s 			page 106


 5786               	
 5787               	; ----------------------------------------------
 5788 1558 650C      	  _colon_header immediate_,"IMMEDIATE"
 5789               	
 5790 155a 460E      	  dw latest_
 5791 155c 8306 40   	  _literal precedence_mask
 5792               	  ; XXX TODO factor `toggle-names'?
 5793 155f C90C 9806 	  _names_bank
 5794 1563 110C      	  dw toggle_
 5795 1565 C50C 9806 	  _default_bank
 5796 1569 C00A      	  dw semicolon_s_
 5797               	
 5798               	; ----------------------------------------------
 5799 156b 650C      	  _colon_header vocabulary_,"VOCABULARY"
 5800               	
 5801               	; doc{
 5802               	;
 5803               	; vocabulary  ( "name" -- )
 5804               	;
 5805               	; Create a vocabulary with the parsed "name" as its name. The
 5806               	; run-time efect of `name` is to replace `context`, the top
 5807               	; vocabulary in the search order.
 5808               	;
 5809               	; }doc
 5810               	
 5811 156d 1214      	  dw create_
 5812 156f C50C B20D 	  dw zero_,comma_ ; space for the nfa of the latest word defined in the vocabulary
 5813 1573 900D      	  dw here_ ; address of vocabulary link
 5814 1575 1A0D 1A0C 	  dw voc_link_,fetch_,comma_ ; compile the current content of `voc-link`
 5814      B20D 
 5815 157b 1A0D 490C 	  dw voc_link_,store_ ; update `voc-link` with the link in this vocabulary
 5816               	
 5817 157f C90F      	  dw paren_semicolon_code_
 5818               	
 5819               	do_vocabulary:
 5820 1581 CDF8 0F   	  call do_does
 5821               	
 5822               	  ; The next words are to be executed when the vocabulary is invoked.
 5823               	  ;_echo "Was here 1"
 5824               	  ;dw lit_,3,border_,key_,drop_ ; XXX INFORMER
 5825 1584 2A0D      	  dw context_
 5826               	  ;_echo "Was here 2"
 5827               	  ;dw lit_,4,border_,key_,drop_ ; XXX INFORMER
 5828 1586 490C      	  dw store_
 5829               	  ;_echo "Was here 3"
 5830               	  ;dw lit_,5,border_,key_,drop_ ; XXX INFORMER
 5831 1588 C00A      	  dw semicolon_s_
 5832               	
 5833               	; ----------------------------------------------
 5834 158a 650C      	  _colon_header definitions_,"DEFINITIONS"
 5835               	
 5836 158c 2A0D 1A0C 	  dw context_,fetch_
 5837 1590 2D0D 490C 	  dw current_,store_
 5838 1594 C00A      	  dw semicolon_s_
 5839               	
 5840               	; ----------------------------------------------
 5841 1596 650C      	  _colon_header paren_,"(",immediate
GAS LISTING solo_forth.z80s 			page 107


 5842               	
 5843 1598 8306 29   	  _literal ')'
 5844               	  ; XXX TODO use `skip`?
 5845 159b A711 C71B 	  dw parse_,two_drop_
 5846 159f C00A      	  dw semicolon_s_
 5847               	
 5848               	; ----------------------------------------------
 5849 15a1 650C      	  _colon_header quit_,"QUIT"
 5850               	
 5851               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5852 15a3 1E0D FD0B 	  dw blk_,off_
 5853 15a7 900F      	  dw left_bracket_
 5854               	quit.do:
 5855               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5856 15a9 0E0D 1A0C 	  dw rp0_,fetch_,rp_store_
 5856      B80A 
 5857               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5858 15af CD09      	  dw cr_
 5859               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5860 15b1 FD10      	  dw query_
 5861               	  ; XXX FIXME never reached before the crash
 5862               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5863 15b3 1C15      	  dw interpret_
 5864 15b5 1D0F      	  dw comp_question_
 5865 15b7 6C07 A915 	  dw question_branch_,quit.do
 5866 15bb 4D10      	  dw paren_dot_quote_
 5867 15bd 026F 6B   	  db 2,"ok"
 5868 15c0 5707 A915 	  dw branch_,quit.do
 5869               	
 5870               	.if show_version
 5871               	
 5872               	; ----------------------------------------------
 5873               	  _constant_header version_release_,"VERSION-RELEASE"
 5874               	
 5875               	  ; XXX TMP for debugging
 5876               	
 5877               	  dw version_release_variable
 5878               	
 5879               	; ----------------------------------------------
 5880               	  _colon_header dot_version_,".VERSION"
 5881               	
 5882               	  ; XXX TMP
 5883               	
 5884               	  dw lit_,version_status_variable,fetch_,emit_
 5885               	  _literal '-'
 5886               	  dw emit_
 5887               	  dw lit_,version_branch_variable,fetch_
 5888               	  dw s_to_d_,less_hash_,hash_,hash_,hash_greater_,type_
 5889               	  _literal '-'
 5890               	  dw emit_
 5891               	  dw lit_,version_release_variable,two_fetch_
 5892               	  ; XXX TODO use `du.` when available (it's in the library disk)
 5893               	  dw less_hash_,hash_s_,hash_greater_,type_
 5894               	  dw semicolon_s_
 5895               	
 5896               	.endif
 5897               	
GAS LISTING solo_forth.z80s 			page 108


 5898               	; ----------------------------------------------
 5899 15c4 650C      	  _colon_header greeting_,"GREETING"
 5900               	
 5901               	; doc{
 5902               	;
 5903               	; greeting  ( -- )
 5904               	;
 5905               	; }doc
 5906               	
 5907               	.if show_version
 5908               	  ; XXX TODO
 5909               	  dw paren_dot_quote_
 5910               	;  _string "Solo Forth\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5911               	  _string "Solo Forth\rVersion "
 5912               	  ; XXX TMP show the version and the free dictionary memory:
 5913               	  dw dot_version_,cr_
 5914               	;  _string "\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5915               	.else
 5916 15c6 4D10      	  dw paren_dot_quote_
 5917 15c8 32        	  db greeting.string_0_end-$-1
 5918 15c9 536F 6C6F 	  db "Solo Forth",carriage_return_char
 5918      2046 6F72 
 5918      7468 0D
 5919 15d4 7F20 3230 	  db copyright_char," 2015 Marcos Cruz",carriage_return_char
 5919      3135 204D 
 5919      6172 636F 
 5919      7320 4372 
 5919      757A 0D
 5920 15e7 2870 726F 	  db "(programandala.net)",carriage_return_char
 5920      6772 616D 
 5920      616E 6461 
 5920      6C61 2E6E 
 5920      6574 290D 
 5921               	greeting.string_0_end:
 5922               	  ; dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5923               	  ; XXX TMP show the free memory, during development only
 5924 15fb E21B 2E1B 	  dw unused_,u_dot_
 5925 15ff 4D10      	  dw paren_dot_quote_
 5926 1601 0A        	  db greeting.string_1_end-$-1
 5927 1602 6279 7465 	  db "bytes free"
 5927      7320 6672 
 5927      6565 
 5928               	greeting.string_1_end:
 5929               	.endif
 5930 160c C00A      	  dw semicolon_s_
 5931               	
 5932               	; ----------------------------------------------
 5933 160e 650C      	  _colon_header abort_,"ABORT"
 5934               	
 5935               	
 5936 1610 0B0D 1A0C 	  dw sp0_,fetch_,sp_store_
 5936      A60A 
 5937               	boot:
 5938 1616 960C      	  dw noop_ ; patched by `turnkey` ; XXX OLD
 5939 1618 A115      	  dw quit_
 5940               	
 5941               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 109


 5942 161a A00C      	  _constant_header boot_,"BOOT"
 5943               	
 5944 161c 1616      	  dw boot
 5945               	
 5946               	; ----------------------------------------------
 5947 161e 650C      	  _colon_header warm_,"WARM"
 5948               	
 5949               	  ; dw sp0_,fetch_,sp_store_
 5950               	  ; dw noop_ ; patched by `turnkey` ; XXX OLD
 5951               	  ; dw quit_
 5952 1620 B61B 0E16 	  dw page_,abort_
 5953 1624 C00A      	  dw semicolon_s_
 5954               	
 5955               	warm_start:
 5956               	
 5957 1626 ED73 C31B 	  ld (system_stack_pointer),sp ; save the system stack pointer
 5958               	;  XXX TODO this works too
 5959               	;  ld hl,abort_
 5960               	;  ld ix,next ; restore IX
 5961               	;  jp next2
 5962               	
 5963 162a CDB4 16   	  call common_start
 5964 162d 1E16      	  dw warm_ ; XXX FIXME -- this works
 5965               	;  dw abort_ ; XXX FIXME -- this crashes the system, why?
 5966               	
 5967               	; ----------------------------------------------
 5968 162f 650C      	  _colon_header cold_,"COLD"
 5969               	
 5970               	  ; Init the names pointer.
 5971 1631 8D06 3000 	  dw lit_,names_pointer_init_value,fetch_
 5971      1A0C 
 5972 1637 8D06 2E00 	  dw lit_,names_pointer,store_
 5972      490C 
 5973               	
 5974               	  ; Init the disk buffers.
 5975 163d 1918      	  dw empty_buffers_
 5976               	
 5977               	  ; Init the circular string buffer.
 5978 163f 0E07      	  dw empty_csb_
 5979               	
 5980               	  ; Init the user variables.
 5981 1641 8D06 1400 	  dw lit_,default_user_variables_start ; from
 5982 1645 8D06 0E00 	  dw lit_,user_variables_pointer,fetch_ ; to
 5982      1A0C 
 5983 164b 8306 18   	  _literal default_user_variables_end-default_user_variables_start ; length
 5984 164e E609      	  dw cmove_
 5985               	
 5986               	  ; Restore the vocabularies to the default state.
 5987 1650 8D06 0600 	  dw lit_,latest_nfa_in_root_voc.init_value,fetch_
 5987      1A0C 
 5988 1656 8D06 4F06 	  dw lit_,root_pfa,store_
 5988      490C 
 5989 165c 8D06 0800 	  dw lit_,latest_nfa_in_forth_voc.init_value,fetch_
 5989      1A0C 
 5990 1662 8D06 5506 	  dw lit_,forth_pfa,store_
 5990      490C 
 5991 1668 8D06 0A00 	  dw lit_,latest_nfa_in_assembler_voc.init_value,fetch_
GAS LISTING solo_forth.z80s 			page 110


 5991      1A0C 
 5992 166e 8D06 5B06 	  dw lit_,assembler_pfa,store_
 5992      490C 
 5993 1674 8D06 0C00 	  dw lit_,voc_link.init_value,fetch_
 5993      1A0C 
 5994 167a 8D06 1C0D 	  dw lit_,voc_link_pfa,store_
 5994      490C 
 5995               	
 5996 1680 1906 5306 	  dw only_,forth_,definitions_  ; search order
 5996      8A15 
 5997 1686 B30F      	  dw hex_      ; base ; XXX TMP for debugging
 5998               	
 5999 1688 0C09 721B 	  dw display_,colors0_,page_,greeting_
 5999      B61B C415 
 6000               	
 6001               	  ;dw cr_,lit_,precedence_mask,dot_,cr_ ; XXX TMP for debugging
 6002               	  ;dw lit_,smudge_mask,dot_,cr_ ; XXX TMP for debugging
 6003 1690 CD09 8D06 	  dw cr_,lit_,root_forth_nfa,c_fetch_,dot_,cr_ ; XXX TMP for debugging
 6003      0D00 230C 
 6003      1E1B CD09 
 6004 169c 8D06 800D 	  dw lit_,next_screen_nfa,c_fetch_,dot_,cr_ ; XXX TMP for debugging
 6004      230C 1E1B 
 6004      CD09 
 6005               	
 6006 16a6 0E16      	  dw abort_
 6007               	
 6008               	cold_start:
 6009 16a8 ED73 C31B 	  ld (system_stack_pointer),sp ; save the system stack pointer
 6010               	only_first_cold: ; XXX TMP -- temporary label
 6011 16ac CDAC 1D   	  call move_name_fields_to_memory_bank ; (only the first time)
 6012               	.if latin1_charset_in_bank
 6013               	  ld hl,charset_address-0x0100
 6014               	  ld (sys_chars),hl
 6015               	.endif
 6016 16af CDB4 16   	  call common_start
 6017 16b2 2F16      	  dw cold_
 6018               	
 6019               	common_start:
 6020               	
 6021               	  ; Common operations done by warm_start and cold_start.
 6022               	
 6023 16b4 C1        	  pop bc ; get the return address, that holds the cfa of `cold` or `warm`
 6024 16b5 ED7B 1400 	  ld sp,(s0_init_value)
 6025 16b9 AF        	  xor a
 6026 16ba FD77 31   	  ld (iy+sys_df_sz_offset),a ; no lines at the bottom part of the screen
 6027 16bd DD21 5F05 	  ld ix,next ; restore IX
 6028 16c1 DDE9      	  _jp_next ; jump to the cfa pointed by the BC register
 6029               	
 6030               	; ----------------------------------------------
 6031 16c3 C516      	  _code_header s_to_d_,"S>D"
 6032               	
 6033               	; doc{
 6034               	;
 6035               	; s->d  ( n -- d )
 6036               	;
 6037               	; Sign extend a single number _n_ to form a double number _d_.
 6038               	;
GAS LISTING solo_forth.z80s 			page 111


 6039               	; }doc
 6040               	
 6041               	; dup 0<
 6042               	
 6043 16c5 2100 00   	  ld hl,0
 6044 16c8 D1        	  pop de
 6045 16c9 7A        	  ld a,d
 6046 16ca B7        	  or a
 6047 16cb F25D 05   	  jp p,push_hlde ; jump if positive
 6048 16ce 2B        	  dec hl
 6049 16cf C35D 05   	  jp push_hlde
 6050               	
 6051               	; ----------------------------------------------
 6052 16d2 650C      	  _colon_header plus_minus_,"+-"
 6053               	
 6054               	; doc{
 6055               	;
 6056               	; +-  ( n1 n2 -- n3 )  \ fig-Forth
 6057               	;
 6058               	; Apply the sign of n2 to n1, which is left as n3.
 6059               	;
 6060               	; }doc
 6061               	
 6062 16d4 6D0B      	  dw zero_less_than_
 6063 16d6 6007 DC16 	  dw zero_branch_,plus_minus.end
 6064 16da 9B0B      	  dw negate_
 6065               	plus_minus.end:
 6066 16dc C00A      	  dw semicolon_s_
 6067               	
 6068               	; ----------------------------------------------
 6069 16de 650C      	  _colon_header d_plus_minus_,"D+-"
 6070               	
 6071               	; doc{
 6072               	;
 6073               	; d+-  ( d1 n -- d2 )  \ fig-Forth
 6074               	;
 6075               	; Apply the sign of _n_ to the double number _d1_, leaving it as
 6076               	; _d2_.
 6077               	;
 6078               	; }doc
 6079               	
 6080 16e0 6D0B      	  dw zero_less_than_
 6081 16e2 6007 E816 	  dw zero_branch_,d_plus_minus.end
 6082 16e6 A70B      	  dw dnegate_
 6083               	d_plus_minus.end:
 6084 16e8 C00A      	  dw semicolon_s_
 6085               	
 6086               	; ----------------------------------------------
 6087 16ea 650C      	  _colon_header abs_,"ABS"
 6088               	
 6089               	; doc{
 6090               	;
 6091               	; abs  ( n -- u )
 6092               	;
 6093               	; Leave the absolute value _u_ of a number _n_.
 6094               	;
 6095               	; }doc
GAS LISTING solo_forth.z80s 			page 112


 6096               	
 6097 16ec E00B D216 	  dw dup_,plus_minus_
 6098 16f0 C00A      	  dw semicolon_s_
 6099               	
 6100               	; ----------------------------------------------
 6101 16f2 650C      	  _colon_header dabs_,"DABS"
 6102               	
 6103               	; doc{
 6104               	;
 6105               	; dabs  ( d -- ud )
 6106               	;
 6107               	; Leave the absolute value _ud_ of a double number _d_.
 6108               	;
 6109               	; }doc
 6110               	
 6111 16f4 E00B DE16 	  dw dup_,d_plus_minus_
 6112 16f8 C00A      	  dw semicolon_s_
 6113               	
 6114               	; ----------------------------------------------
 6115 16fa FC16      	  _code_header umax_,"UMAX"
 6116               	
 6117               	; doc{
 6118               	;
 6119               	; umax  ( u1 u2 -- u1 | u2 )
 6120               	;
 6121               	; }doc
 6122               	
 6123               	  ; [Code from DZX-Forth.]
 6124               	
 6125 16fc D1        	  pop de
 6126 16fd E1        	  pop hl
 6127 16fe CD0C 05   	  call compare_de_hl_unsigned
 6128 1701 C31F 17   	  jp max.1
 6129               	
 6130               	; ----------------------------------------------
 6131 1704 0617      	  _code_header umin_,"UMIN"
 6132               	
 6133               	; doc{
 6134               	;
 6135               	; umin  ( u1 u2 -- u1 | u2 )
 6136               	;
 6137               	; }doc
 6138               	
 6139               	  ; [Code from DZX-Forth.]
 6140               	
 6141 1706 D1        	  pop de
 6142 1707 E1        	  pop hl
 6143 1708 CD0C 05   	  call compare_de_hl_unsigned
 6144 170b C320 17   	  jp max.2
 6145               	
 6146               	; ----------------------------------------------
 6147 170e 1017      	  _code_header min_,"MIN"
 6148               	
 6149               	  ; [Code from DZX-Forth.]
 6150               	
 6151 1710 D1        	  pop de
 6152 1711 E1        	  pop hl
GAS LISTING solo_forth.z80s 			page 113


 6153 1712 CD12 05   	  call compare_de_hl_signed
 6154 1715 C320 17   	  jp max.2
 6155               	
 6156               	; ----------------------------------------------
 6157 1718 1A17      	  _code_header max_,"MAX"
 6158               	
 6159               	  ; [Code from DZX-Forth.]
 6160               	
 6161 171a D1        	  pop de
 6162               	max.de:
 6163 171b E1        	  pop hl
 6164 171c CD12 05   	  call compare_de_hl_signed
 6165               	max.1:
 6166 171f 3F        	  ccf
 6167               	max.2:
 6168 1720 DA5E 05   	  jp c,push_hl
 6169 1723 EB        	  ex de,hl
 6170 1724 C35E 05   	  jp push_hl
 6171               	
 6172               	; ----------------------------------------------
 6173 1727 650C      	  _colon_header m_star_,"M*"
 6174               	
 6175               	; doc{
 6176               	;
 6177               	; m*  ( n1 n2 -- d )  \ fig-Forth
 6178               	;
 6179               	; A mixed magnitude math operation which leaves the double
 6180               	; number signed product of two signed number.
 6181               	;
 6182               	; }doc
 6183               	
 6184 1729 E70B      	  dw two_dup_
 6185 172b 6A0A F00A 	  dw xor_,to_r_
 6186 172f EA16      	  dw abs_
 6187 1731 D90B EA16 	  dw swap_,abs_,u_m_star_
 6187      060A 
 6188 1737 FF0A DE16 	  dw from_r_,d_plus_minus_
 6189 173b C00A      	  dw semicolon_s_
 6190               	
 6191               	; ----------------------------------------------
 6192 173d 650C      	  _colon_header m_slash_,"M/"
 6193               	
 6194               	; doc{
 6195               	;
 6196               	; m/  ( d n1 -- n2 n3 )  \ fig-Forth
 6197               	;
 6198               	; A mixed magnitude math operator which leaves the signed
 6199               	; remainder _n2_ and signed quotient _n3_ from a double number
 6200               	; dividend and divisor _n1_.  The  remainder takes its sign from
 6201               	; the dividend.
 6202               	;
 6203               	; }doc
 6204               	
 6205 173f CC0B      	  dw over_
 6206 1741 F00A      	  dw to_r_
 6207 1743 F00A      	  dw to_r_
 6208 1745 F216      	  dw dabs_
GAS LISTING solo_forth.z80s 			page 114


 6209 1747 4F0B      	  dw r_fetch_
 6210 1749 EA16      	  dw abs_
 6211 174b 100A      	  dw u_slash_mod_
 6212 174d FF0A      	  dw from_r_
 6213 174f 4F0B      	  dw r_fetch_
 6214 1751 6A0A      	  dw xor_
 6215 1753 D216      	  dw plus_minus_
 6216 1755 D90B      	  dw swap_
 6217 1757 FF0A      	  dw from_r_
 6218 1759 D216      	  dw plus_minus_
 6219 175b D90B      	  dw swap_
 6220 175d C00A      	  dw semicolon_s_
 6221               	
 6222               	; ----------------------------------------------
 6223 175f 650C      	  _colon_header star_,"*"
 6224               	
 6225 1761 2717 D40B 	  dw m_star_,drop_
 6226 1765 C00A      	  dw semicolon_s_
 6227               	
 6228               	; ----------------------------------------------
 6229 1767 650C      	  _colon_header slash_mod_,"/MOD"
 6230               	
 6231               	; doc{
 6232               	;
 6233               	; /mod  ( n1 n2 -- rem quot )  \ fig-Forth
 6234               	;
 6235               	; Leave the remainder and signed quotient of _n1_/_n2_. The
 6236               	; remainder has the sign of the dividend.
 6237               	;
 6238               	; }doc
 6239               	
 6240 1769 F00A C316 	  dw to_r_,s_to_d_
 6241 176d FF0A 3D17 	  dw from_r_,m_slash_
 6242 1771 C00A      	  dw semicolon_s_
 6243               	
 6244               	; ----------------------------------------------
 6245 1773 650C      	  _colon_header slash_,"/"
 6246               	
 6247 1775 6717 BD0B 	  dw slash_mod_,nip_
 6248 1779 C00A      	  dw semicolon_s_
 6249               	
 6250               	; ----------------------------------------------
 6251 177b 650C      	  _colon_header mod_,"MOD"
 6252               	
 6253 177d 6717 D40B 	  dw slash_mod_,drop_
 6254 1781 C00A      	  dw semicolon_s_
 6255               	
 6256               	; ----------------------------------------------
 6257 1783 650C      	  _colon_header star_slash_mod_,"*/MOD"
 6258               	
 6259 1785 F00A 2717 	  dw to_r_,m_star_
 6260 1789 FF0A 3D17 	  dw from_r_,m_slash_
 6261 178d C00A      	  dw semicolon_s_
 6262               	
 6263               	; ----------------------------------------------
 6264 178f 650C      	  _colon_header star_slash_,"*/"
 6265               	
GAS LISTING solo_forth.z80s 			page 115


 6266 1791 8317 BD0B 	  dw star_slash_mod_,nip_
 6267 1795 C00A      	  dw semicolon_s_
 6268               	
 6269               	; ----------------------------------------------
 6270 1797 650C      	  _colon_header m_slash_mod_,"M/MOD"
 6271               	
 6272 1799 F00A C50C 	  dw to_r_,zero_,r_fetch_
 6272      4F0B 
 6273 179f 100A      	  dw u_slash_mod_
 6274 17a1 FF0A D90B 	  dw from_r_,swap_
 6275 17a5 F00A 100A 	  dw to_r_,u_slash_mod_,from_r_
 6275      FF0A 
 6276 17ab C00A      	  dw semicolon_s_
 6277               	
 6278               	; ----------------------------------------------
 6279 17ad 650C      	  _colon_header paren_line_,"(LINE)"
 6280               	
 6281 17af F00A      	  dw to_r_
 6282 17b1 E50C F10C 	  dw c_slash_l_,b_slash_buf_,star_slash_mod_
 6282      8317 
 6283 17b7 FF0A F50C 	  dw from_r_,b_slash_scr_,star_,plus_
 6283      5F17 810B 
 6284 17bf 7718 810B 	  dw block_,plus_,c_slash_l_
 6284      E50C 
 6285 17c5 C00A      	  dw semicolon_s_
 6286               	
 6287               	; ----------------------------------------------
 6288 17c7 650C      	  _colon_header dot_line_,".LINE"
 6289               	
 6290 17c9 AD17 3610 	  dw paren_line_,minus_trailing_,type_
 6290      1A10 
 6291 17cf C00A      	  dw semicolon_s_
 6292               	
 6293               	; ----------------------------------------------
 6294 17d1 650C      	  _colon_header message_,"MESSAGE"
 6295               	
 6296               	; doc{
 6297               	;
 6298               	; message  ( n -- )
 6299               	;
 6300               	; }doc
 6301               	
 6302 17d3 140D 1A0C 	  dw warning_,fetch_
 6303 17d7 6007 E517 	  dw zero_branch_,message.number_only
 6304 17db 6513 C10C 	  dw error_to_line_,msg_scr_,dot_line_,space_
 6304      C717 260E 
 6305 17e3 C00A      	  dw semicolon_s_
 6306               	
 6307               	message.number_only:
 6308 17e5 4D10      	  dw paren_dot_quote_
 6309               	  ;_string "MSG # "  ; XXX FIXME compiled with length 2!
 6310 17e7 05        	  db message.string_end-$-1
 6311 17e8 4D53 4720 	  db "MSG #"
 6311      23
 6312               	message.string_end:
 6313               	  ; XXX TODO force decimal base
 6314 17ed 1E1B      	  dw dot_
GAS LISTING solo_forth.z80s 			page 116


 6315 17ef C00A      	  dw semicolon_s_
 6316               	
 6317               	
 6318               	; ----------------------------------------------
 6319 17f1 650C      	  _colon_header update_,"UPDATE"
 6320               	
 6321               	; doc{
 6322               	;
 6323               	; update  ( -- )  \ ANS-Forth
 6324               	;
 6325               	; Mark the most recently referenced block (pointed to by `prev`) as
 6326               	; altered. The block will subsequently be transferred automatically to
 6327               	; disk should its buffer be required for storage of a different block.
 6328               	;
 6329               	; }doc
 6330               	
 6331               	  ; XXX TODO move to the disk?
 6332               	
 6333 17f3 ED0C 1A0C 	  dw disk_buffer_,fetch_
 6334 17f7 8D06 0080 	  dw lit_,0x8000,or_
 6334      5D0A 
 6335 17fd ED0C 490C 	  dw disk_buffer_,store_
 6336 1801 C00A      	  dw semicolon_s_
 6337               	
 6338               	; ----------------------------------------------
 6339 1803 650C      	  _colon_header updated_question_,"UPDATED?"
 6340               	
 6341               	; doc{
 6342               	;
 6343               	; updated?  ( -- f )
 6344               	;
 6345               	; Is the current disk buffer marked as modified?
 6346               	;
 6347               	; }doc
 6348               	
 6349 1805 2D18 6D0B 	  dw buffer_id_,zero_less_than_
 6350 1809 C00A      	  dw semicolon_s_
 6351               	
 6352               	; ----------------------------------------------
 6353 180b 650C      	  _colon_header stream_end_,"STREAM-END"
 6354               	
 6355               	; doc{
 6356               	;
 6357               	; stream-end  ( ca -- )
 6358               	;
 6359               	; Store the null word (a null character) at the given address,
 6360               	; surrounded by spaces. This marks the end of a input stream.
 6361               	;
 6362               	; }doc
 6363               	
 6364 180d 5F06      	  dw s_lit_
 6365 180f 0320 0020 	  db 3,space_char,0,space_char ; string
 6366 1813 1E0E FE09 	  dw rot_,smove_
 6367 1817 C00A      	  dw semicolon_s_
 6368               	
 6369               	; ----------------------------------------------
 6370 1819 650C      	  _colon_header empty_buffers_,"EMPTY-BUFFERS"
GAS LISTING solo_forth.z80s 			page 117


 6371               	
 6372               	; doc{
 6373               	;
 6374               	; empty-buffers  ( -- )
 6375               	; 
 6376               	; Unassign all block buffers. Do not transfer the contents of
 6377               	; any updated block to mass storage.
 6378               	;
 6379               	; }doc
 6380               	
 6381 181b 8D06 FF7F 	  dw lit_,buffer_block_id_mask,disk_buffer_,store_
 6381      ED0C 490C 
 6382 1823 C00A      	  dw semicolon_s_
 6383               	
 6384               	; ----------------------------------------------
 6385 1825 650C      	  _colon_header buffer_data_,"BUFFER-DATA"
 6386               	
 6387               	; doc{
 6388               	;
 6389               	; buffer-data  ( -- a )
 6390               	; 
 6391               	; First data address of the disk buffer.
 6392               	;
 6393               	; }doc
 6394               	
 6395 1827 ED0C 680D 	  dw disk_buffer_,cell_plus_
 6396 182b C00A      	  dw semicolon_s_
 6397               	
 6398               	; ----------------------------------------------
 6399 182d 650C      	  _colon_header buffer_id_,"BUFFER-ID"
 6400               	
 6401               	; doc{
 6402               	;
 6403               	; buffer-id  ( -- x )
 6404               	; 
 6405               	; Id of the disk buffer.
 6406               	;
 6407               	; }doc
 6408               	
 6409 182f ED0C 1A0C 	  dw disk_buffer_,fetch_
 6410 1833 C00A      	  dw semicolon_s_
 6411               	
 6412               	; ----------------------------------------------
 6413 1835 650C      	  _colon_header block_number_,"BLOCK-NUMBER"
 6414               	
 6415               	; doc{
 6416               	;
 6417               	; block-number  ( x -- n )
 6418               	; 
 6419               	; Convert the disk buffer id _x_ to its associated block _n_,
 6420               	; by removing the update bit.
 6421               	;
 6422               	; }doc
 6423               	
 6424 1837 8D06 FF7F 	  _literal buffer_block_id_mask
 6425 183b 500A      	  dw and_
 6426 183d C00A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 118


 6427               	
 6428               	; ----------------------------------------------
 6429 183f 650C      	  _colon_header buffer_block_,"BUFFER-BLOCK"
 6430               	
 6431               	; doc{
 6432               	;
 6433               	; buffer-block  ( -- n )
 6434               	;
 6435               	; Block number associated with the disk buffer.
 6436               	;
 6437               	; }doc
 6438               	
 6439 1841 2D18 3518 	  dw buffer_id_,block_number_
 6440 1845 C00A      	  dw semicolon_s_
 6441               	
 6442               	; ----------------------------------------------
 6443 1847 650C      	  _colon_header paren_buffer_,"(BUFFER)"
 6444               	
 6445               	; doc{
 6446               	;
 6447               	; (buffer)  ( n -- )
 6448               	;
 6449               	; If the contents of the disk buffer has been marked as updated,
 6450               	; write its block to the disk. Assign the block number _n_ to
 6451               	; the disk buffer.
 6452               	
 6453               	; ----
 6454               	; : (buffer)  ( n -- )
 6455               	;   updated?  if    block-number write-buffer
 6456               	;             else  drop
 6457               	;             then  disk-buffer !  ;
 6458               	; ----
 6459               	 
 6460               	; }doc
 6461               	
 6462 1849 0318      	  dw updated_question_
 6463 184b 6007 5718 	  dw zero_branch_,free_buffer.not_updated
 6464 184f 3518 E818 	  dw block_number_,write_buffer_
 6465 1853 5707 5918 	  dw branch_,free_buffer.end
 6466               	free_buffer.not_updated:
 6467 1857 D40B      	  dw drop_
 6468               	free_buffer.end:
 6469 1859 ED0C 490C 	  dw disk_buffer_,store_
 6470 185d C00A      	  dw semicolon_s_
 6471               	
 6472               	; ----------------------------------------------
 6473 185f 650C      	  _colon_header buffer_,"BUFFER"
 6474               	
 6475               	; doc{
 6476               	;
 6477               	; buffer  ( n -- a )
 6478               	;
 6479               	; Assign the block buffer to block _n_.   If the contents of the
 6480               	; buffer were marked as updated, it is written to the disk.  The
 6481               	; block _n_ is not read from the disk.  The address _a_ left on
 6482               	; stack is the first cell in the buffer for data storage.
 6483               	
GAS LISTING solo_forth.z80s 			page 119


 6484               	; ----
 6485               	; : buffer  ( n -- a )
 6486               	;   dup buffer-block =  if    drop
 6487               	;                       else  (buffer)
 6488               	;                       then  buffer-data  ;
 6489               	; ----
 6490               	
 6491               	; }doc
 6492               	
 6493 1861 E00B 3F18 	  dw dup_,buffer_block_,equals_
 6493      E90D 
 6494 1867 6007 7118 	  dw zero_branch_,buffer.not_equals
 6495               	  ; The requested block is the one already in the buffer.
 6496 186b D40B      	  dw drop_
 6497 186d 5707 7318 	  dw branch_,buffer.end
 6498               	buffer.not_equals:
 6499 1871 4718      	  dw paren_buffer_
 6500               	buffer.end:  
 6501 1873 2518      	  dw buffer_data_ ; first cell of data in the buffer
 6502 1875 C00A      	  dw semicolon_s_
 6503               	
 6504               	; ----------------------------------------------
 6505 1877 650C      	  _colon_header block_,"BLOCK"
 6506               	
 6507               	; doc{
 6508               	;
 6509               	; block  ( n -- a )
 6510               	
 6511               	; If the block _n_ is already in memory, leave the address _a_
 6512               	; of the first cell in the disk buffer for data storage.
 6513               	; 
 6514               	; If the block _n_ is not already in memory, transfer it from
 6515               	; disk to the buffer.  If the block occupying that buffer has
 6516               	; been marked as updated, rewrite it to disk before block _n_ is
 6517               	; read into the buffer.  Finally leave the address _a_ of the
 6518               	; first cell in the disk buffer for data storage.
 6519               	
 6520               	; ----
 6521               	; : block ( n --- a )
 6522               	;   dup buffer-block =
 6523               	;   if    drop
 6524               	;   else  save-buffers  dup read-buffer  disk-buffer !
 6525               	;   then  buffer-data  ;
 6526               	; ----
 6527               	
 6528               	; }doc
 6529               	
 6530 1879 E00B 3F18 	  dw dup_,buffer_block_,equals_
 6530      E90D 
 6531 187f 6007 8918 	  dw zero_branch_,block.not_equals
 6532 1883 D40B      	  dw drop_
 6533 1885 5707 9318 	  dw branch_,block.end
 6534               	block.not_equals:
 6535 1889 1119 E00B 	  dw save_buffers_,dup_,read_buffer_
 6535      D518 
 6536 188f ED0C 490C 	  dw disk_buffer_,store_
 6537               	block.end:
GAS LISTING solo_forth.z80s 			page 120


 6538 1893 2518      	  dw buffer_data_
 6539 1895 C00A      	  dw semicolon_s_
 6540               	
 6541               	; ----------------------------------------------
 6542 1897 9918      	  _code_header flip_,"FLIP"
 6543               	
 6544               	; doc{
 6545               	;
 6546               	; flip  ( n1 -- n2 )
 6547               	;
 6548               	;   Exchange the low and high bytes within n1.
 6549               	;
 6550               	; }doc
 6551               	
 6552               	; [Name taken from eForth. It's called `><` or `cswap` in other
 6553               	; Forth systems.]
 6554               	
 6555 1899 E1        	  pop hl
 6556 189a 7C        	  ld a,h
 6557 189b 65        	  ld h,l
 6558 189c 6F        	  ld l,a
 6559 189d C35E 05   	  jp push_hl
 6560               	
 6561               	; ----------------------------------------------
 6562 18a0 650C      	  _colon_header block_to_sector_,"BLOCK>SECTOR"
 6563               	
 6564               	; doc{
 6565               	
 6566               	; block>sector  ( n1 -- n2 )
 6567               	
 6568               	; Convert the disk block _n1_ to the disk sector _n2_, in the
 6569               	; format required by G+DOS: The high byte of _n2_ is the track
 6570               	; (0..79 for side 0; 128..207 for side 1); the low byte of _n2_
 6571               	; is the sector (1..10).
 6572               	
 6573               	; ----
 6574               	; : block>sector  ( n1 -- n2 )
 6575               	;   \ n2 (high byte) = track 0..79 for side 0, 128..207 for side 1
 6576               	;   \    (low byte)  = sector 1..10
 6577               	;   \ track0 = 0..79
 6578               	;   \ track = 0..207
 6579               	;   \ side = 0..1
 6580               	;   dup 10 mod 1+    ( n1 sector )
 6581               	;   swap dup 20 /    ( sector n1 track0 )
 6582               	;   swap 10 / 1 and  ( sector track0 side )
 6583               	;   128              ( sector track 128 )
 6584               	;   \ * +          ( sector track ) \ XXX OLD for true=1
 6585               	;   negate and or    ( sector track )  \ XXX NEW a bit faster, for true=-1
 6586               	;   flip or  ;
 6587               	; ----
 6588               	;
 6589               	; }doc
 6590               	
 6591 18a2 E00B      	  dw dup_
 6592 18a4 8306 0A   	  _literal 10
 6593 18a7 7B17 570D 	  dw mod_,one_plus_,swap_,dup_
 6593      D90B E00B 
GAS LISTING solo_forth.z80s 			page 121


 6594 18af 8306 14   	  _literal 20
 6595 18b2 7317 D90B 	  dw slash_,swap_
 6596 18b6 8306 0A   	  _literal 10
 6597 18b9 7317 C90C 	  dw slash_,one_,and_
 6597      500A 
 6598               	
 6599               	.if true==1 ; XXX OLD
 6600               	  ; XXX TODO optimize with `7 lshift`?
 6601 18bf 8306 80   	  _literal 128
 6602 18c2 5F17 810B 	  dw star_,plus_
 6603               	.else
 6604               	  dw negate_
 6605               	  _literal 128
 6606               	  dw and_,or_
 6607               	.endif
 6608               	  
 6609 18c6 9718 5D0A 	  dw flip_,or_
 6610 18ca C00A      	  dw semicolon_s_
 6611               	
 6612               	; ----------------------------------------------
 6613 18cc 650C      	  _colon_header read_block_,"READ-BLOCK"
 6614               	
 6615               	; doc{
 6616               	;
 6617               	; read-block  ( a n -- )
 6618               	;
 6619               	; Read disk block _n_ to buffer _a_.
 6620               	;
 6621               	; }doc
 6622               	
 6623 18ce 8306 44   	  _literal 0x44 ; G+DOS command to read a disk sector
 6624 18d1 F218      	  dw transfer_block_
 6625 18d3 C00A      	  dw semicolon_s_
 6626               	
 6627               	; ----------------------------------------------
 6628 18d5 650C      	  _colon_header read_buffer_,"READ-BUFFER"
 6629               	
 6630               	; doc{
 6631               	;
 6632               	; read-buffer  ( n -- )
 6633               	;
 6634               	; Read disk block _n_ to the disk buffer.
 6635               	;
 6636               	; }doc
 6637               	
 6638 18d7 2518 D90B 	  dw buffer_data_,swap_,read_block_
 6638      CC18 
 6639 18dd C00A      	  dw semicolon_s_
 6640               	
 6641               	; ----------------------------------------------
 6642 18df 650C      	  _colon_header write_block_,"WRITE-BLOCK"
 6643               	
 6644               	; doc{
 6645               	;
 6646               	; write-block  ( a n -- )
 6647               	;
 6648               	; Write buffer _a_ to disk block _n_.
GAS LISTING solo_forth.z80s 			page 122


 6649               	;
 6650               	; }doc
 6651               	
 6652 18e1 8306 45   	  _literal 0x45 ; G+DOS command to write a disk sector
 6653 18e4 F218      	  dw transfer_block_
 6654 18e6 C00A      	  dw semicolon_s_
 6655               	
 6656               	; ----------------------------------------------
 6657 18e8 650C      	  _colon_header write_buffer_,"WRITE-BUFFER"
 6658               	
 6659               	; doc{
 6660               	;
 6661               	; write-buffer  ( n -- )
 6662               	;
 6663               	; Write the disk buffer to disk block _n_.
 6664               	;
 6665               	; }doc
 6666               	
 6667 18ea 2518 D90B 	  dw buffer_data_,swap_,write_block_
 6667      DF18 
 6668 18f0 C00A      	  dw semicolon_s_
 6669               	
 6670               	; ----------------------------------------------
 6671 18f2 650C      	  _colon_header transfer_block_,"TRANSFER-BLOCK"
 6672               	
 6673               	; doc{
 6674               	;
 6675               	; transfer-block  ( a n b -- )
 6676               	;
 6677               	; The disk read-write linkage.
 6678               	;
 6679               	; a = source or destination block buffer
 6680               	; n = sequential number of the referenced disk block
 6681               	; b = G+DOS command to read or write a sector
 6682               	;
 6683               	; }doc
 6684               	
 6685 18f4 8D06 0919 	  dw lit_,read_write_sector_command,c_store_
 6685      520C 
 6686 18fa A018      	  dw block_to_sector_
 6687 18fc 0019      	  dw paren_transfer_block_
 6688 18fe C00A      	  dw semicolon_s_
 6689               	
 6690               	paren_transfer_block_:
 6691               	  ; Headerless word with the low level code of `R/W`.
 6692 1900 0219      	  dw paren_transfer_block_pfa ; code field
 6693               	  
 6694               	  ; ( a sector -- )
 6695               	  ; sector (high byte) = track 0..79, +128 if side 1
 6696               	  ;        (low byte)   = sector 1..10
 6697               	paren_transfer_block_pfa:
 6698 1902 D1        	  pop de ; d = track 0..79, +128 if side 1
 6699               	         ; e = sector 1..10
 6700 1903 DDE1      	  pop ix ; address
 6701 1905 C5        	  push bc ; save the Forth IP
 6702 1906 3E02      	  ld a,2 ; drive ; XXX TMP
 6703 1908 CF        	  rst 8 ; G+DOS hook
GAS LISTING solo_forth.z80s 			page 123


 6704               	read_write_sector_command:
 6705               	  ; G+DOS command already patched:
 6706 1909 44        	  db 0x44 ; 0x44 = read ; 0x45 = write
 6707 190a C1        	  pop bc ; restore the Forth IP
 6708 190b DD21 5F05 	  ld ix,next
 6709 190f DDE9      	  _jp_next
 6710               	
 6711               	; ----------------------------------------------
 6712 1911 650C      	  _colon_header save_buffers_,"SAVE-BUFFERS"
 6713               	
 6714               	; doc{
 6715               	;
 6716               	; save-buffers  ( -- )  \ ANS Forth
 6717               	;
 6718               	; If the disk buffer has been modified, transfer its contents to
 6719               	; disk and mark it as unmodified.
 6720               	;
 6721               	; ----
 6722               	; : save-buffers ( -- )
 6723               	;   updated? 0= ?exit \ exit if not updated
 6724               	;   buffer-block dup write-buffer  disk-buffer !  ;
 6725               	; ----
 6726               	;
 6727               	; }doc
 6728               	
 6729 1913 0318 570B 	  dw updated_question_,zero_equals_ ; not updated?
 6730 1917 501D      	  dw question_exit_ ; exit if not updated
 6731               	  ; Updated
 6732 1919 3F18 E00B 	  dw buffer_block_,dup_,write_buffer_
 6732      E818 
 6733 191f ED0C 490C 	  dw disk_buffer_,store_
 6734 1923 C00A      	  dw semicolon_s_
 6735               	
 6736               	; ----------------------------------------------
 6737 1925 650C      	  _colon_header flush_,"FLUSH"
 6738               	
 6739               	  ; XXX TODO -- move to the disk?
 6740               	
 6741 1927 1119 1918 	  dw save_buffers_,empty_buffers_
 6742 192b C00A      	  dw semicolon_s_
 6743               	
 6744               	; ----------------------------------------------
 6745 192d 650C      	  _colon_header paren_load_,"(LOAD)"
 6746               	
 6747               	; doc{
 6748               	;
 6749               	; (load)  ( i*x u -- j*x )
 6750               	;
 6751               	; Store _u_ in `blk` (thus making block _u_ the input source and
 6752               	; setting the input buffer to encompass its contents), set `>in`
 6753               	; to zero, and interpret.  Other stack effects are due to the
 6754               	; words loaded.
 6755               	;
 6756               	; An error is issued if _u_ is zero.
 6757               	;
 6758               	; ----
 6759               	; : (load)  ( i*x u -- j*x )
GAS LISTING solo_forth.z80s 			page 124


 6760               	;   dup 0= 9 ?error
 6761               	;   b/scr * blk !  >in off  interpret  ;
 6762               	; ----
 6763               	;
 6764               	; }doc
 6765               	
 6766 192f E00B 570B 	  dw dup_,zero_equals_
 6767 1933 8306 090D 	  _question_error error.loading_from_screen_0
 6767      0F
 6768 1938 F50C 5F17 	  dw b_slash_scr_,star_,blk_,store_
 6768      1E0D 490C 
 6769 1940 210D FD0B 	  dw to_in_,off_,interpret_
 6769      1C15 
 6770 1946 C00A      	  dw semicolon_s_
 6771               	
 6772               	; ----------------------------------------------
 6773 1948 650C      	  _colon_header continued_,"CONTINUED"
 6774               	
 6775               	; doc{
 6776               	;
 6777               	; continued  ( i*x u -- j*x )  \ Forth-79 (uncontrolled word
 6778               	; definition from the Reference Word Set)
 6779               	;
 6780               	; Store _u_ in `blk` (thus making block _u_ the input source and
 6781               	; setting the input buffer to encompass its contents), set `>in`
 6782               	; to zero, and interpret.  Other stack effects are due to the
 6783               	; words loaded.
 6784               	;
 6785               	; ----
 6786               	; : continued  ( -- )
 6787               	;   ?loading (load)  ;
 6788               	; ----
 6789               	;
 6790               	; }doc
 6791               	
 6792 194a 590F 2D19 	  dw question_loading_,paren_load_
 6793 194e C00A      	  dw semicolon_s_
 6794               	
 6795               	; ----------------------------------------------
 6796 1950 650C      	  _colon_header load_,"LOAD"
 6797               	
 6798               	; doc{
 6799               	;
 6800               	; load  ( u -- )
 6801               	;
 6802               	; Save the current input-source specification. Store _u_ in
 6803               	; `blk` (thus making block _u_ the input source and setting the
 6804               	; input buffer to encompass its contents), set `>in` to zero,
 6805               	; and interpret. When the parse area is exhausted, restore the
 6806               	; prior input source specification. Other stack effects are due
 6807               	; to the words loaded.
 6808               	;
 6809               	; An error is issued if _u_ is zero.
 6810               	;
 6811               	; ----
 6812               	; : load  ( n -- )
 6813               	;   blk @ >r  >in @ >r
GAS LISTING solo_forth.z80s 			page 125


 6814               	;   (load)
 6815               	;   r> >in !  r> blk !  ;
 6816               	; ----
 6817               	;
 6818               	; }doc
 6819               	
 6820 1952 1E0D 1A0C 	  dw blk_,fetch_,to_r_
 6820      F00A 
 6821 1958 210D 1A0C 	  dw to_in_,fetch_,to_r_
 6821      F00A 
 6822 195e 2D19      	  dw paren_load_
 6823 1960 FF0A 210D 	  dw from_r_,to_in_,store_
 6823      490C 
 6824 1966 FF0A 1E0D 	  dw from_r_,blk_,store_
 6824      490C 
 6825 196c C00A      	  dw semicolon_s_
 6826               	
 6827               	; ----------------------------------------------
 6828 196e 650C      	  _colon_header next_screen_,"-->",immediate
 6829               	
 6830               	; doc{
 6831               	;
 6832               	; -->  ( -- )  \ "next-screen"
 6833               	;
 6834               	; Continue interpretation with the next disk screen.
 6835               	;
 6836               	; ----
 6837               	; : -->  ( -- )
 6838               	;   ?loading  >in off
 6839               	;   b/scr blk @ over mod - blk +!  ; immediate
 6840               	; ----
 6841               	;
 6842               	; }doc
 6843               	
 6844 1970 590F      	  dw question_loading_
 6845 1972 210D FD0B 	  dw to_in_,off_
 6846 1976 F50C 1E0D 	  dw b_slash_scr_,blk_,fetch_,over_,mod_,minus_
 6846      1A0C CC0B 
 6846      7B17 D20D 
 6847 1982 1E0D F00B 	  dw blk_,plus_store_
 6848 1986 C00A      	  dw semicolon_s_
 6849               	
 6850               	; ----------------------------------------------
 6851 1988 650C      	  _colon_header defined_,"DEFINED"
 6852               	
 6853               	; doc{
 6854               	;
 6855               	; defined  ( "name" -- ca 0 | cfa 1 | cfa -1 )
 6856               	;
 6857               	; }doc
 6858               	
 6859               	  ; XXX TODO -- adapt to the new parsing method
 6860               	
 6861               	  ;dw cr_,dot_s_,lit_,1,border_,key_,drop_ ; XXX INFORMER
 6862               	;  dw cr_,paren_dot_quote_ ; XXX INFORMER
 6863               	;  db 14,"start of find:" ; XXX INFORMER
 6864               	;  dw cr_,dot_s_ ; XXX INFORMER
GAS LISTING solo_forth.z80s 			page 126


 6865               	.if 1 ; XXX OLD
 6866               	
 6867 198a E10C D511 	  dw b_l_,word_ ; ( ca2 )
 6868               	
 6869               	.else ; XXX NEW
 6870               	
 6871               	  dw parse_name_  ; ( ca1 len1 )
 6872               	  ;dw cr_,dot_s_,lit_,1,border_,key_,drop_ ; XXX INFORMER
 6873               	  dw save_counted_string_ ; ( ca2 )
 6874               	  ;dw cr_,dot_s_,lit_,2,border_,key_,drop_ ; XXX INFORMER
 6875               	
 6876               	.endif
 6877               	
 6878               	  ;dw cr_,dot_s_,lit_,2,border_,key_,drop_ ; XXX INFORMER
 6879 198e E00B 0710 	  dw dup_,count_,uppers_  ; uppercase ( ca2 )
 6879      B412 
 6880               	  ;dw cr_,dot_s_,lit_,3,border_,key_,drop_ ; XXX INFORMER
 6881 1994 EB12      	  dw find_
 6882               	  ;dw cr_,dot_s_,lit_,4,border_,key_,drop_ ; XXX INFORMER
 6883               	  ;dw lit_,0,border_,key_,drop_ ; XXX INFORMER
 6884               	;  dw cr_,paren_dot_quote_ ; XXX INFORMER
 6885               	;  db 12,"end of find:" ; XXX INFORMER
 6886               	;  dw cr_,dot_s_ ; XXX INFORMER
 6887               	
 6888 1996 C00A      	  dw semicolon_s_
 6889               	
 6890               	; ----------------------------------------------
 6891 1998 650C      	  _colon_header question_defined_,"?DEFINED"
 6892               	
 6893               	; doc{
 6894               	;
 6895               	; ?defined  ( f -- )
 6896               	;
 6897               	; }doc
 6898               	
 6899               	  ; [Code from DZX-Forth.]
 6900               	
 6901 199a 570B      	  dw zero_equals_
 6902 199c 8306 050D 	  _question_error error.not_found
 6902      0F
 6903 19a1 C00A      	  dw semicolon_s_
 6904               	
 6905               	; ----------------------------------------------
 6906 19a3 650C      	  _colon_header bracket_defined_,"[DEFINED]",immediate
 6907               	
 6908               	; doc{
 6909               	;
 6910               	; [defined]  ( "name" -- wf )
 6911               	;
 6912               	; }doc
 6913               	
 6914 19a5 8819 BD0B 	  dw defined_,nip_
 6915 19a9 C00A      	  dw semicolon_s_
 6916               	
 6917               	; ----------------------------------------------
 6918 19ab 650C      	  _colon_header bracket_undefined_,"[UNDEFINED]",immediate
 6919               	
GAS LISTING solo_forth.z80s 			page 127


 6920               	; doc{
 6921               	;
 6922               	; [undefined]  ( "name" -- wf )
 6923               	;
 6924               	; }doc
 6925               	
 6926 19ad A319 570B 	  dw bracket_defined_,zero_equals_
 6927 19b1 C00A      	  dw semicolon_s_
 6928               	
 6929               	; ----------------------------------------------
 6930 19b3 650C      	  _colon_header tick_,"'"
 6931               	
 6932               	; doc{
 6933               	;
 6934               	; '  ( "name" -- cfa )
 6935               	;
 6936               	; }doc
 6937               	
 6938 19b5 8819 9819 	  dw defined_,question_defined_
 6939 19b9 C00A      	  dw semicolon_s_
 6940               	
 6941               	; ----------------------------------------------
 6942 19bb 650C      	  _colon_header bracket_tick_,"[']",immediate
 6943               	
 6944               	; doc{
 6945               	;
 6946               	; [']  ( "name" -- cfa )
 6947               	;
 6948               	; }doc
 6949               	
 6950 19bd B319 CB14 	  dw tick_,literal_
 6951 19c1 C00A      	  dw semicolon_s_
 6952               	
 6953               	; ----------------------------------------------
 6954 19c3 650C      	  _colon_header begin_,"BEGIN",immediate
 6955               	
 6956               	; doc{
 6957               	;
 6958               	; begin  ( compilation: -- a n )
 6959               	;
 6960               	; At compile time `begin` leaves the dictionary address on
 6961               	; stack with an error checking number _n_.  It does not compile
 6962               	; anything to the dictionary.
 6963               	;
 6964               	; }doc
 6965               	
 6966 19c5 250F      	  dw question_comp_ ; error if not compiling
 6967 19c7 4707      	  dw backward_mark_ ; address to compute the backward branch
 6968               	.if 1 ; fig_compiler_security
 6969 19c9 C90C      	  dw one_ ; error checking number
 6970               	.endif
 6971 19cb C00A      	  dw semicolon_s_
 6972               	
 6973               	; ----------------------------------------------
 6974 19cd 650C      	  _colon_header then_,"THEN",immediate
 6975               	
 6976 19cf 250F      	  dw question_comp_ ; error if not compiling
GAS LISTING solo_forth.z80s 			page 128


 6977               	.if 1 ; fig_compiler_security
 6978 19d1 CD0C 3D0F 	  dw two_,question_pairs_ ; check for nesting error
 6979               	.endif
 6980 19d5 3B07      	  dw forward_resolve_
 6981 19d7 C00A      	  dw semicolon_s_
 6982               	
 6983               	; ----------------------------------------------
 6984               	  ; _colon_header question_do_,"?DO",immediate
 6985               	
 6986               	  ; XXX TODO
 6987               	
 6988               	  ; dw compile_,paren_question_do_
 6989               	  ; dw branch_,do.common
 6990               	
 6991               	; ----------------------------------------------
 6992 19d9 650C      	  _colon_header do_,"DO",immediate
 6993               	
 6994 19db 680F AD07 	  dw compile_,paren_do_
 6995               	do.common:
 6996 19df 4707      	  dw backward_mark_
 6997               	.if 1 ; fig_compiler_security
 6998 19e1 8306 03   	  _literal 3 ; error checking number
 6999               	.endif
 7000 19e4 C00A      	  dw semicolon_s_
 7001               	
 7002               	; ----------------------------------------------
 7003 19e6 650C      	  _colon_header loop_,"LOOP",immediate
 7004               	
 7005               	.if 1 ; fig_compiler_security
 7006 19e8 8306 03   	  _literal 3 ; error checking number
 7007 19eb 3D0F      	  dw question_pairs_
 7008               	.endif
 7009 19ed 680F 7807 	  dw compile_,paren_loop_
 7010 19f1 4F07      	  dw backward_resolve_
 7011 19f3 C00A      	  dw semicolon_s_
 7012               	
 7013               	; ----------------------------------------------
 7014 19f5 650C      	  _colon_header plus_loop_,"+LOOP",immediate
 7015               	
 7016               	.if 1 ; fig_compiler_security
 7017 19f7 8306 03   	  _literal 3 ; error checking number
 7018 19fa 3D0F      	  dw question_pairs_
 7019               	.endif
 7020 19fc 680F A707 	  dw compile_,paren_plus_loop_
 7021 1a00 4F07      	  dw backward_resolve_
 7022 1a02 C00A      	  dw semicolon_s_
 7023               	
 7024               	; ----------------------------------------------
 7025 1a04 650C      	  _colon_header until_,"UNTIL",immediate
 7026               	
 7027               	.if 1 ; fig_compiler_security
 7028 1a06 C90C 3D0F 	  dw one_,question_pairs_
 7029               	.endif
 7030 1a0a 680F 6007 	  dw compile_,zero_branch_
 7031 1a0e 4F07      	  dw backward_resolve_
 7032 1a10 C00A      	  dw semicolon_s_
 7033               	
GAS LISTING solo_forth.z80s 			page 129


 7034               	; ----------------------------------------------
 7035 1a12 650C      	  _colon_header again_,"AGAIN",immediate
 7036               	
 7037               	; doc{
 7038               	;
 7039               	; again  ( compilation: a n -- )
 7040               	;
 7041               	; End of an infinite loop.  Compile an unconditional jump
 7042               	; instruction to branch backward to _a_.
 7043               	;
 7044               	; }doc
 7045               	
 7046               	.if 1 ; fig_compiler_security
 7047 1a14 C90C 3D0F 	  dw one_,question_pairs_ ; check n for error
 7048               	.endif
 7049 1a18 680F 5707 	  dw compile_,branch_
 7050 1a1c 4F07      	  dw backward_resolve_
 7051 1a1e C00A      	  dw semicolon_s_
 7052               	
 7053               	; ----------------------------------------------
 7054 1a20 650C      	  _colon_header repeat_,"REPEAT",immediate
 7055               	
 7056               	; doc{
 7057               	;
 7058               	; repeat  ( compilation: a1 n1 a2 n2 -- )
 7059               	;
 7060               	; a1 = address of `begin` to branch to
 7061               	; n1 = `begin` check number
 7062               	; a2 = address of the branch of `while` to resolve
 7063               	; n2 = `while` check number
 7064               	;
 7065               	; Compile `branch` to jump back to `begin`.  Resolve also  the
 7066               	; branching offset required by `while`.
 7067               	;
 7068               	; }doc
 7069               	
 7070 1a22 280B      	  dw two_to_r_
 7071 1a24 121A      	  dw again_ ; unconditional branch back to `begin`
 7072 1a26 370B      	  dw two_from_r_
 7073               	  ; dw two_minus_ ; restore 2 to be checked by `then` ; XXX OLD -- unnecessary
 7074               	  ; XXX TODO why unncessary?
 7075 1a28 CD19      	  dw then_ ; resolve the forward branching needed by `while`
 7076 1a2a C00A      	  dw semicolon_s_
 7077               	
 7078               	; ----------------------------------------------
 7079 1a2c 650C      	  _colon_header if_,"IF",immediate
 7080               	
 7081 1a2e 680F 6007 	  dw compile_,zero_branch_
 7082               	if.do:
 7083 1a32 2F07      	  dw forward_mark_
 7084               	.if 1 ; fig_compiler_security
 7085 1a34 CD0C      	  dw two_ ; error checking number
 7086               	.endif
 7087 1a36 C00A      	  dw semicolon_s_
 7088               	
 7089               	; ----------------------------------------------
 7090 1a38 650C      	  _colon_header unless_,"UNLESS",immediate
GAS LISTING solo_forth.z80s 			page 130


 7091               	
 7092               	  ; Equivalent to `0= if`, but faster.
 7093               	
 7094 1a3a 680F 6C07 	  dw compile_,question_branch_
 7095 1a3e 5707 321A 	  dw branch_,if.do
 7096               	
 7097               	  ; XXX TODO move to the disk:
 7098               	
 7099               	; : unless  ( f -- )  postpone ?branch >mark 2  ; immediate
 7100               	; \ Alternative: when compiler security is removed:
 7101               	; : unless  ( f -- )  postpone ?branch >mark  ; immediate
 7102               	
 7103               	; ----------------------------------------------
 7104 1a42 650C      	  _colon_header ahead_,"AHEAD",immediate
 7105               	
 7106 1a44 680F 5707 	  dw compile_,branch_
 7107 1a48 2F07      	  dw forward_mark_
 7108               	
 7109               	; ----------------------------------------------
 7110 1a4a 650C      	  _colon_header else_,"ELSE",immediate
 7111               	
 7112               	  ; XXX FIXME Pasmo bug?
 7113               	  ; The system crashes when conditional compilation
 7114               	  ; is used here, in any combination. Very strange.
 7115               	
 7116               	.if 1 ; fig_compiler_security
 7117               	
 7118 1a4c CD0C      	  dw two_ ; error checking number
 7119 1a4e 3D0F      	  dw question_pairs_
 7120 1a50 680F 5707 	  dw compile_,branch_
 7121 1a54 2F07      	  dw forward_mark_
 7122 1a56 D90B      	  dw swap_
 7123 1a58 CD0C      	  dw two_ ; error checking number
 7124 1a5a CD19      	  dw then_
 7125 1a5c CD0C      	  dw two_ ; error checking number
 7126 1a5e C00A      	  dw semicolon_s_
 7127               	
 7128               	.else
 7129               	
 7130               	  dw compile_,branch_
 7131               	  dw forward_mark_
 7132               	  dw then_
 7133               	  dw semicolon_s_
 7134               	
 7135               	.endif
 7136               	
 7137               	; ----------------------------------------------
 7138 1a60 650C      	  _colon_header while_,"WHILE",immediate
 7139               	
 7140 1a62 2C1A      	  dw if_
 7141               	  ; dw two_plus_ ; leave 4 to be checked by `repeat` ; XXX OLD -- unnecessary
 7142               	  ; XXX TODO 2015-08-13: why unnecessary? why fig-Forth does not use `swap`?
 7143 1a64 C00A      	  dw semicolon_s_
 7144               	
 7145               	; ----------------------------------------------
 7146 1a66 650C      	  _colon_header spaces_,"SPACES"
 7147               	
GAS LISTING solo_forth.z80s 			page 131


 7148 1a68 E10C 6E1A 	  dw b_l_,emits_
 7149 1a6c C00A      	  dw semicolon_s_
 7150               	
 7151               	; ----------------------------------------------
 7152 1a6e 650C      	  _colon_header emits_,"EMITS"
 7153               	
 7154               	  ; emits  ( u c -- )
 7155               	
 7156               	  ; XXX TODO use `?do` or `for` when available
 7157 1a70 D90B C50C 	  dw swap_,zero_,max_,question_dup_
 7157      1817 2E0E 
 7158 1a78 6007 881A 	  dw zero_branch_,emits_.end
 7159 1a7c C50C      	  dw zero_
 7160 1a7e AD07      	  dw paren_do_
 7161               	emits_.do:
 7162 1a80 E00B EC08 	  dw dup_,emit_
 7163 1a84 7807 801A 	  dw paren_loop_,emits_.do
 7164               	emits_.end:
 7165 1a88 D40B      	  dw drop_
 7166 1a8a C00A      	  dw semicolon_s_
 7167               	
 7168               	; ----------------------------------------------
 7169 1a8c 650C      	  _colon_header less_hash_,"<#"
 7170               	
 7171 1a8e 7611      	  dw pad_
 7172 1a90 420D      	  dw hld_
 7173 1a92 490C      	  dw store_
 7174 1a94 C00A      	  dw semicolon_s_
 7175               	
 7176               	; ----------------------------------------------
 7177 1a96 650C      	  _colon_header hash_greater_,"#>"
 7178               	
 7179 1a98 D40B      	  dw drop_
 7180 1a9a D40B      	  dw drop_
 7181 1a9c 420D 1A0C 	  dw hld_,fetch_
 7182 1aa0 7611      	  dw pad_
 7183 1aa2 CC0B      	  dw over_
 7184 1aa4 D20D      	  dw minus_
 7185 1aa6 C00A      	  dw semicolon_s_
 7186               	
 7187               	; ----------------------------------------------
 7188 1aa8 650C      	  _colon_header sign_,"SIGN"
 7189               	
 7190               	; doc{
 7191               	
 7192               	; sign  ( n  d  ---  d ) \ fig-Forth
 7193               	
 7194               	; Stores an ascii "-" sign just before a converted numeric
 7195               	; output string in the text output buffer when _n_ is negative.
 7196               	; _n_ is discarded but double number _d_ is maintained. Must be
 7197               	; used between `<#` and `#>`.
 7198               	
 7199               	; }doc
 7200               	
 7201               	  ; XXX TODO convert to ANS Forth
 7202               	
 7203 1aaa 1E0E 6D0B 	  dw rot_,zero_less_than_
GAS LISTING solo_forth.z80s 			page 132


 7204 1aae 6007 B71A 	  dw zero_branch_,sign.end
 7205 1ab2 8306 2D   	  _literal '-'
 7206 1ab5 6411      	  dw hold_
 7207               	sign.end:
 7208 1ab7 C00A      	  dw semicolon_s_
 7209               	
 7210               	; ----------------------------------------------
 7211 1ab9 650C      	  _colon_header hash_,"#"
 7212               	
 7213               	; doc{
 7214               	;
 7215               	; #  ( d1 -- d2 )
 7216               	;
 7217               	; Divide _d1_ by current base.  The remainder is converted to
 7218               	; an ASCII character and appended to the output text string.
 7219               	; The quotient _d2_ is left on stack.
 7220               	;
 7221               	; }doc
 7222               	
 7223               	
 7224 1abb 330D 1A0C 	  dw base_,fetch_
 7225 1abf 9717      	  dw m_slash_mod_ ;  ( remainder dquotient )
 7226 1ac1 1E0E      	  dw rot_ ; ( dquotient remainder )
 7227 1ac3 8306 09   	  _literal 0x09
 7228 1ac6 CC0B F60D 	  dw over_,less_than_ ; remainder<9?
 7229 1aca 6007 D31A 	  dw zero_branch_,hash.digit
 7230               	  ; remainder<9
 7231 1ace 8306 07   	  _literal 0x07
 7232 1ad1 810B      	  dw plus_ ; make it an alphabet
 7233               	hash.digit:
 7234               	  ; Form the ASCII representation of a digit:
 7235               	  ; "0" to "9" and "A" to "F" (or above).
 7236 1ad3 8306 30   	  _literal '0'
 7237 1ad6 810B      	  dw plus_
 7238 1ad8 6411      	  dw hold_ ; put the digit into `pad` in a reversed order.
 7239 1ada C00A      	  dw semicolon_s_
 7240               	
 7241               	; ----------------------------------------------
 7242 1adc 650C      	  _colon_header hash_s_,"#S"
 7243               	
 7244               	; doc{
 7245               	;
 7246               	; #S  ( d1 -- d2 )
 7247               	;
 7248               	; }doc
 7249               	
 7250               	hash_s.begin:
 7251 1ade B91A E70B 	  dw hash_,two_dup_,or_
 7251      5D0A 
 7252 1ae4 6C07 DE1A 	  dw question_branch_,hash_s.begin
 7253 1ae8 C00A      	  dw semicolon_s_
 7254               	
 7255               	; ----------------------------------------------
 7256 1aea 650C      	  _colon_header d_dot_r_,"D.R"
 7257               	
 7258               	; doc{
 7259               	;
GAS LISTING solo_forth.z80s 			page 133


 7260               	; d.r  ( d n -- )
 7261               	;
 7262               	; Print a signed double number _d_ right justified in a field of
 7263               	; _n_ characters.
 7264               	;
 7265               	; }doc
 7266               	
 7267 1aec F00A      	  dw to_r_ ; save n
 7268               	  ; Save the high order part of d under d,
 7269               	  ; to be used by `sign` to add a "-" sign to a negative number:
 7270 1aee D90B CC0B 	  dw swap_,over_
 7271 1af2 F216      	  dw dabs_ ; convert d to its absolute value
 7272               	  ; Convert the absolute value to ASCII text with proper sign:
 7273 1af4 8C1A      	  dw less_hash_
 7274 1af6 DC1A      	  dw hash_s_
 7275 1af8 A81A      	  dw sign_
 7276 1afa 961A      	  dw hash_greater_
 7277 1afc FF0A      	  dw from_r_ ; retrieve n
 7278 1afe CC0B D20D 	  dw over_,minus_,spaces_ ; fill the output field with preceding blanks
 7278      661A 
 7279 1b04 1A10      	  dw type_ ; type out the number
 7280 1b06 C00A      	  dw semicolon_s_
 7281               	
 7282               	; ----------------------------------------------
 7283 1b08 650C      	  _colon_header dot_r_,".R"
 7284               	
 7285 1b0a F00A C316 	  dw to_r_,s_to_d_,from_r_,d_dot_r_
 7285      FF0A EA1A 
 7286 1b12 C00A      	  dw semicolon_s_
 7287               	
 7288               	; ----------------------------------------------
 7289 1b14 650C      	  _colon_header d_dot_,"D."
 7290               	
 7291               	; doc{
 7292               	;
 7293               	; d.  ( d -- )
 7294               	;
 7295               	; Print signed double integer _d_ according to current base,
 7296               	; followed by only one blank.
 7297               	;
 7298               	; }doc
 7299               	
 7300 1b16 C50C EA1A 	  dw zero_,d_dot_r_,space_
 7300      260E 
 7301 1b1c C00A      	  dw semicolon_s_
 7302               	
 7303               	; ----------------------------------------------
 7304 1b1e 650C      	  _colon_header dot_,"."
 7305               	
 7306               	; doc{
 7307               	;
 7308               	; .  ( n -- )
 7309               	;
 7310               	; Print signed integer _n_ according to current base, followed
 7311               	; by only one blank.
 7312               	;
 7313               	; }doc
GAS LISTING solo_forth.z80s 			page 134


 7314               	
 7315 1b20 C316 141B 	  dw s_to_d_,d_dot_
 7316 1b24 C00A      	  dw semicolon_s_
 7317               	
 7318               	; ----------------------------------------------
 7319 1b26 650C      	  _colon_header question_,"?"
 7320               	
 7321 1b28 1A0C 1E1B 	  dw fetch_,dot_
 7322 1b2c C00A      	  dw semicolon_s_
 7323               	
 7324               	; ----------------------------------------------
 7325 1b2e 650C      	  _colon_header u_dot_,"U."
 7326               	
 7327 1b30 C50C 141B 	  dw zero_,d_dot_
 7328 1b34 C00A      	  dw semicolon_s_
 7329               	
 7330               	; ----------------------------------------------
 7331               	
 7332               	.if 1
 7333               	
 7334 1b36 650C      	  _colon_header dot_s_,".S"
 7335               	
 7336               	  ; XXX TMP -- only during the development, then remove
 7337               	  ; It is already on the disk.
 7338               	
 7339 1b38 EB14 E00B 	  dw depth_,dup_,s_to_d_,less_hash_
 7339      C316 8C1A 
 7340 1b40 8306 3E   	  _literal '>'
 7341 1b43 6411 DC1A 	  dw hold_,hash_s_
 7342 1b47 8306 3C   	  _literal '<'
 7343 1b4a 6411 961A 	  dw hold_,hash_greater_,type_,space_
 7343      1A10 260E 
 7344 1b52 6007 701B 	  dw zero_branch_,dot_s.end
 7345               	
 7346 1b56 9D0A 710D 	  dw sp_fetch_,two_minus_,sp0_,fetch_,two_minus_
 7346      0B0D 1A0C 
 7346      710D 
 7347 1b60 AD07      	  dw paren_do_
 7348               	dot_s.do:
 7349 1b62 4408 1A0C 	  dw i_,fetch_,u_dot_ ; XXX TMP `u.`
 7349      2E1B 
 7350 1b68 8D06 FEFF 	  dw lit_,-2
 7351 1b6c A707 621B 	  dw paren_plus_loop_,dot_s.do
 7352               	dot_s.end:
 7353 1b70 C00A      	  dw semicolon_s_
 7354               	
 7355               	.endif
 7356               	
 7357               	; ----------------------------------------------
 7358 1b72 741B      	  _code_header colors0_,"COLORS0"
 7359               	
 7360               	; doc{
 7361               	;
 7362               	; colors0  ( -- )
 7363               	; 
 7364               	; Set the screen colors to the default values.
 7365               	;
GAS LISTING solo_forth.z80s 			page 135


 7366               	; }doc
 7367               	
 7368               	  ; Set the colors and their masks.
 7369               	
 7370 1b74 2A12 00   	  ld hl,(default_color_attribute)
 7371               	  ; l = 128*flash + 64*bright + 8*paper + ink
 7372               	  ; h = mask
 7373 1b77 228D 5C   	  ld (sys_attr_p),hl ; permanent
 7374 1b7a 228F 5C   	  ld (sys_attr_t),hl ; temporary
 7375               	
 7376               	  ; Set the system variable that holds the attributes of the
 7377               	  ; lower part of the screen.  It is needed only because G+DOS
 7378               	  ; by default changes the border color during disk operations,
 7379               	  ; and at the end restores it with the value of this system
 7380               	  ; variable.
 7381               	
 7382 1b7d 7D        	  ld a,l
 7383 1b7e 3248 5C   	  ld (sys_bordcr),a ; lower screen colors
 7384               	
 7385               	  ; Set the border color to the paper color.
 7386               	
 7387               	  ; a = 128*flash + 64*bright + 8*paper + ink
 7388 1b81 A7        	  and a ; cy=0
 7389 1b82 1F        	  rra
 7390 1b83 1F        	  rra
 7391 1b84 1F        	  rra ; a = paper
 7392 1b85 D3FE      	  out (border_port),a ; set the border color
 7393               	
 7394 1b87 DDE9      	  _jp_next
 7395               	
 7396               	; ----------------------------------------------
 7397 1b89 8B1B      	  _code_header home_,"HOME"
 7398               	
 7399               	; doc{
 7400               	;
 7401               	; home  ( -- )
 7402               	;
 7403               	; Reset the cursor position to the upper left corner (column 0,
 7404               	; row 0).
 7405               	;
 7406               	; }doc
 7407               	
 7408 1b8b 2121 18   	  ld hl,0x1821 ; 0x18 = 24 - row
 7409               	               ; 0x21 = 33 - column
 7410 1b8e 2288 5C   	  ld (sys_s_posn),hl
 7411 1b91 DDE9      	  _jp_next
 7412               	
 7413               	; ----------------------------------------------
 7414 1b93 951B      	  _code_header cls_,"CLS"
 7415               	
 7416               	
 7417               	; doc{
 7418               	;
 7419               	; cls  ( -- )
 7420               	;
 7421               	; Clear the screen with the current colors and reset the cursor
 7422               	; position to the upper left corner (column 0, row 0).
GAS LISTING solo_forth.z80s 			page 136


 7423               	;
 7424               	; }doc
 7425               	
 7426               	; Note: The ROM routines that clear the screen are slow and do
 7427               	; many unnecessary BASIC-related things. This code simply clears
 7428               	; the screen.
 7429               	
 7430               	  ; XXX TODO compare size with Forth
 7431               	
 7432 1b95 D9        	  exx ; save the Forth IP
 7433               	  ; Erase the bitmap.
 7434 1b96 2100 40   	  ld hl,sys_screen
 7435 1b99 1101 40   	  ld de,sys_screen+1
 7436 1b9c 0100 18   	  ld bc,sys_screen_bitmap_size
 7437 1b9f 3600      	  ld (hl),0
 7438 1ba1 EDB0      	  ldir
 7439               	  ; Color with the permanent attributes.
 7440 1ba3 2100 58   	  ld hl,sys_screen_attributes
 7441 1ba6 1101 58   	  ld de,sys_screen_attributes+1
 7442 1ba9 0100 03   	  ld bc,sys_screen_attributes_size
 7443 1bac 3A8D 5C   	  ld a,(sys_attr_p)
 7444 1baf 77        	  ld (hl),a
 7445 1bb0 EDB0      	  ldir
 7446 1bb2 D9        	  exx ; restore the Forth IP
 7447 1bb3 C38B 1B   	  jp home_pfa ; continue at `home`
 7448               	
 7449               	; ----------------------------------------------
 7450 1bb6 650C      	  _colon_header page_,"PAGE"
 7451               	
 7452               	; doc{
 7453               	;
 7454               	; page  ( -- )  \ ANS Forth
 7455               	;
 7456               	; Move to another page for output.  On a terminal, `page` clears
 7457               	; the screen and resets the cursor position to the upper left
 7458               	; corner. On a printer, `page` performs a form feed.
 7459               	;
 7460               	; }doc
 7461               	
 7462               	  ; XXX TODO printer support
 7463               	
 7464 1bb8 931B      	  dw cls_
 7465 1bba C00A      	  dw semicolon_s_
 7466               	
 7467               	; ----------------------------------------------
 7468 1bbc BE1B      	  _code_header bye_,"BYE"
 7469               	
 7470 1bbe FD36 3102 	  ld (iy+sys_df_sz_offset),0x02 ; restore lines of the lower screen
 7471               	system_stack_pointer: equ $+1
 7472 1bc2 3100 00   	  ld sp,0 ; restore the system stack
 7473               	.if latin1_charset_in_bank
 7474               	  ; Restore the default charset:
 7475               	  ld hl,15360
 7476               	  ld (sys_chars),hl
 7477               	.endif
 7478               	  ; Exit to BASIC:
 7479 1bc5 CF        	  rst 0x08
GAS LISTING solo_forth.z80s 			page 137


 7480 1bc6 08        	  db 0x08 ; "STOP" BASIC error
 7481               	
 7482               	; ----------------------------------------------
 7483 1bc7 C91B      	  _code_header two_drop_,"2DROP"
 7484               	
 7485 1bc9 E1        	  pop hl
 7486 1bca E1        	  pop hl
 7487 1bcb DDE9      	  _jp_next
 7488               	
 7489               	; ----------------------------------------------
 7490 1bcd CF1B      	  _code_header two_swap_,"2SWAP"
 7491               	
 7492               	  ; [Code from DZX-Forth.]
 7493               	
 7494 1bcf E1        	  pop hl
 7495 1bd0 D1        	  pop de
 7496 1bd1 E3        	  ex (sp),hl
 7497 1bd2 E5        	  push hl
 7498 1bd3 2105 00   	  ld hl,5
 7499 1bd6 39        	  add hl,sp
 7500 1bd7 7E        	  ld a,(hl)
 7501 1bd8 72        	  ld (hl),d
 7502 1bd9 57        	  ld d,a
 7503 1bda 2B        	  dec hl
 7504 1bdb 7E        	  ld a,(hl)
 7505 1bdc 73        	  ld (hl),e
 7506 1bdd 5F        	  ld e,a
 7507 1bde E1        	  pop hl
 7508 1bdf C35D 05   	  jp push_hlde
 7509               	
 7510               	; ----------------------------------------------
 7511 1be2 650C      	  _colon_header unused_,"UNUSED"
 7512               	
 7513               	  ; XXX TMP
 7514 1be4 C50C 900D 	  dw zero_,here_,minus_
 7514      D20D 
 7515 1bea C00A      	  dw semicolon_s_
 7516               	
 7517               	; ----------------------------------------------
 7518 1bec 650C      	  _colon_header where_,"WHERE"
 7519               	
 7520               	  ; XXX TODO -- remove; already copied to the disk
 7521               	
 7522 1bee 5F13 2C0C 	  dw error_pos_,two_fetch_ ; XXX NEW
 7523 1bf2 E00B      	  dw dup_
 7524 1bf4 6C07 FC1B 	  dw question_branch_,where.do_it
 7525 1bf8 C71B      	  dw two_drop_
 7526 1bfa C00A      	  dw semicolon_s_
 7527               	
 7528               	where.do_it:
 7529 1bfc E00B F50C 	  dw dup_,b_slash_scr_,slash_
 7529      7317 
 7530 1c02 4D10      	  dw paren_dot_quote_
 7531               	  ;_string "Scr # " ; XXX FIXME compiled with length 2!
 7532 1c04 05        	  db where.string_1_end-$-1
 7533 1c05 5363 7220 	  db "Scr #"
 7533      23
GAS LISTING solo_forth.z80s 			page 138


 7534               	where.string_1_end:
 7535 1c0a BE0F 1E1B 	  dw decimal_,dot_
 7536 1c0e D90B E50C 	  dw swap_,c_slash_l_,slash_mod_,c_slash_l_,star_
 7536      6717 E50C 
 7536      5F17 
 7537 1c18 1E0E 7718 	  dw rot_,block_,plus_
 7537      810B 
 7538 1c1e E50C CD09 	  dw c_slash_l_,cr_,type_,cr_
 7538      1A10 CD09 
 7539 1c26 900D 230C 	  dw here_,c_fetch_,minus_,spaces_
 7539      D20D 661A 
 7540 1c2e 8306 5E   	  _literal '^'
 7541 1c31 EC08      	  dw emit_
 7542 1c33 C00A      	  dw semicolon_s_
 7543               	
 7544               	; ----------------------------------------------
 7545 1c35 650C      	  _colon_header at_xy,"AT-XY"
 7546               	
 7547               	; doc{
 7548               	
 7549               	; at-xy ( col line -- )  \ ANS Forth
 7550               	
 7551               	; Warning: The system will crash if the coordinates are out of screen.
 7552               	; For the sake of speed, no check is done.  A wrapper secure word can
 7553               	; be written if needed.
 7554               	
 7555               	; }doc
 7556               	
 7557               	; [Code adapted from Spectrum Forth-83.]
 7558               	
 7559 1c37 E00B      	  dw dup_
 7560 1c39 8306 17   	  _literal 23
 7561 1c3c DC0D      	  dw not_equals_ ; not the last line?
 7562 1c3e 6007 4E1C 	  dw zero_branch_,at_pfa.last_line
 7563               	  ; not the last line
 7564 1c42 8D06 1600 	  dw lit_,22,paren_emit_,paren_emit_,paren_emit_
 7564      F808 F808 
 7564      F808 
 7565 1c4c C00A      	  dw semicolon_s_ ; XXX TODO exit_
 7566               	
 7567               	at_pfa.last_line:
 7568 1c4e 6A0D E00B 	  dw one_minus_,dup_,paren_emit_,paren_emit_,zero_,paren_emit_
 7568      F808 F808 
 7568      C50C F808 
 7569 1c5a CD09      	  dw cr_
 7570 1c5c E00B      	  dw dup_
 7571 1c5e 8D06 845C 	  dw lit_,sys_df_cc ; address in display file of print position
 7572 1c62 F00B      	  dw plus_store_
 7573 1c64 8306 21   	  _literal 33
 7574 1c67 D90B      	  dw swap_
 7575 1c69 D20D      	  dw minus_
 7576 1c6b 8D06 885C 	  dw lit_,sys_s_posn ; 33 minus column number for print position
 7577 1c6f 520C      	  dw c_store_
 7578 1c71 C00A      	  dw semicolon_s_
 7579               	
 7580               	; ----------------------------------------------
 7581 1c73 751C      	  _code_header border_,"BORDER"
GAS LISTING solo_forth.z80s 			page 139


 7582               	
 7583 1c75 E1        	  pop hl
 7584 1c76 7D        	  ld a,l
 7585 1c77 D3FE      	  out (border_port),a
 7586               	
 7587               	  ; The system variable that holds the attributes of the lower
 7588               	  ; part of the screen, unnecessary in Solo Forth, must be
 7589               	  ; updated.  The reason is G+DOS, after disk operations that
 7590               	  ; make the border change, restores the border color with the
 7591               	  ; value of this system variable.  We use the border color as
 7592               	  ; paper and set a a contrast ink (black or white), to make
 7593               	  ; sure the lower part of the screen is usable after returning
 7594               	  ; to BASIC.
 7595               	
 7596               	  ; XXX TODO move the contrast ink calculation to `bye` or
 7597               	  ; simply remove it:
 7598               	
 7599 1c79 FE04      	  cp 4 ; cy = dark color (0..3)?
 7600 1c7b 3E07      	  ld a,7 ; white ink
 7601 1c7d 3801      	  jr c,border.end
 7602 1c7f AF        	  xor a ; black ink
 7603               	
 7604               	border.end:
 7605               	  ; Note: slower than shifting the register, but saves three bytes.
 7606 1c80 29        	  add hl,hl
 7607 1c81 29        	  add hl,hl
 7608 1c82 29        	  add hl,hl ; l = paper (bits 3..5)
 7609 1c83 B5        	  or l ; combine with ink
 7610 1c84 3248 5C   	  ld (sys_bordcr),a
 7611 1c87 DDE9      	  _jp_next
 7612               	
 7613               	; ----------------------------------------------
 7614 1c89 8B1C      	  _code_header overwrite_,"OVERWRITE"
 7615               	
 7616 1c8b 3E15      	  ld a,over_char
 7617 1c8d C3B0 1C   	  jp color
 7618               	
 7619               	; ----------------------------------------------
 7620 1c90 921C      	  _code_header flash_,"FLASH"
 7621               	
 7622 1c92 3E12      	  ld a,flash_char
 7623 1c94 C3B0 1C   	  jp color
 7624               	
 7625               	; ----------------------------------------------
 7626 1c97 991C      	  _code_header inverse_,"INVERSE"
 7627               	
 7628 1c99 3E14      	  ld a,inverse_char
 7629 1c9b C3B0 1C   	  jp color
 7630               	
 7631               	; ----------------------------------------------
 7632 1c9e A01C      	  _code_header bright_,"BRIGHT"
 7633               	
 7634 1ca0 3E13      	  ld a,bright_char
 7635 1ca2 C3B0 1C   	  jp color
 7636               	
 7637               	; ----------------------------------------------
 7638 1ca5 A71C      	  _code_header paper_,"PAPER"
GAS LISTING solo_forth.z80s 			page 140


 7639               	
 7640 1ca7 3E11      	  ld a,paper_char
 7641 1ca9 C3B0 1C   	  jp color
 7642               	
 7643               	; ----------------------------------------------
 7644 1cac AE1C      	  _code_header ink_,"INK"
 7645               	
 7646 1cae 3E10      	  ld a,ink_char
 7647               	
 7648               	color:
 7649               	  ; Set a color attribute (ink, paper, bright, flash, inverse or
 7650               	  ; overwrite).
 7651               	  ; Input:
 7652               	  ;   a = attribute control char
 7653               	  ;   (tos) = color attribute value
 7654 1cb0 D7        	  rst 0x10
 7655 1cb1 E1        	  pop hl
 7656 1cb2 7D        	  ld a,l
 7657 1cb3 D7        	  rst 0x10
 7658 1cb4 CDAD 1C   	  call rom_set_permanent_colors_0x1CAD
 7659 1cb7 DDE9      	  _jp_next
 7660               	
 7661               	; ----------------------------------------------
 7662 1cb9 BB1C      	  _code_header emitted_,"EMITTED"
 7663               	
 7664               	  ; [Code adapted and modified from the ZX Spectrum ROM routine
 7665               	  ; S-SCRN$-S at 0x2535.]
 7666               	
 7667               	; doc{
 7668               	;
 7669               	; emitted  ( col row -- n | 0 )
 7670               	;
 7671               	; Return the ordinal number _n_ (first is 1) of the character
 7672               	; printed at the given screen coordinates, or 0 if no character
 7673               	; can be recognized on that position of the screen.
 7674               	;
 7675               	; This word must be configured by `emitted-charset` and
 7676               	; `#emitted-chars`, that set the address of the first character
 7677               	; and the number of characters to compare with. By default the
 7678               	; printable ASCII chars of the ROM charset are used.
 7679               	;
 7680               	; The result _n_ is the ordinal number (first is 1) of the
 7681               	; recognized char in the specified charset. Example: with the
 7682               	; default configuration, a recognized space char would return 1;
 7683               	; a "!" char, 2; a "A", 34...
 7684               	;
 7685               	; This word is meant to be used with user defined graphics.
 7686               	;
 7687               	; }doc
 7688               	
 7689               	  ; XXX TODO improve the result
 7690               	  ;
 7691               	  ; XXX TODO move to the disk
 7692               	  ;
 7693               	  ; XXX TODO rename?: `ocr`, `recognized`, `on-xy`, `xy-char`?
 7694               	  ; The reasen is name clash with the fig-Forth `out` counter,
 7695               	  ; that was going to be called `emitted` or `#emitted`.
GAS LISTING solo_forth.z80s 			page 141


 7696               	
 7697 1cbb D1        	  pop de ; row
 7698 1cbc E1        	  pop hl ; col
 7699 1cbd C5        	  push bc ; save the Forth IP
 7700 1cbe 45        	  ld b,l ; column
 7701 1cbf 4B        	  ld c,e ; row
 7702 1cc0 2A0C 1D   	  ld hl,(emitted_charset_pfa) ; address of first printable char in the charset
 7703 1cc3 79        	  ld a,c  ; row
 7704 1cc4 0F        	  rrca
 7705 1cc5 0F        	  rrca
 7706 1cc6 0F        	  rrca ; multiply by 0x20
 7707 1cc7 E6E0      	  and  %11100000
 7708 1cc9 A8        	  xor  b ; combine with column (0x00..0x1F)
 7709 1cca 5F        	  ld  e,a ; low byte of top row = 0x20 * (line mod 8) + column
 7710 1ccb 79        	  ld  a,c  ; row is copied to a again
 7711 1ccc E618      	  and  0x18
 7712 1cce EE40      	  xor  0x40
 7713 1cd0 57        	  ld  d,a ; high byte of top row = 64 + 8*int (line/8)
 7714               	  ; de = screen address
 7715 1cd1 3A10 1D   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7716 1cd4 47        	  ld b,a
 7717               	
 7718               	emitted.do:
 7719 1cd5 C5        	  push  bc  ; save the characters count
 7720 1cd6 D5        	  push  de  ; save the screen pointer
 7721 1cd7 E5        	  push  hl  ; save the character set pointer (bitmap start)
 7722 1cd8 1A        	  ld  a,(de)  ; get first scan of screen character
 7723 1cd9 AE        	  xor  (hl)  ; match with scan from character set
 7724 1cda CAE2 1C   	  jp z,emitted.match  ; jump if direct match found
 7725               	  ; if inverse, a=0xFF
 7726 1cdd 3C        	  inc  a  ; inverse? (if inverse, a=0)
 7727 1cde C2FA 1C   	  jp  nz,emitted.next_char  ; jump if inverse match not found
 7728               	  ; inverse match
 7729 1ce1 3D        	  dec  a  ; restore 0xFF
 7730               	emitted.match:
 7731 1ce2 4F        	  ld  c,a  ; inverse mask (0x00 or 0xFF)
 7732 1ce3 0607      	  ld  b,0x07  ; count 7 more character rows
 7733               	emitted.scans:
 7734 1ce5 14        	  inc  d  ; next screen scan (add 0x100)
 7735 1ce6 23        	  inc  hl  ; next bitmap address
 7736 1ce7 1A        	  ld  a,(de)  ; screen scan
 7737 1ce8 AE        	  xor  (hl)  ; will give 0x00 or 0xFF (inverse)
 7738 1ce9 A9        	  xor  c  ; inverse mask to include the inverse status
 7739 1cea C2FA 1C   	  jp  nz,emitted.next_char  ; jump if no match
 7740 1ced 10F6      	  djnz  emitted.scans  ; jump back till all scans done
 7741               	
 7742               	  ; character match
 7743 1cef C1        	  pop  bc  ; discard character set pointer
 7744 1cf0 C1        	  pop  bc  ; discard screen pointer
 7745 1cf1 C1        	  pop  bc  ; final count
 7746 1cf2 3A10 1D   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7747 1cf5 90        	  sub  b ; ordinal number of the matched character (1 is the first)
 7748 1cf6 6F        	  ld l,a
 7749 1cf7 C304 1D   	  jp emitted.end
 7750               	
 7751               	emitted.next_char:
 7752 1cfa E1        	  pop  hl  ; restore character set pointer
GAS LISTING solo_forth.z80s 			page 142


 7753 1cfb 1108 00   	  ld  de,0x0008  ; move it on 8 bytes
 7754 1cfe 19        	  add  hl,de  ; to the next character in the set
 7755 1cff D1        	  pop  de  ; restore the screen pointer
 7756 1d00 C1        	  pop  bc  ; restore the counter
 7757 1d01 10D2      	  djnz  emitted.do  ; loop back for the 96 characters
 7758               	  ; no match
 7759 1d03 68        	  ld l,b ; zero
 7760               	
 7761               	emitted.end:
 7762 1d04 C1        	  pop bc ; restore the Forth IP
 7763 1d05 2600      	  ld h,0
 7764 1d07 C35E 05   	  jp push_hl
 7765               	
 7766               	; ----------------------------------------------
 7767 1d0a 1A14      	  _variable_header emitted_charset_,"EMITTED-CHARSET"
 7768               	
 7769               	; doc{
 7770               	;
 7771               	; emitted-charset  ( -- a )
 7772               	;
 7773               	; Variable that holds the address of the first printable char in
 7774               	; the charset used by `emitted`. By default it contains 0x3D00, the
 7775               	; address of the space char in the ROM charset.
 7776               	;
 7777               	; }doc
 7778               	
 7779 1d0c 003D      	  dw 0x3D00 ; address of the space in the ROM charset
 7780               	
 7781               	; ----------------------------------------------
 7782 1d0e 1A14      	  _variable_header hash_emitted_chars_,"#EMITTED-CHARS"
 7783               	
 7784               	; doc{
 7785               	;
 7786               	; #emitted-charset  ( -- a )
 7787               	;
 7788               	; Variable that holds the number of printable chars in the
 7789               	; charset used by `emitted`. By default it contais 0x5F, the
 7790               	; number of printable ASCII chars in the ROM charset.
 7791               	;
 7792               	; }doc
 7793               	
 7794 1d10 5F00      	  dw 0x5F ; printable ASCII chars in the ROM charset
 7795               	
 7796               	; ----------------------------------------------
 7797 1d12 141D      	  _code_header j_,"J"
 7798               	
 7799               	; doc{
 7800               	;
 7801               	; j  ( -- x ) ( R: loop-sys1 loop-sys2 -- loop-sys1 loop-sys2 ) \ ANS Forth
 7802               	;
 7803               	; Return a copy of the next-outer loop index.
 7804               	;
 7805               	; }doc
 7806               	
 7807 1d14 2A10 00   	  ld hl,(return_stack_pointer)
 7808 1d17 1104 00   	  ld de,cell*2
 7809 1d1a 19        	  add hl,de
GAS LISTING solo_forth.z80s 			page 143


 7810 1d1b C31D 0C   	  jp fetch.hl
 7811               	
 7812               	; ----------------------------------------------
 7813 1d1e 650C      	  _colon_header two_constant_,"2CONSTANT"
 7814               	
 7815 1d20 291D      	  dw two_variable_
 7816 1d22 C90F      	  dw paren_semicolon_code_
 7817               	do_two_constant:
 7818 1d24 13        	  inc de    ; de=pfa
 7819 1d25 EB        	  ex de,hl  ; hl=pfa
 7820 1d26 C32F 0C   	  jp two_fetch.hl
 7821               	
 7822               	; ----------------------------------------------
 7823 1d29 650C      	  _colon_header two_variable_,"2VARIABLE"
 7824               	
 7825               	; doc{
 7826               	;
 7827               	; 2variable ( "name" -- )  \ ANS Forth
 7828               	;
 7829               	; Parse _name_.  Create a definition for _name_ with the
 7830               	; execution semantics defined below. Reserve two consecutive
 7831               	; cells of data space.
 7832               	;
 7833               	;    _name_ is referred to as a two-variable.
 7834               	;
 7835               	;          name Execution: ( -- a )
 7836               	;
 7837               	;    _a_ is the address of the first (lowes address) cell of two
 7838               	;    consecutive cells. A program is responsible for
 7839               	;    initializing the contents.
 7840               	;
 7841               	; }doc
 7842               	
 7843 1d2b 1214      	  dw create_
 7844 1d2d 8D06 0400 	  dw lit_,cell*2,allot_
 7844      980D 
 7845 1d33 C00A      	  dw semicolon_s_
 7846               	
 7847               	; ----------------------------------------------
 7848 1d35 650C      	  _colon_header u_dot_r_,"U.R"
 7849               	
 7850 1d37 F00A C50C 	  dw to_r_,zero_,from_r_,d_dot_r_
 7850      FF0A EA1A 
 7851 1d3f C00A      	  dw semicolon_s_
 7852               	
 7853               	; ----------------------------------------------
 7854 1d41 431D      	  _code_header two_over_,"2OVER"
 7855               	
 7856               	; doc{
 7857               	;
 7858               	; 2over  ( d1 d2 -- d1 d2 d1 )
 7859               	;
 7860               	; }doc
 7861               	
 7862 1d43 2104 00   	  ld hl,4
 7863 1d46 39        	  add hl,sp
 7864 1d47 C32F 0C   	  jp two_fetch.hl
GAS LISTING solo_forth.z80s 			page 144


 7865               	
 7866               	.if 1 ; fig_exit?
 7867               	
 7868               	; ----------------------------------------------
 7869 1d4a 650C      	  _colon_header exit_,"EXIT"
 7870               	
 7871               	; doc{
 7872               	;
 7873               	; exit  ( -- ) ( R: a -- )  \ ANS Forth
 7874               	;
 7875               	; Return control to the calling definition, specified by the
 7876               	; address on the return stack.
 7877               	;
 7878               	; Before executing `exit` within a do-loop, a program shall
 7879               	; discard the loop-control parameters by executing `unloop`.
 7880               	;
 7881               	; }doc
 7882               	
 7883               	; XXX TODO combine this `exit` with `;s`?
 7884               	
 7885 1d4c 1C0B      	  dw r_drop_
 7886 1d4e C00A      	  dw semicolon_s_
 7887               	
 7888               	; ----------------------------------------------
 7889 1d50 650C      	  _colon_header question_exit_,"?EXIT"
 7890               	
 7891               	; doc{
 7892               	;
 7893               	; ?exit  ( f -- ) ( R: a | -- a | )
 7894               	;
 7895               	; If _f_ is non-zero, return control to the calling definition,
 7896               	; specified by the address on the return stack.
 7897               	;
 7898               	; `?exit` is not intended to be used within a do-loop. Use `if
 7899               	; unloop exit then` instead.
 7900               	;
 7901               	; }doc
 7902               	
 7903 1d52 6C07 4C1D 	  dw question_branch_,exit_pfa
 7904 1d56 C00A      	  dw semicolon_s_
 7905               	
 7906               	.else
 7907               	
 7908               	; ----------------------------------------------
 7909               	  _code_header question_exit_,"?EXIT"
 7910               	
 7911               	; doc{
 7912               	;
 7913               	; ?exit  ( f -- ) ( R: a | -- a | )
 7914               	;
 7915               	; If _f_ is non-zero, return control to the calling definition,
 7916               	; specified by the address on the return stack.
 7917               	;
 7918               	; `?exit` is not intended to be used within a do-loop. Use `if
 7919               	; unloop exit then` instead.
 7920               	;
 7921               	; }doc
GAS LISTING solo_forth.z80s 			page 145


 7922               	
 7923               	  pop hl
 7924               	  ld h,a
 7925               	  or l
 7926               	  jp nz,exit_pfa
 7927               	  _jp_next
 7928               	
 7929               	.endif
 7930               	
 7931               	; ----------------------------------------------
 7932 1d58 650C      	  _colon_header char_,"CHAR"
 7933               	
 7934 1d5a B511 D40B 	  dw parse_name_,drop_,c_fetch_
 7934      230C 
 7935 1d60 C00A      	  dw semicolon_s_
 7936               	
 7937               	; ----------------------------------------------
 7938 1d62 650C      	  _colon_header bracket_char_,"[CHAR]",immediate
 7939               	
 7940 1d64 581D CB14 	  dw char_,literal_
 7941 1d68 C00A      	  dw semicolon_s_
 7942               	
 7943               	; ----------------------------------------------
 7944               	  ;_colon_header s_quote_,"S\"",immediate ; XXX FIXME as error
 7945 1d6a 650C      	  _colon_header s_quote_,"S\x22",immediate
 7946               	
 7947               	  ; : s"  ( compilation: "text<">" -- ) ( run-time:  -- ca len )
 7948               	  ;  [char] " (s)  ; immediate
 7949               	
 7950 1d6c 8306 22   	  _literal '"'
 7951 1d6f 7106      	  dw paren_s_
 7952 1d71 C00A      	  dw semicolon_s_
 7953               	
 7954               	; ----------------------------------------------
 7955 1d73 650C      	  _colon_header question_next_screen_,"?-->",immediate
 7956               	
 7957 1d75 6007 7B1D 	  dw zero_branch_,question_next_screen.end
 7958 1d79 6E19      	  dw next_screen_
 7959               	question_next_screen.end:
 7960 1d7b C00A      	  dw semicolon_s_
 7961               	
 7962               	  ; XXX TODO a good place to use `??` instead of a branch:
 7963               	;  dw question_question_,next_screen_
 7964               	;  dw semicolon_s_
 7965               	
 7966               	; ----------------------------------------------
 7967 1d7d 650C      	  _colon_header question_backslash_,"?\\",immediate
 7968               	
 7969               	; doc{
 7970               	;
 7971               	; ?\  ( f "ccc<eol> -- )
 7972               	;
 7973               	; If _f_ is not false, parse and discard the rest of the parse
 7974               	; area. This word is used for conditional compilation.
 7975               	;
 7976               	; }doc
 7977               	
GAS LISTING solo_forth.z80s 			page 146


 7978 1d7f 6007 851D 	  dw zero_branch_,question_backslash.end
 7979 1d83 871D      	  dw backslash_
 7980               	question_backslash.end:
 7981 1d85 C00A      	  dw semicolon_s_
 7982               	
 7983               	; ----------------------------------------------
 7984 1d87 650C      	  _colon_header backslash_,"\\",immediate
 7985               	
 7986               	; doc{
 7987               	;
 7988               	; \  ( -- )
 7989               	; 
 7990               	; Parse and discard the rest of the parse area.
 7991               	;
 7992               	; }doc
 7993               	
 7994 1d89 210D 1A0C 	  dw to_in_,fetch_,c_slash_l_,mod_
 7994      E50C 7B17 
 7995 1d91 E50C D90B 	  dw c_slash_l_,swap_,minus_
 7995      D20D 
 7996 1d97 210D F00B 	  dw to_in_,plus_store_
 7997 1d9b C00A      	  dw semicolon_s_
 7998               	
 7999               	; ----------------------------------------------
 8000 1d9d 650C      	  _colon_header dot_paren_,".(",immediate
 8001               	
 8002               	; doc{
 8003               	;
 8004               	; .(  ( 'text<paren>' -- )  \ immediate
 8005               	;
 8006               	; }doc
 8007               	
 8008 1d9f 8306 29   	  _literal ')'
 8009 1da2 A711 1A10 	  dw parse_,type_
 8010 1da6 C00A      	  dw semicolon_s_
 8011               	
 8012               	; ----------------------------------------------
 8013 1da8 650C      	  _colon_header xxx_,"x",immediate
 8014               	
 8015               	; XXX TMP -- word created only for debugging
 8016               	
 8017 1daa C00A      	  dw semicolon_s_
 8018               	
 8019               	  .data
 8020               	;latest_nfa_in_forth_voc: equ dot_paren_nfa
 8021               	latest_nfa_in_forth_voc: equ xxx_nfa ;XXX TMP
 8022               	  .text
 8023               	
 8024               	dictionary_pointer_after_cold:
 8025               	
 8026               	; ==============================================================
 8027               	; Name and link fields
 8028               	
 8029               	move_name_fields_to_memory_bank:
 8030               	
 8031               	  ; Move the name fields, assembled in ordinary memory, to the
 8032               	  ; names bank. This routine is needed only once, therefore its
GAS LISTING solo_forth.z80s 			page 147


 8033               	  ; call is patched with `noop` at the end; the routine itself
 8034               	  ; will be overwritten by the Forth dictionary.
 8035               	
 8036               	  ; The whole screen is used as intermediate buffer for copying
 8037               	  ; the data.
 8038               	
 8039 1dac 2100 C0   	  ld hl,names_bank_address ; origin
 8040 1daf 1100 40   	  ld de,sys_screen ; destination
 8041 1db2 0100 1B   	  ld bc,sys_screen_size ; count
 8042 1db5 EDB0      	  ldir ; copy the data to the screen
 8043               	  ;_z80_border_wait 1 ; XXX INFORMER
 8044 1db7 1E01      	  ld e,names_bank
 8045 1db9 CDA0 06   	  call bank.e
 8046 1dbc 2100 40   	  ld hl,sys_screen ; origin
 8047 1dbf 1100 C0   	  ld de,names_bank_address ; destination
 8048 1dc2 0100 1B   	  ld bc,sys_screen_size ; count
 8049 1dc5 EDB0      	  ldir ; copy the name fields to the bank
 8050               	  ;_z80_border_wait 2 ; XXX INFORMER
 8051               	.if latin1_charset_in_bank
 8052               	  ld hl,sys_screen+sys_screen_size-charset_size ; origin
 8053               	  ld de,charset_address ; destination
 8054               	  ld bc,charset_size ; count
 8055               	  ldir ; copy the charset to the bank
 8056               	.endif
 8057 1dc7 1E00      	  ld e,default_bank
 8058 1dc9 CDA0 06   	  call bank.e
 8059               	
 8060               	  ; Erase the default bank (not necessary) ; XXX OLD
 8061               	  ; ld hl,names_bank_address ; the first byte is 0
 8062               	  ; ld de,names_bank_address+1
 8063               	  ; ld bc,sys_screen
 8064               	  ; ldir
 8065               	
 8066               	  ; Remove the call to this routine:
 8067 1dcc 21AC 16   	  ld hl,only_first_cold ; address of the call to this routine
 8068 1dcf 3600      	  ld (hl),0 ; nop
 8069 1dd1 23        	  inc hl
 8070 1dd2 3600      	  ld (hl),0 ; nop
 8071 1dd4 23        	  inc hl
 8072 1dd5 3600      	  ld (hl),0 ; nop
 8073               	  ;_z80_border_wait 3 ; XXX INFORMER
 8074 1dd7 C9        	  ret
 8075               	
 8076               	; ==============================================================
 8077               	; Data section
 8078               	
 8079               	  .data
 8080               	
 8081 1017 00        	  db 0 ; fake length byte, needed by the algorithm used in `cfa>nfa`
 8082               	
 8083               	data_start:
 8084               	
 8085               	; ==============================================================
 8086               	; Character set
 8087               	
 8088               	; XXX OLD
 8089               	
GAS LISTING solo_forth.z80s 			page 148


 8090               	.if latin1_charset_in_bank
 8091               	
 8092               	  .org names_bank_address+sys_screen_size-charset_size
 8093               	
 8094               	  incbin solo_forth.charset.bin
 8095               	
 8096               	.endif
 8097               	
 8098               	; ==============================================================
 8099               	; End
 8100               	
 8101               	.end
GAS LISTING solo_forth.z80s 			page 149


DEFINED SYMBOLS
                            *ABS*:00000000 fake
                            *ABS*:00000000 false
     solo_forth.z80s:417    .text:00000000 cold_entry
     solo_forth.z80s:6008   .text:000016a8 cold_start
     solo_forth.z80s:420    .text:00000003 warm_entry
     solo_forth.z80s:5955   .text:00001626 warm_start
     solo_forth.z80s:429    .text:00000006 latest_nfa_in_root_voc.init_value
                            .data:00000017 latest_nfa_in_root_voc
     solo_forth.z80s:432    .text:00000008 latest_nfa_in_forth_voc.init_value
     solo_forth.z80s:7955   .data:00001015 latest_nfa_in_forth_voc
     solo_forth.z80s:435    .text:0000000a latest_nfa_in_assembler_voc.init_value
                            .data:000000a3 latest_nfa_in_assembler_voc
     solo_forth.z80s:438    .text:0000000c voc_link.init_value
     solo_forth.z80s:1388   .text:0000065d assembler_vocabulary_link
     solo_forth.z80s:441    .text:0000000e user_variables_pointer
     solo_forth.z80s:526    .text:00000032 user_variables
     solo_forth.z80s:444    .text:00000010 return_stack_pointer
     solo_forth.z80s:624    .text:00000307 return_stack_bottom
     solo_forth.z80s:447    .text:00000012 default_color_attribute
     solo_forth.z80s:467    .text:00000014 default_user_variables_start
     solo_forth.z80s:469    .text:00000014 s0_init_value
     solo_forth.z80s:610    .text:00000214 data_stack_bottom
     solo_forth.z80s:471    .text:00000016 r0_init_value
     solo_forth.z80s:474    .text:0000001a width_init_value
     solo_forth.z80s:476    .text:0000001c warning_init_value
     solo_forth.z80s:479    .text:00000020 dp_init_value
     solo_forth.z80s:8024   .text:00001dac dictionary_pointer_after_cold
     solo_forth.z80s:489    .text:00000024 blk_init_value
     solo_forth.z80s:491    .text:00000026 in_init_value
     solo_forth.z80s:493    .text:00000028 out_init_value
     solo_forth.z80s:495    .text:0000002a scr_init_value
     solo_forth.z80s:502    .text:0000002c default_user_variables_end
     solo_forth.z80s:504    .text:0000002c ip_backup
     solo_forth.z80s:515    .text:0000002e names_pointer
     solo_forth.z80s:519    .text:00000030 names_pointer_init_value
     solo_forth.z80s:532    .text:00000032 s0_value
     solo_forth.z80s:534    .text:00000034 r0_value
     solo_forth.z80s:538    .text:00000038 width_value
     solo_forth.z80s:540    .text:0000003a warning_value
     solo_forth.z80s:544    .text:0000003e dp_value
     solo_forth.z80s:550    .text:00000042 blk_value
     solo_forth.z80s:552    .text:00000044 in_value
     solo_forth.z80s:554    .text:00000046 out_value
     solo_forth.z80s:556    .text:00000048 scr_value
     solo_forth.z80s:558    .text:0000004a number_tib_value
     solo_forth.z80s:560    .text:0000004c hld_value
     solo_forth.z80s:562    .text:0000004e current_value
     solo_forth.z80s:564    .text:00000050 state_value
     solo_forth.z80s:566    .text:00000052 base_value
     solo_forth.z80s:568    .text:00000054 dpl_value
     solo_forth.z80s:570    .text:00000056 fld_value
     solo_forth.z80s:572    .text:00000058 csp_value
     solo_forth.z80s:574    .text:0000005a r_hash_value
     solo_forth.z80s:577    .text:0000005c context_value
     solo_forth.z80s:1374   .text:00000655 forth_pfa
     solo_forth.z80s:1365   .text:0000064f root_pfa
GAS LISTING solo_forth.z80s 			page 150


     solo_forth.z80s:598    .text:00000072 csb
     solo_forth.z80s:599    .text:00000072 unused_csb
     solo_forth.z80s:601    .text:00000074 csb0
     solo_forth.z80s:615    .text:00000214 terminal_input_buffer
     solo_forth.z80s:635    .text:00000307 disk_buffer
                            *ABS*:00000000 _header
                            *ABS*:00000000 _code_header
                            *ABS*:00000000 _code_alias_header
                            *ABS*:00000000 _colon_header
                            *ABS*:00000000 _user_variable_header
                            *ABS*:00000000 _does_header
                            *ABS*:00000000 _constant_header
                            *ABS*:00000000 _variable_header
                            *ABS*:00000000 _two_variable_header
                            *ABS*:00000000 _string
                            *ABS*:00000000 _literal
                            *ABS*:00000000 _jp_next
                            *ABS*:00000000 _jump
                            *ABS*:00000000 _jump_nc
                            *ABS*:00000000 _jump_z
                            *ABS*:00000000 _bank
                            *ABS*:00000000 _names_bank
                            *ABS*:00000000 _default_bank
                            *ABS*:00000000 _question_error
                            *ABS*:00000000 _message
                            *ABS*:00000000 _z80_border
                            *ABS*:00000000 _z80_border_wait
                            *ABS*:00000000 _echo
     solo_forth.z80s:896    .text:0000050c compare_de_hl_unsigned
     solo_forth.z80s:910    .text:00000512 compare_de_hl_signed
     solo_forth.z80s:927    .text:0000051c move_block
     solo_forth.z80s:974    .text:00000528 move_block_downwards
     solo_forth.z80s:945    .text:00000522 move_block_upwards
     solo_forth.z80s:993    .text:00000534 a_multiplied_by_de_to_ahl
     solo_forth.z80s:996    .text:00000539 a_multiplied_by_de_to_ahl.1
     solo_forth.z80s:1002   .text:00000541 a_multiplied_by_de_to_ahl.2
     solo_forth.z80s:1011   .text:00000546 hl_multiplied_by_de_to_hlde_unsigned
     solo_forth.z80s:1034   .text:0000055d push_hlde
     solo_forth.z80s:1037   .text:0000055e push_hl
     solo_forth.z80s:1040   .text:0000055f next
     solo_forth.z80s:1053   .text:00000565 next2
     solo_forth.z80s:1064   .text:00000569 next2_end
     solo_forth.z80s:1077   .text:0000056a root_x_
                            .data:00000000 root_x_cfap
                            .data:00000002 root_x_lfa
                            .data:00000004 root_x_nfa
     solo_forth.z80s:7955   .data:00001017 _address_after_name
     solo_forth.z80s:1077   .text:0000056c root_x_pfa
     solo_forth.z80s:4806   .text:0000111b x_
     solo_forth.z80s:1092   .text:00000572 root_forth_
                            .data:00000009 root_forth_cfap
                            .data:0000000b root_forth_lfa
                            .data:0000000d root_forth_nfa
     solo_forth.z80s:3432   .text:00000c65 do_colon
     solo_forth.z80s:1092   .text:00000574 root_forth_pfa
     solo_forth.z80s:1374   .text:00000653 forth_
     solo_forth.z80s:2918   .text:00000ac0 semicolon_s_
GAS LISTING solo_forth.z80s 			page 151


     solo_forth.z80s:1098   .text:00000578 root_definitions_
                            .data:00000013 root_definitions_cfap
                            .data:00000015 root_definitions_lfa
                            .data:00000017 root_definitions_nfa
     solo_forth.z80s:1098   .text:0000057a root_definitions_pfa
     solo_forth.z80s:5834   .text:0000158a definitions_
     solo_forth.z80s:1112   .text:0000057e abase_
                            .data:00000023 abase_cfap
                            .data:00000025 abase_lfa
                            .data:00000027 abase_nfa
     solo_forth.z80s:5425   .text:0000141a do_create
     solo_forth.z80s:1112   .text:00000580 abase_pfa
     solo_forth.z80s:1126   .text:00000582 asm_
                            .data:0000002d asm_cfap
                            .data:0000002f asm_lfa
                            .data:00000031 asm_nfa
     solo_forth.z80s:1126   .text:00000584 asm_pfa
     solo_forth.z80s:3470   .text:00000c96 noop_
     solo_forth.z80s:3727   .text:00000d33 base_
     solo_forth.z80s:3348   .text:00000c1a fetch_
     solo_forth.z80s:3406   .text:00000c49 store_
     solo_forth.z80s:4451   .text:00000fb3 hex_
     solo_forth.z80s:1272   .text:000005fd also_
     solo_forth.z80s:1382   .text:00000659 assembler_
     solo_forth.z80s:1145   .text:00000596 end_asm_
                            .data:00000035 end_asm_cfap
                            .data:00000037 end_asm_lfa
                            .data:00000039 end_asm_nfa
     solo_forth.z80s:1145   .text:00000598 end_asm_pfa
     solo_forth.z80s:1322   .text:00000623 previous_
     solo_forth.z80s:1160   .text:000005a4 end_code_
                            .data:00000041 end_code_cfap
                            .data:00000043 end_code_lfa
                            .data:00000045 end_code_nfa
     solo_forth.z80s:1160   .text:000005a6 end_code_pfa
     solo_forth.z80s:4372   .text:00000f48 question_csp_
     solo_forth.z80s:4428   .text:00000fa0 smudge_
     solo_forth.z80s:1166   .text:000005ae next_
                            .data:0000004e next_cfap
                            .data:00000050 next_lfa
                            .data:00000052 next_nfa
     solo_forth.z80s:3485   .text:00000ca0 do_constant
     solo_forth.z80s:1166   .text:000005b0 next_pfa
     solo_forth.z80s:1179   .text:000005b2 pushhl_
                            .data:00000057 pushhl_cfap
                            .data:00000059 pushhl_lfa
                            .data:0000005b pushhl_nfa
     solo_forth.z80s:1179   .text:000005b4 pushhl_pfa
     solo_forth.z80s:1184   .text:000005b6 pushhlde_
                            .data:00000062 pushhlde_cfap
                            .data:00000064 pushhlde_lfa
                            .data:00000066 pushhlde_nfa
     solo_forth.z80s:1184   .text:000005b8 pushhlde_pfa
     solo_forth.z80s:1189   .text:000005ba fetchhl_
                            .data:0000006f fetchhl_cfap
                            .data:00000071 fetchhl_lfa
                            .data:00000073 fetchhl_nfa
GAS LISTING solo_forth.z80s 			page 152


     solo_forth.z80s:1189   .text:000005bc fetchhl_pfa
     solo_forth.z80s:3351   .text:00000c1d fetch.hl
     solo_forth.z80s:1194   .text:000005be next_comma_
                            .data:0000007b next_comma_cfap
                            .data:0000007d next_comma_lfa
                            .data:0000007f next_comma_nfa
     solo_forth.z80s:1194   .text:000005c0 next_comma_pfa
     solo_forth.z80s:1432   .text:0000068d lit_
     solo_forth.z80s:3900   .text:00000db2 comma_
     solo_forth.z80s:1209   .text:000005c8 pushhl_comma_
                            .data:00000085 pushhl_comma_cfap
                            .data:00000087 pushhl_comma_lfa
                            .data:00000089 pushhl_comma_nfa
     solo_forth.z80s:1209   .text:000005ca pushhl_comma_pfa
     solo_forth.z80s:1420   .text:00000683 c_lit_
     solo_forth.z80s:3918   .text:00000dc6 c_comma_
     solo_forth.z80s:1225   .text:000005d7 pushhlde_comma_
                            .data:00000091 pushhlde_comma_cfap
                            .data:00000093 pushhlde_comma_lfa
                            .data:00000095 pushhlde_comma_nfa
     solo_forth.z80s:1225   .text:000005d9 pushhlde_comma_pfa
     solo_forth.z80s:1241   .text:000005e6 fetchhl_comma_
                            .data:0000009f fetchhl_comma_cfap
                            .data:000000a1 fetchhl_comma_lfa
                            .data:000000a3 fetchhl_comma_nfa
     solo_forth.z80s:1241   .text:000005e8 fetchhl_comma_pfa
     solo_forth.z80s:1266   .text:000005f5 label_
                            .data:000000ac label_cfap
                            .data:000000ae label_lfa
                            .data:000000b0 label_nfa
     solo_forth.z80s:1266   .text:000005f7 label_pfa
     solo_forth.z80s:5421   .text:00001412 create_
                            .data:000000b6 also_cfap
                            .data:000000b8 also_lfa
                            .data:000000ba also_nfa
     solo_forth.z80s:1272   .text:000005ff also_pfa
     solo_forth.z80s:3712   .text:00000d2a context_
     solo_forth.z80s:3276   .text:00000be0 dup_
     solo_forth.z80s:3806   .text:00000d68 cell_plus_
     solo_forth.z80s:2547   .text:000009da cmove_up_
     solo_forth.z80s:1293   .text:0000060d minus_order_
                            .data:000000bf minus_order_cfap
                            .data:000000c1 minus_order_lfa
                            .data:000000c3 minus_order_nfa
     solo_forth.z80s:1293   .text:0000060f minus_order_pfa
     solo_forth.z80s:4885   .text:00001156 erase_
     solo_forth.z80s:1301   .text:00000619 only_
                            .data:000000ca only_cfap
                            .data:000000cc only_lfa
                            .data:000000ce only_nfa
     solo_forth.z80s:1301   .text:0000061b only_pfa
     solo_forth.z80s:1365   .text:0000064d root_
                            .data:000000d3 previous_cfap
                            .data:000000d5 previous_lfa
                            .data:000000d7 previous_nfa
     solo_forth.z80s:1322   .text:00000625 previous_pfa
     solo_forth.z80s:3269   .text:00000bd9 swap_
GAS LISTING solo_forth.z80s 			page 153


     solo_forth.z80s:2558   .text:000009e6 cmove_
     solo_forth.z80s:3176   .text:00000b81 plus_
     solo_forth.z80s:3306   .text:00000bfd off_
     solo_forth.z80s:1345   .text:0000063f seal_
                            .data:000000e0 seal_cfap
                            .data:000000e2 seal_lfa
                            .data:000000e4 seal_nfa
     solo_forth.z80s:1345   .text:00000641 seal_pfa
                            .data:000000e9 root_cfap
                            .data:000000eb root_lfa
                            .data:000000ed root_nfa
     solo_forth.z80s:5819   .text:00001581 do_vocabulary
     solo_forth.z80s:1369   .text:00000651 root_vocabulary_link
                            .data:000000f2 forth_cfap
                            .data:000000f4 forth_lfa
                            .data:000000f6 forth_nfa
     solo_forth.z80s:1378   .text:00000657 forth_vocabulary_link
                            .data:000000fc assembler_cfap
                            .data:000000fe assembler_lfa
                            .data:00000100 assembler_nfa
     solo_forth.z80s:1382   .text:0000065b assembler_pfa
     solo_forth.z80s:1392   .text:0000065f s_lit_
                            .data:0000010a s_lit_cfap
                            .data:0000010c s_lit_lfa
                            .data:0000010e s_lit_nfa
     solo_forth.z80s:1392   .text:00000661 s_lit_pfa
     solo_forth.z80s:3126   .text:00000b4f r_fetch_
     solo_forth.z80s:4535   .text:00001007 count_
     solo_forth.z80s:3788   .text:00000d57 one_plus_
     solo_forth.z80s:3045   .text:00000aff from_r_
     solo_forth.z80s:3027   .text:00000af0 to_r_
     solo_forth.z80s:1401   .text:00000671 paren_s_
                            .data:00000113 paren_s_cfap
                            .data:00000115 paren_s_lfa
                            .data:00000117 paren_s_nfa
     solo_forth.z80s:1401   .text:00000673 paren_s_pfa
     solo_forth.z80s:4947   .text:000011a7 parse_
     solo_forth.z80s:4342   .text:00000f1d comp_question_
     solo_forth.z80s:1699   .text:00000760 zero_branch_
     solo_forth.z80s:1415   .text:0000067f paren_s.interpreting
     solo_forth.z80s:5589   .text:000014b1 s_literal_
     solo_forth.z80s:1533   .text:000006ea save_string_
                            .data:0000011b c_lit_cfap
                            .data:0000011d c_lit_lfa
                            .data:0000011f c_lit_nfa
     solo_forth.z80s:1420   .text:00000685 c_lit_pfa
     solo_forth.z80s:1425   .text:00000687 push_a
     solo_forth.z80s:1427   .text:00000688 push_l
                            .data:00000124 lit_cfap
                            .data:00000126 lit_lfa
                            .data:00000128 lit_nfa
     solo_forth.z80s:1432   .text:0000068f lit_pfa
     solo_forth.z80s:1446   .text:00000698 bank_
                            .data:0000012c bank_cfap
                            .data:0000012e bank_lfa
                            .data:00000130 bank_nfa
     solo_forth.z80s:1446   .text:0000069a bank_pfa
GAS LISTING solo_forth.z80s 			page 154


     solo_forth.z80s:1464   .text:000006a0 bank.e
     solo_forth.z80s:1460   .text:000006a0 bank.default
     solo_forth.z80s:1462   .text:000006a0 bank.names
     solo_forth.z80s:1476   .text:000006ae unused_csb_
                            .data:00000135 unused_csb_cfap
                            .data:00000137 unused_csb_lfa
                            .data:00000139 unused_csb_nfa
     solo_forth.z80s:1476   .text:000006b0 unused_csb_pfa
     solo_forth.z80s:1488   .text:000006b6 csb0_
                            .data:00000144 csb0_cfap
                            .data:00000146 csb0_lfa
                            .data:00000148 csb0_nfa
     solo_forth.z80s:1488   .text:000006b8 csb0_pfa
     solo_forth.z80s:1499   .text:000006ba question_csb_
                            .data:0000014d question_csb_cfap
                            .data:0000014f question_csb_lfa
                            .data:00000151 question_csb_nfa
     solo_forth.z80s:1499   .text:000006bc question_csb_pfa
     solo_forth.z80s:3989   .text:00000e17 greater_than_
     solo_forth.z80s:1515   .text:000006d4 question_csb_.enough
     solo_forth.z80s:3210   .text:00000b9b negate_
     solo_forth.z80s:3292   .text:00000bf0 plus_store_
     solo_forth.z80s:1520   .text:000006de allocate_string_
                            .data:00000156 allocate_string_cfap
                            .data:00000158 allocate_string_lfa
                            .data:0000015a allocate_string_nfa
     solo_forth.z80s:1520   .text:000006e0 allocate_string_pfa
                            .data:0000016a save_string_cfap
                            .data:0000016c save_string_lfa
                            .data:0000016e save_string_nfa
     solo_forth.z80s:1533   .text:000006ec save_string_pfa
     solo_forth.z80s:3283   .text:00000be7 two_dup_
     solo_forth.z80s:3093   .text:00000b28 two_to_r_
     solo_forth.z80s:2569   .text:000009f2 move_
     solo_forth.z80s:3108   .text:00000b37 two_from_r_
     solo_forth.z80s:1547   .text:000006fc save_counted_string_
                            .data:0000017a save_counted_string_cfap
                            .data:0000017c save_counted_string_lfa
                            .data:0000017e save_counted_string_nfa
     solo_forth.z80s:1547   .text:000006fe save_counted_string_pfa
     solo_forth.z80s:5205   .text:000012d9 dollar_store_
     solo_forth.z80s:1562   .text:0000070e empty_csb_
                            .data:00000192 empty_csb_cfap
                            .data:00000194 empty_csb_lfa
                            .data:00000196 empty_csb_nfa
     solo_forth.z80s:1562   .text:00000710 empty_csb_pfa
     solo_forth.z80s:1576   .text:0000071c execute_
                            .data:000001a0 execute_cfap
                            .data:000001a2 execute_lfa
                            .data:000001a4 execute_nfa
     solo_forth.z80s:1576   .text:0000071e execute_pfa
     solo_forth.z80s:1588   .text:00000722 perform_
                            .data:000001ac perform_cfap
                            .data:000001ae perform_lfa
                            .data:000001b0 perform_nfa
     solo_forth.z80s:1588   .text:00000724 perform_pfa
     solo_forth.z80s:1609   .text:0000072f forward_mark_
GAS LISTING solo_forth.z80s 			page 155


                            .data:000001b8 forward_mark_cfap
                            .data:000001ba forward_mark_lfa
                            .data:000001bc forward_mark_nfa
     solo_forth.z80s:1609   .text:00000731 forward_mark_pfa
     solo_forth.z80s:4348   .text:00000f25 question_comp_
     solo_forth.z80s:3878   .text:00000d90 here_
     solo_forth.z80s:3549   .text:00000cc5 zero_
     solo_forth.z80s:1628   .text:0000073b forward_resolve_
                            .data:000001c2 forward_resolve_cfap
                            .data:000001c4 forward_resolve_lfa
                            .data:000001c6 forward_resolve_nfa
     solo_forth.z80s:1628   .text:0000073d forward_resolve_pfa
     solo_forth.z80s:1644   .text:00000747 backward_mark_
                            .data:000001cf backward_mark_cfap
                            .data:000001d1 backward_mark_lfa
                            .data:000001d3 backward_mark_nfa
     solo_forth.z80s:1644   .text:00000749 backward_mark_pfa
     solo_forth.z80s:1661   .text:0000074f backward_resolve_
                            .data:000001d9 backward_resolve_cfap
                            .data:000001db backward_resolve_lfa
                            .data:000001dd backward_resolve_nfa
     solo_forth.z80s:1661   .text:00000751 backward_resolve_pfa
     solo_forth.z80s:1679   .text:00000757 branch_
                            .data:000001e6 branch_cfap
                            .data:000001e8 branch_lfa
                            .data:000001ea branch_nfa
     solo_forth.z80s:1679   .text:00000759 branch_pfa
                            .data:000001f1 zero_branch_cfap
                            .data:000001f3 zero_branch_lfa
                            .data:000001f5 zero_branch_nfa
     solo_forth.z80s:1699   .text:00000762 zero_branch_pfa
     solo_forth.z80s:1720   .text:0000076c question_branch_
                            .data:000001fd question_branch_cfap
                            .data:000001ff question_branch_lfa
                            .data:00000201 question_branch_nfa
     solo_forth.z80s:1720   .text:0000076e question_branch_pfa
     solo_forth.z80s:1747   .text:00000778 paren_loop_
                            .data:00000209 paren_loop_cfap
                            .data:0000020b paren_loop_lfa
                            .data:0000020d paren_loop_nfa
     solo_forth.z80s:1747   .text:0000077a paren_loop_pfa
     solo_forth.z80s:1760   .text:0000077d paren_loop.step_in_de
     solo_forth.z80s:1784   .text:00000797 paren_loop.negative_step
     solo_forth.z80s:1792   .text:0000079c paren_loop.end
     solo_forth.z80s:1803   .text:000007a7 paren_plus_loop_
                            .data:00000214 paren_plus_loop_cfap
                            .data:00000216 paren_plus_loop_lfa
                            .data:00000218 paren_plus_loop_nfa
     solo_forth.z80s:1803   .text:000007a9 paren_plus_loop_pfa
     solo_forth.z80s:1830   .text:000007ad paren_do_
                            .data:00000220 paren_do_cfap
                            .data:00000222 paren_do_lfa
                            .data:00000224 paren_do_nfa
     solo_forth.z80s:1830   .text:000007af paren_do_pfa
     solo_forth.z80s:1866   .text:000007c3 paren_do83_
                            .data:00000229 paren_do83_cfap
                            .data:0000022b paren_do83_lfa
GAS LISTING solo_forth.z80s 			page 156


                            .data:0000022d paren_do83_nfa
     solo_forth.z80s:1866   .text:000007c5 paren_do83_pfa
     solo_forth.z80s:1870   .text:000007c7 paren_do83.de_hl
     solo_forth.z80s:1900   .text:000007e8 paren_question_do83_
                            .data:00000234 paren_question_do83_cfap
                            .data:00000236 paren_question_do83_lfa
                            .data:00000238 paren_question_do83_nfa
     solo_forth.z80s:1900   .text:000007ea paren_question_do83_pfa
     solo_forth.z80s:1911   .text:000007f5 question_do.equals
     solo_forth.z80s:1914   .text:000007f8 question_do83_
                            .data:00000240 question_do83_cfap
                            .data:00000242 question_do83_lfa
                            .data:00000244 question_do83_nfa
     solo_forth.z80s:1914   .text:000007fa question_do83_pfa
     solo_forth.z80s:4386   .text:00000f68 compile_
     solo_forth.z80s:1923   .text:00000805 do83_
                            .data:0000024a do83_cfap
                            .data:0000024c do83_lfa
                            .data:0000024e do83_nfa
     solo_forth.z80s:1923   .text:00000807 do83_pfa
     solo_forth.z80s:1932   .text:00000812 loop83_
                            .data:00000253 loop83_cfap
                            .data:00000255 loop83_lfa
                            .data:00000257 loop83_nfa
     solo_forth.z80s:1932   .text:00000814 loop83_pfa
     solo_forth.z80s:4364   .text:00000f3d question_pairs_
     solo_forth.z80s:1951   .text:00000821 paren_loop83_
                            .data:0000025e paren_loop83_cfap
                            .data:00000260 paren_loop83_lfa
                            .data:00000262 paren_loop83_nfa
     solo_forth.z80s:1951   .text:00000823 paren_loop83_pfa
     solo_forth.z80s:1970   .text:0000083a paren_loop83.loop
     solo_forth.z80s:2071   .text:00000844 i_
                            .data:0000026b i_cfap
                            .data:0000026d i_lfa
                            .data:0000026f i_nfa
     solo_forth.z80s:3126   .text:00000b51 r_fetch_pfa
     solo_forth.z80s:2082   .text:00000846 digit_
                            .data:00000271 digit_cfap
                            .data:00000273 digit_lfa
                            .data:00000275 digit_nfa
     solo_forth.z80s:2082   .text:00000848 digit_pfa
     solo_forth.z80s:3564   .text:00000cd3 false_pfa
     solo_forth.z80s:2104   .text:0000085c digit.test_value
     solo_forth.z80s:3576   .text:00000cdb true_pfa
     solo_forth.z80s:2112   .text:00000865 paren_find_
                            .data:0000027b paren_find_cfap
                            .data:0000027d paren_find_lfa
                            .data:0000027f paren_find_nfa
     solo_forth.z80s:2112   .text:00000867 paren_find_pfa
     solo_forth.z80s:2144   .text:00000877 paren_find.string_address
     solo_forth.z80s:2138   .text:00000872 paren_find.begin
     solo_forth.z80s:2200   .text:000008a9 paren_find.nfa_backup
     solo_forth.z80s:2198   .text:000008a8 paren_find.not_a_match
     solo_forth.z80s:2154   .text:00000881 paren_find.compare_next_char
     solo_forth.z80s:2183   .text:0000089d paren_find.end
     solo_forth.z80s:2215   .text:000008be scan_
GAS LISTING solo_forth.z80s 			page 157


                            .data:00000286 scan_cfap
                            .data:00000288 scan_lfa
                            .data:0000028a scan_nfa
     solo_forth.z80s:2215   .text:000008c0 scan_pfa
     solo_forth.z80s:2235   .text:000008ca scan.begin
     solo_forth.z80s:2246   .text:000008d4 skip_
                            .data:0000028f skip_cfap
                            .data:00000291 skip_lfa
                            .data:00000293 skip_nfa
     solo_forth.z80s:2246   .text:000008d6 skip_pfa
     solo_forth.z80s:2256   .text:000008d8 skip.begin
     solo_forth.z80s:2264   .text:000008e1 chan_
                            .data:00000298 chan_cfap
                            .data:0000029a chan_lfa
                            .data:0000029c chan_nfa
     solo_forth.z80s:2264   .text:000008e3 chan_pfa
     solo_forth.z80s:2282   .text:000008ec emit_
                            .data:000002a1 emit_cfap
                            .data:000002a3 emit_lfa
                            .data:000002a5 emit_nfa
     solo_forth.z80s:2282   .text:000008ee emit_pfa
     solo_forth.z80s:2292   .text:000008f8 paren_emit_
     solo_forth.z80s:3554   .text:00000cc9 one_
     solo_forth.z80s:3700   .text:00000d24 out_
                            .data:000002aa paren_emit_cfap
                            .data:000002ac paren_emit_lfa
                            .data:000002ae paren_emit_nfa
     solo_forth.z80s:2292   .text:000008fa paren_emit_pfa
     solo_forth.z80s:2319   .text:00000903 printer_
                            .data:000002b5 printer_cfap
                            .data:000002b7 printer_lfa
                            .data:000002b9 printer_nfa
     solo_forth.z80s:2319   .text:00000905 printer_pfa
     solo_forth.z80s:2326   .text:0000090c display_
                            .data:000002c1 display_cfap
                            .data:000002c3 display_lfa
                            .data:000002c5 display_nfa
     solo_forth.z80s:2326   .text:0000090e display_pfa
     solo_forth.z80s:3559   .text:00000ccd two_
     solo_forth.z80s:2333   .text:00000914 key_question_
                            .data:000002cd key_question_cfap
                            .data:000002cf key_question_lfa
                            .data:000002d1 key_question_nfa
     solo_forth.z80s:2333   .text:00000916 key_question_pfa
     solo_forth.z80s:2347   .text:00000920 decode_table_
                            .data:000002d6 decode_table_cfap
                            .data:000002d8 decode_table_lfa
                            .data:000002da decode_table_nfa
     solo_forth.z80s:2347   .text:00000922 decode_table_pfa
     solo_forth.z80s:2363   .text:00000933 decode_char_
                            .data:000002e7 decode_char_cfap
                            .data:000002e9 decode_char_lfa
                            .data:000002eb decode_char_nfa
     solo_forth.z80s:2363   .text:00000935 decode_char_pfa
     solo_forth.z80s:2375   .text:00000939 decode_char.begin
     solo_forth.z80s:2381   .text:0000093c paren_key_
                            .data:000002f7 paren_key_cfap
GAS LISTING solo_forth.z80s 			page 158


                            .data:000002f9 paren_key_lfa
                            .data:000002fb paren_key_nfa
     solo_forth.z80s:2381   .text:0000093e paren_key_pfa
     solo_forth.z80s:2389   .text:00000948 previous_key
     solo_forth.z80s:2385   .text:00000944 paren_key_.begin
     solo_forth.z80s:2400   .text:00000957 key_
                            .data:00000301 key_cfap
                            .data:00000303 key_lfa
                            .data:00000305 key_nfa
     solo_forth.z80s:2400   .text:00000959 key_pfa
     solo_forth.z80s:2413   .text:0000095c key.begin
     solo_forth.z80s:2421   .text:0000096b key.end
     solo_forth.z80s:2429   .text:00000976 xkey_
                            .data:00000309 xkey_cfap
                            .data:0000030b xkey_lfa
                            .data:0000030d xkey_nfa
     solo_forth.z80s:2429   .text:00000978 xkey_pfa
     solo_forth.z80s:2453   .text:00000979 xkey.new_key
     solo_forth.z80s:2463   .text:00000983 xkey.wait_for_key
     solo_forth.z80s:2481   .text:00000996 xkey.translate
     solo_forth.z80s:2482   .text:00000996 xkey.left_bracket
     solo_forth.z80s:2486   .text:0000099c xkey.right_bracket
     solo_forth.z80s:2490   .text:000009a2 xkey.tilde
     solo_forth.z80s:2494   .text:000009a8 xkey.vertical_bar
     solo_forth.z80s:2498   .text:000009ae xkey.backslash
     solo_forth.z80s:2502   .text:000009b4 xkey.left_curly_bracket
     solo_forth.z80s:2506   .text:000009ba xkey.right_curly_bracket
     solo_forth.z80s:2511   .text:000009c0 xkey.end
     solo_forth.z80s:2532   .text:000009cd cr_
                            .data:00000312 cr_cfap
                            .data:00000314 cr_lfa
                            .data:00000316 cr_nfa
     solo_forth.z80s:2532   .text:000009cf cr_pfa
                            .data:00000319 cmove_up_cfap
                            .data:0000031b cmove_up_lfa
                            .data:0000031d cmove_up_nfa
     solo_forth.z80s:2547   .text:000009dc cmove_up_pfa
                            .data:00000324 cmove_cfap
                            .data:00000326 cmove_lfa
                            .data:00000328 cmove_nfa
     solo_forth.z80s:2558   .text:000009e8 cmove_pfa
                            .data:0000032e move_cfap
                            .data:00000330 move_lfa
                            .data:00000332 move_nfa
     solo_forth.z80s:2569   .text:000009f4 move_pfa
     solo_forth.z80s:2580   .text:000009f7 move.do
     solo_forth.z80s:2587   .text:000009fe smove_
                            .data:00000337 smove_cfap
                            .data:00000339 smove_lfa
                            .data:0000033b smove_nfa
     solo_forth.z80s:2587   .text:00000a00 smove_pfa
     solo_forth.z80s:2606   .text:00000a06 u_m_star_
                            .data:00000341 u_m_star_cfap
                            .data:00000343 u_m_star_lfa
                            .data:00000345 u_m_star_nfa
     solo_forth.z80s:2606   .text:00000a08 u_m_star_pfa
     solo_forth.z80s:2625   .text:00000a10 u_slash_mod_
GAS LISTING solo_forth.z80s 			page 159


                            .data:00000349 u_slash_mod_cfap
                            .data:0000034b u_slash_mod_lfa
                            .data:0000034d u_slash_mod_nfa
     solo_forth.z80s:2625   .text:00000a12 u_slash_mod_pfa
     solo_forth.z80s:2662   .text:00000a2b l60a0h
     solo_forth.z80s:2691   .text:00000a4b l60c0h
     solo_forth.z80s:2664   .text:00000a2d l60a2h
     solo_forth.z80s:2672   .text:00000a35 l60aah
     solo_forth.z80s:2680   .text:00000a3f l60b4h
     solo_forth.z80s:2686   .text:00000a46 l60bbh
     solo_forth.z80s:2777   .text:00000a50 and_
                            .data:00000355 and_cfap
                            .data:00000357 and_lfa
                            .data:00000359 and_nfa
     solo_forth.z80s:2777   .text:00000a52 and_pfa
     solo_forth.z80s:2790   .text:00000a5d or_
                            .data:0000035d or_cfap
                            .data:0000035f or_lfa
                            .data:00000361 or_nfa
     solo_forth.z80s:2790   .text:00000a5f or_pfa
     solo_forth.z80s:2803   .text:00000a6a xor_
                            .data:00000364 xor_cfap
                            .data:00000366 xor_lfa
                            .data:00000368 xor_nfa
     solo_forth.z80s:2803   .text:00000a6c xor_pfa
     solo_forth.z80s:2816   .text:00000a77 np_
                            .data:0000036c np_cfap
                            .data:0000036e np_lfa
                            .data:00000370 np_nfa
     solo_forth.z80s:2816   .text:00000a79 np_pfa
     solo_forth.z80s:2821   .text:00000a7b np0_
                            .data:00000373 np0_cfap
                            .data:00000375 np0_lfa
                            .data:00000377 np0_nfa
     solo_forth.z80s:2821   .text:00000a7d np0_pfa
     solo_forth.z80s:2828   .text:00000a7f np_fetch_
                            .data:0000037b np_fetch_cfap
                            .data:0000037d np_fetch_lfa
                            .data:0000037f np_fetch_nfa
     solo_forth.z80s:2828   .text:00000a81 np_fetch_pfa
     solo_forth.z80s:2834   .text:00000a87 np_store_
                            .data:00000383 np_store_cfap
                            .data:00000385 np_store_lfa
                            .data:00000387 np_store_nfa
     solo_forth.z80s:2834   .text:00000a89 np_store_pfa
     solo_forth.z80s:2842   .text:00000a8f comma_np_
                            .data:0000038b comma_np_cfap
                            .data:0000038d comma_np_lfa
                            .data:0000038f comma_np_nfa
     solo_forth.z80s:2842   .text:00000a91 comma_np_pfa
     solo_forth.z80s:2859   .text:00000a9d sp_fetch_
                            .data:00000393 sp_fetch_cfap
                            .data:00000395 sp_fetch_lfa
                            .data:00000397 sp_fetch_nfa
     solo_forth.z80s:2859   .text:00000a9f sp_fetch_pfa
     solo_forth.z80s:2866   .text:00000aa6 sp_store_
                            .data:0000039b sp_store_cfap
GAS LISTING solo_forth.z80s 			page 160


                            .data:0000039d sp_store_lfa
                            .data:0000039f sp_store_nfa
     solo_forth.z80s:2866   .text:00000aa8 sp_store_pfa
     solo_forth.z80s:2881   .text:00000aac rp_
                            .data:000003a3 rp_cfap
                            .data:000003a5 rp_lfa
                            .data:000003a7 rp_nfa
     solo_forth.z80s:2881   .text:00000aae rp_pfa
     solo_forth.z80s:2886   .text:00000ab0 rp_fetch_
                            .data:000003aa rp_fetch_cfap
                            .data:000003ac rp_fetch_lfa
                            .data:000003ae rp_fetch_nfa
     solo_forth.z80s:2886   .text:00000ab2 rp_fetch_pfa
     solo_forth.z80s:2892   .text:00000ab8 rp_store_
                            .data:000003b2 rp_store_cfap
                            .data:000003b4 rp_store_lfa
                            .data:000003b6 rp_store_nfa
     solo_forth.z80s:2892   .text:00000aba rp_store_pfa
                            .data:000003ba semicolon_s_cfap
                            .data:000003bc semicolon_s_lfa
                            .data:000003be semicolon_s_nfa
     solo_forth.z80s:2918   .text:00000ac2 semicolon_s_pfa
     solo_forth.z80s:2948   .text:00000ace pick_
                            .data:000003c1 pick_cfap
                            .data:000003c3 pick_lfa
                            .data:000003c5 pick_nfa
     solo_forth.z80s:2948   .text:00000ad0 pick_pfa
     solo_forth.z80s:2956   .text:00000ad6 unloop_
                            .data:000003ca unloop_cfap
                            .data:000003cc unloop_lfa
                            .data:000003ce unloop_nfa
     solo_forth.z80s:3063   .text:00000b10 two_r_drop_pfa
     solo_forth.z80s:2974   .text:00000ad8 exhaust_
                            .data:000003d5 exhaust_cfap
                            .data:000003d7 exhaust_lfa
                            .data:000003d9 exhaust_nfa
     solo_forth.z80s:2974   .text:00000ada exhaust_pfa
     solo_forth.z80s:3003   .text:00000ae6 question_exhaust_
                            .data:000003e1 question_exhaust_cfap
                            .data:000003e3 question_exhaust_lfa
                            .data:000003e5 question_exhaust_nfa
     solo_forth.z80s:3003   .text:00000ae8 question_exhaust_pfa
                            .data:000003ee to_r_cfap
                            .data:000003f0 to_r_lfa
                            .data:000003f2 to_r_nfa
     solo_forth.z80s:3027   .text:00000af2 to_r_pfa
                            .data:000003f5 from_r_cfap
                            .data:000003f7 from_r_lfa
                            .data:000003f9 from_r_nfa
     solo_forth.z80s:3045   .text:00000b01 from_r_pfa
     solo_forth.z80s:3063   .text:00000b0e two_r_drop_
                            .data:000003fc two_r_drop_cfap
                            .data:000003fe two_r_drop_lfa
                            .data:00000400 two_r_drop_nfa
     solo_forth.z80s:3078   .text:00000b1c r_drop_
                            .data:00000407 r_drop_cfap
                            .data:00000409 r_drop_lfa
GAS LISTING solo_forth.z80s 			page 161


                            .data:0000040b r_drop_nfa
     solo_forth.z80s:3078   .text:00000b1e r_drop_pfa
                            .data:00000411 two_to_r_cfap
                            .data:00000413 two_to_r_lfa
                            .data:00000415 two_to_r_nfa
     solo_forth.z80s:3093   .text:00000b2a two_to_r_pfa
     solo_forth.z80s:3389   .text:00000c3e two_store.into_hl_pointer
                            .data:00000419 two_from_r_cfap
                            .data:0000041b two_from_r_lfa
                            .data:0000041d two_from_r_nfa
     solo_forth.z80s:3108   .text:00000b39 two_from_r_pfa
     solo_forth.z80s:3367   .text:00000c2e two_fetch_pfa
     solo_forth.z80s:3120   .text:00000b47 two_r_fetch_
                            .data:00000421 two_r_fetch_cfap
                            .data:00000423 two_r_fetch_lfa
                            .data:00000425 two_r_fetch_nfa
     solo_forth.z80s:3120   .text:00000b49 two_r_fetch_pfa
     solo_forth.z80s:3370   .text:00000c2f two_fetch.hl
                            .data:00000429 r_fetch_cfap
                            .data:0000042b r_fetch_lfa
                            .data:0000042d r_fetch_nfa
     solo_forth.z80s:3134   .text:00000b57 zero_equals_
                            .data:00000430 zero_equals_cfap
                            .data:00000432 zero_equals_lfa
                            .data:00000434 zero_equals_nfa
     solo_forth.z80s:3134   .text:00000b59 zero_equals_pfa
     solo_forth.z80s:3143   .text:00000b62 zero_not_equals_
                            .data:00000437 zero_not_equals_cfap
                            .data:00000439 zero_not_equals_lfa
                            .data:0000043b zero_not_equals_nfa
     solo_forth.z80s:3143   .text:00000b64 zero_not_equals_pfa
     solo_forth.z80s:3152   .text:00000b6d zero_less_than_
                            .data:0000043f zero_less_than_cfap
                            .data:00000441 zero_less_than_lfa
                            .data:00000443 zero_less_than_nfa
     solo_forth.z80s:3152   .text:00000b6f zero_less_than_pfa
     solo_forth.z80s:3155   .text:00000b70 zero_less_.hl
     solo_forth.z80s:3162   .text:00000b72 true_if_cy
     solo_forth.z80s:3167   .text:00000b78 zero_greater_than_
                            .data:00000446 zero_greater_than_cfap
                            .data:00000448 zero_greater_than_lfa
                            .data:0000044a zero_greater_than_nfa
     solo_forth.z80s:3167   .text:00000b7a zero_greater_than_pfa
     solo_forth.z80s:3957   .text:00000dfa is_de_less_than_hl
                            .data:0000044d plus_cfap
                            .data:0000044f plus_lfa
                            .data:00000451 plus_nfa
     solo_forth.z80s:3176   .text:00000b83 plus_pfa
     solo_forth.z80s:3184   .text:00000b89 d_plus_
                            .data:00000453 d_plus_cfap
                            .data:00000455 d_plus_lfa
                            .data:00000457 d_plus_nfa
     solo_forth.z80s:3184   .text:00000b8b d_plus_pfa
                            .data:0000045a negate_cfap
                            .data:0000045c negate_lfa
                            .data:0000045e negate_nfa
     solo_forth.z80s:3210   .text:00000b9d negate_pfa
GAS LISTING solo_forth.z80s 			page 162


     solo_forth.z80s:3219   .text:00000ba7 dnegate_
                            .data:00000465 dnegate_cfap
                            .data:00000467 dnegate_lfa
                            .data:00000469 dnegate_nfa
     solo_forth.z80s:3219   .text:00000ba9 dnegate_pfa
     solo_forth.z80s:3240   .text:00000bbd nip_
                            .data:00000471 nip_cfap
                            .data:00000473 nip_lfa
                            .data:00000475 nip_nfa
     solo_forth.z80s:3240   .text:00000bbf nip_pfa
     solo_forth.z80s:3247   .text:00000bc4 tuck_
                            .data:00000479 tuck_cfap
                            .data:0000047b tuck_lfa
                            .data:0000047d tuck_nfa
     solo_forth.z80s:3247   .text:00000bc6 tuck_pfa
     solo_forth.z80s:3255   .text:00000bcc over_
                            .data:00000482 over_cfap
                            .data:00000484 over_lfa
                            .data:00000486 over_nfa
     solo_forth.z80s:3255   .text:00000bce over_pfa
     solo_forth.z80s:3263   .text:00000bd4 drop_
                            .data:0000048b drop_cfap
                            .data:0000048d drop_lfa
                            .data:0000048f drop_nfa
     solo_forth.z80s:3263   .text:00000bd6 drop_pfa
                            .data:00000494 swap_cfap
                            .data:00000496 swap_lfa
                            .data:00000498 swap_nfa
     solo_forth.z80s:3269   .text:00000bdb swap_pfa
                            .data:0000049d dup_cfap
                            .data:0000049f dup_lfa
                            .data:000004a1 dup_nfa
     solo_forth.z80s:3276   .text:00000be2 dup_pfa
                            .data:000004a5 two_dup_cfap
                            .data:000004a7 two_dup_lfa
                            .data:000004a9 two_dup_nfa
     solo_forth.z80s:3283   .text:00000be9 two_dup_pfa
                            .data:000004ae plus_store_cfap
                            .data:000004b0 plus_store_lfa
                            .data:000004b2 plus_store_nfa
     solo_forth.z80s:3292   .text:00000bf2 plus_store_pfa
                            .data:000004b5 off_cfap
                            .data:000004b7 off_lfa
                            .data:000004b9 off_nfa
     solo_forth.z80s:3306   .text:00000bff off_pfa
     solo_forth.z80s:3315   .text:00000c07 on_
                            .data:000004bd on_cfap
                            .data:000004bf on_lfa
                            .data:000004c1 on_nfa
     solo_forth.z80s:3315   .text:00000c09 on_pfa
     solo_forth.z80s:3330   .text:00000c11 toggle_
                            .data:000004c4 toggle_cfap
                            .data:000004c6 toggle_lfa
                            .data:000004c8 toggle_nfa
     solo_forth.z80s:3330   .text:00000c13 toggle_pfa
                            .data:000004cf fetch_cfap
                            .data:000004d1 fetch_lfa
GAS LISTING solo_forth.z80s 			page 163


                            .data:000004d3 fetch_nfa
     solo_forth.z80s:3348   .text:00000c1c fetch_pfa
     solo_forth.z80s:3359   .text:00000c23 c_fetch_
                            .data:000004d5 c_fetch_cfap
                            .data:000004d7 c_fetch_lfa
                            .data:000004d9 c_fetch_nfa
     solo_forth.z80s:3359   .text:00000c25 c_fetch_pfa
     solo_forth.z80s:3367   .text:00000c2c two_fetch_
                            .data:000004dc two_fetch_cfap
                            .data:000004de two_fetch_lfa
                            .data:000004e0 two_fetch_nfa
     solo_forth.z80s:3386   .text:00000c3b two_store_
                            .data:000004e3 two_store_cfap
                            .data:000004e5 two_store_lfa
                            .data:000004e7 two_store_nfa
     solo_forth.z80s:3386   .text:00000c3d two_store_pfa
                            .data:000004ea store_cfap
                            .data:000004ec store_lfa
                            .data:000004ee store_nfa
     solo_forth.z80s:3406   .text:00000c4b store_pfa
     solo_forth.z80s:3409   .text:00000c4c store.into_hl_pointer
     solo_forth.z80s:3411   .text:00000c4d store.de_into_hl_pointer
     solo_forth.z80s:3418   .text:00000c52 c_store_
                            .data:000004f0 c_store_cfap
                            .data:000004f2 c_store_lfa
                            .data:000004f4 c_store_nfa
     solo_forth.z80s:3418   .text:00000c54 c_store_pfa
     solo_forth.z80s:3426   .text:00000c59 colon_
                            .data:000004f7 colon_cfap
                            .data:000004f9 colon_lfa
                            .data:000004fb colon_nfa
     solo_forth.z80s:3426   .text:00000c5b colon_pfa
     solo_forth.z80s:4355   .text:00000f32 question_exec_
     solo_forth.z80s:4324   .text:00000f03 store_csp_
     solo_forth.z80s:5377   .text:000013c5 header_
     solo_forth.z80s:4422   .text:00000f98 right_bracket_
     solo_forth.z80s:4465   .text:00000fc9 paren_semicolon_code_
     solo_forth.z80s:3442   .text:00000c72 do_colon.end
     solo_forth.z80s:3446   .text:00000c74 noname_
                            .data:000004fd noname_cfap
                            .data:000004ff noname_lfa
                            .data:00000501 noname_nfa
     solo_forth.z80s:3446   .text:00000c76 noname_pfa
     solo_forth.z80s:3461   .text:00000c88 semicolon_
                            .data:00000509 semicolon_cfap
                            .data:0000050b semicolon_lfa
                            .data:0000050d semicolon_nfa
     solo_forth.z80s:3461   .text:00000c8a semicolon_pfa
     solo_forth.z80s:4416   .text:00000f90 left_bracket_
                            .data:0000050f noop_cfap
                            .data:00000511 noop_lfa
                            .data:00000513 noop_nfa
     solo_forth.z80s:3481   .text:00000c98 constant_
                            .data:00000518 constant_cfap
                            .data:0000051a constant_lfa
                            .data:0000051c constant_nfa
     solo_forth.z80s:3481   .text:00000c9a constant_pfa
GAS LISTING solo_forth.z80s 			page 164


     solo_forth.z80s:3491   .text:00000ca5 variable_
                            .data:00000525 variable_cfap
                            .data:00000527 variable_lfa
                            .data:00000529 variable_nfa
     solo_forth.z80s:3491   .text:00000ca7 variable_pfa
     solo_forth.z80s:3849   .text:00000d82 cell_
     solo_forth.z80s:3884   .text:00000d98 allot_
     solo_forth.z80s:3515   .text:00000caf user_
                            .data:00000532 user_cfap
                            .data:00000534 user_lfa
                            .data:00000536 user_nfa
     solo_forth.z80s:3515   .text:00000cb1 user_pfa
     solo_forth.z80s:3522   .text:00000cb5 do_user
     solo_forth.z80s:3534   .text:00000cc1 msg_scr_
                            .data:0000053b msg_scr_cfap
                            .data:0000053d msg_scr_lfa
                            .data:0000053f msg_scr_nfa
     solo_forth.z80s:3534   .text:00000cc3 msg_scr_pfa
                            .data:00000547 zero_cfap
                            .data:00000549 zero_lfa
                            .data:0000054b zero_nfa
     solo_forth.z80s:3549   .text:00000cc7 zero_pfa
                            .data:0000054d one_cfap
                            .data:0000054f one_lfa
                            .data:00000551 one_nfa
     solo_forth.z80s:3554   .text:00000ccb one_pfa
                            .data:00000553 two_cfap
                            .data:00000555 two_lfa
                            .data:00000557 two_nfa
     solo_forth.z80s:3559   .text:00000ccf two_pfa
     solo_forth.z80s:3564   .text:00000cd1 false_
                            .data:00000559 false_cfap
                            .data:0000055b false_lfa
                            .data:0000055d false_nfa
     solo_forth.z80s:3576   .text:00000cd9 true_
                            .data:00000563 true_cfap
                            .data:00000565 true_lfa
                            .data:00000567 true_nfa
     solo_forth.z80s:3588   .text:00000ce1 b_l_
                            .data:0000056c b_l_cfap
                            .data:0000056e b_l_lfa
                            .data:00000570 b_l_nfa
     solo_forth.z80s:3588   .text:00000ce3 b_l_pfa
     solo_forth.z80s:3599   .text:00000ce5 c_slash_l_
                            .data:00000573 c_slash_l_cfap
                            .data:00000575 c_slash_l_lfa
                            .data:00000577 c_slash_l_nfa
     solo_forth.z80s:3599   .text:00000ce7 c_slash_l_pfa
     solo_forth.z80s:3604   .text:00000ce9 l_slash_scr_
                            .data:0000057b l_slash_scr_cfap
                            .data:0000057d l_slash_scr_lfa
                            .data:0000057f l_slash_scr_nfa
     solo_forth.z80s:3604   .text:00000ceb l_slash_scr_pfa
     solo_forth.z80s:3609   .text:00000ced disk_buffer_
                            .data:00000585 disk_buffer_cfap
                            .data:00000587 disk_buffer_lfa
                            .data:00000589 disk_buffer_nfa
GAS LISTING solo_forth.z80s 			page 165


     solo_forth.z80s:3609   .text:00000cef disk_buffer_pfa
     solo_forth.z80s:3614   .text:00000cf1 b_slash_buf_
                            .data:00000595 b_slash_buf_cfap
                            .data:00000597 b_slash_buf_lfa
                            .data:00000599 b_slash_buf_nfa
     solo_forth.z80s:3614   .text:00000cf3 b_slash_buf_pfa
     solo_forth.z80s:3619   .text:00000cf5 b_slash_scr_
                            .data:0000059f b_slash_scr_cfap
                            .data:000005a1 b_slash_scr_lfa
                            .data:000005a3 b_slash_scr_nfa
     solo_forth.z80s:3619   .text:00000cf7 b_slash_scr_pfa
     solo_forth.z80s:3624   .text:00000cf9 scr_slash_disk_
                            .data:000005a9 scr_slash_disk_cfap
                            .data:000005ab scr_slash_disk_lfa
                            .data:000005ad scr_slash_disk_nfa
     solo_forth.z80s:3624   .text:00000cfb scr_slash_disk_pfa
     solo_forth.z80s:3629   .text:00000cfd hash_vocs_
                            .data:000005b6 hash_vocs_cfap
                            .data:000005b8 hash_vocs_lfa
                            .data:000005ba hash_vocs_nfa
     solo_forth.z80s:3629   .text:00000cff hash_vocs_pfa
     solo_forth.z80s:3634   .text:00000d01 plus_origin_
                            .data:000005c0 plus_origin_cfap
                            .data:000005c2 plus_origin_lfa
                            .data:000005c4 plus_origin_nfa
     solo_forth.z80s:3634   .text:00000d03 plus_origin_pfa
     solo_forth.z80s:3651   .text:00000d0b sp0_
                            .data:000005cc sp0_cfap
                            .data:000005ce sp0_lfa
                            .data:000005d0 sp0_nfa
     solo_forth.z80s:3651   .text:00000d0d sp0_pfa
     solo_forth.z80s:3656   .text:00000d0e rp0_
                            .data:000005d4 rp0_cfap
                            .data:000005d6 rp0_lfa
                            .data:000005d8 rp0_nfa
     solo_forth.z80s:3656   .text:00000d10 rp0_pfa
     solo_forth.z80s:3661   .text:00000d11 width_
                            .data:000005dc width_cfap
                            .data:000005de width_lfa
                            .data:000005e0 width_nfa
     solo_forth.z80s:3661   .text:00000d13 width_pfa
     solo_forth.z80s:3668   .text:00000d14 warning_
                            .data:000005e6 warning_cfap
                            .data:000005e8 warning_lfa
                            .data:000005ea warning_nfa
     solo_forth.z80s:3668   .text:00000d16 warning_pfa
     solo_forth.z80s:3673   .text:00000d17 dp_
                            .data:000005f2 dp_cfap
                            .data:000005f4 dp_lfa
                            .data:000005f6 dp_nfa
     solo_forth.z80s:3673   .text:00000d19 dp_pfa
     solo_forth.z80s:3681   .text:00000d1a voc_link_
                            .data:000005f9 voc_link_cfap
                            .data:000005fb voc_link_lfa
                            .data:000005fd voc_link_nfa
     solo_forth.z80s:3681   .text:00000d1c voc_link_pfa
     solo_forth.z80s:3686   .text:00000d1e blk_
GAS LISTING solo_forth.z80s 			page 166


                            .data:00000606 blk_cfap
                            .data:00000608 blk_lfa
                            .data:0000060a blk_nfa
     solo_forth.z80s:3686   .text:00000d20 blk_pfa
     solo_forth.z80s:3693   .text:00000d21 to_in_
                            .data:0000060e to_in_cfap
                            .data:00000610 to_in_lfa
                            .data:00000612 to_in_nfa
     solo_forth.z80s:3693   .text:00000d23 to_in_pfa
                            .data:00000616 out_cfap
                            .data:00000618 out_lfa
                            .data:0000061a out_nfa
     solo_forth.z80s:3700   .text:00000d26 out_pfa
     solo_forth.z80s:3707   .text:00000d27 scr_
                            .data:0000061e scr_cfap
                            .data:00000620 scr_lfa
                            .data:00000622 scr_nfa
     solo_forth.z80s:3707   .text:00000d29 scr_pfa
                            .data:00000628 context_cfap
                            .data:0000062a context_lfa
                            .data:0000062c context_nfa
     solo_forth.z80s:3712   .text:00000d2c context_pfa
     solo_forth.z80s:3717   .text:00000d2d current_
                            .data:00000634 current_cfap
                            .data:00000636 current_lfa
                            .data:00000638 current_nfa
     solo_forth.z80s:3717   .text:00000d2f current_pfa
     solo_forth.z80s:3722   .text:00000d30 state_
                            .data:00000640 state_cfap
                            .data:00000642 state_lfa
                            .data:00000644 state_nfa
     solo_forth.z80s:3722   .text:00000d32 state_pfa
                            .data:0000064a base_cfap
                            .data:0000064c base_lfa
                            .data:0000064e base_nfa
     solo_forth.z80s:3727   .text:00000d35 base_pfa
     solo_forth.z80s:3732   .text:00000d36 dpl_
                            .data:00000653 dpl_cfap
                            .data:00000655 dpl_lfa
                            .data:00000657 dpl_nfa
     solo_forth.z80s:3732   .text:00000d38 dpl_pfa
     solo_forth.z80s:3737   .text:00000d39 fld_
                            .data:0000065b fld_cfap
                            .data:0000065d fld_lfa
                            .data:0000065f fld_nfa
     solo_forth.z80s:3737   .text:00000d3b fld_pfa
     solo_forth.z80s:3742   .text:00000d3c csp_
                            .data:00000663 csp_cfap
                            .data:00000665 csp_lfa
                            .data:00000667 csp_nfa
     solo_forth.z80s:3742   .text:00000d3e csp_pfa
     solo_forth.z80s:3747   .text:00000d3f r_hash_
                            .data:0000066b r_hash_cfap
                            .data:0000066d r_hash_lfa
                            .data:0000066f r_hash_nfa
     solo_forth.z80s:3747   .text:00000d41 r_hash_pfa
     solo_forth.z80s:3753   .text:00000d42 hld_
GAS LISTING solo_forth.z80s 			page 167


                            .data:00000672 hld_cfap
                            .data:00000674 hld_lfa
                            .data:00000676 hld_nfa
     solo_forth.z80s:3753   .text:00000d44 hld_pfa
     solo_forth.z80s:3758   .text:00000d45 tib_
                            .data:0000067a tib_cfap
                            .data:0000067c tib_lfa
                            .data:0000067e tib_nfa
     solo_forth.z80s:3758   .text:00000d47 tib_pfa
     solo_forth.z80s:3771   .text:00000d49 number_tib_
                            .data:00000682 number_tib_cfap
                            .data:00000684 number_tib_lfa
                            .data:00000686 number_tib_nfa
     solo_forth.z80s:3771   .text:00000d4b number_tib_pfa
     solo_forth.z80s:3776   .text:00000d4d recurse_
                            .data:0000068b recurse_cfap
                            .data:0000068d recurse_lfa
                            .data:0000068f recurse_nfa
     solo_forth.z80s:3776   .text:00000d4f recurse_pfa
     solo_forth.z80s:4037   .text:00000e46 latest_
     solo_forth.z80s:4300   .text:00000ee3 nfa_to_cfa_
     solo_forth.z80s:3906   .text:00000dbe compile_comma_
                            .data:00000697 one_plus_cfap
                            .data:00000699 one_plus_lfa
                            .data:0000069b one_plus_nfa
     solo_forth.z80s:3788   .text:00000d59 one_plus_pfa
     solo_forth.z80s:3795   .text:00000d5e two_plus_
                            .data:0000069e two_plus_cfap
                            .data:000006a0 two_plus_lfa
                            .data:000006a2 two_plus_nfa
     solo_forth.z80s:3795   .text:00000d60 two_plus_pfa
     solo_forth.z80s:3803   .text:00000d66 cell_minus_
                            .data:000006a5 cell_minus_cfap
                            .data:000006a7 cell_minus_lfa
                            .data:000006a9 cell_minus_nfa
     solo_forth.z80s:3816   .text:00000d73 two_minus_pfa
                            .data:000006af cell_plus_cfap
                            .data:000006b1 cell_plus_lfa
                            .data:000006b3 cell_plus_nfa
     solo_forth.z80s:3809   .text:00000d6a one_minus_
                            .data:000006b9 one_minus_cfap
                            .data:000006bb one_minus_lfa
                            .data:000006bd one_minus_nfa
     solo_forth.z80s:3809   .text:00000d6c one_minus_pfa
     solo_forth.z80s:3816   .text:00000d71 two_minus_
                            .data:000006c0 two_minus_cfap
                            .data:000006c2 two_minus_lfa
                            .data:000006c4 two_minus_nfa
     solo_forth.z80s:3824   .text:00000d79 two_star_
                            .data:000006c7 two_star_cfap
                            .data:000006c9 two_star_lfa
                            .data:000006cb two_star_nfa
     solo_forth.z80s:3824   .text:00000d7b two_star_pfa
     solo_forth.z80s:3846   .text:00000d80 cells_
                            .data:000006ce cells_cfap
                            .data:000006d0 cells_lfa
                            .data:000006d2 cells_nfa
GAS LISTING solo_forth.z80s 			page 168


                            .data:000006d8 cell_cfap
                            .data:000006da cell_lfa
                            .data:000006dc cell_nfa
     solo_forth.z80s:3849   .text:00000d84 cell_pfa
     solo_forth.z80s:3854   .text:00000d86 two_slash_
                            .data:000006e1 two_slash_cfap
                            .data:000006e3 two_slash_lfa
                            .data:000006e5 two_slash_nfa
     solo_forth.z80s:3854   .text:00000d88 two_slash_pfa
                            .data:000006e8 here_cfap
                            .data:000006ea here_lfa
                            .data:000006ec here_nfa
     solo_forth.z80s:3878   .text:00000d92 here_pfa
                            .data:000006f1 allot_cfap
                            .data:000006f3 allot_lfa
                            .data:000006f5 allot_nfa
     solo_forth.z80s:3884   .text:00000d9a allot_pfa
     solo_forth.z80s:3890   .text:00000da0 s_comma_
                            .data:000006fb s_comma_cfap
                            .data:000006fd s_comma_lfa
                            .data:000006ff s_comma_nfa
     solo_forth.z80s:3890   .text:00000da2 s_comma_pfa
                            .data:00000702 comma_cfap
                            .data:00000704 comma_lfa
                            .data:00000706 comma_nfa
     solo_forth.z80s:3900   .text:00000db4 comma_pfa
                            .data:00000708 compile_comma_cfap
                            .data:0000070a compile_comma_lfa
                            .data:0000070c compile_comma_nfa
     solo_forth.z80s:3906   .text:00000dc0 compile_comma_pfa
                            .data:00000715 c_comma_cfap
                            .data:00000717 c_comma_lfa
                            .data:00000719 c_comma_nfa
     solo_forth.z80s:3918   .text:00000dc8 c_comma_pfa
     solo_forth.z80s:3924   .text:00000dd2 minus_
                            .data:0000071c minus_cfap
                            .data:0000071e minus_lfa
                            .data:00000720 minus_nfa
     solo_forth.z80s:3924   .text:00000dd4 minus_pfa
     solo_forth.z80s:3933   .text:00000ddc not_equals_
                            .data:00000722 not_equals_cfap
                            .data:00000724 not_equals_lfa
                            .data:00000726 not_equals_nfa
     solo_forth.z80s:3933   .text:00000dde not_equals_pfa
     solo_forth.z80s:3938   .text:00000de3 false_if_z
     solo_forth.z80s:3943   .text:00000de9 equals_
                            .data:00000729 equals_cfap
                            .data:0000072b equals_lfa
                            .data:0000072d equals_nfa
     solo_forth.z80s:3943   .text:00000deb equals_pfa
     solo_forth.z80s:3948   .text:00000df0 true_if_z
     solo_forth.z80s:3953   .text:00000df6 less_than_
                            .data:0000072f less_than_cfap
                            .data:00000731 less_than_lfa
                            .data:00000733 less_than_nfa
     solo_forth.z80s:3953   .text:00000df8 less_than_pfa
     solo_forth.z80s:3967   .text:00000e03 u_greater_than_
GAS LISTING solo_forth.z80s 			page 169


                            .data:00000735 u_greater_than_cfap
                            .data:00000737 u_greater_than_lfa
                            .data:00000739 u_greater_than_nfa
     solo_forth.z80s:3967   .text:00000e05 u_greater_than_pfa
     solo_forth.z80s:3970   .text:00000e06 u_greater_than.hl
     solo_forth.z80s:3979   .text:00000e0e u_less_than.de_hl
     solo_forth.z80s:3975   .text:00000e0a u_less_than_
                            .data:0000073c u_less_than_cfap
                            .data:0000073e u_less_than_lfa
                            .data:00000740 u_less_than_nfa
     solo_forth.z80s:3975   .text:00000e0c u_less_than_pfa
                            .data:00000743 greater_than_cfap
                            .data:00000745 greater_than_lfa
                            .data:00000747 greater_than_nfa
     solo_forth.z80s:3989   .text:00000e19 greater_than_pfa
     solo_forth.z80s:3996   .text:00000e1e rot_
                            .data:00000749 rot_cfap
                            .data:0000074b rot_lfa
                            .data:0000074d rot_nfa
     solo_forth.z80s:3996   .text:00000e20 rot_pfa
     solo_forth.z80s:4004   .text:00000e26 space_
                            .data:00000751 space_cfap
                            .data:00000753 space_lfa
                            .data:00000755 space_nfa
     solo_forth.z80s:4004   .text:00000e28 space_pfa
     solo_forth.z80s:4010   .text:00000e2e question_dup_
                            .data:0000075b question_dup_cfap
                            .data:0000075d question_dup_lfa
                            .data:0000075f question_dup_nfa
     solo_forth.z80s:4010   .text:00000e30 question_dup_pfa
     solo_forth.z80s:4015   .text:00000e38 question_dup.end
     solo_forth.z80s:4019   .text:00000e3a lfa_to_nfa_
                            .data:00000764 lfa_to_nfa_cfap
                            .data:00000766 lfa_to_nfa_lfa
                            .data:00000768 lfa_to_nfa_nfa
     solo_forth.z80s:4022   .text:00000e3c trail_
                            .data:00000770 trail_cfap
                            .data:00000772 trail_lfa
                            .data:00000774 trail_nfa
     solo_forth.z80s:4022   .text:00000e3e trail_pfa
                            .data:0000077a latest_cfap
                            .data:0000077c latest_lfa
                            .data:0000077e latest_nfa
     solo_forth.z80s:4037   .text:00000e48 latest_pfa
     solo_forth.z80s:4052   .text:00000e50 pfa_to_lfa_
                            .data:00000785 pfa_to_lfa_cfap
                            .data:00000787 pfa_to_lfa_lfa
                            .data:00000789 pfa_to_lfa_nfa
     solo_forth.z80s:4052   .text:00000e52 pfa_to_lfa_pfa
     solo_forth.z80s:4057   .text:00000e56 pfa_to_cfa_
     solo_forth.z80s:4081   .text:00000e62 cfa_to_nfa_
                            .data:00000791 pfa_to_cfa_cfap
                            .data:00000793 pfa_to_cfa_lfa
                            .data:00000795 pfa_to_cfa_nfa
     solo_forth.z80s:4060   .text:00000e58 cfa_to_pfa_
                            .data:0000079d cfa_to_pfa_cfap
                            .data:0000079f cfa_to_pfa_lfa
GAS LISTING solo_forth.z80s 			page 170


                            .data:000007a1 cfa_to_pfa_nfa
     solo_forth.z80s:4063   .text:00000e5a pfa_to_nfa_
                            .data:000007a9 pfa_to_nfa_cfap
                            .data:000007ab pfa_to_nfa_lfa
                            .data:000007ad pfa_to_nfa_nfa
     solo_forth.z80s:4063   .text:00000e5c pfa_to_nfa_pfa
                            .data:000007b5 cfa_to_nfa_cfap
                            .data:000007b7 cfa_to_nfa_lfa
                            .data:000007b9 cfa_to_nfa_nfa
     solo_forth.z80s:4081   .text:00000e64 cfa_to_nfa_pfa
     solo_forth.z80s:4090   .text:00000e70 cfa_to_nfa.begin_0
     solo_forth.z80s:4093   .text:00000e71 cfa_to_nfa.begin_1
     solo_forth.z80s:4122   .text:00000e8f cfap_to_lfa_
                            .data:000007c1 cfap_to_lfa_cfap
                            .data:000007c3 cfap_to_lfa_lfa
                            .data:000007c5 cfap_to_lfa_nfa
     solo_forth.z80s:4126   .text:00000e91 nfa_to_lfa_
                            .data:000007ce nfa_to_lfa_cfap
                            .data:000007d0 nfa_to_lfa_lfa
                            .data:000007d2 nfa_to_lfa_nfa
     solo_forth.z80s:4129   .text:00000e93 c_store_bank_
                            .data:000007da c_store_bank_cfap
                            .data:000007dc c_store_bank_lfa
                            .data:000007de c_store_bank_nfa
     solo_forth.z80s:4129   .text:00000e95 c_store_bank_pfa
     solo_forth.z80s:4156   .text:00000e9f store_bank_
                            .data:000007e5 store_bank_cfap
                            .data:000007e7 store_bank_lfa
                            .data:000007e9 store_bank_nfa
     solo_forth.z80s:4156   .text:00000ea1 store_bank_pfa
     solo_forth.z80s:4172   .text:00000eab c_fetch_bank_
                            .data:000007ef c_fetch_bank_cfap
                            .data:000007f1 c_fetch_bank_lfa
                            .data:000007f3 c_fetch_bank_nfa
     solo_forth.z80s:4172   .text:00000ead c_fetch_bank_pfa
     solo_forth.z80s:4199   .text:00000eb7 fetch_bank_
                            .data:000007fa fetch_bank_cfap
                            .data:000007fc fetch_bank_lfa
                            .data:000007fe fetch_bank_nfa
     solo_forth.z80s:4199   .text:00000eb9 fetch_bank_pfa
     solo_forth.z80s:4228   .text:00000ec3 c_fetch_n_
                            .data:00000804 c_fetch_n_cfap
                            .data:00000806 c_fetch_n_lfa
                            .data:00000808 c_fetch_n_nfa
     solo_forth.z80s:4228   .text:00000ec5 c_fetch_n_pfa
     solo_forth.z80s:4248   .text:00000ecb fetch_n_
                            .data:0000080c fetch_n_cfap
                            .data:0000080e fetch_n_lfa
                            .data:00000810 fetch_n_nfa
     solo_forth.z80s:4248   .text:00000ecd fetch_n_pfa
     solo_forth.z80s:4268   .text:00000ed3 c_store_n_
                            .data:00000813 c_store_n_cfap
                            .data:00000815 c_store_n_lfa
                            .data:00000817 c_store_n_nfa
     solo_forth.z80s:4268   .text:00000ed5 c_store_n_pfa
     solo_forth.z80s:4284   .text:00000edb store_n_
                            .data:0000081b store_n_cfap
GAS LISTING solo_forth.z80s 			page 171


                            .data:0000081d store_n_lfa
                            .data:0000081f store_n_nfa
     solo_forth.z80s:4284   .text:00000edd store_n_pfa
                            .data:00000822 nfa_to_cfa_cfap
                            .data:00000824 nfa_to_cfa_lfa
                            .data:00000826 nfa_to_cfa_nfa
     solo_forth.z80s:4300   .text:00000ee5 nfa_to_cfa_pfa
     solo_forth.z80s:4313   .text:00000eee nfa_to_string_
                            .data:0000082e nfa_to_string_cfap
                            .data:00000830 nfa_to_string_lfa
                            .data:00000832 nfa_to_string_nfa
     solo_forth.z80s:4313   .text:00000ef0 nfa_to_string_pfa
                            .data:0000083d store_csp_cfap
                            .data:0000083f store_csp_lfa
                            .data:00000841 store_csp_nfa
     solo_forth.z80s:4324   .text:00000f05 store_csp_pfa
     solo_forth.z80s:4330   .text:00000f0d question_error_
                            .data:00000846 question_error_cfap
                            .data:00000848 question_error_lfa
                            .data:0000084a question_error_nfa
     solo_forth.z80s:4330   .text:00000f0f question_error_pfa
     solo_forth.z80s:4337   .text:00000f19 question_error.no_error
     solo_forth.z80s:5350   .text:00001380 error_
                            .data:00000851 comp_question_cfap
                            .data:00000853 comp_question_lfa
                            .data:00000855 comp_question_nfa
     solo_forth.z80s:4342   .text:00000f1f comp_question_pfa
                            .data:0000085b question_comp_cfap
                            .data:0000085d question_comp_lfa
                            .data:0000085f question_comp_nfa
     solo_forth.z80s:4348   .text:00000f27 question_comp_pfa
                            .data:00000865 question_exec_cfap
                            .data:00000867 question_exec_lfa
                            .data:00000869 question_exec_nfa
     solo_forth.z80s:4355   .text:00000f34 question_exec_pfa
                            .data:0000086f question_pairs_cfap
                            .data:00000871 question_pairs_lfa
                            .data:00000873 question_pairs_nfa
     solo_forth.z80s:4364   .text:00000f3f question_pairs_pfa
                            .data:0000087a question_csp_cfap
                            .data:0000087c question_csp_lfa
                            .data:0000087e question_csp_nfa
     solo_forth.z80s:4372   .text:00000f4a question_csp_pfa
     solo_forth.z80s:4379   .text:00000f59 question_loading_
                            .data:00000883 question_loading_cfap
                            .data:00000885 question_loading_lfa
                            .data:00000887 question_loading_nfa
     solo_forth.z80s:4379   .text:00000f5b question_loading_pfa
                            .data:00000890 compile_cfap
                            .data:00000892 compile_lfa
                            .data:00000894 compile_nfa
     solo_forth.z80s:4386   .text:00000f6a compile_pfa
     solo_forth.z80s:4393   .text:00000f7a postpone_
                            .data:0000089c postpone_cfap
                            .data:0000089e postpone_lfa
                            .data:000008a0 postpone_nfa
     solo_forth.z80s:4393   .text:00000f7c postpone_pfa
GAS LISTING solo_forth.z80s 			page 172


     solo_forth.z80s:6851   .text:00001988 defined_
     solo_forth.z80s:6891   .text:00001998 question_defined_
     solo_forth.z80s:4411   .text:00000f8c postpone.end
                            .data:000008a9 left_bracket_cfap
                            .data:000008ab left_bracket_lfa
                            .data:000008ad left_bracket_nfa
     solo_forth.z80s:4416   .text:00000f92 left_bracket_pfa
                            .data:000008af right_bracket_cfap
                            .data:000008b1 right_bracket_lfa
                            .data:000008b3 right_bracket_nfa
     solo_forth.z80s:4422   .text:00000f9a right_bracket_pfa
                            .data:000008b5 smudge_cfap
                            .data:000008b7 smudge_lfa
                            .data:000008b9 smudge_nfa
     solo_forth.z80s:4428   .text:00000fa2 smudge_pfa
                            .data:000008c0 hex_cfap
                            .data:000008c2 hex_lfa
                            .data:000008c4 hex_nfa
     solo_forth.z80s:4451   .text:00000fb5 hex_pfa
     solo_forth.z80s:4458   .text:00000fbe decimal_
                            .data:000008c8 decimal_cfap
                            .data:000008ca decimal_lfa
                            .data:000008cc decimal_nfa
     solo_forth.z80s:4458   .text:00000fc0 decimal_pfa
                            .data:000008d4 paren_semicolon_code_cfap
                            .data:000008d6 paren_semicolon_code_lfa
                            .data:000008d8 paren_semicolon_code_nfa
     solo_forth.z80s:4465   .text:00000fcb paren_semicolon_code_pfa
     solo_forth.z80s:4489   .text:00000fd5 semicolon_code_
                            .data:000008e0 semicolon_code_cfap
                            .data:000008e2 semicolon_code_lfa
                            .data:000008e4 semicolon_code_nfa
     solo_forth.z80s:4489   .text:00000fd7 semicolon_code_pfa
     solo_forth.z80s:4509   .text:00000fe5 does_
                            .data:000008ea does_cfap
                            .data:000008ec does_lfa
                            .data:000008ee does_nfa
     solo_forth.z80s:4509   .text:00000fe7 does_pfa
     solo_forth.z80s:4517   .text:00000ff8 do_does
                            .data:000008f4 count_cfap
                            .data:000008f6 count_lfa
                            .data:000008f8 count_nfa
     solo_forth.z80s:4535   .text:00001009 count_pfa
     solo_forth.z80s:4546   .text:00001010 bounds_
                            .data:000008fe bounds_cfap
                            .data:00000900 bounds_lfa
                            .data:00000902 bounds_nfa
     solo_forth.z80s:4546   .text:00001012 bounds_pfa
     solo_forth.z80s:4552   .text:0000101a type_
                            .data:00000909 type_cfap
                            .data:0000090b type_lfa
                            .data:0000090d type_nfa
     solo_forth.z80s:4552   .text:0000101c type_pfa
     solo_forth.z80s:4566   .text:00001032 type.empty_string
     solo_forth.z80s:4561   .text:00001026 type.do
     solo_forth.z80s:4568   .text:00001034 type.end
     solo_forth.z80s:4573   .text:00001036 minus_trailing_
GAS LISTING solo_forth.z80s 			page 173


                            .data:00000912 minus_trailing_cfap
                            .data:00000914 minus_trailing_lfa
                            .data:00000916 minus_trailing_nfa
     solo_forth.z80s:4573   .text:00001038 minus_trailing_pfa
     solo_forth.z80s:4582   .text:0000103d minus_trailing.begin
     solo_forth.z80s:4595   .text:0000104d paren_dot_quote_
                            .data:00000920 paren_dot_quote_cfap
                            .data:00000922 paren_dot_quote_lfa
                            .data:00000924 paren_dot_quote_nfa
     solo_forth.z80s:4595   .text:0000104f paren_dot_quote_pfa
     solo_forth.z80s:4604   .text:00001061 dot_quote_
                            .data:0000092c dot_quote_cfap
                            .data:0000092e dot_quote_lfa
                            .data:00000930 dot_quote_nfa
     solo_forth.z80s:4604   .text:00001063 dot_quote_pfa
     solo_forth.z80s:4613   .text:00001076 dot_quote.interpreting
     solo_forth.z80s:7869   .text:00001d4a exit_
     solo_forth.z80s:4618   .text:0000107a span_
                            .data:00000936 span_cfap
                            .data:00000938 span_lfa
                            .data:0000093a span_nfa
     solo_forth.z80s:4618   .text:0000107c span_pfa
     solo_forth.z80s:4633   .text:0000107e accept_
                            .data:0000093f accept_cfap
                            .data:00000941 accept_lfa
                            .data:00000943 accept_nfa
     solo_forth.z80s:4633   .text:00001080 accept_pfa
     solo_forth.z80s:4694   .text:00001082 expect_
                            .data:0000094a expect_cfap
                            .data:0000094c expect_lfa
                            .data:0000094e expect_nfa
     solo_forth.z80s:4694   .text:00001084 expect_pfa
     solo_forth.z80s:4768   .text:000010f9 expect.end
     solo_forth.z80s:4721   .text:00001094 expect.do
     solo_forth.z80s:4741   .text:000010be expect.maybe_carriage_return
     solo_forth.z80s:4765   .text:000010eb expect.loop
     solo_forth.z80s:4762   .text:000010e9 expect.emit
     solo_forth.z80s:4751   .text:000010d3 expect.control_char
     solo_forth.z80s:4758   .text:000010e3 expect.ordinary_key
     solo_forth.z80s:4760   .text:000010e5 expect.store
     solo_forth.z80s:4773   .text:000010fd query_
                            .data:00000955 query_cfap
                            .data:00000957 query_lfa
                            .data:00000959 query_nfa
     solo_forth.z80s:4773   .text:000010ff query_pfa
     solo_forth.z80s:4891   .text:0000115d blank_
     solo_forth.z80s:6353   .text:0000180b stream_end_
                            .data:0000095f x_cfap
                            .data:00000961 x_lfa
                            .data:00000963 x_nfa
     solo_forth.z80s:4806   .text:0000111d x_pfa
     solo_forth.z80s:4848   .text:0000113d x.exit
     solo_forth.z80s:4860   .text:0000113f x.end
     solo_forth.z80s:4864   .text:00001141 fill_
                            .data:00000965 fill_cfap
                            .data:00000967 fill_lfa
                            .data:00000969 fill_nfa
GAS LISTING solo_forth.z80s 			page 174


     solo_forth.z80s:4864   .text:00001143 fill_pfa
     solo_forth.z80s:4867   .text:00001144 fill.e
     solo_forth.z80s:4872   .text:00001148 fill.do
     solo_forth.z80s:4880   .text:00001153 fill.end
                            .data:0000096e erase_cfap
                            .data:00000970 erase_lfa
                            .data:00000972 erase_nfa
     solo_forth.z80s:4885   .text:00001158 erase_pfa
                            .data:00000978 blank_cfap
                            .data:0000097a blank_lfa
                            .data:0000097c blank_nfa
     solo_forth.z80s:4891   .text:0000115f blank_pfa
     solo_forth.z80s:4897   .text:00001164 hold_
                            .data:00000982 hold_cfap
                            .data:00000984 hold_lfa
                            .data:00000986 hold_nfa
     solo_forth.z80s:4897   .text:00001166 hold_pfa
     solo_forth.z80s:4904   .text:00001176 pad_
                            .data:0000098b pad_cfap
                            .data:0000098d pad_lfa
                            .data:0000098f pad_nfa
     solo_forth.z80s:4904   .text:00001178 pad_pfa
     solo_forth.z80s:4912   .text:00001181 stream_
                            .data:00000993 stream_cfap
                            .data:00000995 stream_lfa
                            .data:00000997 stream_nfa
     solo_forth.z80s:4912   .text:00001183 stream_pfa
     solo_forth.z80s:4926   .text:00001193 stream.terminal
     solo_forth.z80s:6505   .text:00001877 block_
     solo_forth.z80s:4928   .text:00001195 stream.end
     solo_forth.z80s:4933   .text:0000119d parsed_
                            .data:0000099e parsed_cfap
                            .data:000009a0 parsed_lfa
                            .data:000009a2 parsed_nfa
     solo_forth.z80s:4933   .text:0000119f parsed_pfa
                            .data:000009a9 parse_cfap
                            .data:000009ab parse_lfa
                            .data:000009ad parse_nfa
     solo_forth.z80s:4947   .text:000011a9 parse_pfa
     solo_forth.z80s:4966   .text:000011b5 parse_name_
                            .data:000009b3 parse_name_cfap
                            .data:000009b5 parse_name_lfa
                            .data:000009b7 parse_name_nfa
     solo_forth.z80s:4966   .text:000011b7 parse_name_pfa
     solo_forth.z80s:4983   .text:000011d5 word_
                            .data:000009c2 word_cfap
                            .data:000009c4 word_lfa
                            .data:000009c6 word_nfa
     solo_forth.z80s:4983   .text:000011d7 word_pfa
     solo_forth.z80s:5043   .text:00001210 paren_number_
                            .data:000009cb paren_number_cfap
                            .data:000009cd paren_number_lfa
                            .data:000009cf paren_number_nfa
     solo_forth.z80s:5043   .text:00001212 paren_number_pfa
     solo_forth.z80s:5056   .text:00001212 paren_number.begin
     solo_forth.z80s:5077   .text:0000124e paren_number.end
     solo_forth.z80s:5074   .text:00001248 paren_number.decimal_point_done
GAS LISTING solo_forth.z80s 			page 175


     solo_forth.z80s:5082   .text:00001252 number_
                            .data:000009d8 number_cfap
                            .data:000009da number_lfa
                            .data:000009dc number_nfa
     solo_forth.z80s:5082   .text:00001254 number_pfa
     solo_forth.z80s:5113   .text:0000126f number.begin
     solo_forth.z80s:5129   .text:00001294 number.a_blank
     solo_forth.z80s:5135   .text:0000129e number.end
     solo_forth.z80s:5139   .text:000012a0 upper_
                            .data:000009e3 upper_cfap
                            .data:000009e5 upper_lfa
                            .data:000009e7 upper_nfa
     solo_forth.z80s:5139   .text:000012a2 upper_pfa
     solo_forth.z80s:5153   .text:000012ab upper.a
     solo_forth.z80s:5163   .text:000012b4 uppers_
                            .data:000009ed uppers_cfap
                            .data:000009ef uppers_lfa
                            .data:000009f1 uppers_nfa
     solo_forth.z80s:5163   .text:000012b6 uppers_pfa
     solo_forth.z80s:5173   .text:000012b8 uppers.do
     solo_forth.z80s:5185   .text:000012c7 defined_question_
                            .data:000009f8 defined_question_cfap
                            .data:000009fa defined_question_lfa
                            .data:000009fc defined_question_nfa
     solo_forth.z80s:5185   .text:000012c9 defined_question_pfa
     solo_forth.z80s:5290   .text:0000133c found_
     solo_forth.z80s:5193   .text:000012d1 undefined_question_
                            .data:00000a05 undefined_question_cfap
                            .data:00000a07 undefined_question_lfa
                            .data:00000a09 undefined_question_nfa
     solo_forth.z80s:5193   .text:000012d3 undefined_question_pfa
                            .data:00000a14 dollar_store_cfap
                            .data:00000a16 dollar_store_lfa
                            .data:00000a18 dollar_store_nfa
     solo_forth.z80s:5205   .text:000012db dollar_store_pfa
     solo_forth.z80s:5238   .text:000012eb find_
                            .data:00000a1b find_cfap
                            .data:00000a1d find_lfa
                            .data:00000a1f find_nfa
     solo_forth.z80s:5238   .text:000012ed find_pfa
     solo_forth.z80s:5260   .text:000012f3 find.do
     solo_forth.z80s:5276   .text:00001311 find.loop
     solo_forth.z80s:5281   .text:00001319 find_dollar_
                            .data:00000a24 find_dollar_cfap
                            .data:00000a26 find_dollar_lfa
                            .data:00000a28 find_dollar_nfa
     solo_forth.z80s:5281   .text:0000131b find_dollar_pfa
                            .data:00000a2e found_cfap
                            .data:00000a30 found_lfa
                            .data:00000a32 found_nfa
     solo_forth.z80s:5290   .text:0000133e found_pfa
     solo_forth.z80s:5309   .text:00001355 paren_abort_
                            .data:00000a38 paren_abort_cfap
                            .data:00000a3a paren_abort_lfa
                            .data:00000a3c paren_abort_nfa
     solo_forth.z80s:5309   .text:00001357 paren_abort_pfa
     solo_forth.z80s:5933   .text:0000160e abort_
GAS LISTING solo_forth.z80s 			page 176


     solo_forth.z80s:5315   .text:0000135b error_number_
                            .data:00000a44 error_number_cfap
                            .data:00000a46 error_number_lfa
                            .data:00000a48 error_number_nfa
     solo_forth.z80s:5315   .text:0000135d error_number_pfa
     solo_forth.z80s:5320   .text:0000135f error_pos_
                            .data:00000a4f error_pos_cfap
                            .data:00000a51 error_pos_lfa
                            .data:00000a53 error_pos_nfa
     solo_forth.z80s:5320   .text:00001361 error_pos_pfa
     solo_forth.z80s:5325   .text:00001365 error_to_line_
                            .data:00000a5d error_to_line_cfap
                            .data:00000a5f error_to_line_lfa
                            .data:00000a61 error_to_line_nfa
     solo_forth.z80s:5325   .text:00001367 error_to_line_pfa
     solo_forth.z80s:5338   .text:0000136f error_to_number.do
     solo_forth.z80s:6251   .text:0000177b mod_
                            .data:00000a6c error_cfap
                            .data:00000a6e error_lfa
                            .data:00000a70 error_nfa
     solo_forth.z80s:5350   .text:00001382 error_pfa
     solo_forth.z80s:5356   .text:00001392 error.message
     solo_forth.z80s:6294   .text:000017d1 message_
     solo_forth.z80s:5367   .text:000013b9 error.end
     solo_forth.z80s:5849   .text:000015a1 quit_
     solo_forth.z80s:5371   .text:000013bb id_dot_
                            .data:00000a76 id_dot_cfap
                            .data:00000a78 id_dot_lfa
                            .data:00000a7a id_dot_nfa
     solo_forth.z80s:5371   .text:000013bd id_dot_pfa
                            .data:00000a7e header_cfap
                            .data:00000a80 header_lfa
                            .data:00000a82 header_nfa
     solo_forth.z80s:5377   .text:000013c7 header_pfa
     solo_forth.z80s:6087   .text:000016ea abs_
     solo_forth.z80s:6223   .text:0000175f star_
     solo_forth.z80s:5399   .text:000013dc header.continue
     solo_forth.z80s:6147   .text:0000170e min_
                            .data:00000a89 create_cfap
                            .data:00000a8b create_lfa
                            .data:00000a8d create_nfa
     solo_forth.z80s:5421   .text:00001414 create_pfa
     solo_forth.z80s:5431   .text:0000141e code_
                            .data:00000a94 code_cfap
                            .data:00000a96 code_lfa
                            .data:00000a98 code_nfa
     solo_forth.z80s:5431   .text:00001420 code_pfa
     solo_forth.z80s:5439   .text:0000142c compare_
                            .data:00000a9d compare_cfap
                            .data:00000a9f compare_lfa
                            .data:00000aa1 compare_nfa
     solo_forth.z80s:5439   .text:0000142e compare_pfa
     solo_forth.z80s:5458   .text:00001437 compare.lengths
     solo_forth.z80s:5462   .text:0000143a compare.ready
     solo_forth.z80s:5492   .text:00001457 compare_strings_case_sensitive
     solo_forth.z80s:5479   .text:00001447 compare.no_match
     solo_forth.z80s:5474   .text:00001444 compare.match
GAS LISTING solo_forth.z80s 			page 177


     solo_forth.z80s:5483   .text:00001448 compare.end
     solo_forth.z80s:5513   .text:00001463 search_
                            .data:00000aa9 search_cfap
                            .data:00000aab search_lfa
                            .data:00000aad search_nfa
     solo_forth.z80s:5513   .text:00001465 search_pfa
     solo_forth.z80s:5555   .text:00001487 search.string_2_len
     solo_forth.z80s:5575   .text:000014a0 search.string_1_len
     solo_forth.z80s:5578   .text:000014a4 search.string_1_addr
     solo_forth.z80s:5564   .text:00001493 search.match
     solo_forth.z80s:5541   .text:0000147b search.1
     solo_forth.z80s:5573   .text:0000149c search.no_match
     solo_forth.z80s:5566   .text:00001496 search.end
     solo_forth.z80s:5583   .text:000014a9 bracket_compile_
                            .data:00000ab4 bracket_compile_cfap
                            .data:00000ab6 bracket_compile_lfa
                            .data:00000ab8 bracket_compile_nfa
     solo_forth.z80s:5583   .text:000014ab bracket_compile_pfa
     solo_forth.z80s:6930   .text:000019b3 tick_
                            .data:00000ac2 s_literal_cfap
                            .data:00000ac4 s_literal_lfa
                            .data:00000ac6 s_literal_nfa
     solo_forth.z80s:5589   .text:000014b3 s_literal_pfa
     solo_forth.z80s:5597   .text:000014bb c_literal_
                            .data:00000acf c_literal_cfap
                            .data:00000ad1 c_literal_lfa
                            .data:00000ad3 c_literal_nfa
     solo_forth.z80s:5597   .text:000014bd c_literal_pfa
     solo_forth.z80s:5615   .text:000014c9 c_literal.end
     solo_forth.z80s:5623   .text:000014cb literal_
                            .data:00000adc literal_cfap
                            .data:00000ade literal_lfa
                            .data:00000ae0 literal_nfa
     solo_forth.z80s:5623   .text:000014cd literal_pfa
     solo_forth.z80s:5639   .text:000014d9 literal.end
     solo_forth.z80s:5647   .text:000014db two_literal_
                            .data:00000ae8 two_literal_cfap
                            .data:00000aea two_literal_lfa
                            .data:00000aec two_literal_nfa
     solo_forth.z80s:5647   .text:000014dd two_literal_pfa
     solo_forth.z80s:5663   .text:000014e9 two_literal.end
     solo_forth.z80s:5672   .text:000014eb depth_
                            .data:00000af5 depth_cfap
                            .data:00000af7 depth_lfa
                            .data:00000af9 depth_nfa
     solo_forth.z80s:5672   .text:000014ed depth_pfa
     solo_forth.z80s:6245   .text:00001773 slash_
     solo_forth.z80s:5678   .text:000014fd question_stack_
                            .data:00000aff question_stack_cfap
                            .data:00000b01 question_stack_lfa
                            .data:00000b03 question_stack_nfa
     solo_forth.z80s:5678   .text:000014ff question_stack_pfa
     solo_forth.z80s:5699   .text:0000151c interpret_
                            .data:00000b0a interpret_cfap
                            .data:00000b0c interpret_lfa
                            .data:00000b0e interpret_nfa
     solo_forth.z80s:5699   .text:0000151e interpret_pfa
GAS LISTING solo_forth.z80s 			page 178


     solo_forth.z80s:5714   .text:0000151e interpret.begin
     solo_forth.z80s:5764   .text:0000153e interpret.word_not_found
     solo_forth.z80s:5755   .text:00001538 interpret.execute
     solo_forth.z80s:5779   .text:00001550 interpret.16bit_number
     solo_forth.z80s:5788   .text:00001558 immediate_
                            .data:00000b18 immediate_cfap
                            .data:00000b1a immediate_lfa
                            .data:00000b1c immediate_nfa
     solo_forth.z80s:5788   .text:0000155a immediate_pfa
     solo_forth.z80s:5799   .text:0000156b vocabulary_
                            .data:00000b26 vocabulary_cfap
                            .data:00000b28 vocabulary_lfa
                            .data:00000b2a vocabulary_nfa
     solo_forth.z80s:5799   .text:0000156d vocabulary_pfa
                            .data:00000b35 definitions_cfap
                            .data:00000b37 definitions_lfa
                            .data:00000b39 definitions_nfa
     solo_forth.z80s:5834   .text:0000158c definitions_pfa
     solo_forth.z80s:5841   .text:00001596 paren_
                            .data:00000b45 paren_cfap
                            .data:00000b47 paren_lfa
                            .data:00000b49 paren_nfa
     solo_forth.z80s:5841   .text:00001598 paren_pfa
     solo_forth.z80s:7483   .text:00001bc7 two_drop_
                            .data:00000b4b quit_cfap
                            .data:00000b4d quit_lfa
                            .data:00000b4f quit_nfa
     solo_forth.z80s:5849   .text:000015a3 quit_pfa
     solo_forth.z80s:5854   .text:000015a9 quit.do
     solo_forth.z80s:5899   .text:000015c4 greeting_
                            .data:00000b54 greeting_cfap
                            .data:00000b56 greeting_lfa
                            .data:00000b58 greeting_nfa
     solo_forth.z80s:5899   .text:000015c6 greeting_pfa
     solo_forth.z80s:5921   .text:000015fb greeting.string_0_end
     solo_forth.z80s:7511   .text:00001be2 unused_
     solo_forth.z80s:7325   .text:00001b2e u_dot_
     solo_forth.z80s:5928   .text:0000160c greeting.string_1_end
                            .data:00000b61 abort_cfap
                            .data:00000b63 abort_lfa
                            .data:00000b65 abort_nfa
     solo_forth.z80s:5933   .text:00001610 abort_pfa
     solo_forth.z80s:5937   .text:00001616 boot
     solo_forth.z80s:5942   .text:0000161a boot_
                            .data:00000b6b boot_cfap
                            .data:00000b6d boot_lfa
                            .data:00000b6f boot_nfa
     solo_forth.z80s:5942   .text:0000161c boot_pfa
     solo_forth.z80s:5947   .text:0000161e warm_
                            .data:00000b74 warm_cfap
                            .data:00000b76 warm_lfa
                            .data:00000b78 warm_nfa
     solo_forth.z80s:5947   .text:00001620 warm_pfa
     solo_forth.z80s:7450   .text:00001bb6 page_
     solo_forth.z80s:7471   .text:00001bc3 system_stack_pointer
     solo_forth.z80s:6019   .text:000016b4 common_start
     solo_forth.z80s:5968   .text:0000162f cold_
GAS LISTING solo_forth.z80s 			page 179


                            .data:00000b7d cold_cfap
                            .data:00000b7f cold_lfa
                            .data:00000b81 cold_nfa
     solo_forth.z80s:5968   .text:00001631 cold_pfa
     solo_forth.z80s:6370   .text:00001819 empty_buffers_
     solo_forth.z80s:7358   .text:00001b72 colors0_
     solo_forth.z80s:7304   .text:00001b1e dot_
                            .data:00000d80 next_screen_nfa
     solo_forth.z80s:6010   .text:000016ac only_first_cold
     solo_forth.z80s:8029   .text:00001dac move_name_fields_to_memory_bank
     solo_forth.z80s:6031   .text:000016c3 s_to_d_
                            .data:00000b86 s_to_d_cfap
                            .data:00000b88 s_to_d_lfa
                            .data:00000b8a s_to_d_nfa
     solo_forth.z80s:6031   .text:000016c5 s_to_d_pfa
     solo_forth.z80s:6052   .text:000016d2 plus_minus_
                            .data:00000b8e plus_minus_cfap
                            .data:00000b90 plus_minus_lfa
                            .data:00000b92 plus_minus_nfa
     solo_forth.z80s:6052   .text:000016d4 plus_minus_pfa
     solo_forth.z80s:6065   .text:000016dc plus_minus.end
     solo_forth.z80s:6069   .text:000016de d_plus_minus_
                            .data:00000b95 d_plus_minus_cfap
                            .data:00000b97 d_plus_minus_lfa
                            .data:00000b99 d_plus_minus_nfa
     solo_forth.z80s:6069   .text:000016e0 d_plus_minus_pfa
     solo_forth.z80s:6083   .text:000016e8 d_plus_minus.end
                            .data:00000b9d abs_cfap
                            .data:00000b9f abs_lfa
                            .data:00000ba1 abs_nfa
     solo_forth.z80s:6087   .text:000016ec abs_pfa
     solo_forth.z80s:6101   .text:000016f2 dabs_
                            .data:00000ba5 dabs_cfap
                            .data:00000ba7 dabs_lfa
                            .data:00000ba9 dabs_nfa
     solo_forth.z80s:6101   .text:000016f4 dabs_pfa
     solo_forth.z80s:6115   .text:000016fa umax_
                            .data:00000bae umax_cfap
                            .data:00000bb0 umax_lfa
                            .data:00000bb2 umax_nfa
     solo_forth.z80s:6115   .text:000016fc umax_pfa
     solo_forth.z80s:6165   .text:0000171f max.1
     solo_forth.z80s:6131   .text:00001704 umin_
                            .data:00000bb7 umin_cfap
                            .data:00000bb9 umin_lfa
                            .data:00000bbb umin_nfa
     solo_forth.z80s:6131   .text:00001706 umin_pfa
     solo_forth.z80s:6167   .text:00001720 max.2
                            .data:00000bc0 min_cfap
                            .data:00000bc2 min_lfa
                            .data:00000bc4 min_nfa
     solo_forth.z80s:6147   .text:00001710 min_pfa
     solo_forth.z80s:6157   .text:00001718 max_
                            .data:00000bc8 max_cfap
                            .data:00000bca max_lfa
                            .data:00000bcc max_nfa
     solo_forth.z80s:6157   .text:0000171a max_pfa
GAS LISTING solo_forth.z80s 			page 180


     solo_forth.z80s:6162   .text:0000171b max.de
     solo_forth.z80s:6173   .text:00001727 m_star_
                            .data:00000bd0 m_star_cfap
                            .data:00000bd2 m_star_lfa
                            .data:00000bd4 m_star_nfa
     solo_forth.z80s:6173   .text:00001729 m_star_pfa
     solo_forth.z80s:6192   .text:0000173d m_slash_
                            .data:00000bd7 m_slash_cfap
                            .data:00000bd9 m_slash_lfa
                            .data:00000bdb m_slash_nfa
     solo_forth.z80s:6192   .text:0000173f m_slash_pfa
                            .data:00000bde star_cfap
                            .data:00000be0 star_lfa
                            .data:00000be2 star_nfa
     solo_forth.z80s:6223   .text:00001761 star_pfa
     solo_forth.z80s:6229   .text:00001767 slash_mod_
                            .data:00000be4 slash_mod_cfap
                            .data:00000be6 slash_mod_lfa
                            .data:00000be8 slash_mod_nfa
     solo_forth.z80s:6229   .text:00001769 slash_mod_pfa
                            .data:00000bed slash_cfap
                            .data:00000bef slash_lfa
                            .data:00000bf1 slash_nfa
     solo_forth.z80s:6245   .text:00001775 slash_pfa
                            .data:00000bf3 mod_cfap
                            .data:00000bf5 mod_lfa
                            .data:00000bf7 mod_nfa
     solo_forth.z80s:6251   .text:0000177d mod_pfa
     solo_forth.z80s:6257   .text:00001783 star_slash_mod_
                            .data:00000bfb star_slash_mod_cfap
                            .data:00000bfd star_slash_mod_lfa
                            .data:00000bff star_slash_mod_nfa
     solo_forth.z80s:6257   .text:00001785 star_slash_mod_pfa
     solo_forth.z80s:6264   .text:0000178f star_slash_
                            .data:00000c05 star_slash_cfap
                            .data:00000c07 star_slash_lfa
                            .data:00000c09 star_slash_nfa
     solo_forth.z80s:6264   .text:00001791 star_slash_pfa
     solo_forth.z80s:6270   .text:00001797 m_slash_mod_
                            .data:00000c0c m_slash_mod_cfap
                            .data:00000c0e m_slash_mod_lfa
                            .data:00000c10 m_slash_mod_nfa
     solo_forth.z80s:6270   .text:00001799 m_slash_mod_pfa
     solo_forth.z80s:6279   .text:000017ad paren_line_
                            .data:00000c16 paren_line_cfap
                            .data:00000c18 paren_line_lfa
                            .data:00000c1a paren_line_nfa
     solo_forth.z80s:6279   .text:000017af paren_line_pfa
     solo_forth.z80s:6288   .text:000017c7 dot_line_
                            .data:00000c21 dot_line_cfap
                            .data:00000c23 dot_line_lfa
                            .data:00000c25 dot_line_nfa
     solo_forth.z80s:6288   .text:000017c9 dot_line_pfa
                            .data:00000c2b message_cfap
                            .data:00000c2d message_lfa
                            .data:00000c2f message_nfa
     solo_forth.z80s:6294   .text:000017d3 message_pfa
GAS LISTING solo_forth.z80s 			page 181


     solo_forth.z80s:6307   .text:000017e5 message.number_only
     solo_forth.z80s:6312   .text:000017ed message.string_end
     solo_forth.z80s:6319   .text:000017f1 update_
                            .data:00000c37 update_cfap
                            .data:00000c39 update_lfa
                            .data:00000c3b update_nfa
     solo_forth.z80s:6319   .text:000017f3 update_pfa
     solo_forth.z80s:6339   .text:00001803 updated_question_
                            .data:00000c42 updated_question_cfap
                            .data:00000c44 updated_question_lfa
                            .data:00000c46 updated_question_nfa
     solo_forth.z80s:6339   .text:00001805 updated_question_pfa
     solo_forth.z80s:6399   .text:0000182d buffer_id_
                            .data:00000c4f stream_end_cfap
                            .data:00000c51 stream_end_lfa
                            .data:00000c53 stream_end_nfa
     solo_forth.z80s:6353   .text:0000180d stream_end_pfa
                            .data:00000c5e empty_buffers_cfap
                            .data:00000c60 empty_buffers_lfa
                            .data:00000c62 empty_buffers_nfa
     solo_forth.z80s:6370   .text:0000181b empty_buffers_pfa
     solo_forth.z80s:6385   .text:00001825 buffer_data_
                            .data:00000c70 buffer_data_cfap
                            .data:00000c72 buffer_data_lfa
                            .data:00000c74 buffer_data_nfa
     solo_forth.z80s:6385   .text:00001827 buffer_data_pfa
                            .data:00000c80 buffer_id_cfap
                            .data:00000c82 buffer_id_lfa
                            .data:00000c84 buffer_id_nfa
     solo_forth.z80s:6399   .text:0000182f buffer_id_pfa
     solo_forth.z80s:6413   .text:00001835 block_number_
                            .data:00000c8e block_number_cfap
                            .data:00000c90 block_number_lfa
                            .data:00000c92 block_number_nfa
     solo_forth.z80s:6413   .text:00001837 block_number_pfa
     solo_forth.z80s:6429   .text:0000183f buffer_block_
                            .data:00000c9f buffer_block_cfap
                            .data:00000ca1 buffer_block_lfa
                            .data:00000ca3 buffer_block_nfa
     solo_forth.z80s:6429   .text:00001841 buffer_block_pfa
     solo_forth.z80s:6443   .text:00001847 paren_buffer_
                            .data:00000cb0 paren_buffer_cfap
                            .data:00000cb2 paren_buffer_lfa
                            .data:00000cb4 paren_buffer_nfa
     solo_forth.z80s:6443   .text:00001849 paren_buffer_pfa
     solo_forth.z80s:6466   .text:00001857 free_buffer.not_updated
     solo_forth.z80s:6657   .text:000018e8 write_buffer_
     solo_forth.z80s:6468   .text:00001859 free_buffer.end
     solo_forth.z80s:6473   .text:0000185f buffer_
                            .data:00000cbd buffer_cfap
                            .data:00000cbf buffer_lfa
                            .data:00000cc1 buffer_nfa
     solo_forth.z80s:6473   .text:00001861 buffer_pfa
     solo_forth.z80s:6498   .text:00001871 buffer.not_equals
     solo_forth.z80s:6500   .text:00001873 buffer.end
                            .data:00000cc8 block_cfap
                            .data:00000cca block_lfa
GAS LISTING solo_forth.z80s 			page 182


                            .data:00000ccc block_nfa
     solo_forth.z80s:6505   .text:00001879 block_pfa
     solo_forth.z80s:6534   .text:00001889 block.not_equals
     solo_forth.z80s:6537   .text:00001893 block.end
     solo_forth.z80s:6712   .text:00001911 save_buffers_
     solo_forth.z80s:6628   .text:000018d5 read_buffer_
     solo_forth.z80s:6542   .text:00001897 flip_
                            .data:00000cd2 flip_cfap
                            .data:00000cd4 flip_lfa
                            .data:00000cd6 flip_nfa
     solo_forth.z80s:6542   .text:00001899 flip_pfa
     solo_forth.z80s:6562   .text:000018a0 block_to_sector_
                            .data:00000cdb block_to_sector_cfap
                            .data:00000cdd block_to_sector_lfa
                            .data:00000cdf block_to_sector_nfa
     solo_forth.z80s:6562   .text:000018a2 block_to_sector_pfa
     solo_forth.z80s:6613   .text:000018cc read_block_
                            .data:00000cec read_block_cfap
                            .data:00000cee read_block_lfa
                            .data:00000cf0 read_block_nfa
     solo_forth.z80s:6613   .text:000018ce read_block_pfa
     solo_forth.z80s:6671   .text:000018f2 transfer_block_
                            .data:00000cfb read_buffer_cfap
                            .data:00000cfd read_buffer_lfa
                            .data:00000cff read_buffer_nfa
     solo_forth.z80s:6628   .text:000018d7 read_buffer_pfa
     solo_forth.z80s:6642   .text:000018df write_block_
                            .data:00000d0b write_block_cfap
                            .data:00000d0d write_block_lfa
                            .data:00000d0f write_block_nfa
     solo_forth.z80s:6642   .text:000018e1 write_block_pfa
                            .data:00000d1b write_buffer_cfap
                            .data:00000d1d write_buffer_lfa
                            .data:00000d1f write_buffer_nfa
     solo_forth.z80s:6657   .text:000018ea write_buffer_pfa
                            .data:00000d2c transfer_block_cfap
                            .data:00000d2e transfer_block_lfa
                            .data:00000d30 transfer_block_nfa
     solo_forth.z80s:6671   .text:000018f4 transfer_block_pfa
     solo_forth.z80s:6704   .text:00001909 read_write_sector_command
     solo_forth.z80s:6690   .text:00001900 paren_transfer_block_
     solo_forth.z80s:6697   .text:00001902 paren_transfer_block_pfa
                            .data:00000d3f save_buffers_cfap
                            .data:00000d41 save_buffers_lfa
                            .data:00000d43 save_buffers_nfa
     solo_forth.z80s:6712   .text:00001913 save_buffers_pfa
     solo_forth.z80s:7889   .text:00001d50 question_exit_
     solo_forth.z80s:6737   .text:00001925 flush_
                            .data:00000d50 flush_cfap
                            .data:00000d52 flush_lfa
                            .data:00000d54 flush_nfa
     solo_forth.z80s:6737   .text:00001927 flush_pfa
     solo_forth.z80s:6745   .text:0000192d paren_load_
                            .data:00000d5a paren_load_cfap
                            .data:00000d5c paren_load_lfa
                            .data:00000d5e paren_load_nfa
     solo_forth.z80s:6745   .text:0000192f paren_load_pfa
GAS LISTING solo_forth.z80s 			page 183


     solo_forth.z80s:6773   .text:00001948 continued_
                            .data:00000d65 continued_cfap
                            .data:00000d67 continued_lfa
                            .data:00000d69 continued_nfa
     solo_forth.z80s:6773   .text:0000194a continued_pfa
     solo_forth.z80s:6796   .text:00001950 load_
                            .data:00000d73 load_cfap
                            .data:00000d75 load_lfa
                            .data:00000d77 load_nfa
     solo_forth.z80s:6796   .text:00001952 load_pfa
     solo_forth.z80s:6828   .text:0000196e next_screen_
                            .data:00000d7c next_screen_cfap
                            .data:00000d7e next_screen_lfa
     solo_forth.z80s:6828   .text:00001970 next_screen_pfa
                            .data:00000d84 defined_cfap
                            .data:00000d86 defined_lfa
                            .data:00000d88 defined_nfa
     solo_forth.z80s:6851   .text:0000198a defined_pfa
                            .data:00000d90 question_defined_cfap
                            .data:00000d92 question_defined_lfa
                            .data:00000d94 question_defined_nfa
     solo_forth.z80s:6891   .text:0000199a question_defined_pfa
     solo_forth.z80s:6906   .text:000019a3 bracket_defined_
                            .data:00000d9d bracket_defined_cfap
                            .data:00000d9f bracket_defined_lfa
                            .data:00000da1 bracket_defined_nfa
     solo_forth.z80s:6906   .text:000019a5 bracket_defined_pfa
     solo_forth.z80s:6918   .text:000019ab bracket_undefined_
                            .data:00000dab bracket_undefined_cfap
                            .data:00000dad bracket_undefined_lfa
                            .data:00000daf bracket_undefined_nfa
     solo_forth.z80s:6918   .text:000019ad bracket_undefined_pfa
                            .data:00000dbb tick_cfap
                            .data:00000dbd tick_lfa
                            .data:00000dbf tick_nfa
     solo_forth.z80s:6930   .text:000019b5 tick_pfa
     solo_forth.z80s:6942   .text:000019bb bracket_tick_
                            .data:00000dc1 bracket_tick_cfap
                            .data:00000dc3 bracket_tick_lfa
                            .data:00000dc5 bracket_tick_nfa
     solo_forth.z80s:6942   .text:000019bd bracket_tick_pfa
     solo_forth.z80s:6954   .text:000019c3 begin_
                            .data:00000dc9 begin_cfap
                            .data:00000dcb begin_lfa
                            .data:00000dcd begin_nfa
     solo_forth.z80s:6954   .text:000019c5 begin_pfa
     solo_forth.z80s:6974   .text:000019cd then_
                            .data:00000dd3 then_cfap
                            .data:00000dd5 then_lfa
                            .data:00000dd7 then_nfa
     solo_forth.z80s:6974   .text:000019cf then_pfa
     solo_forth.z80s:6992   .text:000019d9 do_
                            .data:00000ddc do_cfap
                            .data:00000dde do_lfa
                            .data:00000de0 do_nfa
     solo_forth.z80s:6992   .text:000019db do_pfa
     solo_forth.z80s:6995   .text:000019df do.common
GAS LISTING solo_forth.z80s 			page 184


     solo_forth.z80s:7003   .text:000019e6 loop_
                            .data:00000de3 loop_cfap
                            .data:00000de5 loop_lfa
                            .data:00000de7 loop_nfa
     solo_forth.z80s:7003   .text:000019e8 loop_pfa
     solo_forth.z80s:7014   .text:000019f5 plus_loop_
                            .data:00000dec plus_loop_cfap
                            .data:00000dee plus_loop_lfa
                            .data:00000df0 plus_loop_nfa
     solo_forth.z80s:7014   .text:000019f7 plus_loop_pfa
     solo_forth.z80s:7025   .text:00001a04 until_
                            .data:00000df6 until_cfap
                            .data:00000df8 until_lfa
                            .data:00000dfa until_nfa
     solo_forth.z80s:7025   .text:00001a06 until_pfa
     solo_forth.z80s:7035   .text:00001a12 again_
                            .data:00000e00 again_cfap
                            .data:00000e02 again_lfa
                            .data:00000e04 again_nfa
     solo_forth.z80s:7035   .text:00001a14 again_pfa
     solo_forth.z80s:7054   .text:00001a20 repeat_
                            .data:00000e0a repeat_cfap
                            .data:00000e0c repeat_lfa
                            .data:00000e0e repeat_nfa
     solo_forth.z80s:7054   .text:00001a22 repeat_pfa
     solo_forth.z80s:7079   .text:00001a2c if_
                            .data:00000e15 if_cfap
                            .data:00000e17 if_lfa
                            .data:00000e19 if_nfa
     solo_forth.z80s:7079   .text:00001a2e if_pfa
     solo_forth.z80s:7082   .text:00001a32 if.do
     solo_forth.z80s:7090   .text:00001a38 unless_
                            .data:00000e1c unless_cfap
                            .data:00000e1e unless_lfa
                            .data:00000e20 unless_nfa
     solo_forth.z80s:7090   .text:00001a3a unless_pfa
     solo_forth.z80s:7104   .text:00001a42 ahead_
                            .data:00000e27 ahead_cfap
                            .data:00000e29 ahead_lfa
                            .data:00000e2b ahead_nfa
     solo_forth.z80s:7104   .text:00001a44 ahead_pfa
     solo_forth.z80s:7110   .text:00001a4a else_
                            .data:00000e31 else_cfap
                            .data:00000e33 else_lfa
                            .data:00000e35 else_nfa
     solo_forth.z80s:7110   .text:00001a4c else_pfa
     solo_forth.z80s:7138   .text:00001a60 while_
                            .data:00000e3a while_cfap
                            .data:00000e3c while_lfa
                            .data:00000e3e while_nfa
     solo_forth.z80s:7138   .text:00001a62 while_pfa
     solo_forth.z80s:7146   .text:00001a66 spaces_
                            .data:00000e44 spaces_cfap
                            .data:00000e46 spaces_lfa
                            .data:00000e48 spaces_nfa
     solo_forth.z80s:7146   .text:00001a68 spaces_pfa
     solo_forth.z80s:7152   .text:00001a6e emits_
GAS LISTING solo_forth.z80s 			page 185


                            .data:00000e4f emits_cfap
                            .data:00000e51 emits_lfa
                            .data:00000e53 emits_nfa
     solo_forth.z80s:7152   .text:00001a70 emits_pfa
     solo_forth.z80s:7164   .text:00001a88 emits_.end
     solo_forth.z80s:7161   .text:00001a80 emits_.do
     solo_forth.z80s:7169   .text:00001a8c less_hash_
                            .data:00000e59 less_hash_cfap
                            .data:00000e5b less_hash_lfa
                            .data:00000e5d less_hash_nfa
     solo_forth.z80s:7169   .text:00001a8e less_hash_pfa
     solo_forth.z80s:7177   .text:00001a96 hash_greater_
                            .data:00000e60 hash_greater_cfap
                            .data:00000e62 hash_greater_lfa
                            .data:00000e64 hash_greater_nfa
     solo_forth.z80s:7177   .text:00001a98 hash_greater_pfa
     solo_forth.z80s:7188   .text:00001aa8 sign_
                            .data:00000e67 sign_cfap
                            .data:00000e69 sign_lfa
                            .data:00000e6b sign_nfa
     solo_forth.z80s:7188   .text:00001aaa sign_pfa
     solo_forth.z80s:7207   .text:00001ab7 sign.end
     solo_forth.z80s:7211   .text:00001ab9 hash_
                            .data:00000e70 hash_cfap
                            .data:00000e72 hash_lfa
                            .data:00000e74 hash_nfa
     solo_forth.z80s:7211   .text:00001abb hash_pfa
     solo_forth.z80s:7233   .text:00001ad3 hash.digit
     solo_forth.z80s:7242   .text:00001adc hash_s_
                            .data:00000e76 hash_s_cfap
                            .data:00000e78 hash_s_lfa
                            .data:00000e7a hash_s_nfa
     solo_forth.z80s:7242   .text:00001ade hash_s_pfa
     solo_forth.z80s:7250   .text:00001ade hash_s.begin
     solo_forth.z80s:7256   .text:00001aea d_dot_r_
                            .data:00000e7d d_dot_r_cfap
                            .data:00000e7f d_dot_r_lfa
                            .data:00000e81 d_dot_r_nfa
     solo_forth.z80s:7256   .text:00001aec d_dot_r_pfa
     solo_forth.z80s:7283   .text:00001b08 dot_r_
                            .data:00000e85 dot_r_cfap
                            .data:00000e87 dot_r_lfa
                            .data:00000e89 dot_r_nfa
     solo_forth.z80s:7283   .text:00001b0a dot_r_pfa
     solo_forth.z80s:7289   .text:00001b14 d_dot_
                            .data:00000e8c d_dot_cfap
                            .data:00000e8e d_dot_lfa
                            .data:00000e90 d_dot_nfa
     solo_forth.z80s:7289   .text:00001b16 d_dot_pfa
                            .data:00000e93 dot_cfap
                            .data:00000e95 dot_lfa
                            .data:00000e97 dot_nfa
     solo_forth.z80s:7304   .text:00001b20 dot_pfa
     solo_forth.z80s:7319   .text:00001b26 question_
                            .data:00000e99 question_cfap
                            .data:00000e9b question_lfa
                            .data:00000e9d question_nfa
GAS LISTING solo_forth.z80s 			page 186


     solo_forth.z80s:7319   .text:00001b28 question_pfa
                            .data:00000e9f u_dot_cfap
                            .data:00000ea1 u_dot_lfa
                            .data:00000ea3 u_dot_nfa
     solo_forth.z80s:7325   .text:00001b30 u_dot_pfa
     solo_forth.z80s:7334   .text:00001b36 dot_s_
                            .data:00000ea6 dot_s_cfap
                            .data:00000ea8 dot_s_lfa
                            .data:00000eaa dot_s_nfa
     solo_forth.z80s:7334   .text:00001b38 dot_s_pfa
     solo_forth.z80s:7352   .text:00001b70 dot_s.end
     solo_forth.z80s:7348   .text:00001b62 dot_s.do
                            .data:00000ead colors0_cfap
                            .data:00000eaf colors0_lfa
                            .data:00000eb1 colors0_nfa
     solo_forth.z80s:7358   .text:00001b74 colors0_pfa
     solo_forth.z80s:7397   .text:00001b89 home_
                            .data:00000eb9 home_cfap
                            .data:00000ebb home_lfa
                            .data:00000ebd home_nfa
     solo_forth.z80s:7397   .text:00001b8b home_pfa
     solo_forth.z80s:7414   .text:00001b93 cls_
                            .data:00000ec2 cls_cfap
                            .data:00000ec4 cls_lfa
                            .data:00000ec6 cls_nfa
     solo_forth.z80s:7414   .text:00001b95 cls_pfa
                            .data:00000eca page_cfap
                            .data:00000ecc page_lfa
                            .data:00000ece page_nfa
     solo_forth.z80s:7450   .text:00001bb8 page_pfa
     solo_forth.z80s:7468   .text:00001bbc bye_
                            .data:00000ed3 bye_cfap
                            .data:00000ed5 bye_lfa
                            .data:00000ed7 bye_nfa
     solo_forth.z80s:7468   .text:00001bbe bye_pfa
                            .data:00000edb two_drop_cfap
                            .data:00000edd two_drop_lfa
                            .data:00000edf two_drop_nfa
     solo_forth.z80s:7483   .text:00001bc9 two_drop_pfa
     solo_forth.z80s:7490   .text:00001bcd two_swap_
                            .data:00000ee5 two_swap_cfap
                            .data:00000ee7 two_swap_lfa
                            .data:00000ee9 two_swap_nfa
     solo_forth.z80s:7490   .text:00001bcf two_swap_pfa
                            .data:00000eef unused_cfap
                            .data:00000ef1 unused_lfa
                            .data:00000ef3 unused_nfa
     solo_forth.z80s:7511   .text:00001be4 unused_pfa
     solo_forth.z80s:7518   .text:00001bec where_
                            .data:00000efa where_cfap
                            .data:00000efc where_lfa
                            .data:00000efe where_nfa
     solo_forth.z80s:7518   .text:00001bee where_pfa
     solo_forth.z80s:7528   .text:00001bfc where.do_it
     solo_forth.z80s:7534   .text:00001c0a where.string_1_end
     solo_forth.z80s:7545   .text:00001c35 at_xy
                            .data:00000f04 at_xycfap
GAS LISTING solo_forth.z80s 			page 187


                            .data:00000f06 at_xylfa
                            .data:00000f08 at_xynfa
     solo_forth.z80s:7545   .text:00001c37 at_xypfa
     solo_forth.z80s:7567   .text:00001c4e at_pfa.last_line
     solo_forth.z80s:7581   .text:00001c73 border_
                            .data:00000f0e border_cfap
                            .data:00000f10 border_lfa
                            .data:00000f12 border_nfa
     solo_forth.z80s:7581   .text:00001c75 border_pfa
     solo_forth.z80s:7604   .text:00001c80 border.end
     solo_forth.z80s:7614   .text:00001c89 overwrite_
                            .data:00000f19 overwrite_cfap
                            .data:00000f1b overwrite_lfa
                            .data:00000f1d overwrite_nfa
     solo_forth.z80s:7614   .text:00001c8b overwrite_pfa
     solo_forth.z80s:7648   .text:00001cb0 color
     solo_forth.z80s:7620   .text:00001c90 flash_
                            .data:00000f27 flash_cfap
                            .data:00000f29 flash_lfa
                            .data:00000f2b flash_nfa
     solo_forth.z80s:7620   .text:00001c92 flash_pfa
     solo_forth.z80s:7626   .text:00001c97 inverse_
                            .data:00000f31 inverse_cfap
                            .data:00000f33 inverse_lfa
                            .data:00000f35 inverse_nfa
     solo_forth.z80s:7626   .text:00001c99 inverse_pfa
     solo_forth.z80s:7632   .text:00001c9e bright_
                            .data:00000f3d bright_cfap
                            .data:00000f3f bright_lfa
                            .data:00000f41 bright_nfa
     solo_forth.z80s:7632   .text:00001ca0 bright_pfa
     solo_forth.z80s:7638   .text:00001ca5 paper_
                            .data:00000f48 paper_cfap
                            .data:00000f4a paper_lfa
                            .data:00000f4c paper_nfa
     solo_forth.z80s:7638   .text:00001ca7 paper_pfa
     solo_forth.z80s:7644   .text:00001cac ink_
                            .data:00000f52 ink_cfap
                            .data:00000f54 ink_lfa
                            .data:00000f56 ink_nfa
     solo_forth.z80s:7644   .text:00001cae ink_pfa
     solo_forth.z80s:7662   .text:00001cb9 emitted_
                            .data:00000f5a emitted_cfap
                            .data:00000f5c emitted_lfa
                            .data:00000f5e emitted_nfa
     solo_forth.z80s:7662   .text:00001cbb emitted_pfa
     solo_forth.z80s:7767   .text:00001d0c emitted_charset_pfa
     solo_forth.z80s:7782   .text:00001d10 hash_emitted_chars_pfa
     solo_forth.z80s:7718   .text:00001cd5 emitted.do
     solo_forth.z80s:7730   .text:00001ce2 emitted.match
     solo_forth.z80s:7751   .text:00001cfa emitted.next_char
     solo_forth.z80s:7733   .text:00001ce5 emitted.scans
     solo_forth.z80s:7761   .text:00001d04 emitted.end
     solo_forth.z80s:7767   .text:00001d0a emitted_charset_
                            .data:00000f66 emitted_charset_cfap
                            .data:00000f68 emitted_charset_lfa
                            .data:00000f6a emitted_charset_nfa
GAS LISTING solo_forth.z80s 			page 188


     solo_forth.z80s:7782   .text:00001d0e hash_emitted_chars_
                            .data:00000f7a hash_emitted_chars_cfap
                            .data:00000f7c hash_emitted_chars_lfa
                            .data:00000f7e hash_emitted_chars_nfa
     solo_forth.z80s:7797   .text:00001d12 j_
                            .data:00000f8d j_cfap
                            .data:00000f8f j_lfa
                            .data:00000f91 j_nfa
     solo_forth.z80s:7797   .text:00001d14 j_pfa
     solo_forth.z80s:7813   .text:00001d1e two_constant_
                            .data:00000f93 two_constant_cfap
                            .data:00000f95 two_constant_lfa
                            .data:00000f97 two_constant_nfa
     solo_forth.z80s:7813   .text:00001d20 two_constant_pfa
     solo_forth.z80s:7823   .text:00001d29 two_variable_
     solo_forth.z80s:7817   .text:00001d24 do_two_constant
     solo_forth.z80s:7813   .data:00000fa1 two_variable_cfap
     solo_forth.z80s:7813   .data:00000fa3 two_variable_lfa
     solo_forth.z80s:7813   .data:00000fa5 two_variable_nfa
     solo_forth.z80s:7823   .text:00001d2b two_variable_pfa
     solo_forth.z80s:7848   .text:00001d35 u_dot_r_
     solo_forth.z80s:7813   .data:00000faf u_dot_r_cfap
     solo_forth.z80s:7813   .data:00000fb1 u_dot_r_lfa
     solo_forth.z80s:7813   .data:00000fb3 u_dot_r_nfa
     solo_forth.z80s:7848   .text:00001d37 u_dot_r_pfa
     solo_forth.z80s:7854   .text:00001d41 two_over_
     solo_forth.z80s:7813   .data:00000fb7 two_over_cfap
     solo_forth.z80s:7813   .data:00000fb9 two_over_lfa
     solo_forth.z80s:7813   .data:00000fbb two_over_nfa
     solo_forth.z80s:7854   .text:00001d43 two_over_pfa
     solo_forth.z80s:7813   .data:00000fc1 exit_cfap
     solo_forth.z80s:7813   .data:00000fc3 exit_lfa
     solo_forth.z80s:7813   .data:00000fc5 exit_nfa
     solo_forth.z80s:7869   .text:00001d4c exit_pfa
     solo_forth.z80s:7813   .data:00000fca question_exit_cfap
     solo_forth.z80s:7813   .data:00000fcc question_exit_lfa
     solo_forth.z80s:7813   .data:00000fce question_exit_nfa
     solo_forth.z80s:7889   .text:00001d52 question_exit_pfa
     solo_forth.z80s:7932   .text:00001d58 char_
     solo_forth.z80s:7813   .data:00000fd4 char_cfap
     solo_forth.z80s:7813   .data:00000fd6 char_lfa
     solo_forth.z80s:7813   .data:00000fd8 char_nfa
     solo_forth.z80s:7932   .text:00001d5a char_pfa
     solo_forth.z80s:7938   .text:00001d62 bracket_char_
     solo_forth.z80s:7813   .data:00000fdd bracket_char_cfap
     solo_forth.z80s:7813   .data:00000fdf bracket_char_lfa
     solo_forth.z80s:7813   .data:00000fe1 bracket_char_nfa
     solo_forth.z80s:7938   .text:00001d64 bracket_char_pfa
     solo_forth.z80s:7945   .text:00001d6a s_quote_
     solo_forth.z80s:7813   .data:00000fe8 s_quote_cfap
     solo_forth.z80s:7813   .data:00000fea s_quote_lfa
     solo_forth.z80s:7813   .data:00000fec s_quote_nfa
     solo_forth.z80s:7945   .text:00001d6c s_quote_pfa
     solo_forth.z80s:7955   .text:00001d73 question_next_screen_
     solo_forth.z80s:7813   .data:00000ff2 question_next_screen_cfap
     solo_forth.z80s:7813   .data:00000ff4 question_next_screen_lfa
     solo_forth.z80s:7955   .data:00000ff6 question_next_screen_nfa
GAS LISTING solo_forth.z80s 			page 189


     solo_forth.z80s:7955   .text:00001d75 question_next_screen_pfa
     solo_forth.z80s:7959   .text:00001d7b question_next_screen.end
     solo_forth.z80s:7967   .text:00001d7d question_backslash_
     solo_forth.z80s:7955   .data:00000ffb question_backslash_cfap
     solo_forth.z80s:7955   .data:00000ffd question_backslash_lfa
     solo_forth.z80s:7955   .data:00000fff question_backslash_nfa
     solo_forth.z80s:7967   .text:00001d7f question_backslash_pfa
     solo_forth.z80s:7980   .text:00001d85 question_backslash.end
     solo_forth.z80s:7984   .text:00001d87 backslash_
     solo_forth.z80s:7955   .data:00001003 backslash_cfap
     solo_forth.z80s:7955   .data:00001005 backslash_lfa
     solo_forth.z80s:7955   .data:00001007 backslash_nfa
     solo_forth.z80s:7984   .text:00001d89 backslash_pfa
     solo_forth.z80s:8000   .text:00001d9d dot_paren_
     solo_forth.z80s:7955   .data:0000100a dot_paren_cfap
     solo_forth.z80s:7955   .data:0000100c dot_paren_lfa
     solo_forth.z80s:7955   .data:0000100e dot_paren_nfa
     solo_forth.z80s:8000   .text:00001d9f dot_paren_pfa
     solo_forth.z80s:8013   .text:00001da8 xxx_
     solo_forth.z80s:7955   .data:00001011 xxx_cfap
     solo_forth.z80s:7955   .data:00001013 xxx_lfa
     solo_forth.z80s:7955   .data:00001015 xxx_nfa
     solo_forth.z80s:8013   .text:00001daa xxx_pfa
     solo_forth.z80s:8083   .data:00001018 data_start

NO UNDEFINED SYMBOLS
