GAS LISTING solo_forth.z80s 			page 1


 GNU assembler version 2.22 (z80-unknown-coff)
	 using BFD version (GNU Binutils) 2.22.
 options passed	: -z80 -aglhs=solo_forth.list.txt 
 input file    	: solo_forth.z80s
 output file   	: solo_forth.o
 target        	: z80-unknown-coff
 time stamp    	: 2015-08-17T20:29:40.000+0200

GAS LISTING solo_forth.z80s 			page 2


   1               	; Solo Forth
   2               	
   3               	; *******************************************************
   4               	; XXX WARNING
   5               	
   6               	; This source is being converted from Pasmo to GNU binutils.
   7               	
   8               	; *******************************************************
   9               	
  10               	; XXX TODO
  11               	;version_status:   equ 'A'
  12               	;version_branch:   equ 00
  13               	;version_release:  equ 201508171355
  14               	
  15               	; XXX TMP -- for debugging
  16               	;vr_div: equ version_release/65535
  17               	;vr_mod: equ version_release mod 65535
  18               	;vr_mod2: equ version_release - vr_div
  19               	
  20               	; A Forth system for ZX Spectrum 128K and G+DOS.
  21               	; http://programandala.net/en.program.solo_forth.html
  22               	
  23               	; Copyright (C) 2015 Marcos Cruz (programandala.net)
  24               	
  25               	; Copying and distribution of this file, with or without
  26               	; modification, are permitted in any medium without royalty
  27               	; provided the copyright notice, the aknowledgments file and
  28               	; this notice are preserved.  This file is offered as-is,
  29               	; without any warranty.
  30               	
  31               	; ==============================================================
  32               	; Acknowledgments
  33               	
  34               	; See the file <ACKNOWLEDGMENTS.adoc>.
  35               	
  36               	; ==============================================================
  37               	; History
  38               	
  39               	; See
  40               	; http://programandala.net/en.program.solo_forth.history.html
  41               	
  42               	; ==============================================================
  43               	; System description
  44               	
  45               	; ----------------------------------------------
  46               	; Forth Registers
  47               	
  48               	; Forth Z80  Forth preservation rules
  49               	; ----- ---  ------------------------
  50               	; IP    BC   Interpretive pointer.
  51               	;            Should be preserved across Forth words.
  52               	; SP    SP   Data stack pointer.
  53               	;            Should be used only as data stack across Forth words.
  54               	;            May be used within Forth words if restored before exit.
  55               	;       DE   Input only when pushhlde called. ; XXX TODO
  56               	;       HL   Input only when pushhl called. ; XXX TODO
  57               	;       IX   Address of `next`.
GAS LISTING solo_forth.z80s 			page 3


  58               	;            May be used within Forth words if restored before exit.
  59               	;       IY   Address of the ERRNR ZX Spectrum system variable.
  60               	;            May be used within Forth words if restored before exit.
  61               	
  62               	; ----------------------------------------------
  63               	; Header structure
  64               	
  65               	; The name and link fields are created in a memory bank:
  66               	
  67               	; cfap: dw cfa             ; Pointer to cfa in main memory.
  68               	; lfa:  dw nfa of the previous word
  69               	; nfa:  db length+flags    ; Bits:      76543210
  70               	                           ; Bit names: .PSLLLLL
  71               	                           ; Legend:
  72               	                           ;   P: Precedence bit.
  73               	                           ;      0 = non-immediate word
  74               	                           ;      1 = immediate word
  75               	                           ;   S: Smudge bit:
  76               	                           ;      0 = definition completed
  77               	                           ;      1 = definition not completed
  78               	                           ;   LLLLL: name length (0..31).
  79               	;       ds length          ; name
  80               	
  81               	; The code and parameter fields are created in the dictionary:
  82               	
  83               	; cfa: dw code_address
  84               	; pfa:    ...              ; data or code
  85               	
  86               	; ==============================================================
  87               	; Glossary
  88               	
  89               	; The description of Forth words is included in this source.
  90               	; The markers `doc{` and `}doc` delimitate the comments that
  91               	; form the glossary.
  92               	
  93               	; ----------------------------------------------
  94               	; Stack notation
  95               	
  96               	; XXX TODO
  97               	; XXX TODO update when true=-1
  98               	
  99               	; a        = address
 100               	; ca       = character-aligned address
 101               	
 102               	; f        = flag (false is 0; true is any other value)
 103               	; tf       = true flag (1)
 104               	; ff       = false flag (0)
 105               	; wf       = well-formed flag (false is 0; true is 1)
 106               	
 107               	; b        = 8-bit byte
 108               	; c        = 7-bit or 8-bit character
 109               	; u        = 16-bit unsigned number
 110               	; len      = 16-bit unsigned number, length of memory zone or string
 111               	; ca len   = string
 112               	; n        = 16-bit signed number
 113               	; x        = 16-bit signed or unsigned number
 114               	; d        = 32-bit signed double number
GAS LISTING solo_forth.z80s 			page 4


 115               	; ud       = 32-bit unsigned double number
 116               	; xd       = 32-bit signed or unsigned number
 117               	
 118               	; xc       = 8-bit graphic x coordinate (0..255)
 119               	; yc       = 8-bit graphic y coordinate (0..191)
 120               	; line     = 8-bit cursor line (0..23)
 121               	; col      = 8-bit cursor column (0..31)
 122               	
 123               	; cfa      = code field address
 124               	; lfa      = link field address
 125               	; nfa      = name field address
 126               	; pfa      = parameter field address
 127               	; cfap     = code field address pointer
 128               	
 129               	; orig     = address of an unresolved forward branch
 130               	; dest     = address of a backward branch target
 131               	
 132               	; cs-id    = control structure identifier
 133               	
 134               	; op       = Z80 8-bit opcode, generally a jump
 135               	; r        = Z80 8-bit register identifier
 136               	; rp       = Z80 16-bit register pair identifier
 137               	
 138               	; ----------------------------------------------
 139               	; Parsed text notation
 140               	
 141               	; XXX TODO
 142               	
 143               	; <char>          the delimiting character marking the end of the
 144               	;                 string being parsed
 145               	; <chars>         zero or more consecutive occurrences of the
 146               	;                 character char
 147               	; <space>         a delimiting space character
 148               	; <spaces>        zero or more consecutive occurrences of the
 149               	;                 character space
 150               	; <quote>         a delimiting double quote
 151               	; <paren>         a delimiting right parenthesis
 152               	; <eol>           an implied delimiter marking the end of a line
 153               	; ccc             a parsed sequence of arbitrary characters,
 154               	;                 excluding the delimiter character
 155               	; text            same as ccc
 156               	; name            a token delimited by space, equivalent to
 157               	;                 ccc<space> or ccc<eol>
 158               	
 159               	; ----------------------------------------------
 160               	; Word attributes
 161               	
 162               	; XXX TODO -- finish
 163               	
 164               	; The capital letters on the right show definition characteristics:
 165               	
 166               	; C      May only be used within a colon definition. A digit indicates number
 167               	;        of memory addresses used, if other than one. A plus sign indicates
 168               	;        a variable number of memory addresses used.
 169               	; E      Intended for execution only.
 170               	; I      Immediate. Has precedence bit set. Will execute even when compiling.
 171               	; U      A user variable.
GAS LISTING solo_forth.z80s 			page 5


 172               	
 173               	
 174               	; ==============================================================
 175               	; Sections
 176               	
 177               	  .text
 178               	
 179               	  ; XXX FIXME the binary file contains the data section right after
 180               	  ; the text section, not at 0xC000
 181               	
 182               	  .data
 183               	
 184               	  ; .offset 0xC000 ; XXX no change
 185               	
 186               	  ; XXX this creates >50 K file:
 187               	
 188               	  ; org names_bank_address
 189               	
 190               	  ; XXX when first `.data` is at the end of the file, `org 0` causes
 191               	  ; error "attempt to move org backwards", because macros already
 192               	  ; compiled into the section:
 193               	
 194               	  ; org 0
 195               	
 196               	;start_of_bank: ; XXX TMP for debugging
 197               	;  .ascii "start-of-bank" ; XXX TMP for debugging
 198 0000 00        	  db 0 ; fake length byte, needed by the algorithm used in `cfa>nfa`
 199               	
 200 0001 6A05 0000 	  .text
 200      445C 7830 
 200      3072 0505 
 200      0004 464F 
 200      5254 4878 
 201               	
 202               	  ; .offset 0x5E00 ; XXX no change
 203               	
 204               	; ==============================================================
 205               	; Configuration
 206               	
 207               	  ; XXX FIXME Pasmo gives strange errors (symbols not found)
 208               	  ; when some config flags are used in nested `if`. A literal
 209               	  ; flag (0/1) is used instead, with the flag name in a comment;
 210               	  ; it is changed with a text substitution.  Some Vim mappings
 211               	  ; are created to turn them on on an off.
 212               	
 213               	  ; XXX experimental
 214               	size_optimization: equ false
 215               	  ; true = some code pieces are more compact but slower.
 216               	  ; false = normal, faster code.
 217               	
 218               	  ; XXX TODO -- not used yet
 219               	fig_parsing: equ false
 220               	  ; true = the fig-Forth parsing method is used.
 221               	  ; false = parsing is modified after Forth-83 and ANS Forth.
 222               	
 223               	  ; XXX TODO
 224               	latin1_charset_in_bank: equ false
GAS LISTING solo_forth.z80s 			page 6


 225               	  ; true = a 224-char Latin 1 charset is stored in the memory bank.
 226               	  ; false = the default charset is used.
 227               	
 228               	ans_forth_block_size: equ false
 229               	  ; true = one 1024-byte block per screen ; XXX TODO
 230               	  ; false = two 512-byte blocks per screen
 231               	
 232               	  ; XXX TODO
 233               	; fig_exit: equ true
 234               	  ; true = fig-Forth `;s` is used
 235               	  ; false = Forth-83 and ANS Forth `exit` is used ; XXX FIXME
 236               	
 237               	  ; XXX TODO try false
 238               	  ; XXX FIXME still there are problems when compiler security is off
 239               	  ; XXX TMP 2015-08-16 Note: using 1 intead  of the label doesn't make a
 240               	  ; difference in the crash bug
 241               	;fig_compiler_security: equ true
 242               	  ; true = fig-Forth `?pairs' is used
 243               	  ; false = no checking during compilation of control
 244               	  ;   structures: smaller and faster code.
 245               	
 246               	  ; XXX TODO
 247               	show_version: equ false
 248               	
 249               	; ==============================================================
 250               	; Symbols
 251               	
 252               	; ----------------------------------------------
 253               	; Forth
 254               	
 255               	origin:                           equ 0x5E00
 256               	
 257               	false:                            equ 0
 258               	true:                             equ 1
 259               	.if true=(-1)
 260               	  ; XXX FIXME
 261               	  ; There were problems when true=-1, but it seems they have
 262               	  ; disappeared after switching to the one buffer method.
 263               	  .warning TRUE is -1
 264               	.endif
 265               	
 266               	cell:                             equ 2
 267               	
 268               	cells_per_data_stack:             equ 0x50
 269               	cells_per_return_stack:           equ 0x50
 270               	
 271               	bytes_per_terminal_input_buffer:  equ 0x50
 272               	
 273               	buffers:                          equ 0x01
 274               	
 275               	.if ans_forth_block_size
 276               	
 277               	data_bytes_per_buffer:          equ 0x0400
 278               	blocks_per_screen:              equ 0x01
 279               	
 280               	.else
 281               	
GAS LISTING solo_forth.z80s 			page 7


 282               	data_bytes_per_buffer:          equ 0x0200
 283               	blocks_per_screen:              equ 0x02
 284               	
 285               	.endif
 286               	
 287               	total_bytes_per_buffer:           equ 2+data_bytes_per_buffer+3
 288               	
 289               	screens_per_disk:                 equ 0x030C ; 780 KiB per disk in G+DOS
 290               	characters_per_line:              equ 0x40
 291               	lines_per_screen:                 equ 0x10
 292               	max_search_order:                 equ 0x08 ; maximum number of vocabularies in the search order
 293               	bytes_per_user_variables:         equ 0x40
 294               	
 295               	precedence_bit:       equ 6
 296               	precedence_bit_mask:  equ 1 << precedence_bit
 297               	smudge_bit:           equ 5
 298               	smudge_bit_mask:      equ 1 << smudge_bit
 299               	
 300               	max_word_length:                equ 0x1F
 301               	max_word_length_bit_mask:       equ max_word_length
 302               	
 303               	csb_size:                       equ 256 ; size of the circular string buffer
 304               	
 305               	; Memory banks
 306               	
 307               	default_bank: equ 0
 308               	names_bank:   equ 1
 309               	
 310               	names_bank_address: equ 0xC000 ; names pointers
 311               	
 312               	; Charset
 313               	
 314               	charset_size:     equ 224*8 ; 224 chars (0x20..0xFF) * 8 bitmap rows
 315               	charset_address:  equ 0xFFFF-charset_size+1
 316               	
 317               	; Control structure check numbers
 318               	
 319               	; XXX TODO -- not used yet
 320               	;begin_structure_check_number:   equ 1
 321               	;if_structure_check_number:      equ 2
 322               	;do_structure_check_number:      equ 3
 323               	;case_structure_check_number:    equ 4
 324               	;of_structure_check_number:      equ 5
 325               	;for_structure_check_number:     equ 6
 326               	
 327               	; Error messages are in the disk, starting from the screen
 328               	; number hold in the `msg-scr` constant.  Error codes 0, 16, 32
 329               	; etc are not used, because they coincide with the first line of
 330               	; screens.
 331               	
 332               	; XXX TODO change the order
 333               	
 334               	error.not_understood:               equ 01
 335               	error.stack_empty:                  equ 02
 336               	error.dictionary_full:              equ 03 ; not used
 337               	error.not_unique:                   equ 04
 338               	error.not_found:                    equ 05
GAS LISTING solo_forth.z80s 			page 8


 339               	error.out_of_disk_range:            equ 06
 340               	error.full_stack:                   equ 07
 341               	error.number_08:                    equ 08 ; free
 342               	error.loading_from_screen_0:        equ 09
 343               	error.number_10:                    equ 10 ; free
 344               	error.number_11:                    equ 11 ; free
 345               	error.number_12:                    equ 12 ; free
 346               	error.number_13:                    equ 13 ; free
 347               	error.number_14:                    equ 14 ; free
 348               	error.deferred_word_uninitialized:  equ 15
 349               	error.compilation_only:             equ 17
 350               	error.execution_only:               equ 18
 351               	error.conditionals_not_paired:      equ 19
 352               	error.definition_not_finished:      equ 20
 353               	error.protected_dictionary:         equ 21
 354               	error.loading_only:                 equ 22
 355               	error.off_current_editing_screen:   equ 23
 356               	error.declare_vocabulary:           equ 24
 357               	error.unsupported_tape_operation:   equ 25
 358               	error.unsupported_disk_operation:   equ 26
 359               	error.source_file_needed:           equ 27
 360               	error.not_present_though_required:  equ 28
 361               	error.required_but_not_located:     equ 29
 362               	error.branch_too_long:              equ 30
 363               	error.number_31:                    equ 31 ; free
 364               	error.number_33:                    equ 32 ; free
 365               	
 366               	; ----------------------------------------------
 367               	; Character codes
 368               	
 369               	caps_char:                  equ 0x06 ; toggle caps lock
 370               	edit_char:                  equ 0x07 ; edit
 371               	backspace_char:             equ 0x08
 372               	delete_char:                equ 0x0c ; delete (backspace)
 373               	form_feed_char:             equ 0x0c ; used for printing
 374               	carriage_return_char:       equ 0x0d
 375               	extended_mode_char:         equ 0x0e ; Fuse associates it to the host's Tab key
 376               	graphics_char:              equ 0x0f ; toggle graphics mode
 377               	ink_char:                   equ 0x10
 378               	paper_char:                 equ 0x11
 379               	flash_char:                 equ 0x12
 380               	bright_char:                equ 0x13
 381               	inverse_char:               equ 0x14
 382               	over_char:                  equ 0x15
 383               	at_char:                    equ 0x16
 384               	tab_char:                   equ 0x17 ; tab (screen only)
 385               	space_char:                 equ 0x20
 386               	
 387               	; ----------------------------------------------
 388               	; ROM  routines
 389               	
 390               	rom_chan_open:                   equ 0x1601
 391               	; rom_cl_all:                      equ 0x0DAF ; XXX OLD
 392               	rom_key_decode:                  equ 0x0333
 393               	rom_key_scan:                    equ 0x028E
 394               	rom_key_test:                    equ 0x031E
 395               	rom_set_permanent_colors_0x1CAD: equ 0x1CAD
GAS LISTING solo_forth.z80s 			page 9


 396               	
 397               	; ----------------------------------------------
 398               	; System variables
 399               	
 400               	  ; XXX FIXME Pasmo's bug?: `sys_errnr` is used as the base offset.  When it's
 401               	  ; not defined first, the compilation halts with error "offset out of
 402               	  ; range", though they are fine in the symbols file.
 403               	
 404               	sys_errnr:         equ 0x5C3A ; used as IY index by the OS
 405               	
 406               	sys_attr_p:        equ 0x5C8D
 407               	sys_attr_t:        equ 0x5C8F
 408               	sys_bankm:         equ 0x5B5C
 409               	sys_bordcr:        equ 0x5C48
 410               	sys_chars:         equ 0x5C36
 411               	sys_df_cc:         equ 0x5C84
 412               	sys_df_sz:         equ 0x5C6B
 413               	sys_df_sz_offset:  equ sys_df_sz-sys_errnr
 414               	sys_flags2:        equ 0x5C6A
 415               	sys_last_k:        equ 0x5C08
 416               	sys_last_k_offset: equ sys_last_k-sys_errnr
 417               	sys_mode:          equ 0x5C41
 418               	sys_s_posn:        equ 0x5C88
 419               	sys_scr_ct:        equ 0x5C8C
 420               	sys_scr_ct_offset: equ sys_scr_ct-sys_errnr
 421               	sys_udg:           equ 0x5C7B
 422               	
 423               	; ----------------------------------------------
 424               	; System constants
 425               	
 426               	sys_screen:                 equ 0x4000
 427               	sys_screen_size:            equ 0x1B00
 428               	sys_screen_bitmap_size:     equ 0x1800
 429               	sys_screen_attributes:      equ 0x5800
 430               	sys_screen_attributes_size: equ 0x0300
 431               	
 432               	; ----------------------------------------------
 433               	; Ports
 434               	
 435               	bank1_port:   equ 0x7FFD
 436               	border_port:  equ 0xFE
 437               	
 438               	; ==============================================================
 439               	; Macros
 440               	
 441               	; ----------------------------------------------
 442               	; Header
 443               	
 444               	immediate: equ precedence_bit_mask ; used as optional parameter
 445               	
 446               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 447               	; current_vocabulary defl forth_pfa \ XXX OLD
 448               	
 449               	_header: macro _base_label,_name,_is_immediate=0
 450               	
 451               	  ; In dictionary:
 452               	
GAS LISTING solo_forth.z80s 			page 10


 453               	  .text
 454               	
 455               	\_base_label: ; code field address
 456               	  ; local _dp_backup ; XXX OLD
 457               	  ; local _name_address ; XXX OLD
 458               	  ; local _address_after_name ; XXX OLD
 459               	;_dp_backup defl $ ; XXX OLD
 460               	
 461               	  ; In memory bank:
 462               	
 463               	;.org np ; XXX OLD
 464               	  .data
 465               	
 466               	\_base_label\()cfap: 
 467               	    dw \_base_label ; code field address pointer
 468               	\_base_label\()lfa: ; link field address
 469               	    dw nfa_of_the_previous_word ; link field
 470               	\_base_label\()nfa: ; name field address
 471               	
 472               	  ; Length byte with optional precedence bit:
 473               	  db _address_after_name-_name_address+\_is_immediate
 474               	
 475               	_name_address defl $
 476               	  db "\_name" ; name field
 477               	_address_after_name defl $
 478               	np defl $ ; new value of the names pointer
 479               	
 480               	  ; Update the names pointer:
 481               	  ; XXX OLD
 482               	  ; XXX TODO
 483               	;  .org names_pointer
 484               	;  dw np ; overwrite names_pointer
 485               	;  dw np ; overwrite names_pointer_init_value
 486               	
 487               	  ; In dictionary:
 488               	;  org _dp_backup ; XXX OLD
 489               	  .text
 490               	
 491               	nfa_of_the_previous_word defl \_base_label\()nfa
 492               	
 493               	  endm
 494               	
 495               	_code_header: macro _base_label,_name,_is_immediate=0
 496               	
 497               	  _header \_base_label,"\_name",\_is_immediate
 498               	  dw \_base_label\()pfa ; code field
 499               	  \_base_label\()pfa: ; parameter field address
 500               	
 501               	  endm
 502               	
 503               	_code_alias_header: macro _base_label,_name,_is_immediate=0,_alias
 504               	
 505               	  _header \_base_label,"\_name",\_is_immediate
 506               	  dw \_alias\()pfa ; code field
 507               	
 508               	  endm
 509               	
GAS LISTING solo_forth.z80s 			page 11


 510               	_colon_header: macro _base_label,_name,_is_immediate=0
 511               	
 512               	  _header \_base_label,"\_name",\_is_immediate
 513               	  dw do_colon ; code field
 514               	  \_base_label\()pfa: ; parameter field address
 515               	
 516               	  endm
 517               	
 518               	_user_variable_header: macro _base_label,_name,_is_immediate=0
 519               	
 520               	  _header \_base_label,"\_name",\_is_immediate
 521               	  dw do_user ; code field
 522               	  \_base_label\()pfa: ; parameter field address
 523               	
 524               	  endm
 525               	
 526               	_does_header: macro _base_label,_name,_is_immediate=0,_runtime_routine
 527               	
 528               	  _header \_base_label,"\_name",\_is_immediate
 529               	
 530               	  dw \_runtime_routine ; code field
 531               	  \_base_label\()pfa: ; parameter field address
 532               	
 533               	  endm
 534               	
 535               	_constant_header: macro _base_label,_name,_is_immediate=0
 536               	
 537               	  _header \_base_label,"\_name",\_is_immediate
 538               	  dw do_constant ; code field
 539               	  \_base_label\()pfa: ; parameter field address
 540               	
 541               	  endm
 542               	
 543               	_variable_header: macro _base_label,_name,_is_immediate=0
 544               	
 545               	  _header \_base_label,"\_name",\_is_immediate
 546               	  dw do_create ; code field
 547               	  \_base_label\()pfa: ; parameter field address
 548               	
 549               	  endm
 550               	
 551               	_two_variable_header: macro _base_label,_name,_is_immediate=0
 552               	
 553               	  _variable_header \_base_label,"\_name",\_is_immediate
 554               	
 555               	  endm
 556               	
 557               	; ----------------------------------------------
 558               	; Literals
 559               	
 560               	_string: macro _text
 561               	
 562               	  ; _string_first ; address of the first char of the name
 563               	  ; _string_next  ; address after the last char of the name
 564               	  db _string_next-_string_first ; length byte
 565               	_string_first defl $
 566               	  db "\_text"
GAS LISTING solo_forth.z80s 			page 12


 567               	_string_next defl $
 568               	
 569               	endm
 570               	
 571               	_literal: macro _n
 572               	
 573               	  ; Note: parenthesis are needed to prevent a strange problem of
 574               	  ; Pasmo with signs.
 575               	
 576               	  .if \_n==0
 577               	    dw zero_
 578               	  .elseif \_n==1
 579               	    dw one_
 580               	  .elseif \_n==2
 581               	    dw two_
 582               	  .elseif \_n>=0 && \_n<=255
 583               	    dw c_lit_
 584               	    db \_n
 585               	  .else
 586               	    dw lit_
 587               	    dw \_n
 588               	  .endif
 589               	  endm
 590               	
 591               	; ----------------------------------------------
 592               	; Jumps
 593               	
 594               	_jp_next: macro
 595               	
 596               	  jp (ix)
 597               	
 598               	  endm
 599               	
 600               	; Create relative or absolute jumps, depending on the configured optimization
 601               	
 602               	_jump: macro _address
 603               	  .if size_optimization
 604               	    jr \_address
 605               	  .else
 606               	    jp \_address
 607               	  .endif
 608               	  endm
 609               	
 610               	_jump_nc: macro _address
 611               	  .if size_optimization
 612               	    jr nc,\_address
 613               	  .else
 614               	    jp nc,\_address
 615               	  .endif
 616               	  endm
 617               	
 618               	_jump_z: macro _address
 619               	  .if size_optimization
 620               	    jr z,\_address
 621               	  .else
 622               	    jp z,\_address
 623               	  .endif
GAS LISTING solo_forth.z80s 			page 13


 624               	  endm
 625               	
 626               	; ----------------------------------------------
 627               	; Bank
 628               	
 629               	_bank: macro _n
 630               	  _literal \_n
 631               	  dw bank_
 632               	  endm
 633               	
 634               	_names_bank: macro
 635               	  _bank names_bank
 636               	  endm
 637               	
 638               	_default_bank: macro
 639               	  _bank default_bank
 640               	  endm
 641               	
 642               	; ----------------------------------------------
 643               	; Error messages
 644               	
 645               	_question_error: macro _error
 646               	  _literal \_error
 647               	  dw question_error_
 648               	  endm
 649               	
 650               	_message: macro _error
 651               	  _literal \_error
 652               	  dw message_
 653               	  endm
 654               	
 655               	; ----------------------------------------------
 656               	; Debug
 657               	
 658               	_z80_border: macro _color
 659               	  push af
 660               	  push bc
 661               	  ld a,\_color
 662               	  out (border_port),a
 663               	  ld bc,0
 664               	  _z80_border_pause0:
 665               	  dec bc
 666               	  ld a,b
 667               	  or c
 668               	  jr nz,_z80_border_pause0
 669               	  pop bc
 670               	  pop af
 671               	  endm
 672               	
 673               	_z80_border_wait: macro _color
 674               	  push af
 675               	  ld a,\_color
 676               	  out (border_port),a
 677               	  xor a
 678               	  ld (sys_last_k),a
 679               	  _z80_border_wait_pause:
 680               	  ld a,(sys_last_k)
GAS LISTING solo_forth.z80s 			page 14


 681               	  and a
 682               	  jr z,_z80_border_wait_pause
 683               	  pop af
 684               	  endm
 685               	
 686               	_echo: macro _txt
 687               	  dw cr_,paren_dot_quote_
 688               	  _string "\_txt"
 689               	  endm
 690               	
 691               	; ==============================================================
 692               	; Entry points
 693               	
 694               	  .text ; section
 695               	
 696               	  ;org origin ; XXX OLD
 697               	
 698               	cold_entry:
 699               	  ; Location (of the destination address): `0x01 +origin`
 700 0000 C384 16   	  jp cold_start
 701               	warm_entry:
 702               	  ; Location (of the destination address): `0x04 +origin`
 703 0003 C377 16   	  jp warm_start
 704               	
 705               	; ==============================================================
 706               	; Parameter area
 707               	
 708               	  ; XXX TODO document the `+origin` index
 709               	
 710               	latest_nfa_in_root_voc.init_value:
 711 0006 1800      	  dw latest_nfa_in_root_voc
 712               	
 713               	latest_nfa_in_forth_voc.init_value:
 714 0008 0F10      	  dw latest_nfa_in_forth_voc
 715               	
 716               	latest_nfa_in_assembler_voc.init_value:
 717 000a A400      	  dw latest_nfa_in_assembler_voc
 718               	
 719               	voc_link.init_value:
 720 000c 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 721               	
 722               	user_variables_pointer:
 723 000e 3200      	  dw user_variables
 724               	
 725               	return_stack_pointer:
 726 0010 0703      	  dw return_stack_bottom
 727               	
 728               	default_color_attribute:
 729 0012 0400      	  dw 4 ; low byte: green paper, black ink; high byte: no mask
 730               	
 731               	  ; XXX TODO
 732               	.if show_version
 733               	version_status_variable:
 734               	  dw version_status
 735               	version_branch_variable:
 736               	  dw version_branch
 737               	version_release_variable:
GAS LISTING solo_forth.z80s 			page 15


 738               	  dw version_release mod 0xFFFF
 739               	  dw version_release / 0xFFFF
 740               	.endif
 741               	
 742               	  ; User variables default values
 743               	
 744               	  ; The first eight user variables have default values.  They are used
 745               	  ; by `cold` to overwrite the correspondent user variables.  They must
 746               	  ; be in the same order than user variables.
 747               	
 748               	default_user_variables_start:
 749               	
 750               	s0_init_value:
 751 0014 1402      	  dw data_stack_bottom
 752               	r0_init_value:
 753 0016 0703      	  dw return_stack_bottom
 754 0018 0000      	  dw 0x0000 ; XXX OLD -- tib
 755               	width_init_value:
 756 001a 1F00      	  dw max_word_length
 757               	warning_init_value:
 758 001c 0000      	  dw 0x0000
 759 001e 0000      	  dw 0x0000 ; XXX OLD -- fence
 760               	dp_init_value:
 761 0020 861D      	  dw dictionary_pointer_after_cold
 762               	
 763               	  ; XXX TODO move
 764 0022 0000      	  dw 0x0000 ; XXX free
 765               	
 766               	  ; XXX TODO this four user variables do not need init and this
 767               	  ; space could be saved; they are included here because `#tib`
 768               	  ; must be init; it should be moved to user variable +0x10.
 769               	
 770               	blk_init_value:
 771 0024 0000      	  dw 0x0000
 772               	in_init_value:
 773 0026 0000      	  dw 0x0000
 774               	out_init_value:
 775 0028 0000      	  dw 0x0000
 776               	scr_init_value:
 777 002a 0000      	  dw 0x0000
 778               	
 779               	; XXX OLD
 780               	;number_tib_init_value:
 781               	;  dw bytes_per_terminal_input_buffer
 782               	
 783               	default_user_variables_end:
 784               	
 785               	ip_backup: ; temporary copy of Forth IP
 786 002c 0000      	  dw 0
 787               	
 788               	np defl names_bank_address+1
 789               	
 790               	  ; XXX TODO how to update the names pointer in the `_header` macro?
 791               	  ; Pasmo can use `org` to go backward, but as can not.
 792               	
 793               	names_pointer:
 794               	  ; First free address in the names bank,  restored by `cold`.
GAS LISTING solo_forth.z80s 			page 16


 795               	  ; The value is updated during the assembling,
 796               	  ; by the `_header` macro.
 797 002e 01C0      	  dw np
 798               	
 799               	names_pointer_init_value:
 800               	  ; Init value of the names pointer, used by `cold`.
 801               	  ; The value is updated during the assembling,
 802               	  ; by the `_header` macro.
 803 0030 01C0      	  dw np
 804               	
 805               	; ==============================================================
 806               	; User variables
 807               	
 808               	user_variables:
 809               	
 810               	  ; Note: the first eight user variables are initialized with
 811               	  ; default values by `cold`.  They must be in the same order
 812               	  ; than their default variables.
 813               	
 814               	s0_value: ; +0x00
 815 0032 1402      	  dw data_stack_bottom
 816               	r0_value: ; +0x02
 817 0034 0703      	  dw return_stack_bottom
 818               	  ; +0x04
 819 0036 0000      	  dw 0x0000 ; XXX OLD -- tib
 820               	width_value: ; +0x06
 821 0038 1F00      	  dw max_word_length
 822               	warning_value: ; +0x08
 823 003a 0000      	  dw 0x0000
 824               	  ; +0x0A
 825 003c 0000      	  dw 0x0000 ; XXX OLD -- fence
 826               	dp_value: ; +0x0C
 827 003e 861D      	  dw dictionary_pointer_after_cold
 828               	
 829               	  ; XXX TODO move
 830 0040 0000      	  dw 0x0000 ; +0x0E free
 831               	
 832               	blk_value: ; +0x10
 833 0042 0000      	  dw 0x0000
 834               	in_value: ; +0x12
 835 0044 0000      	  dw 0x0000
 836               	out_value: ; +0x14
 837 0046 0000      	  dw 0x0000
 838               	scr_value: ; +0x16
 839 0048 0000      	  dw 0x0000
 840               	number_tib_value: ; +0x18
 841 004a 0000      	  dw 0x0000
 842               	hld_value: ; +0x1A
 843 004c 0000      	  dw 0x0000
 844               	current_value: ; +0x1C
 845 004e 0000      	  dw 0x0000
 846               	state_value: ; +0x1E
 847 0050 0000      	  dw 0x0000
 848               	base_value: ; +0x20
 849 0052 0A00      	  dw 0x000A
 850               	dpl_value: ; +0x22
 851 0054 0000      	  dw 0x0000
GAS LISTING solo_forth.z80s 			page 17


 852               	fld_value: ; +0x24
 853 0056 0000      	  dw 0x0000
 854               	csp_value: ; +0x26
 855 0058 0000      	  dw 0x0000
 856               	r_hash_value: ; +0x28 ; XXX OLD -- used by the editor, remove
 857 005a 0000      	  dw 0x0000
 858               	
 859               	context_value: ; +0x2A..+0x38
 860               	
 861 005c 5506      	  dw forth_pfa
 862 005e 4F06      	  dw root_pfa
 863 0060 0000 0000 	  ds (max_search_order-2)*cell
 863      0000 0000 
 863      0000 0000 
 864 006c 0000      	  dw 0x0000 ; end of search order, required by `find` \ XXX TODO improve and remove
 865               	
 866               	  ; Unused
 867 006e 0000      	  dw 0x0000
 868 0070 0000      	  dw 0x0000
 869               	
 870               	.if ($-user_variables) != bytes_per_user_variables
 871               	  .error "The space reserved for user variables is wrong."
 872               	.endif
 873               	
 874               	; ==============================================================
 875               	; Stacks and buffers
 876               	
 877               	; ----------------------------------------------
 878               	; Circular string buffer
 879               	
 880               	csb:
 881               	unused_csb:
 882 0072 0001      	  dw csb_size ; unused space in the buffer
 883               	csb0:
 884 0074 0000 0000 	  ds csb_size
 884      0000 0000 
 884      0000 0000 
 884      0000 0000 
 884      0000 0000 
 885               	csb_total_size: equ $-csb
 886               	
 887               	; ----------------------------------------------
 888               	; Data stack
 889               	
 890               	data_stack_limit: equ $+cell
 891 0174 0000 0000 	  ds cells_per_data_stack*cell
 891      0000 0000 
 891      0000 0000 
 891      0000 0000 
 891      0000 0000 
 892               	data_stack_bottom:
 893               	
 894               	; ----------------------------------------------
 895               	; Terminal input buffer
 896               	
 897               	terminal_input_buffer:
 898 0214 0000 0000 	  ds bytes_per_terminal_input_buffer
GAS LISTING solo_forth.z80s 			page 18


 898      0000 0000 
 898      0000 0000 
 898      0000 0000 
 898      0000 0000 
 899 0264 0000 00   	  ds 3 ; for the null word
 900               	
 901               	; ----------------------------------------------
 902               	; Return stack
 903               	
 904               	return_stack_limit: equ $+cell
 905 0267 0000 0000 	  ds cells_per_return_stack*cell
 905      0000 0000 
 905      0000 0000 
 905      0000 0000 
 905      0000 0000 
 906               	return_stack_bottom:
 907               	
 908               	; ----------------------------------------------
 909               	; Disk buffer
 910               	
 911               	buffer_block_id_mask: equ 0x7FFF
 912               	
 913               	; A block id is the number of the associated block, with the
 914               	; sign bit indicating, when it's set, that the buffer has been
 915               	; modified.
 916               	
 917               	disk_buffer:
 918               	
 919 0307 FF7F      	dw buffer_block_id_mask     ; Block id used when the  buffer
 920               	                            ; is not associated with a block.
 921 0309 0000 0000 	ds data_bytes_per_buffer    ; Actual content of the block,
 921      0000 0000 
 921      0000 0000 
 921      0000 0000 
 921      0000 0000 
 922               	                            ; a disk sector.
 923 0509 2000 20   	db space_char,0,space_char  ; Null word, required by the parsing words.
 924               	
 925               	; ==============================================================
 926               	; Misc routines
 927               	
 928               	; [Code from DZX-Forth.]
 929               	
 930               	; ----------------------------------------------
 931               	; Compare de and hl
 932               	
 933               	compare_de_hl_unsigned:
 934               	
 935               	  ; Input:  de, hl
 936               	  ; Output:
 937               	  ;  flag C if hl < de
 938               	  ;  flag Z if hl = de
 939               	
 940 050c 7C        	  ld a,h
 941 050d BA        	  cp d
 942 050e C0        	  ret nz
 943 050f 7D        	  ld a,l
GAS LISTING solo_forth.z80s 			page 19


 944 0510 BB        	  cp e
 945 0511 C9        	  ret
 946               	
 947               	compare_de_hl_signed:
 948               	
 949               	  ; Input:  de, hl
 950               	  ; Output: flag C if hl < de
 951               	
 952 0512 7C        	  ld a,h
 953 0513 AA        	  xor d
 954 0514 F20C 05   	  jp p,compare_de_hl_unsigned
 955 0517 7C        	  ld a,h
 956 0518 B7        	  or a
 957 0519 F0        	  ret p
 958 051a 37        	  scf
 959 051b C9        	  ret
 960               	
 961               	; ----------------------------------------------
 962               	; Move block
 963               	
 964               	move_block:
 965               	
 966               	  ; Input:
 967               	  ; hl = source
 968               	  ; de = destination
 969               	  ; bc = count
 970               	
 971               	  ; If bc is greater than zero, copy the contents of bc consecutive address
 972               	  ; units at hl to the bc consecutive address units at de. After the move
 973               	  ; completes, the bc consecutive address units at de contain exactly what the
 974               	  ; bc consecutive address units at hl contained before the move.
 975               	
 976 051c CD0C 05   	  call compare_de_hl_unsigned
 977 051f DA28 05   	  jp c,move_block_downwards
 978               	
 979               	; ----------------------------------------------
 980               	; Move block upwards
 981               	
 982               	move_block_upwards:
 983               	
 984               	  ; Input:
 985               	  ; hl = source
 986               	  ; de = destination
 987               	  ; bc = count
 988               	
 989               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 990               	  ; space starting at hl to that starting at de, proceeding
 991               	  ; character-by-character from lower addresses to higher addresses.
 992               	
 993 0522 79        	  ld a,c
 994 0523 B0        	  or b
 995 0524 C8        	  ret z
 996 0525 EDB0      	  ldir
 997 0527 C9        	  ret
 998               	
 999               	; ----------------------------------------------
 1000               	; Move block downwards
GAS LISTING solo_forth.z80s 			page 20


 1001               	
 1002               	  ; Input:
 1003               	  ; hl = source
 1004               	  ; de = destination
 1005               	  ; bc = count
 1006               	
 1007               	  ; If bc is greater than zero, copy bc consecutive characters from the data
 1008               	  ; space starting at hl to that starting at de, proceeding
 1009               	  ; character-by-character from higher addresses to lower addresses.
 1010               	
 1011               	move_block_downwards:
 1012               	
 1013 0528 79        	  ld a,c
 1014 0529 B0        	  or b
 1015 052a C8        	  ret z
 1016 052b 09        	  add hl,bc
 1017 052c 2B        	  dec hl
 1018 052d EB        	  ex de,hl
 1019 052e 09        	  add hl,bc
 1020 052f 2B        	  dec hl
 1021 0530 EB        	  ex de,hl
 1022 0531 EDB8      	  lddr
 1023 0533 C9        	  ret
 1024               	
 1025               	; ----------------------------------------------
 1026               	; Multiplication primitives
 1027               	
 1028               	; AHL <- A * DE
 1029               	
 1030               	a_multiplied_by_de_to_ahl:
 1031 0534 2100 00   	  ld hl,0
 1032 0537 0E08      	  ld c,8
 1033               	a_multiplied_by_de_to_ahl.1:
 1034 0539 29        	  add hl,hl
 1035 053a 17        	  rla
 1036 053b D241 05   	  jp nc,a_multiplied_by_de_to_ahl.2
 1037 053e 19        	  add hl,de
 1038 053f CE00      	  adc a,0
 1039               	a_multiplied_by_de_to_ahl.2:
 1040 0541 0D        	  dec c
 1041 0542 C239 05   	  jp nz,a_multiplied_by_de_to_ahl.1
 1042 0545 C9        	  ret
 1043               	
 1044               	; Unsigned 16*16 multiply, 32-bit result
 1045               	
 1046               	; HLDE <- HL * DE
 1047               	
 1048               	hl_multiplied_by_de_to_hlde_unsigned:
 1049 0546 C5        	  push bc ; save Forth IP
 1050 0547 44        	  ld b,h
 1051 0548 7D        	  ld a,l
 1052 0549 CD34 05   	  call a_multiplied_by_de_to_ahl
 1053 054c E5        	  push hl
 1054 054d 67        	  ld h,a
 1055 054e 78        	  ld a,b
 1056 054f 44        	  ld b,h
 1057 0550 CD34 05   	  call a_multiplied_by_de_to_ahl
GAS LISTING solo_forth.z80s 			page 21


 1058 0553 D1        	  pop de
 1059 0554 4A        	  ld c,d
 1060 0555 09        	  add hl,bc
 1061 0556 CE00      	  adc a,0
 1062 0558 55        	  ld d,l
 1063 0559 6C        	  ld l,h
 1064 055a 67        	  ld h,a
 1065 055b C1        	  pop bc ; restore Forth IP
 1066 055c C9        	  ret
 1067               	
 1068               	; ==============================================================
 1069               	; :Inner interpreter
 1070               	
 1071               	push_hlde:
 1072 055d D5        	  push de
 1073               	
 1074               	push_hl:
 1075 055e E5        	  push hl
 1076               	
 1077               	next:
 1078               	  ; Execute the word whose cfa is in the address pointed by the bc register.
 1079               	  ; Forth: W  <-- (IP)
 1080               	  ; Z80:   hl <-- (bc)
 1081 055f 0A        	  ld a,(bc)
 1082 0560 6F        	  ld l,a
 1083 0561 03        	  inc bc ; inc IP
 1084 0562 0A        	  ld a,(bc)
 1085 0563 67        	  ld h,a
 1086 0564 03        	  inc bc ; inc IP
 1087               	  ; bc = address of the next cfa
 1088               	  ; hl = cfa
 1089               	
 1090               	next2:
 1091               	  ; Execute the word whose cfa is in the hl register.
 1092               	  ; Forth: PC <-- (W)
 1093               	  ; Z80:   pc <-- (hl)
 1094 0565 5E        	  ld e,(hl)
 1095 0566 23        	  inc hl
 1096 0567 56        	  ld d,(hl)
 1097 0568 EB        	  ex de,hl
 1098               	  ; hl = (cfa) = address of the code
 1099               	  ; de = cfa+1 = pfa-1
 1100               	
 1101               	next2_end: ; XXX TMP for debugging
 1102 0569 E9        	  jp (hl)
 1103               	
 1104               	; ==============================================================
 1105               	; Dictionary
 1106               	
 1107               	; ----------------------------------------------
 1108               	; Start compiling in the `root` vocabulary
 1109               	
 1110               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1111               	; current_vocabulary defl root_pfa
 1112               	
 1113               	; ----------------------------------------------
 1114 056a 6C05      	  _code_header root_x_,"\x00",immediate
GAS LISTING solo_forth.z80s 			page 22


 1115               	
 1116               	; doc{
 1117               	
 1118               	; x  ( -- )
 1119               	
 1120               	; This is a pseudonym for an alias of the "null" word that is
 1121               	; defined in the `forth` vocabulary.
 1122               	
 1123               	; }doc
 1124               	
 1125 056c 2117 11   	  ld hl,x_ ; cfa of the actual null word
 1126 056f C365 05   	  jp next2 ; execute it
 1127               	
 1128               	; ----------------------------------------------
 1129 0572 610C      	  _colon_header root_forth_,"FORTH"
 1130               	
 1131 0574 5306      	  dw forth_
 1132 0576 BC0A      	  dw semicolon_s_
 1133               	
 1134               	; ----------------------------------------------
 1135 0578 610C      	  _colon_header root_definitions_,"DEFINITIONS"
 1136               	
 1137 057a D315      	  dw definitions_
 1138 057c BC0A      	  dw semicolon_s_
 1139               	
 1140               	latest_nfa_in_root_voc: equ root_definitions_nfa
 1141               	
 1142               	; ----------------------------------------------
 1143               	; Start compiling in the `assembler` vocabulary
 1144               	
 1145               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1146               	; current_vocabulary defl forth_pfa
 1147               	
 1148               	; ----------------------------------------------
 1149 057e 1814      	  _variable_header abase_,"ABASE"
 1150               	
 1151               	; doc{
 1152               	;
 1153               	; abase  ( -- a )
 1154               	;
 1155               	; A variable used to save the current value of `base` in
 1156               	; assembler definitions.
 1157               	;
 1158               	; }doc
 1159               	
 1160 0580 0000      	  dw 0
 1161               	
 1162               	; ----------------------------------------------
 1163 0582 610C      	  _colon_header asm_,"ASM"
 1164               	
 1165               	; doc{
 1166               	;
 1167               	; asm  ( -- )
 1168               	;
 1169               	; Enter the assembler mode.
 1170               	;
 1171               	; }doc
GAS LISTING solo_forth.z80s 			page 23


 1172               	
 1173               	  ; [Idea taken from Coos Haak's Z80 Forth assembler.]
 1174               	
 1175 0584 920C      	  dw noop_ ; to be patched by the assembler
 1176 0586 2F0D 160C 	  dw base_,fetch_,abase_,store_ ; save the current base
 1176      7E05 450C 
 1177 058e AF0F      	  dw hex_
 1178 0590 FD05 5906 	  dw also_,assembler_ ; XXX TODO better
 1179 0594 BC0A      	  dw semicolon_s_
 1180               	
 1181               	; ----------------------------------------------
 1182 0596 610C      	  _colon_header end_asm_,"END-ASM"
 1183               	
 1184               	; doc{
 1185               	;
 1186               	; end-asm  ( -- )
 1187               	;
 1188               	; Exit the assembler mode.
 1189               	;
 1190               	; }doc
 1191               	
 1192 0598 2306      	  dw previous_ ; restore the search order ; XXX TODO better
 1193 059a 7E05 160C 	  dw abase_,fetch_,base_,store_ ; restore `base`
 1193      2F0D 450C 
 1194 05a2 BC0A      	  dw semicolon_s_
 1195               	
 1196               	; ----------------------------------------------
 1197 05a4 610C      	  _colon_header end_code_,"END-CODE"
 1198               	
 1199 05a6 440F 9605 	  dw question_csp_,end_asm_,smudge_
 1199      9C0F 
 1200 05ac BC0A      	  dw semicolon_s_
 1201               	
 1202               	; ----------------------------------------------
 1203 05ae 9C0C      	  _constant_header next_,"NEXT"
 1204               	
 1205 05b0 5F05      	  dw next
 1206               	
 1207               	; ----------------------------------------------
 1208               	  ; _constant_header next_,"NEXT2"
 1209               	
 1210               	  ; ; XXX OLD -- added for the second version of `defer`, but
 1211               	  ; ; not needed
 1212               	  
 1213               	  ; dw next2
 1214               	
 1215               	; ----------------------------------------------
 1216 05b2 9C0C      	  _constant_header pushhl_,"PUSHHL"
 1217               	
 1218 05b4 5E05      	  dw push_hl
 1219               	
 1220               	; ----------------------------------------------
 1221 05b6 9C0C      	  _constant_header pushhlde_,"PUSHHLDE"
 1222               	
 1223 05b8 5D05      	  dw push_hlde
 1224               	
 1225               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 24


 1226 05ba 9C0C      	  _constant_header fetchhl_,"FETCHHL"
 1227               	
 1228 05bc 190C      	  dw fetch.hl
 1229               	
 1230               	; ----------------------------------------------
 1231 05be 610C      	  _colon_header next_comma_,"NEXT,"
 1232               	
 1233               	; doc{
 1234               	;
 1235               	; next,  ( -- )
 1236               	; 
 1237               	; Compile a Z80 jump to `next`.
 1238               	;
 1239               	; }doc
 1240               	
 1241 05c0 8D06 DDE9 	  dw lit_,0xE9DD ; opcode `jp (ix)`
 1242 05c4 AE0D      	  dw comma_
 1243 05c6 BC0A      	  dw semicolon_s_
 1244               	
 1245               	; ----------------------------------------------
 1246 05c8 610C      	  _colon_header pushhl_comma_,"PUSHHL,"
 1247               	
 1248               	; doc{
 1249               	;
 1250               	; pushhl,  ( -- )
 1251               	; 
 1252               	; Compile a Z80 jump to `pushhl`.
 1253               	;
 1254               	; }doc
 1255               	
 1256 05ca 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1257 05cd C20D      	  dw c_comma_
 1258 05cf 8D06 5E05 	  dw lit_,push_hl,comma_
 1258      AE0D 
 1259 05d5 BC0A      	  dw semicolon_s_
 1260               	
 1261               	; ----------------------------------------------
 1262 05d7 610C      	  _colon_header pushhlde_comma_,"PUSHHLDE,"
 1263               	
 1264               	; doc{
 1265               	;
 1266               	; pushhlde,  ( -- )
 1267               	; 
 1268               	; Compile a Z80 jump to `pushhlde`.
 1269               	;
 1270               	; }doc
 1271               	
 1272 05d9 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1273 05dc C20D      	  dw c_comma_
 1274 05de 8D06 5D05 	  dw lit_,push_hlde,comma_
 1274      AE0D 
 1275 05e4 BC0A      	  dw semicolon_s_
 1276               	
 1277               	; ----------------------------------------------
 1278 05e6 610C      	  _colon_header fetchhl_comma_,"FETCHHL,"
 1279               	
 1280               	; doc{
GAS LISTING solo_forth.z80s 			page 25


 1281               	;
 1282               	; fetchhl,  ( -- )
 1283               	; 
 1284               	; Compile a Z80 jump to `fetchhl`.
 1285               	;
 1286               	; }doc
 1287               	
 1288 05e8 8306 C3   	  _literal 0xC3 ; opcode `jp`
 1289 05eb C20D      	  dw c_comma_
 1290 05ed 8D06 190C 	  dw lit_,fetch.hl,comma_
 1290      AE0D 
 1291 05f3 BC0A      	  dw semicolon_s_
 1292               	
 1293               	latest_nfa_in_assembler_voc: equ fetchhl_comma_nfa
 1294               	
 1295               	; ----------------------------------------------
 1296               	; Start compiling in the `forth` vocabulary
 1297               	
 1298               	nfa_of_the_previous_word defl 0 ; link to previous Forth word
 1299               	; current_vocabulary defl forth_pfa
 1300               	
 1301               	
 1302               	; ----------------------------------------------
 1303 05f5 610C      	  _colon_header label_,"LABEL"
 1304               	
 1305 05f7 1014 8205 	  dw create_,asm_
 1306 05fb BC0A      	  dw semicolon_s_
 1307               	
 1308               	; ----------------------------------------------
 1309 05fd 610C      	  _colon_header also_,"ALSO"
 1310               	
 1311               	; doc{
 1312               	;
 1313               	; also  ( -- )
 1314               	;
 1315               	; Duplicate the vocabulary at the top of the search order.
 1316               	;
 1317               	; }doc
 1318               	
 1319               	; [Code adapted from F83.]
 1320               	
 1321               	; : also  ( -- )
 1322               	;   context dup cell+ [ #vocs 2- cells ] literal cmove>  ;
 1323               	
 1324 05ff 260D DC0B 	  dw context_,dup_,cell_plus_
 1324      640D 
 1325 0605 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell
 1326 0609 D609      	  dw cmove_up_
 1327 060b BC0A      	  dw semicolon_s_
 1328               	
 1329               	; ----------------------------------------------
 1330 060d 610C      	  _colon_header minus_order_,"-ORDER"
 1331               	
 1332               	; : -order  ( -- )  context [ #vocs cells ] literal erase  ;
 1333               	
 1334 060f 260D 8D06 	  dw context_,lit_,max_search_order*cell,erase_
 1334      1000 5211 
GAS LISTING solo_forth.z80s 			page 26


 1335 0617 BC0A      	  dw semicolon_s_
 1336               	
 1337               	; ----------------------------------------------
 1338 0619 610C      	  _colon_header only_,"ONLY"
 1339               	
 1340               	; doc{
 1341               	;
 1342               	; only  ( -- )
 1343               	;
 1344               	; Erase the search order and forces the `root` vocabulary to
 1345               	; be the first and second.
 1346               	;
 1347               	; }doc
 1348               	
 1349               	; [Code adapted from F83.]
 1350               	
 1351               	; : only  ( -- )  -order root also  ;
 1352               	
 1353 061b 0D06 4D06 	  dw minus_order_,root_,also_
 1353      FD05 
 1354 0621 BC0A      	  dw semicolon_s_
 1355               	
 1356               	; ----------------------------------------------
 1357 0623 610C      	  _colon_header previous_,"PREVIOUS"
 1358               	
 1359               	; doc{
 1360               	;
 1361               	; previous  ( -- )
 1362               	;
 1363               	; Remove the most recently referenced vocabulary from the search
 1364               	; order.
 1365               	;
 1366               	; }doc
 1367               	
 1368               	; [Code adapted from F83.]
 1369               	
 1370               	; : previous  ( -- )
 1371               	;   context dup cell+ swap [ #vocs 2- cells dup ] literal cmove
 1372               	;   context literal + off  ;
 1373               	
 1374 0625 260D DC0B 	  dw context_,dup_,cell_plus_,swap_
 1374      640D D50B 
 1375 062d 8D06 0C00 	  dw lit_,(max_search_order-cell)*cell,cmove_
 1375      E209 
 1376 0633 260D 8D06 	  dw context_,lit_,(max_search_order-cell)*cell,plus_,off_
 1376      0C00 7D0B 
 1376      F90B 
 1377 063d BC0A      	  dw semicolon_s_
 1378               	
 1379               	; ----------------------------------------------
 1380 063f 610C      	  _colon_header seal_,"SEAL"
 1381               	
 1382               	; doc{
 1383               	;
 1384               	; seal  ( -- )
 1385               	;
 1386               	; Change the search order such that only the vocabulary at the
GAS LISTING solo_forth.z80s 			page 27


 1387               	; top of the search order will be searched.
 1388               	;
 1389               	; }doc
 1390               	
 1391               	; [Code adapted from F83.]
 1392               	
 1393               	; : seal  ( -- )  context @ -order context !  ;
 1394               	
 1395 0641 260D 160C 	  dw context_,fetch_,minus_order_,context_,store_
 1395      0D06 260D 
 1395      450C 
 1396 064b BC0A      	  dw semicolon_s_
 1397               	
 1398               	; ----------------------------------------------
 1399               	
 1400 064d 7F15      	  _does_header root_,"ROOT",,do_vocabulary
 1401               	
 1402 064f 1800      	  dw latest_nfa_in_root_voc
 1403               	
 1404               	root_vocabulary_link:
 1405 0651 0000      	  dw 0x0000
 1406               	
 1407               	; ----------------------------------------------
 1408               	
 1409 0653 7F15      	  _does_header forth_,"FORTH",,do_vocabulary
 1410               	
 1411 0655 0F10      	  dw latest_nfa_in_forth_voc ; nfa of the latest word defined in this vocabulary
 1412               	
 1413               	forth_vocabulary_link:
 1414 0657 5106      	  dw root_vocabulary_link
 1415               	
 1416               	; ----------------------------------------------
 1417 0659 7F15      	  _does_header assembler_,"ASSEMBLER",,do_vocabulary
 1418               	
 1419               	; XXX TODO move `assembler` and everthing related
 1420               	; to the library disk?
 1421               	
 1422 065b A400      	  dw latest_nfa_in_assembler_voc
 1423               	assembler_vocabulary_link:
 1424 065d 5706      	  dw forth_vocabulary_link
 1425               	
 1426               	; ----------------------------------------------
 1427 065f 610C      	  _colon_header s_lit_,"SLIT"
 1428               	
 1429               	  ; : slit  ( -- ca len )  r@ count dup 1+ r> + >r  ;
 1430               	
 1431 0661 4B0B 0310 	  dw r_fetch_,count_,dup_,one_plus_
 1431      DC0B 530D 
 1432 0669 FB0A 7D0B 	  dw from_r_,plus_,to_r_
 1432      EC0A 
 1433 066f BC0A      	  dw semicolon_s_
 1434               	
 1435               	; ----------------------------------------------
 1436 0671 610C      	  _colon_header paren_s_,"(S)"
 1437               	
 1438               	; doc{
 1439               	;
GAS LISTING solo_forth.z80s 			page 28


 1440               	; (s) ( compilation: c "text<c>" -- ) ( run-time:  -- ca len )
 1441               	;
 1442               	; }doc
 1443               	
 1444 0673 A311      	  dw parse_ ; ( ca len )
 1445 0675 190F      	  dw comp_question_
 1446 0677 6007 7F06 	  dw zero_branch_,paren_s.interpreting
 1447               	  ; compiling
 1448 067b AF14      	  dw s_literal_
 1449 067d BC0A      	  dw semicolon_s_ ; XXX TODO exit_
 1450               	paren_s.interpreting:
 1451 067f EA06      	  dw save_string_
 1452 0681 BC0A      	  dw semicolon_s_
 1453               	
 1454               	; ----------------------------------------------
 1455 0683 8506      	  _code_header c_lit_,"CLIT"
 1456               	
 1457 0685 0A        	  ld a,(bc)
 1458 0686 03        	  inc bc
 1459               	  ; XXX TODO include these entry points in the `assembler` vocabulary?
 1460               	push_a:
 1461 0687 6F        	  ld l,a
 1462               	push_l: ; XXX TMP -- not used yet
 1463 0688 2600      	  ld h,0
 1464 068a C35E 05   	  jp push_hl
 1465               	
 1466               	; ----------------------------------------------
 1467 068d 8F06      	  _code_header lit_,"LIT"
 1468               	
 1469               	  ; XXX FIXME -- crash if not compiling
 1470               	  ; XXX TODO -- implement compile-only flag?
 1471               	
 1472 068f 0A        	  ld a,(bc)
 1473 0690 03        	  inc bc
 1474 0691 6F        	  ld l,a
 1475 0692 0A        	  ld a,(bc)
 1476 0693 03        	  inc bc
 1477 0694 67        	  ld h,a
 1478 0695 C35E 05   	  jp push_hl
 1479               	
 1480               	; ----------------------------------------------
 1481 0698 9A06      	  _code_header bank_,"BANK"
 1482               	
 1483               	; doc{
 1484               	;
 1485               	; bank  ( n -- )
 1486               	;
 1487               	; Page memory bank _n_ (0..7) at 0xC000..0xFFFF.
 1488               	;
 1489               	; }doc
 1490               	
 1491 069a D1        	  pop de ; e = bank
 1492 069b CDA0 06   	  call bank.e
 1493 069e DDE9      	  _jp_next
 1494               	
 1495               	bank.default:
 1496               	  ; XXX TODO ?
GAS LISTING solo_forth.z80s 			page 29


 1497               	bank.names:
 1498               	  ; XXX TODO ?
 1499               	bank.e:
 1500               	  ; ret ; XXX TMP for debugging
 1501 06a0 3A5C 5B   	  ld a,(sys_bankm) ; get the saved status of BANKM
 1502 06a3 E6F8      	  and 0xF8 ; erase bits 0-2
 1503 06a5 B3        	  or e ; modify bits 0-2
 1504 06a6 F3        	  di
 1505 06a7 325C 5B   	  ld (sys_bankm),a ; update BANKM
 1506 06aa D3FD      	  out (bank1_port),a ; page the bank
****  Warning:overflow
 1507 06ac FB        	  ei
 1508 06ad C9        	  ret
 1509               	
 1510               	; ----------------------------------------------
 1511 06ae B006      	  _code_header unused_csb_,"UNUSED-CSB"
 1512               	
 1513               	; doc{
 1514               	;
 1515               	; csb-unused  ( -- len )
 1516               	;
 1517               	; }doc
 1518               	
 1519 06b0 2A72 00   	  ld hl,(unused_csb)
 1520 06b3 C35E 05   	  jp push_hl
 1521               	
 1522               	; ----------------------------------------------
 1523 06b6 9C0C      	  _constant_header csb0_,"CSB0"
 1524               	
 1525               	; doc{
 1526               	;
 1527               	; csb0  ( -- a )
 1528               	;
 1529               	; }doc
 1530               	
 1531 06b8 7400      	  dw csb0
 1532               	
 1533               	; ----------------------------------------------
 1534 06ba 610C      	  _colon_header question_csb_,"?CSB"
 1535               	
 1536               	; doc{
 1537               	;
 1538               	; ?csb  ( len -- )
 1539               	;
 1540               	; Make sure there's room for the given characters.
 1541               	;
 1542               	; }doc
 1543               	
 1544 06bc DC0B 8D06 	  dw dup_,lit_,unused_csb,fetch_,greater_than_
 1544      7200 160C 
 1544      130E 
 1545 06c6 6007 D406 	  dw zero_branch_,question_csb_.enough
 1546               	  ; not enough space; reset the pointer
 1547 06ca 8D06 0001 	  _literal csb_size
 1548 06ce 8D06 7200 	  dw lit_,unused_csb,store_
 1548      450C 
 1549               	
GAS LISTING solo_forth.z80s 			page 30


 1550               	question_csb_.enough:
 1551 06d4 970B 8D06 	  dw negate_,lit_,unused_csb,plus_store_
 1551      7200 EC0B 
 1552 06dc BC0A      	  dw semicolon_s_
 1553               	
 1554               	; ----------------------------------------------
 1555 06de 610C      	  _colon_header allocate_string_,"ALLOCATE-STRING"
 1556               	
 1557               	; doc{
 1558               	;
 1559               	; string-allocate  ( len -- ca )
 1560               	;
 1561               	; }doc
 1562               	
 1563 06e0 BA06      	  dw question_csb_
 1564 06e2 B606 AE06 	  dw csb0_,unused_csb_,plus_
 1564      7D0B 
 1565 06e8 BC0A      	  dw semicolon_s_
 1566               	
 1567               	; ----------------------------------------------
 1568 06ea 610C      	  _colon_header save_string_,"SAVE-STRING"
 1569               	
 1570               	; doc{
 1571               	;
 1572               	; save-string  ( ca1 len1 -- ca2 len1 )
 1573               	;
 1574               	; }doc
 1575               	
 1576 06ec DC0B DE06 	  dw dup_,allocate_string_,swap_
 1576      D50B 
 1577 06f2 E30B 240B 	  dw two_dup_,two_to_r_
 1578 06f6 EE09 330B 	  dw move_,two_from_r_
 1579 06fa BC0A      	  dw semicolon_s_
 1580               	
 1581               	; ----------------------------------------------
 1582 06fc 610C      	  _colon_header save_counted_string_,"SAVE-COUNTED-STRING"
 1583               	
 1584               	; doc{
 1585               	;
 1586               	; save-counted-string  ( ca1 len1 -- ca2 )
 1587               	;
 1588               	; }doc
 1589               	
 1590               	; dup 1+ string-allocate dup >r $! r>
 1591               	
 1592 06fe DC0B 530D 	  dw dup_,one_plus_,allocate_string_
 1592      DE06 
 1593 0704 DC0B EC0A 	  dw dup_,to_r_,dollar_store_,from_r_
 1593      D512 FB0A 
 1594 070c BC0A      	  dw semicolon_s_
 1595               	
 1596               	; ----------------------------------------------
 1597 070e 610C      	  _colon_header empty_csb_,"EMPTY-CSB"
 1598               	
 1599               	; doc{
 1600               	;
 1601               	; empty-csb  ( -- )
GAS LISTING solo_forth.z80s 			page 31


 1602               	;
 1603               	; }doc
 1604               	
 1605 0710 8D06 7200 	  dw lit_,csb
 1606 0714 8D06 0201 	  _literal csb_total_size
 1607 0718 5211      	  dw erase_
 1608 071a BC0A      	  dw semicolon_s_
 1609               	
 1610               	; ----------------------------------------------
 1611 071c 1E07      	  _code_header execute_,"EXECUTE"
 1612               	
 1613               	; doc{
 1614               	;
 1615               	; execute  ( cfa  -- )
 1616               	;
 1617               	; }doc
 1618               	
 1619 071e E1        	  pop hl
 1620 071f C365 05   	  jp next2
 1621               	
 1622               	; ----------------------------------------------
 1623 0722 2407      	  _code_header perform_,"PERFORM"
 1624               	
 1625               	; doc{
 1626               	;
 1627               	; perform  ( a  -- )
 1628               	;
 1629               	; Execute the word whose cfa is stored in _a_.  Do nothing if
 1630               	; the content of _a_ is zero.
 1631               	;
 1632               	; }doc
 1633               	
 1634 0724 E1        	  pop hl
 1635 0725 7E        	  ld a,(hl)
 1636 0726 23        	  inc hl
 1637 0727 66        	  ld h,(hl)
 1638 0728 6F        	  ld l,a
 1639 0729 B4        	  or h
 1640 072a C265 05   	  jp nz,next2
 1641 072d DDE9      	  _jp_next
 1642               	
 1643               	; ----------------------------------------------
 1644 072f 610C      	  _colon_header forward_mark_,">MARK"
 1645               	
 1646               	; doc{
 1647               	;
 1648               	; >mark  ( -- orig )  \ Forth-83, C, "forward-mark"
 1649               	;
 1650               	; Compile space in the dictionary for a branch address which
 1651               	; will later be resolved by `>resolve`.
 1652               	;
 1653               	; Used at the source of a forward branch.  Typically used after
 1654               	; either `branch`, `0branch` or `?branch`.
 1655               	;
 1656               	; }doc
 1657               	
 1658 0731 210F      	  dw question_comp_
GAS LISTING solo_forth.z80s 			page 32


 1659 0733 8C0D C10C 	  dw here_,zero_,comma_
 1659      AE0D 
 1660 0739 BC0A      	  dw semicolon_s_
 1661               	
 1662               	; ----------------------------------------------
 1663 073b 610C      	  _colon_header forward_resolve_,">RESOLVE"
 1664               	
 1665               	; doc{
 1666               	;
 1667               	; >resolve  ( orig -- )  \ Forth-83, C, "forward-resolve"
 1668               	;
 1669               	; Resolve a forward branch by placing the address of the current
 1670               	; dictionary pointer into the space compiled by `>mark`.
 1671               	;
 1672               	; }doc
 1673               	
 1674 073d 210F      	  dw question_comp_
 1675 073f 8C0D D50B 	  dw here_,swap_,store_
 1675      450C 
 1676 0745 BC0A      	  dw semicolon_s_
 1677               	
 1678               	; ----------------------------------------------
 1679 0747 610C      	  _colon_header backward_mark_,"<MARK"
 1680               	
 1681               	; doc{
 1682               	;
 1683               	; <mark  ( -- dest )  \ Forth-83, C, "backward-mark"
 1684               	;
 1685               	; Leave the address of the current dictionary pointer, as the
 1686               	; the destination of a backward branch.  _dest_ is typically
 1687               	; only used by `<resolve` to compile a branch address.
 1688               	;
 1689               	; }doc
 1690               	
 1691 0749 210F      	  dw question_comp_
 1692 074b 8C0D      	  dw here_
 1693 074d BC0A      	  dw semicolon_s_
 1694               	
 1695               	; ----------------------------------------------
 1696 074f 610C      	  _colon_header backward_resolve_,"<RESOLVE"
 1697               	
 1698               	; doc{
 1699               	;
 1700               	; <resolve  ( dest -- )  \ Forth-83, C, "backward-resolve"
 1701               	;
 1702               	; Resolve a backward branch.  Compile a branch address using
 1703               	; _dest_, the address left by `<mark`,  as the destination
 1704               	; address.  Used at the source of a backward branch after either
 1705               	; `branch` or `?branch` or `0branch`.
 1706               	;
 1707               	; }doc
 1708               	
 1709 0751 210F      	  dw question_comp_
 1710 0753 AE0D      	  dw comma_
 1711 0755 BC0A      	  dw semicolon_s_
 1712               	
 1713               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 33


 1714 0757 5907      	  _code_header branch_,"BRANCH"
 1715               	
 1716               	; doc{
 1717               	;
 1718               	; branch  ( -- )  \ ANS Forth
 1719               	;
 1720               	; The run-time procedure to branch unconditionally. An in-line
 1721               	; offset is copied to the interpretive pointer IP to branch
 1722               	; forward or backward.
 1723               	;
 1724               	; }doc
 1725               	
 1726 0759 60        	  ld h,b
 1727 075a 69        	  ld l,c ; hl = Forth IP, containing the address to jump to
 1728 075b 4E        	  ld c,(hl)
 1729 075c 23        	  inc hl
 1730 075d 46        	  ld b,(hl) ; bc = New Forth IP
 1731 075e DDE9      	  _jp_next
 1732               	
 1733               	; ----------------------------------------------
 1734 0760 6207      	  _code_header zero_branch_,"0BRANCH"
 1735               	
 1736               	; doc{
 1737               	;
 1738               	; 0branch  ( f -- )  \ fig-Forth
 1739               	;
 1740               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1741               	; is false (zero), the following in-line address is copied to IP
 1742               	; to branch forward or  backward.
 1743               	;
 1744               	; }doc
 1745               	
 1746 0762 E1        	  pop hl
 1747 0763 7D        	  ld a,l
 1748 0764 B4        	  or h
 1749 0765 CA59 07   	  jp z,branch_pfa ; branch if zero
 1750 0768 03        	  inc bc
 1751 0769 03        	  inc bc ; skip the inline branch address
 1752 076a DDE9      	  _jp_next
 1753               	
 1754               	; ----------------------------------------------
 1755 076c 6E07      	  _code_header question_branch_,"?BRANCH"
 1756               	
 1757               	; doc{
 1758               	;
 1759               	; ?branch  ( f -- )
 1760               	;
 1761               	; A run-time procedure to branch conditionally. If  _f_ on stack
 1762               	; is not zero, the following in-line address is copied to IP to
 1763               	; branch forward or backward.
 1764               	;
 1765               	; Note: This is not Forth-83's `?branch`: Forth-83's `?branch`
 1766               	; does the same than fig-Forth's `0branch`: the branch is done
 1767               	; when the flag is zero. Solo Forth includes fig-Forth's
 1768               	; `0branch` and also `?branch`, that branches when the flag is
 1769               	; not zero.
 1770               	;
GAS LISTING solo_forth.z80s 			page 34


 1771               	; }doc
 1772               	
 1773 076e E1        	  pop hl
 1774 076f 7D        	  ld a,l
 1775 0770 B4        	  or h
 1776 0771 C259 07   	  jp nz,branch_pfa ; branch if not zero
 1777 0774 03        	  inc bc
 1778 0775 03        	  inc bc ; skip the inline branch address
 1779 0776 DDE9      	  _jp_next
 1780               	
 1781               	; ----------------------------------------------
 1782 0778 7A07      	  _code_header paren_loop_,"(LOOP)"
 1783               	
 1784               	  ; XXX NOTE:
 1785               	  ;
 1786               	  ; This code is from Abersoft Fort.  It's the same code used in
 1787               	  ; `(+loop)` in fig-Forth 1.1g.  The author of Abersoft Forth
 1788               	  ; used it to write `(loop)` and wrote `(+loop)` with a simple
 1789               	  ; call to it, what saves code.
 1790               	  ;
 1791               	  ; XXX TODO -- The `(loop)` of DZX-Forth is much faster, but
 1792               	  ; requires and additional parameter on the return stack.
 1793               	
 1794 077a 1101 00   	  ld de,0x0001
 1795               	paren_loop.step_in_de:
 1796 077d 2A10 00   	  ld hl,(return_stack_pointer)
 1797 0780 7E        	  ld a,(hl)
 1798 0781 83        	  add a,e
 1799 0782 77        	  ld (hl),a
 1800 0783 5F        	  ld e,a
 1801 0784 23        	  inc hl
 1802 0785 7E        	  ld a,(hl)
 1803 0786 8A        	  adc a,d
 1804 0787 77        	  ld (hl),a
 1805 0788 23        	  inc hl ; (hl) = limit
 1806 0789 14        	  inc d
 1807 078a 15        	  dec d
 1808 078b 57        	  ld d,a ; de = new index
 1809 078c FA97 07   	  jp m,paren_loop.negative_step
 1810               	
 1811               	  ; increment>0
 1812 078f 7B        	  ld a,e
 1813 0790 96        	  sub (hl)
 1814 0791 7A        	  ld a,d
 1815 0792 23        	  inc hl
 1816 0793 9E        	  sbc a,(hl)
 1817 0794 C39C 07   	  jp paren_loop.end
 1818               	
 1819               	paren_loop.negative_step:
 1820               	  ; increment<0
 1821 0797 7E        	  ld a,(hl) ; limit-index
 1822 0798 93        	  sub e
 1823 0799 23        	  inc hl
 1824 079a 7E        	  ld a,(hl)
 1825 079b 9A        	  sbc a,d ; a<0?
 1826               	
 1827               	paren_loop.end:
GAS LISTING solo_forth.z80s 			page 35


 1828 079c FA59 07   	  jp m,branch_pfa ; loop again if a<0
 1829               	  ; done, discard loop parameters
 1830 079f 23        	  inc hl
 1831 07a0 2210 00   	  ld (return_stack_pointer),hl
 1832               	  ; skip branch offset
 1833 07a3 03        	  inc bc
 1834 07a4 03        	  inc bc
 1835 07a5 DDE9      	  _jp_next
 1836               	
 1837               	; ----------------------------------------------
 1838 07a7 A907      	  _code_header paren_plus_loop_,"(+LOOP)"
 1839               	
 1840 07a9 D1        	  pop de
 1841 07aa C37D 07   	  jp paren_loop.step_in_de
 1842               	
 1843               	; ----------------------------------------------
 1844               	
 1845               	.if 0
 1846               	
 1847               	  _colon_header paren_question_do_,"(?DO)"
 1848               	
 1849               	  ; XXX TODO -- first draft, just copied from DZX-Forth
 1850               	
 1851               	  ; XXX FIXME -- crash in both cases
 1852               	
 1853               	  dw two_dup_,equals_
 1854               	  dw question_branch_,paren_question.end
 1855               	  dw paren_do_
 1856               	  dw semicolon_s_ ; XXX TODO exit_
 1857               	paren_question.end:
 1858               	  dw two_drop_
 1859               	  dw from_r_,fetch_,to_r_
 1860               	  dw semicolon_s_
 1861               	
 1862               	.endif
 1863               	
 1864               	; ----------------------------------------------
 1865 07ad AF07      	  _code_header paren_do_,"(DO)"
 1866               	
 1867               	  ; [Code from CP/M fig-Forth 1.1g.]
 1868               	
 1869 07af D9        	  exx                           ; 04t 01b
 1870 07b0 D1        	  pop de                        ; 10t 01b
 1871 07b1 C1        	  pop bc                        ; 10t 01b
 1872 07b2 2A10 00   	  ld hl,(return_stack_pointer)  ; 20t 03b
 1873 07b5 2B        	  dec hl                        ; 06t 01b
 1874 07b6 70        	  ld (hl),b                     ; 07t 01b
 1875 07b7 2B        	  dec hl                        ; 06t 01b
 1876 07b8 71        	  ld (hl),c                     ; 07t 01b
 1877 07b9 2B        	  dec hl                        ; 06t 01b
 1878 07ba 72        	  ld (hl),d                     ; 07t 01b
 1879 07bb 2B        	  dec hl                        ; 06t 01b
 1880 07bc 73        	  ld (hl),e                     ; 07t 01b
 1881 07bd 2210 00   	  ld (return_stack_pointer),hl  ; 16t 03b
 1882 07c0 D9        	  exx                           ; 04t 01b
 1883               	                                ;116t 18b TOTAL
 1884 07c1 DDE9      	  _jp_next
GAS LISTING solo_forth.z80s 			page 36


 1885               	
 1886               	; ----------------------------------------------
 1887               	; XXX TODO experimental do-loop structures adapted from Spectrum Forth-83
 1888               	; and F83.
 1889               	
 1890               	; A do-loop pushes three items on the return stack:
 1891               	;
 1892               	; 0) Limit
 1893               	; 1) Reverse branch address (jump to here if loop repeats).
 1894               	; 2) Current index represented as `(index-limit) xor 0x8000`.
 1895               	;    This is at the top.
 1896               	;    The current index is represented this way so it is easier
 1897               	;    to check whether index has crossed the boundary between
 1898               	;    limit-1 and limit, acoording to
 1899               	;    the rules of Forth-83, even with negative increment in +LOOP.
 1900               	
 1901 07c3 C507      	  _code_header paren_do83_,"(DO83)"
 1902               	
 1903 07c5 E1        	  pop hl ; initial value
 1904 07c6 D1        	  pop de ; limit
 1905               	paren_do83.de_hl:
 1906               	  ; de = limit
 1907               	  ; hl = initial value
 1908 07c7 E5        	  push hl ; initial value  ( initial )
 1909 07c8 2A10 00   	  ld hl,(return_stack_pointer)
 1910 07cb 2B        	  dec hl
 1911 07cc 72        	  ld (hl),d
 1912 07cd 2B        	  dec hl
 1913 07ce 73        	  ld (hl),e ; push limit value on return stack ( R: initial )
 1914 07cf 03        	  inc bc
 1915 07d0 03        	  inc bc ; increment the Forth IP, skip branch address
 1916 07d1 2B        	  dec hl
 1917 07d2 70        	  ld (hl),b
 1918 07d3 2B        	  dec hl
 1919 07d4 71        	  ld (hl),c ; push current instruction pointer on return stack
 1920 07d5 E3        	  ex (sp),hl ; initial value now in HL, return stack pointer on stack
 1921 07d6 A7        	  and a ; reset the carry flag
 1922 07d7 ED52      	  sbc hl,de ; B SBCP        \ Subtract limit value.
 1923 07d9 7C        	  ld a,h ; H A LD
 1924 07da EE80      	  xor 0x80 ; 80 XOR#       \ Flip most significant bit.
 1925 07dc 57        	  ld d,a ; A B LD
 1926 07dd 5D        	  ld e,l ; L C LD        \ Move result to DE.
 1927 07de E1        	  pop hl ; H POP        \ Get return stack pointer from stack,
 1928 07df 2B        	  dec hl ; H DEC
 1929 07e0 72        	  ld (hl),d ; B M LD
 1930 07e1 2B        	  dec hl ; H DEC
 1931 07e2 73        	  ld (hl),e ; C M LD        \ Push (initial - limit) XOR 0x8000 onto return stack.
 1932 07e3 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL       \ Save return stack pointer.
 1933 07e6 DDE9      	  _jp_next ; JPIX ;C
 1934               	
 1935 07e8 EA07      	  _code_header paren_question_do83_,"(?DO83)"
 1936               	
 1937 07ea E1        	  pop hl ; initial value
 1938 07eb D1        	  pop de ; limit
 1939 07ec A7        	  and a ; reset the carry flag
 1940 07ed ED52      	  sbc hl,de ; compare
 1941 07ef 2804      	  jr z,question_do.equals
GAS LISTING solo_forth.z80s 			page 37


 1942               	  ; not equals
 1943               	  ; XXX TODO move add after sbc and save one jump
 1944 07f1 19        	  add hl,de ; reverse the subtraction
 1945 07f2 C3C7 07   	  jp paren_do83.de_hl ; perform regular `do`
 1946               	question_do.equals:
 1947 07f5 C359 07   	  jp branch_pfa ; XXX TODO ?
 1948               	
 1949 07f8 610C      	  _colon_header question_do83_,"?DO83",immediate
 1950               	
 1951 07fa 640F E807 	  dw compile_,paren_question_do83_
 1952 07fe 2F07      	  dw forward_mark_
 1953               	.if 1 ; fig_compiler_security
 1954 0800 8306 03   	  _literal 3
 1955               	.endif
 1956 0803 BC0A      	  dw semicolon_s_
 1957               	
 1958 0805 610C      	  _colon_header do83_,"DO83",immediate
 1959               	
 1960 0807 640F C307 	  dw compile_,paren_do83_
 1961 080b 2F07      	  dw forward_mark_
 1962               	.if 1 ; fig_compiler_security
 1963 080d 8306 03   	  _literal 3
 1964               	.endif
 1965 0810 BC0A      	  dw semicolon_s_
 1966               	
 1967 0812 610C      	  _colon_header loop83_,"LOOP83",immediate
 1968               	
 1969               	.if 1 ; fig_compiler_security
 1970 0814 8306 03   	  _literal 3
 1971 0817 390F      	  dw question_pairs_
 1972               	.endif
 1973 0819 640F 2108 	  dw compile_,paren_loop83_
 1974 081d 3B07      	  dw forward_resolve_
 1975 081f BC0A      	  dw semicolon_s_
 1976               	
 1977               	  ; _colon_header plus_loop83_,"+LOOP83",immediate
 1978               	
 1979               	  ; dw c_lit_
 1980               	  ; db 3
 1981               	  ; dw question_pairs_
 1982               	  ; dw compile_,paren_plus_loop83_
 1983               	  ; dw forward_resolve_
 1984               	  ; dw semicolon_s_
 1985               	
 1986 0821 610C      	  _colon_header paren_loop83_,"(LOOP83)"
 1987               	
 1988 0823 2A10 00   	  ld hl,(return_stack_pointer)
 1989 0826 5E        	  ld e,(hl) ; M C LD
 1990 0827 23        	  inc hl    ; H INC
 1991 0828 56        	  ld d,(hl) ; M B LD         \ Read current index value.
 1992 0829 13        	  inc de    ; B INC         \ Increment it.
 1993 082a 7A        	  ld a,d    ; B A LD
 1994 082b EE80      	  xor 0x80  ; 80 XOR#
 1995 082d B3        	  or e      ;  C OR         \ Was it equal to 0x8000 ?
 1996 082e C23A 08   	  jp nz,paren_loop83.loop ; jump if not
 1997               	
 1998               	  ; The real index has reached limit, terminate loop.
GAS LISTING solo_forth.z80s 			page 38


 1999               	  ; Increment ret stack pointer by 5 (1 increment already done).
 2000 0831 1105 00   	  ld de,5   ; 5 B LDP#
 2001 0834 19        	  add hl,de ; B ADDP
 2002 0835 2210 00   	  ld (return_stack_pointer),hl ; RPTR STHL
 2003 0838 DDE9      	  _jp_next
 2004               	
 2005               	paren_loop83.loop:
 2006               	
 2007 083a 72        	  ld (hl),d ;  B M LD
 2008 083b 2B        	  dec hl    ; H DEC
 2009 083c 73        	  ld (hl),e ; C M LD    \ Store updated index.
 2010 083d 23        	  inc hl    ; H INC
 2011 083e 23        	  inc hl    ; H INC
 2012 083f 4E        	  ld c,(hl) ; M E LD
 2013 0840 23        	  inc hl    ; H INC
 2014 0841 4E        	  ld c,(hl) ; M D LD   \ Read loop start address into instruction pointer, repeat loop.
 2015 0842 DDE9      	  _jp_next
 2016               	
 2017               	.if 0 ; XXX TODO adapt
 2018               	
 2019               	; CODE (+LOOP83) ( w --- )
 2020               	;  RPTR LDHL     \ Read return stack pointer into HL.
 2021               	;    M C LD
 2022               	;     H INC
 2023               	;    M B LD      \ Read Current index.
 2024               	;      EXSP      \ HL now contains w, the increment value.
 2025               	;     A AND
 2026               	;    B ADCP      \ Add increment to index.
 2027               	;    v if
 2028               	;                \ If overflow, then boundary between limit-1 and limit is
 2029               	;                \ crossed, terminate loop.
 2030               	;      H POP     \ Get return stack pointer.
 2031               	;   5 B LDP#
 2032               	;     B ADDP
 2033               	;  RPTR STHL     \ Increment ret stack pointer by 5 (1 increment already done)
 2034               	;                \ and store updated ret stack pointer back.
 2035               	;    else
 2036               	;     H B LD
 2037               	;     L C LD     \ Move updated index to BC.
 2038               	;      H POP     \ Get return stack pointer.
 2039               	;     B M LD
 2040               	;      H DEC
 2041               	;     C M LD     \ Store updated index.
 2042               	;      H INC
 2043               	;      H INC
 2044               	;     M E LD
 2045               	;      H INC
 2046               	;     M D LD     \ Read loop start address into instruction pointer, repeat loop.
 2047               	;    then
 2048               	;  JPIX ;C
 2049               	
 2050               	; CODE LEAVE83
 2051               	;  RPTR LDHL     \ Read return stack pointer into HL.
 2052               	;     H INC
 2053               	;     H INC
 2054               	;    M E LD
 2055               	;     H INC
GAS LISTING solo_forth.z80s 			page 39


 2056               	;    M D LD      \ Get start address into DE.
 2057               	;     H INC
 2058               	;     H INC
 2059               	;     H INC
 2060               	; RPTR STHL      \ Write updated return stack pointer (6 was added).
 2061               	;     D DEC
 2062               	;     D DEC      \ DE (instruction pointer) now points to forward branch address
 2063               	;   'BRANCH @ JP ;C \ continue into BRANCH.
 2064               	
 2065               	; CODE I83  ( --- w)
 2066               	; RPTR LDHL        \ Read return stack pointer into HL.
 2067               	;   \ J jumps here.
 2068               	;   M C LD
 2069               	;    H INC
 2070               	;   M B LD         \ Read current index. (which is (index-limit) xor 0x8000.
 2071               	;    H INC
 2072               	;    H INC
 2073               	;    H INC
 2074               	;   M A LD         \ Read limit and add to index
 2075               	;    C ADD
 2076               	;   A C LD
 2077               	;    H INC
 2078               	;   M A LD
 2079               	;    B ADC
 2080               	;  80 XOR#         \ and flip most significant bit, getting true index value.
 2081               	;   A B LD
 2082               	;   B PUSH         \ Push result.
 2083               	; JPIX ;C
 2084               	
 2085               	; CODE J83 ( --- w)
 2086               	;   RPTR LDHL      \ Read return stack pointer into HL
 2087               	;   6 B LDP#
 2088               	;     B ADDP       \ Add 6 to it, to get to next inner loop parameters.
 2089               	;  'I @ 3 + JR ;C  \ Continue into I.
 2090               	
 2091               	; CODE I'83 ( --- w)
 2092               	;   RPTR LDHL      \ Read return stack pointer into HL
 2093               	;      H INC
 2094               	;      H INC
 2095               	;      H INC
 2096               	;      H INC
 2097               	;     M C LD
 2098               	;      H INC
 2099               	;     M B LD       \ Read limit value.
 2100               	;     B PUSH       \ Push result
 2101               	;     JPIX ;C
 2102               	
 2103               	.endif
 2104               	
 2105               	; ----------------------------------------------
 2106 0844 4D0B      	  _code_alias_header i_,"I",,r_fetch_
 2107               	
 2108               	; doc{
 2109               	;
 2110               	; i  ( -- x ) ( R: loop-sys -- loop-sys ) \ ANS Forth
 2111               	;
 2112               	; Return a copy of the current (innermost) loop index.
GAS LISTING solo_forth.z80s 			page 40


 2113               	;
 2114               	; }doc
 2115               	
 2116               	; ----------------------------------------------
 2117 0846 4808      	  _code_header digit_,"DIGIT"
 2118               	
 2119               	; doc{
 2120               	;
 2121               	; digit  ( c n1 --- n2 tf | ff )  \ fig-Forth
 2122               	;
 2123               	; Convert the ascii character _c_ (using base _n1_) to its
 2124               	; binary equivalent n2, accompanied by a true flag. If the
 2125               	; conversion is invalid, leave only a false flag.
 2126               	;
 2127               	; }doc
 2128               	
 2129 0848 E1        	  pop hl  ; l=base
 2130 0849 D1        	  pop de  ; e=character
 2131 084a 7B        	  ld a,e  ; character
 2132 084b D630      	  sub '0' ; >="0"
 2133 084d DACF 0C   	  jp c,false_pfa ; <"0" is invalid
 2134 0850 FE0A      	  cp 0x0A ; >"9"?
 2135 0852 FA5C 08   	  jp m,digit.test_value ; no, test value
 2136 0855 D607      	  sub 0x07 ; gap between "9" & "A", now "A"=0x0A
 2137 0857 FE0A      	  cp 0x0A ; >="A"?
 2138 0859 DACF 0C   	  jp c,false_pfa ; characters between "9" & "A" are invalid
 2139               	digit.test_value:
 2140 085c BD        	  cp l ; <base?
 2141 085d D2CF 0C   	  jp nc,false_pfa ; no, invalid
 2142 0860 5F        	  ld e,a ; converted digit
 2143 0861 D5        	  push de
 2144 0862 C3D7 0C   	  jp true_pfa
 2145               	
 2146               	; ----------------------------------------------
 2147 0865 6708      	  _code_header paren_find_,"(FIND)"
 2148               	
 2149               	; doc{
 2150               	;
 2151               	; (find)  ( ca nfa --- ca 0 | cfa 1 | cfa -1 )
 2152               	;
 2153               	; Find the definition named in the counted string at _ca_,
 2154               	; starting at _nfa_. If the definition is not found, return _ca_
 2155               	; and zero.  If the definition is found, return its _cfa_. If
 2156               	; the definition is immediate, also return one (1); otherwise
 2157               	; also return minus-one (-1).
 2158               	;
 2159               	; }doc
 2160               	
 2161 0867 1E01      	  ld e,names_bank
 2162 0869 CDA0 06   	  call bank.e ; page the memory bank
 2163               	
 2164 086c D1        	  pop de ; nfa
 2165 086d E1        	  pop hl ; string address
 2166 086e C5        	  push bc ; save the Forth IP
 2167 086f 2277 08   	  ld (paren_find.string_address),hl
 2168               	
 2169               	  ; XXX FIXME the string searched for must be in the string
GAS LISTING solo_forth.z80s 			page 41


 2170               	  ; buffer, below 0xC000! This is not a problem now, during the
 2171               	  ; development, because the dictionary is small.
 2172               	
 2173               	paren_find.begin:
 2174               	  ;_z80_border 2 ; XXX INFORMER
 2175               	  ;_z80_border 7 ; XXX INFORMER
 2176               	  ; Compare the string with a new word.
 2177               	  ; de = nfa
 2178 0872 ED53 A908 	  ld (paren_find.nfa_backup),de ; save the nfa for later
 2179               	paren_find.string_address: equ $+1
 2180 0876 2100 00   	  ld hl,0 ; string address
 2181 0879 1A        	  ld a,(de) ; length byte of the name field
 2182 087a 4F        	  ld c,a    ; save for later
 2183 087b E61F      	  and max_word_length_bit_mask  ; length
 2184 087d BE        	  cp (hl) ; same length?
 2185 087e 2028      	  jr nz,paren_find.not_a_match ; lengths differ
 2186               	
 2187               	  ; Lengths match, compare the characters.
 2188 0880 47        	  ld b,a ; length
 2189               	paren_find.compare_next_char:
 2190 0881 23        	  inc hl ; next character in string
 2191 0882 13        	  inc de ; next character in name field
 2192 0883 1A        	  ld a,(de)
 2193 0884 BE        	  cp (hl) ; match?
 2194 0885 2021      	  jr nz,paren_find.not_a_match ; no match
 2195 0887 10F8      	  djnz paren_find.compare_next_char ; match so far, loop again
 2196               	
 2197               	  ; The string matches.
 2198               	  ; c = name field length byte
 2199 0889 2AA9 08   	  ld hl,(paren_find.nfa_backup)
 2200               	;  ld (0xfffa),hl ; XXX INFORMER ; nfa, ok
 2201 088c 2B        	  dec hl
 2202 088d 2B        	  dec hl ; lfa
 2203 088e 2B        	  dec hl ; high part of the pointer to cfa
 2204 088f 56        	  ld d,(hl)
 2205 0890 2B        	  dec hl ; low part of the pointer to cfa
 2206 0891 5E        	  ld e,(hl) ; de = cfa
 2207               	
 2208               	;  ld (0xfffc),de ; XXX INFORMER ; cfa, ok
 2209               	
 2210 0892 2101 00   	  ld hl,1 ; 1=immediate word
 2211 0895 79        	  ld a,c ; name field length byte
 2212 0896 E640      	  and precedence_bit_mask ; immediate word?
 2213 0898 C29D 08   	  jp nz, paren_find.end
 2214               	  ; non-immediate word
 2215 089b 2B        	  dec hl
 2216 089c 2B        	  dec hl ; -1 = non-immediate word
 2217               	
 2218               	paren_find.end:
 2219               	  ; If match found:
 2220               	  ;   de = cfa
 2221               	  ;   hl = -1 | 1
 2222               	  ; If no match found:
 2223               	  ;   de = ca
 2224               	  ;   hl = 0
 2225 089d D9        	  exx
 2226 089e 1E00      	  ld e,default_bank
GAS LISTING solo_forth.z80s 			page 42


 2227 08a0 CDA0 06   	  call bank.e ; page the default memory bank
 2228 08a3 D9        	  exx
 2229 08a4 C1        	  pop bc ; restore the Forth IP
 2230               	  ; _z80_border 4 ; XXX INFORMER
 2231 08a5 C35D 05   	  jp push_hlde
 2232               	
 2233               	paren_find.not_a_match:
 2234               	  ; Not a match, try next one.
 2235               	paren_find.nfa_backup: equ $+1
 2236 08a8 2100 00   	  ld hl,0 ; nfa
 2237 08ab 2B        	  dec hl ; high address of lfa
 2238 08ac 56        	  ld d,(hl) ; high part of the next nfa
 2239 08ad 2B        	  dec hl ; low address of lfa
 2240 08ae 5E        	  ld e,(hl) ; low part of the next nfa
 2241 08af 7A        	  ld a,d
 2242 08b0 B3        	  or e ; end of dictionary? (next nfa=0)
 2243 08b1 C272 08   	  jp nz,paren_find.begin ; if not, continue
 2244               	  ; End of dictionary, no match found, return.
 2245 08b4 ED5B 7708 	  ld de,(paren_find.string_address)
 2246 08b8 2100 00   	  ld hl,0
 2247 08bb C39D 08   	  jp paren_find.end
 2248               	
 2249               	; ----------------------------------------------
 2250 08be C008      	  _code_header scan_,"SCAN"
 2251               	
 2252               	; doc{
 2253               	;
 2254               	; scan  ( ca c -- ca len )
 2255               	;
 2256               	; c = ascii delimiting character
 2257               	; ca = text address
 2258               	; len = length of the parsed text
 2259               	;
 2260               	; }doc
 2261               	
 2262 08c0 E1        	  pop hl ; delimiter
 2263 08c1 D1        	  pop de ; address
 2264 08c2 D5        	  push de
 2265 08c3 C5        	  push bc ; save Forth IP
 2266 08c4 4D        	  ld c,l ; delimiter
 2267 08c5 2100 00   	  ld hl,0 ; length
 2268 08c8 2B        	  dec hl
 2269 08c9 1B        	  dec de
 2270               	scan.begin:
 2271 08ca 23        	  inc hl
 2272 08cb 13        	  inc de
 2273 08cc 1A        	  ld a,(de)
 2274 08cd B9        	  cp c ; delimiter?
 2275 08ce 20FA      	  jr nz,scan.begin
 2276               	  ; delimiter found
 2277 08d0 C1        	  pop bc ; restore Forth IP
 2278 08d1 C35E 05   	  jp push_hl
 2279               	
 2280               	; ----------------------------------------------
 2281 08d4 D608      	  _code_header skip_,"SKIP"
 2282               	
 2283               	; doc{
GAS LISTING solo_forth.z80s 			page 43


 2284               	;
 2285               	; skip  ( ca1 c -- ca2 )
 2286               	;
 2287               	; }doc
 2288               	
 2289 08d6 D1        	  pop de ; e = delimiter
 2290 08d7 E1        	  pop hl ; ca1
 2291               	skip.begin:
 2292 08d8 7E        	  ld a,(hl)
 2293 08d9 BB        	  cp e ; delimiter?
 2294 08da C25E 05   	  jp nz,push_hl
 2295 08dd 23        	  inc hl
 2296 08de C3D8 08   	  jp skip.begin ; again
 2297               	
 2298               	; ----------------------------------------------
 2299 08e1 E308      	  _code_header chan_,"CHAN"
 2300               	
 2301               	; doc{
 2302               	;
 2303               	; chan  ( n -- )  \ Open channel n for output.
 2304               	;
 2305               	; }doc
 2306               	;
 2307               	; [Code from Spectrum Forth-83.]
 2308               	
 2309 08e3 E1        	  pop hl
 2310 08e4 C5        	  push bc
 2311 08e5 7D        	  ld a,l
 2312 08e6 CD01 16   	  call rom_chan_open
 2313 08e9 C1        	  pop bc
 2314 08ea DDE9      	  _jp_next
 2315               	
 2316               	; ----------------------------------------------
 2317 08ec 610C      	  _colon_header emit_,"EMIT"
 2318               	
 2319               	; XXX TODO -- Add multitasker's `pause` when available.
 2320               	; XXX TODO -- defer
 2321               	
 2322 08ee F808      	  dw paren_emit_
 2323 08f0 C50C 200D 	  dw one_,out_,plus_store_
 2323      EC0B 
 2324 08f6 BC0A      	  dw semicolon_s_
 2325               	
 2326               	; ----------------------------------------------
 2327 08f8 FA08      	  _code_header paren_emit_,"(EMIT)"
 2328               	
 2329               	; doc{
 2330               	;
 2331               	; (emit)  ( b -- )
 2332               	;
 2333               	; Send the character b to the current channel.
 2334               	;
 2335               	; }doc
 2336               	
 2337               	; [Code from Spectrum Forth-83's `TOCH`.]
 2338               	
 2339               	.if latin1_charset_in_bank
GAS LISTING solo_forth.z80s 			page 44


 2340               	  ld e,names_bank
 2341               	  call bank.e ; the charset is in the memory bank
 2342               	.endif
 2343 08fa E1        	  pop hl
 2344 08fb 7D        	  ld a,l
 2345 08fc FD36 52FF 	  ld (iy+sys_scr_ct_offset),0xFF ; no scroll message
 2346 0900 D7        	  rst 0x10
 2347               	.if latin1_charset_in_bank
 2348               	  ld e,default_bank
 2349               	  call bank.e
 2350               	.endif
 2351 0901 DDE9      	  _jp_next
 2352               	
 2353               	; ----------------------------------------------
 2354 0903 610C      	  _colon_header printer_,"PRINTER"
 2355               	
 2356 0905 8306 03   	  _literal 3
 2357 0908 E108      	  dw chan_
 2358 090a BC0A      	  dw semicolon_s_
 2359               	
 2360               	; ----------------------------------------------
 2361 090c 610C      	  _colon_header display_,"DISPLAY"
 2362               	
 2363 090e C90C      	  dw two_
 2364 0910 E108      	  dw chan_
 2365 0912 BC0A      	  dw semicolon_s_
 2366               	
 2367               	; ----------------------------------------------
 2368 0914 1609      	  _code_header key_question_,"KEY?"
 2369               	
 2370               	; doc{
 2371               	;
 2372               	; key?  ( -- f )  \ ANS Forth
 2373               	;
 2374               	; }doc
 2375               	
 2376 0916 3A08 5C   	  ld a,(sys_last_k)
 2377 0919 A7        	  and a
 2378 091a CACF 0C   	  jp z,false_pfa
 2379 091d C3D7 0C   	  jp true_pfa
 2380               	
 2381               	; ----------------------------------------------
 2382 0920 1814      	  _variable_header decode_table_,"DECODE-TABLE"
 2383               	
 2384 0922 0000      	  dw 0 ; no chained table ; XXX TODO
 2385               	              ; Symbol Shift + Letter --> new char
 2386 0924 C65B      	  db 0xC6,'[' ; "Y" 198 (0xC6) "AND"  --> 091 (0x5B) "["
 2387 0926 C55D      	  db 0xC5,']' ; "U" 197 (0xC5) "OR"   --> 093 (0x5D) "]"
 2388 0928 E27E      	  db 0xE2,'~' ; "A" 226 (0xE2) "STOP" --> 126 (0x7E) "~"
 2389 092a C37C      	  db 0xC3,'|' ; "S" 195 (0xC3) "NOT"  --> 124 (0x7C) "|"
 2390 092c CD5C      	  db 0xCD,'\' ; "D" 205 (0xCD) "STEP" --> 092 (0x5C) "\"
 2391 092e CC7B      	  db 0xCC,'{' ; "F" 204 (0xCC) "TO"   --> 123 (0x7B) "{"
 2392 0930 CB7D      	  db 0xCB,'}' ; "G" 203 (0xCB) "THEN" --> 125 (0x7D) "}"
 2393 0932 00        	  db 0 ; end of data
 2394               	
 2395               	  ; "I" 172 (0xAC) "AT"   --> 127 (0x7F) "(C)" ; XXX TODO
 2396               	
GAS LISTING solo_forth.z80s 			page 45


 2397               	; ----------------------------------------------
 2398 0933 3509      	  _code_header decode_char_,"DECODE-CHAR"
 2399               	  
 2400               	; doc{
 2401               	;
 2402               	; decode-char  ( c1 -- c2 )
 2403               	;
 2404               	; }doc
 2405               	
 2406               	  ; XXX TODO
 2407               	
 2408 0935 D1        	  pop de
 2409 0936 2122 09   	  ld hl,decode_table_+2 ; XXX TMP
 2410               	decode_char.begin:
 2411 0939 7E        	  ld a,(hl)
 2412 093a A7        	  and a
 2413 093b 7B        	  ld a,e
 2414               	
 2415               	; ----------------------------------------------
 2416 093c 3E09      	  _code_header paren_key_,"(KEY)"
 2417               	
 2418 093e 3A08 5C   	  ld a,(sys_last_k)
 2419 0941 3248 09   	  ld (previous_key),a
 2420               	paren_key_.begin:
 2421               	  ; call pause ; XXX TODO
 2422               	  ; call rom_keyboard ; XXX TODO not needed if system interrupts are on
 2423 0944 3A08 5C   	  ld a,(sys_last_k)
 2424               	previous_key: equ $+1
 2425 0947 FE00      	  cp 0 ; a different key?
 2426 0949 CA44 09   	  jp z,paren_key_.begin
 2427 094c 2600      	  ld h,0
 2428 094e 6F        	  ld l,a
 2429 094f AF        	  xor a
 2430 0950 3208 5C   	  ld (sys_last_k),a ; delete the last key
 2431 0953 E5        	  push hl
 2432 0954 C333 09   	  jp decode_char_
 2433               	
 2434               	; ----------------------------------------------
 2435 0957 5909      	  _code_header key_,"KEY"
 2436               	
 2437               	; doc{
 2438               	;
 2439               	; key  ( -- c )  \ ANS Forth
 2440               	;
 2441               	; }doc
 2442               	
 2443               	; XXX -- This version works also when the system interrupts are off.
 2444               	; XXX TODO -- Add multitasker's `pause` when available.
 2445               	
 2446 0959 C5        	  push bc
 2447               	key.begin:
 2448 095a CD8E 02   	  call rom_key_scan
 2449 095d 20FB      	  jr nz,key.begin
 2450 095f CD1E 03   	  call rom_key_test
 2451 0962 30F6      	  jr nc,key.begin
 2452 0964 15        	  dec d
 2453 0965 5F        	  ld e,a
GAS LISTING solo_forth.z80s 			page 46


 2454 0966 CD33 03   	  call rom_key_decode
 2455               	key.end:
 2456 0969 2108 5C   	  ld hl,sys_last_k
 2457 096c 3600      	  ld (hl),0
 2458 096e C1        	  pop bc
 2459 096f C387 06   	  jp push_a
 2460               	
 2461               	; ----------------------------------------------
 2462 0972 7409      	  _code_header xkey_,"XKEY"
 2463               	
 2464               	; XXX OLD -- this is the original code from Abersoft Forth.
 2465               	; Too complex. A mode-less version will be coded.
 2466               	
 2467               	; doc{
 2468               	;
 2469               	; xkey  ( -- c )
 2470               	;
 2471               	; Leave the ASCII value of the next terminal key struck.
 2472               	;
 2473               	; }doc
 2474               	
 2475               	  ; XXX TODO simplify, no Spectrum modes
 2476               	
 2477 0974 C5        	  push bc
 2478               	
 2479               	  ; XXX OLD
 2480               	  ; inverse video on
 2481               	  ; ld a,inverse_char
 2482               	  ; rst 0x10
 2483               	  ; ld a,0x01
 2484               	  ; rst 0x10
 2485               	
 2486               	xkey.new_key:
 2487 0975 AF        	  xor a
 2488 0976 3208 5C   	  ld (sys_last_k),a
 2489               	
 2490               	  ; Print cursor:
 2491 0979 3E88      	  ld a,0x88 ; cursor
 2492 097b D7        	  rst 0x10
 2493 097c 3E08      	  ld a,backspace_char
 2494 097e D7        	  rst 0x10
 2495               	
 2496               	xkey.wait_for_key:
 2497 097f 3A08 5C   	  ld a,(sys_last_k)
 2498 0982 A7        	  and a
 2499 0983 28FA      	  jr z,xkey.wait_for_key
 2500               	  ; a = pressed key code
 2501               	
 2502 0985 FE06      	  cp caps_char ; toggle caps lock?
 2503 0987 2009      	  jr nz,xkey.translate
 2504               	  ; toggle caps lock
 2505 0989 216A 5C   	  ld hl,sys_flags2
 2506 098c 3E08      	  ld a,0x08
 2507 098e AE        	  xor (hl)
 2508 098f 77        	  ld (hl),a
 2509 0990 18E3      	  jr xkey.new_key
 2510               	
GAS LISTING solo_forth.z80s 			page 47


 2511               	  ; Translate some chars
 2512               	  ; XXX TODO use a configurable list of chars pairs
 2513               	
 2514               	xkey.translate:
 2515               	xkey.left_bracket:
 2516 0992 FEC6      	  cp 0xC6
 2517 0994 2002      	  jr nz,xkey.right_bracket
 2518 0996 3E5B      	  ld a,'['
 2519               	xkey.right_bracket:
 2520 0998 FEC5      	  cp 0xC5
 2521 099a 2002      	  jr nz,xkey.tilde
 2522 099c 3E5D      	  ld a,']'
 2523               	xkey.tilde:
 2524 099e FEE2      	  cp 0xE2
 2525 09a0 2002      	  jr nz,xkey.vertical_bar
 2526 09a2 3E7E      	  ld a,'~'
 2527               	xkey.vertical_bar:
 2528 09a4 FEC3      	  cp 0xC3
 2529 09a6 2002      	  jr nz,xkey.backslash
 2530 09a8 3E7C      	  ld a,'|'
 2531               	xkey.backslash:
 2532 09aa FECD      	  cp 0xCD
 2533 09ac 2002      	  jr nz,xkey.left_curly_bracket
 2534 09ae 3E5C      	  ld a,'\'
 2535               	xkey.left_curly_bracket:
 2536 09b0 FECC      	  cp 0xCC
 2537 09b2 2002      	  jr nz,xkey.right_curly_bracket
 2538 09b4 3E7B      	  ld a,'{'
 2539               	xkey.right_curly_bracket:
 2540 09b6 FECB      	  cp 0xCB
 2541 09b8 2002      	  jr nz,xkey.end
 2542 09ba 3E7D      	  ld a,'}'
 2543               	
 2544               	xkey.end:
 2545 09bc 6F        	  ld l,a
 2546 09bd 2600      	  ld h,0x00
 2547               	
 2548               	  ; XXX OLD
 2549               	  ; inverse video off
 2550               	  ; ld a,inverse_char
 2551               	  ; rst 0x10
 2552               	  ; ld a,0x00
 2553               	  ; rst 0x10
 2554               	
 2555               	  ; delete the cursor
 2556 09bf 3E20      	  ld a,space_char
 2557 09c1 D7        	  rst 0x10
 2558 09c2 3E08      	  ld a,backspace_char
 2559 09c4 D7        	  rst 0x10
 2560               	
 2561 09c5 C1        	  pop bc
 2562 09c6 C35E 05   	  jp push_hl
 2563               	
 2564               	; ----------------------------------------------
 2565 09c9 610C      	  _colon_header cr_,"CR"
 2566               	
 2567               	; doc{
GAS LISTING solo_forth.z80s 			page 48


 2568               	;
 2569               	; cr  ( -- )
 2570               	;
 2571               	; Transmit a carriage return to the selected output device.
 2572               	;
 2573               	; }doc
 2574               	
 2575 09cb 8306 0D   	  _literal carriage_return_char
 2576 09ce EC08 200D 	  dw emit_,out_,off_
 2576      F90B 
 2577 09d4 BC0A      	  dw semicolon_s_
 2578               	
 2579               	; ----------------------------------------------
 2580 09d6 D809      	  _code_header cmove_up_,"CMOVE>"
 2581               	
 2582 09d8 D9        	  exx
 2583 09d9 C1        	  pop bc
 2584 09da D1        	  pop de
 2585 09db E1        	  pop hl
 2586 09dc CD28 05   	  call move_block_downwards
 2587 09df D9        	  exx
 2588 09e0 DDE9      	  _jp_next
 2589               	
 2590               	; ----------------------------------------------
 2591 09e2 E409      	  _code_header cmove_,"CMOVE"
 2592               	
 2593 09e4 D9        	  exx
 2594 09e5 C1        	  pop bc
 2595 09e6 D1        	  pop de
 2596 09e7 E1        	  pop hl
 2597 09e8 CD22 05   	  call move_block_upwards
 2598 09eb D9        	  exx
 2599 09ec DDE9      	  _jp_next
 2600               	
 2601               	; ----------------------------------------------
 2602 09ee F009      	  _code_header move_,"MOVE"
 2603               	
 2604               	; doc{
 2605               	;
 2606               	; move  ( a1 a2 len -- )
 2607               	;
 2608               	; }doc
 2609               	
 2610 09f0 D9        	  exx
 2611 09f1 C1        	  pop bc
 2612 09f2 D1        	  pop de
 2613               	move.do:
 2614 09f3 E1        	  pop hl
 2615 09f4 CD1C 05   	  call move_block
 2616 09f7 D9        	  exx
 2617 09f8 DDE9      	  _jp_next
 2618               	
 2619               	; ----------------------------------------------
 2620 09fa FC09      	  _code_header smove_,"SMOVE"
 2621               	
 2622               	; doc{
 2623               	;
GAS LISTING solo_forth.z80s 			page 49


 2624               	; smove  ( a1 len a2 -- )
 2625               	; 
 2626               	; Move the string _a1 len_ to _a2_. _a2_ will contain the first
 2627               	; char of the string.
 2628               	;
 2629               	; }doc
 2630               	
 2631               	; swap move
 2632               	
 2633 09fc D9        	  exx
 2634 09fd D1        	  pop de
 2635 09fe C1        	  pop bc
 2636 09ff C3F3 09   	  jp move.do
 2637               	
 2638               	; ----------------------------------------------
 2639 0a02 040A      	  _code_header u_m_star_,"UM*"
 2640               	
 2641               	; doc{
 2642               	;
 2643               	; um*  ( u1 u2 -- ud )  \ ANS Forth
 2644               	;
 2645               	; Multiply _u1_ by _u2_, giving the unsigned double-cell product
 2646               	; _ud_.  All values and arithmetic are unsigned.
 2647               	;
 2648               	; }doc
 2649               	
 2650               	  ; [Code from DZX-Forth.]
 2651               	
 2652 0a04 D1        	  pop de
 2653 0a05 E1        	  pop hl
 2654 0a06 CD46 05   	  call hl_multiplied_by_de_to_hlde_unsigned
 2655 0a09 C35D 05   	  jp push_hlde
 2656               	
 2657               	; ----------------------------------------------
 2658 0a0c 0E0A      	  _code_header u_slash_mod_,'U/MOD' ; XXX OLD
 2659               	
 2660               	; doc{
 2661               	;
 2662               	; u/mod ( ud u1 -- u2 u3 )
 2663               	;
 2664               	; Divide _ud_ by _u1_, giving the quotient _u3_ and the
 2665               	; remainder _u2_.  All values and arithmetic are unsigned. An
 2666               	; ambiguous condition exists if u1 is zero or if the quotient
 2667               	; lies outside the range of a single-cell unsigned integer.
 2668               	;
 2669               	; }doc
 2670               	
 2671               	; XXX FIXME -- This word, whose code is taken from Abersoft
 2672               	; forth, has a bug that affects `(line)`, used by `message`, and
 2673               	; other words that use it: `*/mod`, `mod` and `/mod`, with
 2674               	; certain negative values, return different values in Abersoft
 2675               	; Forth and other Forth systems that have been tested (some of
 2676               	; them are fig-Forth).
 2677               	
 2678 0a0e 2104 00   	  ld hl,0x0004
 2679 0a11 39        	  add hl,sp
 2680 0a12 5E        	  ld e,(hl)
GAS LISTING solo_forth.z80s 			page 50


 2681 0a13 71        	  ld (hl),c
 2682 0a14 23        	  inc hl
 2683 0a15 56        	  ld d,(hl)
 2684 0a16 70        	  ld (hl),b
 2685 0a17 C1        	  pop bc
 2686 0a18 E1        	  pop hl
 2687 0a19 7D        	  ld a,l
 2688 0a1a 91        	  sub c
 2689 0a1b 7C        	  ld a,h
 2690 0a1c 98        	  sbc a,b
 2691 0a1d 3808      	  jr c,l60a0h
 2692 0a1f 21FF FF   	  ld hl,0xFFFF
 2693 0a22 11FF FF   	  ld de,0xFFFF
 2694 0a25 1820      	  jr l60c0h
 2695               	l60a0h:
 2696 0a27 3E10      	  ld a,0x10
 2697               	l60a2h:
 2698 0a29 29        	  add hl,hl
 2699 0a2a 17        	  rla
 2700 0a2b EB        	  ex de,hl
 2701 0a2c 29        	  add hl,hl
 2702 0a2d 3002      	  jr nc,l60aah
 2703 0a2f 13        	  inc de
 2704 0a30 A7        	  and a
 2705               	l60aah:
 2706 0a31 EB        	  ex de,hl
 2707 0a32 1F        	  rra
 2708 0a33 F5        	  push af
 2709 0a34 3005      	  jr nc,l60b4h
 2710 0a36 A5        	  and l
 2711 0a37 ED42      	  sbc hl,bc
 2712 0a39 1807      	  jr l60bbh
 2713               	l60b4h:
 2714 0a3b A7        	  and a
 2715 0a3c ED42      	  sbc hl,bc
 2716 0a3e 3002      	  jr nc,l60bbh
 2717 0a40 09        	  add hl,bc
 2718 0a41 1B        	  dec de
 2719               	l60bbh:
 2720 0a42 13        	  inc de
 2721 0a43 F1        	  pop af
 2722 0a44 3D        	  dec a
 2723 0a45 20E2      	  jr nz,l60a2h
 2724               	l60c0h:
 2725 0a47 C1        	  pop bc
 2726 0a48 E5        	  push hl
 2727 0a49 D5        	  push de
 2728 0a4a DDE9      	  _jp_next
 2729               	
 2730               	.if 0 ; XXX TODO
 2731               	
 2732               	; ----------------------------------------------
 2733               	  _code_header s_m_slash_rem_,"SM/REM"
 2734               	
 2735               	; doc{
 2736               	;
 2737               	; sm/rem  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "s-m-slash-rem"
GAS LISTING solo_forth.z80s 			page 51


 2738               	;
 2739               	; Symmetric division:
 2740               	;
 2741               	;   d1 = n3*n1+n2, sign(n2)=sign(d1) or 0.
 2742               	;
 2743               	; Divide _d1_ by _n1_, giving the symmetric quotient _n3_ and
 2744               	; the remainder _n2_. Input and output stack arguments are
 2745               	; signed.
 2746               	;
 2747               	; }doc
 2748               	
 2749               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2750               	; if the quotient lies outside the range of a single-cell signed
 2751               	; integer.
 2752               	
 2753               	; [Code from DZX-Forth.]
 2754               	
 2755               	  ld l,c
 2756               	  ld h,b
 2757               	  pop bc
 2758               	  pop de
 2759               	  ex (sp),hl
 2760               	  ex de,hl
 2761               	s_m_slash_rem_.1:
 2762               	  call msm
 2763               	  jp msm.2
 2764               	
 2765               	; ----------------------------------------------
 2766               	  _code_header fm_slash_mod_,"FM/MOD"
 2767               	
 2768               	; doc{
 2769               	;
 2770               	; fm/mod  ( d1 n1 -- n2 n3 )  \ ANS Forth,  "f-m-slash-mod"
 2771               	;
 2772               	; Floored division:
 2773               	;
 2774               	;   d1 = n3*n1+n2, n1>n2>=0 or 0>=n2>n1.
 2775               	;
 2776               	; Divide _d1_ by _n1_, giving the floored quotient _n3_ and
 2777               	; the remainder _n2_. Input and output stack arguments are
 2778               	; signed.
 2779               	;
 2780               	; }doc
 2781               	
 2782               	; XXX TODO check: An ambiguous condition exists if n1 is zero or
 2783               	; if the quotient lies outside the range of a single-cell signed
 2784               	; integer.
 2785               	
 2786               	; [Code from DZX-Forth.]
 2787               	
 2788               	  ld l,c
 2789               	  ld h,b
 2790               	  pop bc
 2791               	  pop de
 2792               	  ex (sp),hl
 2793               	  ex de,hl
 2794               	fm_slash_mod.1:
GAS LISTING solo_forth.z80s 			page 52


 2795               	  call msm
 2796               	  ld a,d
 2797               	  or e
 2798               	  jp z,msm.2    ; skip if remainder = 0
 2799               	  dec hl    ; floor
 2800               	  push hl
 2801               	  ex de,hl
 2802               	  add hl,bc
 2803               	  ex de,hl
 2804               	  pop hl
 2805               	  jp msm.2
 2806               	
 2807               	.endif
 2808               	
 2809               	; ----------------------------------------------
 2810 0a4c 4E0A      	  _code_header and_,"AND"
 2811               	
 2812 0a4e D1        	  pop de
 2813 0a4f E1        	  pop hl
 2814 0a50 7B        	  ld a,e
 2815 0a51 A5        	  and l
 2816 0a52 6F        	  ld l,a
 2817 0a53 7A        	  ld a,d
 2818 0a54 A4        	  and h
 2819 0a55 67        	  ld h,a
 2820 0a56 C35E 05   	  jp push_hl
 2821               	
 2822               	; ----------------------------------------------
 2823 0a59 5B0A      	  _code_header or_,"OR"
 2824               	
 2825 0a5b D1        	  pop de
 2826 0a5c E1        	  pop hl
 2827 0a5d 7B        	  ld a,e
 2828 0a5e B5        	  or l
 2829 0a5f 6F        	  ld l,a
 2830 0a60 7A        	  ld a,d
 2831 0a61 B4        	  or h
 2832 0a62 67        	  ld h,a
 2833 0a63 C35E 05   	  jp push_hl
 2834               	
 2835               	; ----------------------------------------------
 2836 0a66 680A      	  _code_header xor_,"XOR"
 2837               	
 2838 0a68 D1        	  pop de
 2839 0a69 E1        	  pop hl
 2840 0a6a 7B        	  ld a,e
 2841 0a6b AD        	  xor l
 2842 0a6c 6F        	  ld l,a
 2843 0a6d 7A        	  ld a,d
 2844 0a6e AC        	  xor h
 2845 0a6f 67        	  ld h,a
 2846 0a70 C35E 05   	  jp push_hl
 2847               	
 2848               	; ----------------------------------------------
 2849 0a73 9C0C      	  _constant_header np_,"NP"
 2850               	
 2851 0a75 2E00      	  dw names_pointer
GAS LISTING solo_forth.z80s 			page 53


 2852               	
 2853               	; ----------------------------------------------
 2854 0a77 9C0C      	  _constant_header np0_,"NP0"
 2855               	
 2856               	  ; XXX OLD -- not used
 2857               	
 2858 0a79 00C0      	  dw names_bank_address
 2859               	
 2860               	; ----------------------------------------------
 2861 0a7b 7D0A      	  _code_header np_fetch_,"NP@"
 2862               	
 2863 0a7d 2A2E 00   	  ld hl,(names_pointer)
 2864 0a80 C35E 05   	  jp push_hl
 2865               	
 2866               	; ----------------------------------------------
 2867 0a83 850A      	  _code_header np_store_,"NP!"
 2868               	
 2869 0a85 E1        	  pop hl
 2870 0a86 222E 00   	  ld (names_pointer),hl
 2871 0a89 DDE9      	  _jp_next
 2872               	
 2873               	; ----------------------------------------------
 2874               	
 2875 0a8b 610C      	  _colon_header comma_np_,",NP"
 2876               	
 2877               	; doc{
 2878               	;
 2879               	; ,np  ( x -- )
 2880               	;
 2881               	; Store _x_ into the next available names memory cell, advancing
 2882               	; the names pointer.
 2883               	;
 2884               	; Note: The names memory is supposed to be paged in.
 2885               	;
 2886               	; }doc
 2887               	
 2888 0a8d 7B0A 450C 	  dw np_fetch_,store_,two_,np_,plus_store_
 2888      C90C 730A 
 2888      EC0B 
 2889 0a97 BC0A      	  dw semicolon_s_
 2890               	
 2891               	; ----------------------------------------------
 2892 0a99 9B0A      	  _code_header sp_fetch_,"SP@"
 2893               	
 2894 0a9b 2100 00   	  ld hl,0x0000
 2895 0a9e 39        	  add hl,sp
 2896 0a9f C35E 05   	  jp push_hl
 2897               	
 2898               	; ----------------------------------------------
 2899 0aa2 A40A      	  _code_header sp_store_,"SP!"
 2900               	
 2901               	; doc{
 2902               	;
 2903               	; sp!  ( a -- )
 2904               	;
 2905               	; Store _a_ into the stack pointer.
 2906               	;
GAS LISTING solo_forth.z80s 			page 54


 2907               	; }doc
 2908               	
 2909               	.if 0 ; XXX OLD
 2910               	  ld hl,(user_variables_pointer)
 2911               	  ld a,(hl)
 2912               	  inc hl
 2913               	  ld h,(hl)
 2914               	  ld l,a
 2915               	.else
 2916 0aa4 E1        	  pop hl
 2917               	.endif
 2918 0aa5 F9        	  ld sp,hl
 2919 0aa6 DDE9      	  _jp_next
 2920               	
 2921               	; ----------------------------------------------
 2922 0aa8 9C0C      	  _constant_header rp_,"RP"
 2923               	
 2924 0aaa 1000      	  dw return_stack_pointer
 2925               	
 2926               	; ----------------------------------------------
 2927 0aac AE0A      	  _code_header rp_fetch_,"RP@"
 2928               	
 2929 0aae 2A10 00   	  ld hl,(return_stack_pointer)
 2930 0ab1 C35E 05   	  jp push_hl
 2931               	
 2932               	; ----------------------------------------------
 2933 0ab4 B60A      	  _code_header rp_store_,"RP!"
 2934               	
 2935               	; doc{
 2936               	;
 2937               	; rp!  ( a -- )
 2938               	;
 2939               	; Store _a_ into the return stack pointer.
 2940               	;
 2941               	; }doc
 2942               	
 2943               	.if 0 ; XXX OLD
 2944               	  ld hl,(user_variables_pointer)
 2945               	  inc hl
 2946               	  inc hl ; hl=address of r0
 2947               	  ld a,(hl)
 2948               	  inc hl
 2949               	  ld h,(hl)
 2950               	  ld l,a
 2951               	.else
 2952 0ab6 E1        	  pop hl
 2953               	.endif
 2954 0ab7 2210 00   	  ld (return_stack_pointer),hl
 2955 0aba DDE9      	  _jp_next
 2956               	
 2957               	; ----------------------------------------------
 2958               	.if 1 ; fig_exit?
 2959 0abc BE0A      	  _code_header semicolon_s_,";S"
 2960               	.else
 2961               	  _code_header exit_,"EXIT"
 2962               	semicolon_s_ equ exit_
 2963               	.endif
GAS LISTING solo_forth.z80s 			page 55


 2964               	
 2965               	
 2966               	; doc{
 2967               	;
 2968               	; ;s  ( -- )  \ fig-Forth
 2969               	;
 2970               	; Return execution to the calling definition.  Unnest one level.
 2971               	;
 2972               	; It is used to stop interpretation of a screen. It is also the
 2973               	; run-time word compiled at the end of a colon-definition which
 2974               	; returns execution to the calling procedure.
 2975               	;
 2976               	; }doc
 2977               	
 2978               	; XXX TODO combine this `;s` with `exit`?
 2979               	
 2980 0abe 2A10 00   	  ld hl,(return_stack_pointer)
 2981 0ac1 4E        	  ld c,(hl)
 2982 0ac2 23        	  inc hl
 2983 0ac3 46        	  ld b,(hl)
 2984 0ac4 23        	  inc hl
 2985 0ac5 2210 00   	  ld (return_stack_pointer),hl
 2986 0ac8 DDE9      	  _jp_next
 2987               	
 2988               	; ----------------------------------------------
 2989 0aca CC0A      	  _code_header pick_,"PICK"
 2990               	
 2991 0acc E1        	  pop hl
 2992 0acd 29        	  add hl,hl
 2993 0ace 39        	  add hl,sp
 2994 0acf C319 0C   	  jp fetch.hl
 2995               	
 2996               	; ----------------------------------------------
 2997 0ad2 0C0B      	  _code_alias_header unloop_,"UNLOOP",,two_r_drop_
 2998               	
 2999               	; doc{
 3000               	;
 3001               	; unloop  ( -- ) ( R: x1 x2 -- )  \ ANS Forth, C
 3002               	;
 3003               	; x1 = loop index
 3004               	; x2 = loop limit
 3005               	;
 3006               	; Discard the loop-control parameters for the current nesting
 3007               	; level. An `unloop` is required for each nesting level before
 3008               	; the definition may be exited with `exit`. An ambiguous
 3009               	; condition exists if the loop-control parameters are
 3010               	; unavailable.
 3011               	;
 3012               	; }doc
 3013               	
 3014               	; ----------------------------------------------
 3015 0ad4 D60A      	  _code_header exhaust_,"EXHAUST"
 3016               	
 3017               	; doc{
 3018               	;
 3019               	; exhaust  ( -- ) ( R: n1 n2 -- n2 n2 )
 3020               	;
GAS LISTING solo_forth.z80s 			page 56


 3021               	; n1 = loop limit
 3022               	; n2 = loop index
 3023               	;
 3024               	; Force termination of a do-loop at the next opportunity by
 3025               	; setting the loop limit equal to the current value of the
 3026               	; index. The index itself remains unchanged, and execution
 3027               	; proceeds normally until `loop` or `+loop` is encountered.
 3028               	;
 3029               	; Note: This is the equivalent of fig-Forth's `leave`.
 3030               	;
 3031               	; }doc
 3032               	
 3033 0ad6 2A10 00   	  ld hl,(return_stack_pointer)
 3034 0ad9 5E        	  ld e,(hl)
 3035 0ada 23        	  inc hl
 3036 0adb 56        	  ld d,(hl)
 3037 0adc 23        	  inc hl
 3038 0add 73        	  ld (hl),e
 3039 0ade 23        	  inc hl
 3040 0adf 72        	  ld (hl),d
 3041 0ae0 DDE9      	  _jp_next
 3042               	
 3043               	; ----------------------------------------------
 3044 0ae2 E40A      	  _code_header question_exhaust_,"?EXHAUST"
 3045               	
 3046               	; doc{
 3047               	;
 3048               	; ?exhaust  ( f -- ) ( R: n1 n2 -- n1 n2 | n2 n2 )
 3049               	;
 3050               	; n1 = loop limit
 3051               	; n2 = loop index
 3052               	; 
 3053               	; If _f_ is not false, force termination of a do-loop at the
 3054               	; next opportunity by setting the loop limit equal to the
 3055               	; current value of the index. The index itself remains
 3056               	; unchanged, and execution proceeds normally until `loop` or
 3057               	; `+loop` is encountered.
 3058               	;
 3059               	; }doc
 3060               	
 3061 0ae4 E1        	  pop hl
 3062 0ae5 67        	  ld h,a
 3063 0ae6 B5        	  or l
 3064 0ae7 C2D6 0A   	  jp nz,exhaust_pfa
 3065 0aea DDE9      	  _jp_next
 3066               	
 3067               	; ----------------------------------------------
 3068 0aec EE0A      	  _code_header to_r_,">R"
 3069               	
 3070               	; doc{
 3071               	;
 3072               	; >r  ( x -- ) ( R: -- x )
 3073               	;
 3074               	; }doc
 3075               	
 3076 0aee D1        	  pop de
 3077 0aef 2A10 00   	  ld hl,(return_stack_pointer)
GAS LISTING solo_forth.z80s 			page 57


 3078 0af2 2B        	  dec hl
 3079 0af3 72        	  ld (hl),d
 3080 0af4 2B        	  dec hl
 3081 0af5 73        	  ld (hl),e
 3082 0af6 2210 00   	  ld (return_stack_pointer),hl
 3083 0af9 DDE9      	  _jp_next
 3084               	
 3085               	; ----------------------------------------------
 3086 0afb FD0A      	  _code_header from_r_,"R>"
 3087               	
 3088               	; doc{
 3089               	;
 3090               	; r>  ( -- x ) ( R: x -- )
 3091               	;
 3092               	; }doc
 3093               	
 3094 0afd 2A10 00   	  ld hl,(return_stack_pointer)
 3095 0b00 5E        	  ld e,(hl)
 3096 0b01 23        	  inc hl
 3097 0b02 56        	  ld d,(hl)
 3098 0b03 23        	  inc hl
 3099 0b04 2210 00   	  ld (return_stack_pointer),hl
 3100 0b07 D5        	  push de
 3101 0b08 DDE9      	  _jp_next
 3102               	
 3103               	; ----------------------------------------------
 3104 0b0a 0C0B      	  _code_header two_r_drop_,"2RDROP"
 3105               	
 3106               	; doc{
 3107               	;
 3108               	; 2rdrop  ( R: x1 x2 -- )
 3109               	;
 3110               	; }doc
 3111               	
 3112 0b0c 2A10 00   	  ld hl,(return_stack_pointer)
 3113 0b0f 1104 00   	  ld de,cell*2
 3114 0b12 19        	  add hl,de
 3115 0b13 2210 00   	  ld (return_stack_pointer),hl
 3116 0b16 DDE9      	  _jp_next
 3117               	
 3118               	; ----------------------------------------------
 3119 0b18 1A0B      	  _code_header r_drop_,"RDROP"
 3120               	
 3121               	; doc{
 3122               	;
 3123               	; rdrop  ( R: x -- )
 3124               	;
 3125               	; }doc
 3126               	
 3127 0b1a 2A10 00   	  ld hl,(return_stack_pointer)
 3128 0b1d 23        	  inc hl
 3129 0b1e 23        	  inc hl
 3130 0b1f 2210 00   	  ld (return_stack_pointer),hl
 3131 0b22 DDE9      	  _jp_next
 3132               	
 3133               	; ----------------------------------------------
 3134 0b24 260B      	  _code_header two_to_r_,"2>R"
GAS LISTING solo_forth.z80s 			page 58


 3135               	
 3136               	; doc{
 3137               	;
 3138               	; 2>r  ( -- x1 x2 ) ( R: x1 x2 -- )
 3139               	;
 3140               	; }doc
 3141               	
 3142 0b26 2A10 00   	  ld hl,(return_stack_pointer)
 3143 0b29 11FC FF   	  ld de,-cell*2
 3144 0b2c 19        	  add hl,de
 3145 0b2d 2210 00   	  ld (return_stack_pointer),hl
 3146 0b30 C33A 0C   	  jp two_store.into_hl_pointer
 3147               	
 3148               	; ----------------------------------------------
 3149 0b33 350B      	  _code_header two_from_r_,"2R>"
 3150               	
 3151               	; 2r>  ( -- x1 x2 ) ( R: x1 x2 -- )
 3152               	
 3153 0b35 2A10 00   	  ld hl,(return_stack_pointer)
 3154 0b38 E5        	  push hl
 3155 0b39 1104 00   	  ld de,cell*2
 3156 0b3c 19        	  add hl,de
 3157 0b3d 2210 00   	  ld (return_stack_pointer),hl
 3158 0b40 C32A 0C   	  jp two_fetch_pfa
 3159               	
 3160               	; ----------------------------------------------
 3161 0b43 450B      	  _code_header two_r_fetch_,"2R@"
 3162               	
 3163 0b45 2A10 00   	  ld hl,(return_stack_pointer)
 3164 0b48 C32B 0C   	  jp two_fetch.hl
 3165               	
 3166               	; ----------------------------------------------
 3167 0b4b 4D0B      	  _code_header r_fetch_,"R@"
 3168               	
 3169 0b4d 2A10 00   	  ld hl,(return_stack_pointer)
 3170 0b50 C319 0C   	  jp fetch.hl
 3171               	
 3172               	; ----------------------------------------------
 3173               	  ; XXX FIXME as Error: confusion in formal parameters
 3174               	  ; because of the string, why?
 3175 0b53 550B      	  _code_header zero_equals_,"0="
 3176               	
 3177 0b55 E1        	  pop hl
 3178 0b56 7D        	  ld a,l
 3179 0b57 B4        	  or h
 3180 0b58 CAD7 0C   	  jp z,true_pfa
 3181 0b5b C3CF 0C   	  jp false_pfa
 3182               	
 3183               	; ----------------------------------------------
 3184 0b5e 600B      	  _code_header zero_not_equals_,"0<>"
 3185               	
 3186 0b60 E1        	  pop hl
 3187 0b61 7D        	  ld a,l
 3188 0b62 B4        	  or h
 3189 0b63 CACF 0C   	  jp z,false_pfa
 3190 0b66 C3D7 0C   	  jp true_pfa
 3191               	
GAS LISTING solo_forth.z80s 			page 59


 3192               	; ----------------------------------------------
 3193 0b69 6B0B      	  _code_header zero_less_than_,"0<"
 3194               	
 3195 0b6b E1        	  pop hl
 3196               	zero_less_.hl: ; XXX entry not used yet
 3197               	  .if size_optimization
 3198               	    add hl,hl ; 11t, 1 byte
 3199               	  .else
 3200               	    ; [Idea from Ace Forth.]
 3201 0b6c CB14      	    rl h ; 8t, 2 bytes
 3202               	  .endif
 3203               	true_if_cy:
 3204 0b6e DAD7 0C   	  jp c,true_pfa
 3205 0b71 C3CF 0C   	  jp false_pfa
 3206               	
 3207               	; ----------------------------------------------
 3208 0b74 760B      	  _code_header zero_greater_than_,"0>"
 3209               	
 3210               	  ; [Code from DZX-Forth.]
 3211               	
 3212 0b76 D1        	  pop de
 3213 0b77 2100 00   	  ld hl,0
 3214 0b7a C3F6 0D   	  jp is_de_less_than_hl
 3215               	
 3216               	; ----------------------------------------------
 3217 0b7d 7F0B      	  _code_header plus_,"+"
 3218               	
 3219 0b7f D1        	  pop de
 3220 0b80 E1        	  pop hl
 3221 0b81 19        	  add hl,de
 3222 0b82 C35E 05   	  jp push_hl
 3223               	
 3224               	; ----------------------------------------------
 3225 0b85 870B      	  _code_header d_plus_,"D+"
 3226               	
 3227               	; XXX TODO move to the library.
 3228               	
 3229               	; [Code from fig-Forth 1.1g.]
 3230               	   
 3231               	              ;                           t  B
 3232               	              ;                           -- --
 3233 0b87 D9        	  exx         ; save ip                   04 01
 3234 0b88 C1        	  pop bc      ; (bc)<--d2h                10 01
 3235 0b89 E1        	  pop hl      ; (hl)<--d2l                10 01
 3236 0b8a F1        	  pop af      ; (af)<--d1h                10 01
 3237 0b8b D1        	  pop de      ; (de)<--d1l                10 01
 3238 0b8c F5        	  push  af    ; (s1)<--d1h                11 01
 3239 0b8d 19        	  add hl,de   ; (hl)<--d2l+d1l=d3l        11 01
 3240 0b8e EB        	  ex  de,hl   ; (de)<--d3l                04 01
 3241 0b8f E1        	  pop hl      ; (hl)<--d1h                10 01
 3242 0b90 ED4A      	  adc hl,bc   ; (hl)<--d1h+d2h+carry=d3h  15 02
 3243 0b92 D5        	  push  de    ; (s2)<--d3l                11 01
 3244 0b93 E5        	  push  hl    ; (s1)<--d3h                11 01
 3245 0b94 D9        	  exx         ; restore ip                04 01
 3246 0b95 DDE9      	  _jp_next    ;                           08 02
 3247               	              ;                          --- --
 3248               	              ;                          134 15 TOTALS
GAS LISTING solo_forth.z80s 			page 60


 3249               	
 3250               	; ----------------------------------------------
 3251 0b97 990B      	  _code_header negate_,"NEGATE"
 3252               	
 3253 0b99 D1        	  pop de
 3254 0b9a 2100 00   	  ld hl,0x0000
 3255 0b9d A7        	  and a
 3256 0b9e ED52      	  sbc hl,de
 3257 0ba0 C35E 05   	  jp push_hl
 3258               	
 3259               	; ----------------------------------------------
 3260 0ba3 A50B      	  _code_header dnegate_,"DNEGATE"
 3261               	
 3262               	  ; XXX TODO move to the disk
 3263               	
 3264 0ba5 E1        	  pop hl
 3265 0ba6 D1        	  pop de
 3266 0ba7 97        	  sub a
 3267 0ba8 93        	  sub e
 3268 0ba9 5F        	  ld e,a
 3269 0baa 3E00      	  ld a,0x00
 3270 0bac 9A        	  sbc a,d
 3271 0bad 57        	  ld d,a
 3272 0bae 3E00      	  ld a,0x00
 3273 0bb0 9D        	  sbc a,l
 3274 0bb1 6F        	  ld l,a
 3275 0bb2 3E00      	  ld a,0x00
 3276 0bb4 9C        	  sbc a,h
 3277 0bb5 67        	  ld h,a
 3278 0bb6 C35D 05   	  jp push_hlde
 3279               	
 3280               	; ----------------------------------------------
 3281 0bb9 BB0B      	  _code_header nip_,"NIP"
 3282               	
 3283 0bbb E1        	  pop hl
 3284 0bbc D1        	  pop de
 3285 0bbd C35E 05   	  jp push_hl
 3286               	
 3287               	; ----------------------------------------------
 3288 0bc0 C20B      	  _code_header tuck_,"TUCK"
 3289               	
 3290 0bc2 E1        	  pop hl
 3291 0bc3 D1        	  pop de
 3292 0bc4 E5        	  push hl
 3293 0bc5 C35D 05   	  jp push_hlde
 3294               	
 3295               	; ----------------------------------------------
 3296 0bc8 CA0B      	  _code_header over_,"OVER"
 3297               	
 3298 0bca D1        	  pop de
 3299 0bcb E1        	  pop hl
 3300 0bcc E5        	  push hl
 3301 0bcd C35D 05   	  jp push_hlde
 3302               	
 3303               	; ----------------------------------------------
 3304 0bd0 D20B      	  _code_header drop_,"DROP"
 3305               	
GAS LISTING solo_forth.z80s 			page 61


 3306 0bd2 E1        	  pop hl
 3307 0bd3 DDE9      	  _jp_next
 3308               	
 3309               	; ----------------------------------------------
 3310 0bd5 D70B      	  _code_header swap_,"SWAP"
 3311               	
 3312 0bd7 E1        	  pop hl
 3313 0bd8 E3        	  ex (sp),hl
 3314 0bd9 C35E 05   	  jp push_hl
 3315               	
 3316               	; ----------------------------------------------
 3317 0bdc DE0B      	  _code_header dup_,"DUP"
 3318               	
 3319 0bde E1        	  pop hl
 3320 0bdf E5        	  push hl
 3321 0be0 C35E 05   	  jp push_hl
 3322               	
 3323               	; ----------------------------------------------
 3324 0be3 E50B      	  _code_header two_dup_,"2DUP"
 3325               	
 3326 0be5 E1        	  pop hl
 3327 0be6 D1        	  pop de
 3328 0be7 D5        	  push de
 3329 0be8 E5        	  push hl
 3330 0be9 C35D 05   	  jp push_hlde
 3331               	
 3332               	; ----------------------------------------------
 3333 0bec EE0B      	  _code_header plus_store_,"+!"
 3334               	
 3335 0bee E1        	  pop hl ; variable address
 3336 0bef D1        	  pop de ; number
 3337 0bf0 7E        	  ld a,(hl)
 3338 0bf1 83        	  add a,e
 3339 0bf2 77        	  ld (hl),a
 3340 0bf3 23        	  inc hl
 3341 0bf4 7E        	  ld a,(hl)
 3342 0bf5 8A        	  adc a,d
 3343 0bf6 77        	  ld (hl),a
 3344 0bf7 DDE9      	  _jp_next
 3345               	
 3346               	; ----------------------------------------------
 3347 0bf9 FB0B      	  _code_header off_,"OFF"
 3348               	
 3349 0bfb E1        	  pop hl
 3350 0bfc 3600      	  ld (hl),0
 3351 0bfe 23        	  inc hl
 3352 0bff 3600      	  ld (hl),0
 3353 0c01 DDE9      	  _jp_next
 3354               	
 3355               	; ----------------------------------------------
 3356 0c03 050C      	  _code_header on_,"ON"
 3357               	
 3358 0c05 E1        	  pop hl
 3359               	.if true=1
 3360 0c06 3601      	  ld (hl),1
 3361 0c08 23        	  inc hl
 3362 0c09 3600      	  ld (hl),0
GAS LISTING solo_forth.z80s 			page 62


 3363               	.else
 3364               	  ld (hl),0xFF
 3365               	  inc hl
 3366               	  ld (hl),0xFF
 3367               	.endif
 3368 0c0b DDE9      	  _jp_next
 3369               	
 3370               	; ----------------------------------------------
 3371 0c0d 0F0C      	  _code_header toggle_,"TOGGLE"
 3372               	
 3373               	; doc{
 3374               	;
 3375               	; toggle  ( a b -- )  \ fig-Forth
 3376               	;
 3377               	; Complement the contents of _a_ by the bit pattern _b_.
 3378               	;
 3379               	; }doc
 3380               	
 3381 0c0f D1        	  pop de ; e = bit pattern
 3382 0c10 E1        	  pop hl ; address
 3383 0c11 7E        	  ld a,(hl)
 3384 0c12 AB        	  xor e
 3385 0c13 77        	  ld (hl),a
 3386 0c14 DDE9      	  _jp_next
 3387               	
 3388               	; ----------------------------------------------
 3389 0c16 180C      	  _code_header fetch_,"@"
 3390               	
 3391 0c18 E1        	  pop hl
 3392               	fetch.hl:
 3393 0c19 5E        	  ld e,(hl)
 3394 0c1a 23        	  inc hl
 3395 0c1b 56        	  ld d,(hl)
 3396 0c1c D5        	  push de
 3397 0c1d DDE9      	  _jp_next
 3398               	
 3399               	; ----------------------------------------------
 3400 0c1f 210C      	  _code_header c_fetch_,"C@"
 3401               	
 3402 0c21 E1        	  pop hl
 3403 0c22 6E        	  ld l,(hl)
 3404 0c23 2600      	  ld h,0x00
 3405 0c25 C35E 05   	  jp push_hl
 3406               	
 3407               	; ----------------------------------------------
 3408 0c28 2A0C      	  _code_header two_fetch_,"2@"
 3409               	
 3410 0c2a E1        	  pop hl ; address
 3411               	two_fetch.hl:
 3412 0c2b 5E        	  ld e,(hl)     ; 07t  1
 3413 0c2c 23        	  inc hl        ; 06t  1
 3414 0c2d 56        	  ld d,(hl)     ; 07t  1 ; de = low part
 3415 0c2e 23        	  inc hl        ; 06t  1
 3416 0c2f 7E        	  ld a,(hl)     ; 07t  1
 3417 0c30 23        	  inc hl        ; 06t  1
 3418 0c31 66        	  ld h,(hl)     ; 07t  1
 3419 0c32 6F        	  ld l,a        ; 04t  1 ; hl = high part
GAS LISTING solo_forth.z80s 			page 63


 3420 0c33 EB        	  ex de,hl      ; 04t  1
 3421 0c34 C35D 05   	  jp push_hlde ; 10t  3
 3422               	                ; 11t  0 push de
 3423               	                ; 11t  0 push hl
 3424               	                ; 86t 12 TOTAL
 3425               	
 3426               	; ----------------------------------------------
 3427 0c37 390C      	  _code_header two_store_,"2!"
 3428               	
 3429 0c39 E1        	  pop hl
 3430               	two_store.into_hl_pointer:
 3431 0c3a D1        	  pop de
 3432 0c3b 73        	  ld (hl),e
 3433 0c3c 23        	  inc hl
 3434 0c3d 72        	  ld (hl),d
 3435 0c3e 23        	  inc hl
 3436               	  .if size_optimization
 3437               	    jp store.into_hl_pointer
 3438               	  .else
 3439 0c3f D1        	    pop de
 3440 0c40 73        	    ld (hl),e
 3441 0c41 23        	    inc hl
 3442 0c42 72        	    ld (hl),d
 3443 0c43 DDE9      	    _jp_next
 3444               	  .endif
 3445               	
 3446               	; ----------------------------------------------
 3447 0c45 470C      	  _code_header store_,"!"
 3448               	
 3449 0c47 E1        	  pop hl
 3450               	store.into_hl_pointer:
 3451 0c48 D1        	  pop de
 3452               	store.de_into_hl_pointer:
 3453 0c49 73        	  ld (hl),e
 3454 0c4a 23        	  inc hl
 3455 0c4b 72        	  ld (hl),d
 3456 0c4c DDE9      	  _jp_next
 3457               	
 3458               	; ----------------------------------------------
 3459 0c4e 500C      	  _code_header c_store_,"C!"
 3460               	
 3461 0c50 E1        	  pop hl
 3462 0c51 D1        	  pop de
 3463 0c52 73        	  ld (hl),e
 3464 0c53 DDE9      	  _jp_next
 3465               	
 3466               	; ----------------------------------------------
 3467 0c55 610C      	  _colon_header colon_,":",immediate
 3468               	
 3469 0c57 2E0F      	  dw question_exec_
 3470 0c59 FF0E      	  dw store_csp_
 3471 0c5b C313 940F 	  dw header_,right_bracket_
 3472 0c5f C50F      	  dw paren_semicolon_code_
 3473               	do_colon:
 3474 0c61 2A10 00   	  ld hl,(return_stack_pointer)
 3475 0c64 2B        	  dec hl
 3476 0c65 70        	  ld (hl),b
GAS LISTING solo_forth.z80s 			page 64


 3477 0c66 2B        	  dec hl
 3478 0c67 71        	  ld (hl),c
 3479 0c68 2210 00   	  ld (return_stack_pointer),hl ; save the updated IP
 3480 0c6b 13        	  inc de ; de=pfa
 3481 0c6c 4B        	  ld c,e
 3482 0c6d 42        	  ld b,d ; bc=pfa
 3483               	do_colon_end: ; XXX TMP for debugging
 3484 0c6e DDE9      	  _jp_next
 3485               	
 3486               	; ----------------------------------------------
 3487 0c70 610C      	  _colon_header noname_,":NONAME",immediate
 3488               	
 3489               	  ; [Code from the Afera library.]
 3490               	
 3491               	  ; XXX TODO move to the disk? problem: do_colon
 3492               	
 3493 0c72 2E0F      	  dw question_exec_
 3494 0c74 9C0F      	  dw smudge_  ; deactivate the effect of the next `smudge` in `;`
 3495 0c76 8C0D      	  dw here_ ; cfa
 3496 0c78 FF0E      	  dw store_csp_
 3497 0c7a 8D06 610C 	  dw lit_,do_colon,comma_ ; create the code field
 3497      AE0D 
 3498 0c80 940F      	  dw right_bracket_
 3499 0c82 BC0A      	  dw semicolon_s_
 3500               	
 3501               	; ----------------------------------------------
 3502 0c84 610C      	  _colon_header semicolon_,";",immediate
 3503               	
 3504 0c86 440F      	  dw question_csp_
 3505 0c88 640F BC0A 	  dw compile_,semicolon_s_
 3506 0c8c 9C0F      	  dw smudge_
 3507 0c8e 8C0F      	  dw left_bracket_
 3508 0c90 BC0A      	  dw semicolon_s_
 3509               	
 3510               	; ----------------------------------------------
 3511               	  _header noop_,"NOOP"
 3512               	
 3513               	; doc{
 3514               	;
 3515               	; noop  ( -- )
 3516               	;
 3517               	; }doc
 3518               	
 3519 0c92 5F05      	  dw next ; code field
 3520               	
 3521               	; ----------------------------------------------
 3522 0c94 610C      	  _colon_header constant_,"CONSTANT"
 3523               	
 3524 0c96 1014 AE0D 	  dw create_,comma_
 3525 0c9a C50F      	  dw paren_semicolon_code_
 3526               	do_constant:
 3527 0c9c 13        	  inc de    ; de=pfa
 3528 0c9d EB        	  ex de,hl  ; hl=pfa
 3529 0c9e C319 0C   	  jp fetch.hl
 3530               	
 3531               	; ----------------------------------------------
 3532 0ca1 610C      	  _colon_header variable_,"VARIABLE"
GAS LISTING solo_forth.z80s 			page 65


 3533               	
 3534               	; doc{
 3535               	;
 3536               	; variable ( "name" -- )  \ ANS Forth
 3537               	;
 3538               	; Parse _name_.  Create a definition for _name_ with the
 3539               	; execution semantics defined below. Reserve one cell of data
 3540               	; space.
 3541               	;
 3542               	;    _name_ is referred to as a variable.
 3543               	;
 3544               	;          name Execution: ( -- a )
 3545               	;
 3546               	;    _a_ is the address of the reserved cell. A program is
 3547               	;    responsible for initializing the contents of the reserved
 3548               	;    cell.
 3549               	;
 3550               	; }doc
 3551               	
 3552 0ca3 1014 7E0D 	  dw create_,cell_,allot_
 3552      940D 
 3553 0ca9 BC0A      	  dw semicolon_s_
 3554               	
 3555               	; ----------------------------------------------
 3556 0cab 610C      	  _colon_header user_,"USER"
 3557               	
 3558               	  ; XXX TODO -- Use only one byte for storage,
 3559               	  ; but defining `cconstant` only for this does not seem a good idea.
 3560               	
 3561 0cad 940C      	  dw constant_
 3562 0caf C50F      	  dw paren_semicolon_code_
 3563               	do_user:
 3564               	;  _z80_border_wait 5 ; XXX INFORMER
 3565 0cb1 13        	  inc de      ; de=pfa
 3566 0cb2 EB        	  ex de,hl
 3567 0cb3 5E        	  ld e,(hl)
 3568 0cb4 1600      	  ld d,0x00   ; de = index of the user variable
 3569 0cb6 2A0E 00   	  ld hl,(user_variables_pointer)
 3570 0cb9 19        	  add hl,de   ; hl= address of the user variable
 3571               	;  _z80_border_wait 6 ; XXX INFORMER
 3572 0cba C35E 05   	  jp push_hl
 3573               	
 3574               	; ----------------------------------------------
 3575 0cbd 9C0C      	  _constant_header msg_scr_,"MSG-SCR"
 3576               	
 3577               	; doc{
 3578               	;
 3579               	; msg-scr  ( -- n )
 3580               	;
 3581               	; Constant: Screen where the error messages start.
 3582               	;
 3583               	; }doc
 3584               	
 3585               	; Idea taken from lina ciforth.
 3586               	
 3587 0cbf 0400      	  dw 0x0004
 3588               	
GAS LISTING solo_forth.z80s 			page 66


 3589               	; ----------------------------------------------
 3590 0cc1 9C0C      	  _constant_header zero_,"0"
 3591               	
 3592 0cc3 0000      	  dw 0x0000
 3593               	
 3594               	; ----------------------------------------------
 3595 0cc5 9C0C      	  _constant_header one_,"1"
 3596               	
 3597 0cc7 0100      	  dw 0x0001
 3598               	
 3599               	; ----------------------------------------------
 3600 0cc9 9C0C      	  _constant_header two_,"2"
 3601               	
 3602 0ccb 0200      	  dw 0x0002
 3603               	
 3604               	; ----------------------------------------------
 3605 0ccd CF0C      	  _code_header false_,"FALSE"
 3606               	
 3607               	; doc{
 3608               	;
 3609               	; false  ( -- f )
 3610               	;
 3611               	; }doc
 3612               	
 3613 0ccf 2100 00   	  ld hl,false
 3614 0cd2 C35E 05   	  jp push_hl
 3615               	
 3616               	; ----------------------------------------------
 3617 0cd5 D70C      	  _code_header true_,"TRUE"
 3618               	
 3619               	; doc{
 3620               	;
 3621               	; true  ( -- t )
 3622               	;
 3623               	; }doc
 3624               	
 3625 0cd7 2101 00   	  ld hl,true
 3626 0cda C35E 05   	  jp push_hl
 3627               	
 3628               	; ----------------------------------------------
 3629 0cdd 9C0C      	  _constant_header b_l_,"BL"
 3630               	
 3631               	; doc{
 3632               	;
 3633               	; bl  ( -- n )
 3634               	;
 3635               	; }doc
 3636               	
 3637 0cdf 2000      	  dw space_char
 3638               	
 3639               	; ----------------------------------------------
 3640 0ce1 9C0C      	  _constant_header c_slash_l_,"C/L"
 3641               	
 3642 0ce3 4000      	  dw characters_per_line
 3643               	
 3644               	; ----------------------------------------------
 3645 0ce5 9C0C      	  _constant_header l_slash_scr_,"L/SCR"
GAS LISTING solo_forth.z80s 			page 67


 3646               	
 3647 0ce7 1000      	  dw lines_per_screen
 3648               	
 3649               	; ----------------------------------------------
 3650 0ce9 9C0C      	  _constant_header disk_buffer_,"DISK-BUFFER"
 3651               	
 3652 0ceb 0703      	  dw disk_buffer
 3653               	
 3654               	; ----------------------------------------------
 3655 0ced 9C0C      	  _constant_header b_slash_buf_,"B/BUF"
 3656               	
 3657 0cef 0002      	  dw data_bytes_per_buffer
 3658               	
 3659               	; ----------------------------------------------
 3660 0cf1 9C0C      	  _constant_header b_slash_scr_,"B/SCR"
 3661               	
 3662 0cf3 0200      	  dw blocks_per_screen
 3663               	
 3664               	; ----------------------------------------------
 3665 0cf5 9C0C      	  _constant_header scr_slash_disk_,"SCR/DISK"
 3666               	
 3667 0cf7 0C03      	  dw screens_per_disk
 3668               	
 3669               	; ----------------------------------------------
 3670 0cf9 9C0C      	  _constant_header hash_vocs_,"#VOCS"
 3671               	
 3672 0cfb 0800      	  dw max_search_order
 3673               	
 3674               	; ----------------------------------------------
 3675 0cfd 610C      	  _colon_header plus_origin_,"+ORIGIN"
 3676               	
 3677               	; doc{
 3678               	;
 3679               	; +origin  ( n -- a )  \ fig-Forth
 3680               	;
 3681               	; Leave the memory address relative by _n_ to the origin
 3682               	; parameter area.  _n_ is the minimum address unit, either byte
 3683               	; or word.  This definition is used to access or modify the
 3684               	; boot-up parameters at the origin area.
 3685               	;
 3686               	; }doc
 3687               	
 3688 0cff 8D06 005E 	  dw lit_,origin,plus_
 3688      7D0B 
 3689 0d05 BC0A      	  dw semicolon_s_
 3690               	
 3691               	; ----------------------------------------------
 3692 0d07 B10C      	  _user_variable_header sp0_,"SP0"
 3693               	
 3694 0d09 00        	  db 0x00
 3695               	
 3696               	; ----------------------------------------------
 3697 0d0a B10C      	  _user_variable_header rp0_,"RP0"
 3698               	
 3699 0d0c 02        	  db 0x02
 3700               	
 3701               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 68


 3702 0d0d B10C      	  _user_variable_header width_,"WIDTH"
 3703               	
 3704               	  ; XXX TODO normal variable
 3705               	
 3706 0d0f 06        	  db 0x06
 3707               	
 3708               	; ----------------------------------------------
 3709 0d10 B10C      	  _user_variable_header warning_,"WARNING"
 3710               	
 3711 0d12 08        	  db 0x08
 3712               	
 3713               	; ----------------------------------------------
 3714 0d13 B10C      	  _user_variable_header dp_,"DP"
 3715               	
 3716               	  ; XXX TODO why this is a user variable?
 3717               	  ; XXX TODO normal variable
 3718               	
 3719 0d15 0C        	  db 0x0C
 3720               	
 3721               	; ----------------------------------------------
 3722 0d16 1814      	  _variable_header voc_link_,"VOC-LINK"
 3723               	
 3724 0d18 5D06      	  dw assembler_vocabulary_link ; link to the latest vocabulary defined
 3725               	
 3726               	; ----------------------------------------------
 3727 0d1a B10C      	  _user_variable_header blk_,"BLK"
 3728               	
 3729               	  ; XXX TODO normal variable
 3730               	
 3731 0d1c 10        	  db 0x10
 3732               	
 3733               	; ----------------------------------------------
 3734 0d1d B10C      	  _user_variable_header to_in_,">IN"
 3735               	
 3736               	  ; XXX TODO normal variable
 3737               	
 3738 0d1f 12        	  db 0x12
 3739               	
 3740               	; ----------------------------------------------
 3741 0d20 B10C      	  _user_variable_header out_,"OUT"
 3742               	
 3743               	  ; XXX TODO In Forth 83 it's a user variable too, but it's called `#out`.
 3744               	  ; XXX TODO rename to `#emitted`
 3745 0d22 14        	  db 0x14
 3746               	
 3747               	; ----------------------------------------------
 3748 0d23 B10C      	  _user_variable_header scr_,'SCR' ; XXX OLD -- used by `list`
 3749               	
 3750 0d25 16        	  db 0x16
 3751               	
 3752               	; ----------------------------------------------
 3753 0d26 B10C      	  _user_variable_header context_,"CONTEXT"
 3754               	
 3755 0d28 2A        	  db 0x2A
 3756               	
 3757               	; ----------------------------------------------
 3758 0d29 B10C      	  _user_variable_header current_,"CURRENT"
GAS LISTING solo_forth.z80s 			page 69


 3759               	
 3760 0d2b 1C        	  db 0x1C
 3761               	
 3762               	; ----------------------------------------------
 3763 0d2c B10C      	  _user_variable_header state_,"STATE"
 3764               	
 3765 0d2e 1E        	  db 0x1E
 3766               	
 3767               	; ----------------------------------------------
 3768 0d2f B10C      	  _user_variable_header base_,"BASE"
 3769               	
 3770 0d31 20        	  db 0x20
 3771               	
 3772               	; ----------------------------------------------
 3773 0d32 B10C      	  _user_variable_header dpl_,"DPL"
 3774               	
 3775 0d34 22        	  db 0x22
 3776               	
 3777               	; ----------------------------------------------
 3778 0d35 B10C      	  _user_variable_header fld_,"FLD"
 3779               	
 3780 0d37 24        	  db 0x24
 3781               	
 3782               	; ----------------------------------------------
 3783 0d38 B10C      	  _user_variable_header csp_,"CSP"
 3784               	
 3785 0d3a 26        	  db 0x26
 3786               	
 3787               	; ----------------------------------------------
 3788 0d3b B10C      	  _user_variable_header r_hash_,"R#"
 3789               	
 3790               	  ; XXX OLD
 3791 0d3d 28        	  db 0x28
 3792               	
 3793               	; ----------------------------------------------
 3794 0d3e B10C      	  _user_variable_header hld_,"HLD"
 3795               	
 3796 0d40 1A        	  db 0x1A
 3797               	
 3798               	; ----------------------------------------------
 3799 0d41 9C0C      	  _constant_header tib_,"TIB"
 3800               	
 3801               	; doc{
 3802               	;
 3803               	; tib  ( -- ca )  \ ANS-Forth
 3804               	;
 3805               	; Address of the terminal input buffer.
 3806               	;
 3807               	; }doc
 3808               	
 3809 0d43 1402      	  dw terminal_input_buffer
 3810               	
 3811               	; ----------------------------------------------
 3812 0d45 1814      	  _variable_header number_tib_,"#TIB"
 3813               	
 3814 0d47 5000      	  dw bytes_per_terminal_input_buffer
 3815               	
GAS LISTING solo_forth.z80s 			page 70


 3816               	; ----------------------------------------------
 3817 0d49 610C      	  _colon_header recurse_,"RECURSE",immediate
 3818               	
 3819               	; doc{
 3820               	;
 3821               	; recurse  ( -- )  \ ANS Forth
 3822               	;
 3823               	; }doc
 3824               	
 3825 0d4b 420E DF0E 	  dw latest_,nfa_to_cfa_,compile_comma_
 3825      BA0D 
 3826 0d51 BC0A      	  dw semicolon_s_
 3827               	
 3828               	; ----------------------------------------------
 3829 0d53 550D      	  _code_header one_plus_,"1+"
 3830               	
 3831 0d55 E1        	  pop hl
 3832 0d56 23        	  inc hl
 3833 0d57 C35E 05   	  jp push_hl
 3834               	
 3835               	; ----------------------------------------------
 3836 0d5a 5C0D      	  _code_header two_plus_,"2+"
 3837               	
 3838 0d5c E1        	  pop hl
 3839 0d5d 23        	  inc hl
 3840 0d5e 23        	  inc hl
 3841 0d5f C35E 05   	  jp push_hl
 3842               	
 3843               	; ----------------------------------------------
 3844 0d62 6F0D      	  _code_alias_header cell_minus_,"CELL-",,two_minus_
 3845               	
 3846               	; ----------------------------------------------
 3847 0d64 5C0D      	  _code_alias_header cell_plus_,"CELL+",,two_plus_
 3848               	
 3849               	; ----------------------------------------------
 3850 0d66 680D      	  _code_header one_minus_,"1-"
 3851               	
 3852 0d68 E1        	  pop hl
 3853 0d69 2B        	  dec hl
 3854 0d6a C35E 05   	  jp push_hl
 3855               	
 3856               	; ----------------------------------------------
 3857 0d6d 6F0D      	  _code_header two_minus_,"2-"
 3858               	
 3859 0d6f E1        	  pop hl
 3860 0d70 2B        	  dec hl
 3861 0d71 2B        	  dec hl
 3862 0d72 C35E 05   	  jp push_hl
 3863               	
 3864               	; ----------------------------------------------
 3865 0d75 770D      	  _code_header two_star_,"2*"
 3866               	
 3867               	; doc{
 3868               	;
 3869               	; 2*  ( x1 -- x2 )  \ ANS Forth
 3870               	;
 3871               	; _x2_ is the result of shifting _x1_ one bit toward the
GAS LISTING solo_forth.z80s 			page 71


 3872               	; most-significant bit, filling the vacated least-significant
 3873               	; bit with zero.
 3874               	;
 3875               	; This is the same as `1 lshift`.
 3876               	;
 3877               	; }doc
 3878               	
 3879               	  ; [Code from DZX-Forth. Documentation partly based on lina
 3880               	  ; ciforth.]
 3881               	
 3882 0d77 E1        	  pop hl
 3883 0d78 29        	  add hl,hl
 3884 0d79 C35E 05   	  jp push_hl
 3885               	
 3886               	; ----------------------------------------------
 3887 0d7c 770D      	  _code_alias_header cells_,"CELLS",,two_star_
 3888               	
 3889               	; ----------------------------------------------
 3890 0d7e 9C0C      	  _constant_header cell_,"CELL"
 3891               	
 3892 0d80 0200      	  dw 0x0002
 3893               	
 3894               	; ----------------------------------------------
 3895 0d82 840D      	  _code_header two_slash_,"2/"
 3896               	
 3897               	; doc{
 3898               	;
 3899               	; 2/  ( x1 -- x2 )  \ ANS Forth
 3900               	;
 3901               	; _x2_ is the result of shifting _x1_ one bit toward the
 3902               	; least-significant bit, leaving the most-significant bit
 3903               	; unchanged.
 3904               	;
 3905               	; This is the same as `s>d 2 fm/mod swap drop`. It is not the same
 3906               	; as `2 /`, nor is it the same as `1 rshift`.
 3907               	;
 3908               	; }doc
 3909               	
 3910               	  ; [Code from Spectrum Forth-83. Documentation partly based on lina
 3911               	  ; ciforth.]
 3912               	
 3913 0d84 E1        	  pop hl
 3914 0d85 CB2C      	  sra h
 3915 0d87 CB1D      	  rr l
 3916 0d89 C35E 05   	  jp push_hl
 3917               	
 3918               	; ----------------------------------------------
 3919 0d8c 610C      	  _colon_header here_,"HERE"
 3920               	
 3921 0d8e 130D 160C 	  dw dp_,fetch_
 3922 0d92 BC0A      	  dw semicolon_s_
 3923               	
 3924               	; ----------------------------------------------
 3925 0d94 610C      	  _colon_header allot_,"ALLOT"
 3926               	
 3927 0d96 130D EC0B 	  dw dp_,plus_store_
 3928 0d9a BC0A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 72


 3929               	
 3930               	; ----------------------------------------------
 3931 0d9c 610C      	  _colon_header s_comma_,"s,"
 3932               	
 3933               	; doc{
 3934               	; s,  ( ca len -- )
 3935               	; }doc
 3936               	
 3937 0d9e DC0B C20D 	  dw dup_,c_comma_,tuck_,here_,swap_,cmove_,allot_
 3937      C00B 8C0D 
 3937      D50B E209 
 3937      940D 
 3938 0dac BC0A      	  dw semicolon_s_
 3939               	
 3940               	; ----------------------------------------------
 3941 0dae 610C      	  _colon_header comma_,","
 3942               	
 3943 0db0 8C0D 450C 	  dw here_,store_,two_,allot_
 3943      C90C 940D 
 3944 0db8 BC0A      	  dw semicolon_s_
 3945               	
 3946               	; ----------------------------------------------
 3947 0dba 610C      	  _colon_header compile_comma_,"COMPILE,"
 3948               	
 3949               	; doc{
 3950               	;
 3951               	; compile,  ( cfa -- )
 3952               	;
 3953               	; }doc
 3954               	
 3955 0dbc 210F AE0D 	  dw question_comp_,comma_
 3956 0dc0 BC0A      	  dw semicolon_s_
 3957               	
 3958               	; ----------------------------------------------
 3959 0dc2 610C      	  _colon_header c_comma_,"C,"
 3960               	
 3961 0dc4 8C0D 4E0C 	  dw here_,c_store_,one_,allot_
 3961      C50C 940D 
 3962 0dcc BC0A      	  dw semicolon_s_
 3963               	
 3964               	; ----------------------------------------------
 3965 0dce D00D      	  _code_header minus_,"-"
 3966               	
 3967 0dd0 D1        	  pop de
 3968 0dd1 E1        	  pop hl
 3969 0dd2 A7        	  and a
 3970 0dd3 ED52      	  sbc hl,de
 3971 0dd5 C35E 05   	  jp push_hl
 3972               	
 3973               	; ----------------------------------------------
 3974 0dd8 DA0D      	  _code_header not_equals_,"<>"
 3975               	
 3976 0dda D1        	  pop de
 3977 0ddb E1        	  pop hl
 3978 0ddc CD0C 05   	  call compare_de_hl_unsigned
 3979               	false_if_z: ; XXX entry not used yet
 3980 0ddf CACF 0C   	  jp z,false_pfa
GAS LISTING solo_forth.z80s 			page 73


 3981 0de2 C3D7 0C   	  jp true_pfa
 3982               	
 3983               	; ----------------------------------------------
 3984 0de5 E70D      	  _code_header equals_,"="
 3985               	
 3986 0de7 D1        	  pop de
 3987 0de8 E1        	  pop hl
 3988 0de9 CD0C 05   	  call compare_de_hl_unsigned
 3989               	true_if_z: ; XXX entry not used yet
 3990 0dec CAD7 0C   	  jp z,true_pfa
 3991 0def C3CF 0C   	  jp false_pfa
 3992               	
 3993               	; ----------------------------------------------
 3994 0df2 F40D      	  _code_header less_than_,"<"
 3995               	
 3996 0df4 D1        	  pop de
 3997 0df5 E1        	  pop hl
 3998               	is_de_less_than_hl:
 3999 0df6 CD12 05   	  call compare_de_hl_signed
 4000               	  .if size_optimization
 4001               	    jp true_if_cy
 4002               	  .else
 4003 0df9 DAD7 0C   	    jp c,true_pfa
 4004 0dfc C3CF 0C   	    jp false_pfa
 4005               	  .endif
 4006               	
 4007               	; ----------------------------------------------
 4008 0dff 010E      	  _code_header u_greater_than_,"U>"
 4009               	
 4010 0e01 E1        	  pop hl
 4011               	u_greater_than.hl:
 4012 0e02 D1        	  pop de
 4013 0e03 C30A 0E   	  jp u_less_than.de_hl
 4014               	
 4015               	; ----------------------------------------------
 4016 0e06 080E      	  _code_header u_less_than_,"U<"
 4017               	
 4018 0e08 D1        	  pop de
 4019 0e09 E1        	  pop hl
 4020               	u_less_than.de_hl:
 4021 0e0a CD0C 05   	  call compare_de_hl_unsigned
 4022               	  .if size_optimization
 4023               	    jp true_if_cy
 4024               	  .else
 4025 0e0d DAD7 0C   	    jp c,true_pfa
 4026 0e10 C3CF 0C   	    jp false_pfa
 4027               	  .endif
 4028               	
 4029               	; ----------------------------------------------
 4030 0e13 150E      	  _code_header greater_than_,">"
 4031               	
 4032 0e15 E1        	  pop hl
 4033 0e16 D1        	  pop de
 4034 0e17 C3F6 0D   	  jp is_de_less_than_hl
 4035               	
 4036               	; ----------------------------------------------
 4037 0e1a 1C0E      	  _code_header rot_,"ROT"
GAS LISTING solo_forth.z80s 			page 74


 4038               	
 4039 0e1c D1        	  pop de
 4040 0e1d E1        	  pop hl
 4041 0e1e E3        	  ex (sp),hl
 4042 0e1f C35D 05   	  jp push_hlde
 4043               	
 4044               	; ----------------------------------------------
 4045 0e22 610C      	  _colon_header space_,"SPACE"
 4046               	
 4047 0e24 DD0C EC08 	  dw b_l_,emit_
 4048 0e28 BC0A      	  dw semicolon_s_
 4049               	
 4050               	; ----------------------------------------------
 4051 0e2a 610C      	  _colon_header question_dup_,"?DUP"
 4052               	
 4053 0e2c DC0B      	  dw dup_
 4054 0e2e 6007 340E 	  dw zero_branch_,question_dup.end
 4055 0e32 DC0B      	  dw dup_
 4056               	question_dup.end:
 4057 0e34 BC0A      	  dw semicolon_s_
 4058               	
 4059               	; ----------------------------------------------
 4060 0e36 5C0D      	  _code_alias_header lfa_to_nfa_,"LFA>NFA",,two_plus_
 4061               	
 4062               	; ----------------------------------------------
 4063 0e38 610C      	  _colon_header trail_,"TRAIL"
 4064               	
 4065               	; doc{
 4066               	;
 4067               	; trail ( -- nfa )
 4068               	;
 4069               	; Leave the name field address of the topmost word in the
 4070               	; `context` vocabulary.
 4071               	;
 4072               	; }doc
 4073               	
 4074 0e3a 260D 160C 	  dw context_,fetch_,fetch_
 4074      160C 
 4075 0e40 BC0A      	  dw semicolon_s_
 4076               	
 4077               	; ----------------------------------------------
 4078 0e42 610C      	  _colon_header latest_,"LATEST"
 4079               	
 4080               	; doc{
 4081               	;
 4082               	; latest ( -- nfa )  \ ANS Forth
 4083               	;
 4084               	; Leave the name field address of the topmost word in the
 4085               	; `current` vocabulary.
 4086               	;
 4087               	; }doc
 4088               	
 4089 0e44 290D 160C 	  dw current_,fetch_,fetch_
 4089      160C 
 4090 0e4a BC0A      	  dw semicolon_s_
 4091               	
 4092               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 75


 4093 0e4c 610C      	  _colon_header pfa_to_lfa_,"PFA>LFA"
 4094               	
 4095 0e4e 520E 5E0E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4096               	
 4097               	; ----------------------------------------------
 4098 0e52 6F0D      	  _code_alias_header pfa_to_cfa_,"PFA>CFA",,two_minus_
 4099               	
 4100               	; ----------------------------------------------
 4101 0e54 5C0D      	  _code_alias_header cfa_to_pfa_,"CFA>PFA",,two_plus_
 4102               	
 4103               	; ----------------------------------------------
 4104 0e56 610C      	  _colon_header pfa_to_nfa_,"PFA>NFA"
 4105               	
 4106 0e58 520E 5E0E 	  dw pfa_to_cfa_,cfa_to_nfa_
 4107 0e5c BC0A      	  dw semicolon_s_
 4108               	
 4109               	; ----------------------------------------------
 4110               	
 4111               	; doc{
 4112               	;
 4113               	; cfa>nfa  ( cfa -- nfa )
 4114               	;
 4115               	; Warning: No check is done where cfa belongs to a definition
 4116               	; created with `:noname`.
 4117               	;
 4118               	; }doc
 4119               	
 4120               	; XXX FIXME -- make it return 0 if cfa has no name associated
 4121               	
 4122 0e5e 600E      	  _code_header cfa_to_nfa_,"CFA>NFA"
 4123               	
 4124 0e60 1E01      	  ld e,names_bank
 4125 0e62 CDA0 06   	  call bank.e ; page the memory bank
 4126 0e65 D1        	  pop de ; cfa
 4127 0e66 C5        	  push bc ; save Forth IP
 4128 0e67 0600      	  ld b,0
 4129 0e69 21FC BF   	  ld hl, names_bank_address-4
 4130               	
 4131               	cfa_to_nfa.begin_0:
 4132               	  ; hl = address of the cfa pointer
 4133 0e6c 23        	  inc hl
 4134               	cfa_to_nfa.begin_1:
 4135 0e6d 23        	  inc hl
 4136 0e6e 23        	  inc hl
 4137 0e6f 23        	  inc hl
 4138 0e70 7E        	  ld a,(hl) ; name field byte length
 4139 0e71 E61F      	  and max_word_length_bit_mask ; name length
 4140 0e73 4F        	  ld c,a ; name length
 4141 0e74 0C        	  inc c  ; plus the length byte
 4142 0e75 09        	  add hl,bc ; point to the cfa pointer
 4143               	
 4144 0e76 7E        	  ld a,(hl) ; low byte of cfa
 4145 0e77 BB        	  cp e ; equal?
 4146 0e78 20F2      	  jr nz,cfa_to_nfa.begin_0 ; not equal
 4147 0e7a 23        	  inc hl
 4148 0e7b 7E        	  ld a,(hl) ; high byte of cfa
 4149 0e7c BA        	  cp d ; equal?
GAS LISTING solo_forth.z80s 			page 76


 4150 0e7d 20EE      	  jr nz,cfa_to_nfa.begin_1 ; not equal
 4151               	  ; cfa found
 4152 0e7f 0E03      	  ld c,3
 4153 0e81 09        	  add hl,bc ; nfa
 4154               	
 4155 0e82 1E00      	  ld e,default_bank
 4156 0e84 CDA0 06   	  call bank.e ; page the default memory bank
 4157               	
 4158 0e87 C1        	  pop bc ; restore Forth IP
 4159 0e88 C35E 05   	  jp push_hl
 4160               	
 4161               	; ----------------------------------------------
 4162               	
 4163 0e8b 5C0D      	  _code_alias_header cfap_to_lfa_,"CFAP>LFA",,two_plus_
 4164               	
 4165               	; ----------------------------------------------
 4166               	
 4167 0e8d 6F0D      	  _code_alias_header nfa_to_lfa_,"NFA>LFA",,two_minus_
 4168               	
 4169               	; ----------------------------------------------
 4170 0e8f 610C      	  _colon_header c_store_bank_,"C!BANK"
 4171               	
 4172               	; doc{
 4173               	;
 4174               	; c!bank  ( b a n -- )
 4175               	;
 4176               	; Store _b_ into address _a_ of bank _n_.
 4177               	;
 4178               	; }doc
 4179               	
 4180               	  ; XXX 11 bytes
 4181 0e91 9806 4E0C 	  dw bank_,c_store_
 4182 0e95 C10C 9806 	  _default_bank
 4183 0e99 BC0A      	  dw semicolon_s_
 4184               	
 4185               	  ; XXX TODO
 4186               	  ; pop de
 4187               	  ; c_store_bank.e:
 4188               	  ; call bank.e
 4189               	  ; pop hl
 4190               	  ; ld l,(hl)
 4191               	  ; ld h,0
 4192               	  ; ld e,default_bank
 4193               	  ; call bank.e
 4194               	  ; jp pushhl
 4195               	
 4196               	; ----------------------------------------------
 4197 0e9b 610C      	  _colon_header store_bank_,"!BANK"
 4198               	
 4199               	; doc{
 4200               	;
 4201               	; !bank  ( x a n -- )
 4202               	;
 4203               	; Store _x_ into address _a_ of bank _n_.
 4204               	;
 4205               	; }doc
 4206               	
GAS LISTING solo_forth.z80s 			page 77


 4207               	  ; XXX 11 bytes
 4208 0e9d 9806 450C 	  dw bank_,store_
 4209 0ea1 C10C 9806 	  _default_bank
 4210 0ea5 BC0A      	  dw semicolon_s_
 4211               	
 4212               	; ----------------------------------------------
 4213 0ea7 610C      	  _colon_header c_fetch_bank_,"C@BANK"
 4214               	
 4215               	; doc{
 4216               	;
 4217               	; c@bank  ( a n -- b )
 4218               	;
 4219               	; Fetch the 8-bit content of address _a_ of the bank _n_.
 4220               	;
 4221               	; }doc
 4222               	
 4223               	  ; XXX 11 bytes
 4224 0ea9 9806 1F0C 	  dw bank_,c_fetch_
 4225 0ead C10C 9806 	  _default_bank
 4226 0eb1 BC0A      	  dw semicolon_s_
 4227               	
 4228               	  ; XXX 15 bytes
 4229               	  ; pop de
 4230               	  ; c_fetch_bank.e:
 4231               	  ; call bank.e
 4232               	  ; pop hl
 4233               	  ; ld l,(hl)
 4234               	  ; ld h,0
 4235               	  ; ld e,default_bank
 4236               	  ; call bank.e
 4237               	  ; jp pushhl
 4238               	
 4239               	; ----------------------------------------------
 4240 0eb3 610C      	  _colon_header fetch_bank_,"@BANK"
 4241               	
 4242               	; doc{
 4243               	;
 4244               	; @bank  ( a n -- x )
 4245               	;
 4246               	; Fetch the 16-bit content of address _a_ of bank _n_.
 4247               	;
 4248               	; }doc
 4249               	
 4250               	  ; XXX 11 bytes
 4251 0eb5 9806 160C 	  dw bank_,fetch_
 4252 0eb9 C10C 9806 	  _default_bank
 4253 0ebd BC0A      	  dw semicolon_s_
 4254               	
 4255               	  ; XXX 17 bytes
 4256               	  ; pop de
 4257               	  ; fetch_bank.e
 4258               	  ; call bank.e
 4259               	  ; pop hl
 4260               	  ; ld a,(hl)
 4261               	  ; inc hl
 4262               	  ; ld h,(hl)
 4263               	  ; ld l,a
GAS LISTING solo_forth.z80s 			page 78


 4264               	  ; ld e,default_bank
 4265               	  ; call bank.e
 4266               	  ; jp pushhl
 4267               	
 4268               	; ----------------------------------------------
 4269 0ebf 610C      	  _colon_header c_fetch_n_,"C@N"
 4270               	
 4271               	; doc{
 4272               	;
 4273               	; c@n  ( a -- x )
 4274               	;
 4275               	; Fetch from the _a_ address of the names bank.
 4276               	;
 4277               	; }doc
 4278               	
 4279               	  ; XXX 7 bytes:
 4280 0ec1 C50C      	  _literal names_bank
 4281 0ec3 A70E      	  dw c_fetch_bank_
 4282 0ec5 BC0A      	  dw semicolon_s_
 4283               	
 4284               	  ; XXX 5 bytes
 4285               	  ; ld e,names_bank
 4286               	  ; jp c_fetch_bank.e
 4287               	
 4288               	; ----------------------------------------------
 4289 0ec7 610C      	  _colon_header fetch_n_,"@N"
 4290               	
 4291               	; doc{
 4292               	;
 4293               	; @n  ( a -- x )
 4294               	;
 4295               	; Fetch from the _a_ address of the names bank.
 4296               	;
 4297               	; }doc
 4298               	
 4299               	  ; XXX 7 bytes:
 4300 0ec9 C50C      	  _literal names_bank
 4301 0ecb B30E      	  dw fetch_bank_
 4302 0ecd BC0A      	  dw semicolon_s_
 4303               	
 4304               	  ; XXX 5 bytes
 4305               	  ; ld e,names_bank
 4306               	  ; jp fetch_bank.e
 4307               	
 4308               	; ----------------------------------------------
 4309 0ecf 610C      	  _colon_header c_store_n_,"C!N"
 4310               	
 4311               	; doc{
 4312               	;
 4313               	; c!n  ( c a -- )
 4314               	;
 4315               	; Store _c_ into the _a_ address of the names bank.
 4316               	;
 4317               	; }doc
 4318               	
 4319               	  ; XXX 7 bytes:
 4320 0ed1 C50C      	  _literal names_bank
GAS LISTING solo_forth.z80s 			page 79


 4321 0ed3 8F0E      	  dw c_store_bank_
 4322 0ed5 BC0A      	  dw semicolon_s_
 4323               	
 4324               	; ----------------------------------------------
 4325 0ed7 610C      	  _colon_header store_n_,"!N"
 4326               	
 4327               	; doc{
 4328               	;
 4329               	; !n  ( x a -- )
 4330               	;
 4331               	; Store _x_ into the _a_ address of the names bank.
 4332               	;
 4333               	; }doc
 4334               	
 4335               	  ; XXX 7 bytes:
 4336 0ed9 C50C      	  _literal names_bank
 4337 0edb 9B0E      	  dw store_bank_
 4338 0edd BC0A      	  dw semicolon_s_
 4339               	
 4340               	; ----------------------------------------------
 4341 0edf 610C      	  _colon_header nfa_to_cfa_,"NFA>CFA"
 4342               	
 4343 0ee1 8306 04   	  _literal 4
 4344 0ee4 CE0D C70E 	  dw minus_,fetch_n_
 4345 0ee8 BC0A      	  dw semicolon_s_
 4346               	
 4347               	; ----------------------------------------------
 4348               	; doc{
 4349               	;
 4350               	; nfa>string  ( nfa -- ca len )
 4351               	;
 4352               	; }doc
 4353               	
 4354 0eea 610C      	  _colon_header nfa_to_string_,"NFA>STRING"
 4355               	
 4356 0eec C50C 9806 	  _names_bank
 4357 0ef0 0310      	  dw count_
 4358 0ef2 8306 1F   	  _literal max_word_length_bit_mask
 4359 0ef5 4C0A      	  dw and_
 4360 0ef7 EA06      	  dw save_string_
 4361 0ef9 C10C 9806 	  _default_bank
 4362 0efd BC0A      	  dw semicolon_s_
 4363               	
 4364               	; ----------------------------------------------
 4365 0eff 610C      	  _colon_header store_csp_,"!CSP"
 4366               	
 4367 0f01 990A 380D 	  dw sp_fetch_,csp_,store_
 4367      450C 
 4368 0f07 BC0A      	  dw semicolon_s_
 4369               	
 4370               	; ----------------------------------------------
 4371 0f09 610C      	  _colon_header question_error_,"?ERROR"
 4372               	
 4373 0f0b D50B      	  dw swap_
 4374 0f0d 6007 150F 	  dw zero_branch_,question_error.no_error
 4375 0f11 7C13      	  dw error_
 4376 0f13 BC0A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 80


 4377               	
 4378               	question_error.no_error:
 4379 0f15 D00B      	  dw drop_
 4380 0f17 BC0A      	  dw semicolon_s_
 4381               	
 4382               	; ----------------------------------------------
 4383 0f19 610C      	  _colon_header comp_question_,"COMP?"
 4384               	
 4385 0f1b 2C0D 160C 	  dw state_,fetch_
 4386 0f1f BC0A      	  dw semicolon_s_
 4387               	
 4388               	; ----------------------------------------------
 4389 0f21 610C      	  _colon_header question_comp_,"?COMP"
 4390               	
 4391 0f23 190F 530B 	  dw comp_question_,zero_equals_
 4392 0f27 8306 1109 	  _question_error error.compilation_only
 4392      0F
 4393 0f2c BC0A      	  dw semicolon_s_
 4394               	
 4395               	; ----------------------------------------------
 4396 0f2e 610C      	  _colon_header question_exec_,"?EXEC"
 4397               	
 4398 0f30 190F      	  dw comp_question_
 4399 0f32 8306 1209 	  _question_error error.execution_only
 4399      0F
 4400 0f37 BC0A      	  dw semicolon_s_
 4401               	
 4402               	; ----------------------------------------------
 4403               	.if 1
 4404               	  ; XXX TODO -- remove when the security is removed
 4405 0f39 610C      	  _colon_header question_pairs_,"?PAIRS"
 4406               	
 4407 0f3b D80D      	  dw not_equals_
 4408 0f3d 8306 1309 	  _question_error error.conditionals_not_paired
 4408      0F
 4409 0f42 BC0A      	  dw semicolon_s_
 4410               	.endif
 4411               	
 4412               	; ----------------------------------------------
 4413 0f44 610C      	  _colon_header question_csp_,"?CSP"
 4414               	
 4415 0f46 990A 380D 	  dw sp_fetch_,csp_,fetch_,not_equals_
 4415      160C D80D 
 4416 0f4e 8306 1409 	  _question_error error.definition_not_finished
 4416      0F
 4417 0f53 BC0A      	  dw semicolon_s_
 4418               	
 4419               	; ----------------------------------------------
 4420 0f55 610C      	  _colon_header question_loading_,"?LOADING"
 4421               	
 4422 0f57 1A0D 160C 	  dw blk_,fetch_,zero_equals_
 4422      530B 
 4423 0f5d 8306 1609 	  _question_error error.loading_only
 4423      0F
 4424 0f62 BC0A      	  dw semicolon_s_
 4425               	
 4426               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 81


 4427 0f64 610C      	  _colon_header compile_,"COMPILE"
 4428               	
 4429 0f66 210F      	  dw question_comp_
 4430 0f68 FB0A DC0B 	  dw from_r_,dup_,two_plus_,to_r_,fetch_,compile_comma_
 4430      5A0D EC0A 
 4430      160C BA0D 
 4431 0f74 BC0A      	  dw semicolon_s_
 4432               	
 4433               	; ----------------------------------------------
 4434 0f76 610C      	  _colon_header postpone_,"POSTPONE",immediate
 4435               	
 4436               	; doc{
 4437               	;
 4438               	; postpone ( "name" -- )  \ ANS Forth, C I
 4439               	;
 4440               	; Skip leading space delimiters. Parse name delimited by a
 4441               	; space. Find name. Append the compilation semantics of _name_ to
 4442               	; the current definition.
 4443               	;
 4444               	; }doc
 4445               	
 4446 0f78 6319      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 4447 0f7a DC0B 7319 	  dw dup_,question_defined_ ; error if not found
 4448 0f7e 690B      	  dw zero_less_than_ ; non-immediate word?
 4449 0f80 6007 880F 	  dw zero_branch_,postpone.end
 4450               	  ; Non-immediate word.
 4451 0f84 640F 640F 	  dw compile_,compile_ ; compile `compile`
 4452               	postpone.end:
 4453 0f88 BA0D      	  dw compile_comma_
 4454 0f8a BC0A      	  dw semicolon_s_
 4455               	
 4456               	; ----------------------------------------------
 4457 0f8c 610C      	  _colon_header left_bracket_,"[",immediate
 4458               	
 4459 0f8e 2C0D F90B 	  dw state_,off_
 4460 0f92 BC0A      	  dw semicolon_s_
 4461               	
 4462               	; ----------------------------------------------
 4463 0f94 610C      	  _colon_header right_bracket_,"]"
 4464               	
 4465 0f96 2C0D 030C 	  dw state_,on_
 4466 0f9a BC0A      	  dw semicolon_s_
 4467               	
 4468               	; ----------------------------------------------
 4469 0f9c 610C      	  _colon_header smudge_,"SMUDGE"
 4470               	
 4471               	
 4472               	; doc{
 4473               	;
 4474               	; smudge  ( -- )
 4475               	;
 4476               	; Toggle the "smudge bit" in a definitions' name field. This
 4477               	; prevents an uncompleted definition from being found during
 4478               	; dictionary searches, until compiling is completed without
 4479               	; error.
 4480               	;
 4481               	; }doc
GAS LISTING solo_forth.z80s 			page 82


 4482               	
 4483 0f9e 420E      	  dw latest_
 4484 0fa0 8306 20   	  _literal smudge_bit_mask
 4485               	  ; XXX TODO factor `toggle-names'?
 4486 0fa3 C50C 9806 	  _names_bank
 4487 0fa7 0D0C      	  dw toggle_
 4488 0fa9 C10C 9806 	  _default_bank
 4489 0fad BC0A      	  dw semicolon_s_
 4490               	
 4491               	; ----------------------------------------------
 4492 0faf 610C      	  _colon_header hex_,"HEX"
 4493               	
 4494 0fb1 8306 10   	  _literal 0x10
 4495 0fb4 2F0D 450C 	  dw base_,store_
 4496 0fb8 BC0A      	  dw semicolon_s_
 4497               	
 4498               	; ----------------------------------------------
 4499 0fba 610C      	  _colon_header decimal_,"DECIMAL"
 4500               	
 4501 0fbc 8306 0A   	  _literal 0x0A
 4502 0fbf 2F0D 450C 	  dw base_,store_
 4503 0fc3 BC0A      	  dw semicolon_s_
 4504               	
 4505               	; ----------------------------------------------
 4506 0fc5 610C      	  _colon_header paren_semicolon_code_,"(;CODE)"
 4507               	
 4508               	; doc{
 4509               	;
 4510               	; (;code)  ( -- )
 4511               	;
 4512               	; The run-time procedure compiled by `;code`. Rewrite the code
 4513               	; field of the most recently defined word to point to the
 4514               	; following machine code sequence.
 4515               	;
 4516               	; }doc
 4517               	
 4518               	; : (;code)       --
 4519               	;   r>        \ Pop the address of the next instruction off the return stack,
 4520               	;             \ which is the starting address of the run-time code routine.
 4521               	;   latest    \ Get the name field address of the word under construction.
 4522               	;   nfa>cfa ! \ Find its code field address and store in it the address of
 4523               	;             \ the code routine to be executed at run-time.
 4524               	;   ;
 4525               	
 4526 0fc7 FB0A 420E 	  dw from_r_,latest_,nfa_to_cfa_,store_
 4526      DF0E 450C 
 4527 0fcf BC0A      	  dw semicolon_s_
 4528               	
 4529               	; ----------------------------------------------
 4530 0fd1 610C      	  _colon_header semicolon_code_,";CODE",immediate
 4531               	
 4532               	; XXX TODO -- documentation
 4533               	; doc{
 4534               	;
 4535               	; ;code  ( -- )
 4536               	;
 4537               	; Stop compilation and terminate a new defining word by
GAS LISTING solo_forth.z80s 			page 83


 4538               	; compiling the run-time routine `(;code)`.  Assemble the
 4539               	; assembly mnemonics following.
 4540               	;
 4541               	; }doc
 4542               	
 4543 0fd3 440F      	  dw question_csp_
 4544 0fd5 640F C50F 	  dw compile_,paren_semicolon_code_
 4545 0fd9 8205      	  dw asm_
 4546 0fdb 8C0F 9C0F 	  dw left_bracket_,smudge_
 4547 0fdf BC0A      	  dw semicolon_s_
 4548               	
 4549               	; ----------------------------------------------
 4550 0fe1 610C      	  _colon_header does_,"DOES>",immediate
 4551               	
 4552 0fe3 640F C50F 	  dw compile_,paren_semicolon_code_
 4553 0fe7 8306 CD   	  _literal 0xCD ; Z80 opcode for "call"
 4554 0fea C20D      	  dw c_comma_ ; compile it
 4555 0fec 8D06 F40F 	  dw lit_,do_does,comma_ ; compile the routine address
 4555      AE0D 
 4556 0ff2 BC0A      	  dw semicolon_s_
 4557               	
 4558               	do_does:
 4559               	  ; Save the IP in the return stack.
 4560 0ff4 2A10 00   	  ld hl,(return_stack_pointer)
 4561 0ff7 2B        	  dec hl
 4562 0ff8 70        	  ld (hl),b
 4563 0ff9 2B        	  dec hl
 4564 0ffa 71        	  ld (hl),c
 4565 0ffb 2210 00   	  ld (return_stack_pointer),hl
 4566               	  ; Pop the address of the run-time routine
 4567               	  ; (put there bye `call do_does`) in IP.
 4568 0ffe C1        	  pop bc ; new Forth IP
 4569               	  ; Push the pfa.
 4570 0fff 13        	  inc de  ; de=pfa
 4571 1000 D5        	  push de
 4572               	  ; Execute the run-time routine.
 4573 1001 DDE9      	  _jp_next
 4574               	
 4575               	; ----------------------------------------------
 4576 1003 0510      	  _code_header count_,"COUNT"
 4577               	
 4578               	  ; Code from DZX-Forth.
 4579               	
 4580 1005 D1        	  pop de
 4581 1006 1A        	  ld a,(de)
 4582 1007 13        	  inc de
 4583 1008 D5        	  push de
 4584 1009 C387 06   	  jp push_a
 4585               	
 4586               	; ----------------------------------------------
 4587 100c 610C      	  _colon_header bounds_,"BOUNDS"
 4588               	
 4589 100e C80B 7D0B 	  dw over_,plus_,swap_
 4589      D50B 
 4590 1014 BC0A      	  dw semicolon_s_
 4591               	
 4592               	; ----------------------------------------------
GAS LISTING solo_forth.z80s 			page 84


 4593 1016 610C      	  _colon_header type_,"TYPE"
 4594               	
 4595               	  ; XXX TODO Rewrite in Z80, after the ROM routine.
 4596               	
 4597 1018 2A0E      	  dw question_dup_
 4598 101a 6007 2E10 	  dw zero_branch_,type.empty_string
 4599               	
 4600 101e 0C10      	  dw bounds_
 4601 1020 AD07      	  dw paren_do_
 4602               	type.do:
 4603 1022 4408 1F0C 	  dw i_,c_fetch_,emit_
 4603      EC08 
 4604 1028 7807 2210 	  dw paren_loop_,type.do ; loop
 4605 102c BC0A      	  dw semicolon_s_
 4606               	
 4607               	type.empty_string:
 4608 102e D00B      	  dw drop_
 4609               	type.end:
 4610 1030 BC0A      	  dw semicolon_s_
 4611               	
 4612               	; ----------------------------------------------
 4613               	
 4614 1032 3410      	  _code_header minus_trailing_,"-TRAILING"
 4615               	
 4616 1034 D1        	  pop de
 4617 1035 E1        	  pop hl
 4618 1036 E5        	  push hl
 4619 1037 19        	  add hl,de
 4620 1038 EB        	  ex de,hl
 4621               	  ; de = address after the string
 4622               	  ; hl = length of the string
 4623               	minus_trailing.begin:
 4624 1039 7D        	  ld a,l
 4625 103a B4        	  or h ; exhausted?
 4626 103b CA5E 05   	  jp z,push_hl
 4627 103e 1B        	  dec de ; next char
 4628 103f 1A        	  ld a,(de)
 4629 1040 FE20      	  cp ' ' ; space?
 4630 1042 C25E 05   	  jp nz,push_hl
 4631 1045 2B        	  dec hl ; new length
 4632 1046 C339 10   	  jp minus_trailing.begin ; repeat
 4633               	
 4634               	; ----------------------------------------------
 4635               	  ;_colon_header paren_dot_quote_,"(.\")" ; XXX FIXME as error
 4636 1049 610C      	  _colon_header paren_dot_quote_,"(.\x22)"
 4637               	
 4638 104b 4B0B 0310 	  dw r_fetch_,count_ ; ( ca len )
 4639 104f DC0B 530D 	  dw dup_,one_plus_,from_r_,plus_,to_r_ ; skip the string after return
 4639      FB0A 7D0B 
 4639      EC0A 
 4640 1059 1610      	  dw type_
 4641 105b BC0A      	  dw semicolon_s_
 4642               	
 4643               	; ----------------------------------------------
 4644               	  ;_colon_header dot_quote_,".\"",immediate ; XXX FIXME as error
 4645 105d 610C      	  _colon_header dot_quote_,".\x22",immediate
 4646               	
GAS LISTING solo_forth.z80s 			page 85


 4647 105f 8306 22   	  _literal '"'
 4648 1062 A311      	  dw parse_ ; ( ca len )
 4649 1064 190F      	  dw comp_question_
 4650 1066 6007 7210 	  dw zero_branch_,dot_quote.interpreting
 4651               	  ; Compiling.
 4652 106a 640F 4910 	  dw compile_,paren_dot_quote_,s_comma_
 4652      9C0D 
 4653 1070 281D      	  dw exit_
 4654               	dot_quote.interpreting:
 4655 1072 1610      	  dw type_
 4656 1074 BC0A      	  dw semicolon_s_
 4657               	
 4658               	; ----------------------------------------------
 4659 1076 1814      	  _variable_header span_,"SPAN"
 4660               	
 4661               	; doc{
 4662               	;
 4663               	; span  ( -- a )  \ Forth-83
 4664               	;
 4665               	; The address of a variable containing the count of characters
 4666               	; actually received and stored by the last execution of
 4667               	; `expect`.
 4668               	;
 4669               	; }doc
 4670               	
 4671 1078 0000      	  dw 0
 4672               	
 4673               	; ----------------------------------------------
 4674 107a 610C      	  _colon_header accept_,"ACCEPT"
 4675               	
 4676               	; doc{
 4677               	;
 4678               	; accept  ( ca1 len1 -- len2 )  \ ANS Forth
 4679               	;
 4680               	; }doc
 4681               	
 4682               	  ; XXX TODO -- not finished
 4683               	
 4684               	  ; dw span_,off_
 4685               	  ; dw question_dup_
 4686               	  ; dw zero_branch_,accept.end
 4687               	
 4688               	  ; dw swap_ ; ( len ca )
 4689               	; accept.begin: ; ( len ca )
 4690               	  ; dw key_,dup_ ; ( len ca c c )
 4691               	
 4692               	  ; dw c_lit_
 4693               	  ; db delete_char
 4694               	  ; dw equals_ ; delete key?
 4695               	  ; dw zero_branch_,accept.maybe_carriage_return
 4696               	  ; ; Delete key ( len ca c )
 4697               	  ; dw drop_
 4698               	  ; dw dup_,i_,equals_ ; cursor at the start position?
 4699               	  ; dw dup_ ; ( len ca f f )
 4700               	  ; ; XXX TODO adapt this when true=-1
 4701               	  ; dw from_r_,two_minus_,plus_,to_r_ ; update the index
 4702               	  ; dw question_branch_,accept.loop ; nothing to delete
GAS LISTING solo_forth.z80s 			page 86


 4703               	  ; ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4704               	  ; dw c_lit_
 4705               	  ; db backspace_char
 4706               	  ; dw branch_,accept.emit
 4707               	
 4708               	; accept.maybe_carriage_return: ; ( len ca c )
 4709               	  ; dw dup_
 4710               	  ; dw c_lit_
 4711               	  ; db carriage_return_char
 4712               	  ; dw equals_ ; carriage return?
 4713               	  ; dw zero_branch_,accept.ordinary_key
 4714               	  ; ; Carriage return ( len ca c )
 4715               	  ; dw exhaust_
 4716               	  ; dw drop_,b_l_
 4717               	  ; dw branch_,accept.emit
 4718               	
 4719               	; accept.ordinary_key: ; ( len ca c )
 4720               	  ; dw dup_
 4721               	; accept.store: ; ( len ca c c | len ca c 0 )
 4722               	  ; dw i_,c_store_
 4723               	; accept.emit: ; ( len ca c )
 4724               	  ; dw emit_
 4725               	
 4726               	  ; ; ( len ca )
 4727               	  ; dw i_,over_,minus_,span_,store_ ; update `span`
 4728               	  ; dw paren_loop_,accept.do
 4729               	; accept.end:
 4730               	  ; dw drop_
 4731               	  ; dw span_,fetch_
 4732 107c BC0A      	  dw semicolon_s_
 4733               	
 4734               	; ----------------------------------------------
 4735 107e 610C      	  _colon_header expect_,"EXPECT"
 4736               	
 4737               	; doc{
 4738               	;
 4739               	; expect  ( ca len -- )  \ Forth-83
 4740               	;
 4741               	; Transfer characters from the terminal to address _ca_, until a
 4742               	; "return" or _len_ characters have been received.
 4743               	;
 4744               	; The transfer begins at addr proceeding towards higher
 4745               	; addresses one byte per character until either a "return" is
 4746               	; received or until _len_ characters have been transferred.
 4747               	
 4748               	; No more than _len_ characters will be stored.  The "return" is
 4749               	; not stored into memory.  No characters are received or
 4750               	; transferred if _len_ is zero.  All characters actually
 4751               	; received and stored into memory will be displayed, with the
 4752               	; "return" displaying as a space.
 4753               	
 4754               	; ; }doc
 4755               	
 4756 1080 7610 F90B 	  dw span_,off_
 4757 1084 2A0E      	  dw question_dup_
 4758 1086 6007 F510 	  dw zero_branch_,expect.end
 4759               	
GAS LISTING solo_forth.z80s 			page 87


 4760 108a 0C10 C00B 	  dw bounds_,tuck_ ; ( ca ca+len ca )
 4761 108e AD07      	  dw paren_do_
 4762               	expect.do: ; ( ca )
 4763 1090 7209 DC0B 	  dw xkey_,dup_ ; ( ca c c )
 4764               	
 4765 1094 8306 0C   	  _literal delete_char
 4766 1097 E50D      	  dw equals_ ; delete key?
 4767 1099 6007 BA10 	  dw zero_branch_,expect.maybe_carriage_return
 4768               	  ; Delete key ( ca c )
 4769 109d D00B      	  dw drop_
 4770 109f DC0B 4408 	  dw dup_,i_,equals_ ; cursor at the start position?
 4770      E50D 
 4771               	.if true=(-1)
 4772               	  ; XXX TODO simplify
 4773               	  dw abs_
 4774               	.endif
 4775 10a5 DC0B      	  dw dup_ ; ( ca f f )
 4776 10a7 FB0A 6D0D 	  dw from_r_,two_minus_,plus_,to_r_ ; update the index
 4776      7D0B EC0A 
 4777 10af 6C07 E710 	  dw question_branch_,expect.loop ; nothing to delete
 4778               	  ; dw b_l_,i_,c_store_ ; update the buffer ; XXX OLD
 4779 10b3 8306 08   	  _literal backspace_char
 4780 10b6 5707 E510 	  dw branch_,expect.emit
 4781               	
 4782               	expect.maybe_carriage_return: ; ( ca c )
 4783 10ba DC0B      	  dw dup_
 4784 10bc 8306 0D   	  _literal carriage_return_char
 4785 10bf E50D      	  dw equals_ ; carriage return?
 4786 10c1 6007 CF10 	  dw zero_branch_,expect.control_char
 4787               	  ; Carriage return ( ca c )
 4788 10c5 D40A      	  dw exhaust_
 4789 10c7 D00B DD0C 	  dw drop_,b_l_
 4790 10cb 5707 E510 	  dw branch_,expect.emit
 4791               	
 4792               	expect.control_char: ; ( ca c )
 4793 10cf DC0B DD0C 	  dw dup_,b_l_,less_than_ ; control char?
 4793      F20D 
 4794 10d5 6007 DF10 	  dw zero_branch_,expect.ordinary_key
 4795               	  ; Control char ( ca c )
 4796 10d9 D00B      	  dw drop_
 4797 10db 5707 9010 	  dw branch_,expect.do
 4798               	
 4799               	expect.ordinary_key: ; ( ca c )
 4800 10df DC0B      	  dw dup_
 4801               	expect.store: ; ( ca c c | ca c 0 )
 4802 10e1 4408 4E0C 	  dw i_,c_store_
 4803               	expect.emit: ; ( ca c )
 4804 10e5 EC08      	  dw emit_
 4805               	
 4806               	expect.loop: ; ( ca )
 4807 10e7 4408 C80B 	  dw i_,over_,minus_,span_,store_ ; update `span`
 4807      CE0D 7610 
 4807      450C 
 4808 10f1 7807 9010 	  dw paren_loop_,expect.do
 4809               	expect.end:
 4810 10f5 D00B      	  dw drop_
 4811 10f7 BC0A      	  dw semicolon_s_
GAS LISTING solo_forth.z80s 			page 88


 4812               	
 4813               	; ----------------------------------------------
 4814 10f9 610C      	  _colon_header query_,"QUERY"
 4815               	
 4816               	; doc{
 4817               	;
 4818               	; query  ( -- )  \ fig-Forth
 4819               	;
 4820               	; XXX TODO description
 4821               	;
 4822               	; Make the user input device the input source. Receive input
 4823               	; into the terminal input buffer, replacing any previous
 4824               	; contents. Make the result, whose address is returned by `tib`,
 4825               	; the input buffer. `>in` to zero.
 4826               	;
 4827               	; Input 80 characters of text (or until a "return") from the
 4828               	; operators terminal. Text is positioned at the address
 4829               	; contained in TIB with IN set to zero.
 4830               	;
 4831               	; Transfer characters from the terminal to address contained in
 4832               	; returned by `tib`, until a "return" or the count contained in
 4833               	; the `#tib` variable have been received. One or more nulls are
 4834               	; added at the end of the text.
 4835               	;
 4836               	; }doc
 4837               	
 4838 10fb 410D DC0B 	  dw tib_,dup_
 4839 10ff 450D 160C 	  dw number_tib_,fetch_
 4840 1103 E30B 5911 	  dw two_dup_,blank_ ; clean the input buffer
 4841 1107 7E10      	  dw expect_
 4842 1109 7610 160C 	  dw span_,fetch_,plus_,stream_end_
 4842      7D0B E617 
 4843 1111 1D0D F90B 	  dw to_in_,off_
 4844 1115 BC0A      	  dw semicolon_s_
 4845               	
 4846               	; ----------------------------------------------
 4847 1117 610C      	  _colon_header x_,0,immediate
 4848               	
 4849               	; doc{
 4850               	
 4851               	; x  ( -- )
 4852               	
 4853               	; This is pseudonym for the "null" or dictionary entry for a
 4854               	; name of one character of ascii null. It is the execution
 4855               	; procedure to terminate interpretation of a line of text from
 4856               	; the terminal or within a disk buffer, as both buffers always
 4857               	; have a null word at the end.
 4858               	;
 4859               	; In the fig-Forth model a null character is used to detect the
 4860               	; end of the buffers.  Therefore the scanning words must treat
 4861               	; the null character as a special unconditional delimiter, and
 4862               	; do other tricks in order to simulate the null character found
 4863               	; is a parsed null word.
 4864               	;
 4865               	; In Solo Forth the scanning words does not treat the null char
 4866               	; apart; instead, an actual null word (a null character
 4867               	; surrounded by spaces) is put after the buffers (disk buffers
GAS LISTING solo_forth.z80s 			page 89


 4868               	; and `tib`). Therefore the null word is parsed normally as any
 4869               	; other word. No need to treat the null character as a special
 4870               	; delimiter. This new method is compatible with the original
 4871               	; fig-Forth parsing words.
 4872               	
 4873               	; }doc
 4874               	
 4875 1119 1A0D 160C 	  dw blk_,fetch_ ; input stream from disk?
 4876 111d 6007 3911 	  dw zero_branch_,x.exit ; if not, branch
 4877               	  ; From disk.
 4878 1121 C50C 1A0D 	  dw one_,blk_,plus_store_ ; next disk buffer
 4878      EC0B 
 4879 1127 1D0D F90B 	  dw to_in_,off_ ; clear `in`, preparing parsing of input text
 4880               	
 4881               	  ; XXX WARNING -- The following check of the last block is
 4882               	  ; specific for 2 blocks per screen; the generic slower check
 4883               	  ; would be `blk @ b/scr 1- and`.
 4884               	
 4885 112b 1A0D 160C 	  dw blk_,fetch_,one_,and_ ; was it the last block of the screen?
 4885      C50C 4C0A 
 4886 1133 6C07 3B11 	  dw question_branch_,x.end ; if not, branch
 4887               	  ; Last block of the screen.
 4888 1137 2E0F      	  dw question_exec_ ; error if not executing
 4889               	x.exit:
 4890               	
 4891               	  ; The top item on the return stack is thrown away.  The interpreter
 4892               	  ; will not continue to execute the `?stack` instruction that follows
 4893               	  ; `execute` in `interpret`, but will return to the next higher level
 4894               	  ; of nesting and execute the next word after `interpret` in the Forth
 4895               	  ; loop.  This is when the familiar "ok" message is displayed on the
 4896               	  ; terminal, prompting the operator for the next line of commands.
 4897               	
 4898 1139 180B      	  dw r_drop_
 4899               	;  dw lit_,7,border_ ; XXX INFORMER
 4900               	
 4901               	x.end:
 4902 113b BC0A      	  dw semicolon_s_
 4903               	
 4904               	; ----------------------------------------------
 4905 113d 3F11      	  _code_header fill_,"FILL"
 4906               	
 4907 113f D1        	  pop de ; e = char
 4908               	fill.e:
 4909 1140 69        	  ld l,c
 4910 1141 60        	  ld h,b ; the Forth IP
 4911 1142 C1        	  pop bc ; count
 4912 1143 E3        	  ex (sp),hl ; save the Forth IP
 4913               	fill.do:
 4914 1144 78        	  ld a,b
 4915 1145 B1        	  or c
 4916 1146 CA4F 11   	  _jump_z fill.end
 4917 1149 73        	  ld (hl),e
 4918 114a 23        	  inc hl
 4919 114b 0B        	  dec bc
 4920 114c C344 11   	  jp fill.do
 4921               	fill.end:
 4922 114f C1        	  pop bc ; restore the Forth IP
GAS LISTING solo_forth.z80s 			page 90


 4923 1150 DDE9      	  _jp_next
 4924               	
 4925               	; ----------------------------------------------
 4926 1152 5411      	  _code_header erase_,"ERASE"
 4927               	
 4928 1154 1E00      	  ld e,0
 4929 1156 C340 11   	  jp fill.e
 4930               	
 4931               	; ----------------------------------------------
 4932 1159 5B11      	  _code_header blank_,"BLANK"
 4933               	
 4934 115b 1E20      	  ld e,space_char
 4935 115d C340 11   	  jp fill.e
 4936               	
 4937               	; ----------------------------------------------
 4938 1160 610C      	  _colon_header hold_,"HOLD"
 4939               	
 4940 1162 8D06 FFFF 	  dw lit_,-1,hld_,plus_store_ ; decrement `hld`
 4940      3E0D EC0B 
 4941 116a 3E0D 160C 	  dw hld_,fetch_,c_store_ ; store character into `pad`
 4941      4E0C 
 4942 1170 BC0A      	  dw semicolon_s_
 4943               	
 4944               	; ----------------------------------------------
 4945 1172 610C      	  _colon_header pad_,"PAD"
 4946               	
 4947 1174 8C0D      	  dw here_
 4948 1176 8306 44   	  _literal 0x44
 4949 1179 7D0B      	  dw plus_
 4950 117b BC0A      	  dw semicolon_s_
 4951               	
 4952               	; ----------------------------------------------
 4953 117d 610C      	  _colon_header stream_,"STREAM"
 4954               	
 4955               	; doc{
 4956               	;
 4957               	; stream  ( -- ca )
 4958               	;
 4959               	; ca = current parsing position in the stream source
 4960               	;
 4961               	; }doc
 4962               	
 4963 117f 1A0D 160C 	  dw blk_,fetch_,question_dup_ ; from disk?
 4963      2A0E 
 4964 1185 6007 8F11 	  dw zero_branch_,stream.terminal
 4965 1189 5218      	  dw block_ ; from disk
 4966 118b 5707 9111 	  dw branch_,stream.end
 4967               	stream.terminal:
 4968 118f 410D      	  dw tib_ ; from terminal
 4969               	stream.end:
 4970 1191 1D0D 160C 	  dw to_in_,fetch_,plus_
 4970      7D0B 
 4971 1197 BC0A      	  dw semicolon_s_
 4972               	
 4973               	; ----------------------------------------------
 4974 1199 610C      	  _colon_header parsed_,"PARSED"
 4975               	
GAS LISTING solo_forth.z80s 			page 91


 4976               	; doc{
 4977               	;
 4978               	; parsed  ( len -- )
 4979               	;
 4980               	; Add the given _len_ plus 1 to `>in`.
 4981               	;
 4982               	; }word
 4983               	
 4984 119b 530D 1D0D 	  dw one_plus_,to_in_,plus_store_
 4984      EC0B 
 4985 11a1 BC0A      	  dw semicolon_s_
 4986               	
 4987               	; ----------------------------------------------
 4988 11a3 610C      	  _colon_header parse_,"PARSE"
 4989               	
 4990               	; doc{
 4991               	;
 4992               	; parse  ( c "text<c>" -- ca len )  \ ANS Forth
 4993               	;
 4994               	; Parse _text_ delimited by the delimiter char _c_.
 4995               	;
 4996               	; ca = address of the parsed string, within the input buffer
 4997               	; len = length of the parsed string
 4998               	;
 4999               	; If the parse area was empty, the resulting string has a zero length.
 5000               	;
 5001               	; }doc
 5002               	
 5003 11a5 7D11 D50B 	  dw stream_,swap_,scan_,dup_,parsed_
 5003      BE08 DC0B 
 5003      9911 
 5004 11af BC0A      	  dw semicolon_s_
 5005               	
 5006               	; ----------------------------------------------
 5007 11b1 610C      	  _colon_header parse_name_,"PARSE-NAME"
 5008               	
 5009               	; doc{
 5010               	;
 5011               	; parse-name  ( "name"  -- ca len )
 5012               	;
 5013               	; }word
 5014               	
 5015 11b3 7D11 DC0B 	  dw stream_,dup_,to_r_ ; ( ca1 )
 5015      EC0A 
 5016 11b9 DD0C D408 	  dw b_l_,skip_ ; ( ca2 )
 5017 11bd DC0B FB0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
 5017      CE0D 1D0D 
 5017      EC0B 
 5018               	  ; XXX TODO factor of `parse`?:
 5019 11c7 DD0C BE08 	  dw b_l_,scan_ ; ( ca len )
 5020 11cb DC0B 9911 	  dw dup_,parsed_
 5021 11cf BC0A      	  dw semicolon_s_
 5022               	
 5023               	; ----------------------------------------------
 5024 11d1 610C      	  _colon_header word_,"WORD"
 5025               	
 5026               	; doc{
GAS LISTING solo_forth.z80s 			page 92


 5027               	;
 5028               	; word  ( c "<c...>text<c>" -- ca )  \ ANS Forth
 5029               	;
 5030               	; c = delimiter char
 5031               	;
 5032               	; Skip leading _c_ delimiters from the input stream.  Parse the
 5033               	; next text characters from the input stream, until a delimiter
 5034               	; _c_ is found, storing the packed character string beginning at
 5035               	; _ca_, as a counted string (the character count in the first
 5036               	; byte), and with one blank at the end.
 5037               	;
 5038               	; }doc
 5039               	
 5040 11d3 7D11      	  dw stream_ ; ( c a1 )
 5041 11d5 DC0B EC0A 	  dw dup_,to_r_
 5042 11d9 C80B D408 	  dw over_,skip_ ; ( c a2 )
 5043               	.if  0
 5044               	  dw hex_
 5045               	  _echo 'In word after skip:' ; XXX INFORMER
 5046               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5047               	  dw key_,drop_ ; XXX INFORMER
 5048               	.endif
 5049 11dd DC0B FB0A 	  dw dup_,from_r_,minus_,to_in_,plus_store_
 5049      CE0D 1D0D 
 5049      EC0B 
 5050               	  ; XXX TODO factor of `parse`:
 5051 11e7 D50B BE08 	  dw swap_,scan_ ; ( a2 len )
 5052               	.if  0
 5053               	  dw hex_
 5054               	  _echo 'In word after scan:' ; XXX INFORMER
 5055               	  dw cr_,two_dup_,type_ ; XXX INFORMER
 5056               	  dw cr_,dot_s_,cr_ ; XXX INFORMER
 5057               	  dw key_,drop_ ; XXX INFORMER
 5058               	.endif
 5059 11eb DC0B 530D 	  dw dup_,one_plus_,to_in_,plus_store_
 5059      1D0D EC0B 
 5060               	
 5061 11f3 8C0D      	  dw here_
 5062 11f5 8306 21   	  _literal max_word_length+2
 5063 11f8 5911      	  dw blank_
 5064               	
 5065 11fa DC0B 8C0D 	  dw dup_,here_,c_store_ ; count byte
 5065      4E0C 
 5066 1200 8C0D 530D 	  dw here_,one_plus_ ; destination
 5067 1204 D50B      	  dw swap_ ; count
 5068 1206 E209      	  dw cmove_ ; move the word
 5069 1208 8C0D      	  dw here_
 5070               	
 5071               	  .if 0 ; XXX OLD
 5072               	    ;dw space_ ; XXX INFORMER
 5073               	    ;dw depth_,dot_ ; XXX INFORMER
 5074               	    ;_echo 'blk ' ; XXX INFORMER
 5075               	    ;dw blk_,fetch_,dot_ ; XXX INFORMER
 5076               	    ;_echo 'in ' ; XXX INFORMER
 5077               	    ;dw in_,fetch_,dot_ ; XXX INFORMER
 5078               	    ; dw here_,count_,one_,ink_,type_,zero_,ink_,space_ ; XXX INFORMER
 5079               	    ;dw key_,drop_ ; XXX INFORMER
GAS LISTING solo_forth.z80s 			page 93


 5080               	  .endif
 5081               	
 5082 120a BC0A      	  dw semicolon_s_
 5083               	; ----------------------------------------------
 5084 120c 610C      	  _colon_header paren_number_,"(NUMBER)"
 5085               	
 5086               	; doc{
 5087               	;
 5088               	; (number)  ( d1 ca1 -- d2 ca2 )  \ fig-Forth
 5089               	;
 5090               	; Convert the ASCII text beginning at _ca1+l_ with regard to
 5091               	; `base`. The new value is accumulated into double number _d1_,
 5092               	; being left as _d2_.  _ca2_ is the address of the first
 5093               	; unconvertable digit. Used by `number`.
 5094               	;
 5095               	; }doc
 5096               	
 5097               	paren_number.begin: ; begin
 5098 120e 530D      	  dw one_plus_ ; address of the next digit
 5099 1210 DC0B EC0A 	  dw dup_,to_r_ ; save the address
 5100 1214 1F0C      	  dw c_fetch_ ; get the digit
 5101               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5102               	  ;dw dup_,dup_,cr_,dot_,emit_; XXX INFORMER
 5103 1216 2F0D 160C 	  dw base_,fetch_,digit_ ; convert the digit
 5103      4608 
 5104 121c 6007 4A12 	  dw zero_branch_,paren_number.end ; while
 5105 1220 D50B      	  dw swap_ ; get the high order part of d1 to the top.
 5106 1222 2F0D 160C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5106      020A 
 5107 1228 D00B      	  dw drop_ ; drop the high order part of the product
 5108 122a 1A0E      	  dw rot_ ; move the low order part of d1 to top of stack
 5109 122c 2F0D 160C 	  dw base_,fetch_,u_m_star_ ; multiply by base value
 5109      020A 
 5110 1232 850B      	  dw d_plus_ ; accumulate result into d1
 5111 1234 320D 160C 	  dw dpl_,fetch_,one_plus_ ; is DPL other than -1?
 5111      530D 
 5112 123a 6007 4412 	  dw zero_branch_,paren_number.decimal_point_done
 5113               	  ; DPL is not -1, a decimal point was encountered
 5114 123e C50C 320D 	  dw one_,dpl_,plus_store_ ; increment DPL, one more digit to right of decimal point
 5114      EC0B 
 5115               	paren_number.decimal_point_done:
 5116 1244 FB0A      	  dw from_r_ ; pop addr1+1 back to convert the next digit
 5117 1246 5707 0E12 	  dw branch_,paren_number.begin ; repeat
 5118               	paren_number.end:
 5119 124a FB0A      	  dw from_r_ ; address of the first non-convertable digit, a2.
 5120 124c BC0A      	  dw semicolon_s_
 5121               	
 5122               	; ----------------------------------------------
 5123 124e 610C      	  _colon_header number_,"NUMBER"
 5124               	
 5125               	; doc{
 5126               	;
 5127               	; number  ( ca  -- d )  \ fig-Forth
 5128               	;
 5129               	; Convert a counted character string left at _ca_, to a signed
 5130               	; .double number, using the current numeric base. If a decimal
 5131               	; point is encountered in the text, its position will be given
GAS LISTING solo_forth.z80s 			page 94


 5132               	; in `dpl`, but no other effect occurs. If numeric conversion is
 5133               	; not possible, an error message will be given.
 5134               	;
 5135               	; }doc
 5136               	
 5137               	  ;dw cr_,dup_,count_,swap_,dot_,dot_ ; XXX INFORMER
 5138               	  ;dw dup_,count_,type_ ; XXX INFORMER
 5139 1250 C10C C10C 	  dw zero_,zero_,rot_ ; two zeros, initial value of the double number
 5139      1A0E 
 5140 1256 DC0B 530D 	  dw dup_,one_plus_,c_fetch_ ; get the first digit
 5140      1F0C 
 5141 125c 8306 2D   	  _literal '-'
 5142 125f E50D      	  dw equals_ ; is it a minus sign?
 5143 1261 DC0B EC0A 	  dw dup_,to_r_ ; save the flag
 5144               	.if true=(-1)
 5145               	  dw abs_
 5146               	.endif
 5147 1265 7D0B      	  dw plus_
 5148               	  ; If the first digit is "-", the flag is 1,
 5149               	  ; and addr+1 points to the second digit.
 5150               	  ; If the first digit is not "-", the flag is
 5151               	  ; 0.  addr+0 remains the same, pointing to
 5152               	  ; the first digit.
 5153 1267 8D06 FFFF 	  dw lit_,-1 ; initial value of `dpl`
 5154               	number.begin:
 5155 126b 320D 450C 	  dw dpl_,store_
 5156 126f 0C12      	  dw paren_number_ ; convert one digit after another until an invalid char occurs
 5157 1271 DC0B 1F0C 	  dw dup_,c_fetch_ ; get the invalid digit
 5158               	  ;dw dot_s_,key_,drop_; XXX INFORMER
 5159               	  ;dw cr_,dup_,emit_; XXX INFORMER
 5160 1275 DD0C E50D 	  dw b_l_,equals_ ; is it a blank?
 5161 1279 6C07 9012 	  dw question_branch_,number.a_blank
 5162               	  ; The invalid digit is not a blank.
 5163 127d DC0B 1F0C 	  dw dup_,c_fetch_ ; get the invalid digit again
 5164 1281 8306 2E   	  _literal '.'
 5165 1284 D80D      	  dw not_equals_ ; not a decimal point?
 5166 1286 C50C 090F 	  _question_error error.not_understood ; error if not
 5167               	  ; Decimal point found, set `dpl` to zero next time.
 5168 128a C10C      	  dw zero_
 5169 128c 5707 6B12 	  dw branch_,number.begin ; repeat
 5170               	number.a_blank:
 5171 1290 D00B      	  dw drop_ ; discard address
 5172 1292 FB0A      	  dw from_r_ ; pop the flag of "-" sign back
 5173 1294 6007 9A12 	  dw zero_branch_,number.end
 5174               	  ; The first digit is a "-" sign.
 5175 1298 A30B      	  dw dnegate_
 5176               	number.end:
 5177 129a BC0A      	  dw semicolon_s_
 5178               	
 5179               	; ----------------------------------------------
 5180 129c 9E12      	  _code_header upper_,"UPPER"
 5181               	
 5182               	; doc{
 5183               	;
 5184               	; upper  ( c -- c' )
 5185               	;
 5186               	; }doc
GAS LISTING solo_forth.z80s 			page 95


 5187               	
 5188 129e E1        	  pop hl
 5189 129f 7D        	  ld a,l
 5190 12a0 CDA7 12   	  call upper.a
 5191 12a3 6F        	  ld l,a
 5192 12a4 C35E 05   	  jp push_hl
 5193               	
 5194               	upper.a:
 5195               	  ; Convert the ASCII char in the 'a' register to uppercase.
 5196 12a7 FE61      	  cp 'a'
 5197 12a9 D8        	  ret c
 5198 12aa FE7B      	  cp 'z'+1
 5199 12ac D0        	  ret nc
 5200 12ad EE20      	  xor 0x20 ; toggle bit 5
 5201 12af C9        	  ret
 5202               	
 5203               	; ----------------------------------------------
 5204 12b0 B212      	  _code_header uppers_,"UPPERS"
 5205               	
 5206               	; doc{
 5207               	;
 5208               	; uppers  ( ca len -- )
 5209               	;
 5210               	; }doc
 5211               	
 5212 12b2 D1        	  pop de
 5213 12b3 E1        	  pop hl
 5214               	uppers.do:
 5215 12b4 7A        	  ld a,d
 5216 12b5 B3        	  or e
 5217 12b6 CA5F 05   	  jp z,next
 5218 12b9 7E        	  ld a,(hl)
 5219 12ba CDA7 12   	  call upper.a
 5220 12bd 77        	  ld (hl),a
 5221 12be 23        	  inc hl
 5222 12bf 1B        	  dec de
 5223 12c0 C3B4 12   	  jp uppers.do
 5224               	
 5225               	; ----------------------------------------------
 5226 12c3 610C      	  _colon_header defined_question_,"DEFINED?"
 5227               	
 5228               	; defined?  ( ca len -- wf )
 5229               	
 5230 12c5 3813 B90B 	  dw found_,nip_,zero_not_equals_
 5230      5E0B 
 5231 12cb BC0A      	  dw semicolon_s_
 5232               	
 5233               	; ----------------------------------------------
 5234 12cd 610C      	  _colon_header undefined_question_,"UNDEFINED?"
 5235               	
 5236               	; doc{
 5237               	;
 5238               	; undefined?  ( ca len -- wf )
 5239               	;
 5240               	; }doc
 5241               	
 5242 12cf C312 530B 	  dw defined_question_,zero_equals_
GAS LISTING solo_forth.z80s 			page 96


 5243 12d3 BC0A      	  dw semicolon_s_
 5244               	
 5245               	; ----------------------------------------------
 5246 12d5 D712      	  _code_header dollar_store_,"$!"
 5247               	
 5248               	  ; [Code from DZX-Forth's `packed`.]
 5249               	
 5250               	; doc{
 5251               	;
 5252               	; $!  ( ca1 len1 ca2 -- )
 5253               	;
 5254               	; Store the string _ca1 len1_ as a counted string at _ca2_.  The
 5255               	; source and destination strings are permitted to overlap.
 5256               	;
 5257               	; An ambiguous condition exists if _len1_ is greater than 255 or
 5258               	; the buffer at _ca2_ is less than _len1_+1 characters.
 5259               	;
 5260               	; }doc
 5261               	
 5262               	  ; XXX TODO rename? `s!`, `packed`, `pack`, `uncount`...
 5263               	
 5264 12d7 D9        	  exx
 5265 12d8 D1        	  pop de      ; de=ca2
 5266 12d9 C1        	  pop bc      ; c=len1
 5267 12da E1        	  pop hl      ; hl=ca1
 5268 12db C5        	  push bc     ; len1
 5269 12dc D5        	  push de     ; ca2
 5270 12dd 13        	  inc  de
 5271 12de CD1C 05   	  call move_block
 5272 12e1 E1        	  pop hl      ; ca2
 5273 12e2 D1        	  pop de      ; e=len1
 5274 12e3 73        	  ld (hl),e
 5275 12e4 D9        	  exx
 5276 12e5 DDE9      	  _jp_next
 5277               	
 5278               	; ----------------------------------------------
 5279 12e7 610C      	  _colon_header find_,"FIND"
 5280               	
 5281               	; doc{
 5282               	;
 5283               	; find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5284               	;
 5285               	; Find the definition named in the counted string at _ca_. If
 5286               	; the definition is not found after searching all the
 5287               	; vocabularies in the search order, return _ca_ and zero.  If
 5288               	; the definition is found, return its _cfa_. If the definition
 5289               	; is immediate, also return one (1); otherwise also return
 5290               	; minus-one (-1).
 5291               	;
 5292               	; }doc
 5293               	
 5294               	  ; : find  ( ca --- ca 0 | cfa 1 | cfa -1 )
 5295               	  ;   #vocs 0 do
 5296               	  ;     context i cells + @  ?dup
 5297               	  ;     if  @ (find) ?dup if  unloop exit  then  then
 5298               	  ;   loop  false  ;
 5299               	
GAS LISTING solo_forth.z80s 			page 97


 5300 12e9 F90C C10C 	  dw hash_vocs_,zero_,paren_do_
 5300      AD07 
 5301               	find.do:
 5302 12ef 260D 4408 	  dw context_,i_,cells_,plus_,fetch_
 5302      7C0D 7D0B 
 5302      160C 
 5303 12f9 2A0E      	  dw question_dup_ ; a vocabulary in the search order?
 5304 12fb 6007 0D13 	  dw zero_branch_,find.loop ; if not, next
 5305               	  ; valid vocabulary in the search order
 5306 12ff 160C 6508 	  dw fetch_,paren_find_,question_dup_ ; word found in the vocabulary?
 5306      2A0E 
 5307 1305 6007 0D13 	  dw zero_branch_,find.loop ; if not, try the next vocabulary
 5308 1309 D20A 281D 	  dw unloop_,exit_
 5309               	find.loop:
 5310 130d 7807 EF12 	  dw paren_loop_,find.do,false_
 5310      CD0C 
 5311 1313 BC0A      	  dw semicolon_s_
 5312               	
 5313               	; ----------------------------------------------
 5314 1315 1814      	  _variable_header find_dollar_,"FIND$"
 5315               	
 5316               	  ; XXX TODO use an unused address above `pad` instead?
 5317               	  ; XXX TODO rename to `word$`?
 5318               	  ; XXX TODO use also in `word`?
 5319               	
 5320 1317 0000 0000 	  ds max_word_length+2
 5320      0000 0000 
 5320      0000 0000 
 5320      0000 0000 
 5320      0000 0000 
 5321               	
 5322               	; ----------------------------------------------
 5323 1338 610C      	  _colon_header found_,"FOUND"
 5324               	
 5325               	; doc{
 5326               	;
 5327               	; found  ( ca len --- ca 0 | cfa 1 | cfa -1 )
 5328               	;
 5329               	; }doc
 5330               	
 5331               	  ; XXX TODO factor
 5332               	
 5333 133a 1513      	  dw find_dollar_
 5334 133c 8306 21   	  _literal max_word_length+2
 5335 133f 5211      	  dw erase_ ; make sure there will be a null at the end
 5336 1341 1513 D512 	  dw find_dollar_,dollar_store_
 5337 1345 1513 0310 	  dw find_dollar_,count_,uppers_
 5337      B012 
 5338 134b 1513 E712 	  dw find_dollar_,find_
 5339 134f BC0A      	  dw semicolon_s_
 5340               	
 5341               	; ----------------------------------------------
 5342 1351 610C      	  _colon_header paren_abort_,"(ABORT)"
 5343               	
 5344 1353 5F16      	  dw abort_
 5345 1355 BC0A      	  dw semicolon_s_
 5346               	
GAS LISTING solo_forth.z80s 			page 98


 5347               	; ----------------------------------------------
 5348 1357 1814      	  _variable_header error_number_,"ERROR#"
 5349               	
 5350 1359 0000      	  dw 0
 5351               	
 5352               	; ----------------------------------------------
 5353 135b 1814      	  _two_variable_header error_pos_,"ERROR-POS"
 5354               	
 5355 135d 0000 0000 	  dw 0,0
 5356               	
 5357               	; ----------------------------------------------
 5358 1361 610C      	  _colon_header error_to_line_,"ERROR>LINE"
 5359               	
 5360               	; doc{
 5361               	;
 5362               	; error>line  ( n1 -- n2 )
 5363               	;
 5364               	; Convert an error number to its correspondent line offset. This
 5365               	; is used in order to skip the first line of screens and use
 5366               	; them as screen headers as usual.
 5367               	;
 5368               	; }doc
 5369               	
 5370 1363 DC0B 530D 	  dw dup_,one_plus_,one_,paren_do_
 5370      C50C AD07 
 5371               	error_to_number.do:
 5372 136b 4408      	  dw i_
 5373 136d 8306 10   	  _literal 16
 5374 1370 5317 530B 	  dw mod_,zero_equals_
 5375               	.if true=(-1)
 5376               	  dw abs_
 5377               	.endif
 5378 1374 7D0B      	  dw plus_
 5379 1376 7807 6B13 	  dw paren_loop_,error_to_number.do
 5380 137a BC0A      	  dw semicolon_s_
 5381               	
 5382               	; ----------------------------------------------
 5383 137c 610C      	  _colon_header error_,"ERROR"
 5384               	
 5385 137e DC0B 5713 	  dw dup_,error_number_,store_ ; save the error number
 5385      450C 
 5386 1384 100D 160C 	  dw warning_,fetch_,zero_less_than_ ; custom error routine?
 5386      690B 
 5387 138a 6C07 5313 	  dw question_branch_,paren_abort_pfa ; if so, branch to it
 5388               	
 5389               	error.message:
 5390 138e 8C0D 0310 	  dw here_,count_,type_ ; last parsed word ; XXX TODO adapt to `parse-word`
 5390      1610 
 5391 1394 4910      	  dw paren_dot_quote_
 5392 1396 0427 3F20 	  _string '? '
 5392      27
 5393 139b A917      	  dw message_
 5394 139d 070D 160C 	  dw sp0_,fetch_,sp_store_
 5394      A20A 
 5395 13a3 1A0D 160C 	  dw blk_,fetch_,question_dup_
 5395      2A0E 
 5396 13a9 6007 B713 	  dw zero_branch_,error.end
GAS LISTING solo_forth.z80s 			page 99


 5397 13ad 1D0D 160C 	  dw to_in_,fetch_
 5398 13b1 D50B      	  dw swap_
 5399 13b3 5B13 370C 	  dw error_pos_,two_store_
 5400               	error.end:
 5401 13b7 EA15      	  dw quit_
 5402               	
 5403               	; ----------------------------------------------
 5404 13b9 610C      	  _colon_header id_dot_,"ID."
 5405               	
 5406 13bb EA0E 1610 	  dw nfa_to_string_,type_,space_
 5406      220E 
 5407 13c1 BC0A      	  dw semicolon_s_
 5408               	
 5409               	; ----------------------------------------------
 5410 13c3 610C      	  _colon_header header_,"HEADER"
 5411               	
 5412               	; header  ( "name" -- )
 5413               	
 5414               	  ; XXX TODO -- make sure `current` is searched? else duplicated
 5415               	  ; definitions would not be remarked.
 5416               	  ;
 5417               	  ; the only secure method is:
 5418               	  ;
 5419               	  ;   get-order n>r also current @ context ! defined nr> set-order
 5420               	  ;
 5421               	  ; but that would make the compilation slower.
 5422               	  ; i think it can be left to the programmer.
 5423               	
 5424 13c5 6319      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5425 13c7 C216 3717 	  dw abs_,star_,question_dup_ ; ( 0 | cfa cfa )
 5425      2A0E 
 5426 13cd 6007 DA13 	  dw zero_branch_,header.continue
 5427               	  ; The word is not unique.
 5428 13d1 5E0E      	  dw cfa_to_nfa_
 5429               	
 5430 13d3 B913      	  dw id_dot_
 5431 13d5 8306 04A9 	  _message error.not_unique
 5431      17
 5432               	header.continue:
 5433               	
 5434               	    ; XXX TODO adapt to `parse-word`; now it works because
 5435               	    ; `defined` still uses `word`, that leaves the string at
 5436               	    ; `here`.
 5437               	
 5438 13da 8C0D 0310 	  dw here_,count_
 5439               	  ; XXX TODO error if name is too long? (see lina)
 5440 13de 0D0D 160C 	  dw width_,fetch_,min_
 5440      E616 
 5441 13e4 EA06 C00B 	  dw save_string_,tuck_ ; ( len ca len )
 5442 13e8 C50C 9806 	  _names_bank
 5443 13ec 8C0D 8B0A 	  dw here_,comma_np_ ; store a pointer to the cfa
 5444 13f0 420E 8B0A 	  dw latest_,comma_np_ ; link field
 5445               	  ; Now `np` contains the address of the nfa.
 5446 13f4 7B0A D512 	  dw np_fetch_,dollar_store_ ; store the name
 5447 13f8 7B0A 290D 	  dw np_fetch_,current_,fetch_,store_ ; update contents of `latest` in the current vocabulary
 5447      160C 450C 
 5448 1400 9C0F      	  dw smudge_ ; set the smudge bit and page the default bank
GAS LISTING solo_forth.z80s 			page 100


 5449 1402 530D 730A 	  dw one_plus_,np_,plus_store_ ; update the names pointer with the length+1
 5449      EC0B 
 5450 1408 8C0D 5A0D 	  dw here_,two_plus_,comma_ ; compile the pfa into code field
 5450      AE0D 
 5451 140e BC0A      	  dw semicolon_s_
 5452               	
 5453               	; ----------------------------------------------
 5454 1410 610C      	  _colon_header create_,"CREATE"
 5455               	
 5456 1412 C313 9C0F 	  dw header_,smudge_
 5457 1416 C50F      	  dw paren_semicolon_code_
 5458               	do_create:
 5459 1418 13        	  inc de  ; de=pfa
 5460 1419 D5        	  push de
 5461 141a DDE9      	  _jp_next
 5462               	
 5463               	; ----------------------------------------------
 5464 141c 610C      	  _colon_header code_,"CODE"
 5465               	
 5466 141e C313      	  dw header_
 5467 1420 FF0E      	  dw store_csp_
 5468 1422 FD05 5906 	  dw also_,assembler_,asm_
 5468      8205 
 5469 1428 BC0A      	  dw semicolon_s_
 5470               	
 5471               	; ----------------------------------------------
 5472 142a 2C14      	  _code_header compare_,"COMPARE"
 5473               	
 5474               	  ; ANS Forth
 5475               	  ; Adapted from DZX-Forth
 5476               	
 5477               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5478               	  ; because there will be no option to change it.
 5479               	  ; Use shorter internal code instead.
 5480               	  ; When case insensitive comparation is needed,
 5481               	  ; `uppers` can be used.
 5482               	
 5483 142c D1        	  pop de      ; de = len2
 5484 142d E1        	  pop hl      ; hl = ca2
 5485 142e E3        	  ex (sp),hl  ; hl = len1 ; ( ca1 ca2 )
 5486 142f 7A        	  ld a,d
 5487 1430 BC        	  cp h
 5488 1431 2002      	  jr nz,compare.lengths
 5489 1433 7B        	  ld a,e
 5490 1434 BD        	  cp l
 5491               	compare.lengths:
 5492               	  ; cy = string2 is longer than string1?
 5493 1435 3801      	  jr c,compare.ready
 5494 1437 EB        	  ex de,hl
 5495               	compare.ready:
 5496               	  ; de = length of the short string
 5497               	  ; hl = length of the long string
 5498 1438 69        	  ld l,c
 5499 1439 60        	  ld h,b ; hl = Forth IP
 5500 143a C1        	  pop bc ; bc = ca2
 5501 143b E3        	  ex (sp),hl ; hl = ca1 ; save Forth IP
 5502 143c F5        	  push af ; save carry flag
GAS LISTING solo_forth.z80s 			page 101


 5503               	compare.compare_strings: equ $+1 ; XXX not used
 5504 143d CD55 14   	  call compare_strings_case_sensitive
 5505 1440 2003      	  jr nz,compare.no_match
 5506               	
 5507               	compare.match:
 5508               	  ; The smaller string matches.
 5509 1442 F1        	  pop af ; restore flags
 5510 1443 1801      	  jr compare.end
 5511               	
 5512               	compare.no_match:
 5513               	  ; The smaller string does not match.
 5514 1445 C1        	  pop bc ; useless carry flag
 5515               	
 5516               	compare.end:
 5517 1446 C1        	  pop bc ; restore Forth IP
 5518 1447 2101 00   	  ld hl,1
 5519 144a DA5E 05   	  jp c,push_hl
 5520 144d 2B        	  dec hl ; 0
 5521 144e CA5E 05   	  jp z,push_hl ; string1 equals string2
 5522 1451 2B        	  dec hl ; -1
 5523 1452 C35E 05   	  jp push_hl
 5524               	
 5525               	compare_strings_case_sensitive:
 5526               	  ; Used by 'compare' and 'search'.
 5527               	  ; Input:
 5528               	  ;   HL = a1
 5529               	  ;   BC = a2
 5530               	  ;   DE = len
 5531               	  ; Output:
 5532               	  ;   Z = match?
 5533               	  ; [Code from DZX-Forth.]
 5534 1455 7B        	  ld a,e
 5535 1456 B2        	  or d
 5536 1457 C8        	  ret z
 5537 1458 0A        	  ld a,(bc)
 5538 1459 BE        	  cp (hl)
 5539 145a C0        	  ret nz
 5540 145b 23        	  inc hl
 5541 145c 03        	  inc bc
 5542 145d 1B        	  dec de
 5543 145e C355 14   	  jp compare_strings_case_sensitive
 5544               	
 5545               	; ----------------------------------------------
 5546 1461 6314      	  _code_header search_,"SEARCH"
 5547               	
 5548               	  ; search  ( ca1 len1 ca2 len2 -- ca3 len3 -1 | ca1 len1 0 )
 5549               	
 5550               	  ; ANS Forth
 5551               	
 5552               	  ; Adapted from DZX-Forth.
 5553               	  ;
 5554               	  ; XXX TODO do not use compare_strings_case_sensitive,
 5555               	  ; because there will be no option to change it.
 5556               	  ; Use shorter internal code instead.
 5557               	  ; When case insensitive comparation is needed,
 5558               	  ; `uppers` can be used.
 5559               	
GAS LISTING solo_forth.z80s 			page 102


 5560 1463 D9        	  exx ; save Forth IP
 5561 1464 E1        	  pop hl
 5562 1465 2285 14   	  ld (search.string_2_len),hl
 5563 1468 7D        	  ld a,l
 5564 1469 B4        	  or h ; len2 is zero?
 5565 146a C1        	  pop bc ; ca2
 5566 146b E1        	  pop hl ; len1
 5567 146c 229E 14   	  ld (search.string_1_len),hl
 5568 146f EB        	  ex de,hl ; de = len1
 5569 1470 E1        	  pop hl ; ca1
 5570 1471 22A2 14   	  ld (search.string_1_addr),hl
 5571 1474 CA91 14   	  jp z,search.match ; if len2 is zero, match
 5572 1477 2B        	  dec hl
 5573 1478 13        	  inc de
 5574               	search.1:
 5575 1479 23        	  inc hl ; address of current char of string 1
 5576 147a 1B        	  dec de ; remaining length of string 1
 5577 147b 7B        	  ld a,e
 5578 147c B2        	  or d ; end of string 1?
 5579 147d CA9A 14   	  jp z,search.no_match
 5580               	; XXX OLD -- already commented out in DX-Forth:
 5581               	; ld a,(bc)
 5582               	; cp  (hl)
 5583               	; jp nz,search.1
 5584 1480 D5        	  push de
 5585 1481 C5        	  push bc
 5586 1482 E5        	  push hl
 5587 1483 EB        	  ex de,hl
 5588               	search.string_2_len equ $+1
 5589 1484 2100 00   	  ld hl,0  ; length of the second string
 5590 1487 EB        	  ex de,hl
 5591 1488 CD55 14   	  call compare_strings_case_sensitive
 5592 148b E1        	  pop hl
 5593 148c C1        	  pop bc
 5594 148d D1        	  pop de
 5595 148e C279 14   	  jp nz,search.1
 5596               	
 5597               	search.match:
 5598 1491 0101 00   	  ld bc,true
 5599               	search.end:
 5600 1494 E5        	  push hl
 5601 1495 D5        	  push de
 5602 1496 C5        	  push bc
 5603 1497 D9        	  exx ; restore Forth IP
 5604 1498 DDE9      	  _jp_next
 5605               	
 5606               	search.no_match:
 5607 149a 0100 00   	  ld bc,false
 5608               	search.string_1_len equ $+1
 5609 149d 2100 00   	  ld hl,0  ; length of the first string
 5610 14a0 EB        	  ex de,hl
 5611               	search.string_1_addr equ $+1
 5612 14a1 2100 00   	  ld hl,0  ; address of the first string
 5613 14a4 C394 14   	  jp search.end
 5614               	
 5615               	; ----------------------------------------------
 5616 14a7 610C      	  _colon_header bracket_compile_,"[COMPILE]",immediate
GAS LISTING solo_forth.z80s 			page 103


 5617               	
 5618 14a9 8E19 BA0D 	  dw tick_,compile_comma_
 5619 14ad BC0A      	  dw semicolon_s_
 5620               	
 5621               	; ----------------------------------------------
 5622 14af 610C      	  _colon_header s_literal_,"SLITERAL",immediate
 5623               	
 5624               	  ; : sliteral  ( ca len -- )  compile slit s,  ; immediate
 5625               	
 5626 14b1 640F 5F06 	  dw compile_,s_lit_,s_comma_
 5626      9C0D 
 5627 14b7 BC0A      	  dw semicolon_s_
 5628               	
 5629               	; ----------------------------------------------
 5630 14b9 610C      	  _colon_header c_literal_,"CLITERAL",immediate
 5631               	
 5632               	; doc{
 5633               	;
 5634               	; cliteral  ( b -- )  \ I
 5635               	;
 5636               	; If compiling, then compile the stack value _b_ as a 8-bit literal.
 5637               	; `cliteral` does the same than `literal` but saves one byte of
 5638               	; dictionary space.
 5639               	;
 5640               	; }doc
 5641               	
 5642               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5643               	
 5644               	  .if 1 ; XXX OLD
 5645 14bb 190F      	    dw comp_question_
 5646 14bd 6007 C714 	    dw zero_branch_,c_literal.end
 5647 14c1 640F 8306 	    dw compile_,c_lit_,c_comma_
 5647      C20D 
 5648               	c_literal.end:
 5649               	  .else ; XXX NEW
 5650               	    dw question_comp_
 5651               	    dw compile_,c_lit_,comma_
 5652               	  .endif
 5653 14c7 BC0A      	  dw semicolon_s_
 5654               	
 5655               	; ----------------------------------------------
 5656 14c9 610C      	  _colon_header literal_,"LITERAL",immediate
 5657               	
 5658               	; doc{
 5659               	;
 5660               	; literal  ( n -- )  \ fig-Forth, I
 5661               	;
 5662               	; If compiling, then compile the stack value _n_ as a 16-bit literal.
 5663               	;
 5664               	; }doc
 5665               	
 5666               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5667               	
 5668               	  .if 1 ; XXX OLD
 5669 14cb 190F      	    dw comp_question_
 5670 14cd 6007 D714 	    dw zero_branch_,literal.end
 5671 14d1 640F 8D06 	    dw compile_,lit_,comma_
GAS LISTING solo_forth.z80s 			page 104


 5671      AE0D 
 5672               	literal.end:
 5673               	  .else ; XXX NEW
 5674               	    dw question_comp_
 5675               	    dw compile_,lit_,comma_
 5676               	  .endif
 5677 14d7 BC0A      	  dw semicolon_s_
 5678               	
 5679               	; ----------------------------------------------
 5680 14d9 610C      	  _colon_header two_literal_,"2LITERAL",immediate
 5681               	
 5682               	; doc{
 5683               	;
 5684               	; 2literal  ( d -- )  \ I
 5685               	;
 5686               	; If compiling, then compile the stack value _d_ as a 32-bit literal.
 5687               	;
 5688               	; }doc
 5689               	
 5690               	  ; XXX TODO -- `interpret` needs the old method of `literal`
 5691               	
 5692               	  .if 1 ; XXX OLD
 5693 14db 190F      	    dw comp_question_
 5694 14dd 6007 E714 	    dw zero_branch_,two_literal.end
 5695 14e1 D50B C914 	    dw swap_,literal_,literal_
 5695      C914 
 5696               	two_literal.end:
 5697               	  .else ; XXX NEW
 5698               	    ; XXX TODO -- dlit
 5699               	    dw question_comp_
 5700               	    dw swap_,literal_,literal_
 5701               	  .endif
 5702 14e7 BC0A      	  dw semicolon_s_
 5703               	
 5704               	; ----------------------------------------------
 5705 14e9 610C      	  _colon_header depth_,"DEPTH"
 5706               	
 5707 14eb 990A 070D 	  dw sp_fetch_,sp0_,fetch_,minus_,lit_,-2,slash_
 5707      160C CE0D 
 5707      8D06 FEFF 
 5707      4B17 
 5708 14f9 BC0A      	  dw semicolon_s_
 5709               	
 5710               	; ----------------------------------------------
 5711 14fb 610C      	  _colon_header question_stack_,"?STACK"
 5712               	
 5713               	; doc{
 5714               	;
 5715               	; ?stack  ( -- )  \ fig-Forth
 5716               	;
 5717               	; Issue an error message if the stack is out of bounds.
 5718               	;
 5719               	; }doc
 5720               	
 5721 14fd 990A      	  dw sp_fetch_
 5722 14ff 070D 160C 	  dw sp0_,fetch_
 5723 1503 D50B F20D 	  dw swap_,less_than_
GAS LISTING solo_forth.z80s 			page 105


 5724 1507 C90C 090F 	  _question_error error.stack_empty
 5725 150b 990A      	  dw sp_fetch_
 5726 150d 8D06 7601 	  dw lit_,data_stack_limit
 5727 1511 F20D      	  dw less_than_
 5728 1513 8306 0709 	  _question_error error.full_stack
 5728      0F
 5729 1518 BC0A      	  dw semicolon_s_
 5730               	
 5731               	; ----------------------------------------------
 5732 151a 610C      	  _colon_header interpret_,"INTERPRET"
 5733               	
 5734               	; doc{
 5735               	;
 5736               	; interpret  ( -- )
 5737               	;
 5738               	; The outer text interpreter which sequentially executes or
 5739               	; compiles text from the input stream (terminal or disk)
 5740               	; depending on `state`. if the word name cannot be found after a
 5741               	; search of the `context` search order it is converted to a
 5742               	; number according to the current `base`.  That also failing, an
 5743               	; error message echoing the name with a "?" will be given.
 5744               	;
 5745               	; }doc
 5746               	
 5747               	interpret.begin:
 5748               	
 5749               	  ; XXX TODO -- finish
 5750               	
 5751               	  ; XXX TODO -- In order to change the behaviour of `literal`,
 5752               	  ; `2literal` and `cliteral` (make them give an error in
 5753               	  ; interpretation mode), `interpret` must be modified.
 5754               	
 5755               	
 5756 151c FB14      	  dw question_stack_
 5757               	  ; dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5758 151e 6319      	  dw defined_ ; ( ca 0 | cfa 1 | cfa -1 )
 5759               	  ;dw cr_,dot_s_ ; XXX INFORMER
 5760               	  ; _echo 'In interpret after defined ' ; XXX INFORMER
 5761               	  ; dw hex_,dot_s_,decimal_,key_,drop_ ; XXX INFORMER
 5762 1520 2A0E      	  dw question_dup_ ; found?
 5763               	  ; dw lit_,4,border_,dot_s_,key_,drop_ ; XXX INFORMER
 5764 1522 6007 3C15 	  dw zero_branch_,interpret.word_not_found
 5765               	
 5766               	  ; Found ( cfa 1 | cfa -1 )
 5767               	  ; Immediate word:     ( cfa  1 )
 5768               	  ; Non-immediate word: ( cfa -1 )
 5769 1526 190F      	  dw comp_question_
 5770               	  ; ( cfa 1 state | cfa -1 state )
 5771               	.if true=1
 5772               	  ; Compiling an immediate word:     ( cfa  1 1 )
 5773               	  ; Compiling a non-immediate word:  ( cfa -1 1 )
 5774               	  ; Executing an immediate word:     ( cfa  1 0 )
 5775               	  ; Executing a non-immediate word:  ( cfa -1 0 )
 5776 1528 970B      	  dw negate_
 5777               	.endif
 5778               	  ; Compiling an immediate word:     ( cfa  1 -1 )
 5779               	  ; Compiling a non-immediate word:  ( cfa -1 -1 )
GAS LISTING solo_forth.z80s 			page 106


 5780               	  ; Executing an immediate word:     ( cfa  1  0 )
 5781               	  ; Executing a non-immediate word:  ( cfa -1  0 )
 5782 152a E50D      	  dw equals_ ; compiling a non-immediate word?
 5783 152c 6007 3615 	  dw zero_branch_,interpret.execute
 5784               	
 5785               	  ; Compiling a non-immediate word  ( cfa )
 5786 1530 BA0D      	  dw compile_comma_
 5787 1532 5707 1C15 	  dw branch_,interpret.begin
 5788               	
 5789               	interpret.execute:
 5790               	  ; Executing or immediate ( cfa )
 5791               	  ;_echo 'about to execute cfa ' ; XXX INFORMER
 5792               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5793               	;  dw dup_,u_dot_,key_,drop_ ; XXX INFORMER
 5794 1536 1C07      	  dw execute_
 5795               	  ;dw zero_,border_ ; XXX INFORMER
 5796 1538 5707 1C15 	  dw branch_,interpret.begin
 5797               	
 5798               	interpret.word_not_found:
 5799               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5800               	  ; try to convert the text to a number
 5801               	  ; ( ca )
 5802               	  ;_echo 'about to convert to number ' ; XXX INFORMER
 5803               	  ;dw lit_,5,border_,key_,drop_ ; XXX INFORMER
 5804 153c 4E12      	  dw number_
 5805               	  ;dw zero_,border_ ; XXX INFORMER
 5806 153e 320D 160C 	  dw dpl_,fetch_,one_plus_ ; is there a decimal point?
 5806      530D 
 5807 1544 6007 4E15 	  dw zero_branch_,interpret.16bit_number
 5808               	  ; decimal point detected, so it's a double, 32-bit, number
 5809               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5810 1548 D914      	  dw two_literal_
 5811 154a 5707 1C15 	  dw branch_,interpret.begin
 5812               	
 5813               	interpret.16bit_number:
 5814               	  ;dw lit_,1,border_,key_,drop_ ; XXX INFORMER
 5815               	  ; no decimal point, so it's a 16-bit number
 5816 154e D00B      	  dw drop_ ; discard high order part of the double number
 5817               	  ; XXX TODO use `c_literal` for 8-bit values.
 5818 1550 C914      	  dw literal_
 5819 1552 5707 1C15 	  dw branch_,interpret.begin
 5820               	
 5821               	; ----------------------------------------------
 5822 1556 610C      	  _colon_header immediate_,"IMMEDIATE"
 5823               	
 5824 1558 420E      	  dw latest_
 5825 155a 8306 40   	  _literal precedence_bit_mask
 5826               	  ; XXX TODO factor `toggle-names'?
 5827 155d C50C 9806 	  _names_bank
 5828 1561 0D0C      	  dw toggle_
 5829 1563 C10C 9806 	  _default_bank
 5830 1567 BC0A      	  dw semicolon_s_
 5831               	
 5832               	; ----------------------------------------------
 5833 1569 610C      	  _colon_header vocabulary_,"VOCABULARY"
 5834               	
 5835               	; doc{
GAS LISTING solo_forth.z80s 			page 107


 5836               	;
 5837               	; vocabulary  ( "name" -- )
 5838               	;
 5839               	; Create a vocabulary with the parsed "name" as its name. The
 5840               	; run-time efect of `name` is to replace `context`, the top
 5841               	; vocabulary in the search order.
 5842               	;
 5843               	; }doc
 5844               	
 5845 156b 1014      	  dw create_
 5846 156d C10C AE0D 	  dw zero_,comma_ ; space for the nfa of the latest word defined in the vocabulary
 5847 1571 8C0D      	  dw here_ ; address of vocabulary link
 5848 1573 160D 160C 	  dw voc_link_,fetch_,comma_ ; compile the current content of `voc-link`
 5848      AE0D 
 5849 1579 160D 450C 	  dw voc_link_,store_ ; update `voc-link` with the link in this vocabulary
 5850               	
 5851 157d C50F      	  dw paren_semicolon_code_
 5852               	
 5853               	do_vocabulary:
 5854 157f CDF4 0F   	  call do_does
 5855               	
 5856               	  ; The next words are to be executed when the vocabulary is invoked.
 5857 1582 C909 4910 	  _echo "Was here 1"
 5857      0457 6173 
 5857      2068 6572 
 5857      6520 31
 5858 1591 8D06 0300 	  dw lit_,3,border_,key_,drop_ ; XXX INFORMER
 5858      511C 5709 
 5858      D00B 
 5859 159b 260D      	  dw context_
 5860 159d C909 4910 	  _echo "Was here 2"
 5860      0A57 6173 
 5860      2068 6572 
 5860      6520 32
 5861 15ac 8D06 0400 	  dw lit_,4,border_,key_,drop_ ; XXX INFORMER
 5861      511C 5709 
 5861      D00B 
 5862 15b6 450C      	  dw store_
 5863 15b8 C909 4910 	  _echo "Was here 3"
 5863      0A57 6173 
 5863      2068 6572 
 5863      6520 33
 5864 15c7 8D06 0500 	  dw lit_,5,border_,key_,drop_ ; XXX INFORMER
 5864      511C 5709 
 5864      D00B 
 5865 15d1 BC0A      	  dw semicolon_s_
 5866               	
 5867               	; ----------------------------------------------
 5868 15d3 610C      	  _colon_header definitions_,"DEFINITIONS"
 5869               	
 5870 15d5 260D 160C 	  dw context_,fetch_
 5871 15d9 290D 450C 	  dw current_,store_
 5872 15dd BC0A      	  dw semicolon_s_
 5873               	
 5874               	; ----------------------------------------------
 5875 15df 610C      	  _colon_header paren_,"(",immediate
 5876               	
GAS LISTING solo_forth.z80s 			page 108


 5877 15e1 8306 29   	  _literal ')'
 5878               	  ; XXX TODO use `skip`?
 5879 15e4 A311 A21B 	  dw parse_,two_drop_
 5880 15e8 BC0A      	  dw semicolon_s_
 5881               	
 5882               	; ----------------------------------------------
 5883 15ea 610C      	  _colon_header quit_,"QUIT"
 5884               	
 5885               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5886 15ec 1A0D F90B 	  dw blk_,off_
 5887 15f0 8C0F      	  dw left_bracket_
 5888               	quit.do:
 5889               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5890 15f2 0A0D 160C 	  dw rp0_,fetch_,rp_store_
 5890      B40A 
 5891               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5892 15f8 C909      	  dw cr_
 5893               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5894 15fa F910      	  dw query_
 5895               	  ; XXX FIXME never reached before the crash
 5896               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 5897 15fc 1A15      	  dw interpret_
 5898 15fe 190F      	  dw comp_question_
 5899 1600 6C07 F215 	  dw question_branch_,quit.do
 5900 1604 4910      	  dw paren_dot_quote_
 5901 1606 0A27 6F6B 	  _string 'ok'
 5901      27
 5902 160b 5707 F215 	  dw branch_,quit.do
 5903               	
 5904               	.if show_version
 5905               	
 5906               	; ----------------------------------------------
 5907               	  _constant_header version_release_,"VERSION-RELEASE"
 5908               	
 5909               	  ; XXX TMP for debugging
 5910               	
 5911               	  dw version_release_variable
 5912               	
 5913               	; ----------------------------------------------
 5914               	  _colon_header dot_version_,".VERSION"
 5915               	
 5916               	  ; XXX TMP
 5917               	
 5918               	  dw lit_,version_status_variable,fetch_,emit_
 5919               	  _literal '-'
 5920               	  dw emit_
 5921               	  dw lit_,version_branch_variable,fetch_
 5922               	  dw s_to_d_,less_hash_,hash_,hash_,hash_greater_,type_
 5923               	  _literal '-'
 5924               	  dw emit_
 5925               	  dw lit_,version_release_variable,two_fetch_
 5926               	  ; XXX TODO use `du.` when available (it's in the library disk)
 5927               	  dw less_hash_,hash_s_,hash_greater_,type_
 5928               	  dw semicolon_s_
 5929               	
 5930               	.endif
 5931               	
GAS LISTING solo_forth.z80s 			page 109


 5932               	; ----------------------------------------------
 5933 160f 610C      	  _colon_header greeting_,"GREETING"
 5934               	
 5935               	; doc{
 5936               	;
 5937               	; greeting  ( -- )
 5938               	;
 5939               	; }doc
 5940               	
 5941               	.if show_version
 5942               	  dw paren_dot_quote_
 5943               	;  _string "Solo Forth\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5944               	  _string "Solo Forth\rVersion "
 5945               	  ; XXX TMP show the version and the free dictionary memory:
 5946               	  dw dot_version_,cr_
 5947               	;  _string "\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5948               	.else
 5949 1611 4910      	  dw paren_dot_quote_
 5950 1613 0453 6F6C 	  _string "Solo Forth\r\x7F 2015 Marcos Cruz\r(programandala.net)\r"
 5950      6F20 466F 
 5950      7274 685C 
 5950      725C 7837 
 5950      4620 3230 
 5951               	  ; XXX TMP show the free memory, during development only
 5952 164c BD1B 091B 	  dw unused_,u_dot_
 5953 1650 4910      	  dw paren_dot_quote_
 5954 1652 3862 7974 	  _string "bytes free"
 5954      6573 2066 
 5954      7265 65
 5955               	.endif
 5956 165d BC0A      	  dw semicolon_s_
 5957               	
 5958               	; ----------------------------------------------
 5959 165f 610C      	  _colon_header abort_,"ABORT"
 5960               	
 5961               	
 5962 1661 070D 160C 	  dw sp0_,fetch_,sp_store_
 5962      A20A 
 5963               	boot:
 5964 1667 920C      	  dw noop_ ; patched by `turnkey` ; XXX OLD
 5965 1669 EA15      	  dw quit_
 5966               	
 5967               	; ----------------------------------------------
 5968 166b 9C0C      	  _constant_header boot_,"BOOT"
 5969               	
 5970 166d 6716      	  dw boot
 5971               	
 5972               	; ----------------------------------------------
 5973 166f 610C      	  _colon_header warm_,"WARM"
 5974               	
 5975               	  ; dw sp0_,fetch_,sp_store_
 5976               	  ; dw noop_ ; patched by `turnkey` ; XXX OLD
 5977               	  ; dw quit_
 5978 1671 911B 5F16 	  dw page_,abort_
 5979 1675 BC0A      	  dw semicolon_s_
 5980               	
 5981               	warm_start:
GAS LISTING solo_forth.z80s 			page 110


 5982               	
 5983 1677 ED73 9E1B 	  ld (system_stack_pointer),sp ; save the system stack pointer
 5984               	;  XXX TODO this works too
 5985               	;  ld hl,abort_
 5986               	;  ld ix,next ; restore IX
 5987               	;  jp next2
 5988               	
 5989 167b CD90 16   	  call common_start
 5990 167e 6F16      	  dw warm_ ; XXX FIXME -- this works
 5991               	;  dw abort_ ; XXX FIXME -- this crashes the system, why?
 5992               	
 5993               	; ----------------------------------------------
 5994 1680 610C      	  _colon_header cold_,"COLD"
 5995               	
 5996               	  ; Init the names pointer.
 5997               	  ; XXX TMP commented out for debugging
 5998               	  ;dw lit_,names_pointer_init_value,fetch_
 5999               	  ;dw lit_,names_pointer,store_
 6000               	
 6001               	  ; Init the disk buffers.
 6002               	  ; XXX TMP commented out for debugging
 6003               	  ;dw empty_buffers_
 6004               	
 6005               	  ; Init the circular string buffer.
 6006               	  ;dw empty_csb_
 6007               	
 6008               	  ; Init the user variables.
 6009               	  ; XXX TMP commented out for debugging
 6010               	  ; dw lit_,default_user_variables_start ; from
 6011               	  ; dw lit_,user_variables_pointer,fetch_ ; to
 6012               	  ; _literal default_user_variables_end-default_user_variables_start ; length
 6013               	  ; dw cmove_
 6014               	
 6015               	  ; Restore the vocabularies to the default state.
 6016               	  ; XXX TMP commented out for debugging
 6017               	  ; dw lit_,latest_nfa_in_root_voc.init_value,fetch_
 6018               	  ; dw lit_,root_pfa,store_
 6019               	  ; dw lit_,latest_nfa_in_forth_voc.init_value,fetch_
 6020               	  ; dw lit_,forth_pfa,store_
 6021               	  ; dw lit_,latest_nfa_in_assembler_voc.init_value,fetch_
 6022               	  ; dw lit_,assembler_pfa,store_
 6023               	  ; dw lit_,voc_link.init_value,fetch_
 6024               	  ; dw lit_,voc_link_pfa,store_
 6025               	
 6026               	  ; XXX TMP commented out for debugging
 6027               	  ;dw only_
 6028               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
 6029               	  ;dw forth_
 6030               	  ; XXX FIXME never reached, crash before this point
 6031               	  ;dw lit_,7,border_,key_,drop_ ; XXX INFORMER
 6032               	  ;dw definitions_  ; search order
 6033               	  ; dw decimal_                   ; base
 6034               	
 6035               	  ; XXX TMP commented out for debugging
 6036               	  ;dw colors0_,page_,greeting_
 6037               	
 6038               	  ;dw lit_,2,border_,key_,drop_ ; XXX INFORMER
GAS LISTING solo_forth.z80s 			page 111


 6039 1682 5F16      	  dw abort_
 6040               	
 6041               	cold_start:
 6042 1684 ED73 9E1B 	  ld (system_stack_pointer),sp ; save the system stack pointer
 6043               	only_first_cold: ; XXX TMP -- temporary label
 6044 1688 CD86 1D   	  call move_name_fields_to_memory_bank ; (only the first time)
 6045               	.if latin1_charset_in_bank
 6046               	  ld hl,charset_address-0x0100
 6047               	  ld (sys_chars),hl
 6048               	.endif
 6049 168b CD90 16   	  call common_start
 6050 168e 8016      	  dw cold_
 6051               	  ;dw abort_ ; XXX TMP for debugging
 6052               	
 6053               	common_start:
 6054               	
 6055               	  ; Common operations done by warm_start and cold_start.
 6056               	
 6057 1690 C1        	  pop bc ; get the return address, that holds the cfa of `cold` or `warm`
 6058 1691 AF        	  xor a
 6059 1692 FD77 31   	  ld (iy+sys_df_sz_offset),a ; no lines at the bottom part of the screen
 6060 1695 DD21 5F05 	  ld ix,next ; restore IX
 6061 1699 DDE9      	  _jp_next ; jump to the cfa pointed by the BC register
 6062               	
 6063               	; ----------------------------------------------
 6064 169b 9D16      	  _code_header s_to_d_,"S>D"
 6065               	
 6066               	; doc{
 6067               	;
 6068               	; s->d  ( n -- d )
 6069               	;
 6070               	; Sign extend a single number _n_ to form a double number _d_.
 6071               	;
 6072               	; }doc
 6073               	
 6074               	; dup 0<
 6075               	
 6076 169d 2100 00   	  ld hl,0
 6077 16a0 D1        	  pop de
 6078 16a1 7A        	  ld a,d
 6079 16a2 B7        	  or a
 6080 16a3 F25D 05   	  jp p,push_hlde ; jump if positive
 6081 16a6 2B        	  dec hl
 6082 16a7 C35D 05   	  jp push_hlde
 6083               	
 6084               	; ----------------------------------------------
 6085 16aa 610C      	  _colon_header plus_minus_,"+-"
 6086               	
 6087               	; doc{
 6088               	;
 6089               	; +-  ( n1 n2 -- n3 )  \ fig-Forth
 6090               	;
 6091               	; Apply the sign of n2 to n1, which is left as n3.
 6092               	;
 6093               	; }doc
 6094               	
 6095 16ac 690B      	  dw zero_less_than_
GAS LISTING solo_forth.z80s 			page 112


 6096 16ae 6007 B416 	  dw zero_branch_,plus_minus.end
 6097 16b2 970B      	  dw negate_
 6098               	plus_minus.end:
 6099 16b4 BC0A      	  dw semicolon_s_
 6100               	
 6101               	; ----------------------------------------------
 6102 16b6 610C      	  _colon_header d_plus_minus_,"D+-"
 6103               	
 6104               	; doc{
 6105               	;
 6106               	; d+-  ( d1 n -- d2 )  \ fig-Forth
 6107               	;
 6108               	; Apply the sign of _n_ to the double number _d1_, leaving it as
 6109               	; _d2_.
 6110               	;
 6111               	; }doc
 6112               	
 6113 16b8 690B      	  dw zero_less_than_
 6114 16ba 6007 C016 	  dw zero_branch_,d_plus_minus.end
 6115 16be A30B      	  dw dnegate_
 6116               	d_plus_minus.end:
 6117 16c0 BC0A      	  dw semicolon_s_
 6118               	
 6119               	; ----------------------------------------------
 6120 16c2 610C      	  _colon_header abs_,"ABS"
 6121               	
 6122               	; doc{
 6123               	;
 6124               	; abs  ( n -- u )
 6125               	;
 6126               	; Leave the absolute value _u_ of a number _n_.
 6127               	;
 6128               	; }doc
 6129               	
 6130 16c4 DC0B AA16 	  dw dup_,plus_minus_
 6131 16c8 BC0A      	  dw semicolon_s_
 6132               	
 6133               	; ----------------------------------------------
 6134 16ca 610C      	  _colon_header dabs_,"DABS"
 6135               	
 6136               	; doc{
 6137               	;
 6138               	; dabs  ( d -- ud )
 6139               	;
 6140               	; Leave the absolute value _ud_ of a double number _d_.
 6141               	;
 6142               	; }doc
 6143               	
 6144 16cc DC0B B616 	  dw dup_,d_plus_minus_
 6145 16d0 BC0A      	  dw semicolon_s_
 6146               	
 6147               	; ----------------------------------------------
 6148 16d2 D416      	  _code_header umax_,"UMAX"
 6149               	
 6150               	; doc{
 6151               	;
 6152               	; umax  ( u1 u2 -- u1 | u2 )
GAS LISTING solo_forth.z80s 			page 113


 6153               	;
 6154               	; }doc
 6155               	
 6156               	  ; [Code from DZX-Forth.]
 6157               	
 6158 16d4 D1        	  pop de
 6159 16d5 E1        	  pop hl
 6160 16d6 CD0C 05   	  call compare_de_hl_unsigned
 6161 16d9 C3F7 16   	  jp max.1
 6162               	
 6163               	; ----------------------------------------------
 6164 16dc DE16      	  _code_header umin_,"UMIN"
 6165               	
 6166               	; doc{
 6167               	;
 6168               	; umin  ( u1 u2 -- u1 | u2 )
 6169               	;
 6170               	; }doc
 6171               	
 6172               	  ; [Code from DZX-Forth.]
 6173               	
 6174 16de D1        	  pop de
 6175 16df E1        	  pop hl
 6176 16e0 CD0C 05   	  call compare_de_hl_unsigned
 6177 16e3 C3F8 16   	  jp max.2
 6178               	
 6179               	; ----------------------------------------------
 6180 16e6 E816      	  _code_header min_,"MIN"
 6181               	
 6182               	  ; [Code from DZX-Forth.]
 6183               	
 6184 16e8 D1        	  pop de
 6185 16e9 E1        	  pop hl
 6186 16ea CD12 05   	  call compare_de_hl_signed
 6187 16ed C3F8 16   	  jp max.2
 6188               	
 6189               	; ----------------------------------------------
 6190 16f0 F216      	  _code_header max_,"MAX"
 6191               	
 6192               	  ; [Code from DZX-Forth.]
 6193               	
 6194 16f2 D1        	  pop de
 6195               	max.de:
 6196 16f3 E1        	  pop hl
 6197 16f4 CD12 05   	  call compare_de_hl_signed
 6198               	max.1:
 6199 16f7 3F        	  ccf
 6200               	max.2:
 6201 16f8 DA5E 05   	  jp c,push_hl
 6202 16fb EB        	  ex de,hl
 6203 16fc C35E 05   	  jp push_hl
 6204               	
 6205               	; ----------------------------------------------
 6206 16ff 610C      	  _colon_header m_star_,"M*"
 6207               	
 6208               	; doc{
 6209               	;
GAS LISTING solo_forth.z80s 			page 114


 6210               	; m*  ( n1 n2 -- d )  \ fig-Forth
 6211               	;
 6212               	; A mixed magnitude math operation which leaves the double
 6213               	; number signed product of two signed number.
 6214               	;
 6215               	; }doc
 6216               	
 6217 1701 E30B      	  dw two_dup_
 6218 1703 660A EC0A 	  dw xor_,to_r_
 6219 1707 C216      	  dw abs_
 6220 1709 D50B C216 	  dw swap_,abs_,u_m_star_
 6220      020A 
 6221 170f FB0A B616 	  dw from_r_,d_plus_minus_
 6222 1713 BC0A      	  dw semicolon_s_
 6223               	
 6224               	; ----------------------------------------------
 6225 1715 610C      	  _colon_header m_slash_,"M/"
 6226               	
 6227               	; doc{
 6228               	;
 6229               	; m/  ( d n1 -- n2 n3 )  \ fig-Forth
 6230               	;
 6231               	; A mixed magnitude math operator which leaves the signed
 6232               	; remainder _n2_ and signed quotient _n3_ from a double number
 6233               	; dividend and divisor _n1_.  The  remainder takes its sign from
 6234               	; the dividend.
 6235               	;
 6236               	; }doc
 6237               	
 6238 1717 C80B      	  dw over_
 6239 1719 EC0A      	  dw to_r_
 6240 171b EC0A      	  dw to_r_
 6241 171d CA16      	  dw dabs_
 6242 171f 4B0B      	  dw r_fetch_
 6243 1721 C216      	  dw abs_
 6244 1723 0C0A      	  dw u_slash_mod_
 6245 1725 FB0A      	  dw from_r_
 6246 1727 4B0B      	  dw r_fetch_
 6247 1729 660A      	  dw xor_
 6248 172b AA16      	  dw plus_minus_
 6249 172d D50B      	  dw swap_
 6250 172f FB0A      	  dw from_r_
 6251 1731 AA16      	  dw plus_minus_
 6252 1733 D50B      	  dw swap_
 6253 1735 BC0A      	  dw semicolon_s_
 6254               	
 6255               	; ----------------------------------------------
 6256 1737 610C      	  _colon_header star_,"*"
 6257               	
 6258 1739 FF16 D00B 	  dw m_star_,drop_
 6259 173d BC0A      	  dw semicolon_s_
 6260               	
 6261               	; ----------------------------------------------
 6262 173f 610C      	  _colon_header slash_mod_,"/MOD"
 6263               	
 6264               	; doc{
 6265               	;
GAS LISTING solo_forth.z80s 			page 115


 6266               	; /mod  ( n1 n2 -- rem quot )  \ fig-Forth
 6267               	;
 6268               	; Leave the remainder and signed quotient of _n1_/_n2_. The
 6269               	; remainder has the sign of the dividend.
 6270               	;
 6271               	; }doc
 6272               	
 6273 1741 EC0A 9B16 	  dw to_r_,s_to_d_
 6274 1745 FB0A 1517 	  dw from_r_,m_slash_
 6275 1749 BC0A      	  dw semicolon_s_
 6276               	
 6277               	; ----------------------------------------------
 6278 174b 610C      	  _colon_header slash_,"/"
 6279               	
 6280 174d 3F17 B90B 	  dw slash_mod_,nip_
 6281 1751 BC0A      	  dw semicolon_s_
 6282               	
 6283               	; ----------------------------------------------
 6284 1753 610C      	  _colon_header mod_,"MOD"
 6285               	
 6286 1755 3F17 D00B 	  dw slash_mod_,drop_
 6287 1759 BC0A      	  dw semicolon_s_
 6288               	
 6289               	; ----------------------------------------------
 6290 175b 610C      	  _colon_header star_slash_mod_,"*/MOD"
 6291               	
 6292 175d EC0A FF16 	  dw to_r_,m_star_
 6293 1761 FB0A 1517 	  dw from_r_,m_slash_
 6294 1765 BC0A      	  dw semicolon_s_
 6295               	
 6296               	; ----------------------------------------------
 6297 1767 610C      	  _colon_header star_slash_,"*/"
 6298               	
 6299 1769 5B17 B90B 	  dw star_slash_mod_,nip_
 6300 176d BC0A      	  dw semicolon_s_
 6301               	
 6302               	; ----------------------------------------------
 6303 176f 610C      	  _colon_header m_slash_mod_,"M/MOD"
 6304               	
 6305 1771 EC0A C10C 	  dw to_r_,zero_,r_fetch_
 6305      4B0B 
 6306 1777 0C0A      	  dw u_slash_mod_
 6307 1779 FB0A D50B 	  dw from_r_,swap_
 6308 177d EC0A 0C0A 	  dw to_r_,u_slash_mod_,from_r_
 6308      FB0A 
 6309 1783 BC0A      	  dw semicolon_s_
 6310               	
 6311               	; ----------------------------------------------
 6312 1785 610C      	  _colon_header paren_line_,"(LINE)"
 6313               	
 6314 1787 EC0A      	  dw to_r_
 6315 1789 E10C ED0C 	  dw c_slash_l_,b_slash_buf_,star_slash_mod_
 6315      5B17 
 6316 178f FB0A F10C 	  dw from_r_,b_slash_scr_,star_,plus_
 6316      3717 7D0B 
 6317 1797 5218 7D0B 	  dw block_,plus_,c_slash_l_
 6317      E10C 
GAS LISTING solo_forth.z80s 			page 116


 6318 179d BC0A      	  dw semicolon_s_
 6319               	
 6320               	; ----------------------------------------------
 6321 179f 610C      	  _colon_header dot_line_,".LINE"
 6322               	
 6323 17a1 8517 3210 	  dw paren_line_,minus_trailing_,type_
 6323      1610 
 6324 17a7 BC0A      	  dw semicolon_s_
 6325               	
 6326               	; ----------------------------------------------
 6327 17a9 610C      	  _colon_header message_,"MESSAGE"
 6328               	
 6329               	; doc{
 6330               	;
 6331               	; message  ( n -- )
 6332               	;
 6333               	; }doc
 6334               	
 6335 17ab 100D 160C 	  dw warning_,fetch_
 6336 17af 6007 BD17 	  dw zero_branch_,message.number_only
 6337 17b3 6113 BD0C 	  dw error_to_line_,msg_scr_,dot_line_,space_
 6337      9F17 220E 
 6338 17bb BC0A      	  dw semicolon_s_
 6339               	
 6340               	message.number_only:
 6341 17bd 4910      	  dw paren_dot_quote_
 6342 17bf 0A27 4D53 	  _string 'MSG # '
 6342      4720 2320 
 6342      27
 6343               	  ; XXX TODO force decimal base
 6344 17c8 F91A      	  dw dot_
 6345 17ca BC0A      	  dw semicolon_s_
 6346               	
 6347               	
 6348               	; ----------------------------------------------
 6349 17cc 610C      	  _colon_header update_,"UPDATE"
 6350               	
 6351               	; doc{
 6352               	;
 6353               	; update  ( -- )  \ ANS-Forth
 6354               	;
 6355               	; Mark the most recently referenced block (pointed to by `prev`) as
 6356               	; altered. The block will subsequently be transferred automatically to
 6357               	; disk should its buffer be required for storage of a different block.
 6358               	;
 6359               	; }doc
 6360               	
 6361               	  ; XXX TODO move to the disk?
 6362               	
 6363 17ce E90C 160C 	  dw disk_buffer_,fetch_
 6364 17d2 8D06 0080 	  dw lit_,0x8000,or_
 6364      590A 
 6365 17d8 E90C 450C 	  dw disk_buffer_,store_
 6366 17dc BC0A      	  dw semicolon_s_
 6367               	
 6368               	; ----------------------------------------------
 6369 17de 610C      	  _colon_header updated_question_,"UPDATED?"
GAS LISTING solo_forth.z80s 			page 117


 6370               	
 6371               	; doc{
 6372               	;
 6373               	; updated?  ( -- f )
 6374               	;
 6375               	; Is the current disk buffer marked as modified?
 6376               	;
 6377               	; }doc
 6378               	
 6379 17e0 0818 690B 	  dw buffer_id_,zero_less_than_
 6380 17e4 BC0A      	  dw semicolon_s_
 6381               	
 6382               	; ----------------------------------------------
 6383 17e6 610C      	  _colon_header stream_end_,"STREAM-END"
 6384               	
 6385               	; doc{
 6386               	;
 6387               	; stream-end  ( ca -- )
 6388               	;
 6389               	; Store the null word (a null character) at the given address,
 6390               	; surrounded by spaces. This marks the end of a input stream.
 6391               	;
 6392               	; }doc
 6393               	
 6394 17e8 5F06      	  dw s_lit_
 6395 17ea 0320 0020 	  db 3,space_char,0,space_char ; string
 6396 17ee 1A0E FA09 	  dw rot_,smove_
 6397 17f2 BC0A      	  dw semicolon_s_
 6398               	
 6399               	; ----------------------------------------------
 6400 17f4 610C      	  _colon_header empty_buffers_,"EMPTY-BUFFERS"
 6401               	
 6402               	; doc{
 6403               	;
 6404               	; empty-buffers  ( -- )
 6405               	; 
 6406               	; Unassign all block buffers. Do not transfer the contents of
 6407               	; any updated block to mass storage.
 6408               	;
 6409               	; }doc
 6410               	
 6411 17f6 8D06 FF7F 	  dw lit_,buffer_block_id_mask,disk_buffer_,store_
 6411      E90C 450C 
 6412 17fe BC0A      	  dw semicolon_s_
 6413               	
 6414               	; ----------------------------------------------
 6415 1800 610C      	  _colon_header buffer_data_,"BUFFER-DATA"
 6416               	
 6417               	; doc{
 6418               	;
 6419               	; buffer-data  ( -- a )
 6420               	; 
 6421               	; First data address of the disk buffer.
 6422               	;
 6423               	; }doc
 6424               	
 6425 1802 E90C 640D 	  dw disk_buffer_,cell_plus_
GAS LISTING solo_forth.z80s 			page 118


 6426 1806 BC0A      	  dw semicolon_s_
 6427               	
 6428               	; ----------------------------------------------
 6429 1808 610C      	  _colon_header buffer_id_,"BUFFER-ID"
 6430               	
 6431               	; doc{
 6432               	;
 6433               	; buffer-id  ( -- x )
 6434               	; 
 6435               	; Id of the disk buffer.
 6436               	;
 6437               	; }doc
 6438               	
 6439 180a E90C 160C 	  dw disk_buffer_,fetch_
 6440 180e BC0A      	  dw semicolon_s_
 6441               	
 6442               	; ----------------------------------------------
 6443 1810 610C      	  _colon_header block_number_,"BLOCK-NUMBER"
 6444               	
 6445               	; doc{
 6446               	;
 6447               	; block-number  ( x -- n )
 6448               	; 
 6449               	; Convert the disk buffer id _x_ to its associated block _n_,
 6450               	; by removing the update bit.
 6451               	;
 6452               	; }doc
 6453               	
 6454 1812 8D06 FF7F 	  _literal buffer_block_id_mask
 6455 1816 4C0A      	  dw and_
 6456 1818 BC0A      	  dw semicolon_s_
 6457               	
 6458               	; ----------------------------------------------
 6459 181a 610C      	  _colon_header buffer_block_,"BUFFER-BLOCK"
 6460               	
 6461               	; doc{
 6462               	;
 6463               	; buffer-block  ( -- n )
 6464               	;
 6465               	; Block number associated with the disk buffer.
 6466               	;
 6467               	; }doc
 6468               	
 6469 181c 0818 1018 	  dw buffer_id_,block_number_
 6470 1820 BC0A      	  dw semicolon_s_
 6471               	
 6472               	; ----------------------------------------------
 6473 1822 610C      	  _colon_header paren_buffer_,"(BUFFER)"
 6474               	
 6475               	; doc{
 6476               	;
 6477               	; (buffer)  ( n -- )
 6478               	;
 6479               	; If the contents of the disk buffer has been marked as updated,
 6480               	; write its block to the disk. Assign the block number _n_ to
 6481               	; the disk buffer.
 6482               	
GAS LISTING solo_forth.z80s 			page 119


 6483               	; ----
 6484               	; : (buffer)  ( n -- )
 6485               	;   updated?  if    block-number write-buffer
 6486               	;             else  drop
 6487               	;             then  disk-buffer !  ;
 6488               	; ----
 6489               	 
 6490               	; }doc
 6491               	
 6492 1824 DE17      	  dw updated_question_
 6493 1826 6007 3218 	  dw zero_branch_,free_buffer.not_updated
 6494 182a 1018 C318 	  dw block_number_,write_buffer_
 6495 182e 5707 3418 	  dw branch_,free_buffer.end
 6496               	free_buffer.not_updated:
 6497 1832 D00B      	  dw drop_
 6498               	free_buffer.end:
 6499 1834 E90C 450C 	  dw disk_buffer_,store_
 6500 1838 BC0A      	  dw semicolon_s_
 6501               	
 6502               	; ----------------------------------------------
 6503 183a 610C      	  _colon_header buffer_,"BUFFER"
 6504               	
 6505               	; doc{
 6506               	;
 6507               	; buffer  ( n -- a )
 6508               	;
 6509               	; Assign the block buffer to block _n_.   If the contents of the
 6510               	; buffer were marked as updated, it is written to the disk.  The
 6511               	; block _n_ is not read from the disk.  The address _a_ left on
 6512               	; stack is the first cell in the buffer for data storage.
 6513               	
 6514               	; ----
 6515               	; : buffer  ( n -- a )
 6516               	;   dup buffer-block =  if    drop
 6517               	;                       else  (buffer)
 6518               	;                       then  buffer-data  ;
 6519               	; ----
 6520               	
 6521               	; }doc
 6522               	
 6523 183c DC0B 1A18 	  dw dup_,buffer_block_,equals_
 6523      E50D 
 6524 1842 6007 4C18 	  dw zero_branch_,buffer.not_equals
 6525               	  ; The requested block is the one already in the buffer.
 6526 1846 D00B      	  dw drop_
 6527 1848 5707 4E18 	  dw branch_,buffer.end
 6528               	buffer.not_equals:
 6529 184c 2218      	  dw paren_buffer_
 6530               	buffer.end:  
 6531 184e 0018      	  dw buffer_data_ ; first cell of data in the buffer
 6532 1850 BC0A      	  dw semicolon_s_
 6533               	
 6534               	; ----------------------------------------------
 6535 1852 610C      	  _colon_header block_,"BLOCK"
 6536               	
 6537               	; doc{
 6538               	;
GAS LISTING solo_forth.z80s 			page 120


 6539               	; block  ( n -- a )
 6540               	
 6541               	; If the block _n_ is already in memory, leave the address _a_
 6542               	; of the first cell in the disk buffer for data storage.
 6543               	; 
 6544               	; If the block _n_ is not already in memory, transfer it from
 6545               	; disk to the buffer.  If the block occupying that buffer has
 6546               	; been marked as updated, rewrite it to disk before block _n_ is
 6547               	; read into the buffer.  Finally leave the address _a_ of the
 6548               	; first cell in the disk buffer for data storage.
 6549               	
 6550               	; ----
 6551               	; : block ( n --- a )
 6552               	;   dup buffer-block =
 6553               	;   if    drop
 6554               	;   else  save-buffers  dup read-buffer  disk-buffer !
 6555               	;   then  buffer-data  ;
 6556               	; ----
 6557               	
 6558               	; }doc
 6559               	
 6560 1854 DC0B 1A18 	  dw dup_,buffer_block_,equals_
 6560      E50D 
 6561 185a 6007 6418 	  dw zero_branch_,block.not_equals
 6562 185e D00B      	  dw drop_
 6563 1860 5707 6E18 	  dw branch_,block.end
 6564               	block.not_equals:
 6565 1864 EC18 DC0B 	  dw save_buffers_,dup_,read_buffer_
 6565      B018 
 6566 186a E90C 450C 	  dw disk_buffer_,store_
 6567               	block.end:
 6568 186e 0018      	  dw buffer_data_
 6569 1870 BC0A      	  dw semicolon_s_
 6570               	
 6571               	; ----------------------------------------------
 6572 1872 7418      	  _code_header flip_,"FLIP"
 6573               	
 6574               	; doc{
 6575               	;
 6576               	; flip  ( n1 -- n2 )
 6577               	;
 6578               	;   Exchange the low and high bytes within n1.
 6579               	;
 6580               	; }doc
 6581               	
 6582               	; [Name taken from eForth. It's called `><` or `cswap` in other
 6583               	; Forth systems.]
 6584               	
 6585 1874 E1        	  pop hl
 6586 1875 7C        	  ld a,h
 6587 1876 65        	  ld h,l
 6588 1877 6F        	  ld l,a
 6589 1878 C35E 05   	  jp push_hl
 6590               	
 6591               	; ----------------------------------------------
 6592 187b 610C      	  _colon_header block_to_sector_,"BLOCK>SECTOR"
 6593               	
GAS LISTING solo_forth.z80s 			page 121


 6594               	; doc{
 6595               	
 6596               	; block>sector  ( n1 -- n2 )
 6597               	
 6598               	; Convert the disk block _n1_ to the disk sector _n2_, in the
 6599               	; format required by G+DOS: The high byte of _n2_ is the track
 6600               	; (0..79 for side 0; 128..207 for side 1); the low byte of _n2_
 6601               	; is the sector (1..10).
 6602               	
 6603               	; ----
 6604               	; : block>sector  ( n1 -- n2 )
 6605               	;   \ n2 (high byte) = track 0..79 for side 0, 128..207 for side 1
 6606               	;   \    (low byte)  = sector 1..10
 6607               	;   \ track0 = 0..79
 6608               	;   \ track = 0..207
 6609               	;   \ side = 0..1
 6610               	;   dup 10 mod 1+    ( n1 sector )
 6611               	;   swap dup 20 /    ( sector n1 track0 )
 6612               	;   swap 10 / 1 and  ( sector track0 side )
 6613               	;   128              ( sector track 128 )
 6614               	;   \ * +          ( sector track ) \ XXX OLD for true=1
 6615               	;   negate and or    ( sector track )  \ XXX NEW a bit faster, for true=-1
 6616               	;   flip or  ;
 6617               	; ----
 6618               	;
 6619               	; }doc
 6620               	
 6621 187d DC0B      	  dw dup_
 6622 187f 8306 0A   	  _literal 10
 6623 1882 5317 530D 	  dw mod_,one_plus_,swap_,dup_
 6623      D50B DC0B 
 6624 188a 8306 14   	  _literal 20
 6625 188d 4B17 D50B 	  dw slash_,swap_
 6626 1891 8306 0A   	  _literal 10
 6627 1894 4B17 C50C 	  dw slash_,one_,and_
 6627      4C0A 
 6628               	
 6629               	.if true=1 ; XXX OLD
 6630               	  ; XXX TODO optimize with `7 lshift`?
 6631 189a 8306 80   	  _literal 128
 6632 189d 3717 7D0B 	  dw star_,plus_
 6633               	.else
 6634               	  dw negate_
 6635               	  _literal 128
 6636               	  dw and_,or_
 6637               	.endif
 6638               	  
 6639 18a1 7218 590A 	  dw flip_,or_
 6640 18a5 BC0A      	  dw semicolon_s_
 6641               	
 6642               	; ----------------------------------------------
 6643 18a7 610C      	  _colon_header read_block_,"READ-BLOCK"
 6644               	
 6645               	; doc{
 6646               	;
 6647               	; read-block  ( a n -- )
 6648               	;
GAS LISTING solo_forth.z80s 			page 122


 6649               	; Read disk block _n_ to buffer _a_.
 6650               	;
 6651               	; }doc
 6652               	
 6653 18a9 8306 44   	  _literal 0x44 ; G+DOS command to read a disk sector
 6654 18ac CD18      	  dw transfer_block_
 6655 18ae BC0A      	  dw semicolon_s_
 6656               	
 6657               	; ----------------------------------------------
 6658 18b0 610C      	  _colon_header read_buffer_,"READ-BUFFER"
 6659               	
 6660               	; doc{
 6661               	;
 6662               	; read-buffer  ( n -- )
 6663               	;
 6664               	; Read disk block _n_ to the disk buffer.
 6665               	;
 6666               	; }doc
 6667               	
 6668 18b2 0018 D50B 	  dw buffer_data_,swap_,read_block_
 6668      A718 
 6669 18b8 BC0A      	  dw semicolon_s_
 6670               	
 6671               	; ----------------------------------------------
 6672 18ba 610C      	  _colon_header write_block_,"WRITE-BLOCK"
 6673               	
 6674               	; doc{
 6675               	;
 6676               	; write-block  ( a n -- )
 6677               	;
 6678               	; Write buffer _a_ to disk block _n_.
 6679               	;
 6680               	; }doc
 6681               	
 6682 18bc 8306 45   	  _literal 0x45 ; G+DOS command to write a disk sector
 6683 18bf CD18      	  dw transfer_block_
 6684 18c1 BC0A      	  dw semicolon_s_
 6685               	
 6686               	; ----------------------------------------------
 6687 18c3 610C      	  _colon_header write_buffer_,"WRITE-BUFFER"
 6688               	
 6689               	; doc{
 6690               	;
 6691               	; write-buffer  ( n -- )
 6692               	;
 6693               	; Write the disk buffer to disk block _n_.
 6694               	;
 6695               	; }doc
 6696               	
 6697 18c5 0018 D50B 	  dw buffer_data_,swap_,write_block_
 6697      BA18 
 6698 18cb BC0A      	  dw semicolon_s_
 6699               	
 6700               	; ----------------------------------------------
 6701 18cd 610C      	  _colon_header transfer_block_,"TRANSFER-BLOCK"
 6702               	
 6703               	; doc{
GAS LISTING solo_forth.z80s 			page 123


 6704               	;
 6705               	; transfer-block  ( a n b -- )
 6706               	;
 6707               	; The disk read-write linkage.
 6708               	;
 6709               	; a = source or destination block buffer
 6710               	; n = sequential number of the referenced disk block
 6711               	; b = G+DOS command to read or write a sector
 6712               	;
 6713               	; }doc
 6714               	
 6715 18cf 8D06 E418 	  dw lit_,read_write_sector_command,c_store_
 6715      4E0C 
 6716 18d5 7B18      	  dw block_to_sector_
 6717 18d7 DB18      	  dw paren_transfer_block_
 6718 18d9 BC0A      	  dw semicolon_s_
 6719               	
 6720               	paren_transfer_block_:
 6721               	  ; Headerless word with the low level code of `R/W`.
 6722 18db DD18      	  dw paren_transfer_block_pfa ; code field
 6723               	  
 6724               	  ; ( a sector -- )
 6725               	  ; sector (high byte) = track 0..79, +128 if side 1
 6726               	  ;        (low byte)   = sector 1..10
 6727               	paren_transfer_block_pfa:
 6728 18dd D1        	  pop de ; d = track 0..79, +128 if side 1
 6729               	         ; e = sector 1..10
 6730 18de DDE1      	  pop ix ; address
 6731 18e0 C5        	  push bc ; save the Forth IP
 6732 18e1 3E02      	  ld a,2 ; drive ; XXX TMP
 6733 18e3 CF        	  rst 8 ; G+DOS hook
 6734               	read_write_sector_command:
 6735               	  ; G+DOS command already patched:
 6736 18e4 44        	  db 0x44 ; 0x44 = read ; 0x45 = write
 6737 18e5 C1        	  pop bc ; restore the Forth IP
 6738 18e6 DD21 5F05 	  ld ix,next
 6739 18ea DDE9      	  _jp_next
 6740               	
 6741               	; ----------------------------------------------
 6742 18ec 610C      	  _colon_header save_buffers_,"SAVE-BUFFERS"
 6743               	
 6744               	; doc{
 6745               	;
 6746               	; save-buffers  ( -- )  \ ANS Forth
 6747               	;
 6748               	; If the disk buffer has been modified, transfer its contents to
 6749               	; disk and mark it as unmodified.
 6750               	;
 6751               	; ----
 6752               	; : save-buffers ( -- )
 6753               	;   updated? 0= ?exit \ exit if not updated
 6754               	;   buffer-block dup write-buffer  disk-buffer !  ;
 6755               	; ----
 6756               	;
 6757               	; }doc
 6758               	
 6759 18ee DE17 530B 	  dw updated_question_,zero_equals_ ; not updated?
GAS LISTING solo_forth.z80s 			page 124


 6760 18f2 2E1D      	  dw question_exit_ ; exit if not updated
 6761               	  ; Updated
 6762 18f4 1A18 DC0B 	  dw buffer_block_,dup_,write_buffer_
 6762      C318 
 6763 18fa E90C 450C 	  dw disk_buffer_,store_
 6764 18fe BC0A      	  dw semicolon_s_
 6765               	
 6766               	; ----------------------------------------------
 6767 1900 610C      	  _colon_header flush_,"FLUSH"
 6768               	
 6769               	  ; XXX TODO -- move to the disk?
 6770               	
 6771 1902 EC18 F417 	  dw save_buffers_,empty_buffers_
 6772 1906 BC0A      	  dw semicolon_s_
 6773               	
 6774               	; ----------------------------------------------
 6775 1908 610C      	  _colon_header paren_load_,"(LOAD)"
 6776               	
 6777               	; doc{
 6778               	;
 6779               	; (load)  ( i*x u -- j*x )
 6780               	;
 6781               	; Store _u_ in `blk` (thus making block _u_ the input source and
 6782               	; setting the input buffer to encompass its contents), set `>in`
 6783               	; to zero, and interpret.  Other stack effects are due to the
 6784               	; words loaded.
 6785               	;
 6786               	; An error is issued if _u_ is zero.
 6787               	;
 6788               	; ----
 6789               	; : (load)  ( i*x u -- j*x )
 6790               	;   dup 0= 9 ?error
 6791               	;   b/scr * blk !  >in off  interpret  ;
 6792               	; ----
 6793               	;
 6794               	; }doc
 6795               	
 6796 190a DC0B 530B 	  dw dup_,zero_equals_
 6797 190e 8306 0909 	  _question_error error.loading_from_screen_0
 6797      0F
 6798 1913 F10C 3717 	  dw b_slash_scr_,star_,blk_,store_
 6798      1A0D 450C 
 6799 191b 1D0D F90B 	  dw to_in_,off_,interpret_
 6799      1A15 
 6800 1921 BC0A      	  dw semicolon_s_
 6801               	
 6802               	; ----------------------------------------------
 6803 1923 610C      	  _colon_header continued_,"CONTINUED"
 6804               	
 6805               	; doc{
 6806               	;
 6807               	; continued  ( i*x u -- j*x )  \ Forth-79 (uncontrolled word
 6808               	; definition from the Reference Word Set)
 6809               	;
 6810               	; Store _u_ in `blk` (thus making block _u_ the input source and
 6811               	; setting the input buffer to encompass its contents), set `>in`
 6812               	; to zero, and interpret.  Other stack effects are due to the
GAS LISTING solo_forth.z80s 			page 125


 6813               	; words loaded.
 6814               	;
 6815               	; ----
 6816               	; : continued  ( -- )
 6817               	;   ?loading (load)  ;
 6818               	; ----
 6819               	;
 6820               	; }doc
 6821               	
 6822 1925 550F 0819 	  dw question_loading_,paren_load_
 6823 1929 BC0A      	  dw semicolon_s_
 6824               	
 6825               	; ----------------------------------------------
 6826 192b 610C      	  _colon_header load_,"LOAD"
 6827               	
 6828               	; doc{
 6829               	;
 6830               	; load  ( u -- )
 6831               	;
 6832               	; Save the current input-source specification. Store _u_ in
 6833               	; `blk` (thus making block _u_ the input source and setting the
 6834               	; input buffer to encompass its contents), set `>in` to zero,
 6835               	; and interpret. When the parse area is exhausted, restore the
 6836               	; prior input source specification. Other stack effects are due
 6837               	; to the words loaded.
 6838               	;
 6839               	; An error is issued if _u_ is zero.
 6840               	;
 6841               	; ----
 6842               	; : load  ( n -- )
 6843               	;   blk @ >r  >in @ >r
 6844               	;   (load)
 6845               	;   r> >in !  r> blk !  ;
 6846               	; ----
 6847               	;
 6848               	; }doc
 6849               	
 6850 192d 1A0D 160C 	  dw blk_,fetch_,to_r_
 6850      EC0A 
 6851 1933 1D0D 160C 	  dw to_in_,fetch_,to_r_
 6851      EC0A 
 6852 1939 0819      	  dw paren_load_
 6853 193b FB0A 1D0D 	  dw from_r_,to_in_,store_
 6853      450C 
 6854 1941 FB0A 1A0D 	  dw from_r_,blk_,store_
 6854      450C 
 6855 1947 BC0A      	  dw semicolon_s_
 6856               	
 6857               	; ----------------------------------------------
 6858 1949 610C      	  _colon_header next_screen_,"-->",immediate
 6859               	
 6860               	; doc{
 6861               	;
 6862               	; -->  ( -- )  \ "next-screen"
 6863               	;
 6864               	; Continue interpretation with the next disk screen.
 6865               	;
GAS LISTING solo_forth.z80s 			page 126


 6866               	; ----
 6867               	; : -->  ( -- )
 6868               	;   ?loading  >in off
 6869               	;   b/scr blk @ over mod - blk +!  ; immediate
 6870               	; ----
 6871               	;
 6872               	; }doc
 6873               	
 6874 194b 550F      	  dw question_loading_
 6875 194d 1D0D F90B 	  dw to_in_,off_
 6876 1951 F10C 1A0D 	  dw b_slash_scr_,blk_,fetch_,over_,mod_,minus_
 6876      160C C80B 
 6876      5317 CE0D 
 6877 195d 1A0D EC0B 	  dw blk_,plus_store_
 6878 1961 BC0A      	  dw semicolon_s_
 6879               	
 6880               	; ----------------------------------------------
 6881 1963 610C      	  _colon_header defined_,"DEFINED"
 6882               	
 6883               	; doc{
 6884               	;
 6885               	; defined  ( "name" -- ca 0 | cfa 1 | cfa -1 )
 6886               	;
 6887               	; }doc
 6888               	
 6889               	  ; XXX TODO -- adapt to the new parsing method
 6890               	
 6891               	.if 1 ; XXX OLD
 6892               	
 6893 1965 DD0C D111 	  dw b_l_,word_ ; ( ca2 )
 6894               	
 6895               	.else ; XXX NEW
 6896               	
 6897               	  ; XXX FIXME -- crash somewhere in `query`
 6898               	
 6899               	  dw parse_name_  ; ( ca1 len1 )
 6900               	  ;dw cr_,dot_s_,lit_,1,border_,key_,drop_ ; XXX INFORMER
 6901               	  dw save_counted_string_ ; ( ca2 )
 6902               	  ;dw cr_,dot_s_,lit_,2,border_,key_,drop_ ; XXX INFORMER
 6903               	
 6904               	.endif
 6905               	
 6906 1969 DC0B 0310 	  dw dup_,count_,uppers_  ; uppercase ( ca2 )
 6906      B012 
 6907               	  ;dw cr_,dot_s_,lit_,3,border_,key_,drop_ ; XXX INFORMER
 6908 196f E712      	  dw find_
 6909               	  ;dw cr_,dot_s_,lit_,4,border_,key_,drop_ ; XXX INFORMER
 6910               	
 6911 1971 BC0A      	  dw semicolon_s_
 6912               	
 6913               	; ----------------------------------------------
 6914 1973 610C      	  _colon_header question_defined_,"?DEFINED"
 6915               	
 6916               	; doc{
 6917               	;
 6918               	; ?defined  ( f -- )
 6919               	;
GAS LISTING solo_forth.z80s 			page 127


 6920               	; }doc
 6921               	
 6922               	  ; [Code from DZX-Forth.]
 6923               	
 6924 1975 530B      	  dw zero_equals_
 6925 1977 8306 0509 	  _question_error error.not_found
 6925      0F
 6926 197c BC0A      	  dw semicolon_s_
 6927               	
 6928               	; ----------------------------------------------
 6929 197e 610C      	  _colon_header bracket_defined_,"[DEFINED]",immediate
 6930               	
 6931               	; doc{
 6932               	;
 6933               	; [defined]  ( "name" -- wf )
 6934               	;
 6935               	; }doc
 6936               	
 6937 1980 6319 B90B 	  dw defined_,nip_
 6938 1984 BC0A      	  dw semicolon_s_
 6939               	
 6940               	; ----------------------------------------------
 6941 1986 610C      	  _colon_header bracket_undefined_,"[UNDEFINED]",immediate
 6942               	
 6943               	; doc{
 6944               	;
 6945               	; [undefined]  ( "name" -- wf )
 6946               	;
 6947               	; }doc
 6948               	
 6949 1988 7E19 530B 	  dw bracket_defined_,zero_equals_
 6950 198c BC0A      	  dw semicolon_s_
 6951               	
 6952               	; ----------------------------------------------
 6953 198e 610C      	  _colon_header tick_,"'"
 6954               	
 6955               	; doc{
 6956               	;
 6957               	; '  ( "name" -- cfa )
 6958               	;
 6959               	; }doc
 6960               	
 6961 1990 6319 7319 	  dw defined_,question_defined_
 6962 1994 BC0A      	  dw semicolon_s_
 6963               	
 6964               	; ----------------------------------------------
 6965 1996 610C      	  _colon_header bracket_tick_,"[']",immediate
 6966               	
 6967               	; doc{
 6968               	;
 6969               	; [']  ( "name" -- cfa )
 6970               	;
 6971               	; }doc
 6972               	
 6973 1998 8E19 C914 	  dw tick_,literal_
 6974 199c BC0A      	  dw semicolon_s_
 6975               	
GAS LISTING solo_forth.z80s 			page 128


 6976               	; ----------------------------------------------
 6977 199e 610C      	  _colon_header begin_,"BEGIN",immediate
 6978               	
 6979               	; doc{
 6980               	;
 6981               	; begin  ( compilation: -- a n )
 6982               	;
 6983               	; At compile time `begin` leaves the dictionary address on
 6984               	; stack with an error checking number _n_.  It does not compile
 6985               	; anything to the dictionary.
 6986               	;
 6987               	; }doc
 6988               	
 6989 19a0 210F      	  dw question_comp_ ; error if not compiling
 6990 19a2 4707      	  dw backward_mark_ ; address to compute the backward branch
 6991               	.if 1 ; fig_compiler_security
 6992 19a4 C50C      	  dw one_ ; error checking number
 6993               	.endif
 6994 19a6 BC0A      	  dw semicolon_s_
 6995               	
 6996               	; ----------------------------------------------
 6997 19a8 610C      	  _colon_header then_,"THEN",immediate
 6998               	
 6999 19aa 210F      	  dw question_comp_ ; error if not compiling
 7000               	.if 1 ; fig_compiler_security
 7001 19ac C90C 390F 	  dw two_,question_pairs_ ; check for nesting error
 7002               	.endif
 7003 19b0 3B07      	  dw forward_resolve_
 7004 19b2 BC0A      	  dw semicolon_s_
 7005               	
 7006               	; ----------------------------------------------
 7007               	  ; _colon_header question_do_,"?DO",immediate
 7008               	
 7009               	  ; XXX TODO
 7010               	
 7011               	  ; dw compile_,paren_question_do_
 7012               	  ; dw branch_,do.common
 7013               	
 7014               	; ----------------------------------------------
 7015 19b4 610C      	  _colon_header do_,"DO",immediate
 7016               	
 7017 19b6 640F AD07 	  dw compile_,paren_do_
 7018               	do.common:
 7019 19ba 4707      	  dw backward_mark_
 7020               	.if 1 ; fig_compiler_security
 7021 19bc 8306 03   	  _literal 3 ; error checking number
 7022               	.endif
 7023 19bf BC0A      	  dw semicolon_s_
 7024               	
 7025               	; ----------------------------------------------
 7026 19c1 610C      	  _colon_header loop_,"LOOP",immediate
 7027               	
 7028               	.if 1 ; fig_compiler_security
 7029 19c3 8306 03   	  _literal 3 ; error checking number
 7030 19c6 390F      	  dw question_pairs_
 7031               	.endif
 7032 19c8 640F 7807 	  dw compile_,paren_loop_
GAS LISTING solo_forth.z80s 			page 129


 7033 19cc 4F07      	  dw backward_resolve_
 7034 19ce BC0A      	  dw semicolon_s_
 7035               	
 7036               	; ----------------------------------------------
 7037 19d0 610C      	  _colon_header plus_loop_,"+LOOP",immediate
 7038               	
 7039               	.if 1 ; fig_compiler_security
 7040 19d2 8306 03   	  _literal 3 ; error checking number
 7041 19d5 390F      	  dw question_pairs_
 7042               	.endif
 7043 19d7 640F A707 	  dw compile_,paren_plus_loop_
 7044 19db 4F07      	  dw backward_resolve_
 7045 19dd BC0A      	  dw semicolon_s_
 7046               	
 7047               	; ----------------------------------------------
 7048 19df 610C      	  _colon_header until_,"UNTIL",immediate
 7049               	
 7050               	.if 1 ; fig_compiler_security
 7051 19e1 C50C 390F 	  dw one_,question_pairs_
 7052               	.endif
 7053 19e5 640F 6007 	  dw compile_,zero_branch_
 7054 19e9 4F07      	  dw backward_resolve_
 7055 19eb BC0A      	  dw semicolon_s_
 7056               	
 7057               	; ----------------------------------------------
 7058 19ed 610C      	  _colon_header again_,"AGAIN",immediate
 7059               	
 7060               	; doc{
 7061               	;
 7062               	; again  ( compilation: a n -- )
 7063               	;
 7064               	; End of an infinite loop.  Compile an unconditional jump
 7065               	; instruction to branch backward to _a_.
 7066               	;
 7067               	; }doc
 7068               	
 7069               	.if 1 ; fig_compiler_security
 7070 19ef C50C 390F 	  dw one_,question_pairs_ ; check n for error
 7071               	.endif
 7072 19f3 640F 5707 	  dw compile_,branch_
 7073 19f7 4F07      	  dw backward_resolve_
 7074 19f9 BC0A      	  dw semicolon_s_
 7075               	
 7076               	; ----------------------------------------------
 7077 19fb 610C      	  _colon_header repeat_,"REPEAT",immediate
 7078               	
 7079               	; doc{
 7080               	;
 7081               	; repeat  ( compilation: a1 n1 a2 n2 -- )
 7082               	;
 7083               	; a1 = address of `begin` to branch to
 7084               	; n1 = `begin` check number
 7085               	; a2 = address of the branch of `while` to resolve
 7086               	; n2 = `while` check number
 7087               	;
 7088               	; Compile `branch` to jump back to `begin`.  Resolve also  the
 7089               	; branching offset required by `while`.
GAS LISTING solo_forth.z80s 			page 130


 7090               	;
 7091               	; }doc
 7092               	
 7093 19fd 240B      	  dw two_to_r_
 7094 19ff ED19      	  dw again_ ; unconditional branch back to `begin`
 7095 1a01 330B      	  dw two_from_r_
 7096               	  ; dw two_minus_ ; restore 2 to be checked by `then` ; XXX OLD -- unnecessary
 7097               	  ; XXX TODO why unncessary?
 7098 1a03 A819      	  dw then_ ; resolve the forward branching needed by `while`
 7099 1a05 BC0A      	  dw semicolon_s_
 7100               	
 7101               	; ----------------------------------------------
 7102 1a07 610C      	  _colon_header if_,"IF",immediate
 7103               	
 7104 1a09 640F 6007 	  dw compile_,zero_branch_
 7105               	if.do:
 7106 1a0d 2F07      	  dw forward_mark_
 7107               	.if 1 ; fig_compiler_security
 7108 1a0f C90C      	  dw two_ ; error checking number
 7109               	.endif
 7110 1a11 BC0A      	  dw semicolon_s_
 7111               	
 7112               	; ----------------------------------------------
 7113 1a13 610C      	  _colon_header unless_,"UNLESS",immediate
 7114               	
 7115               	  ; Equivalent to `0= if`, but faster.
 7116               	
 7117 1a15 640F 6C07 	  dw compile_,question_branch_
 7118 1a19 5707 0D1A 	  dw branch_,if.do
 7119               	
 7120               	  ; XXX TODO move to the disk:
 7121               	
 7122               	; : unless  ( f -- )  postpone ?branch >mark 2  ; immediate
 7123               	; \ Alternative: when compiler security is removed:
 7124               	; : unless  ( f -- )  postpone ?branch >mark  ; immediate
 7125               	
 7126               	; ----------------------------------------------
 7127 1a1d 610C      	  _colon_header ahead_,"AHEAD",immediate
 7128               	
 7129 1a1f 640F 5707 	  dw compile_,branch_
 7130 1a23 2F07      	  dw forward_mark_
 7131               	
 7132               	; ----------------------------------------------
 7133 1a25 610C      	  _colon_header else_,"ELSE",immediate
 7134               	
 7135               	  ; XXX FIXME Pasmo bug?
 7136               	  ; The system crashes when conditional compilation
 7137               	  ; is used here, in any combination. Very strange.
 7138               	
 7139               	.if 1 ; fig_compiler_security
 7140               	
 7141 1a27 C90C      	  dw two_ ; error checking number
 7142 1a29 390F      	  dw question_pairs_
 7143 1a2b 640F 5707 	  dw compile_,branch_
 7144 1a2f 2F07      	  dw forward_mark_
 7145 1a31 D50B      	  dw swap_
 7146 1a33 C90C      	  dw two_ ; error checking number
GAS LISTING solo_forth.z80s 			page 131


 7147 1a35 A819      	  dw then_
 7148 1a37 C90C      	  dw two_ ; error checking number
 7149 1a39 BC0A      	  dw semicolon_s_
 7150               	
 7151               	.else
 7152               	
 7153               	  dw compile_,branch_
 7154               	  dw forward_mark_
 7155               	  dw then_
 7156               	  dw semicolon_s_
 7157               	
 7158               	.endif
 7159               	
 7160               	; ----------------------------------------------
 7161 1a3b 610C      	  _colon_header while_,"WHILE",immediate
 7162               	
 7163 1a3d 071A      	  dw if_
 7164               	  ; dw two_plus_ ; leave 4 to be checked by `repeat` ; XXX OLD -- unnecessary
 7165               	  ; XXX TODO 2015-08-13: why unnecessary? why fig-Forth does not use `swap`?
 7166 1a3f BC0A      	  dw semicolon_s_
 7167               	
 7168               	; ----------------------------------------------
 7169 1a41 610C      	  _colon_header spaces_,"SPACES"
 7170               	
 7171 1a43 DD0C 491A 	  dw b_l_,emits_
 7172 1a47 BC0A      	  dw semicolon_s_
 7173               	
 7174               	; ----------------------------------------------
 7175 1a49 610C      	  _colon_header emits_,"EMITS"
 7176               	
 7177               	  ; emits  ( u c -- )
 7178               	
 7179               	  ; XXX TODO use `?do` or `for` when available
 7180 1a4b D50B C10C 	  dw swap_,zero_,max_,question_dup_
 7180      F016 2A0E 
 7181 1a53 6007 631A 	  dw zero_branch_,emits_.end
 7182 1a57 C10C      	  dw zero_
 7183 1a59 AD07      	  dw paren_do_
 7184               	emits_.do:
 7185 1a5b DC0B EC08 	  dw dup_,emit_
 7186 1a5f 7807 5B1A 	  dw paren_loop_,emits_.do
 7187               	emits_.end:
 7188 1a63 D00B      	  dw drop_
 7189 1a65 BC0A      	  dw semicolon_s_
 7190               	
 7191               	; ----------------------------------------------
 7192 1a67 610C      	  _colon_header less_hash_,"<#"
 7193               	
 7194 1a69 7211      	  dw pad_
 7195 1a6b 3E0D      	  dw hld_
 7196 1a6d 450C      	  dw store_
 7197 1a6f BC0A      	  dw semicolon_s_
 7198               	
 7199               	; ----------------------------------------------
 7200 1a71 610C      	  _colon_header hash_greater_,"#>"
 7201               	
 7202 1a73 D00B      	  dw drop_
GAS LISTING solo_forth.z80s 			page 132


 7203 1a75 D00B      	  dw drop_
 7204 1a77 3E0D 160C 	  dw hld_,fetch_
 7205 1a7b 7211      	  dw pad_
 7206 1a7d C80B      	  dw over_
 7207 1a7f CE0D      	  dw minus_
 7208 1a81 BC0A      	  dw semicolon_s_
 7209               	
 7210               	; ----------------------------------------------
 7211 1a83 610C      	  _colon_header sign_,"SIGN"
 7212               	
 7213               	; doc{
 7214               	
 7215               	; sign  ( n  d  ---  d ) \ fig-Forth
 7216               	
 7217               	; Stores an ascii "-" sign just before a converted numeric
 7218               	; output string in the text output buffer when _n_ is negative.
 7219               	; _n_ is discarded but double number _d_ is maintained. Must be
 7220               	; used between `<#` and `#>`.
 7221               	
 7222               	; }doc
 7223               	
 7224               	  ; XXX TODO convert to ANS Forth
 7225               	
 7226 1a85 1A0E 690B 	  dw rot_,zero_less_than_
 7227 1a89 6007 921A 	  dw zero_branch_,sign.end
 7228 1a8d 8306 2D   	  _literal '-'
 7229 1a90 6011      	  dw hold_
 7230               	sign.end:
 7231 1a92 BC0A      	  dw semicolon_s_
 7232               	
 7233               	; ----------------------------------------------
 7234 1a94 610C      	  _colon_header hash_,"#"
 7235               	
 7236               	; doc{
 7237               	;
 7238               	; #  ( d1 -- d2 )
 7239               	;
 7240               	; Divide _d1_ by current base.  The remainder is converted to
 7241               	; an ASCII character and appended to the output text string.
 7242               	; The quotient _d2_ is left on stack.
 7243               	;
 7244               	; }doc
 7245               	
 7246               	
 7247 1a96 2F0D 160C 	  dw base_,fetch_
 7248 1a9a 6F17      	  dw m_slash_mod_ ;  ( remainder dquotient )
 7249 1a9c 1A0E      	  dw rot_ ; ( dquotient remainder )
 7250 1a9e 8306 09   	  _literal 0x09
 7251 1aa1 C80B F20D 	  dw over_,less_than_ ; remainder<9?
 7252 1aa5 6007 AE1A 	  dw zero_branch_,hash.digit
 7253               	  ; remainder<9
 7254 1aa9 8306 07   	  _literal 0x07
 7255 1aac 7D0B      	  dw plus_ ; make it an alphabet
 7256               	hash.digit:
 7257               	  ; Form the ASCII representation of a digit:
 7258               	  ; "0" to "9" and "A" to "F" (or above).
 7259 1aae 8306 30   	  _literal '0'
GAS LISTING solo_forth.z80s 			page 133


 7260 1ab1 7D0B      	  dw plus_
 7261 1ab3 6011      	  dw hold_ ; put the digit into `pad` in a reversed order.
 7262 1ab5 BC0A      	  dw semicolon_s_
 7263               	
 7264               	; ----------------------------------------------
 7265 1ab7 610C      	  _colon_header hash_s_,"#S"
 7266               	
 7267               	; doc{
 7268               	;
 7269               	; #S  ( d1 -- d2 )
 7270               	;
 7271               	; }doc
 7272               	
 7273               	hash_s.begin:
 7274 1ab9 941A E30B 	  dw hash_,two_dup_,or_
 7274      590A 
 7275 1abf 6C07 B91A 	  dw question_branch_,hash_s.begin
 7276 1ac3 BC0A      	  dw semicolon_s_
 7277               	
 7278               	; ----------------------------------------------
 7279 1ac5 610C      	  _colon_header d_dot_r_,"D.R"
 7280               	
 7281               	; doc{
 7282               	;
 7283               	; d.r  ( d n -- )
 7284               	;
 7285               	; Print a signed double number _d_ right justified in a field of
 7286               	; _n_ characters.
 7287               	;
 7288               	; }doc
 7289               	
 7290 1ac7 EC0A      	  dw to_r_ ; save n
 7291               	  ; Save the high order part of d under d,
 7292               	  ; to be used by `sign` to add a "-" sign to a negative number:
 7293 1ac9 D50B C80B 	  dw swap_,over_
 7294 1acd CA16      	  dw dabs_ ; convert d to its absolute value
 7295               	  ; Convert the absolute value to ASCII text with proper sign:
 7296 1acf 671A      	  dw less_hash_
 7297 1ad1 B71A      	  dw hash_s_
 7298 1ad3 831A      	  dw sign_
 7299 1ad5 711A      	  dw hash_greater_
 7300 1ad7 FB0A      	  dw from_r_ ; retrieve n
 7301 1ad9 C80B CE0D 	  dw over_,minus_,spaces_ ; fill the output field with preceding blanks
 7301      411A 
 7302 1adf 1610      	  dw type_ ; type out the number
 7303 1ae1 BC0A      	  dw semicolon_s_
 7304               	
 7305               	; ----------------------------------------------
 7306 1ae3 610C      	  _colon_header dot_r_,".R"
 7307               	
 7308 1ae5 EC0A 9B16 	  dw to_r_,s_to_d_,from_r_,d_dot_r_
 7308      FB0A C51A 
 7309 1aed BC0A      	  dw semicolon_s_
 7310               	
 7311               	; ----------------------------------------------
 7312 1aef 610C      	  _colon_header d_dot_,"D."
 7313               	
GAS LISTING solo_forth.z80s 			page 134


 7314               	; doc{
 7315               	;
 7316               	; d.  ( d -- )
 7317               	;
 7318               	; Print signed double integer _d_ according to current base,
 7319               	; followed by only one blank.
 7320               	;
 7321               	; }doc
 7322               	
 7323 1af1 C10C C51A 	  dw zero_,d_dot_r_,space_
 7323      220E 
 7324 1af7 BC0A      	  dw semicolon_s_
 7325               	
 7326               	; ----------------------------------------------
 7327 1af9 610C      	  _colon_header dot_,"."
 7328               	
 7329               	; doc{
 7330               	;
 7331               	; .  ( n -- )
 7332               	;
 7333               	; Print signed integer _n_ according to current base, followed
 7334               	; by only one blank.
 7335               	;
 7336               	; }doc
 7337               	
 7338 1afb 9B16 EF1A 	  dw s_to_d_,d_dot_
 7339 1aff BC0A      	  dw semicolon_s_
 7340               	
 7341               	; ----------------------------------------------
 7342 1b01 610C      	  _colon_header question_,"?"
 7343               	
 7344 1b03 160C F91A 	  dw fetch_,dot_
 7345 1b07 BC0A      	  dw semicolon_s_
 7346               	
 7347               	; ----------------------------------------------
 7348 1b09 610C      	  _colon_header u_dot_,"U."
 7349               	
 7350 1b0b C10C EF1A 	  dw zero_,d_dot_
 7351 1b0f BC0A      	  dw semicolon_s_
 7352               	
 7353               	; ----------------------------------------------
 7354               	
 7355               	.if 1
 7356               	
 7357 1b11 610C      	  _colon_header dot_s_,".S"
 7358               	
 7359               	  ; XXX TMP -- only during the development, then remove
 7360               	  ; It is already on the disk.
 7361               	
 7362 1b13 E914 DC0B 	  dw depth_,dup_,s_to_d_,less_hash_
 7362      9B16 671A 
 7363 1b1b 8306 3E   	  _literal '>'
 7364 1b1e 6011 B71A 	  dw hold_,hash_s_
 7365 1b22 8306 3C   	  _literal '<'
 7366 1b25 6011 711A 	  dw hold_,hash_greater_,type_,space_
 7366      1610 220E 
 7367 1b2d 6007 4B1B 	  dw zero_branch_,dot_s.end
GAS LISTING solo_forth.z80s 			page 135


 7368               	
 7369 1b31 990A 6D0D 	  dw sp_fetch_,two_minus_,sp0_,fetch_,two_minus_
 7369      070D 160C 
 7369      6D0D 
 7370 1b3b AD07      	  dw paren_do_
 7371               	dot_s.do:
 7372 1b3d 4408 160C 	  dw i_,fetch_,u_dot_ ; XXX TMP `u.`
 7372      091B 
 7373 1b43 8D06 FEFF 	  dw lit_,-2
 7374 1b47 A707 3D1B 	  dw paren_plus_loop_,dot_s.do
 7375               	dot_s.end:
 7376 1b4b BC0A      	  dw semicolon_s_
 7377               	
 7378               	.endif
 7379               	
 7380               	; ----------------------------------------------
 7381 1b4d 4F1B      	  _code_header colors0_,"COLORS0"
 7382               	
 7383               	; doc{
 7384               	;
 7385               	; colors0  ( -- )
 7386               	; 
 7387               	; Set the screen colors to the default values.
 7388               	;
 7389               	; }doc
 7390               	
 7391               	  ; Set the colors and their masks.
 7392               	
 7393 1b4f 2A12 00   	  ld hl,(default_color_attribute)
 7394               	  ; l = 128*flash + 64*bright + 8*paper + ink
 7395               	  ; h = mask
 7396 1b52 228D 5C   	  ld (sys_attr_p),hl ; permanent
 7397 1b55 228F 5C   	  ld (sys_attr_t),hl ; temporary
 7398               	
 7399               	  ; Set the system variable that holds the attributes of the
 7400               	  ; lower part of the screen.  It is needed only because G+DOS
 7401               	  ; by default changes the border color during disk operations,
 7402               	  ; and at the end restores it with the value of this system
 7403               	  ; variable.
 7404               	
 7405 1b58 7D        	  ld a,l
 7406 1b59 3248 5C   	  ld (sys_bordcr),a ; lower screen colors
 7407               	
 7408               	  ; Set the border color to the paper color.
 7409               	
 7410               	  ; a = 128*flash + 64*bright + 8*paper + ink
 7411 1b5c A7        	  and a ; cy=0
 7412 1b5d 1F        	  rra
 7413 1b5e 1F        	  rra
 7414 1b5f 1F        	  rra ; a = paper
 7415 1b60 D3FE      	  out (border_port),a ; set the border color
 7416               	
 7417 1b62 DDE9      	  _jp_next
 7418               	
 7419               	; ----------------------------------------------
 7420 1b64 661B      	  _code_header home_,"HOME"
 7421               	
GAS LISTING solo_forth.z80s 			page 136


 7422               	; doc{
 7423               	;
 7424               	; home  ( -- )
 7425               	;
 7426               	; Reset the cursor position to the upper left corner (column 0,
 7427               	; row 0).
 7428               	;
 7429               	; }doc
 7430               	
 7431 1b66 2121 18   	  ld hl,0x1821 ; 0x18 = 24 - row
 7432               	               ; 0x21 = 33 - column
 7433 1b69 2288 5C   	  ld (sys_s_posn),hl
 7434 1b6c DDE9      	  _jp_next
 7435               	
 7436               	; ----------------------------------------------
 7437 1b6e 701B      	  _code_header cls_,"CLS"
 7438               	
 7439               	
 7440               	; doc{
 7441               	;
 7442               	; cls  ( -- )
 7443               	;
 7444               	; Clear the screen with the current colors and reset the cursor
 7445               	; position to the upper left corner (column 0, row 0).
 7446               	;
 7447               	; }doc
 7448               	
 7449               	; Note: The ROM routines that clear the screen are slow and do
 7450               	; many unnecessary BASIC-related things. This code simply clears
 7451               	; the screen.
 7452               	
 7453               	  ; XXX TODO compare size with Forth
 7454               	
 7455 1b70 D9        	  exx ; save the Forth IP
 7456               	  ; Erase the bitmap.
 7457 1b71 2100 40   	  ld hl,sys_screen
 7458 1b74 1101 40   	  ld de,sys_screen+1
 7459 1b77 0100 18   	  ld bc,sys_screen_bitmap_size
 7460 1b7a 3600      	  ld (hl),0
 7461 1b7c EDB0      	  ldir
 7462               	  ; Color with the permanent attributes.
 7463 1b7e 2100 58   	  ld hl,sys_screen_attributes
 7464 1b81 1101 58   	  ld de,sys_screen_attributes+1
 7465 1b84 0100 03   	  ld bc,sys_screen_attributes_size
 7466 1b87 3A8D 5C   	  ld a,(sys_attr_p)
 7467 1b8a 77        	  ld (hl),a
 7468 1b8b EDB0      	  ldir
 7469 1b8d D9        	  exx ; restore the Forth IP
 7470 1b8e C366 1B   	  jp home_pfa ; continue at `home`
 7471               	
 7472               	; ----------------------------------------------
 7473 1b91 610C      	  _colon_header page_,"PAGE"
 7474               	
 7475               	; doc{
 7476               	;
 7477               	; page  ( -- )  \ ANS Forth
 7478               	;
GAS LISTING solo_forth.z80s 			page 137


 7479               	; Move to another page for output.  On a terminal, `page` clears
 7480               	; the screen and resets the cursor position to the upper left
 7481               	; corner. On a printer, `page` performs a form feed.
 7482               	;
 7483               	; }doc
 7484               	
 7485               	  ; XXX TODO printer support
 7486               	
 7487 1b93 6E1B      	  dw cls_
 7488 1b95 BC0A      	  dw semicolon_s_
 7489               	
 7490               	; ----------------------------------------------
 7491 1b97 991B      	  _code_header bye_,"BYE"
 7492               	
 7493 1b99 FD36 3102 	  ld (iy+sys_df_sz_offset),0x02 ; restore lines of the lower screen
 7494               	system_stack_pointer: equ $+1
 7495 1b9d 3100 00   	  ld sp,0 ; restore the system stack
 7496               	.if latin1_charset_in_bank
 7497               	  ; Restore the default charset:
 7498               	  ld hl,15360
 7499               	  ld (sys_chars),hl
 7500               	.endif
 7501               	  ; Exit to BASIC:
 7502 1ba0 CF        	  rst 0x08
 7503 1ba1 08        	  db 0x08 ; "STOP" BASIC error
 7504               	
 7505               	; ----------------------------------------------
 7506 1ba2 A41B      	  _code_header two_drop_,"2DROP"
 7507               	
 7508 1ba4 E1        	  pop hl
 7509 1ba5 E1        	  pop hl
 7510 1ba6 DDE9      	  _jp_next
 7511               	
 7512               	; ----------------------------------------------
 7513 1ba8 AA1B      	  _code_header two_swap_,"2SWAP"
 7514               	
 7515               	  ; [Code from DZX-Forth.]
 7516               	
 7517 1baa E1        	  pop hl
 7518 1bab D1        	  pop de
 7519 1bac E3        	  ex (sp),hl
 7520 1bad E5        	  push hl
 7521 1bae 2105 00   	  ld hl,5
 7522 1bb1 39        	  add hl,sp
 7523 1bb2 7E        	  ld a,(hl)
 7524 1bb3 72        	  ld (hl),d
 7525 1bb4 57        	  ld d,a
 7526 1bb5 2B        	  dec hl
 7527 1bb6 7E        	  ld a,(hl)
 7528 1bb7 73        	  ld (hl),e
 7529 1bb8 5F        	  ld e,a
 7530 1bb9 E1        	  pop hl
 7531 1bba C35D 05   	  jp push_hlde
 7532               	
 7533               	; ----------------------------------------------
 7534 1bbd 610C      	  _colon_header unused_,"UNUSED"
 7535               	
GAS LISTING solo_forth.z80s 			page 138


 7536               	  ; XXX TMP
 7537 1bbf C10C 8C0D 	  dw zero_,here_,minus_
 7537      CE0D 
 7538 1bc5 BC0A      	  dw semicolon_s_
 7539               	
 7540               	; ----------------------------------------------
 7541 1bc7 610C      	  _colon_header where_,"WHERE"
 7542               	
 7543               	  ; XXX TODO -- remove; already copied to the disk
 7544               	
 7545 1bc9 5B13 280C 	  dw error_pos_,two_fetch_ ; XXX NEW
 7546 1bcd DC0B      	  dw dup_
 7547 1bcf 6C07 D71B 	  dw question_branch_,where.do_it
 7548 1bd3 A21B      	  dw two_drop_
 7549 1bd5 BC0A      	  dw semicolon_s_
 7550               	
 7551               	where.do_it:
 7552 1bd7 DC0B F10C 	  dw dup_,b_slash_scr_,slash_
 7552      4B17 
 7553 1bdd 4910      	  dw paren_dot_quote_
 7554 1bdf 0827 5363 	  _string 'Scr # '
 7554      7220 2320 
 7554      27
 7555 1be8 BA0F F91A 	  dw decimal_,dot_
 7556 1bec D50B E10C 	  dw swap_,c_slash_l_,slash_mod_,c_slash_l_,star_
 7556      3F17 E10C 
 7556      3717 
 7557 1bf6 1A0E 5218 	  dw rot_,block_,plus_
 7557      7D0B 
 7558 1bfc E10C C909 	  dw c_slash_l_,cr_,type_,cr_
 7558      1610 C909 
 7559 1c04 8C0D 1F0C 	  dw here_,c_fetch_,minus_,spaces_
 7559      CE0D 411A 
 7560 1c0c 8306 5E   	  _literal '^'
 7561 1c0f EC08      	  dw emit_
 7562 1c11 BC0A      	  dw semicolon_s_
 7563               	
 7564               	; ----------------------------------------------
 7565 1c13 610C      	  _colon_header at_xy,"AT-XY"
 7566               	
 7567               	; doc{
 7568               	
 7569               	; at-xy ( col line -- )  \ ANS Forth
 7570               	
 7571               	; Warning: The system will crash if the coordinates are out of screen.
 7572               	; For the sake of speed, no check is done.  A wrapper secure word can
 7573               	; be written if needed.
 7574               	
 7575               	; }doc
 7576               	
 7577               	; [Code adapted from Spectrum Forth-83.]
 7578               	
 7579 1c15 DC0B      	  dw dup_
 7580 1c17 8306 17   	  _literal 23
 7581 1c1a D80D      	  dw not_equals_ ; not the last line?
 7582 1c1c 6007 2C1C 	  dw zero_branch_,at_pfa.last_line
 7583               	  ; not the last line
GAS LISTING solo_forth.z80s 			page 139


 7584 1c20 8D06 1600 	  dw lit_,22,paren_emit_,paren_emit_,paren_emit_
 7584      F808 F808 
 7584      F808 
 7585 1c2a BC0A      	  dw semicolon_s_ ; XXX TODO exit_
 7586               	
 7587               	at_pfa.last_line:
 7588 1c2c 660D DC0B 	  dw one_minus_,dup_,paren_emit_,paren_emit_,zero_,paren_emit_
 7588      F808 F808 
 7588      C10C F808 
 7589 1c38 C909      	  dw cr_
 7590 1c3a DC0B      	  dw dup_
 7591 1c3c 8D06 845C 	  dw lit_,sys_df_cc ; address in display file of print position
 7592 1c40 EC0B      	  dw plus_store_
 7593 1c42 8306 21   	  _literal 33
 7594 1c45 D50B      	  dw swap_
 7595 1c47 CE0D      	  dw minus_
 7596 1c49 8D06 885C 	  dw lit_,sys_s_posn ; 33 minus column number for print position
 7597 1c4d 4E0C      	  dw c_store_
 7598 1c4f BC0A      	  dw semicolon_s_
 7599               	
 7600               	; ----------------------------------------------
 7601 1c51 531C      	  _code_header border_,"BORDER"
 7602               	
 7603 1c53 E1        	  pop hl
 7604 1c54 7D        	  ld a,l
 7605 1c55 D3FE      	  out (border_port),a
 7606               	
 7607               	  ; The system variable that holds the attributes of the lower
 7608               	  ; part of the screen, unnecessary in Solo Forth, must be
 7609               	  ; updated.  The reason is G+DOS, after disk operations that
 7610               	  ; make the border change, restores the border color with the
 7611               	  ; value of this system variable.  We use the border color as
 7612               	  ; paper and set a a contrast ink (black or white), to make
 7613               	  ; sure the lower part of the screen is usable after returning
 7614               	  ; to BASIC.
 7615               	
 7616               	  ; XXX TODO move the contrast ink calculation to `bye` or
 7617               	  ; simply remove it:
 7618               	
 7619 1c57 FE04      	  cp 4 ; cy = dark color (0..3)?
 7620 1c59 3E07      	  ld a,7 ; white ink
 7621 1c5b 3801      	  jr c,border.end
 7622 1c5d AF        	  xor a ; black ink
 7623               	
 7624               	border.end:
 7625 1c5e 29        	  add hl,hl
 7626 1c5f 29        	  add hl,hl
 7627 1c60 29        	  add hl,hl ; paper
 7628 1c61 6F        	  ld l,a  ; ink
 7629 1c62 2248 5C   	  ld (sys_bordcr),hl
 7630 1c65 DDE9      	  _jp_next
 7631               	
 7632               	; ----------------------------------------------
 7633 1c67 691C      	  _code_header overwrite_,"OVERWRITE"
 7634               	
 7635 1c69 3E15      	  ld a,over_char
 7636 1c6b C38E 1C   	  jp color
GAS LISTING solo_forth.z80s 			page 140


 7637               	
 7638               	; ----------------------------------------------
 7639 1c6e 701C      	  _code_header flash_,"FLASH"
 7640               	
 7641 1c70 3E12      	  ld a,flash_char
 7642 1c72 C38E 1C   	  jp color
 7643               	
 7644               	; ----------------------------------------------
 7645 1c75 771C      	  _code_header inverse_,"INVERSE"
 7646               	
 7647 1c77 3E14      	  ld a,inverse_char
 7648 1c79 C38E 1C   	  jp color
 7649               	
 7650               	; ----------------------------------------------
 7651 1c7c 7E1C      	  _code_header bright_,"BRIGHT"
 7652               	
 7653 1c7e 3E13      	  ld a,bright_char
 7654 1c80 C38E 1C   	  jp color
 7655               	
 7656               	; ----------------------------------------------
 7657 1c83 851C      	  _code_header paper_,"PAPER"
 7658               	
 7659 1c85 3E11      	  ld a,paper_char
 7660 1c87 C38E 1C   	  jp color
 7661               	
 7662               	; ----------------------------------------------
 7663 1c8a 8C1C      	  _code_header ink_,"INK"
 7664               	
 7665 1c8c 3E10      	  ld a,ink_char
 7666               	
 7667               	color:
 7668               	  ; Set a color attribute (ink, paper, bright, flash, inverse or
 7669               	  ; overwrite).
 7670               	  ; Input:
 7671               	  ;   a = attribute control char
 7672               	  ;   (tos) = color attribute value
 7673 1c8e D7        	  rst 0x10
 7674 1c8f E1        	  pop hl
 7675 1c90 7D        	  ld a,l
 7676 1c91 D7        	  rst 0x10
 7677 1c92 CDAD 1C   	  call rom_set_permanent_colors_0x1CAD
 7678 1c95 DDE9      	  _jp_next
 7679               	
 7680               	; ----------------------------------------------
 7681 1c97 991C      	  _code_header emitted_,"EMITTED"
 7682               	
 7683               	  ; [Code adapted and modified from the ZX Spectrum ROM routine
 7684               	  ; S-SCRN$-S at 0x2535.]
 7685               	
 7686               	; doc{
 7687               	;
 7688               	; emitted  ( col row -- n | 0 )
 7689               	;
 7690               	; Return the ordinal number _n_ (first is 1) of the character
 7691               	; printed at the given screen coordinates, or 0 if no character
 7692               	; can be recognized on that position of the screen.
 7693               	;
GAS LISTING solo_forth.z80s 			page 141


 7694               	; This word must be configured by `emitted-charset` and
 7695               	; `#emitted-chars`, that set the address of the first character
 7696               	; and the number of characters to compare with. By default the
 7697               	; printable ASCII chars of the ROM charset are used.
 7698               	;
 7699               	; The result _n_ is the ordinal number (first is 1) of the
 7700               	; recognized char in the specified charset. Example: with the
 7701               	; default configuration, a recognized space char would return 1;
 7702               	; a "!" char, 2; a "A", 34...
 7703               	;
 7704               	; This word is meant to be used with user defined graphics.
 7705               	;
 7706               	; }doc
 7707               	
 7708               	  ; XXX TODO improve the result
 7709               	  ;
 7710               	  ; XXX TODO move to the disk
 7711               	  ;
 7712               	  ; XXX TODO rename?: `ocr`, `recognized`, `on-xy`, `xy-char`?
 7713               	  ; The reasen is name clash with the fig-Forth `out` counter,
 7714               	  ; that was going to be called `emitted` or `#emitted`.
 7715               	
 7716 1c99 D1        	  pop de ; row
 7717 1c9a E1        	  pop hl ; col
 7718 1c9b C5        	  push bc ; save the Forth IP
 7719 1c9c 45        	  ld b,l ; column
 7720 1c9d 4B        	  ld c,e ; row
 7721 1c9e 2AEA 1C   	  ld hl,(emitted_charset_pfa) ; address of first printable char in the charset
 7722 1ca1 79        	  ld a,c  ; row
 7723 1ca2 0F        	  rrca
 7724 1ca3 0F        	  rrca
 7725 1ca4 0F        	  rrca ; multiply by 0x20
 7726 1ca5 E6E0      	  and  %11100000
 7727 1ca7 A8        	  xor  b ; combine with column (0x00..0x1F)
 7728 1ca8 5F        	  ld  e,a ; low byte of top row = 0x20 * (line mod 8) + column
 7729 1ca9 79        	  ld  a,c  ; row is copied to a again
 7730 1caa E618      	  and  0x18
 7731 1cac EE40      	  xor  0x40
 7732 1cae 57        	  ld  d,a ; high byte of top row = 64 + 8*int (line/8)
 7733               	  ; de = screen address
 7734 1caf 3AEE 1C   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7735 1cb2 47        	  ld b,a
 7736               	
 7737               	emitted.do:
 7738 1cb3 C5        	  push  bc  ; save the characters count
 7739 1cb4 D5        	  push  de  ; save the screen pointer
 7740 1cb5 E5        	  push  hl  ; save the character set pointer (bitmap start)
 7741 1cb6 1A        	  ld  a,(de)  ; get first scan of screen character
 7742 1cb7 AE        	  xor  (hl)  ; match with scan from character set
 7743 1cb8 CAC0 1C   	  jp z,emitted.match  ; jump if direct match found
 7744               	  ; if inverse, a=0xFF
 7745 1cbb 3C        	  inc  a  ; inverse? (if inverse, a=0)
 7746 1cbc C2D8 1C   	  jp  nz,emitted.next_char  ; jump if inverse match not found
 7747               	  ; inverse match
 7748 1cbf 3D        	  dec  a  ; restore 0xFF
 7749               	emitted.match:
 7750 1cc0 4F        	  ld  c,a  ; inverse mask (0x00 or 0xFF)
GAS LISTING solo_forth.z80s 			page 142


 7751 1cc1 0607      	  ld  b,0x07  ; count 7 more character rows
 7752               	emitted.scans:
 7753 1cc3 14        	  inc  d  ; next screen scan (add 0x100)
 7754 1cc4 23        	  inc  hl  ; next bitmap address
 7755 1cc5 1A        	  ld  a,(de)  ; screen scan
 7756 1cc6 AE        	  xor  (hl)  ; will give 0x00 or 0xFF (inverse)
 7757 1cc7 A9        	  xor  c  ; inverse mask to include the inverse status
 7758 1cc8 C2D8 1C   	  jp  nz,emitted.next_char  ; jump if no match
 7759 1ccb 10F6      	  djnz  emitted.scans  ; jump back till all scans done
 7760               	
 7761               	  ; character match
 7762 1ccd C1        	  pop  bc  ; discard character set pointer
 7763 1cce C1        	  pop  bc  ; discard screen pointer
 7764 1ccf C1        	  pop  bc  ; final count
 7765 1cd0 3AEE 1C   	  ld a,(hash_emitted_chars_pfa) ; number of chars in the charset
 7766 1cd3 90        	  sub  b ; ordinal number of the matched character (1 is the first)
 7767 1cd4 6F        	  ld l,a
 7768 1cd5 C3E2 1C   	  jp emitted.end
 7769               	
 7770               	emitted.next_char:
 7771 1cd8 E1        	  pop  hl  ; restore character set pointer
 7772 1cd9 1108 00   	  ld  de,0x0008  ; move it on 8 bytes
 7773 1cdc 19        	  add  hl,de  ; to the next character in the set
 7774 1cdd D1        	  pop  de  ; restore the screen pointer
 7775 1cde C1        	  pop  bc  ; restore the counter
 7776 1cdf 10D2      	  djnz  emitted.do  ; loop back for the 96 characters
 7777               	  ; no match
 7778 1ce1 68        	  ld l,b ; zero
 7779               	
 7780               	emitted.end:
 7781 1ce2 C1        	  pop bc ; restore the Forth IP
 7782 1ce3 2600      	  ld h,0
 7783 1ce5 C35E 05   	  jp push_hl
 7784               	
 7785               	; ----------------------------------------------
 7786 1ce8 1814      	  _variable_header emitted_charset_,"EMITTED-CHARSET"
 7787               	
 7788               	; doc{
 7789               	;
 7790               	; emitted-charset  ( -- a )
 7791               	;
 7792               	; Variable that holds the address of the first printable char in
 7793               	; the charset used by `emitted`. By default it contains 0x3D00, the
 7794               	; address of the space char in the ROM charset.
 7795               	;
 7796               	; }doc
 7797               	
 7798 1cea 003D      	  dw 0x3D00 ; address of the space in the ROM charset
 7799               	
 7800               	; ----------------------------------------------
 7801 1cec 1814      	  _variable_header hash_emitted_chars_,"#EMITTED-CHARS"
 7802               	
 7803               	; doc{
 7804               	;
 7805               	; #emitted-charset  ( -- a )
 7806               	;
 7807               	; Variable that holds the number of printable chars in the
GAS LISTING solo_forth.z80s 			page 143


 7808               	; charset used by `emitted`. By default it contais 0x5F, the
 7809               	; number of printable ASCII chars in the ROM charset.
 7810               	;
 7811               	; }doc
 7812               	
 7813 1cee 5F00      	  dw 0x5F ; printable ASCII chars in the ROM charset
 7814               	
 7815               	; ----------------------------------------------
 7816 1cf0 F21C      	  _code_header j_,"J"
 7817               	
 7818               	; doc{
 7819               	;
 7820               	; j  ( -- x ) ( R: loop-sys1 loop-sys2 -- loop-sys1 loop-sys2 ) \ ANS Forth
 7821               	;
 7822               	; Return a copy of the next-outer loop index.
 7823               	;
 7824               	; }doc
 7825               	
 7826 1cf2 2A10 00   	  ld hl,(return_stack_pointer)
 7827 1cf5 1104 00   	  ld de,cell*2
 7828 1cf8 19        	  add hl,de
 7829 1cf9 C319 0C   	  jp fetch.hl
 7830               	
 7831               	; ----------------------------------------------
 7832 1cfc 610C      	  _colon_header two_constant_,"2CONSTANT"
 7833               	
 7834 1cfe 071D      	  dw two_variable_
 7835 1d00 C50F      	  dw paren_semicolon_code_
 7836               	do_two_constant:
 7837 1d02 13        	  inc de    ; de=pfa
 7838 1d03 EB        	  ex de,hl  ; hl=pfa
 7839 1d04 C32B 0C   	  jp two_fetch.hl
 7840               	
 7841               	; ----------------------------------------------
 7842 1d07 610C      	  _colon_header two_variable_,"2VARIABLE"
 7843               	
 7844               	; doc{
 7845               	;
 7846               	; 2variable ( "name" -- )  \ ANS Forth
 7847               	;
 7848               	; Parse _name_.  Create a definition for _name_ with the
 7849               	; execution semantics defined below. Reserve two consecutive
 7850               	; cells of data space.
 7851               	;
 7852               	;    _name_ is referred to as a two-variable.
 7853               	;
 7854               	;          name Execution: ( -- a )
 7855               	;
 7856               	;    _a_ is the address of the first (lowes address) cell of two
 7857               	;    consecutive cells. A program is responsible for
 7858               	;    initializing the contents.
 7859               	;
 7860               	; }doc
 7861               	
 7862 1d09 1014      	  dw create_
 7863 1d0b 8D06 0400 	  dw lit_,cell*2,allot_
 7863      940D 
GAS LISTING solo_forth.z80s 			page 144


 7864 1d11 BC0A      	  dw semicolon_s_
 7865               	
 7866               	; ----------------------------------------------
 7867 1d13 610C      	  _colon_header u_dot_r_,"U.R"
 7868               	
 7869 1d15 EC0A C10C 	  dw to_r_,zero_,from_r_,d_dot_r_
 7869      FB0A C51A 
 7870 1d1d BC0A      	  dw semicolon_s_
 7871               	
 7872               	; ----------------------------------------------
 7873 1d1f 211D      	  _code_header two_over_,"2OVER"
 7874               	
 7875               	; doc{
 7876               	;
 7877               	; 2over  ( d1 d2 -- d1 d2 d1 )
 7878               	;
 7879               	; }doc
 7880               	
 7881 1d21 2104 00   	  ld hl,4
 7882 1d24 39        	  add hl,sp
 7883 1d25 C32B 0C   	  jp two_fetch.hl
 7884               	
 7885               	.if 1 ; fig_exit?
 7886               	
 7887               	; ----------------------------------------------
 7888 1d28 610C      	  _colon_header exit_,"EXIT"
 7889               	
 7890               	; doc{
 7891               	;
 7892               	; exit  ( -- ) ( R: a -- )  \ ANS Forth
 7893               	;
 7894               	; Return control to the calling definition, specified by the
 7895               	; address on the return stack.
 7896               	;
 7897               	; Before executing `exit` within a do-loop, a program shall
 7898               	; discard the loop-control parameters by executing `unloop`.
 7899               	;
 7900               	; }doc
 7901               	
 7902               	; XXX TODO combine this `exit` with `;s`?
 7903               	
 7904 1d2a 180B      	  dw r_drop_
 7905 1d2c BC0A      	  dw semicolon_s_
 7906               	
 7907               	; ----------------------------------------------
 7908 1d2e 610C      	  _colon_header question_exit_,"?EXIT"
 7909               	
 7910               	; doc{
 7911               	;
 7912               	; ?exit  ( f -- ) ( R: a | -- a | )
 7913               	;
 7914               	; If _f_ is non-zero, return control to the calling definition,
 7915               	; specified by the address on the return stack.
 7916               	;
 7917               	; `?exit` is not intended to be used within a do-loop. Use `if
 7918               	; unloop exit then` instead.
 7919               	;
GAS LISTING solo_forth.z80s 			page 145


 7920               	; }doc
 7921               	
 7922 1d30 6C07 2A1D 	  dw question_branch_,exit_pfa
 7923 1d34 BC0A      	  dw semicolon_s_
 7924               	
 7925               	.else
 7926               	
 7927               	; ----------------------------------------------
 7928               	  _code_header question_exit_,"?EXIT"
 7929               	
 7930               	; doc{
 7931               	;
 7932               	; ?exit  ( f -- ) ( R: a | -- a | )
 7933               	;
 7934               	; If _f_ is non-zero, return control to the calling definition,
 7935               	; specified by the address on the return stack.
 7936               	;
 7937               	; `?exit` is not intended to be used within a do-loop. Use `if
 7938               	; unloop exit then` instead.
 7939               	;
 7940               	; }doc
 7941               	
 7942               	  pop hl
 7943               	  ld h,a
 7944               	  or l
 7945               	  jp nz,exit_pfa
 7946               	  _jp_next
 7947               	
 7948               	.endif
 7949               	
 7950               	; ----------------------------------------------
 7951 1d36 610C      	  _colon_header char_,"CHAR"
 7952               	
 7953 1d38 B111 D00B 	  dw parse_name_,drop_,c_fetch_
 7953      1F0C 
 7954 1d3e BC0A      	  dw semicolon_s_
 7955               	
 7956               	; ----------------------------------------------
 7957 1d40 610C      	  _colon_header bracket_char_,"[CHAR]",immediate
 7958               	
 7959 1d42 361D C914 	  dw char_,literal_
 7960 1d46 BC0A      	  dw semicolon_s_
 7961               	
 7962               	; ----------------------------------------------
 7963               	  ;_colon_header s_quote_,"S\"",immediate ; XXX FIXME as error
 7964 1d48 610C      	  _colon_header s_quote_,"S\x22",immediate
 7965               	
 7966               	  ; : s"  ( compilation: "text<">" -- ) ( run-time:  -- ca len )
 7967               	  ;  [char] " (s)  ; immediate
 7968               	
 7969 1d4a 8306 22   	  _literal '"'
 7970 1d4d 7106      	  dw paren_s_
 7971 1d4f BC0A      	  dw semicolon_s_
 7972               	
 7973               	; ----------------------------------------------
 7974 1d51 610C      	  _colon_header question_next_screen_,"?-->",immediate
 7975               	
GAS LISTING solo_forth.z80s 			page 146


 7976 1d53 6007 591D 	  dw zero_branch_,question_next_screen.end
 7977 1d57 4919      	  dw next_screen_
 7978               	question_next_screen.end:
 7979 1d59 BC0A      	  dw semicolon_s_
 7980               	
 7981               	  ; XXX TODO a good place to use `??` instead of a branch:
 7982               	;  dw question_question_,next_screen_
 7983               	;  dw semicolon_s_
 7984               	
 7985               	; ----------------------------------------------
 7986 1d5b 610C      	  _colon_header question_backslash_,"?\\",immediate
 7987               	
 7988               	; doc{
 7989               	;
 7990               	; ?\  ( f "ccc<eol> -- )
 7991               	;
 7992               	; If _f_ is not false, parse and discard the rest of the parse
 7993               	; area. This word is used for conditional compilation.
 7994               	;
 7995               	; }doc
 7996               	
 7997 1d5d 6007 631D 	  dw zero_branch_,question_backslash.end
 7998 1d61 651D      	  dw backslash_
 7999               	question_backslash.end:
 8000 1d63 BC0A      	  dw semicolon_s_
 8001               	
 8002               	; ----------------------------------------------
 8003 1d65 610C      	  _colon_header backslash_,"\\",immediate
 8004               	
 8005               	; doc{
 8006               	;
 8007               	; \  ( -- )
 8008               	; 
 8009               	; Parse and discard the rest of the parse area.
 8010               	;
 8011               	; }doc
 8012               	
 8013 1d67 1D0D 160C 	  dw to_in_,fetch_,c_slash_l_,mod_
 8013      E10C 5317 
 8014 1d6f E10C D50B 	  dw c_slash_l_,swap_,minus_
 8014      CE0D 
 8015 1d75 1D0D EC0B 	  dw to_in_,plus_store_
 8016 1d79 BC0A      	  dw semicolon_s_
 8017               	
 8018               	; ----------------------------------------------
 8019 1d7b 610C      	  _colon_header dot_paren_,".(",immediate
 8020               	
 8021               	; doc{
 8022               	;
 8023               	; .(  ( 'text<paren>' -- )  \ immediate
 8024               	;
 8025               	; }doc
 8026               	
 8027 1d7d 8306 29   	  _literal ')'
 8028 1d80 A311 1610 	  dw parse_,type_
 8029 1d84 BC0A      	  dw semicolon_s_
 8030               	
GAS LISTING solo_forth.z80s 			page 147


 8031               	latest_nfa_in_forth_voc: equ dot_paren_nfa
 8032               	
 8033               	dictionary_pointer_after_cold:
 8034               	
 8035               	; ==============================================================
 8036               	; Name and link fields
 8037               	
 8038               	move_name_fields_to_memory_bank:
 8039               	
 8040               	  ; Move the name fields, assembled in ordinary memory, to the
 8041               	  ; names bank. This routine is needed only once, therefore its
 8042               	  ; call is patched with `noop` at the end; the routine itself
 8043               	  ; will be overwritten by the Forth dictionary.
 8044               	
 8045               	  ; The whole screen is used as intermediate buffer for copying
 8046               	  ; the data.
 8047               	
 8048 1d86 2100 C0   	  ld hl,names_bank_address ; origin
 8049 1d89 1100 40   	  ld de,sys_screen ; destination
 8050 1d8c 0100 1B   	  ld bc,sys_screen_size ; count
 8051 1d8f EDB0      	  ldir ; copy the data to the screen
 8052 1d91 1E01      	  ld e,names_bank
 8053 1d93 CDA0 06   	  call bank.e
 8054 1d96 2100 40   	  ld hl,sys_screen ; origin
 8055 1d99 1100 C0   	  ld de,names_bank_address ; destination
 8056 1d9c 0100 1B   	  ld bc,sys_screen_size ; count
 8057 1d9f EDB0      	  ldir ; copy the name fields to the bank
 8058               	.if latin1_charset_in_bank
 8059               	  ld hl,sys_screen+sys_screen_size-charset_size ; origin
 8060               	  ld de,charset_address ; destination
 8061               	  ld bc,charset_size ; count
 8062               	  ldir ; copy the charset to the bank
 8063               	.endif
 8064 1da1 1E00      	  ld e,default_bank
 8065 1da3 CDA0 06   	  call bank.e
 8066               	
 8067               	  ; Erase the default bank (not necessary) ; XXX OLD
 8068               	  ; ld hl,names_bank_address ; the first byte is 0
 8069               	  ; ld de,names_bank_address+1
 8070               	  ; ld bc,sys_screen
 8071               	  ; ldir
 8072               	
 8073               	  ; Remove the call to this routine:
 8074 1da6 2188 16   	  ld hl,only_first_cold ; address of the call to this routine
 8075 1da9 3600      	  ld (hl),0 ; nop
 8076 1dab 23        	  inc hl
 8077 1dac 3600      	  ld (hl),0 ; nop
 8078 1dae 23        	  inc hl
 8079 1daf 3600      	  ld (hl),0 ; nop
 8080 1db1 C9        	  ret
 8081               	
 8082               	; ==============================================================
 8083               	; Character set
 8084               	
 8085               	; XXX OLD
 8086               	
 8087               	.if latin1_charset_in_bank
GAS LISTING solo_forth.z80s 			page 148


 8088               	
 8089               	  .org names_bank_address+sys_screen_size-charset_size
 8090               	
 8091               	  incbin solo_forth.charset.bin
 8092               	
 8093               	.endif
 8094               	
 8095               	; ==============================================================
 8096               	; End
 8097               	
 8098               	.end
GAS LISTING solo_forth.z80s 			page 149


DEFINED SYMBOLS
                            *ABS*:00000000 fake
                            *ABS*:00000000 false
                            *ABS*:00000000 _header
                            *ABS*:00000000 _code_header
                            *ABS*:00000000 _code_alias_header
                            *ABS*:00000000 _colon_header
                            *ABS*:00000000 _user_variable_header
                            *ABS*:00000000 _does_header
                            *ABS*:00000000 _constant_header
                            *ABS*:00000000 _variable_header
                            *ABS*:00000000 _two_variable_header
                            *ABS*:00000000 _string
                            *ABS*:00000000 _literal
                            *ABS*:00000000 _jp_next
                            *ABS*:00000000 _jump
                            *ABS*:00000000 _jump_nc
                            *ABS*:00000000 _jump_z
                            *ABS*:00000000 _bank
                            *ABS*:00000000 _names_bank
                            *ABS*:00000000 _default_bank
                            *ABS*:00000000 _question_error
                            *ABS*:00000000 _message
                            *ABS*:00000000 _z80_border
                            *ABS*:00000000 _z80_border_wait
                            *ABS*:00000000 _echo
     solo_forth.z80s:698    .text:00000000 cold_entry
     solo_forth.z80s:6041   .text:00001684 cold_start
     solo_forth.z80s:701    .text:00000003 warm_entry
     solo_forth.z80s:5981   .text:00001677 warm_start
     solo_forth.z80s:710    .text:00000006 latest_nfa_in_root_voc.init_value
     solo_forth.z80s:200    .data:00000018 latest_nfa_in_root_voc
     solo_forth.z80s:713    .text:00000008 latest_nfa_in_forth_voc.init_value
     solo_forth.z80s:7964   .data:0000100f latest_nfa_in_forth_voc
     solo_forth.z80s:716    .text:0000000a latest_nfa_in_assembler_voc.init_value
     solo_forth.z80s:200    .data:000000a4 latest_nfa_in_assembler_voc
     solo_forth.z80s:719    .text:0000000c voc_link.init_value
     solo_forth.z80s:1423   .text:0000065d assembler_vocabulary_link
     solo_forth.z80s:722    .text:0000000e user_variables_pointer
     solo_forth.z80s:808    .text:00000032 user_variables
     solo_forth.z80s:725    .text:00000010 return_stack_pointer
     solo_forth.z80s:906    .text:00000307 return_stack_bottom
     solo_forth.z80s:728    .text:00000012 default_color_attribute
     solo_forth.z80s:748    .text:00000014 default_user_variables_start
     solo_forth.z80s:750    .text:00000014 s0_init_value
     solo_forth.z80s:892    .text:00000214 data_stack_bottom
     solo_forth.z80s:752    .text:00000016 r0_init_value
     solo_forth.z80s:755    .text:0000001a width_init_value
     solo_forth.z80s:757    .text:0000001c warning_init_value
     solo_forth.z80s:760    .text:00000020 dp_init_value
     solo_forth.z80s:8033   .text:00001d86 dictionary_pointer_after_cold
     solo_forth.z80s:770    .text:00000024 blk_init_value
     solo_forth.z80s:772    .text:00000026 in_init_value
     solo_forth.z80s:774    .text:00000028 out_init_value
     solo_forth.z80s:776    .text:0000002a scr_init_value
     solo_forth.z80s:783    .text:0000002c default_user_variables_end
     solo_forth.z80s:785    .text:0000002c ip_backup
GAS LISTING solo_forth.z80s 			page 150


     solo_forth.z80s:793    .text:0000002e names_pointer
     solo_forth.z80s:799    .text:00000030 names_pointer_init_value
     solo_forth.z80s:814    .text:00000032 s0_value
     solo_forth.z80s:816    .text:00000034 r0_value
     solo_forth.z80s:820    .text:00000038 width_value
     solo_forth.z80s:822    .text:0000003a warning_value
     solo_forth.z80s:826    .text:0000003e dp_value
     solo_forth.z80s:832    .text:00000042 blk_value
     solo_forth.z80s:834    .text:00000044 in_value
     solo_forth.z80s:836    .text:00000046 out_value
     solo_forth.z80s:838    .text:00000048 scr_value
     solo_forth.z80s:840    .text:0000004a number_tib_value
     solo_forth.z80s:842    .text:0000004c hld_value
     solo_forth.z80s:844    .text:0000004e current_value
     solo_forth.z80s:846    .text:00000050 state_value
     solo_forth.z80s:848    .text:00000052 base_value
     solo_forth.z80s:850    .text:00000054 dpl_value
     solo_forth.z80s:852    .text:00000056 fld_value
     solo_forth.z80s:854    .text:00000058 csp_value
     solo_forth.z80s:856    .text:0000005a r_hash_value
     solo_forth.z80s:859    .text:0000005c context_value
     solo_forth.z80s:1409   .text:00000655 forth_pfa
     solo_forth.z80s:1400   .text:0000064f root_pfa
     solo_forth.z80s:880    .text:00000072 csb
     solo_forth.z80s:881    .text:00000072 unused_csb
     solo_forth.z80s:883    .text:00000074 csb0
     solo_forth.z80s:897    .text:00000214 terminal_input_buffer
     solo_forth.z80s:917    .text:00000307 disk_buffer
     solo_forth.z80s:933    .text:0000050c compare_de_hl_unsigned
     solo_forth.z80s:947    .text:00000512 compare_de_hl_signed
     solo_forth.z80s:964    .text:0000051c move_block
     solo_forth.z80s:1011   .text:00000528 move_block_downwards
     solo_forth.z80s:982    .text:00000522 move_block_upwards
     solo_forth.z80s:1030   .text:00000534 a_multiplied_by_de_to_ahl
     solo_forth.z80s:1033   .text:00000539 a_multiplied_by_de_to_ahl.1
     solo_forth.z80s:1039   .text:00000541 a_multiplied_by_de_to_ahl.2
     solo_forth.z80s:1048   .text:00000546 hl_multiplied_by_de_to_hlde_unsigned
     solo_forth.z80s:1071   .text:0000055d push_hlde
     solo_forth.z80s:1074   .text:0000055e push_hl
     solo_forth.z80s:1077   .text:0000055f next
     solo_forth.z80s:1090   .text:00000565 next2
     solo_forth.z80s:1101   .text:00000569 next2_end
     solo_forth.z80s:1114   .text:0000056a root_x_
     solo_forth.z80s:200    .data:00000001 root_x_cfap
     solo_forth.z80s:200    .data:00000003 root_x_lfa
     solo_forth.z80s:200    .data:00000005 root_x_nfa
     solo_forth.z80s:7964   .data:00001012 _address_after_name
     solo_forth.z80s:7964   .data:00001010 _name_address
     solo_forth.z80s:1114   .text:0000056c root_x_pfa
     solo_forth.z80s:4847   .text:00001117 x_
     solo_forth.z80s:1129   .text:00000572 root_forth_
     solo_forth.z80s:200    .data:0000000a root_forth_cfap
     solo_forth.z80s:200    .data:0000000c root_forth_lfa
     solo_forth.z80s:200    .data:0000000e root_forth_nfa
     solo_forth.z80s:3473   .text:00000c61 do_colon
     solo_forth.z80s:1129   .text:00000574 root_forth_pfa
     solo_forth.z80s:1409   .text:00000653 forth_
GAS LISTING solo_forth.z80s 			page 151


     solo_forth.z80s:2959   .text:00000abc semicolon_s_
     solo_forth.z80s:1135   .text:00000578 root_definitions_
     solo_forth.z80s:200    .data:00000014 root_definitions_cfap
     solo_forth.z80s:200    .data:00000016 root_definitions_lfa
     solo_forth.z80s:200    .data:00000018 root_definitions_nfa
     solo_forth.z80s:1135   .text:0000057a root_definitions_pfa
     solo_forth.z80s:5868   .text:000015d3 definitions_
     solo_forth.z80s:1149   .text:0000057e abase_
     solo_forth.z80s:200    .data:00000024 abase_cfap
     solo_forth.z80s:200    .data:00000026 abase_lfa
     solo_forth.z80s:200    .data:00000028 abase_nfa
     solo_forth.z80s:5458   .text:00001418 do_create
     solo_forth.z80s:1149   .text:00000580 abase_pfa
     solo_forth.z80s:1163   .text:00000582 asm_
     solo_forth.z80s:200    .data:0000002e asm_cfap
     solo_forth.z80s:200    .data:00000030 asm_lfa
     solo_forth.z80s:200    .data:00000032 asm_nfa
     solo_forth.z80s:1163   .text:00000584 asm_pfa
     solo_forth.z80s:3511   .text:00000c92 noop_
     solo_forth.z80s:3768   .text:00000d2f base_
     solo_forth.z80s:3389   .text:00000c16 fetch_
     solo_forth.z80s:3447   .text:00000c45 store_
     solo_forth.z80s:4492   .text:00000faf hex_
     solo_forth.z80s:1309   .text:000005fd also_
     solo_forth.z80s:1417   .text:00000659 assembler_
     solo_forth.z80s:1182   .text:00000596 end_asm_
     solo_forth.z80s:200    .data:00000036 end_asm_cfap
     solo_forth.z80s:200    .data:00000038 end_asm_lfa
     solo_forth.z80s:200    .data:0000003a end_asm_nfa
     solo_forth.z80s:1182   .text:00000598 end_asm_pfa
     solo_forth.z80s:1357   .text:00000623 previous_
     solo_forth.z80s:1197   .text:000005a4 end_code_
     solo_forth.z80s:200    .data:00000042 end_code_cfap
     solo_forth.z80s:200    .data:00000044 end_code_lfa
     solo_forth.z80s:200    .data:00000046 end_code_nfa
     solo_forth.z80s:1197   .text:000005a6 end_code_pfa
     solo_forth.z80s:4413   .text:00000f44 question_csp_
     solo_forth.z80s:4469   .text:00000f9c smudge_
     solo_forth.z80s:1203   .text:000005ae next_
     solo_forth.z80s:200    .data:0000004f next_cfap
     solo_forth.z80s:200    .data:00000051 next_lfa
     solo_forth.z80s:200    .data:00000053 next_nfa
     solo_forth.z80s:3526   .text:00000c9c do_constant
     solo_forth.z80s:1203   .text:000005b0 next_pfa
     solo_forth.z80s:1216   .text:000005b2 pushhl_
     solo_forth.z80s:200    .data:00000058 pushhl_cfap
     solo_forth.z80s:200    .data:0000005a pushhl_lfa
     solo_forth.z80s:200    .data:0000005c pushhl_nfa
     solo_forth.z80s:1216   .text:000005b4 pushhl_pfa
     solo_forth.z80s:1221   .text:000005b6 pushhlde_
     solo_forth.z80s:200    .data:00000063 pushhlde_cfap
     solo_forth.z80s:200    .data:00000065 pushhlde_lfa
     solo_forth.z80s:200    .data:00000067 pushhlde_nfa
     solo_forth.z80s:1221   .text:000005b8 pushhlde_pfa
     solo_forth.z80s:1226   .text:000005ba fetchhl_
     solo_forth.z80s:200    .data:00000070 fetchhl_cfap
     solo_forth.z80s:200    .data:00000072 fetchhl_lfa
GAS LISTING solo_forth.z80s 			page 152


     solo_forth.z80s:200    .data:00000074 fetchhl_nfa
     solo_forth.z80s:1226   .text:000005bc fetchhl_pfa
     solo_forth.z80s:3392   .text:00000c19 fetch.hl
     solo_forth.z80s:1231   .text:000005be next_comma_
     solo_forth.z80s:200    .data:0000007c next_comma_cfap
     solo_forth.z80s:200    .data:0000007e next_comma_lfa
     solo_forth.z80s:200    .data:00000080 next_comma_nfa
     solo_forth.z80s:1231   .text:000005c0 next_comma_pfa
     solo_forth.z80s:1467   .text:0000068d lit_
     solo_forth.z80s:3941   .text:00000dae comma_
     solo_forth.z80s:1246   .text:000005c8 pushhl_comma_
     solo_forth.z80s:200    .data:00000086 pushhl_comma_cfap
     solo_forth.z80s:200    .data:00000088 pushhl_comma_lfa
     solo_forth.z80s:200    .data:0000008a pushhl_comma_nfa
     solo_forth.z80s:1246   .text:000005ca pushhl_comma_pfa
     solo_forth.z80s:1455   .text:00000683 c_lit_
     solo_forth.z80s:3959   .text:00000dc2 c_comma_
     solo_forth.z80s:1262   .text:000005d7 pushhlde_comma_
     solo_forth.z80s:200    .data:00000092 pushhlde_comma_cfap
     solo_forth.z80s:200    .data:00000094 pushhlde_comma_lfa
     solo_forth.z80s:200    .data:00000096 pushhlde_comma_nfa
     solo_forth.z80s:1262   .text:000005d9 pushhlde_comma_pfa
     solo_forth.z80s:1278   .text:000005e6 fetchhl_comma_
     solo_forth.z80s:200    .data:000000a0 fetchhl_comma_cfap
     solo_forth.z80s:200    .data:000000a2 fetchhl_comma_lfa
     solo_forth.z80s:200    .data:000000a4 fetchhl_comma_nfa
     solo_forth.z80s:1278   .text:000005e8 fetchhl_comma_pfa
     solo_forth.z80s:1303   .text:000005f5 label_
     solo_forth.z80s:200    .data:000000ad label_cfap
     solo_forth.z80s:200    .data:000000af label_lfa
     solo_forth.z80s:200    .data:000000b1 label_nfa
     solo_forth.z80s:1303   .text:000005f7 label_pfa
     solo_forth.z80s:5454   .text:00001410 create_
     solo_forth.z80s:200    .data:000000b7 also_cfap
     solo_forth.z80s:200    .data:000000b9 also_lfa
     solo_forth.z80s:200    .data:000000bb also_nfa
     solo_forth.z80s:1309   .text:000005ff also_pfa
     solo_forth.z80s:3753   .text:00000d26 context_
     solo_forth.z80s:3317   .text:00000bdc dup_
     solo_forth.z80s:3847   .text:00000d64 cell_plus_
     solo_forth.z80s:2580   .text:000009d6 cmove_up_
     solo_forth.z80s:1330   .text:0000060d minus_order_
     solo_forth.z80s:200    .data:000000c0 minus_order_cfap
     solo_forth.z80s:200    .data:000000c2 minus_order_lfa
     solo_forth.z80s:200    .data:000000c4 minus_order_nfa
     solo_forth.z80s:1330   .text:0000060f minus_order_pfa
     solo_forth.z80s:4926   .text:00001152 erase_
     solo_forth.z80s:1338   .text:00000619 only_
     solo_forth.z80s:200    .data:000000cb only_cfap
     solo_forth.z80s:200    .data:000000cd only_lfa
     solo_forth.z80s:200    .data:000000cf only_nfa
     solo_forth.z80s:1338   .text:0000061b only_pfa
     solo_forth.z80s:1400   .text:0000064d root_
     solo_forth.z80s:200    .data:000000d4 previous_cfap
     solo_forth.z80s:200    .data:000000d6 previous_lfa
     solo_forth.z80s:200    .data:000000d8 previous_nfa
     solo_forth.z80s:1357   .text:00000625 previous_pfa
GAS LISTING solo_forth.z80s 			page 153


     solo_forth.z80s:3310   .text:00000bd5 swap_
     solo_forth.z80s:2591   .text:000009e2 cmove_
     solo_forth.z80s:3217   .text:00000b7d plus_
     solo_forth.z80s:3347   .text:00000bf9 off_
     solo_forth.z80s:1380   .text:0000063f seal_
     solo_forth.z80s:200    .data:000000e1 seal_cfap
     solo_forth.z80s:200    .data:000000e3 seal_lfa
     solo_forth.z80s:200    .data:000000e5 seal_nfa
     solo_forth.z80s:1380   .text:00000641 seal_pfa
     solo_forth.z80s:200    .data:000000ea root_cfap
     solo_forth.z80s:200    .data:000000ec root_lfa
     solo_forth.z80s:200    .data:000000ee root_nfa
     solo_forth.z80s:5853   .text:0000157f do_vocabulary
     solo_forth.z80s:1404   .text:00000651 root_vocabulary_link
     solo_forth.z80s:200    .data:000000f3 forth_cfap
     solo_forth.z80s:200    .data:000000f5 forth_lfa
     solo_forth.z80s:200    .data:000000f7 forth_nfa
     solo_forth.z80s:1413   .text:00000657 forth_vocabulary_link
     solo_forth.z80s:200    .data:000000fd assembler_cfap
     solo_forth.z80s:200    .data:000000ff assembler_lfa
     solo_forth.z80s:200    .data:00000101 assembler_nfa
     solo_forth.z80s:1417   .text:0000065b assembler_pfa
     solo_forth.z80s:1427   .text:0000065f s_lit_
     solo_forth.z80s:200    .data:0000010b s_lit_cfap
     solo_forth.z80s:200    .data:0000010d s_lit_lfa
     solo_forth.z80s:200    .data:0000010f s_lit_nfa
     solo_forth.z80s:1427   .text:00000661 s_lit_pfa
     solo_forth.z80s:3167   .text:00000b4b r_fetch_
     solo_forth.z80s:4576   .text:00001003 count_
     solo_forth.z80s:3829   .text:00000d53 one_plus_
     solo_forth.z80s:3086   .text:00000afb from_r_
     solo_forth.z80s:3068   .text:00000aec to_r_
     solo_forth.z80s:1436   .text:00000671 paren_s_
     solo_forth.z80s:200    .data:00000114 paren_s_cfap
     solo_forth.z80s:200    .data:00000116 paren_s_lfa
     solo_forth.z80s:200    .data:00000118 paren_s_nfa
     solo_forth.z80s:1436   .text:00000673 paren_s_pfa
     solo_forth.z80s:4988   .text:000011a3 parse_
     solo_forth.z80s:4383   .text:00000f19 comp_question_
     solo_forth.z80s:1734   .text:00000760 zero_branch_
     solo_forth.z80s:1450   .text:0000067f paren_s.interpreting
     solo_forth.z80s:5622   .text:000014af s_literal_
     solo_forth.z80s:1568   .text:000006ea save_string_
     solo_forth.z80s:200    .data:0000011c c_lit_cfap
     solo_forth.z80s:200    .data:0000011e c_lit_lfa
     solo_forth.z80s:200    .data:00000120 c_lit_nfa
     solo_forth.z80s:1455   .text:00000685 c_lit_pfa
     solo_forth.z80s:1460   .text:00000687 push_a
     solo_forth.z80s:1462   .text:00000688 push_l
     solo_forth.z80s:200    .data:00000125 lit_cfap
     solo_forth.z80s:200    .data:00000127 lit_lfa
     solo_forth.z80s:200    .data:00000129 lit_nfa
     solo_forth.z80s:1467   .text:0000068f lit_pfa
     solo_forth.z80s:1481   .text:00000698 bank_
     solo_forth.z80s:200    .data:0000012d bank_cfap
     solo_forth.z80s:200    .data:0000012f bank_lfa
     solo_forth.z80s:200    .data:00000131 bank_nfa
GAS LISTING solo_forth.z80s 			page 154


     solo_forth.z80s:1481   .text:0000069a bank_pfa
     solo_forth.z80s:1499   .text:000006a0 bank.e
     solo_forth.z80s:1495   .text:000006a0 bank.default
     solo_forth.z80s:1497   .text:000006a0 bank.names
     solo_forth.z80s:1511   .text:000006ae unused_csb_
     solo_forth.z80s:200    .data:00000136 unused_csb_cfap
     solo_forth.z80s:200    .data:00000138 unused_csb_lfa
     solo_forth.z80s:200    .data:0000013a unused_csb_nfa
     solo_forth.z80s:1511   .text:000006b0 unused_csb_pfa
     solo_forth.z80s:1523   .text:000006b6 csb0_
     solo_forth.z80s:200    .data:00000145 csb0_cfap
     solo_forth.z80s:200    .data:00000147 csb0_lfa
     solo_forth.z80s:200    .data:00000149 csb0_nfa
     solo_forth.z80s:1523   .text:000006b8 csb0_pfa
     solo_forth.z80s:1534   .text:000006ba question_csb_
     solo_forth.z80s:200    .data:0000014e question_csb_cfap
     solo_forth.z80s:200    .data:00000150 question_csb_lfa
     solo_forth.z80s:200    .data:00000152 question_csb_nfa
     solo_forth.z80s:1534   .text:000006bc question_csb_pfa
     solo_forth.z80s:4030   .text:00000e13 greater_than_
     solo_forth.z80s:1550   .text:000006d4 question_csb_.enough
     solo_forth.z80s:3251   .text:00000b97 negate_
     solo_forth.z80s:3333   .text:00000bec plus_store_
     solo_forth.z80s:1555   .text:000006de allocate_string_
     solo_forth.z80s:200    .data:00000157 allocate_string_cfap
     solo_forth.z80s:200    .data:00000159 allocate_string_lfa
     solo_forth.z80s:200    .data:0000015b allocate_string_nfa
     solo_forth.z80s:1555   .text:000006e0 allocate_string_pfa
     solo_forth.z80s:200    .data:0000016b save_string_cfap
     solo_forth.z80s:200    .data:0000016d save_string_lfa
     solo_forth.z80s:200    .data:0000016f save_string_nfa
     solo_forth.z80s:1568   .text:000006ec save_string_pfa
     solo_forth.z80s:3324   .text:00000be3 two_dup_
     solo_forth.z80s:3134   .text:00000b24 two_to_r_
     solo_forth.z80s:2602   .text:000009ee move_
     solo_forth.z80s:3149   .text:00000b33 two_from_r_
     solo_forth.z80s:1582   .text:000006fc save_counted_string_
     solo_forth.z80s:200    .data:0000017b save_counted_string_cfap
     solo_forth.z80s:200    .data:0000017d save_counted_string_lfa
     solo_forth.z80s:200    .data:0000017f save_counted_string_nfa
     solo_forth.z80s:1582   .text:000006fe save_counted_string_pfa
     solo_forth.z80s:5246   .text:000012d5 dollar_store_
     solo_forth.z80s:1597   .text:0000070e empty_csb_
     solo_forth.z80s:200    .data:00000193 empty_csb_cfap
     solo_forth.z80s:200    .data:00000195 empty_csb_lfa
     solo_forth.z80s:200    .data:00000197 empty_csb_nfa
     solo_forth.z80s:1597   .text:00000710 empty_csb_pfa
     solo_forth.z80s:1611   .text:0000071c execute_
     solo_forth.z80s:200    .data:000001a1 execute_cfap
     solo_forth.z80s:200    .data:000001a3 execute_lfa
     solo_forth.z80s:200    .data:000001a5 execute_nfa
     solo_forth.z80s:1611   .text:0000071e execute_pfa
     solo_forth.z80s:1623   .text:00000722 perform_
     solo_forth.z80s:200    .data:000001ad perform_cfap
     solo_forth.z80s:200    .data:000001af perform_lfa
     solo_forth.z80s:200    .data:000001b1 perform_nfa
     solo_forth.z80s:1623   .text:00000724 perform_pfa
GAS LISTING solo_forth.z80s 			page 155


     solo_forth.z80s:1644   .text:0000072f forward_mark_
     solo_forth.z80s:200    .data:000001b9 forward_mark_cfap
     solo_forth.z80s:200    .data:000001bb forward_mark_lfa
     solo_forth.z80s:200    .data:000001bd forward_mark_nfa
     solo_forth.z80s:1644   .text:00000731 forward_mark_pfa
     solo_forth.z80s:4389   .text:00000f21 question_comp_
     solo_forth.z80s:3919   .text:00000d8c here_
     solo_forth.z80s:3590   .text:00000cc1 zero_
     solo_forth.z80s:1663   .text:0000073b forward_resolve_
     solo_forth.z80s:200    .data:000001c3 forward_resolve_cfap
     solo_forth.z80s:200    .data:000001c5 forward_resolve_lfa
     solo_forth.z80s:200    .data:000001c7 forward_resolve_nfa
     solo_forth.z80s:1663   .text:0000073d forward_resolve_pfa
     solo_forth.z80s:1679   .text:00000747 backward_mark_
     solo_forth.z80s:200    .data:000001d0 backward_mark_cfap
     solo_forth.z80s:200    .data:000001d2 backward_mark_lfa
     solo_forth.z80s:200    .data:000001d4 backward_mark_nfa
     solo_forth.z80s:1679   .text:00000749 backward_mark_pfa
     solo_forth.z80s:1696   .text:0000074f backward_resolve_
     solo_forth.z80s:200    .data:000001da backward_resolve_cfap
     solo_forth.z80s:200    .data:000001dc backward_resolve_lfa
     solo_forth.z80s:200    .data:000001de backward_resolve_nfa
     solo_forth.z80s:1696   .text:00000751 backward_resolve_pfa
     solo_forth.z80s:1714   .text:00000757 branch_
     solo_forth.z80s:200    .data:000001e7 branch_cfap
     solo_forth.z80s:200    .data:000001e9 branch_lfa
     solo_forth.z80s:200    .data:000001eb branch_nfa
     solo_forth.z80s:1714   .text:00000759 branch_pfa
     solo_forth.z80s:200    .data:000001f2 zero_branch_cfap
     solo_forth.z80s:200    .data:000001f4 zero_branch_lfa
     solo_forth.z80s:200    .data:000001f6 zero_branch_nfa
     solo_forth.z80s:1734   .text:00000762 zero_branch_pfa
     solo_forth.z80s:1755   .text:0000076c question_branch_
     solo_forth.z80s:200    .data:000001fe question_branch_cfap
     solo_forth.z80s:200    .data:00000200 question_branch_lfa
     solo_forth.z80s:200    .data:00000202 question_branch_nfa
     solo_forth.z80s:1755   .text:0000076e question_branch_pfa
     solo_forth.z80s:1782   .text:00000778 paren_loop_
     solo_forth.z80s:200    .data:0000020a paren_loop_cfap
     solo_forth.z80s:200    .data:0000020c paren_loop_lfa
     solo_forth.z80s:200    .data:0000020e paren_loop_nfa
     solo_forth.z80s:1782   .text:0000077a paren_loop_pfa
     solo_forth.z80s:1795   .text:0000077d paren_loop.step_in_de
     solo_forth.z80s:1819   .text:00000797 paren_loop.negative_step
     solo_forth.z80s:1827   .text:0000079c paren_loop.end
     solo_forth.z80s:1838   .text:000007a7 paren_plus_loop_
     solo_forth.z80s:200    .data:00000215 paren_plus_loop_cfap
     solo_forth.z80s:200    .data:00000217 paren_plus_loop_lfa
     solo_forth.z80s:200    .data:00000219 paren_plus_loop_nfa
     solo_forth.z80s:1838   .text:000007a9 paren_plus_loop_pfa
     solo_forth.z80s:1865   .text:000007ad paren_do_
     solo_forth.z80s:200    .data:00000221 paren_do_cfap
     solo_forth.z80s:200    .data:00000223 paren_do_lfa
     solo_forth.z80s:200    .data:00000225 paren_do_nfa
     solo_forth.z80s:1865   .text:000007af paren_do_pfa
     solo_forth.z80s:1901   .text:000007c3 paren_do83_
     solo_forth.z80s:200    .data:0000022a paren_do83_cfap
GAS LISTING solo_forth.z80s 			page 156


     solo_forth.z80s:200    .data:0000022c paren_do83_lfa
     solo_forth.z80s:200    .data:0000022e paren_do83_nfa
     solo_forth.z80s:1901   .text:000007c5 paren_do83_pfa
     solo_forth.z80s:1905   .text:000007c7 paren_do83.de_hl
     solo_forth.z80s:1935   .text:000007e8 paren_question_do83_
     solo_forth.z80s:200    .data:00000235 paren_question_do83_cfap
     solo_forth.z80s:200    .data:00000237 paren_question_do83_lfa
     solo_forth.z80s:200    .data:00000239 paren_question_do83_nfa
     solo_forth.z80s:1935   .text:000007ea paren_question_do83_pfa
     solo_forth.z80s:1946   .text:000007f5 question_do.equals
     solo_forth.z80s:1949   .text:000007f8 question_do83_
     solo_forth.z80s:200    .data:00000241 question_do83_cfap
     solo_forth.z80s:200    .data:00000243 question_do83_lfa
     solo_forth.z80s:200    .data:00000245 question_do83_nfa
     solo_forth.z80s:1949   .text:000007fa question_do83_pfa
     solo_forth.z80s:4427   .text:00000f64 compile_
     solo_forth.z80s:1958   .text:00000805 do83_
     solo_forth.z80s:200    .data:0000024b do83_cfap
     solo_forth.z80s:200    .data:0000024d do83_lfa
     solo_forth.z80s:200    .data:0000024f do83_nfa
     solo_forth.z80s:1958   .text:00000807 do83_pfa
     solo_forth.z80s:1967   .text:00000812 loop83_
     solo_forth.z80s:200    .data:00000254 loop83_cfap
     solo_forth.z80s:200    .data:00000256 loop83_lfa
     solo_forth.z80s:200    .data:00000258 loop83_nfa
     solo_forth.z80s:1967   .text:00000814 loop83_pfa
     solo_forth.z80s:4405   .text:00000f39 question_pairs_
     solo_forth.z80s:1986   .text:00000821 paren_loop83_
     solo_forth.z80s:200    .data:0000025f paren_loop83_cfap
     solo_forth.z80s:200    .data:00000261 paren_loop83_lfa
     solo_forth.z80s:200    .data:00000263 paren_loop83_nfa
     solo_forth.z80s:1986   .text:00000823 paren_loop83_pfa
     solo_forth.z80s:2005   .text:0000083a paren_loop83.loop
     solo_forth.z80s:2106   .text:00000844 i_
     solo_forth.z80s:200    .data:0000026c i_cfap
     solo_forth.z80s:200    .data:0000026e i_lfa
     solo_forth.z80s:200    .data:00000270 i_nfa
     solo_forth.z80s:3167   .text:00000b4d r_fetch_pfa
     solo_forth.z80s:2117   .text:00000846 digit_
     solo_forth.z80s:200    .data:00000272 digit_cfap
     solo_forth.z80s:200    .data:00000274 digit_lfa
     solo_forth.z80s:200    .data:00000276 digit_nfa
     solo_forth.z80s:2117   .text:00000848 digit_pfa
     solo_forth.z80s:3605   .text:00000ccf false_pfa
     solo_forth.z80s:2139   .text:0000085c digit.test_value
     solo_forth.z80s:3617   .text:00000cd7 true_pfa
     solo_forth.z80s:2147   .text:00000865 paren_find_
     solo_forth.z80s:200    .data:0000027c paren_find_cfap
     solo_forth.z80s:200    .data:0000027e paren_find_lfa
     solo_forth.z80s:200    .data:00000280 paren_find_nfa
     solo_forth.z80s:2147   .text:00000867 paren_find_pfa
     solo_forth.z80s:2179   .text:00000877 paren_find.string_address
     solo_forth.z80s:2173   .text:00000872 paren_find.begin
     solo_forth.z80s:2235   .text:000008a9 paren_find.nfa_backup
     solo_forth.z80s:2233   .text:000008a8 paren_find.not_a_match
     solo_forth.z80s:2189   .text:00000881 paren_find.compare_next_char
     solo_forth.z80s:2218   .text:0000089d paren_find.end
GAS LISTING solo_forth.z80s 			page 157


     solo_forth.z80s:2250   .text:000008be scan_
     solo_forth.z80s:200    .data:00000287 scan_cfap
     solo_forth.z80s:200    .data:00000289 scan_lfa
     solo_forth.z80s:200    .data:0000028b scan_nfa
     solo_forth.z80s:2250   .text:000008c0 scan_pfa
     solo_forth.z80s:2270   .text:000008ca scan.begin
     solo_forth.z80s:2281   .text:000008d4 skip_
     solo_forth.z80s:200    .data:00000290 skip_cfap
     solo_forth.z80s:200    .data:00000292 skip_lfa
     solo_forth.z80s:200    .data:00000294 skip_nfa
     solo_forth.z80s:2281   .text:000008d6 skip_pfa
     solo_forth.z80s:2291   .text:000008d8 skip.begin
     solo_forth.z80s:2299   .text:000008e1 chan_
     solo_forth.z80s:200    .data:00000299 chan_cfap
     solo_forth.z80s:200    .data:0000029b chan_lfa
     solo_forth.z80s:200    .data:0000029d chan_nfa
     solo_forth.z80s:2299   .text:000008e3 chan_pfa
     solo_forth.z80s:2317   .text:000008ec emit_
     solo_forth.z80s:200    .data:000002a2 emit_cfap
     solo_forth.z80s:200    .data:000002a4 emit_lfa
     solo_forth.z80s:200    .data:000002a6 emit_nfa
     solo_forth.z80s:2317   .text:000008ee emit_pfa
     solo_forth.z80s:2327   .text:000008f8 paren_emit_
     solo_forth.z80s:3595   .text:00000cc5 one_
     solo_forth.z80s:3741   .text:00000d20 out_
     solo_forth.z80s:200    .data:000002ab paren_emit_cfap
     solo_forth.z80s:200    .data:000002ad paren_emit_lfa
     solo_forth.z80s:200    .data:000002af paren_emit_nfa
     solo_forth.z80s:2327   .text:000008fa paren_emit_pfa
     solo_forth.z80s:2354   .text:00000903 printer_
     solo_forth.z80s:200    .data:000002b6 printer_cfap
     solo_forth.z80s:200    .data:000002b8 printer_lfa
     solo_forth.z80s:200    .data:000002ba printer_nfa
     solo_forth.z80s:2354   .text:00000905 printer_pfa
     solo_forth.z80s:2361   .text:0000090c display_
     solo_forth.z80s:200    .data:000002c2 display_cfap
     solo_forth.z80s:200    .data:000002c4 display_lfa
     solo_forth.z80s:200    .data:000002c6 display_nfa
     solo_forth.z80s:2361   .text:0000090e display_pfa
     solo_forth.z80s:3600   .text:00000cc9 two_
     solo_forth.z80s:2368   .text:00000914 key_question_
     solo_forth.z80s:200    .data:000002ce key_question_cfap
     solo_forth.z80s:200    .data:000002d0 key_question_lfa
     solo_forth.z80s:200    .data:000002d2 key_question_nfa
     solo_forth.z80s:2368   .text:00000916 key_question_pfa
     solo_forth.z80s:2382   .text:00000920 decode_table_
     solo_forth.z80s:200    .data:000002d7 decode_table_cfap
     solo_forth.z80s:200    .data:000002d9 decode_table_lfa
     solo_forth.z80s:200    .data:000002db decode_table_nfa
     solo_forth.z80s:2382   .text:00000922 decode_table_pfa
     solo_forth.z80s:2398   .text:00000933 decode_char_
     solo_forth.z80s:200    .data:000002e8 decode_char_cfap
     solo_forth.z80s:200    .data:000002ea decode_char_lfa
     solo_forth.z80s:200    .data:000002ec decode_char_nfa
     solo_forth.z80s:2398   .text:00000935 decode_char_pfa
     solo_forth.z80s:2410   .text:00000939 decode_char.begin
     solo_forth.z80s:2416   .text:0000093c paren_key_
GAS LISTING solo_forth.z80s 			page 158


     solo_forth.z80s:200    .data:000002f8 paren_key_cfap
     solo_forth.z80s:200    .data:000002fa paren_key_lfa
     solo_forth.z80s:200    .data:000002fc paren_key_nfa
     solo_forth.z80s:2416   .text:0000093e paren_key_pfa
     solo_forth.z80s:2424   .text:00000948 previous_key
     solo_forth.z80s:2420   .text:00000944 paren_key_.begin
     solo_forth.z80s:2435   .text:00000957 key_
     solo_forth.z80s:200    .data:00000302 key_cfap
     solo_forth.z80s:200    .data:00000304 key_lfa
     solo_forth.z80s:200    .data:00000306 key_nfa
     solo_forth.z80s:2435   .text:00000959 key_pfa
     solo_forth.z80s:2447   .text:0000095a key.begin
     solo_forth.z80s:2455   .text:00000969 key.end
     solo_forth.z80s:2462   .text:00000972 xkey_
     solo_forth.z80s:200    .data:0000030a xkey_cfap
     solo_forth.z80s:200    .data:0000030c xkey_lfa
     solo_forth.z80s:200    .data:0000030e xkey_nfa
     solo_forth.z80s:2462   .text:00000974 xkey_pfa
     solo_forth.z80s:2486   .text:00000975 xkey.new_key
     solo_forth.z80s:2496   .text:0000097f xkey.wait_for_key
     solo_forth.z80s:2514   .text:00000992 xkey.translate
     solo_forth.z80s:2515   .text:00000992 xkey.left_bracket
     solo_forth.z80s:2519   .text:00000998 xkey.right_bracket
     solo_forth.z80s:2523   .text:0000099e xkey.tilde
     solo_forth.z80s:2527   .text:000009a4 xkey.vertical_bar
     solo_forth.z80s:2531   .text:000009aa xkey.backslash
     solo_forth.z80s:2535   .text:000009b0 xkey.left_curly_bracket
     solo_forth.z80s:2539   .text:000009b6 xkey.right_curly_bracket
     solo_forth.z80s:2544   .text:000009bc xkey.end
     solo_forth.z80s:2565   .text:000009c9 cr_
     solo_forth.z80s:200    .data:00000313 cr_cfap
     solo_forth.z80s:200    .data:00000315 cr_lfa
     solo_forth.z80s:200    .data:00000317 cr_nfa
     solo_forth.z80s:2565   .text:000009cb cr_pfa
     solo_forth.z80s:200    .data:0000031a cmove_up_cfap
     solo_forth.z80s:200    .data:0000031c cmove_up_lfa
     solo_forth.z80s:200    .data:0000031e cmove_up_nfa
     solo_forth.z80s:2580   .text:000009d8 cmove_up_pfa
     solo_forth.z80s:200    .data:00000325 cmove_cfap
     solo_forth.z80s:200    .data:00000327 cmove_lfa
     solo_forth.z80s:200    .data:00000329 cmove_nfa
     solo_forth.z80s:2591   .text:000009e4 cmove_pfa
     solo_forth.z80s:200    .data:0000032f move_cfap
     solo_forth.z80s:200    .data:00000331 move_lfa
     solo_forth.z80s:200    .data:00000333 move_nfa
     solo_forth.z80s:2602   .text:000009f0 move_pfa
     solo_forth.z80s:2613   .text:000009f3 move.do
     solo_forth.z80s:2620   .text:000009fa smove_
     solo_forth.z80s:200    .data:00000338 smove_cfap
     solo_forth.z80s:200    .data:0000033a smove_lfa
     solo_forth.z80s:200    .data:0000033c smove_nfa
     solo_forth.z80s:2620   .text:000009fc smove_pfa
     solo_forth.z80s:2639   .text:00000a02 u_m_star_
     solo_forth.z80s:200    .data:00000342 u_m_star_cfap
     solo_forth.z80s:200    .data:00000344 u_m_star_lfa
     solo_forth.z80s:200    .data:00000346 u_m_star_nfa
     solo_forth.z80s:2639   .text:00000a04 u_m_star_pfa
GAS LISTING solo_forth.z80s 			page 159


     solo_forth.z80s:2658   .text:00000a0c u_slash_mod_
     solo_forth.z80s:200    .data:0000034a u_slash_mod_cfap
     solo_forth.z80s:200    .data:0000034c u_slash_mod_lfa
     solo_forth.z80s:200    .data:0000034e u_slash_mod_nfa
     solo_forth.z80s:2658   .text:00000a0e u_slash_mod_pfa
     solo_forth.z80s:2695   .text:00000a27 l60a0h
     solo_forth.z80s:2724   .text:00000a47 l60c0h
     solo_forth.z80s:2697   .text:00000a29 l60a2h
     solo_forth.z80s:2705   .text:00000a31 l60aah
     solo_forth.z80s:2713   .text:00000a3b l60b4h
     solo_forth.z80s:2719   .text:00000a42 l60bbh
     solo_forth.z80s:2810   .text:00000a4c and_
     solo_forth.z80s:200    .data:00000356 and_cfap
     solo_forth.z80s:200    .data:00000358 and_lfa
     solo_forth.z80s:200    .data:0000035a and_nfa
     solo_forth.z80s:2810   .text:00000a4e and_pfa
     solo_forth.z80s:2823   .text:00000a59 or_
     solo_forth.z80s:200    .data:0000035e or_cfap
     solo_forth.z80s:200    .data:00000360 or_lfa
     solo_forth.z80s:200    .data:00000362 or_nfa
     solo_forth.z80s:2823   .text:00000a5b or_pfa
     solo_forth.z80s:2836   .text:00000a66 xor_
     solo_forth.z80s:200    .data:00000365 xor_cfap
     solo_forth.z80s:200    .data:00000367 xor_lfa
     solo_forth.z80s:200    .data:00000369 xor_nfa
     solo_forth.z80s:2836   .text:00000a68 xor_pfa
     solo_forth.z80s:2849   .text:00000a73 np_
     solo_forth.z80s:200    .data:0000036d np_cfap
     solo_forth.z80s:200    .data:0000036f np_lfa
     solo_forth.z80s:200    .data:00000371 np_nfa
     solo_forth.z80s:2849   .text:00000a75 np_pfa
     solo_forth.z80s:2854   .text:00000a77 np0_
     solo_forth.z80s:200    .data:00000374 np0_cfap
     solo_forth.z80s:200    .data:00000376 np0_lfa
     solo_forth.z80s:200    .data:00000378 np0_nfa
     solo_forth.z80s:2854   .text:00000a79 np0_pfa
     solo_forth.z80s:2861   .text:00000a7b np_fetch_
     solo_forth.z80s:200    .data:0000037c np_fetch_cfap
     solo_forth.z80s:200    .data:0000037e np_fetch_lfa
     solo_forth.z80s:200    .data:00000380 np_fetch_nfa
     solo_forth.z80s:2861   .text:00000a7d np_fetch_pfa
     solo_forth.z80s:2867   .text:00000a83 np_store_
     solo_forth.z80s:200    .data:00000384 np_store_cfap
     solo_forth.z80s:200    .data:00000386 np_store_lfa
     solo_forth.z80s:200    .data:00000388 np_store_nfa
     solo_forth.z80s:2867   .text:00000a85 np_store_pfa
     solo_forth.z80s:2875   .text:00000a8b comma_np_
     solo_forth.z80s:200    .data:0000038c comma_np_cfap
     solo_forth.z80s:200    .data:0000038e comma_np_lfa
     solo_forth.z80s:200    .data:00000390 comma_np_nfa
     solo_forth.z80s:2875   .text:00000a8d comma_np_pfa
     solo_forth.z80s:2892   .text:00000a99 sp_fetch_
     solo_forth.z80s:200    .data:00000394 sp_fetch_cfap
     solo_forth.z80s:200    .data:00000396 sp_fetch_lfa
     solo_forth.z80s:200    .data:00000398 sp_fetch_nfa
     solo_forth.z80s:2892   .text:00000a9b sp_fetch_pfa
     solo_forth.z80s:2899   .text:00000aa2 sp_store_
GAS LISTING solo_forth.z80s 			page 160


     solo_forth.z80s:200    .data:0000039c sp_store_cfap
     solo_forth.z80s:200    .data:0000039e sp_store_lfa
     solo_forth.z80s:200    .data:000003a0 sp_store_nfa
     solo_forth.z80s:2899   .text:00000aa4 sp_store_pfa
     solo_forth.z80s:2922   .text:00000aa8 rp_
     solo_forth.z80s:200    .data:000003a4 rp_cfap
     solo_forth.z80s:200    .data:000003a6 rp_lfa
     solo_forth.z80s:200    .data:000003a8 rp_nfa
     solo_forth.z80s:2922   .text:00000aaa rp_pfa
     solo_forth.z80s:2927   .text:00000aac rp_fetch_
     solo_forth.z80s:200    .data:000003ab rp_fetch_cfap
     solo_forth.z80s:200    .data:000003ad rp_fetch_lfa
     solo_forth.z80s:200    .data:000003af rp_fetch_nfa
     solo_forth.z80s:2927   .text:00000aae rp_fetch_pfa
     solo_forth.z80s:2933   .text:00000ab4 rp_store_
     solo_forth.z80s:200    .data:000003b3 rp_store_cfap
     solo_forth.z80s:200    .data:000003b5 rp_store_lfa
     solo_forth.z80s:200    .data:000003b7 rp_store_nfa
     solo_forth.z80s:2933   .text:00000ab6 rp_store_pfa
     solo_forth.z80s:200    .data:000003bb semicolon_s_cfap
     solo_forth.z80s:200    .data:000003bd semicolon_s_lfa
     solo_forth.z80s:200    .data:000003bf semicolon_s_nfa
     solo_forth.z80s:2959   .text:00000abe semicolon_s_pfa
     solo_forth.z80s:2989   .text:00000aca pick_
     solo_forth.z80s:200    .data:000003c2 pick_cfap
     solo_forth.z80s:200    .data:000003c4 pick_lfa
     solo_forth.z80s:200    .data:000003c6 pick_nfa
     solo_forth.z80s:2989   .text:00000acc pick_pfa
     solo_forth.z80s:2997   .text:00000ad2 unloop_
     solo_forth.z80s:200    .data:000003cb unloop_cfap
     solo_forth.z80s:200    .data:000003cd unloop_lfa
     solo_forth.z80s:200    .data:000003cf unloop_nfa
     solo_forth.z80s:3104   .text:00000b0c two_r_drop_pfa
     solo_forth.z80s:3015   .text:00000ad4 exhaust_
     solo_forth.z80s:200    .data:000003d6 exhaust_cfap
     solo_forth.z80s:200    .data:000003d8 exhaust_lfa
     solo_forth.z80s:200    .data:000003da exhaust_nfa
     solo_forth.z80s:3015   .text:00000ad6 exhaust_pfa
     solo_forth.z80s:3044   .text:00000ae2 question_exhaust_
     solo_forth.z80s:200    .data:000003e2 question_exhaust_cfap
     solo_forth.z80s:200    .data:000003e4 question_exhaust_lfa
     solo_forth.z80s:200    .data:000003e6 question_exhaust_nfa
     solo_forth.z80s:3044   .text:00000ae4 question_exhaust_pfa
     solo_forth.z80s:200    .data:000003ef to_r_cfap
     solo_forth.z80s:200    .data:000003f1 to_r_lfa
     solo_forth.z80s:200    .data:000003f3 to_r_nfa
     solo_forth.z80s:3068   .text:00000aee to_r_pfa
     solo_forth.z80s:200    .data:000003f6 from_r_cfap
     solo_forth.z80s:200    .data:000003f8 from_r_lfa
     solo_forth.z80s:200    .data:000003fa from_r_nfa
     solo_forth.z80s:3086   .text:00000afd from_r_pfa
     solo_forth.z80s:3104   .text:00000b0a two_r_drop_
     solo_forth.z80s:200    .data:000003fd two_r_drop_cfap
     solo_forth.z80s:200    .data:000003ff two_r_drop_lfa
     solo_forth.z80s:200    .data:00000401 two_r_drop_nfa
     solo_forth.z80s:3119   .text:00000b18 r_drop_
     solo_forth.z80s:200    .data:00000408 r_drop_cfap
GAS LISTING solo_forth.z80s 			page 161


     solo_forth.z80s:200    .data:0000040a r_drop_lfa
     solo_forth.z80s:200    .data:0000040c r_drop_nfa
     solo_forth.z80s:3119   .text:00000b1a r_drop_pfa
     solo_forth.z80s:200    .data:00000412 two_to_r_cfap
     solo_forth.z80s:200    .data:00000414 two_to_r_lfa
     solo_forth.z80s:200    .data:00000416 two_to_r_nfa
     solo_forth.z80s:3134   .text:00000b26 two_to_r_pfa
     solo_forth.z80s:3430   .text:00000c3a two_store.into_hl_pointer
     solo_forth.z80s:200    .data:0000041a two_from_r_cfap
     solo_forth.z80s:200    .data:0000041c two_from_r_lfa
     solo_forth.z80s:200    .data:0000041e two_from_r_nfa
     solo_forth.z80s:3149   .text:00000b35 two_from_r_pfa
     solo_forth.z80s:3408   .text:00000c2a two_fetch_pfa
     solo_forth.z80s:3161   .text:00000b43 two_r_fetch_
     solo_forth.z80s:200    .data:00000422 two_r_fetch_cfap
     solo_forth.z80s:200    .data:00000424 two_r_fetch_lfa
     solo_forth.z80s:200    .data:00000426 two_r_fetch_nfa
     solo_forth.z80s:3161   .text:00000b45 two_r_fetch_pfa
     solo_forth.z80s:3411   .text:00000c2b two_fetch.hl
     solo_forth.z80s:200    .data:0000042a r_fetch_cfap
     solo_forth.z80s:200    .data:0000042c r_fetch_lfa
     solo_forth.z80s:200    .data:0000042e r_fetch_nfa
     solo_forth.z80s:3175   .text:00000b53 zero_equals_
     solo_forth.z80s:200    .data:00000431 zero_equals_cfap
     solo_forth.z80s:200    .data:00000433 zero_equals_lfa
     solo_forth.z80s:200    .data:00000435 zero_equals_nfa
     solo_forth.z80s:3175   .text:00000b55 zero_equals_pfa
     solo_forth.z80s:3184   .text:00000b5e zero_not_equals_
     solo_forth.z80s:200    .data:00000438 zero_not_equals_cfap
     solo_forth.z80s:200    .data:0000043a zero_not_equals_lfa
     solo_forth.z80s:200    .data:0000043c zero_not_equals_nfa
     solo_forth.z80s:3184   .text:00000b60 zero_not_equals_pfa
     solo_forth.z80s:3193   .text:00000b69 zero_less_than_
     solo_forth.z80s:200    .data:00000440 zero_less_than_cfap
     solo_forth.z80s:200    .data:00000442 zero_less_than_lfa
     solo_forth.z80s:200    .data:00000444 zero_less_than_nfa
     solo_forth.z80s:3193   .text:00000b6b zero_less_than_pfa
     solo_forth.z80s:3196   .text:00000b6c zero_less_.hl
     solo_forth.z80s:3203   .text:00000b6e true_if_cy
     solo_forth.z80s:3208   .text:00000b74 zero_greater_than_
     solo_forth.z80s:200    .data:00000447 zero_greater_than_cfap
     solo_forth.z80s:200    .data:00000449 zero_greater_than_lfa
     solo_forth.z80s:200    .data:0000044b zero_greater_than_nfa
     solo_forth.z80s:3208   .text:00000b76 zero_greater_than_pfa
     solo_forth.z80s:3998   .text:00000df6 is_de_less_than_hl
     solo_forth.z80s:200    .data:0000044e plus_cfap
     solo_forth.z80s:200    .data:00000450 plus_lfa
     solo_forth.z80s:200    .data:00000452 plus_nfa
     solo_forth.z80s:3217   .text:00000b7f plus_pfa
     solo_forth.z80s:3225   .text:00000b85 d_plus_
     solo_forth.z80s:200    .data:00000454 d_plus_cfap
     solo_forth.z80s:200    .data:00000456 d_plus_lfa
     solo_forth.z80s:200    .data:00000458 d_plus_nfa
     solo_forth.z80s:3225   .text:00000b87 d_plus_pfa
     solo_forth.z80s:200    .data:0000045b negate_cfap
     solo_forth.z80s:200    .data:0000045d negate_lfa
     solo_forth.z80s:200    .data:0000045f negate_nfa
GAS LISTING solo_forth.z80s 			page 162


     solo_forth.z80s:3251   .text:00000b99 negate_pfa
     solo_forth.z80s:3260   .text:00000ba3 dnegate_
     solo_forth.z80s:200    .data:00000466 dnegate_cfap
     solo_forth.z80s:200    .data:00000468 dnegate_lfa
     solo_forth.z80s:200    .data:0000046a dnegate_nfa
     solo_forth.z80s:3260   .text:00000ba5 dnegate_pfa
     solo_forth.z80s:3281   .text:00000bb9 nip_
     solo_forth.z80s:200    .data:00000472 nip_cfap
     solo_forth.z80s:200    .data:00000474 nip_lfa
     solo_forth.z80s:200    .data:00000476 nip_nfa
     solo_forth.z80s:3281   .text:00000bbb nip_pfa
     solo_forth.z80s:3288   .text:00000bc0 tuck_
     solo_forth.z80s:200    .data:0000047a tuck_cfap
     solo_forth.z80s:200    .data:0000047c tuck_lfa
     solo_forth.z80s:200    .data:0000047e tuck_nfa
     solo_forth.z80s:3288   .text:00000bc2 tuck_pfa
     solo_forth.z80s:3296   .text:00000bc8 over_
     solo_forth.z80s:200    .data:00000483 over_cfap
     solo_forth.z80s:200    .data:00000485 over_lfa
     solo_forth.z80s:200    .data:00000487 over_nfa
     solo_forth.z80s:3296   .text:00000bca over_pfa
     solo_forth.z80s:3304   .text:00000bd0 drop_
     solo_forth.z80s:200    .data:0000048c drop_cfap
     solo_forth.z80s:200    .data:0000048e drop_lfa
     solo_forth.z80s:200    .data:00000490 drop_nfa
     solo_forth.z80s:3304   .text:00000bd2 drop_pfa
     solo_forth.z80s:200    .data:00000495 swap_cfap
     solo_forth.z80s:200    .data:00000497 swap_lfa
     solo_forth.z80s:200    .data:00000499 swap_nfa
     solo_forth.z80s:3310   .text:00000bd7 swap_pfa
     solo_forth.z80s:200    .data:0000049e dup_cfap
     solo_forth.z80s:200    .data:000004a0 dup_lfa
     solo_forth.z80s:200    .data:000004a2 dup_nfa
     solo_forth.z80s:3317   .text:00000bde dup_pfa
     solo_forth.z80s:200    .data:000004a6 two_dup_cfap
     solo_forth.z80s:200    .data:000004a8 two_dup_lfa
     solo_forth.z80s:200    .data:000004aa two_dup_nfa
     solo_forth.z80s:3324   .text:00000be5 two_dup_pfa
     solo_forth.z80s:200    .data:000004af plus_store_cfap
     solo_forth.z80s:200    .data:000004b1 plus_store_lfa
     solo_forth.z80s:200    .data:000004b3 plus_store_nfa
     solo_forth.z80s:3333   .text:00000bee plus_store_pfa
     solo_forth.z80s:200    .data:000004b6 off_cfap
     solo_forth.z80s:200    .data:000004b8 off_lfa
     solo_forth.z80s:200    .data:000004ba off_nfa
     solo_forth.z80s:3347   .text:00000bfb off_pfa
     solo_forth.z80s:3356   .text:00000c03 on_
     solo_forth.z80s:200    .data:000004be on_cfap
     solo_forth.z80s:200    .data:000004c0 on_lfa
     solo_forth.z80s:200    .data:000004c2 on_nfa
     solo_forth.z80s:3356   .text:00000c05 on_pfa
     solo_forth.z80s:3371   .text:00000c0d toggle_
     solo_forth.z80s:200    .data:000004c5 toggle_cfap
     solo_forth.z80s:200    .data:000004c7 toggle_lfa
     solo_forth.z80s:200    .data:000004c9 toggle_nfa
     solo_forth.z80s:3371   .text:00000c0f toggle_pfa
     solo_forth.z80s:200    .data:000004d0 fetch_cfap
GAS LISTING solo_forth.z80s 			page 163


     solo_forth.z80s:200    .data:000004d2 fetch_lfa
     solo_forth.z80s:200    .data:000004d4 fetch_nfa
     solo_forth.z80s:3389   .text:00000c18 fetch_pfa
     solo_forth.z80s:3400   .text:00000c1f c_fetch_
     solo_forth.z80s:200    .data:000004d6 c_fetch_cfap
     solo_forth.z80s:200    .data:000004d8 c_fetch_lfa
     solo_forth.z80s:200    .data:000004da c_fetch_nfa
     solo_forth.z80s:3400   .text:00000c21 c_fetch_pfa
     solo_forth.z80s:3408   .text:00000c28 two_fetch_
     solo_forth.z80s:200    .data:000004dd two_fetch_cfap
     solo_forth.z80s:200    .data:000004df two_fetch_lfa
     solo_forth.z80s:200    .data:000004e1 two_fetch_nfa
     solo_forth.z80s:3427   .text:00000c37 two_store_
     solo_forth.z80s:200    .data:000004e4 two_store_cfap
     solo_forth.z80s:200    .data:000004e6 two_store_lfa
     solo_forth.z80s:200    .data:000004e8 two_store_nfa
     solo_forth.z80s:3427   .text:00000c39 two_store_pfa
     solo_forth.z80s:200    .data:000004eb store_cfap
     solo_forth.z80s:200    .data:000004ed store_lfa
     solo_forth.z80s:200    .data:000004ef store_nfa
     solo_forth.z80s:3447   .text:00000c47 store_pfa
     solo_forth.z80s:3450   .text:00000c48 store.into_hl_pointer
     solo_forth.z80s:3452   .text:00000c49 store.de_into_hl_pointer
     solo_forth.z80s:3459   .text:00000c4e c_store_
     solo_forth.z80s:200    .data:000004f1 c_store_cfap
     solo_forth.z80s:200    .data:000004f3 c_store_lfa
     solo_forth.z80s:200    .data:000004f5 c_store_nfa
     solo_forth.z80s:3459   .text:00000c50 c_store_pfa
     solo_forth.z80s:3467   .text:00000c55 colon_
     solo_forth.z80s:200    .data:000004f8 colon_cfap
     solo_forth.z80s:200    .data:000004fa colon_lfa
     solo_forth.z80s:200    .data:000004fc colon_nfa
     solo_forth.z80s:3467   .text:00000c57 colon_pfa
     solo_forth.z80s:4396   .text:00000f2e question_exec_
     solo_forth.z80s:4365   .text:00000eff store_csp_
     solo_forth.z80s:5410   .text:000013c3 header_
     solo_forth.z80s:4463   .text:00000f94 right_bracket_
     solo_forth.z80s:4506   .text:00000fc5 paren_semicolon_code_
     solo_forth.z80s:3483   .text:00000c6e do_colon_end
     solo_forth.z80s:3487   .text:00000c70 noname_
     solo_forth.z80s:200    .data:000004fe noname_cfap
     solo_forth.z80s:200    .data:00000500 noname_lfa
     solo_forth.z80s:200    .data:00000502 noname_nfa
     solo_forth.z80s:3487   .text:00000c72 noname_pfa
     solo_forth.z80s:3502   .text:00000c84 semicolon_
     solo_forth.z80s:200    .data:0000050a semicolon_cfap
     solo_forth.z80s:200    .data:0000050c semicolon_lfa
     solo_forth.z80s:200    .data:0000050e semicolon_nfa
     solo_forth.z80s:3502   .text:00000c86 semicolon_pfa
     solo_forth.z80s:4457   .text:00000f8c left_bracket_
     solo_forth.z80s:200    .data:00000510 noop_cfap
     solo_forth.z80s:200    .data:00000512 noop_lfa
     solo_forth.z80s:200    .data:00000514 noop_nfa
     solo_forth.z80s:3522   .text:00000c94 constant_
     solo_forth.z80s:200    .data:00000519 constant_cfap
     solo_forth.z80s:200    .data:0000051b constant_lfa
     solo_forth.z80s:200    .data:0000051d constant_nfa
GAS LISTING solo_forth.z80s 			page 164


     solo_forth.z80s:3522   .text:00000c96 constant_pfa
     solo_forth.z80s:3532   .text:00000ca1 variable_
     solo_forth.z80s:200    .data:00000526 variable_cfap
     solo_forth.z80s:200    .data:00000528 variable_lfa
     solo_forth.z80s:200    .data:0000052a variable_nfa
     solo_forth.z80s:3532   .text:00000ca3 variable_pfa
     solo_forth.z80s:3890   .text:00000d7e cell_
     solo_forth.z80s:3925   .text:00000d94 allot_
     solo_forth.z80s:3556   .text:00000cab user_
     solo_forth.z80s:200    .data:00000533 user_cfap
     solo_forth.z80s:200    .data:00000535 user_lfa
     solo_forth.z80s:200    .data:00000537 user_nfa
     solo_forth.z80s:3556   .text:00000cad user_pfa
     solo_forth.z80s:3563   .text:00000cb1 do_user
     solo_forth.z80s:3575   .text:00000cbd msg_scr_
     solo_forth.z80s:200    .data:0000053c msg_scr_cfap
     solo_forth.z80s:200    .data:0000053e msg_scr_lfa
     solo_forth.z80s:200    .data:00000540 msg_scr_nfa
     solo_forth.z80s:3575   .text:00000cbf msg_scr_pfa
     solo_forth.z80s:200    .data:00000548 zero_cfap
     solo_forth.z80s:200    .data:0000054a zero_lfa
     solo_forth.z80s:200    .data:0000054c zero_nfa
     solo_forth.z80s:3590   .text:00000cc3 zero_pfa
     solo_forth.z80s:200    .data:0000054e one_cfap
     solo_forth.z80s:200    .data:00000550 one_lfa
     solo_forth.z80s:200    .data:00000552 one_nfa
     solo_forth.z80s:3595   .text:00000cc7 one_pfa
     solo_forth.z80s:200    .data:00000554 two_cfap
     solo_forth.z80s:200    .data:00000556 two_lfa
     solo_forth.z80s:200    .data:00000558 two_nfa
     solo_forth.z80s:3600   .text:00000ccb two_pfa
     solo_forth.z80s:3605   .text:00000ccd false_
     solo_forth.z80s:200    .data:0000055a false_cfap
     solo_forth.z80s:200    .data:0000055c false_lfa
     solo_forth.z80s:200    .data:0000055e false_nfa
     solo_forth.z80s:3617   .text:00000cd5 true_
     solo_forth.z80s:200    .data:00000564 true_cfap
     solo_forth.z80s:200    .data:00000566 true_lfa
     solo_forth.z80s:200    .data:00000568 true_nfa
     solo_forth.z80s:3629   .text:00000cdd b_l_
     solo_forth.z80s:200    .data:0000056d b_l_cfap
     solo_forth.z80s:200    .data:0000056f b_l_lfa
     solo_forth.z80s:200    .data:00000571 b_l_nfa
     solo_forth.z80s:3629   .text:00000cdf b_l_pfa
     solo_forth.z80s:3640   .text:00000ce1 c_slash_l_
     solo_forth.z80s:200    .data:00000574 c_slash_l_cfap
     solo_forth.z80s:200    .data:00000576 c_slash_l_lfa
     solo_forth.z80s:200    .data:00000578 c_slash_l_nfa
     solo_forth.z80s:3640   .text:00000ce3 c_slash_l_pfa
     solo_forth.z80s:3645   .text:00000ce5 l_slash_scr_
     solo_forth.z80s:200    .data:0000057c l_slash_scr_cfap
     solo_forth.z80s:200    .data:0000057e l_slash_scr_lfa
     solo_forth.z80s:200    .data:00000580 l_slash_scr_nfa
     solo_forth.z80s:3645   .text:00000ce7 l_slash_scr_pfa
     solo_forth.z80s:3650   .text:00000ce9 disk_buffer_
     solo_forth.z80s:200    .data:00000586 disk_buffer_cfap
     solo_forth.z80s:200    .data:00000588 disk_buffer_lfa
GAS LISTING solo_forth.z80s 			page 165


     solo_forth.z80s:200    .data:0000058a disk_buffer_nfa
     solo_forth.z80s:3650   .text:00000ceb disk_buffer_pfa
     solo_forth.z80s:3655   .text:00000ced b_slash_buf_
     solo_forth.z80s:200    .data:00000596 b_slash_buf_cfap
     solo_forth.z80s:200    .data:00000598 b_slash_buf_lfa
     solo_forth.z80s:200    .data:0000059a b_slash_buf_nfa
     solo_forth.z80s:3655   .text:00000cef b_slash_buf_pfa
     solo_forth.z80s:3660   .text:00000cf1 b_slash_scr_
     solo_forth.z80s:200    .data:000005a0 b_slash_scr_cfap
     solo_forth.z80s:200    .data:000005a2 b_slash_scr_lfa
     solo_forth.z80s:200    .data:000005a4 b_slash_scr_nfa
     solo_forth.z80s:3660   .text:00000cf3 b_slash_scr_pfa
     solo_forth.z80s:3665   .text:00000cf5 scr_slash_disk_
     solo_forth.z80s:200    .data:000005aa scr_slash_disk_cfap
     solo_forth.z80s:200    .data:000005ac scr_slash_disk_lfa
     solo_forth.z80s:200    .data:000005ae scr_slash_disk_nfa
     solo_forth.z80s:3665   .text:00000cf7 scr_slash_disk_pfa
     solo_forth.z80s:3670   .text:00000cf9 hash_vocs_
     solo_forth.z80s:200    .data:000005b7 hash_vocs_cfap
     solo_forth.z80s:200    .data:000005b9 hash_vocs_lfa
     solo_forth.z80s:200    .data:000005bb hash_vocs_nfa
     solo_forth.z80s:3670   .text:00000cfb hash_vocs_pfa
     solo_forth.z80s:3675   .text:00000cfd plus_origin_
     solo_forth.z80s:200    .data:000005c1 plus_origin_cfap
     solo_forth.z80s:200    .data:000005c3 plus_origin_lfa
     solo_forth.z80s:200    .data:000005c5 plus_origin_nfa
     solo_forth.z80s:3675   .text:00000cff plus_origin_pfa
     solo_forth.z80s:3692   .text:00000d07 sp0_
     solo_forth.z80s:200    .data:000005cd sp0_cfap
     solo_forth.z80s:200    .data:000005cf sp0_lfa
     solo_forth.z80s:200    .data:000005d1 sp0_nfa
     solo_forth.z80s:3692   .text:00000d09 sp0_pfa
     solo_forth.z80s:3697   .text:00000d0a rp0_
     solo_forth.z80s:200    .data:000005d5 rp0_cfap
     solo_forth.z80s:200    .data:000005d7 rp0_lfa
     solo_forth.z80s:200    .data:000005d9 rp0_nfa
     solo_forth.z80s:3697   .text:00000d0c rp0_pfa
     solo_forth.z80s:3702   .text:00000d0d width_
     solo_forth.z80s:200    .data:000005dd width_cfap
     solo_forth.z80s:200    .data:000005df width_lfa
     solo_forth.z80s:200    .data:000005e1 width_nfa
     solo_forth.z80s:3702   .text:00000d0f width_pfa
     solo_forth.z80s:3709   .text:00000d10 warning_
     solo_forth.z80s:200    .data:000005e7 warning_cfap
     solo_forth.z80s:200    .data:000005e9 warning_lfa
     solo_forth.z80s:200    .data:000005eb warning_nfa
     solo_forth.z80s:3709   .text:00000d12 warning_pfa
     solo_forth.z80s:3714   .text:00000d13 dp_
     solo_forth.z80s:200    .data:000005f3 dp_cfap
     solo_forth.z80s:200    .data:000005f5 dp_lfa
     solo_forth.z80s:200    .data:000005f7 dp_nfa
     solo_forth.z80s:3714   .text:00000d15 dp_pfa
     solo_forth.z80s:3722   .text:00000d16 voc_link_
     solo_forth.z80s:200    .data:000005fa voc_link_cfap
     solo_forth.z80s:200    .data:000005fc voc_link_lfa
     solo_forth.z80s:200    .data:000005fe voc_link_nfa
     solo_forth.z80s:3722   .text:00000d18 voc_link_pfa
GAS LISTING solo_forth.z80s 			page 166


     solo_forth.z80s:3727   .text:00000d1a blk_
     solo_forth.z80s:200    .data:00000607 blk_cfap
     solo_forth.z80s:200    .data:00000609 blk_lfa
     solo_forth.z80s:200    .data:0000060b blk_nfa
     solo_forth.z80s:3727   .text:00000d1c blk_pfa
     solo_forth.z80s:3734   .text:00000d1d to_in_
     solo_forth.z80s:200    .data:0000060f to_in_cfap
     solo_forth.z80s:200    .data:00000611 to_in_lfa
     solo_forth.z80s:200    .data:00000613 to_in_nfa
     solo_forth.z80s:3734   .text:00000d1f to_in_pfa
     solo_forth.z80s:200    .data:00000617 out_cfap
     solo_forth.z80s:200    .data:00000619 out_lfa
     solo_forth.z80s:200    .data:0000061b out_nfa
     solo_forth.z80s:3741   .text:00000d22 out_pfa
     solo_forth.z80s:3748   .text:00000d23 scr_
     solo_forth.z80s:200    .data:0000061f scr_cfap
     solo_forth.z80s:200    .data:00000621 scr_lfa
     solo_forth.z80s:200    .data:00000623 scr_nfa
     solo_forth.z80s:3748   .text:00000d25 scr_pfa
     solo_forth.z80s:200    .data:00000629 context_cfap
     solo_forth.z80s:200    .data:0000062b context_lfa
     solo_forth.z80s:200    .data:0000062d context_nfa
     solo_forth.z80s:3753   .text:00000d28 context_pfa
     solo_forth.z80s:3758   .text:00000d29 current_
     solo_forth.z80s:200    .data:00000635 current_cfap
     solo_forth.z80s:200    .data:00000637 current_lfa
     solo_forth.z80s:200    .data:00000639 current_nfa
     solo_forth.z80s:3758   .text:00000d2b current_pfa
     solo_forth.z80s:3763   .text:00000d2c state_
     solo_forth.z80s:200    .data:00000641 state_cfap
     solo_forth.z80s:200    .data:00000643 state_lfa
     solo_forth.z80s:200    .data:00000645 state_nfa
     solo_forth.z80s:3763   .text:00000d2e state_pfa
     solo_forth.z80s:200    .data:0000064b base_cfap
     solo_forth.z80s:200    .data:0000064d base_lfa
     solo_forth.z80s:200    .data:0000064f base_nfa
     solo_forth.z80s:3768   .text:00000d31 base_pfa
     solo_forth.z80s:3773   .text:00000d32 dpl_
     solo_forth.z80s:200    .data:00000654 dpl_cfap
     solo_forth.z80s:200    .data:00000656 dpl_lfa
     solo_forth.z80s:200    .data:00000658 dpl_nfa
     solo_forth.z80s:3773   .text:00000d34 dpl_pfa
     solo_forth.z80s:3778   .text:00000d35 fld_
     solo_forth.z80s:200    .data:0000065c fld_cfap
     solo_forth.z80s:200    .data:0000065e fld_lfa
     solo_forth.z80s:200    .data:00000660 fld_nfa
     solo_forth.z80s:3778   .text:00000d37 fld_pfa
     solo_forth.z80s:3783   .text:00000d38 csp_
     solo_forth.z80s:200    .data:00000664 csp_cfap
     solo_forth.z80s:200    .data:00000666 csp_lfa
     solo_forth.z80s:200    .data:00000668 csp_nfa
     solo_forth.z80s:3783   .text:00000d3a csp_pfa
     solo_forth.z80s:3788   .text:00000d3b r_hash_
     solo_forth.z80s:200    .data:0000066c r_hash_cfap
     solo_forth.z80s:200    .data:0000066e r_hash_lfa
     solo_forth.z80s:200    .data:00000670 r_hash_nfa
     solo_forth.z80s:3788   .text:00000d3d r_hash_pfa
GAS LISTING solo_forth.z80s 			page 167


     solo_forth.z80s:3794   .text:00000d3e hld_
     solo_forth.z80s:200    .data:00000673 hld_cfap
     solo_forth.z80s:200    .data:00000675 hld_lfa
     solo_forth.z80s:200    .data:00000677 hld_nfa
     solo_forth.z80s:3794   .text:00000d40 hld_pfa
     solo_forth.z80s:3799   .text:00000d41 tib_
     solo_forth.z80s:200    .data:0000067b tib_cfap
     solo_forth.z80s:200    .data:0000067d tib_lfa
     solo_forth.z80s:200    .data:0000067f tib_nfa
     solo_forth.z80s:3799   .text:00000d43 tib_pfa
     solo_forth.z80s:3812   .text:00000d45 number_tib_
     solo_forth.z80s:200    .data:00000683 number_tib_cfap
     solo_forth.z80s:200    .data:00000685 number_tib_lfa
     solo_forth.z80s:200    .data:00000687 number_tib_nfa
     solo_forth.z80s:3812   .text:00000d47 number_tib_pfa
     solo_forth.z80s:3817   .text:00000d49 recurse_
     solo_forth.z80s:200    .data:0000068c recurse_cfap
     solo_forth.z80s:200    .data:0000068e recurse_lfa
     solo_forth.z80s:200    .data:00000690 recurse_nfa
     solo_forth.z80s:3817   .text:00000d4b recurse_pfa
     solo_forth.z80s:4078   .text:00000e42 latest_
     solo_forth.z80s:4341   .text:00000edf nfa_to_cfa_
     solo_forth.z80s:3947   .text:00000dba compile_comma_
     solo_forth.z80s:200    .data:00000698 one_plus_cfap
     solo_forth.z80s:200    .data:0000069a one_plus_lfa
     solo_forth.z80s:200    .data:0000069c one_plus_nfa
     solo_forth.z80s:3829   .text:00000d55 one_plus_pfa
     solo_forth.z80s:3836   .text:00000d5a two_plus_
     solo_forth.z80s:200    .data:0000069f two_plus_cfap
     solo_forth.z80s:200    .data:000006a1 two_plus_lfa
     solo_forth.z80s:200    .data:000006a3 two_plus_nfa
     solo_forth.z80s:3836   .text:00000d5c two_plus_pfa
     solo_forth.z80s:3844   .text:00000d62 cell_minus_
     solo_forth.z80s:200    .data:000006a6 cell_minus_cfap
     solo_forth.z80s:200    .data:000006a8 cell_minus_lfa
     solo_forth.z80s:200    .data:000006aa cell_minus_nfa
     solo_forth.z80s:3857   .text:00000d6f two_minus_pfa
     solo_forth.z80s:200    .data:000006b0 cell_plus_cfap
     solo_forth.z80s:200    .data:000006b2 cell_plus_lfa
     solo_forth.z80s:200    .data:000006b4 cell_plus_nfa
     solo_forth.z80s:3850   .text:00000d66 one_minus_
     solo_forth.z80s:200    .data:000006ba one_minus_cfap
     solo_forth.z80s:200    .data:000006bc one_minus_lfa
     solo_forth.z80s:200    .data:000006be one_minus_nfa
     solo_forth.z80s:3850   .text:00000d68 one_minus_pfa
     solo_forth.z80s:3857   .text:00000d6d two_minus_
     solo_forth.z80s:200    .data:000006c1 two_minus_cfap
     solo_forth.z80s:200    .data:000006c3 two_minus_lfa
     solo_forth.z80s:200    .data:000006c5 two_minus_nfa
     solo_forth.z80s:3865   .text:00000d75 two_star_
     solo_forth.z80s:200    .data:000006c8 two_star_cfap
     solo_forth.z80s:200    .data:000006ca two_star_lfa
     solo_forth.z80s:200    .data:000006cc two_star_nfa
     solo_forth.z80s:3865   .text:00000d77 two_star_pfa
     solo_forth.z80s:3887   .text:00000d7c cells_
     solo_forth.z80s:200    .data:000006cf cells_cfap
     solo_forth.z80s:200    .data:000006d1 cells_lfa
GAS LISTING solo_forth.z80s 			page 168


     solo_forth.z80s:200    .data:000006d3 cells_nfa
     solo_forth.z80s:200    .data:000006d9 cell_cfap
     solo_forth.z80s:200    .data:000006db cell_lfa
     solo_forth.z80s:200    .data:000006dd cell_nfa
     solo_forth.z80s:3890   .text:00000d80 cell_pfa
     solo_forth.z80s:3895   .text:00000d82 two_slash_
     solo_forth.z80s:200    .data:000006e2 two_slash_cfap
     solo_forth.z80s:200    .data:000006e4 two_slash_lfa
     solo_forth.z80s:200    .data:000006e6 two_slash_nfa
     solo_forth.z80s:3895   .text:00000d84 two_slash_pfa
     solo_forth.z80s:200    .data:000006e9 here_cfap
     solo_forth.z80s:200    .data:000006eb here_lfa
     solo_forth.z80s:200    .data:000006ed here_nfa
     solo_forth.z80s:3919   .text:00000d8e here_pfa
     solo_forth.z80s:200    .data:000006f2 allot_cfap
     solo_forth.z80s:200    .data:000006f4 allot_lfa
     solo_forth.z80s:200    .data:000006f6 allot_nfa
     solo_forth.z80s:3925   .text:00000d96 allot_pfa
     solo_forth.z80s:3931   .text:00000d9c s_comma_
     solo_forth.z80s:200    .data:000006fc s_comma_cfap
     solo_forth.z80s:200    .data:000006fe s_comma_lfa
     solo_forth.z80s:200    .data:00000700 s_comma_nfa
     solo_forth.z80s:3931   .text:00000d9e s_comma_pfa
     solo_forth.z80s:200    .data:00000703 comma_cfap
     solo_forth.z80s:200    .data:00000705 comma_lfa
     solo_forth.z80s:200    .data:00000707 comma_nfa
     solo_forth.z80s:3941   .text:00000db0 comma_pfa
     solo_forth.z80s:200    .data:00000709 compile_comma_cfap
     solo_forth.z80s:200    .data:0000070b compile_comma_lfa
     solo_forth.z80s:200    .data:0000070d compile_comma_nfa
     solo_forth.z80s:3947   .text:00000dbc compile_comma_pfa
     solo_forth.z80s:200    .data:00000716 c_comma_cfap
     solo_forth.z80s:200    .data:00000718 c_comma_lfa
     solo_forth.z80s:200    .data:0000071a c_comma_nfa
     solo_forth.z80s:3959   .text:00000dc4 c_comma_pfa
     solo_forth.z80s:3965   .text:00000dce minus_
     solo_forth.z80s:200    .data:0000071d minus_cfap
     solo_forth.z80s:200    .data:0000071f minus_lfa
     solo_forth.z80s:200    .data:00000721 minus_nfa
     solo_forth.z80s:3965   .text:00000dd0 minus_pfa
     solo_forth.z80s:3974   .text:00000dd8 not_equals_
     solo_forth.z80s:200    .data:00000723 not_equals_cfap
     solo_forth.z80s:200    .data:00000725 not_equals_lfa
     solo_forth.z80s:200    .data:00000727 not_equals_nfa
     solo_forth.z80s:3974   .text:00000dda not_equals_pfa
     solo_forth.z80s:3979   .text:00000ddf false_if_z
     solo_forth.z80s:3984   .text:00000de5 equals_
     solo_forth.z80s:200    .data:0000072a equals_cfap
     solo_forth.z80s:200    .data:0000072c equals_lfa
     solo_forth.z80s:200    .data:0000072e equals_nfa
     solo_forth.z80s:3984   .text:00000de7 equals_pfa
     solo_forth.z80s:3989   .text:00000dec true_if_z
     solo_forth.z80s:3994   .text:00000df2 less_than_
     solo_forth.z80s:200    .data:00000730 less_than_cfap
     solo_forth.z80s:200    .data:00000732 less_than_lfa
     solo_forth.z80s:200    .data:00000734 less_than_nfa
     solo_forth.z80s:3994   .text:00000df4 less_than_pfa
GAS LISTING solo_forth.z80s 			page 169


     solo_forth.z80s:4008   .text:00000dff u_greater_than_
     solo_forth.z80s:200    .data:00000736 u_greater_than_cfap
     solo_forth.z80s:200    .data:00000738 u_greater_than_lfa
     solo_forth.z80s:200    .data:0000073a u_greater_than_nfa
     solo_forth.z80s:4008   .text:00000e01 u_greater_than_pfa
     solo_forth.z80s:4011   .text:00000e02 u_greater_than.hl
     solo_forth.z80s:4020   .text:00000e0a u_less_than.de_hl
     solo_forth.z80s:4016   .text:00000e06 u_less_than_
     solo_forth.z80s:200    .data:0000073d u_less_than_cfap
     solo_forth.z80s:200    .data:0000073f u_less_than_lfa
     solo_forth.z80s:200    .data:00000741 u_less_than_nfa
     solo_forth.z80s:4016   .text:00000e08 u_less_than_pfa
     solo_forth.z80s:200    .data:00000744 greater_than_cfap
     solo_forth.z80s:200    .data:00000746 greater_than_lfa
     solo_forth.z80s:200    .data:00000748 greater_than_nfa
     solo_forth.z80s:4030   .text:00000e15 greater_than_pfa
     solo_forth.z80s:4037   .text:00000e1a rot_
     solo_forth.z80s:200    .data:0000074a rot_cfap
     solo_forth.z80s:200    .data:0000074c rot_lfa
     solo_forth.z80s:200    .data:0000074e rot_nfa
     solo_forth.z80s:4037   .text:00000e1c rot_pfa
     solo_forth.z80s:4045   .text:00000e22 space_
     solo_forth.z80s:200    .data:00000752 space_cfap
     solo_forth.z80s:200    .data:00000754 space_lfa
     solo_forth.z80s:200    .data:00000756 space_nfa
     solo_forth.z80s:4045   .text:00000e24 space_pfa
     solo_forth.z80s:4051   .text:00000e2a question_dup_
     solo_forth.z80s:200    .data:0000075c question_dup_cfap
     solo_forth.z80s:200    .data:0000075e question_dup_lfa
     solo_forth.z80s:200    .data:00000760 question_dup_nfa
     solo_forth.z80s:4051   .text:00000e2c question_dup_pfa
     solo_forth.z80s:4056   .text:00000e34 question_dup.end
     solo_forth.z80s:4060   .text:00000e36 lfa_to_nfa_
     solo_forth.z80s:200    .data:00000765 lfa_to_nfa_cfap
     solo_forth.z80s:200    .data:00000767 lfa_to_nfa_lfa
     solo_forth.z80s:200    .data:00000769 lfa_to_nfa_nfa
     solo_forth.z80s:4063   .text:00000e38 trail_
     solo_forth.z80s:200    .data:00000771 trail_cfap
     solo_forth.z80s:200    .data:00000773 trail_lfa
     solo_forth.z80s:200    .data:00000775 trail_nfa
     solo_forth.z80s:4063   .text:00000e3a trail_pfa
     solo_forth.z80s:200    .data:0000077b latest_cfap
     solo_forth.z80s:200    .data:0000077d latest_lfa
     solo_forth.z80s:200    .data:0000077f latest_nfa
     solo_forth.z80s:4078   .text:00000e44 latest_pfa
     solo_forth.z80s:4093   .text:00000e4c pfa_to_lfa_
     solo_forth.z80s:200    .data:00000786 pfa_to_lfa_cfap
     solo_forth.z80s:200    .data:00000788 pfa_to_lfa_lfa
     solo_forth.z80s:200    .data:0000078a pfa_to_lfa_nfa
     solo_forth.z80s:4093   .text:00000e4e pfa_to_lfa_pfa
     solo_forth.z80s:4098   .text:00000e52 pfa_to_cfa_
     solo_forth.z80s:4122   .text:00000e5e cfa_to_nfa_
     solo_forth.z80s:200    .data:00000792 pfa_to_cfa_cfap
     solo_forth.z80s:200    .data:00000794 pfa_to_cfa_lfa
     solo_forth.z80s:200    .data:00000796 pfa_to_cfa_nfa
     solo_forth.z80s:4101   .text:00000e54 cfa_to_pfa_
     solo_forth.z80s:200    .data:0000079e cfa_to_pfa_cfap
GAS LISTING solo_forth.z80s 			page 170


     solo_forth.z80s:200    .data:000007a0 cfa_to_pfa_lfa
     solo_forth.z80s:200    .data:000007a2 cfa_to_pfa_nfa
     solo_forth.z80s:4104   .text:00000e56 pfa_to_nfa_
     solo_forth.z80s:200    .data:000007aa pfa_to_nfa_cfap
     solo_forth.z80s:200    .data:000007ac pfa_to_nfa_lfa
     solo_forth.z80s:200    .data:000007ae pfa_to_nfa_nfa
     solo_forth.z80s:4104   .text:00000e58 pfa_to_nfa_pfa
     solo_forth.z80s:200    .data:000007b6 cfa_to_nfa_cfap
     solo_forth.z80s:200    .data:000007b8 cfa_to_nfa_lfa
     solo_forth.z80s:200    .data:000007ba cfa_to_nfa_nfa
     solo_forth.z80s:4122   .text:00000e60 cfa_to_nfa_pfa
     solo_forth.z80s:4131   .text:00000e6c cfa_to_nfa.begin_0
     solo_forth.z80s:4134   .text:00000e6d cfa_to_nfa.begin_1
     solo_forth.z80s:4163   .text:00000e8b cfap_to_lfa_
     solo_forth.z80s:4122   .data:000007c2 cfap_to_lfa_cfap
     solo_forth.z80s:4122   .data:000007c4 cfap_to_lfa_lfa
     solo_forth.z80s:4122   .data:000007c6 cfap_to_lfa_nfa
     solo_forth.z80s:4167   .text:00000e8d nfa_to_lfa_
     solo_forth.z80s:4122   .data:000007cf nfa_to_lfa_cfap
     solo_forth.z80s:4122   .data:000007d1 nfa_to_lfa_lfa
     solo_forth.z80s:4122   .data:000007d3 nfa_to_lfa_nfa
     solo_forth.z80s:4170   .text:00000e8f c_store_bank_
     solo_forth.z80s:4122   .data:000007db c_store_bank_cfap
     solo_forth.z80s:4122   .data:000007dd c_store_bank_lfa
     solo_forth.z80s:4122   .data:000007df c_store_bank_nfa
     solo_forth.z80s:4170   .text:00000e91 c_store_bank_pfa
     solo_forth.z80s:4197   .text:00000e9b store_bank_
     solo_forth.z80s:4122   .data:000007e6 store_bank_cfap
     solo_forth.z80s:4122   .data:000007e8 store_bank_lfa
     solo_forth.z80s:4122   .data:000007ea store_bank_nfa
     solo_forth.z80s:4197   .text:00000e9d store_bank_pfa
     solo_forth.z80s:4213   .text:00000ea7 c_fetch_bank_
     solo_forth.z80s:4122   .data:000007f0 c_fetch_bank_cfap
     solo_forth.z80s:4122   .data:000007f2 c_fetch_bank_lfa
     solo_forth.z80s:4122   .data:000007f4 c_fetch_bank_nfa
     solo_forth.z80s:4213   .text:00000ea9 c_fetch_bank_pfa
     solo_forth.z80s:4240   .text:00000eb3 fetch_bank_
     solo_forth.z80s:4122   .data:000007fb fetch_bank_cfap
     solo_forth.z80s:4122   .data:000007fd fetch_bank_lfa
     solo_forth.z80s:4122   .data:000007ff fetch_bank_nfa
     solo_forth.z80s:4240   .text:00000eb5 fetch_bank_pfa
     solo_forth.z80s:4269   .text:00000ebf c_fetch_n_
     solo_forth.z80s:4122   .data:00000805 c_fetch_n_cfap
     solo_forth.z80s:4122   .data:00000807 c_fetch_n_lfa
     solo_forth.z80s:4122   .data:00000809 c_fetch_n_nfa
     solo_forth.z80s:4269   .text:00000ec1 c_fetch_n_pfa
     solo_forth.z80s:4289   .text:00000ec7 fetch_n_
     solo_forth.z80s:4122   .data:0000080d fetch_n_cfap
     solo_forth.z80s:4122   .data:0000080f fetch_n_lfa
     solo_forth.z80s:4122   .data:00000811 fetch_n_nfa
     solo_forth.z80s:4289   .text:00000ec9 fetch_n_pfa
     solo_forth.z80s:4309   .text:00000ecf c_store_n_
     solo_forth.z80s:4122   .data:00000814 c_store_n_cfap
     solo_forth.z80s:4122   .data:00000816 c_store_n_lfa
     solo_forth.z80s:4309   .data:00000818 c_store_n_nfa
     solo_forth.z80s:4309   .text:00000ed1 c_store_n_pfa
     solo_forth.z80s:4325   .text:00000ed7 store_n_
GAS LISTING solo_forth.z80s 			page 171


     solo_forth.z80s:4309   .data:0000081c store_n_cfap
     solo_forth.z80s:4309   .data:0000081e store_n_lfa
     solo_forth.z80s:4309   .data:00000820 store_n_nfa
     solo_forth.z80s:4325   .text:00000ed9 store_n_pfa
     solo_forth.z80s:4309   .data:00000823 nfa_to_cfa_cfap
     solo_forth.z80s:4309   .data:00000825 nfa_to_cfa_lfa
     solo_forth.z80s:4309   .data:00000827 nfa_to_cfa_nfa
     solo_forth.z80s:4341   .text:00000ee1 nfa_to_cfa_pfa
     solo_forth.z80s:4354   .text:00000eea nfa_to_string_
     solo_forth.z80s:4309   .data:0000082f nfa_to_string_cfap
     solo_forth.z80s:4309   .data:00000831 nfa_to_string_lfa
     solo_forth.z80s:4309   .data:00000833 nfa_to_string_nfa
     solo_forth.z80s:4354   .text:00000eec nfa_to_string_pfa
     solo_forth.z80s:4309   .data:0000083e store_csp_cfap
     solo_forth.z80s:4309   .data:00000840 store_csp_lfa
     solo_forth.z80s:4309   .data:00000842 store_csp_nfa
     solo_forth.z80s:4365   .text:00000f01 store_csp_pfa
     solo_forth.z80s:4371   .text:00000f09 question_error_
     solo_forth.z80s:4309   .data:00000847 question_error_cfap
     solo_forth.z80s:4309   .data:00000849 question_error_lfa
     solo_forth.z80s:4309   .data:0000084b question_error_nfa
     solo_forth.z80s:4371   .text:00000f0b question_error_pfa
     solo_forth.z80s:4378   .text:00000f15 question_error.no_error
     solo_forth.z80s:5383   .text:0000137c error_
     solo_forth.z80s:4309   .data:00000852 comp_question_cfap
     solo_forth.z80s:4309   .data:00000854 comp_question_lfa
     solo_forth.z80s:4309   .data:00000856 comp_question_nfa
     solo_forth.z80s:4383   .text:00000f1b comp_question_pfa
     solo_forth.z80s:4309   .data:0000085c question_comp_cfap
     solo_forth.z80s:4309   .data:0000085e question_comp_lfa
     solo_forth.z80s:4309   .data:00000860 question_comp_nfa
     solo_forth.z80s:4389   .text:00000f23 question_comp_pfa
     solo_forth.z80s:4309   .data:00000866 question_exec_cfap
     solo_forth.z80s:4309   .data:00000868 question_exec_lfa
     solo_forth.z80s:4309   .data:0000086a question_exec_nfa
     solo_forth.z80s:4396   .text:00000f30 question_exec_pfa
     solo_forth.z80s:4309   .data:00000870 question_pairs_cfap
     solo_forth.z80s:4309   .data:00000872 question_pairs_lfa
     solo_forth.z80s:4405   .data:00000874 question_pairs_nfa
     solo_forth.z80s:4405   .text:00000f3b question_pairs_pfa
     solo_forth.z80s:4405   .data:0000087b question_csp_cfap
     solo_forth.z80s:4405   .data:0000087d question_csp_lfa
     solo_forth.z80s:4405   .data:0000087f question_csp_nfa
     solo_forth.z80s:4413   .text:00000f46 question_csp_pfa
     solo_forth.z80s:4420   .text:00000f55 question_loading_
     solo_forth.z80s:4405   .data:00000884 question_loading_cfap
     solo_forth.z80s:4405   .data:00000886 question_loading_lfa
     solo_forth.z80s:4405   .data:00000888 question_loading_nfa
     solo_forth.z80s:4420   .text:00000f57 question_loading_pfa
     solo_forth.z80s:4405   .data:00000891 compile_cfap
     solo_forth.z80s:4405   .data:00000893 compile_lfa
     solo_forth.z80s:4405   .data:00000895 compile_nfa
     solo_forth.z80s:4427   .text:00000f66 compile_pfa
     solo_forth.z80s:4434   .text:00000f76 postpone_
     solo_forth.z80s:4405   .data:0000089d postpone_cfap
     solo_forth.z80s:4405   .data:0000089f postpone_lfa
     solo_forth.z80s:4405   .data:000008a1 postpone_nfa
GAS LISTING solo_forth.z80s 			page 172


     solo_forth.z80s:4434   .text:00000f78 postpone_pfa
     solo_forth.z80s:6881   .text:00001963 defined_
     solo_forth.z80s:6914   .text:00001973 question_defined_
     solo_forth.z80s:4452   .text:00000f88 postpone.end
     solo_forth.z80s:4405   .data:000008aa left_bracket_cfap
     solo_forth.z80s:4405   .data:000008ac left_bracket_lfa
     solo_forth.z80s:4405   .data:000008ae left_bracket_nfa
     solo_forth.z80s:4457   .text:00000f8e left_bracket_pfa
     solo_forth.z80s:4405   .data:000008b0 right_bracket_cfap
     solo_forth.z80s:4405   .data:000008b2 right_bracket_lfa
     solo_forth.z80s:4405   .data:000008b4 right_bracket_nfa
     solo_forth.z80s:4463   .text:00000f96 right_bracket_pfa
     solo_forth.z80s:4405   .data:000008b6 smudge_cfap
     solo_forth.z80s:4405   .data:000008b8 smudge_lfa
     solo_forth.z80s:4405   .data:000008ba smudge_nfa
     solo_forth.z80s:4469   .text:00000f9e smudge_pfa
     solo_forth.z80s:4405   .data:000008c1 hex_cfap
     solo_forth.z80s:4405   .data:000008c3 hex_lfa
     solo_forth.z80s:4405   .data:000008c5 hex_nfa
     solo_forth.z80s:4492   .text:00000fb1 hex_pfa
     solo_forth.z80s:4499   .text:00000fba decimal_
     solo_forth.z80s:4405   .data:000008c9 decimal_cfap
     solo_forth.z80s:4405   .data:000008cb decimal_lfa
     solo_forth.z80s:4405   .data:000008cd decimal_nfa
     solo_forth.z80s:4499   .text:00000fbc decimal_pfa
     solo_forth.z80s:4499   .data:000008d5 paren_semicolon_code_cfap
     solo_forth.z80s:4499   .data:000008d7 paren_semicolon_code_lfa
     solo_forth.z80s:4499   .data:000008d9 paren_semicolon_code_nfa
     solo_forth.z80s:4506   .text:00000fc7 paren_semicolon_code_pfa
     solo_forth.z80s:4530   .text:00000fd1 semicolon_code_
     solo_forth.z80s:4499   .data:000008e1 semicolon_code_cfap
     solo_forth.z80s:4499   .data:000008e3 semicolon_code_lfa
     solo_forth.z80s:4499   .data:000008e5 semicolon_code_nfa
     solo_forth.z80s:4530   .text:00000fd3 semicolon_code_pfa
     solo_forth.z80s:4550   .text:00000fe1 does_
     solo_forth.z80s:4499   .data:000008eb does_cfap
     solo_forth.z80s:4499   .data:000008ed does_lfa
     solo_forth.z80s:4499   .data:000008ef does_nfa
     solo_forth.z80s:4550   .text:00000fe3 does_pfa
     solo_forth.z80s:4558   .text:00000ff4 do_does
     solo_forth.z80s:4499   .data:000008f5 count_cfap
     solo_forth.z80s:4499   .data:000008f7 count_lfa
     solo_forth.z80s:4499   .data:000008f9 count_nfa
     solo_forth.z80s:4576   .text:00001005 count_pfa
     solo_forth.z80s:4587   .text:0000100c bounds_
     solo_forth.z80s:4499   .data:000008ff bounds_cfap
     solo_forth.z80s:4499   .data:00000901 bounds_lfa
     solo_forth.z80s:4499   .data:00000903 bounds_nfa
     solo_forth.z80s:4587   .text:0000100e bounds_pfa
     solo_forth.z80s:4593   .text:00001016 type_
     solo_forth.z80s:4499   .data:0000090a type_cfap
     solo_forth.z80s:4499   .data:0000090c type_lfa
     solo_forth.z80s:4499   .data:0000090e type_nfa
     solo_forth.z80s:4593   .text:00001018 type_pfa
     solo_forth.z80s:4607   .text:0000102e type.empty_string
     solo_forth.z80s:4602   .text:00001022 type.do
     solo_forth.z80s:4609   .text:00001030 type.end
GAS LISTING solo_forth.z80s 			page 173


     solo_forth.z80s:4614   .text:00001032 minus_trailing_
     solo_forth.z80s:4499   .data:00000913 minus_trailing_cfap
     solo_forth.z80s:4499   .data:00000915 minus_trailing_lfa
     solo_forth.z80s:4499   .data:00000917 minus_trailing_nfa
     solo_forth.z80s:4614   .text:00001034 minus_trailing_pfa
     solo_forth.z80s:4623   .text:00001039 minus_trailing.begin
     solo_forth.z80s:4636   .text:00001049 paren_dot_quote_
     solo_forth.z80s:4499   .data:00000921 paren_dot_quote_cfap
     solo_forth.z80s:4499   .data:00000923 paren_dot_quote_lfa
     solo_forth.z80s:4499   .data:00000925 paren_dot_quote_nfa
     solo_forth.z80s:4636   .text:0000104b paren_dot_quote_pfa
     solo_forth.z80s:4645   .text:0000105d dot_quote_
     solo_forth.z80s:4636   .data:0000092d dot_quote_cfap
     solo_forth.z80s:4636   .data:0000092f dot_quote_lfa
     solo_forth.z80s:4636   .data:00000931 dot_quote_nfa
     solo_forth.z80s:4645   .text:0000105f dot_quote_pfa
     solo_forth.z80s:4654   .text:00001072 dot_quote.interpreting
     solo_forth.z80s:7888   .text:00001d28 exit_
     solo_forth.z80s:4659   .text:00001076 span_
     solo_forth.z80s:4636   .data:00000937 span_cfap
     solo_forth.z80s:4636   .data:00000939 span_lfa
     solo_forth.z80s:4636   .data:0000093b span_nfa
     solo_forth.z80s:4659   .text:00001078 span_pfa
     solo_forth.z80s:4674   .text:0000107a accept_
     solo_forth.z80s:4636   .data:00000940 accept_cfap
     solo_forth.z80s:4636   .data:00000942 accept_lfa
     solo_forth.z80s:4636   .data:00000944 accept_nfa
     solo_forth.z80s:4674   .text:0000107c accept_pfa
     solo_forth.z80s:4735   .text:0000107e expect_
     solo_forth.z80s:4636   .data:0000094b expect_cfap
     solo_forth.z80s:4636   .data:0000094d expect_lfa
     solo_forth.z80s:4636   .data:0000094f expect_nfa
     solo_forth.z80s:4735   .text:00001080 expect_pfa
     solo_forth.z80s:4809   .text:000010f5 expect.end
     solo_forth.z80s:4762   .text:00001090 expect.do
     solo_forth.z80s:4782   .text:000010ba expect.maybe_carriage_return
     solo_forth.z80s:4806   .text:000010e7 expect.loop
     solo_forth.z80s:4803   .text:000010e5 expect.emit
     solo_forth.z80s:4792   .text:000010cf expect.control_char
     solo_forth.z80s:4799   .text:000010df expect.ordinary_key
     solo_forth.z80s:4801   .text:000010e1 expect.store
     solo_forth.z80s:4814   .text:000010f9 query_
     solo_forth.z80s:4636   .data:00000956 query_cfap
     solo_forth.z80s:4636   .data:00000958 query_lfa
     solo_forth.z80s:4636   .data:0000095a query_nfa
     solo_forth.z80s:4814   .text:000010fb query_pfa
     solo_forth.z80s:4932   .text:00001159 blank_
     solo_forth.z80s:6383   .text:000017e6 stream_end_
     solo_forth.z80s:4636   .data:00000960 x_cfap
     solo_forth.z80s:4636   .data:00000962 x_lfa
     solo_forth.z80s:4636   .data:00000964 x_nfa
     solo_forth.z80s:4847   .text:00001119 x_pfa
     solo_forth.z80s:4889   .text:00001139 x.exit
     solo_forth.z80s:4901   .text:0000113b x.end
     solo_forth.z80s:4905   .text:0000113d fill_
     solo_forth.z80s:4636   .data:00000966 fill_cfap
     solo_forth.z80s:4636   .data:00000968 fill_lfa
GAS LISTING solo_forth.z80s 			page 174


     solo_forth.z80s:4636   .data:0000096a fill_nfa
     solo_forth.z80s:4905   .text:0000113f fill_pfa
     solo_forth.z80s:4908   .text:00001140 fill.e
     solo_forth.z80s:4913   .text:00001144 fill.do
     solo_forth.z80s:4921   .text:0000114f fill.end
     solo_forth.z80s:4636   .data:0000096f erase_cfap
     solo_forth.z80s:4636   .data:00000971 erase_lfa
     solo_forth.z80s:4636   .data:00000973 erase_nfa
     solo_forth.z80s:4926   .text:00001154 erase_pfa
     solo_forth.z80s:4636   .data:00000979 blank_cfap
     solo_forth.z80s:4636   .data:0000097b blank_lfa
     solo_forth.z80s:4636   .data:0000097d blank_nfa
     solo_forth.z80s:4932   .text:0000115b blank_pfa
     solo_forth.z80s:4938   .text:00001160 hold_
     solo_forth.z80s:4932   .data:00000983 hold_cfap
     solo_forth.z80s:4932   .data:00000985 hold_lfa
     solo_forth.z80s:4932   .data:00000987 hold_nfa
     solo_forth.z80s:4938   .text:00001162 hold_pfa
     solo_forth.z80s:4945   .text:00001172 pad_
     solo_forth.z80s:4932   .data:0000098c pad_cfap
     solo_forth.z80s:4932   .data:0000098e pad_lfa
     solo_forth.z80s:4932   .data:00000990 pad_nfa
     solo_forth.z80s:4945   .text:00001174 pad_pfa
     solo_forth.z80s:4953   .text:0000117d stream_
     solo_forth.z80s:4932   .data:00000994 stream_cfap
     solo_forth.z80s:4932   .data:00000996 stream_lfa
     solo_forth.z80s:4932   .data:00000998 stream_nfa
     solo_forth.z80s:4953   .text:0000117f stream_pfa
     solo_forth.z80s:4967   .text:0000118f stream.terminal
     solo_forth.z80s:6535   .text:00001852 block_
     solo_forth.z80s:4969   .text:00001191 stream.end
     solo_forth.z80s:4974   .text:00001199 parsed_
     solo_forth.z80s:4932   .data:0000099f parsed_cfap
     solo_forth.z80s:4932   .data:000009a1 parsed_lfa
     solo_forth.z80s:4932   .data:000009a3 parsed_nfa
     solo_forth.z80s:4974   .text:0000119b parsed_pfa
     solo_forth.z80s:4932   .data:000009aa parse_cfap
     solo_forth.z80s:4932   .data:000009ac parse_lfa
     solo_forth.z80s:4932   .data:000009ae parse_nfa
     solo_forth.z80s:4988   .text:000011a5 parse_pfa
     solo_forth.z80s:5007   .text:000011b1 parse_name_
     solo_forth.z80s:4932   .data:000009b4 parse_name_cfap
     solo_forth.z80s:4932   .data:000009b6 parse_name_lfa
     solo_forth.z80s:4932   .data:000009b8 parse_name_nfa
     solo_forth.z80s:5007   .text:000011b3 parse_name_pfa
     solo_forth.z80s:5024   .text:000011d1 word_
     solo_forth.z80s:4932   .data:000009c3 word_cfap
     solo_forth.z80s:4932   .data:000009c5 word_lfa
     solo_forth.z80s:4932   .data:000009c7 word_nfa
     solo_forth.z80s:5024   .text:000011d3 word_pfa
     solo_forth.z80s:5084   .text:0000120c paren_number_
     solo_forth.z80s:4932   .data:000009cc paren_number_cfap
     solo_forth.z80s:4932   .data:000009ce paren_number_lfa
     solo_forth.z80s:4932   .data:000009d0 paren_number_nfa
     solo_forth.z80s:5084   .text:0000120e paren_number_pfa
     solo_forth.z80s:5097   .text:0000120e paren_number.begin
     solo_forth.z80s:5118   .text:0000124a paren_number.end
GAS LISTING solo_forth.z80s 			page 175


     solo_forth.z80s:5115   .text:00001244 paren_number.decimal_point_done
     solo_forth.z80s:5123   .text:0000124e number_
     solo_forth.z80s:4932   .data:000009d9 number_cfap
     solo_forth.z80s:5123   .data:000009db number_lfa
     solo_forth.z80s:5123   .data:000009dd number_nfa
     solo_forth.z80s:5123   .text:00001250 number_pfa
     solo_forth.z80s:5154   .text:0000126b number.begin
     solo_forth.z80s:5170   .text:00001290 number.a_blank
     solo_forth.z80s:5176   .text:0000129a number.end
     solo_forth.z80s:5180   .text:0000129c upper_
     solo_forth.z80s:5123   .data:000009e4 upper_cfap
     solo_forth.z80s:5123   .data:000009e6 upper_lfa
     solo_forth.z80s:5123   .data:000009e8 upper_nfa
     solo_forth.z80s:5180   .text:0000129e upper_pfa
     solo_forth.z80s:5194   .text:000012a7 upper.a
     solo_forth.z80s:5204   .text:000012b0 uppers_
     solo_forth.z80s:5123   .data:000009ee uppers_cfap
     solo_forth.z80s:5123   .data:000009f0 uppers_lfa
     solo_forth.z80s:5123   .data:000009f2 uppers_nfa
     solo_forth.z80s:5204   .text:000012b2 uppers_pfa
     solo_forth.z80s:5214   .text:000012b4 uppers.do
     solo_forth.z80s:5226   .text:000012c3 defined_question_
     solo_forth.z80s:5123   .data:000009f9 defined_question_cfap
     solo_forth.z80s:5123   .data:000009fb defined_question_lfa
     solo_forth.z80s:5123   .data:000009fd defined_question_nfa
     solo_forth.z80s:5226   .text:000012c5 defined_question_pfa
     solo_forth.z80s:5323   .text:00001338 found_
     solo_forth.z80s:5234   .text:000012cd undefined_question_
     solo_forth.z80s:5123   .data:00000a06 undefined_question_cfap
     solo_forth.z80s:5123   .data:00000a08 undefined_question_lfa
     solo_forth.z80s:5123   .data:00000a0a undefined_question_nfa
     solo_forth.z80s:5234   .text:000012cf undefined_question_pfa
     solo_forth.z80s:5123   .data:00000a15 dollar_store_cfap
     solo_forth.z80s:5123   .data:00000a17 dollar_store_lfa
     solo_forth.z80s:5123   .data:00000a19 dollar_store_nfa
     solo_forth.z80s:5246   .text:000012d7 dollar_store_pfa
     solo_forth.z80s:5279   .text:000012e7 find_
     solo_forth.z80s:5123   .data:00000a1c find_cfap
     solo_forth.z80s:5123   .data:00000a1e find_lfa
     solo_forth.z80s:5123   .data:00000a20 find_nfa
     solo_forth.z80s:5279   .text:000012e9 find_pfa
     solo_forth.z80s:5301   .text:000012ef find.do
     solo_forth.z80s:5309   .text:0000130d find.loop
     solo_forth.z80s:5314   .text:00001315 find_dollar_
     solo_forth.z80s:5123   .data:00000a25 find_dollar_cfap
     solo_forth.z80s:5123   .data:00000a27 find_dollar_lfa
     solo_forth.z80s:5123   .data:00000a29 find_dollar_nfa
     solo_forth.z80s:5314   .text:00001317 find_dollar_pfa
     solo_forth.z80s:5123   .data:00000a2f found_cfap
     solo_forth.z80s:5123   .data:00000a31 found_lfa
     solo_forth.z80s:5123   .data:00000a33 found_nfa
     solo_forth.z80s:5323   .text:0000133a found_pfa
     solo_forth.z80s:5342   .text:00001351 paren_abort_
     solo_forth.z80s:5323   .data:00000a39 paren_abort_cfap
     solo_forth.z80s:5323   .data:00000a3b paren_abort_lfa
     solo_forth.z80s:5323   .data:00000a3d paren_abort_nfa
     solo_forth.z80s:5342   .text:00001353 paren_abort_pfa
GAS LISTING solo_forth.z80s 			page 176


     solo_forth.z80s:5959   .text:0000165f abort_
     solo_forth.z80s:5348   .text:00001357 error_number_
     solo_forth.z80s:5323   .data:00000a45 error_number_cfap
     solo_forth.z80s:5323   .data:00000a47 error_number_lfa
     solo_forth.z80s:5323   .data:00000a49 error_number_nfa
     solo_forth.z80s:5348   .text:00001359 error_number_pfa
     solo_forth.z80s:5353   .text:0000135b error_pos_
     solo_forth.z80s:5323   .data:00000a50 error_pos_cfap
     solo_forth.z80s:5323   .data:00000a52 error_pos_lfa
     solo_forth.z80s:5323   .data:00000a54 error_pos_nfa
     solo_forth.z80s:5353   .text:0000135d error_pos_pfa
     solo_forth.z80s:5358   .text:00001361 error_to_line_
     solo_forth.z80s:5323   .data:00000a5e error_to_line_cfap
     solo_forth.z80s:5323   .data:00000a60 error_to_line_lfa
     solo_forth.z80s:5323   .data:00000a62 error_to_line_nfa
     solo_forth.z80s:5358   .text:00001363 error_to_line_pfa
     solo_forth.z80s:5371   .text:0000136b error_to_number.do
     solo_forth.z80s:6284   .text:00001753 mod_
     solo_forth.z80s:5323   .data:00000a6d error_cfap
     solo_forth.z80s:5323   .data:00000a6f error_lfa
     solo_forth.z80s:5323   .data:00000a71 error_nfa
     solo_forth.z80s:5383   .text:0000137e error_pfa
     solo_forth.z80s:5389   .text:0000138e error.message
     solo_forth.z80s:7554   .text:00001be8 _string_next
     solo_forth.z80s:7554   .text:00001be0 _string_first
     solo_forth.z80s:6327   .text:000017a9 message_
     solo_forth.z80s:5400   .text:000013b7 error.end
     solo_forth.z80s:5883   .text:000015ea quit_
     solo_forth.z80s:5404   .text:000013b9 id_dot_
     solo_forth.z80s:5323   .data:00000a77 id_dot_cfap
     solo_forth.z80s:5323   .data:00000a79 id_dot_lfa
     solo_forth.z80s:5323   .data:00000a7b id_dot_nfa
     solo_forth.z80s:5404   .text:000013bb id_dot_pfa
     solo_forth.z80s:5323   .data:00000a7f header_cfap
     solo_forth.z80s:5323   .data:00000a81 header_lfa
     solo_forth.z80s:5323   .data:00000a83 header_nfa
     solo_forth.z80s:5410   .text:000013c5 header_pfa
     solo_forth.z80s:6120   .text:000016c2 abs_
     solo_forth.z80s:6256   .text:00001737 star_
     solo_forth.z80s:5432   .text:000013da header.continue
     solo_forth.z80s:6180   .text:000016e6 min_
     solo_forth.z80s:5323   .data:00000a8a create_cfap
     solo_forth.z80s:5323   .data:00000a8c create_lfa
     solo_forth.z80s:5323   .data:00000a8e create_nfa
     solo_forth.z80s:5454   .text:00001412 create_pfa
     solo_forth.z80s:5464   .text:0000141c code_
     solo_forth.z80s:5454   .data:00000a95 code_cfap
     solo_forth.z80s:5454   .data:00000a97 code_lfa
     solo_forth.z80s:5454   .data:00000a99 code_nfa
     solo_forth.z80s:5464   .text:0000141e code_pfa
     solo_forth.z80s:5472   .text:0000142a compare_
     solo_forth.z80s:5454   .data:00000a9e compare_cfap
     solo_forth.z80s:5454   .data:00000aa0 compare_lfa
     solo_forth.z80s:5454   .data:00000aa2 compare_nfa
     solo_forth.z80s:5472   .text:0000142c compare_pfa
     solo_forth.z80s:5491   .text:00001435 compare.lengths
     solo_forth.z80s:5495   .text:00001438 compare.ready
GAS LISTING solo_forth.z80s 			page 177


     solo_forth.z80s:5525   .text:00001455 compare_strings_case_sensitive
     solo_forth.z80s:5512   .text:00001445 compare.no_match
     solo_forth.z80s:5507   .text:00001442 compare.match
     solo_forth.z80s:5516   .text:00001446 compare.end
     solo_forth.z80s:5546   .text:00001461 search_
     solo_forth.z80s:5454   .data:00000aaa search_cfap
     solo_forth.z80s:5454   .data:00000aac search_lfa
     solo_forth.z80s:5454   .data:00000aae search_nfa
     solo_forth.z80s:5546   .text:00001463 search_pfa
     solo_forth.z80s:5588   .text:00001485 search.string_2_len
     solo_forth.z80s:5608   .text:0000149e search.string_1_len
     solo_forth.z80s:5611   .text:000014a2 search.string_1_addr
     solo_forth.z80s:5597   .text:00001491 search.match
     solo_forth.z80s:5574   .text:00001479 search.1
     solo_forth.z80s:5606   .text:0000149a search.no_match
     solo_forth.z80s:5599   .text:00001494 search.end
     solo_forth.z80s:5616   .text:000014a7 bracket_compile_
     solo_forth.z80s:5454   .data:00000ab5 bracket_compile_cfap
     solo_forth.z80s:5454   .data:00000ab7 bracket_compile_lfa
     solo_forth.z80s:5454   .data:00000ab9 bracket_compile_nfa
     solo_forth.z80s:5616   .text:000014a9 bracket_compile_pfa
     solo_forth.z80s:6953   .text:0000198e tick_
     solo_forth.z80s:5454   .data:00000ac3 s_literal_cfap
     solo_forth.z80s:5454   .data:00000ac5 s_literal_lfa
     solo_forth.z80s:5454   .data:00000ac7 s_literal_nfa
     solo_forth.z80s:5622   .text:000014b1 s_literal_pfa
     solo_forth.z80s:5630   .text:000014b9 c_literal_
     solo_forth.z80s:5454   .data:00000ad0 c_literal_cfap
     solo_forth.z80s:5454   .data:00000ad2 c_literal_lfa
     solo_forth.z80s:5454   .data:00000ad4 c_literal_nfa
     solo_forth.z80s:5630   .text:000014bb c_literal_pfa
     solo_forth.z80s:5648   .text:000014c7 c_literal.end
     solo_forth.z80s:5656   .text:000014c9 literal_
     solo_forth.z80s:5454   .data:00000add literal_cfap
     solo_forth.z80s:5454   .data:00000adf literal_lfa
     solo_forth.z80s:5454   .data:00000ae1 literal_nfa
     solo_forth.z80s:5656   .text:000014cb literal_pfa
     solo_forth.z80s:5672   .text:000014d7 literal.end
     solo_forth.z80s:5680   .text:000014d9 two_literal_
     solo_forth.z80s:5454   .data:00000ae9 two_literal_cfap
     solo_forth.z80s:5454   .data:00000aeb two_literal_lfa
     solo_forth.z80s:5680   .data:00000aed two_literal_nfa
     solo_forth.z80s:5680   .text:000014db two_literal_pfa
     solo_forth.z80s:5696   .text:000014e7 two_literal.end
     solo_forth.z80s:5705   .text:000014e9 depth_
     solo_forth.z80s:5680   .data:00000af6 depth_cfap
     solo_forth.z80s:5680   .data:00000af8 depth_lfa
     solo_forth.z80s:5680   .data:00000afa depth_nfa
     solo_forth.z80s:5705   .text:000014eb depth_pfa
     solo_forth.z80s:6278   .text:0000174b slash_
     solo_forth.z80s:5711   .text:000014fb question_stack_
     solo_forth.z80s:5680   .data:00000b00 question_stack_cfap
     solo_forth.z80s:5680   .data:00000b02 question_stack_lfa
     solo_forth.z80s:5680   .data:00000b04 question_stack_nfa
     solo_forth.z80s:5711   .text:000014fd question_stack_pfa
     solo_forth.z80s:5732   .text:0000151a interpret_
     solo_forth.z80s:5680   .data:00000b0b interpret_cfap
GAS LISTING solo_forth.z80s 			page 178


     solo_forth.z80s:5680   .data:00000b0d interpret_lfa
     solo_forth.z80s:5680   .data:00000b0f interpret_nfa
     solo_forth.z80s:5732   .text:0000151c interpret_pfa
     solo_forth.z80s:5747   .text:0000151c interpret.begin
     solo_forth.z80s:5798   .text:0000153c interpret.word_not_found
     solo_forth.z80s:5789   .text:00001536 interpret.execute
     solo_forth.z80s:5813   .text:0000154e interpret.16bit_number
     solo_forth.z80s:5822   .text:00001556 immediate_
     solo_forth.z80s:5680   .data:00000b19 immediate_cfap
     solo_forth.z80s:5680   .data:00000b1b immediate_lfa
     solo_forth.z80s:5680   .data:00000b1d immediate_nfa
     solo_forth.z80s:5822   .text:00001558 immediate_pfa
     solo_forth.z80s:5833   .text:00001569 vocabulary_
     solo_forth.z80s:5680   .data:00000b27 vocabulary_cfap
     solo_forth.z80s:5680   .data:00000b29 vocabulary_lfa
     solo_forth.z80s:5680   .data:00000b2b vocabulary_nfa
     solo_forth.z80s:5833   .text:0000156b vocabulary_pfa
     solo_forth.z80s:7601   .text:00001c51 border_
     solo_forth.z80s:5680   .data:00000b36 definitions_cfap
     solo_forth.z80s:5680   .data:00000b38 definitions_lfa
     solo_forth.z80s:5680   .data:00000b3a definitions_nfa
     solo_forth.z80s:5868   .text:000015d5 definitions_pfa
     solo_forth.z80s:5875   .text:000015df paren_
     solo_forth.z80s:5680   .data:00000b46 paren_cfap
     solo_forth.z80s:5875   .data:00000b48 paren_lfa
     solo_forth.z80s:5875   .data:00000b4a paren_nfa
     solo_forth.z80s:5875   .text:000015e1 paren_pfa
     solo_forth.z80s:7506   .text:00001ba2 two_drop_
     solo_forth.z80s:5875   .data:00000b4c quit_cfap
     solo_forth.z80s:5875   .data:00000b4e quit_lfa
     solo_forth.z80s:5875   .data:00000b50 quit_nfa
     solo_forth.z80s:5883   .text:000015ec quit_pfa
     solo_forth.z80s:5888   .text:000015f2 quit.do
     solo_forth.z80s:5933   .text:0000160f greeting_
     solo_forth.z80s:5875   .data:00000b55 greeting_cfap
     solo_forth.z80s:5875   .data:00000b57 greeting_lfa
     solo_forth.z80s:5875   .data:00000b59 greeting_nfa
     solo_forth.z80s:5933   .text:00001611 greeting_pfa
     solo_forth.z80s:7534   .text:00001bbd unused_
     solo_forth.z80s:7348   .text:00001b09 u_dot_
     solo_forth.z80s:5875   .data:00000b62 abort_cfap
     solo_forth.z80s:5875   .data:00000b64 abort_lfa
     solo_forth.z80s:5875   .data:00000b66 abort_nfa
     solo_forth.z80s:5959   .text:00001661 abort_pfa
     solo_forth.z80s:5963   .text:00001667 boot
     solo_forth.z80s:5968   .text:0000166b boot_
     solo_forth.z80s:5875   .data:00000b6c boot_cfap
     solo_forth.z80s:5875   .data:00000b6e boot_lfa
     solo_forth.z80s:5875   .data:00000b70 boot_nfa
     solo_forth.z80s:5968   .text:0000166d boot_pfa
     solo_forth.z80s:5973   .text:0000166f warm_
     solo_forth.z80s:5875   .data:00000b75 warm_cfap
     solo_forth.z80s:5875   .data:00000b77 warm_lfa
     solo_forth.z80s:5875   .data:00000b79 warm_nfa
     solo_forth.z80s:5973   .text:00001671 warm_pfa
     solo_forth.z80s:7473   .text:00001b91 page_
     solo_forth.z80s:7494   .text:00001b9e system_stack_pointer
GAS LISTING solo_forth.z80s 			page 179


     solo_forth.z80s:6053   .text:00001690 common_start
     solo_forth.z80s:5994   .text:00001680 cold_
     solo_forth.z80s:5875   .data:00000b7e cold_cfap
     solo_forth.z80s:5875   .data:00000b80 cold_lfa
     solo_forth.z80s:5875   .data:00000b82 cold_nfa
     solo_forth.z80s:5994   .text:00001682 cold_pfa
     solo_forth.z80s:6043   .text:00001688 only_first_cold
     solo_forth.z80s:8038   .text:00001d86 move_name_fields_to_memory_bank
     solo_forth.z80s:6064   .text:0000169b s_to_d_
     solo_forth.z80s:5875   .data:00000b87 s_to_d_cfap
     solo_forth.z80s:5875   .data:00000b89 s_to_d_lfa
     solo_forth.z80s:5875   .data:00000b8b s_to_d_nfa
     solo_forth.z80s:6064   .text:0000169d s_to_d_pfa
     solo_forth.z80s:6085   .text:000016aa plus_minus_
     solo_forth.z80s:5875   .data:00000b8f plus_minus_cfap
     solo_forth.z80s:5875   .data:00000b91 plus_minus_lfa
     solo_forth.z80s:5875   .data:00000b93 plus_minus_nfa
     solo_forth.z80s:6085   .text:000016ac plus_minus_pfa
     solo_forth.z80s:6098   .text:000016b4 plus_minus.end
     solo_forth.z80s:6102   .text:000016b6 d_plus_minus_
     solo_forth.z80s:5875   .data:00000b96 d_plus_minus_cfap
     solo_forth.z80s:5875   .data:00000b98 d_plus_minus_lfa
     solo_forth.z80s:5875   .data:00000b9a d_plus_minus_nfa
     solo_forth.z80s:6102   .text:000016b8 d_plus_minus_pfa
     solo_forth.z80s:6116   .text:000016c0 d_plus_minus.end
     solo_forth.z80s:5875   .data:00000b9e abs_cfap
     solo_forth.z80s:5875   .data:00000ba0 abs_lfa
     solo_forth.z80s:5875   .data:00000ba2 abs_nfa
     solo_forth.z80s:6120   .text:000016c4 abs_pfa
     solo_forth.z80s:6134   .text:000016ca dabs_
     solo_forth.z80s:6120   .data:00000ba6 dabs_cfap
     solo_forth.z80s:6120   .data:00000ba8 dabs_lfa
     solo_forth.z80s:6120   .data:00000baa dabs_nfa
     solo_forth.z80s:6134   .text:000016cc dabs_pfa
     solo_forth.z80s:6148   .text:000016d2 umax_
     solo_forth.z80s:6120   .data:00000baf umax_cfap
     solo_forth.z80s:6120   .data:00000bb1 umax_lfa
     solo_forth.z80s:6120   .data:00000bb3 umax_nfa
     solo_forth.z80s:6148   .text:000016d4 umax_pfa
     solo_forth.z80s:6198   .text:000016f7 max.1
     solo_forth.z80s:6164   .text:000016dc umin_
     solo_forth.z80s:6120   .data:00000bb8 umin_cfap
     solo_forth.z80s:6120   .data:00000bba umin_lfa
     solo_forth.z80s:6120   .data:00000bbc umin_nfa
     solo_forth.z80s:6164   .text:000016de umin_pfa
     solo_forth.z80s:6200   .text:000016f8 max.2
     solo_forth.z80s:6120   .data:00000bc1 min_cfap
     solo_forth.z80s:6120   .data:00000bc3 min_lfa
     solo_forth.z80s:6120   .data:00000bc5 min_nfa
     solo_forth.z80s:6180   .text:000016e8 min_pfa
     solo_forth.z80s:6190   .text:000016f0 max_
     solo_forth.z80s:6120   .data:00000bc9 max_cfap
     solo_forth.z80s:6120   .data:00000bcb max_lfa
     solo_forth.z80s:6120   .data:00000bcd max_nfa
     solo_forth.z80s:6190   .text:000016f2 max_pfa
     solo_forth.z80s:6195   .text:000016f3 max.de
     solo_forth.z80s:6206   .text:000016ff m_star_
GAS LISTING solo_forth.z80s 			page 180


     solo_forth.z80s:6120   .data:00000bd1 m_star_cfap
     solo_forth.z80s:6120   .data:00000bd3 m_star_lfa
     solo_forth.z80s:6120   .data:00000bd5 m_star_nfa
     solo_forth.z80s:6206   .text:00001701 m_star_pfa
     solo_forth.z80s:6225   .text:00001715 m_slash_
     solo_forth.z80s:6120   .data:00000bd8 m_slash_cfap
     solo_forth.z80s:6120   .data:00000bda m_slash_lfa
     solo_forth.z80s:6120   .data:00000bdc m_slash_nfa
     solo_forth.z80s:6225   .text:00001717 m_slash_pfa
     solo_forth.z80s:6120   .data:00000bdf star_cfap
     solo_forth.z80s:6120   .data:00000be1 star_lfa
     solo_forth.z80s:6120   .data:00000be3 star_nfa
     solo_forth.z80s:6256   .text:00001739 star_pfa
     solo_forth.z80s:6262   .text:0000173f slash_mod_
     solo_forth.z80s:6120   .data:00000be5 slash_mod_cfap
     solo_forth.z80s:6120   .data:00000be7 slash_mod_lfa
     solo_forth.z80s:6120   .data:00000be9 slash_mod_nfa
     solo_forth.z80s:6262   .text:00001741 slash_mod_pfa
     solo_forth.z80s:6120   .data:00000bee slash_cfap
     solo_forth.z80s:6120   .data:00000bf0 slash_lfa
     solo_forth.z80s:6120   .data:00000bf2 slash_nfa
     solo_forth.z80s:6278   .text:0000174d slash_pfa
     solo_forth.z80s:6120   .data:00000bf4 mod_cfap
     solo_forth.z80s:6120   .data:00000bf6 mod_lfa
     solo_forth.z80s:6120   .data:00000bf8 mod_nfa
     solo_forth.z80s:6284   .text:00001755 mod_pfa
     solo_forth.z80s:6290   .text:0000175b star_slash_mod_
     solo_forth.z80s:6120   .data:00000bfc star_slash_mod_cfap
     solo_forth.z80s:6120   .data:00000bfe star_slash_mod_lfa
     solo_forth.z80s:6290   .data:00000c00 star_slash_mod_nfa
     solo_forth.z80s:6290   .text:0000175d star_slash_mod_pfa
     solo_forth.z80s:6297   .text:00001767 star_slash_
     solo_forth.z80s:6290   .data:00000c06 star_slash_cfap
     solo_forth.z80s:6290   .data:00000c08 star_slash_lfa
     solo_forth.z80s:6290   .data:00000c0a star_slash_nfa
     solo_forth.z80s:6297   .text:00001769 star_slash_pfa
     solo_forth.z80s:6303   .text:0000176f m_slash_mod_
     solo_forth.z80s:6290   .data:00000c0d m_slash_mod_cfap
     solo_forth.z80s:6290   .data:00000c0f m_slash_mod_lfa
     solo_forth.z80s:6290   .data:00000c11 m_slash_mod_nfa
     solo_forth.z80s:6303   .text:00001771 m_slash_mod_pfa
     solo_forth.z80s:6312   .text:00001785 paren_line_
     solo_forth.z80s:6290   .data:00000c17 paren_line_cfap
     solo_forth.z80s:6290   .data:00000c19 paren_line_lfa
     solo_forth.z80s:6290   .data:00000c1b paren_line_nfa
     solo_forth.z80s:6312   .text:00001787 paren_line_pfa
     solo_forth.z80s:6321   .text:0000179f dot_line_
     solo_forth.z80s:6290   .data:00000c22 dot_line_cfap
     solo_forth.z80s:6290   .data:00000c24 dot_line_lfa
     solo_forth.z80s:6290   .data:00000c26 dot_line_nfa
     solo_forth.z80s:6321   .text:000017a1 dot_line_pfa
     solo_forth.z80s:6290   .data:00000c2c message_cfap
     solo_forth.z80s:6290   .data:00000c2e message_lfa
     solo_forth.z80s:6290   .data:00000c30 message_nfa
     solo_forth.z80s:6327   .text:000017ab message_pfa
     solo_forth.z80s:6340   .text:000017bd message.number_only
     solo_forth.z80s:7327   .text:00001af9 dot_
GAS LISTING solo_forth.z80s 			page 181


     solo_forth.z80s:6349   .text:000017cc update_
     solo_forth.z80s:6290   .data:00000c38 update_cfap
     solo_forth.z80s:6290   .data:00000c3a update_lfa
     solo_forth.z80s:6290   .data:00000c3c update_nfa
     solo_forth.z80s:6349   .text:000017ce update_pfa
     solo_forth.z80s:6369   .text:000017de updated_question_
     solo_forth.z80s:6290   .data:00000c43 updated_question_cfap
     solo_forth.z80s:6290   .data:00000c45 updated_question_lfa
     solo_forth.z80s:6290   .data:00000c47 updated_question_nfa
     solo_forth.z80s:6369   .text:000017e0 updated_question_pfa
     solo_forth.z80s:6429   .text:00001808 buffer_id_
     solo_forth.z80s:6290   .data:00000c50 stream_end_cfap
     solo_forth.z80s:6290   .data:00000c52 stream_end_lfa
     solo_forth.z80s:6290   .data:00000c54 stream_end_nfa
     solo_forth.z80s:6383   .text:000017e8 stream_end_pfa
     solo_forth.z80s:6400   .text:000017f4 empty_buffers_
     solo_forth.z80s:6383   .data:00000c5f empty_buffers_cfap
     solo_forth.z80s:6383   .data:00000c61 empty_buffers_lfa
     solo_forth.z80s:6383   .data:00000c63 empty_buffers_nfa
     solo_forth.z80s:6400   .text:000017f6 empty_buffers_pfa
     solo_forth.z80s:6415   .text:00001800 buffer_data_
     solo_forth.z80s:6383   .data:00000c71 buffer_data_cfap
     solo_forth.z80s:6383   .data:00000c73 buffer_data_lfa
     solo_forth.z80s:6383   .data:00000c75 buffer_data_nfa
     solo_forth.z80s:6415   .text:00001802 buffer_data_pfa
     solo_forth.z80s:6383   .data:00000c81 buffer_id_cfap
     solo_forth.z80s:6383   .data:00000c83 buffer_id_lfa
     solo_forth.z80s:6383   .data:00000c85 buffer_id_nfa
     solo_forth.z80s:6429   .text:0000180a buffer_id_pfa
     solo_forth.z80s:6443   .text:00001810 block_number_
     solo_forth.z80s:6383   .data:00000c8f block_number_cfap
     solo_forth.z80s:6383   .data:00000c91 block_number_lfa
     solo_forth.z80s:6383   .data:00000c93 block_number_nfa
     solo_forth.z80s:6443   .text:00001812 block_number_pfa
     solo_forth.z80s:6459   .text:0000181a buffer_block_
     solo_forth.z80s:6383   .data:00000ca0 buffer_block_cfap
     solo_forth.z80s:6383   .data:00000ca2 buffer_block_lfa
     solo_forth.z80s:6383   .data:00000ca4 buffer_block_nfa
     solo_forth.z80s:6459   .text:0000181c buffer_block_pfa
     solo_forth.z80s:6473   .text:00001822 paren_buffer_
     solo_forth.z80s:6383   .data:00000cb1 paren_buffer_cfap
     solo_forth.z80s:6473   .data:00000cb3 paren_buffer_lfa
     solo_forth.z80s:6473   .data:00000cb5 paren_buffer_nfa
     solo_forth.z80s:6473   .text:00001824 paren_buffer_pfa
     solo_forth.z80s:6496   .text:00001832 free_buffer.not_updated
     solo_forth.z80s:6687   .text:000018c3 write_buffer_
     solo_forth.z80s:6498   .text:00001834 free_buffer.end
     solo_forth.z80s:6503   .text:0000183a buffer_
     solo_forth.z80s:6473   .data:00000cbe buffer_cfap
     solo_forth.z80s:6473   .data:00000cc0 buffer_lfa
     solo_forth.z80s:6473   .data:00000cc2 buffer_nfa
     solo_forth.z80s:6503   .text:0000183c buffer_pfa
     solo_forth.z80s:6528   .text:0000184c buffer.not_equals
     solo_forth.z80s:6530   .text:0000184e buffer.end
     solo_forth.z80s:6473   .data:00000cc9 block_cfap
     solo_forth.z80s:6473   .data:00000ccb block_lfa
     solo_forth.z80s:6473   .data:00000ccd block_nfa
GAS LISTING solo_forth.z80s 			page 182


     solo_forth.z80s:6535   .text:00001854 block_pfa
     solo_forth.z80s:6564   .text:00001864 block.not_equals
     solo_forth.z80s:6567   .text:0000186e block.end
     solo_forth.z80s:6742   .text:000018ec save_buffers_
     solo_forth.z80s:6658   .text:000018b0 read_buffer_
     solo_forth.z80s:6572   .text:00001872 flip_
     solo_forth.z80s:6473   .data:00000cd3 flip_cfap
     solo_forth.z80s:6473   .data:00000cd5 flip_lfa
     solo_forth.z80s:6473   .data:00000cd7 flip_nfa
     solo_forth.z80s:6572   .text:00001874 flip_pfa
     solo_forth.z80s:6592   .text:0000187b block_to_sector_
     solo_forth.z80s:6473   .data:00000cdc block_to_sector_cfap
     solo_forth.z80s:6473   .data:00000cde block_to_sector_lfa
     solo_forth.z80s:6473   .data:00000ce0 block_to_sector_nfa
     solo_forth.z80s:6592   .text:0000187d block_to_sector_pfa
     solo_forth.z80s:6643   .text:000018a7 read_block_
     solo_forth.z80s:6473   .data:00000ced read_block_cfap
     solo_forth.z80s:6473   .data:00000cef read_block_lfa
     solo_forth.z80s:6473   .data:00000cf1 read_block_nfa
     solo_forth.z80s:6643   .text:000018a9 read_block_pfa
     solo_forth.z80s:6701   .text:000018cd transfer_block_
     solo_forth.z80s:6473   .data:00000cfc read_buffer_cfap
     solo_forth.z80s:6473   .data:00000cfe read_buffer_lfa
     solo_forth.z80s:6473   .data:00000d00 read_buffer_nfa
     solo_forth.z80s:6658   .text:000018b2 read_buffer_pfa
     solo_forth.z80s:6672   .text:000018ba write_block_
     solo_forth.z80s:6473   .data:00000d0c write_block_cfap
     solo_forth.z80s:6672   .data:00000d0e write_block_lfa
     solo_forth.z80s:6672   .data:00000d10 write_block_nfa
     solo_forth.z80s:6672   .text:000018bc write_block_pfa
     solo_forth.z80s:6672   .data:00000d1c write_buffer_cfap
     solo_forth.z80s:6672   .data:00000d1e write_buffer_lfa
     solo_forth.z80s:6672   .data:00000d20 write_buffer_nfa
     solo_forth.z80s:6687   .text:000018c5 write_buffer_pfa
     solo_forth.z80s:6672   .data:00000d2d transfer_block_cfap
     solo_forth.z80s:6672   .data:00000d2f transfer_block_lfa
     solo_forth.z80s:6672   .data:00000d31 transfer_block_nfa
     solo_forth.z80s:6701   .text:000018cf transfer_block_pfa
     solo_forth.z80s:6734   .text:000018e4 read_write_sector_command
     solo_forth.z80s:6720   .text:000018db paren_transfer_block_
     solo_forth.z80s:6727   .text:000018dd paren_transfer_block_pfa
     solo_forth.z80s:6672   .data:00000d40 save_buffers_cfap
     solo_forth.z80s:6672   .data:00000d42 save_buffers_lfa
     solo_forth.z80s:6672   .data:00000d44 save_buffers_nfa
     solo_forth.z80s:6742   .text:000018ee save_buffers_pfa
     solo_forth.z80s:7908   .text:00001d2e question_exit_
     solo_forth.z80s:6767   .text:00001900 flush_
     solo_forth.z80s:6672   .data:00000d51 flush_cfap
     solo_forth.z80s:6672   .data:00000d53 flush_lfa
     solo_forth.z80s:6672   .data:00000d55 flush_nfa
     solo_forth.z80s:6767   .text:00001902 flush_pfa
     solo_forth.z80s:6775   .text:00001908 paren_load_
     solo_forth.z80s:6672   .data:00000d5b paren_load_cfap
     solo_forth.z80s:6672   .data:00000d5d paren_load_lfa
     solo_forth.z80s:6672   .data:00000d5f paren_load_nfa
     solo_forth.z80s:6775   .text:0000190a paren_load_pfa
     solo_forth.z80s:6803   .text:00001923 continued_
GAS LISTING solo_forth.z80s 			page 183


     solo_forth.z80s:6672   .data:00000d66 continued_cfap
     solo_forth.z80s:6672   .data:00000d68 continued_lfa
     solo_forth.z80s:6803   .data:00000d6a continued_nfa
     solo_forth.z80s:6803   .text:00001925 continued_pfa
     solo_forth.z80s:6826   .text:0000192b load_
     solo_forth.z80s:6803   .data:00000d74 load_cfap
     solo_forth.z80s:6803   .data:00000d76 load_lfa
     solo_forth.z80s:6803   .data:00000d78 load_nfa
     solo_forth.z80s:6826   .text:0000192d load_pfa
     solo_forth.z80s:6858   .text:00001949 next_screen_
     solo_forth.z80s:6803   .data:00000d7d next_screen_cfap
     solo_forth.z80s:6803   .data:00000d7f next_screen_lfa
     solo_forth.z80s:6803   .data:00000d81 next_screen_nfa
     solo_forth.z80s:6858   .text:0000194b next_screen_pfa
     solo_forth.z80s:6803   .data:00000d85 defined_cfap
     solo_forth.z80s:6803   .data:00000d87 defined_lfa
     solo_forth.z80s:6803   .data:00000d89 defined_nfa
     solo_forth.z80s:6881   .text:00001965 defined_pfa
     solo_forth.z80s:6803   .data:00000d91 question_defined_cfap
     solo_forth.z80s:6803   .data:00000d93 question_defined_lfa
     solo_forth.z80s:6803   .data:00000d95 question_defined_nfa
     solo_forth.z80s:6914   .text:00001975 question_defined_pfa
     solo_forth.z80s:6929   .text:0000197e bracket_defined_
     solo_forth.z80s:6803   .data:00000d9e bracket_defined_cfap
     solo_forth.z80s:6803   .data:00000da0 bracket_defined_lfa
     solo_forth.z80s:6803   .data:00000da2 bracket_defined_nfa
     solo_forth.z80s:6929   .text:00001980 bracket_defined_pfa
     solo_forth.z80s:6941   .text:00001986 bracket_undefined_
     solo_forth.z80s:6803   .data:00000dac bracket_undefined_cfap
     solo_forth.z80s:6803   .data:00000dae bracket_undefined_lfa
     solo_forth.z80s:6803   .data:00000db0 bracket_undefined_nfa
     solo_forth.z80s:6941   .text:00001988 bracket_undefined_pfa
     solo_forth.z80s:6803   .data:00000dbc tick_cfap
     solo_forth.z80s:6803   .data:00000dbe tick_lfa
     solo_forth.z80s:6803   .data:00000dc0 tick_nfa
     solo_forth.z80s:6953   .text:00001990 tick_pfa
     solo_forth.z80s:6965   .text:00001996 bracket_tick_
     solo_forth.z80s:6803   .data:00000dc2 bracket_tick_cfap
     solo_forth.z80s:6803   .data:00000dc4 bracket_tick_lfa
     solo_forth.z80s:6965   .data:00000dc6 bracket_tick_nfa
     solo_forth.z80s:6965   .text:00001998 bracket_tick_pfa
     solo_forth.z80s:6977   .text:0000199e begin_
     solo_forth.z80s:6965   .data:00000dca begin_cfap
     solo_forth.z80s:6965   .data:00000dcc begin_lfa
     solo_forth.z80s:6965   .data:00000dce begin_nfa
     solo_forth.z80s:6977   .text:000019a0 begin_pfa
     solo_forth.z80s:6997   .text:000019a8 then_
     solo_forth.z80s:6965   .data:00000dd4 then_cfap
     solo_forth.z80s:6965   .data:00000dd6 then_lfa
     solo_forth.z80s:6965   .data:00000dd8 then_nfa
     solo_forth.z80s:6997   .text:000019aa then_pfa
     solo_forth.z80s:7015   .text:000019b4 do_
     solo_forth.z80s:6965   .data:00000ddd do_cfap
     solo_forth.z80s:6965   .data:00000ddf do_lfa
     solo_forth.z80s:6965   .data:00000de1 do_nfa
     solo_forth.z80s:7015   .text:000019b6 do_pfa
     solo_forth.z80s:7018   .text:000019ba do.common
GAS LISTING solo_forth.z80s 			page 184


     solo_forth.z80s:7026   .text:000019c1 loop_
     solo_forth.z80s:6965   .data:00000de4 loop_cfap
     solo_forth.z80s:6965   .data:00000de6 loop_lfa
     solo_forth.z80s:6965   .data:00000de8 loop_nfa
     solo_forth.z80s:7026   .text:000019c3 loop_pfa
     solo_forth.z80s:7037   .text:000019d0 plus_loop_
     solo_forth.z80s:6965   .data:00000ded plus_loop_cfap
     solo_forth.z80s:6965   .data:00000def plus_loop_lfa
     solo_forth.z80s:6965   .data:00000df1 plus_loop_nfa
     solo_forth.z80s:7037   .text:000019d2 plus_loop_pfa
     solo_forth.z80s:7048   .text:000019df until_
     solo_forth.z80s:6965   .data:00000df7 until_cfap
     solo_forth.z80s:6965   .data:00000df9 until_lfa
     solo_forth.z80s:6965   .data:00000dfb until_nfa
     solo_forth.z80s:7048   .text:000019e1 until_pfa
     solo_forth.z80s:7058   .text:000019ed again_
     solo_forth.z80s:6965   .data:00000e01 again_cfap
     solo_forth.z80s:6965   .data:00000e03 again_lfa
     solo_forth.z80s:6965   .data:00000e05 again_nfa
     solo_forth.z80s:7058   .text:000019ef again_pfa
     solo_forth.z80s:7077   .text:000019fb repeat_
     solo_forth.z80s:6965   .data:00000e0b repeat_cfap
     solo_forth.z80s:6965   .data:00000e0d repeat_lfa
     solo_forth.z80s:6965   .data:00000e0f repeat_nfa
     solo_forth.z80s:7077   .text:000019fd repeat_pfa
     solo_forth.z80s:7102   .text:00001a07 if_
     solo_forth.z80s:6965   .data:00000e16 if_cfap
     solo_forth.z80s:6965   .data:00000e18 if_lfa
     solo_forth.z80s:6965   .data:00000e1a if_nfa
     solo_forth.z80s:7102   .text:00001a09 if_pfa
     solo_forth.z80s:7105   .text:00001a0d if.do
     solo_forth.z80s:7113   .text:00001a13 unless_
     solo_forth.z80s:6965   .data:00000e1d unless_cfap
     solo_forth.z80s:6965   .data:00000e1f unless_lfa
     solo_forth.z80s:7113   .data:00000e21 unless_nfa
     solo_forth.z80s:7113   .text:00001a15 unless_pfa
     solo_forth.z80s:7127   .text:00001a1d ahead_
     solo_forth.z80s:7113   .data:00000e28 ahead_cfap
     solo_forth.z80s:7113   .data:00000e2a ahead_lfa
     solo_forth.z80s:7113   .data:00000e2c ahead_nfa
     solo_forth.z80s:7127   .text:00001a1f ahead_pfa
     solo_forth.z80s:7133   .text:00001a25 else_
     solo_forth.z80s:7113   .data:00000e32 else_cfap
     solo_forth.z80s:7113   .data:00000e34 else_lfa
     solo_forth.z80s:7113   .data:00000e36 else_nfa
     solo_forth.z80s:7133   .text:00001a27 else_pfa
     solo_forth.z80s:7161   .text:00001a3b while_
     solo_forth.z80s:7113   .data:00000e3b while_cfap
     solo_forth.z80s:7113   .data:00000e3d while_lfa
     solo_forth.z80s:7113   .data:00000e3f while_nfa
     solo_forth.z80s:7161   .text:00001a3d while_pfa
     solo_forth.z80s:7169   .text:00001a41 spaces_
     solo_forth.z80s:7113   .data:00000e45 spaces_cfap
     solo_forth.z80s:7113   .data:00000e47 spaces_lfa
     solo_forth.z80s:7113   .data:00000e49 spaces_nfa
     solo_forth.z80s:7169   .text:00001a43 spaces_pfa
     solo_forth.z80s:7175   .text:00001a49 emits_
GAS LISTING solo_forth.z80s 			page 185


     solo_forth.z80s:7113   .data:00000e50 emits_cfap
     solo_forth.z80s:7113   .data:00000e52 emits_lfa
     solo_forth.z80s:7113   .data:00000e54 emits_nfa
     solo_forth.z80s:7175   .text:00001a4b emits_pfa
     solo_forth.z80s:7187   .text:00001a63 emits_.end
     solo_forth.z80s:7184   .text:00001a5b emits_.do
     solo_forth.z80s:7192   .text:00001a67 less_hash_
     solo_forth.z80s:7113   .data:00000e5a less_hash_cfap
     solo_forth.z80s:7113   .data:00000e5c less_hash_lfa
     solo_forth.z80s:7113   .data:00000e5e less_hash_nfa
     solo_forth.z80s:7192   .text:00001a69 less_hash_pfa
     solo_forth.z80s:7200   .text:00001a71 hash_greater_
     solo_forth.z80s:7113   .data:00000e61 hash_greater_cfap
     solo_forth.z80s:7113   .data:00000e63 hash_greater_lfa
     solo_forth.z80s:7113   .data:00000e65 hash_greater_nfa
     solo_forth.z80s:7200   .text:00001a73 hash_greater_pfa
     solo_forth.z80s:7211   .text:00001a83 sign_
     solo_forth.z80s:7113   .data:00000e68 sign_cfap
     solo_forth.z80s:7113   .data:00000e6a sign_lfa
     solo_forth.z80s:7113   .data:00000e6c sign_nfa
     solo_forth.z80s:7211   .text:00001a85 sign_pfa
     solo_forth.z80s:7230   .text:00001a92 sign.end
     solo_forth.z80s:7234   .text:00001a94 hash_
     solo_forth.z80s:7113   .data:00000e71 hash_cfap
     solo_forth.z80s:7113   .data:00000e73 hash_lfa
     solo_forth.z80s:7113   .data:00000e75 hash_nfa
     solo_forth.z80s:7234   .text:00001a96 hash_pfa
     solo_forth.z80s:7256   .text:00001aae hash.digit
     solo_forth.z80s:7265   .text:00001ab7 hash_s_
     solo_forth.z80s:7113   .data:00000e77 hash_s_cfap
     solo_forth.z80s:7113   .data:00000e79 hash_s_lfa
     solo_forth.z80s:7113   .data:00000e7b hash_s_nfa
     solo_forth.z80s:7265   .text:00001ab9 hash_s_pfa
     solo_forth.z80s:7273   .text:00001ab9 hash_s.begin
     solo_forth.z80s:7279   .text:00001ac5 d_dot_r_
     solo_forth.z80s:7265   .data:00000e7e d_dot_r_cfap
     solo_forth.z80s:7265   .data:00000e80 d_dot_r_lfa
     solo_forth.z80s:7265   .data:00000e82 d_dot_r_nfa
     solo_forth.z80s:7279   .text:00001ac7 d_dot_r_pfa
     solo_forth.z80s:7306   .text:00001ae3 dot_r_
     solo_forth.z80s:7265   .data:00000e86 dot_r_cfap
     solo_forth.z80s:7265   .data:00000e88 dot_r_lfa
     solo_forth.z80s:7265   .data:00000e8a dot_r_nfa
     solo_forth.z80s:7306   .text:00001ae5 dot_r_pfa
     solo_forth.z80s:7312   .text:00001aef d_dot_
     solo_forth.z80s:7265   .data:00000e8d d_dot_cfap
     solo_forth.z80s:7265   .data:00000e8f d_dot_lfa
     solo_forth.z80s:7265   .data:00000e91 d_dot_nfa
     solo_forth.z80s:7312   .text:00001af1 d_dot_pfa
     solo_forth.z80s:7265   .data:00000e94 dot_cfap
     solo_forth.z80s:7265   .data:00000e96 dot_lfa
     solo_forth.z80s:7265   .data:00000e98 dot_nfa
     solo_forth.z80s:7327   .text:00001afb dot_pfa
     solo_forth.z80s:7342   .text:00001b01 question_
     solo_forth.z80s:7265   .data:00000e9a question_cfap
     solo_forth.z80s:7265   .data:00000e9c question_lfa
     solo_forth.z80s:7265   .data:00000e9e question_nfa
GAS LISTING solo_forth.z80s 			page 186


     solo_forth.z80s:7342   .text:00001b03 question_pfa
     solo_forth.z80s:7265   .data:00000ea0 u_dot_cfap
     solo_forth.z80s:7265   .data:00000ea2 u_dot_lfa
     solo_forth.z80s:7265   .data:00000ea4 u_dot_nfa
     solo_forth.z80s:7348   .text:00001b0b u_dot_pfa
     solo_forth.z80s:7357   .text:00001b11 dot_s_
     solo_forth.z80s:7265   .data:00000ea7 dot_s_cfap
     solo_forth.z80s:7265   .data:00000ea9 dot_s_lfa
     solo_forth.z80s:7265   .data:00000eab dot_s_nfa
     solo_forth.z80s:7357   .text:00001b13 dot_s_pfa
     solo_forth.z80s:7375   .text:00001b4b dot_s.end
     solo_forth.z80s:7371   .text:00001b3d dot_s.do
     solo_forth.z80s:7381   .text:00001b4d colors0_
     solo_forth.z80s:7265   .data:00000eae colors0_cfap
     solo_forth.z80s:7265   .data:00000eb0 colors0_lfa
     solo_forth.z80s:7265   .data:00000eb2 colors0_nfa
     solo_forth.z80s:7381   .text:00001b4f colors0_pfa
     solo_forth.z80s:7420   .text:00001b64 home_
     solo_forth.z80s:7265   .data:00000eba home_cfap
     solo_forth.z80s:7265   .data:00000ebc home_lfa
     solo_forth.z80s:7265   .data:00000ebe home_nfa
     solo_forth.z80s:7420   .text:00001b66 home_pfa
     solo_forth.z80s:7437   .text:00001b6e cls_
     solo_forth.z80s:7265   .data:00000ec3 cls_cfap
     solo_forth.z80s:7265   .data:00000ec5 cls_lfa
     solo_forth.z80s:7265   .data:00000ec7 cls_nfa
     solo_forth.z80s:7437   .text:00001b70 cls_pfa
     solo_forth.z80s:7265   .data:00000ecb page_cfap
     solo_forth.z80s:7265   .data:00000ecd page_lfa
     solo_forth.z80s:7265   .data:00000ecf page_nfa
     solo_forth.z80s:7473   .text:00001b93 page_pfa
     solo_forth.z80s:7491   .text:00001b97 bye_
     solo_forth.z80s:7265   .data:00000ed4 bye_cfap
     solo_forth.z80s:7265   .data:00000ed6 bye_lfa
     solo_forth.z80s:7491   .data:00000ed8 bye_nfa
     solo_forth.z80s:7491   .text:00001b99 bye_pfa
     solo_forth.z80s:7491   .data:00000edc two_drop_cfap
     solo_forth.z80s:7491   .data:00000ede two_drop_lfa
     solo_forth.z80s:7491   .data:00000ee0 two_drop_nfa
     solo_forth.z80s:7506   .text:00001ba4 two_drop_pfa
     solo_forth.z80s:7513   .text:00001ba8 two_swap_
     solo_forth.z80s:7491   .data:00000ee6 two_swap_cfap
     solo_forth.z80s:7491   .data:00000ee8 two_swap_lfa
     solo_forth.z80s:7491   .data:00000eea two_swap_nfa
     solo_forth.z80s:7513   .text:00001baa two_swap_pfa
     solo_forth.z80s:7491   .data:00000ef0 unused_cfap
     solo_forth.z80s:7491   .data:00000ef2 unused_lfa
     solo_forth.z80s:7491   .data:00000ef4 unused_nfa
     solo_forth.z80s:7534   .text:00001bbf unused_pfa
     solo_forth.z80s:7541   .text:00001bc7 where_
     solo_forth.z80s:7491   .data:00000efb where_cfap
     solo_forth.z80s:7491   .data:00000efd where_lfa
     solo_forth.z80s:7491   .data:00000eff where_nfa
     solo_forth.z80s:7541   .text:00001bc9 where_pfa
     solo_forth.z80s:7551   .text:00001bd7 where.do_it
     solo_forth.z80s:7565   .text:00001c13 at_xy
     solo_forth.z80s:7491   .data:00000f05 at_xycfap
GAS LISTING solo_forth.z80s 			page 187


     solo_forth.z80s:7491   .data:00000f07 at_xylfa
     solo_forth.z80s:7491   .data:00000f09 at_xynfa
     solo_forth.z80s:7565   .text:00001c15 at_xypfa
     solo_forth.z80s:7587   .text:00001c2c at_pfa.last_line
     solo_forth.z80s:7491   .data:00000f0f border_cfap
     solo_forth.z80s:7491   .data:00000f11 border_lfa
     solo_forth.z80s:7491   .data:00000f13 border_nfa
     solo_forth.z80s:7601   .text:00001c53 border_pfa
     solo_forth.z80s:7624   .text:00001c5e border.end
     solo_forth.z80s:7633   .text:00001c67 overwrite_
     solo_forth.z80s:7491   .data:00000f1a overwrite_cfap
     solo_forth.z80s:7491   .data:00000f1c overwrite_lfa
     solo_forth.z80s:7491   .data:00000f1e overwrite_nfa
     solo_forth.z80s:7633   .text:00001c69 overwrite_pfa
     solo_forth.z80s:7667   .text:00001c8e color
     solo_forth.z80s:7639   .text:00001c6e flash_
     solo_forth.z80s:7491   .data:00000f28 flash_cfap
     solo_forth.z80s:7491   .data:00000f2a flash_lfa
     solo_forth.z80s:7491   .data:00000f2c flash_nfa
     solo_forth.z80s:7639   .text:00001c70 flash_pfa
     solo_forth.z80s:7645   .text:00001c75 inverse_
     solo_forth.z80s:7491   .data:00000f32 inverse_cfap
     solo_forth.z80s:7645   .data:00000f34 inverse_lfa
     solo_forth.z80s:7645   .data:00000f36 inverse_nfa
     solo_forth.z80s:7645   .text:00001c77 inverse_pfa
     solo_forth.z80s:7651   .text:00001c7c bright_
     solo_forth.z80s:7645   .data:00000f3e bright_cfap
     solo_forth.z80s:7645   .data:00000f40 bright_lfa
     solo_forth.z80s:7645   .data:00000f42 bright_nfa
     solo_forth.z80s:7651   .text:00001c7e bright_pfa
     solo_forth.z80s:7657   .text:00001c83 paper_
     solo_forth.z80s:7645   .data:00000f49 paper_cfap
     solo_forth.z80s:7645   .data:00000f4b paper_lfa
     solo_forth.z80s:7645   .data:00000f4d paper_nfa
     solo_forth.z80s:7657   .text:00001c85 paper_pfa
     solo_forth.z80s:7663   .text:00001c8a ink_
     solo_forth.z80s:7645   .data:00000f53 ink_cfap
     solo_forth.z80s:7645   .data:00000f55 ink_lfa
     solo_forth.z80s:7645   .data:00000f57 ink_nfa
     solo_forth.z80s:7663   .text:00001c8c ink_pfa
     solo_forth.z80s:7681   .text:00001c97 emitted_
     solo_forth.z80s:7645   .data:00000f5b emitted_cfap
     solo_forth.z80s:7645   .data:00000f5d emitted_lfa
     solo_forth.z80s:7645   .data:00000f5f emitted_nfa
     solo_forth.z80s:7681   .text:00001c99 emitted_pfa
     solo_forth.z80s:7786   .text:00001cea emitted_charset_pfa
     solo_forth.z80s:7801   .text:00001cee hash_emitted_chars_pfa
     solo_forth.z80s:7737   .text:00001cb3 emitted.do
     solo_forth.z80s:7749   .text:00001cc0 emitted.match
     solo_forth.z80s:7770   .text:00001cd8 emitted.next_char
     solo_forth.z80s:7752   .text:00001cc3 emitted.scans
     solo_forth.z80s:7780   .text:00001ce2 emitted.end
     solo_forth.z80s:7786   .text:00001ce8 emitted_charset_
     solo_forth.z80s:7645   .data:00000f67 emitted_charset_cfap
     solo_forth.z80s:7645   .data:00000f69 emitted_charset_lfa
     solo_forth.z80s:7645   .data:00000f6b emitted_charset_nfa
     solo_forth.z80s:7801   .text:00001cec hash_emitted_chars_
GAS LISTING solo_forth.z80s 			page 188


     solo_forth.z80s:7645   .data:00000f7b hash_emitted_chars_cfap
     solo_forth.z80s:7645   .data:00000f7d hash_emitted_chars_lfa
     solo_forth.z80s:7645   .data:00000f7f hash_emitted_chars_nfa
     solo_forth.z80s:7816   .text:00001cf0 j_
     solo_forth.z80s:7645   .data:00000f8e j_cfap
     solo_forth.z80s:7816   .data:00000f90 j_lfa
     solo_forth.z80s:7816   .data:00000f92 j_nfa
     solo_forth.z80s:7816   .text:00001cf2 j_pfa
     solo_forth.z80s:7832   .text:00001cfc two_constant_
     solo_forth.z80s:7816   .data:00000f94 two_constant_cfap
     solo_forth.z80s:7816   .data:00000f96 two_constant_lfa
     solo_forth.z80s:7816   .data:00000f98 two_constant_nfa
     solo_forth.z80s:7832   .text:00001cfe two_constant_pfa
     solo_forth.z80s:7842   .text:00001d07 two_variable_
     solo_forth.z80s:7836   .text:00001d02 do_two_constant
     solo_forth.z80s:7816   .data:00000fa2 two_variable_cfap
     solo_forth.z80s:7816   .data:00000fa4 two_variable_lfa
     solo_forth.z80s:7816   .data:00000fa6 two_variable_nfa
     solo_forth.z80s:7842   .text:00001d09 two_variable_pfa
     solo_forth.z80s:7867   .text:00001d13 u_dot_r_
     solo_forth.z80s:7816   .data:00000fb0 u_dot_r_cfap
     solo_forth.z80s:7816   .data:00000fb2 u_dot_r_lfa
     solo_forth.z80s:7816   .data:00000fb4 u_dot_r_nfa
     solo_forth.z80s:7867   .text:00001d15 u_dot_r_pfa
     solo_forth.z80s:7873   .text:00001d1f two_over_
     solo_forth.z80s:7816   .data:00000fb8 two_over_cfap
     solo_forth.z80s:7816   .data:00000fba two_over_lfa
     solo_forth.z80s:7816   .data:00000fbc two_over_nfa
     solo_forth.z80s:7873   .text:00001d21 two_over_pfa
     solo_forth.z80s:7816   .data:00000fc2 exit_cfap
     solo_forth.z80s:7816   .data:00000fc4 exit_lfa
     solo_forth.z80s:7816   .data:00000fc6 exit_nfa
     solo_forth.z80s:7888   .text:00001d2a exit_pfa
     solo_forth.z80s:7816   .data:00000fcb question_exit_cfap
     solo_forth.z80s:7816   .data:00000fcd question_exit_lfa
     solo_forth.z80s:7816   .data:00000fcf question_exit_nfa
     solo_forth.z80s:7908   .text:00001d30 question_exit_pfa
     solo_forth.z80s:7951   .text:00001d36 char_
     solo_forth.z80s:7816   .data:00000fd5 char_cfap
     solo_forth.z80s:7816   .data:00000fd7 char_lfa
     solo_forth.z80s:7816   .data:00000fd9 char_nfa
     solo_forth.z80s:7951   .text:00001d38 char_pfa
     solo_forth.z80s:7957   .text:00001d40 bracket_char_
     solo_forth.z80s:7816   .data:00000fde bracket_char_cfap
     solo_forth.z80s:7816   .data:00000fe0 bracket_char_lfa
     solo_forth.z80s:7816   .data:00000fe2 bracket_char_nfa
     solo_forth.z80s:7957   .text:00001d42 bracket_char_pfa
     solo_forth.z80s:7964   .text:00001d48 s_quote_
     solo_forth.z80s:7816   .data:00000fe9 s_quote_cfap
     solo_forth.z80s:7964   .data:00000feb s_quote_lfa
     solo_forth.z80s:7964   .data:00000fed s_quote_nfa
     solo_forth.z80s:7964   .text:00001d4a s_quote_pfa
     solo_forth.z80s:7974   .text:00001d51 question_next_screen_
     solo_forth.z80s:7964   .data:00000ff3 question_next_screen_cfap
     solo_forth.z80s:7964   .data:00000ff5 question_next_screen_lfa
     solo_forth.z80s:7964   .data:00000ff7 question_next_screen_nfa
     solo_forth.z80s:7974   .text:00001d53 question_next_screen_pfa
GAS LISTING solo_forth.z80s 			page 189


     solo_forth.z80s:7978   .text:00001d59 question_next_screen.end
     solo_forth.z80s:7986   .text:00001d5b question_backslash_
     solo_forth.z80s:7964   .data:00000ffc question_backslash_cfap
     solo_forth.z80s:7964   .data:00000ffe question_backslash_lfa
     solo_forth.z80s:7964   .data:00001000 question_backslash_nfa
     solo_forth.z80s:7986   .text:00001d5d question_backslash_pfa
     solo_forth.z80s:7999   .text:00001d63 question_backslash.end
     solo_forth.z80s:8003   .text:00001d65 backslash_
     solo_forth.z80s:7964   .data:00001004 backslash_cfap
     solo_forth.z80s:7964   .data:00001006 backslash_lfa
     solo_forth.z80s:7964   .data:00001008 backslash_nfa
     solo_forth.z80s:8003   .text:00001d67 backslash_pfa
     solo_forth.z80s:8019   .text:00001d7b dot_paren_
     solo_forth.z80s:7964   .data:0000100b dot_paren_cfap
     solo_forth.z80s:7964   .data:0000100d dot_paren_lfa
     solo_forth.z80s:7964   .data:0000100f dot_paren_nfa
     solo_forth.z80s:8019   .text:00001d7d dot_paren_pfa

NO UNDEFINED SYMBOLS
