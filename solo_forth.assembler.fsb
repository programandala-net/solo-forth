.( Assembler )

\ solo_forth.assembler.fsb
\ Assembler for Solo Forth

\ Copyright (C) 2015 Marcos Cruz (programandala.net)
\ Copyright (C) 1988? Coos Haak

\ This file is part of Solo Forth
\ http://programandala.net/en.program.solo_forth.html

\ This is a modified version of an assembler designed by Coos
\ Haak for his own Forth, and used by Lennart Benschop with his
\ Spectrum Forth-83 (1988).

  \ Copying and distribution of this file, with or without
  \ modification, are permitted in any medium without royalty
  \ provided the copyright notice and this notice are
  \ preserved.  This file is offered as-is, without any
  \ warranty.

  \ -----------------------------------------------------------
  \ Differences from the original version

  \ Beside converting the code from the Forth-83 Standard to
  \ fig-Forth, some changes were done during the conversion:

  \ Also the pair registers BC, DE and HL can be used.
  \ Example: both `1 B LDP#` and `1 BC LDP#` are valid and
  \ produce the same machine code.

  \ `(HL)` can be used instead of `M`.

  \ Special mnemonic `0OUTBC` is provided.

  \ The condition flag operator `NOT` is removed; the condition
  \ flag `v` is removed. The condition flags are completed,
  \ including their opposite versions.

  \ Changed names:
  \ `INC` --> `INCP`;
  \ `INR` --> `INC`;
  \ `DEC` --> `DECP`;
  \ `DER` --> `DEC`.

  \ The set of conditional calls and returns has been completed
  \ (the original included only `CALLC` and `RETC`).

  \ Comments have been added.

  \ Case insensitive.

  \ -----------------------------------------------------------
  \ History

  \ 2015-07-04: Copied from the  Afera library.
  
  \ -----------------------------------------------------------

FORTH DEFINITIONS

: 8* 2* 2* 2* ;

-->

( Registers )

: [ASSEMBLER]  ( -- )  assembler  ; IMMEDIATE
ASSEMBLER DEFINITIONS HEX

0 CONSTANT B   1 CONSTANT C   2 CONSTANT D   3 CONSTANT E
4 CONSTANT H   5 CONSTANT L   6 CONSTANT M   7 CONSTANT A

0 CONSTANT BC  2 CONSTANT DE  4 CONSTANT HL
6 CONSTANT SP  6 CONSTANT AF                 6 CONSTANT (HL)

DD CONSTANT IX-OP  FD CONSTANT IY-OP

IX-OP VARIABLE XY  : %X IX-OP XY ! ; : %Y IY-OP XY ! ;

: XY, XY @ C, ; : XL XY, L ; : XH XY, H ;
: IX IX-OP C, HL ; : IY IY-OP C, HL ;
: ?PAGE  ( n -- ) DUP 80 + FF SWAP U<
  IF ." Branch too long" ABORT THEN ;

-->

( Words for defining the Z80 instructions)

: M1 ( n "name" -- )
  \ 1-byte opcode without parameters.
  <BUILDS C, DOES> C@ C, ;

: M2 ( n "name" -- )
  \ 1-byte opcode with register encoded in bits 0-3.
  <BUILDS C, DOES> C@ + C, ;

: M3 ( n "name" -- )
  \ 1-byte opcode with register encoded in bits 3-5.
  <BUILDS C, DOES> C@ SWAP 8* + C, ;

: M4 ( n "name" -- )
  \ 1-byte opcode with 1-byte parameter.
  <BUILDS C, DOES> C@ C, C, ;

: M5 ( n "name" -- )
  \ 1-byte opcode with 2-byte parameter.
  <BUILDS C, DOES> C@ C, , ;

: M6 ( n "name" -- )
  \ Rotation of registers.
  <BUILDS C, DOES> CB C, C@ + C, ;

  -->

( Words for defining the Z80 instructions)

: M7 ( n "name" -- )
  \ Bit manipulation of registers.
  <BUILDS C, DOES> CB C, C@ + SWAP 8* + C, ;

: M8 ( n "name" -- )
  \ 2-byte opcodes.
  <BUILDS , DOES> @ , ;

: M9 ( n "name" -- )
  \ Relative jumps.
  <BUILDS C, DOES> C@ C, HERE 1+ - ?PAGE C, ;

: MA ( n "name" -- )
  \ Index registers with register.
  <BUILDS C, DOES> XY, C@ C, C, ;

: MB ( n "name" -- )
  \ Rotation with index registers.
  <BUILDS C, DOES> XY, CB C, C@ SWAP C, C, ;

: MC ( n "name" -- )
  \ Bit manipulation with index registers.
  <BUILDS C, DOES> XY, CB C, C@ ROT ROT C, 8* + C, ;

  -->

( Opcodes )

00 M1 NOP 02 M3 STAP 03 M3 INCP 04 M3 INC 05 M3 DEC 07 M1 RLCA
08 M1 EXAF 09 M3 ADDP 0A M3 LDAP 0B M3 DECP 0F M1 RRCA
10 M9 DJNZ 17 M1 RLA 18 M9 JR  1F M1 RRA 20 M9 JRNZ 22 M5 STHL
27 M1 DAA 28 M9 JRZ 2A M5 LDHL 2F M1 CPL 30 M9 JRNC 32 M5 STA
37 M1 SCF 38 M9 JRC 3A M5 LDA 3F M1 CCF 76 M1 HALT 80 M2 ADD
88 M2 ADC 90 M2 SUB 98 M2 SBC B8 M2 CP C1 M3 POP C2 M5 JPNZ
C3 M5 JP C5 M3 PUSH C6 M4 ADD# C7 M2 RST C9 M1 RET CA M5 JPZ
CD M5 CALL CE M4 ADC# D2 M5 JPNC D3 M4 OUT 41 M3 OUTBC
D6 M4 SUB# D9 M1 EXX DA M5 JPC DB M4 IN 40 M3 INBC DE M4 SBC#
E2 M5 JPPO E3 M1 EXSP E6 M4 AND# E9 M1 JPHL EA M5 JPPE
EB M1 EXDE EE M4 XOR# F2 M5 JPP F3 M1 DI  F6 M4 OR# F9 M1 LDSP
FA M5 JPM FB M1 EI FE M4 CP# 00 M6 RLC 08 M6 RRC 10 M6 RL
18 M6 RR 20 M6 SLA  28 M6 SRA 38 M6 SRL  40 M7 BIT 80 M7 RES
C0 M7 SET B0ED M8 LDIR B8ED M8 LDDR 44ED M8 NEG 57ED M8 LDAI
47ED M8 LDIA 56ED M8 IM1 5EED M8 IM2 B1ED M8 CPIR         -->

( Opcodes)

: 0OUTBC ED C, 71 C, ;
: JPIX IX-OP C, JPHL ;
: LDP# ( 16b rps -- ) 8* 1+ C,  , ;
: LDIX# ( 16b rps -- ) 8* 1+ C,  , ; \ XXX TODO
: LD# ( 8b r -- ) 8* 06 + C, C, ;
: LD ( r1 r2 -- ) 8* 40 + + C, ;
: SBCP ED C, 8* 42 + C, ;
: ADCP ED C, 8* 4A + C, ;
: STP ED C, 8* 43 + C, , ;
: LDP ED C, 8* 4B + C, , ;

  \ Macros

: CLR  0 SWAP LDP# ;
: MOV  2DUP LD 1+ SWAP 1+ SWAP LD ;

  \ ZX Spectrum specific

CF M4 HOOK \ RST 8
D7 M1 PRT  \ RST 0x16

-->

( Index register opcodes)

86 MA )ADD 8E MA )ADC 96 MA )SUB 9E MA )SBC A6 MA )AND
AE MA )XOR B6 MA )OR  BE MA )CP  34 MA )INC 35 MA )DEC
06 MB )RLC 0E MB )RRC 16 MB )RL  1E MB )RR  26 MB )SLA
2E MB )SRA 3E MB )SRL 46 MC )BIT 86 MC )RES C6 MC )SET

: )LD XY, SWAP 8* 46 + C, C, ;
: )ST XY, SWAP 70 + C, C, ; : )LD# XY, 36 C, C, C, ;
: )LDP OVER 1+ OVER )LD 1+ )LD ;
: )STP OVER 1+ OVER )ST 1+ )ST ;

-->

( Condition codes, conditional RET and CALL)

  \ Condition codes for relative jumps

20 CONSTANT Z  28 CONSTANT NZ 30 CONSTANT CY 38 CONSTANT NC

  \ Condition codes for absolute jumps

C2 CONSTANT z'  CA CONSTANT nz' D2 CONSTANT cy' DA CONSTANT nc'
E2 CONSTANT pe' EA CONSTANT po' F2 CONSTANT m'  FA CONSTANT p'

  \ Conditional RET

: ?RET 8 XOR 2- C, ;
: RETC cy' ?RET ;    : RETNC nc' ?RET ;
: RETZ z' ?RET ;     : RETNZ nz' ?RET ;
: RETM m' ?RET ;     : RETP p' ?RET ;
: RETPE pe' ?RET ;   : RETPO po' ?RET ;

  \ Conditional CALL

: ?CALL 8 XOR 2+ C, , ;
: CALLC cy' ?CALL ;    : CALLNC nc' ?CALL ;
: CALLZ z' ?CALL ;     : CALLNZ nz' ?CALL ;
: CALLM m' ?CALL ;     : CALLP p' ?CALL ;
: CALLPE pe' ?CALL ;   : CALLPO po' ?CALL ; 

-->

( Control structures and last opcodes)

  \ Control structures created with relative jumps

: THEN 0A ?PAIRS HERE 1- OVER - ?PAGE SWAP C! ;
: IF , HERE 1- 0A ;
: ELSE 0A ?PAIRS 18 IF ROT SWAP THEN 0A ;
: UNTIL , 0B ?PAIRS 1- HERE 1- SWAP OVER - ?PAGE SWAP C! ;
: BEGIN HERE 0B ;  : AGAIN 18 UNTIL ;
: DSZ 10 UNTIL ;   : REPEAT 2SWAP AGAIN 2- THEN ;
: WHILE IF 2+ ;

  \ Control structures created with absolute jumps

: then' 08 ?PAIRS HERE SWAP ! ;  : if' C, HERE 0 , 08 ;
: else' 08 ?PAIRS C3 if' ROT SWAP then' 08 ;
: begin' HERE 09 ;  : until' C, 09 ?PAIRS , ;
: while' if' 2+ ;    : again' C3 until' ;
: repeat' 2SWAP again' 2- then' ;

  \ Last opcodes

  \ `AND`, `OR` and `XOR` are defined at the end, in order to
  \ avoid name clashes with the Forth words that have the same
  \ name:

A0 M2 AND  B0 M2 OR  A8 M2 XOR

: SUBP A AND SBCP ;  : TST DUP A LD 1+ OR ;

-->

( Defining words)

: END-CODE ( -- )
  \ End the definition of an assembler word.
  DECIMAL ?CSP SMUDGE ;

: ;C ( -- ) [COMPILE] END-CODE ; IMMEDIATE

FORTH DEFINITIONS

  \ Macros \ XXX TODO -- test it
: MACRO ( "name -- ) [COMPILE] ASSEMBLER [COMPILE] : ;
: ENDM ( -- ) [COMPILE] ; ;

: ASM ( -- )
  \ Enter assembler mode.
  [COMPILE] ASSEMBLER HEX  ASSEMBLER %X  FORTH !CSP ;

: LABEL ( "name" -- )
  \ Create a subroutine or data label.
  VARIABLE -2 ALLOT ASM ;

: CODE ( "name" -- )
  \ Create an assembler word.
  CREATE ASM ;

  \ XXX TODO check if `(;CODE)` works in Abersoft Forth
: ;CODE ( -- )
  \ Add assembler code to a high level definition.
  COMPILE (;CODE) ?CSP ASM [COMPILE] [ ; IMMEDIATE

DECIMAL

  \ vim: filetype=abersoftforthafera
